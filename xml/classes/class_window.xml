<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_window.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Window.xml.</comment>
    <target refid="class-window"></target>
    <section ids="window class-window" names="window class_window">
        <title>Window</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_acceptdialog#class-acceptdialog"><inline classes="std std-ref">AcceptDialog</inline></reference>, <reference internal="True" refuri="class_popup#class-popup"><inline classes="std std-ref">Popup</inline></reference></paragraph>
        <paragraph>所有窗口、对话框、弹出框的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>创建窗口的节点。窗口可以是原生系统窗口，也可以是嵌入到其他 <strong>Window</strong> 中的窗口（见 <reference internal="True" refuri="class_viewport#class-viewport-property-gui-embed-subwindows"><inline classes="std std-ref">Viewport.gui_embed_subwindows</inline></reference>）。</paragraph>
            <paragraph>运行时，<strong>Window</strong> 不会在请求关闭时自动关闭。你需要使用 <reference internal="True" refid="class-window-signal-close-requested"><inline classes="std std-ref">close_requested</inline></reference> 信号手动处理（适用于点击关闭按钮和点击弹出窗口外部）。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="65"></colspec>
                    <colspec colwidth="83"></colspec>
                    <colspec colwidth="26"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-always-on-top"><inline classes="std std-ref">always_on_top</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-auto-translate"><inline classes="std std-ref">auto_translate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-borderless"><inline classes="std std-ref">borderless</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-window-contentscaleaspect"><inline classes="std std-ref">ContentScaleAspect</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-content-scale-aspect"><inline classes="std std-ref">content_scale_aspect</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-content-scale-factor"><inline classes="std std-ref">content_scale_factor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-window-contentscalemode"><inline classes="std std-ref">ContentScaleMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-content-scale-mode"><inline classes="std std-ref">content_scale_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-content-scale-size"><inline classes="std std-ref">content_scale_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2i(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-window-contentscalestretch"><inline classes="std std-ref">ContentScaleStretch</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-content-scale-stretch"><inline classes="std std-ref">content_scale_stretch</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-current-screen"><inline classes="std std-ref">current_screen</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-exclusive"><inline classes="std std-ref">exclusive</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-extend-to-title"><inline classes="std std-ref">extend_to_title</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-window-windowinitialposition"><inline classes="std std-ref">WindowInitialPosition</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-initial-position"><inline classes="std std-ref">initial_position</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-keep-title-visible"><inline classes="std std-ref">keep_title_visible</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-max-size"><inline classes="std std-ref">max_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2i(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-min-size"><inline classes="std std-ref">min_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2i(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-window-mode"><inline classes="std std-ref">Mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-mode"><inline classes="std std-ref">mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-mouse-passthrough"><inline classes="std std-ref">mouse_passthrough</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-mouse-passthrough-polygon"><inline classes="std std-ref">mouse_passthrough_polygon</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedVector2Array()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-popup-window"><inline classes="std std-ref">popup_window</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-position"><inline classes="std std-ref">position</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2i(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-size"><inline classes="std std-ref">size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2i(100, 100)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-theme"><inline classes="std std-ref">theme</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-theme-type-variation"><inline classes="std std-ref">theme_type_variation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>&amp;""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-title"><inline classes="std std-ref">title</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-transient"><inline classes="std std-ref">transient</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-transparent"><inline classes="std std-ref">transparent</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-unfocusable"><inline classes="std std-ref">unfocusable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-unresizable"><inline classes="std std-ref">unresizable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-visible"><inline classes="std std-ref">visible</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-property-wrap-controls"><inline classes="std std-ref">wrap_controls</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="244"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-private-method-get-contents-minimum-size"><inline classes="std std-ref">_get_contents_minimum_size</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-add-theme-color-override"><inline classes="std std-ref">add_theme_color_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-add-theme-constant-override"><inline classes="std std-ref">add_theme_constant_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> constant <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-add-theme-font-override"><inline classes="std std-ref">add_theme_font_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> font <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-add-theme-font-size-override"><inline classes="std std-ref">add_theme_font_size_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-add-theme-icon-override"><inline classes="std std-ref">add_theme_icon_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> texture <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-add-theme-stylebox-override"><inline classes="std std-ref">add_theme_stylebox_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> stylebox <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-begin-bulk-theme-override"><inline classes="std std-ref">begin_bulk_theme_override</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-can-draw"><inline classes="std std-ref">can_draw</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-child-controls-changed"><inline classes="std std-ref">child_controls_changed</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-end-bulk-theme-override"><inline classes="std std-ref">end_bulk_theme_override</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-contents-minimum-size"><inline classes="std std-ref">get_contents_minimum_size</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-flag"><inline classes="std std-ref">get_flag</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-window-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-layout-direction"><inline classes="std std-ref">get_layout_direction</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-position-with-decorations"><inline classes="std std-ref">get_position_with_decorations</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-size-with-decorations"><inline classes="std std-ref">get_size_with_decorations</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-theme-constant"><inline classes="std std-ref">get_theme_constant</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-theme-default-base-scale"><inline classes="std std-ref">get_theme_default_base_scale</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-theme-default-font"><inline classes="std std-ref">get_theme_default_font</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-theme-default-font-size"><inline classes="std std-ref">get_theme_default_font_size</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-theme-font"><inline classes="std std-ref">get_theme_font</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-theme-font-size"><inline classes="std std-ref">get_theme_font_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-theme-icon"><inline classes="std std-ref">get_theme_icon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-theme-stylebox"><inline classes="std std-ref">get_theme_stylebox</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-get-window-id"><inline classes="std std-ref">get_window_id</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-grab-focus"><inline classes="std std-ref">grab_focus</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-focus"><inline classes="std std-ref">has_focus</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-theme-color"><inline classes="std std-ref">has_theme_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-theme-color-override"><inline classes="std std-ref">has_theme_color_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-theme-constant"><inline classes="std std-ref">has_theme_constant</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-theme-constant-override"><inline classes="std std-ref">has_theme_constant_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-theme-font"><inline classes="std std-ref">has_theme_font</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-theme-font-override"><inline classes="std std-ref">has_theme_font_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-theme-font-size"><inline classes="std std-ref">has_theme_font_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-theme-font-size-override"><inline classes="std std-ref">has_theme_font_size_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-theme-icon"><inline classes="std std-ref">has_theme_icon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-theme-icon-override"><inline classes="std std-ref">has_theme_icon_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-theme-stylebox"><inline classes="std std-ref">has_theme_stylebox</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-has-theme-stylebox-override"><inline classes="std std-ref">has_theme_stylebox_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-hide"><inline classes="std std-ref">hide</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-is-embedded"><inline classes="std std-ref">is_embedded</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-is-layout-rtl"><inline classes="std std-ref">is_layout_rtl</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-is-maximize-allowed"><inline classes="std std-ref">is_maximize_allowed</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-is-using-font-oversampling"><inline classes="std std-ref">is_using_font_oversampling</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-move-to-center"><inline classes="std std-ref">move_to_center</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-move-to-foreground"><inline classes="std std-ref">move_to_foreground</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-popup"><inline classes="std std-ref">popup</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> rect=Rect2i(0, 0, 0, 0) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-popup-centered"><inline classes="std std-ref">popup_centered</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> minsize=Vector2i(0, 0) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-popup-centered-clamped"><inline classes="std std-ref">popup_centered_clamped</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> minsize=Vector2i(0, 0), <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> fallback_ratio=0.75 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-popup-centered-ratio"><inline classes="std std-ref">popup_centered_ratio</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> ratio=0.8 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-popup-exclusive"><inline classes="std std-ref">popup_exclusive</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> from_node, <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> rect=Rect2i(0, 0, 0, 0) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-popup-exclusive-centered"><inline classes="std std-ref">popup_exclusive_centered</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> from_node, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> minsize=Vector2i(0, 0) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-popup-exclusive-centered-clamped"><inline classes="std std-ref">popup_exclusive_centered_clamped</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> from_node, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> minsize=Vector2i(0, 0), <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> fallback_ratio=0.75 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-popup-exclusive-centered-ratio"><inline classes="std std-ref">popup_exclusive_centered_ratio</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> from_node, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> ratio=0.8 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-popup-exclusive-on-parent"><inline classes="std std-ref">popup_exclusive_on_parent</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> from_node, <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> parent_rect <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-popup-on-parent"><inline classes="std std-ref">popup_on_parent</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> parent_rect <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-remove-theme-color-override"><inline classes="std std-ref">remove_theme_color_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-remove-theme-constant-override"><inline classes="std std-ref">remove_theme_constant_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-remove-theme-font-override"><inline classes="std std-ref">remove_theme_font_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-remove-theme-font-size-override"><inline classes="std std-ref">remove_theme_font_size_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-remove-theme-icon-override"><inline classes="std std-ref">remove_theme_icon_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-remove-theme-stylebox-override"><inline classes="std std-ref">remove_theme_stylebox_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-request-attention"><inline classes="std std-ref">request_attention</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-reset-size"><inline classes="std std-ref">reset_size</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-set-flag"><inline classes="std std-ref">set_flag</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-set-ime-active"><inline classes="std std-ref">set_ime_active</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> active <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-set-ime-position"><inline classes="std std-ref">set_ime_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> position <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-set-layout-direction"><inline classes="std std-ref">set_layout_direction</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-window-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> direction <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-set-unparent-when-invisible"><inline classes="std std-ref">set_unparent_when_invisible</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> unparent <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-set-use-font-oversampling"><inline classes="std std-ref">set_use_font_oversampling</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enable <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-method-show"><inline classes="std std-ref">show</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="主题属性">
            <title>主题属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="86"></colspec>
                    <colspec colwidth="35"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-color-title-color"><inline classes="std std-ref">title_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-color-title-outline-modulate"><inline classes="std std-ref">title_outline_modulate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-constant-close-h-offset"><inline classes="std std-ref">close_h_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>18</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-constant-close-v-offset"><inline classes="std std-ref">close_v_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>24</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-constant-resize-margin"><inline classes="std std-ref">resize_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-constant-title-height"><inline classes="std std-ref">title_height</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>36</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-constant-title-outline-size"><inline classes="std std-ref">title_outline_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-font-title-font"><inline classes="std std-ref">title_font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-font-size-title-font-size"><inline classes="std std-ref">title_font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-icon-close"><inline classes="std std-ref">close</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-icon-close-pressed"><inline classes="std std-ref">close_pressed</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-style-embedded-border"><inline classes="std std-ref">embedded_border</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-window-theme-style-embedded-unfocused-border"><inline classes="std std-ref">embedded_unfocused_border</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-window-signal-about-to-popup"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-about-to-popup" names="class_window_signal_about_to_popup"><strong>about_to_popup</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在调用 <reference internal="True" refid="class-window-method-popup"><inline classes="std std-ref">popup</inline></reference> 之后但在 <strong>Window</strong> 出现或执行任何操作之前发送的信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-signal-close-requested"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-close-requested" names="class_window_signal_close_requested"><strong>close_requested</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>按下该 <strong>Window</strong> 的关闭按钮或启用 <reference internal="True" refid="class-window-property-popup-window"><inline classes="std std-ref">popup_window</inline></reference> 并且用户在窗口外点击时发出。</paragraph>
            <paragraph>这个信号可以用来处理窗口的关闭，例如将其连接到 <reference internal="True" refid="class-window-method-hide"><inline classes="std std-ref">hide</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-signal-dpi-changed"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-dpi-changed" names="class_window_signal_dpi_changed"><strong>dpi_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>该 <strong>Window</strong> 的 DPI 由于操作系统级别的更改而发生更改时发出（例如将该窗口从 Retina 屏幕移动到了更低分辨率的屏幕）。</paragraph>
            <paragraph><strong>注意：</strong>仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-signal-files-dropped"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-files-dropped" names="class_window_signal_files_dropped"><strong>files_dropped</strong> <strong>(</strong> <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> files <strong>)</strong></paragraph>
            <paragraph>将文件从操作系统文件管理器拖放到游戏窗口时发出。参数为文件路径列表。</paragraph>
            <paragraph>请注意，这个方法仅适用于原生窗口，即主窗口和禁用主视口 <reference internal="True" refuri="class_viewport#class-viewport-property-gui-embed-subwindows"><inline classes="std std-ref">Viewport.gui_embed_subwindows</inline></reference> 时的 <strong>Window</strong> 派生节点。</paragraph>
            <paragraph>示例用法：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    get_viewport().files_dropped.connect(on_files_dropped)

func on_files_dropped(files):
    print(files)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-signal-focus-entered"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-focus-entered" names="class_window_signal_focus_entered"><strong>focus_entered</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>当该 <strong>Window</strong> 获得焦点时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-signal-focus-exited"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-focus-exited" names="class_window_signal_focus_exited"><strong>focus_exited</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>当该 <strong>Window</strong> 失去焦点时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-signal-go-back-requested"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-go-back-requested" names="class_window_signal_go_back_requested"><strong>go_back_requested</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>发送返回请求时，在 <reference internal="True" refuri="class_node#class-node-constant-notification-wm-go-back-request"><inline classes="std std-ref">Node.NOTIFICATION_WM_GO_BACK_REQUEST</inline></reference> 之后发出（例如在 Android 上按下“返回”按钮）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-signal-mouse-entered"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-mouse-entered" names="class_window_signal_mouse_entered"><strong>mouse_entered</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>当鼠标光标进入 <strong>Window</strong> 的可见区域时发出，该区域未被其他 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 或窗口遮挡，只要其 <reference internal="True" refuri="class_viewport#class-viewport-property-gui-disable-input"><inline classes="std std-ref">Viewport.gui_disable_input</inline></reference> 为 <literal>false</literal> 并且无论它当前聚焦与否。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-signal-mouse-exited"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-mouse-exited" names="class_window_signal_mouse_exited"><strong>mouse_exited</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>当鼠标光标离开 <strong>Window</strong> 的可见区域时发出，该区域未被其他 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 或窗口遮挡，只要其 <reference internal="True" refuri="class_viewport#class-viewport-property-gui-disable-input"><inline classes="std std-ref">Viewport.gui_disable_input</inline></reference> 为 <literal>false</literal> 并且无论它当前聚焦与否。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-signal-theme-changed"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-theme-changed" names="class_window_signal_theme_changed"><strong>theme_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>发送 <reference internal="True" refid="class-window-constant-notification-theme-changed"><inline classes="std std-ref">NOTIFICATION_THEME_CHANGED</inline></reference> 通知时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-signal-titlebar-changed"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-titlebar-changed" names="class_window_signal_titlebar_changed"><strong>titlebar_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>窗口标题栏装饰发生改变时发出，例如 macOS 窗口进入/退出全屏模式，或者“扩展至标题”标志发生改变。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-signal-visibility-changed"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-visibility-changed" names="class_window_signal_visibility_changed"><strong>visibility_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>显示或隐藏该 <strong>Window</strong> 时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-signal-window-input"></target>
            <paragraph classes="classref-signal" ids="class-window-signal-window-input" names="class_window_signal_window_input"><strong>window_input</strong> <strong>(</strong> <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> event <strong>)</strong></paragraph>
            <paragraph>该 <strong>Window</strong> 持有焦点并收到任何输入时发出，会把收到的事件作为参数传入。该事件如果存在位置属性，该位置使用嵌入器的坐标系。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-window-mode"></target>
            <paragraph classes="classref-enumeration" ids="enum-window-mode" names="enum_window_mode">enum <strong>Mode</strong>:</paragraph>
            <target refid="class-window-constant-mode-windowed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-mode-windowed" names="class_window_constant_mode_windowed"><reference internal="True" refid="enum-window-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_WINDOWED</strong> = <literal>0</literal></paragraph>
            <paragraph>窗口模式，即 <strong>Window</strong> 不占据整个屏幕（除非设置为屏幕的大小）。</paragraph>
            <target refid="class-window-constant-mode-minimized"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-mode-minimized" names="class_window_constant_mode_minimized"><reference internal="True" refid="enum-window-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_MINIMIZED</strong> = <literal>1</literal></paragraph>
            <paragraph>最小化窗口模式，即 <strong>Window</strong> 在窗口管理器的窗口列表中既不可见也不可用。通常发生在按下最小化按钮时。</paragraph>
            <target refid="class-window-constant-mode-maximized"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-mode-maximized" names="class_window_constant_mode_maximized"><reference internal="True" refid="enum-window-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_MAXIMIZED</strong> = <literal>2</literal></paragraph>
            <paragraph>最大化窗口模式，即 <strong>Window</strong> 会占据整个屏幕区域，任务栏除外，并且会显示边框。通常发生在按下最大化按钮时。</paragraph>
            <target refid="class-window-constant-mode-fullscreen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-mode-fullscreen" names="class_window_constant_mode_fullscreen"><reference internal="True" refid="enum-window-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_FULLSCREEN</strong> = <literal>3</literal></paragraph>
            <paragraph>具有完整多窗口支持的全屏模式。</paragraph>
            <paragraph>全屏窗口覆盖屏幕的整个显示区域，且没有任何装饰。显示的视频模式没有更改。</paragraph>
            <paragraph><strong>在 Windows 上：</strong>多窗口全屏模式具有 1px 宽的颜色为 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-environment-defaults-default-clear-color"><inline classes="std std-ref">ProjectSettings.rendering/environment/defaults/default_clear_color</inline></reference> 的边框。</paragraph>
            <paragraph><strong>在 macOS 上：</strong>使用新桌面来显示正在运行的项目。</paragraph>
            <paragraph><strong>注意：</strong>无论平台如何，启用全屏都会更改窗口大小以匹配显示器的大小。因此，请确保你的项目在启用全屏模式时支持<reference internal="True" refuri="../tutorials/rendering/multiple_resolutions"><inline classes="doc">多种分辨率</inline></reference>。</paragraph>
            <target refid="class-window-constant-mode-exclusive-fullscreen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-mode-exclusive-fullscreen" names="class_window_constant_mode_exclusive_fullscreen"><reference internal="True" refid="enum-window-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_EXCLUSIVE_FULLSCREEN</strong> = <literal>4</literal></paragraph>
            <paragraph>单窗口全屏模式。这种模式开销较小，但一次只能在给定屏幕上打开一个窗口（打开子窗口或切换应用程序会触发全屏过渡）。</paragraph>
            <paragraph>全屏窗口会覆盖屏幕的整个显示区域，没有边框或装饰。显示视频模式没有改变。</paragraph>
            <paragraph><strong>在 Windows 上：</strong>取决于视频驱动程序，全屏过渡可能会导致屏幕暂时变黑。</paragraph>
            <paragraph><strong>在 macOS 上：</strong>一个新的桌面用于显示正在运行的项目。当鼠标指针悬停在屏幕边缘时，独占全屏模式会阻止 Dock 和 Menu 出现。</paragraph>
            <paragraph><strong>在 Linux（X11）上：</strong>独占全屏模式会绕过合成器。</paragraph>
            <paragraph><strong>注意：</strong>无论平台如何，启用全屏都会更改窗口大小以匹配显示器的大小。因此，确保你的项目在启用全屏模式时支持<reference internal="True" refuri="../tutorials/rendering/multiple_resolutions"><inline classes="doc">多个分辨率</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-window-flags"></target>
            <paragraph classes="classref-enumeration" ids="enum-window-flags" names="enum_window_flags">enum <strong>Flags</strong>:</paragraph>
            <target refid="class-window-constant-flag-resize-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-flag-resize-disabled" names="class_window_constant_flag_resize_disabled"><reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_RESIZE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>该窗口不能通过拖动其调整大小的手柄来调整大小。仍然可以使用 <reference internal="True" refid="class-window-property-size"><inline classes="std std-ref">size</inline></reference> 来调整窗口的大小。这个标志对于全屏窗口来说是被忽略的。用 <reference internal="True" refid="class-window-property-unresizable"><inline classes="std std-ref">unresizable</inline></reference> 设置。</paragraph>
            <target refid="class-window-constant-flag-borderless"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-flag-borderless" names="class_window_constant_flag_borderless"><reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_BORDERLESS</strong> = <literal>1</literal></paragraph>
            <paragraph>该窗口没有原生标题栏和其他装饰。全屏窗口会忽略该标志。由 <reference internal="True" refid="class-window-property-borderless"><inline classes="std std-ref">borderless</inline></reference> 设置。</paragraph>
            <target refid="class-window-constant-flag-always-on-top"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-flag-always-on-top" names="class_window_constant_flag_always_on_top"><reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_ALWAYS_ON_TOP</strong> = <literal>2</literal></paragraph>
            <paragraph>该窗口漂浮在所有其他窗口之上。全屏窗口会忽略该标志。由 <reference internal="True" refid="class-window-property-always-on-top"><inline classes="std std-ref">always_on_top</inline></reference> 设置。</paragraph>
            <target refid="class-window-constant-flag-transparent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-flag-transparent" names="class_window_constant_flag_transparent"><reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_TRANSPARENT</strong> = <literal>3</literal></paragraph>
            <paragraph>该窗口的背景可以是透明的。使用 <reference internal="True" refid="class-window-property-transparent"><inline classes="std std-ref">transparent</inline></reference> 设置。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-display-window-per-pixel-transparency-allowed"><inline classes="std std-ref">ProjectSettings.display/window/per_pixel_transparency/allowed</inline></reference> 或该窗口的 <reference internal="True" refuri="class_viewport#class-viewport-property-transparent-bg"><inline classes="std std-ref">Viewport.transparent_bg</inline></reference> 为 <literal>false</literal>，则这个标志无效。</paragraph>
            <target refid="class-window-constant-flag-no-focus"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-flag-no-focus" names="class_window_constant_flag_no_focus"><reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_NO_FOCUS</strong> = <literal>4</literal></paragraph>
            <paragraph>该窗口无法被聚焦。无焦点窗口会忽略除鼠标点击之外的所有输入。由 <reference internal="True" refid="class-window-property-unfocusable"><inline classes="std std-ref">unfocusable</inline></reference> 设置。</paragraph>
            <target refid="class-window-constant-flag-popup"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-flag-popup" names="class_window_constant_flag_popup"><reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_POPUP</strong> = <literal>5</literal></paragraph>
            <paragraph>窗口为菜单或 <reference internal="True" refuri="class_optionbutton#class-optionbutton"><inline classes="std std-ref">OptionButton</inline></reference> 下拉菜单的一部分。窗口可见时无法更改这个标志。活动的弹出窗口会以独占的形式接收所有输入，但不会从其父窗口窃取焦点。用户在区域外点击或切换应用程序时，弹出窗口会自动关闭。弹出窗口必须设置临时父级（见 <reference internal="True" refid="class-window-property-transient"><inline classes="std std-ref">transient</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>这个标志在嵌入式窗口中无效（除非该窗口是 <reference internal="True" refuri="class_popup#class-popup"><inline classes="std std-ref">Popup</inline></reference>）。</paragraph>
            <target refid="class-window-constant-flag-extend-to-title"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-flag-extend-to-title" names="class_window_constant_flag_extend_to_title"><reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_EXTEND_TO_TITLE</strong> = <literal>6</literal></paragraph>
            <paragraph>窗口内容扩展到窗口的全部尺寸。与无边框窗口不同，框架保持不变，可以用来调整窗口的大小，标题栏是透明的，但有最小/最大/关闭按钮。用 <reference internal="True" refid="class-window-property-extend-to-title"><inline classes="std std-ref">extend_to_title</inline></reference> 设置。</paragraph>
            <paragraph><strong>注意：</strong>这个标志在 macOS 上实现。</paragraph>
            <paragraph><strong>注意：</strong>这个标志在嵌入式窗口中无效。</paragraph>
            <target refid="class-window-constant-flag-mouse-passthrough"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-flag-mouse-passthrough" names="class_window_constant_flag_mouse_passthrough"><reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_MOUSE_PASSTHROUGH</strong> = <literal>7</literal></paragraph>
            <paragraph>所有鼠标事件都被传递到同一应用程序的底层窗口。</paragraph>
            <paragraph><strong>注意：</strong>这个标志在嵌入式窗口中无效。</paragraph>
            <target refid="class-window-constant-flag-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-flag-max" names="class_window_constant_flag_max"><reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_MAX</strong> = <literal>8</literal></paragraph>
            <paragraph><reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> 的最大值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-window-contentscalemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-window-contentscalemode" names="enum_window_contentscalemode">enum <strong>ContentScaleMode</strong>:</paragraph>
            <target refid="class-window-constant-content-scale-mode-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-content-scale-mode-disabled" names="class_window_constant_content_scale_mode_disabled"><reference internal="True" refid="enum-window-contentscalemode"><inline classes="std std-ref">ContentScaleMode</inline></reference> <strong>CONTENT_SCALE_MODE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>不会为了匹配 <strong>Window</strong> 的大小而对内容进行缩放。</paragraph>
            <target refid="class-window-constant-content-scale-mode-canvas-items"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-content-scale-mode-canvas-items" names="class_window_constant_content_scale_mode_canvas_items"><reference internal="True" refid="enum-window-contentscalemode"><inline classes="std std-ref">ContentScaleMode</inline></reference> <strong>CONTENT_SCALE_MODE_CANVAS_ITEMS</strong> = <literal>1</literal></paragraph>
            <paragraph>会将内容按照目标大小渲染。比 <reference internal="True" refid="class-window-constant-content-scale-mode-viewport"><inline classes="std std-ref">CONTENT_SCALE_MODE_VIEWPORT</inline></reference> 更消耗性能，但结果更佳。</paragraph>
            <target refid="class-window-constant-content-scale-mode-viewport"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-content-scale-mode-viewport" names="class_window_constant_content_scale_mode_viewport"><reference internal="True" refid="enum-window-contentscalemode"><inline classes="std std-ref">ContentScaleMode</inline></reference> <strong>CONTENT_SCALE_MODE_VIEWPORT</strong> = <literal>2</literal></paragraph>
            <paragraph>会将内容按照原始大小渲染，然后再缩放到目标大小。比 <reference internal="True" refid="class-window-constant-content-scale-mode-canvas-items"><inline classes="std std-ref">CONTENT_SCALE_MODE_CANVAS_ITEMS</inline></reference> 性能更高，但会导致图像的像素化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-window-contentscaleaspect"></target>
            <paragraph classes="classref-enumeration" ids="enum-window-contentscaleaspect" names="enum_window_contentscaleaspect">enum <strong>ContentScaleAspect</strong>:</paragraph>
            <target refid="class-window-constant-content-scale-aspect-ignore"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-content-scale-aspect-ignore" names="class_window_constant_content_scale_aspect_ignore"><reference internal="True" refid="enum-window-contentscaleaspect"><inline classes="std std-ref">ContentScaleAspect</inline></reference> <strong>CONTENT_SCALE_ASPECT_IGNORE</strong> = <literal>0</literal></paragraph>
            <paragraph>会忽略纵横比。缩放就是简单地将内容拉伸至目标大小。</paragraph>
            <target refid="class-window-constant-content-scale-aspect-keep"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-content-scale-aspect-keep" names="class_window_constant_content_scale_aspect_keep"><reference internal="True" refid="enum-window-contentscaleaspect"><inline classes="std std-ref">ContentScaleAspect</inline></reference> <strong>CONTENT_SCALE_ASPECT_KEEP</strong> = <literal>1</literal></paragraph>
            <paragraph>会保留内容的纵横比。如果目标大小与原始大小的纵横比不同，则会将图像居中，左右两侧会出现黑条。</paragraph>
            <target refid="class-window-constant-content-scale-aspect-keep-width"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-content-scale-aspect-keep-width" names="class_window_constant_content_scale_aspect_keep_width"><reference internal="True" refid="enum-window-contentscaleaspect"><inline classes="std std-ref">ContentScaleAspect</inline></reference> <strong>CONTENT_SCALE_ASPECT_KEEP_WIDTH</strong> = <literal>2</literal></paragraph>
            <paragraph>内容可以垂直扩展。横向缩放时，会保留宽度比，在左右两侧添加黑条。</paragraph>
            <target refid="class-window-constant-content-scale-aspect-keep-height"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-content-scale-aspect-keep-height" names="class_window_constant_content_scale_aspect_keep_height"><reference internal="True" refid="enum-window-contentscaleaspect"><inline classes="std std-ref">ContentScaleAspect</inline></reference> <strong>CONTENT_SCALE_ASPECT_KEEP_HEIGHT</strong> = <literal>3</literal></paragraph>
            <paragraph>内容可以水平扩展。纵向缩放时，会保留高度比，在上下两侧添加黑条。</paragraph>
            <target refid="class-window-constant-content-scale-aspect-expand"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-content-scale-aspect-expand" names="class_window_constant_content_scale_aspect_expand"><reference internal="True" refid="enum-window-contentscaleaspect"><inline classes="std std-ref">ContentScaleAspect</inline></reference> <strong>CONTENT_SCALE_ASPECT_EXPAND</strong> = <literal>4</literal></paragraph>
            <paragraph>会保留内容的纵横比。如果目标大小与原始大小的纵横比不同，则内容会保持在左上角，将拉伸出的空间增加为可见区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-window-contentscalestretch"></target>
            <paragraph classes="classref-enumeration" ids="enum-window-contentscalestretch" names="enum_window_contentscalestretch">enum <strong>ContentScaleStretch</strong>:</paragraph>
            <target refid="class-window-constant-content-scale-stretch-fractional"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-content-scale-stretch-fractional" names="class_window_constant_content_scale_stretch_fractional"><reference internal="True" refid="enum-window-contentscalestretch"><inline classes="std std-ref">ContentScaleStretch</inline></reference> <strong>CONTENT_SCALE_STRETCH_FRACTIONAL</strong> = <literal>0</literal></paragraph>
            <paragraph>内容会根据小数系数进行拉伸。这样就能够填充窗口的所有空间，但非整数的像素缩放会导致发生“像素摆动”。</paragraph>
            <target refid="class-window-constant-content-scale-stretch-integer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-content-scale-stretch-integer" names="class_window_constant_content_scale_stretch_integer"><reference internal="True" refid="enum-window-contentscalestretch"><inline classes="std std-ref">ContentScaleStretch</inline></reference> <strong>CONTENT_SCALE_STRETCH_INTEGER</strong> = <literal>1</literal></paragraph>
            <paragraph>内容只会根据整数系数进行拉伸，保持像素的锐利。可能导致窗口的边缘留出可见的黑色背景，具体取决于窗口大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-window-layoutdirection"></target>
            <paragraph classes="classref-enumeration" ids="enum-window-layoutdirection" names="enum_window_layoutdirection">enum <strong>LayoutDirection</strong>:</paragraph>
            <target refid="class-window-constant-layout-direction-inherited"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-layout-direction-inherited" names="class_window_constant_layout_direction_inherited"><reference internal="True" refid="enum-window-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> <strong>LAYOUT_DIRECTION_INHERITED</strong> = <literal>0</literal></paragraph>
            <paragraph>自动布局方向，由父窗口的布局方向决定。</paragraph>
            <target refid="class-window-constant-layout-direction-locale"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-layout-direction-locale" names="class_window_constant_layout_direction_locale"><reference internal="True" refid="enum-window-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> <strong>LAYOUT_DIRECTION_LOCALE</strong> = <literal>1</literal></paragraph>
            <paragraph>自动布局方向，根据当前语言环境确定。</paragraph>
            <target refid="class-window-constant-layout-direction-ltr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-layout-direction-ltr" names="class_window_constant_layout_direction_ltr"><reference internal="True" refid="enum-window-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> <strong>LAYOUT_DIRECTION_LTR</strong> = <literal>2</literal></paragraph>
            <paragraph>从左至右的布局方向。</paragraph>
            <target refid="class-window-constant-layout-direction-rtl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-layout-direction-rtl" names="class_window_constant_layout_direction_rtl"><reference internal="True" refid="enum-window-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> <strong>LAYOUT_DIRECTION_RTL</strong> = <literal>3</literal></paragraph>
            <paragraph>从右至左的布局方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-window-windowinitialposition"></target>
            <paragraph classes="classref-enumeration" ids="enum-window-windowinitialposition" names="enum_window_windowinitialposition">enum <strong>WindowInitialPosition</strong>:</paragraph>
            <target refid="class-window-constant-window-initial-position-absolute"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-window-initial-position-absolute" names="class_window_constant_window_initial_position_absolute"><reference internal="True" refid="enum-window-windowinitialposition"><inline classes="std std-ref">WindowInitialPosition</inline></reference> <strong>WINDOW_INITIAL_POSITION_ABSOLUTE</strong> = <literal>0</literal></paragraph>
            <paragraph>初始窗口位置由 <reference internal="True" refid="class-window-property-position"><inline classes="std std-ref">position</inline></reference> 决定。</paragraph>
            <target refid="class-window-constant-window-initial-position-center-primary-screen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-window-initial-position-center-primary-screen" names="class_window_constant_window_initial_position_center_primary_screen"><reference internal="True" refid="enum-window-windowinitialposition"><inline classes="std std-ref">WindowInitialPosition</inline></reference> <strong>WINDOW_INITIAL_POSITION_CENTER_PRIMARY_SCREEN</strong> = <literal>1</literal></paragraph>
            <paragraph>初始窗口位置为主屏幕的中心。</paragraph>
            <target refid="class-window-constant-window-initial-position-center-main-window-screen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-window-initial-position-center-main-window-screen" names="class_window_constant_window_initial_position_center_main_window_screen"><reference internal="True" refid="enum-window-windowinitialposition"><inline classes="std std-ref">WindowInitialPosition</inline></reference> <strong>WINDOW_INITIAL_POSITION_CENTER_MAIN_WINDOW_SCREEN</strong> = <literal>2</literal></paragraph>
            <paragraph>初始窗口位置为主窗口屏幕的中心。</paragraph>
            <target refid="class-window-constant-window-initial-position-center-other-screen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-window-initial-position-center-other-screen" names="class_window_constant_window_initial_position_center_other_screen"><reference internal="True" refid="enum-window-windowinitialposition"><inline classes="std std-ref">WindowInitialPosition</inline></reference> <strong>WINDOW_INITIAL_POSITION_CENTER_OTHER_SCREEN</strong> = <literal>3</literal></paragraph>
            <paragraph>初始窗口位置为 <reference internal="True" refid="class-window-property-current-screen"><inline classes="std std-ref">current_screen</inline></reference> 屏幕的中心。</paragraph>
            <target refid="class-window-constant-window-initial-position-center-screen-with-mouse-focus"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-window-initial-position-center-screen-with-mouse-focus" names="class_window_constant_window_initial_position_center_screen_with_mouse_focus"><reference internal="True" refid="enum-window-windowinitialposition"><inline classes="std std-ref">WindowInitialPosition</inline></reference> <strong>WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_MOUSE_FOCUS</strong> = <literal>4</literal></paragraph>
            <paragraph>初始窗口位置为鼠标指针所在屏幕的中心。</paragraph>
            <target refid="class-window-constant-window-initial-position-center-screen-with-keyboard-focus"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-window-constant-window-initial-position-center-screen-with-keyboard-focus" names="class_window_constant_window_initial_position_center_screen_with_keyboard_focus"><reference internal="True" refid="enum-window-windowinitialposition"><inline classes="std std-ref">WindowInitialPosition</inline></reference> <strong>WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_KEYBOARD_FOCUS</strong> = <literal>5</literal></paragraph>
            <paragraph>初始窗口位置为键盘聚焦的窗口所在屏幕的中心。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="常量">
            <title>常量</title>
            <target refid="class-window-constant-notification-visibility-changed"></target>
            <paragraph classes="classref-constant" ids="class-window-constant-notification-visibility-changed" names="class_window_constant_notification_visibility_changed"><strong>NOTIFICATION_VISIBILITY_CHANGED</strong> = <literal>30</literal></paragraph>
            <paragraph>该 <strong>Window</strong> 的可见性发生改变时，在 <reference internal="True" refid="class-window-signal-visibility-changed"><inline classes="std std-ref">visibility_changed</inline></reference> 之前发出。</paragraph>
            <target refid="class-window-constant-notification-theme-changed"></target>
            <paragraph classes="classref-constant" ids="class-window-constant-notification-theme-changed" names="class_window_constant_notification_theme_changed"><strong>NOTIFICATION_THEME_CHANGED</strong> = <literal>32</literal></paragraph>
            <paragraph>当节点需要刷新其主题项时发送。以下任意情况都会触发：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>此节点或其任何祖先节点更改了 <reference internal="True" refid="class-window-property-theme"><inline classes="std std-ref">theme</inline></reference> 属性。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>此节点更改了 <reference internal="True" refid="class-window-property-theme-type-variation"><inline classes="std std-ref">theme_type_variation</inline></reference> 属性。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>节点进入场景树。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>注意：</strong>为了优化性能，此节点在场景树之外发生更改时不会发送此通知。取而代之的是，当节点进入场景树时会统一应用所有主题项的更新。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-window-property-always-on-top"></target>
            <paragraph classes="classref-property" ids="class-window-property-always-on-top" names="class_window_property_always_on_top"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>always_on_top</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该窗口将位于所有其他窗口的顶部。如果启用了 <reference internal="True" refid="class-window-property-transient"><inline classes="std std-ref">transient</inline></reference> 则不起作用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-auto-translate"></target>
            <paragraph classes="classref-property" ids="class-window-property-auto-translate" names="class_window_property_auto_translate"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>auto_translate</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_auto_translate</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_auto_translating</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>切换是否所有文本都应该根据当前区域设置自动变为翻译后的版本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-borderless"></target>
            <paragraph classes="classref-property" ids="class-window-property-borderless" names="class_window_property_borderless"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>borderless</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该窗口将没有边框。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-content-scale-aspect"></target>
            <paragraph classes="classref-property" ids="class-window-property-content-scale-aspect" names="class_window_property_content_scale_aspect"><reference internal="True" refid="enum-window-contentscaleaspect"><inline classes="std std-ref">ContentScaleAspect</inline></reference> <strong>content_scale_aspect</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_content_scale_aspect</strong> <strong>(</strong> <reference internal="True" refid="enum-window-contentscaleaspect"><inline classes="std std-ref">ContentScaleAspect</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-window-contentscaleaspect"><inline classes="std std-ref">ContentScaleAspect</inline></reference> <strong>get_content_scale_aspect</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定当 <strong>Window</strong> 的大小改变时，内容纵横比的行为。基础纵横比由 <reference internal="True" refid="class-window-property-content-scale-size"><inline classes="std std-ref">content_scale_size</inline></reference> 决定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-content-scale-factor"></target>
            <paragraph classes="classref-property" ids="class-window-property-content-scale-factor" names="class_window_property_content_scale_factor"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>content_scale_factor</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_content_scale_factor</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_content_scale_factor</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定当 <reference internal="True" refid="class-window-property-size"><inline classes="std std-ref">size</inline></reference> 等于 <reference internal="True" refid="class-window-property-content-scale-size"><inline classes="std std-ref">content_scale_size</inline></reference> 时 <strong>Window</strong> 内容的基础比例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-content-scale-mode"></target>
            <paragraph classes="classref-property" ids="class-window-property-content-scale-mode" names="class_window_property_content_scale_mode"><reference internal="True" refid="enum-window-contentscalemode"><inline classes="std std-ref">ContentScaleMode</inline></reference> <strong>content_scale_mode</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_content_scale_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-window-contentscalemode"><inline classes="std std-ref">ContentScaleMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-window-contentscalemode"><inline classes="std std-ref">ContentScaleMode</inline></reference> <strong>get_content_scale_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定当 <strong>Window</strong> 的大小改变时，如何对内容进行缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-content-scale-size"></target>
            <paragraph classes="classref-property" ids="class-window-property-content-scale-size" names="class_window_property_content_scale_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>content_scale_size</strong> = <literal>Vector2i(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_content_scale_size</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_content_scale_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>内容的基础大小（内容指在窗口内绘制的节点）。如果非零，当窗口大小发生变化时，<strong>Window</strong> 的内容将被缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-content-scale-stretch"></target>
            <paragraph classes="classref-property" ids="class-window-property-content-scale-stretch" names="class_window_property_content_scale_stretch"><reference internal="True" refid="enum-window-contentscalestretch"><inline classes="std std-ref">ContentScaleStretch</inline></reference> <strong>content_scale_stretch</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_content_scale_stretch</strong> <strong>(</strong> <reference internal="True" refid="enum-window-contentscalestretch"><inline classes="std std-ref">ContentScaleStretch</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-window-contentscalestretch"><inline classes="std std-ref">ContentScaleStretch</inline></reference> <strong>get_content_scale_stretch</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>决定 2D 元素最终缩放系数的策略。会影响 <reference internal="True" refid="class-window-property-content-scale-factor"><inline classes="std std-ref">content_scale_factor</inline></reference> 的使用，与 <reference internal="True" refid="class-window-property-content-scale-size"><inline classes="std std-ref">content_scale_size</inline></reference> 决定的自动缩放系数共同生效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-current-screen"></target>
            <paragraph classes="classref-property" ids="class-window-property-current-screen" names="class_window_property_current_screen"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>current_screen</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_current_screen</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_current_screen</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该窗口当前所在的屏幕。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-exclusive"></target>
            <paragraph classes="classref-property" ids="class-window-property-exclusive" names="class_window_property_exclusive"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>exclusive</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_exclusive</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_exclusive</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 <strong>Window</strong> 将处于独占模式。独占窗口总是在其父窗口的顶部，会阻止所有输入到达父级 <strong>Window</strong>。</paragraph>
            <paragraph>需要启用 <reference internal="True" refid="class-window-property-transient"><inline classes="std std-ref">transient</inline></reference> 才能正常工作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-extend-to-title"></target>
            <paragraph classes="classref-property" ids="class-window-property-extend-to-title" names="class_window_property_extend_to_title"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>extend_to_title</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 <strong>Window</strong> 的内容将会扩展到窗口的完整大小，窗口标题栏是透明的。</paragraph>
            <paragraph><strong>注意：</strong>这个属性仅在 macOS 上实现。</paragraph>
            <paragraph><strong>注意：</strong>这个属性仅对原生窗口有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-initial-position"></target>
            <paragraph classes="classref-property" ids="class-window-property-initial-position" names="class_window_property_initial_position"><reference internal="True" refid="enum-window-windowinitialposition"><inline classes="std std-ref">WindowInitialPosition</inline></reference> <strong>initial_position</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_initial_position</strong> <strong>(</strong> <reference internal="True" refid="enum-window-windowinitialposition"><inline classes="std std-ref">WindowInitialPosition</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-window-windowinitialposition"><inline classes="std std-ref">WindowInitialPosition</inline></reference> <strong>get_initial_position</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定该 <strong>Window</strong> 的初始位置类型。见 <reference internal="True" refid="enum-window-windowinitialposition"><inline classes="std std-ref">WindowInitialPosition</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-keep-title-visible"></target>
            <paragraph classes="classref-property" ids="class-window-property-keep-title-visible" names="class_window_property_keep_title_visible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>keep_title_visible</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_keep_title_visible</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_keep_title_visible</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 <strong>Window</strong> 宽度被扩展以保持标题栏文本完全可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-max-size"></target>
            <paragraph classes="classref-property" ids="class-window-property-max-size" names="class_window_property_max_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>max_size</strong> = <literal>Vector2i(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_max_size</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_max_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果非零，则调整该 <strong>Window</strong> 的大小时无法大于该尺寸。</paragraph>
            <paragraph><strong>注意：</strong>如果值小于 <reference internal="True" refid="class-window-property-min-size"><inline classes="std std-ref">min_size</inline></reference>，该属性将被忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-min-size"></target>
            <paragraph classes="classref-property" ids="class-window-property-min-size" names="class_window_property_min_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>min_size</strong> = <literal>Vector2i(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_min_size</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_min_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果非零，则调整该 <strong>Window</strong> 的大小时无法小于该尺寸。</paragraph>
            <paragraph><strong>注意：</strong>如果启用了 <reference internal="True" refid="class-window-property-wrap-controls"><inline classes="std std-ref">wrap_controls</inline></reference> 并且 <reference internal="True" refid="class-window-method-get-contents-minimum-size"><inline classes="std std-ref">get_contents_minimum_size</inline></reference> 更大，则此属性将被忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-mode"></target>
            <paragraph classes="classref-property" ids="class-window-property-mode" names="class_window_property_mode"><reference internal="True" refid="enum-window-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>mode</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-window-mode"><inline classes="std std-ref">Mode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-window-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>get_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置该窗口的当前模式。</paragraph>
            <paragraph><strong>注意：</strong>在 Windows 和 Linux 上，全屏与独占全屏是不同的模式。</paragraph>
            <paragraph><strong>注意：</strong>这个方法仅对原生窗口有效，即主窗口和禁用主视口 <reference internal="True" refuri="class_viewport#class-viewport-property-gui-embed-subwindows"><inline classes="std std-ref">Viewport.gui_embed_subwindows</inline></reference> 时的 <strong>Window</strong> 派生节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-mouse-passthrough"></target>
            <paragraph classes="classref-property" ids="class-window-property-mouse-passthrough" names="class_window_property_mouse_passthrough"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>mouse_passthrough</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则所有鼠标事件都会传递给同一应用的底层窗口。另见 <reference internal="True" refid="class-window-property-mouse-passthrough-polygon"><inline classes="std std-ref">mouse_passthrough_polygon</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这个属性在 Linux（X11）、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>这个属性仅对原生窗口有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-mouse-passthrough-polygon"></target>
            <paragraph classes="classref-property" ids="class-window-property-mouse-passthrough-polygon" names="class_window_property_mouse_passthrough_polygon"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>mouse_passthrough_polygon</strong> = <literal>PackedVector2Array()</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_mouse_passthrough_polygon</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>get_mouse_passthrough_polygon</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置窗口的一个接受鼠标事件的多边形区域。该区域外的鼠标事件将被传递出去。</paragraph>
            <paragraph>传递一个空数组将禁用穿透支持（所有鼠标事件将被窗口拦截，这是默认行为）。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 设置区域，使用 Path2D 节点。
$Window.mouse_passthrough_polygon = $Path2D.curve.get_baked_points()

# 设置区域，使用 Polygon2D 节点。
$Window.mouse_passthrough_polygon = $Polygon2D.polygon

# 重置区域为默认值。
$Window.mouse_passthrough_polygon = []</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 设置区域，使用 Path2D 节点。
GetNode&lt;Window&gt;("Window").MousePassthrough = GetNode&lt;Path2D&gt;("Path2D").Curve.GetBakedPoints();

// 设置区域，使用 Polygon2D 节点。
GetNode&lt;Window&gt;("Window").MousePassthrough = GetNode&lt;Polygon2D&gt;("Polygon2D").Polygon;

// 重置区域为默认值。
GetNode&lt;Window&gt;("Window").MousePassthrough = new Vector2[] {};</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refid="class-window-property-mouse-passthrough"><inline classes="std std-ref">mouse_passthrough</inline></reference> 设置为 <literal>true</literal>，则忽略此属性。</paragraph>
            <paragraph><strong>注意：</strong>在 Windows 上，位于区域外的窗口部分不会被绘制，而在 Linux (X11) 和 macOS 上则会被绘制。</paragraph>
            <paragraph><strong>注意：</strong>该属性在 Linux (X11)、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-popup-window"></target>
            <paragraph classes="classref-property" ids="class-window-property-popup-window" names="class_window_property_popup_window"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>popup_window</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 <strong>Window</strong> 将被视为弹出窗口。弹出窗口是子窗口，不会在系统窗口管理器的窗口列表中显示为单独的窗口，并且会在单击它们之外的任何位置时发送关闭请求（除非启用了 <reference internal="True" refid="class-window-property-exclusive"><inline classes="std std-ref">exclusive</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-position"></target>
            <paragraph classes="classref-property" ids="class-window-property-position" names="class_window_property_position"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>position</strong> = <literal>Vector2i(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_position</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_position</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该窗口的位置，单位为像素。</paragraph>
            <paragraph>如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-display-window-subwindows-embed-subwindows"><inline classes="std std-ref">ProjectSettings.display/window/subwindows/embed_subwindows</inline></reference> 为 <literal>false</literal>，则该位置使用屏幕绝对坐标。通常适用于编辑器插件。如果该设置项为 <literal>true</literal>，则该窗口的位置使用其父 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 中的坐标。</paragraph>
            <paragraph><strong>注意：</strong>这个属性仅在 <reference internal="True" refid="class-window-property-initial-position"><inline classes="std std-ref">initial_position</inline></reference> 为 <reference internal="True" refid="class-window-constant-window-initial-position-absolute"><inline classes="std std-ref">WINDOW_INITIAL_POSITION_ABSOLUTE</inline></reference> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-size"></target>
            <paragraph classes="classref-property" ids="class-window-property-size" names="class_window_property_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>size</strong> = <literal>Vector2i(100, 100)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_size</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该窗口的大小，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-theme"></target>
            <paragraph classes="classref-property" ids="class-window-property-theme" names="class_window_property_theme"><reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> <strong>theme</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_theme</strong> <strong>(</strong> <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> <strong>get_theme</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点及其子 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 和 <strong>Window</strong> 所使用的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 资源。如果子节点也设置了 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 资源，则会合并主题项，子节点的定义优先级更高。</paragraph>
            <paragraph><strong>注意：</strong>除非 <strong>Window</strong> 为嵌入式，否则窗口样式无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-theme-type-variation"></target>
            <paragraph classes="classref-property" ids="class-window-property-theme-type-variation" names="class_window_property_theme_type_variation"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>theme_type_variation</strong> = <literal>&amp;""</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_theme_type_variation</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_theme_type_variation</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>此 <strong>Window</strong> 用于查找其自己的主题项目的主题类型变体的名称。详情见 <reference internal="True" refuri="class_control#class-control-property-theme-type-variation"><inline classes="std std-ref">Control.theme_type_variation</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-title"></target>
            <paragraph classes="classref-property" ids="class-window-property-title" names="class_window_property_title"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>title</strong> = <literal>""</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_title</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_title</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该窗口的标题。如果 <strong>Window</strong> 是原生的，则 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中设置的标题样式无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-transient"></target>
            <paragraph classes="classref-property" ids="class-window-property-transient" names="class_window_property_transient"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>transient</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_transient</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_transient</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal> 则该 <strong>Window</strong> 是临时窗口，即会被认为是另一个 <strong>Window</strong> 的子级。临时窗口会和临时父级一起销毁，关闭时会将焦点返还给父级。临时窗口显示在非独占全屏父窗口之上。临时窗口无法进入全屏模式。</paragraph>
            <paragraph>请注意，不同平台可能由不同的行为。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-transparent"></target>
            <paragraph classes="classref-property" ids="class-window-property-transparent" names="class_window_property_transparent"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>transparent</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 <strong>Window</strong> 的背景可以是透明的。最好用在嵌入式窗口中。</paragraph>
            <paragraph><strong>注意：</strong>透明度支持已在 Linux、macOS 和 Windows 上实现，但可用性可能因 GPU 驱动程序、显示管理器和合成器的能力而异。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-display-window-per-pixel-transparency-allowed"><inline classes="std std-ref">ProjectSettings.display/window/per_pixel_transparency/allowed</inline></reference> 或该窗口的 <reference internal="True" refuri="class_viewport#class-viewport-property-transparent-bg"><inline classes="std std-ref">Viewport.transparent_bg</inline></reference> 为 <literal>false</literal>，则这个属性无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-unfocusable"></target>
            <paragraph classes="classref-property" ids="class-window-property-unfocusable" names="class_window_property_unfocusable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>unfocusable</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 <strong>Window</strong> 既无法聚焦也无法交互，但仍然可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-unresizable"></target>
            <paragraph classes="classref-property" ids="class-window-property-unresizable" names="class_window_property_unresizable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>unresizable</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则无法调整窗口大小。最小化和最大化按钮被禁用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-visible"></target>
            <paragraph classes="classref-property" ids="class-window-property-visible" names="class_window_property_visible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>visible</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_visible</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_visible</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该窗口可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-property-wrap-controls"></target>
            <paragraph classes="classref-property" ids="class-window-property-wrap-controls" names="class_window_property_wrap_controls"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>wrap_controls</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_wrap_controls</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_wrapping_controls</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则添加或删除子节点时，窗口的大小会自动更新，新的大小更大时会忽略 <reference internal="True" refid="class-window-property-min-size"><inline classes="std std-ref">min_size</inline></reference>。</paragraph>
            <paragraph>如果为 <literal>false</literal>，则需要手动调用 <reference internal="True" refid="class-window-method-child-controls-changed"><inline classes="std std-ref">child_controls_changed</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="方法说明">
            <title>方法说明</title>
            <target refid="class-window-private-method-get-contents-minimum-size"></target>
            <paragraph classes="classref-method" ids="class-window-private-method-get-contents-minimum-size" names="class_window_private_method__get_contents_minimum_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_get_contents_minimum_size</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>需要用户实现的虚方法。能够覆盖 <reference internal="True" refid="class-window-method-get-contents-minimum-size"><inline classes="std std-ref">get_contents_minimum_size</inline></reference> 的返回值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-add-theme-color-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-add-theme-color-override" names="class_window_method_add_theme_color_override">void <strong>add_theme_color_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
            <paragraph>为名为 <literal>name</literal> 的主题 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 创建本地覆盖项。为控件获取主题时，本地覆盖项始终优先。覆盖项可以使用 <reference internal="True" refid="class-window-method-remove-theme-color-override"><inline classes="std std-ref">remove_theme_color_override</inline></reference> 移除。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-window-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference> 和 <reference internal="True" refuri="class_control#class-control-method-add-theme-color-override"><inline classes="std std-ref">Control.add_theme_color_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-add-theme-constant-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-add-theme-constant-override" names="class_window_method_add_theme_constant_override">void <strong>add_theme_constant_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> constant <strong>)</strong></paragraph>
            <paragraph>为名称为 <literal>name</literal> 的主题常量创建本地覆盖项。为控件获取主题项目时，本地覆盖项始终优先。覆盖项可以使用 <reference internal="True" refid="class-window-method-remove-theme-constant-override"><inline classes="std std-ref">remove_theme_constant_override</inline></reference> 移除。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-window-method-get-theme-constant"><inline classes="std std-ref">get_theme_constant</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-add-theme-font-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-add-theme-font-override" names="class_window_method_add_theme_font_override">void <strong>add_theme_font_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> font <strong>)</strong></paragraph>
            <paragraph>为名称为 <literal>name</literal> 的主题 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 创建本地覆盖项。为控件获取主题项目时，本地覆盖项始终优先。覆盖项可以使用 <reference internal="True" refid="class-window-method-remove-theme-font-override"><inline classes="std std-ref">remove_theme_font_override</inline></reference> 移除。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-window-method-get-theme-font"><inline classes="std std-ref">get_theme_font</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-add-theme-font-size-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-add-theme-font-size-override" names="class_window_method_add_theme_font_size_override">void <strong>add_theme_font_size_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size <strong>)</strong></paragraph>
            <paragraph>为名称为 <literal>name</literal> 的主题字体大小创建本地覆盖项。为控件获取主题项目时，本地覆盖项始终优先。覆盖项可以使用 <reference internal="True" refid="class-window-method-remove-theme-font-size-override"><inline classes="std std-ref">remove_theme_font_size_override</inline></reference> 移除。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-window-method-get-theme-font-size"><inline classes="std std-ref">get_theme_font_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-add-theme-icon-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-add-theme-icon-override" names="class_window_method_add_theme_icon_override">void <strong>add_theme_icon_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> texture <strong>)</strong></paragraph>
            <paragraph>为名称为 <literal>name</literal> 的主题图标创建本地覆盖项。为控件获取主题项目时，本地覆盖项始终优先。覆盖项可以使用 <reference internal="True" refid="class-window-method-remove-theme-icon-override"><inline classes="std std-ref">remove_theme_icon_override</inline></reference> 移除。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-window-method-get-theme-icon"><inline classes="std std-ref">get_theme_icon</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-add-theme-stylebox-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-add-theme-stylebox-override" names="class_window_method_add_theme_stylebox_override">void <strong>add_theme_stylebox_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> stylebox <strong>)</strong></paragraph>
            <paragraph>为名为 <literal>name</literal> 的主题 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 创建本地覆盖项。为控件获取主题时，本地覆盖项始终优先。覆盖项可以使用 <reference internal="True" refid="class-window-method-remove-theme-stylebox-override"><inline classes="std std-ref">remove_theme_stylebox_override</inline></reference> 移除。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-window-method-get-theme-stylebox"><inline classes="std std-ref">get_theme_stylebox</inline></reference> 和 <reference internal="True" refuri="class_control#class-control-method-add-theme-stylebox-override"><inline classes="std std-ref">Control.add_theme_stylebox_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-begin-bulk-theme-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-begin-bulk-theme-override" names="class_window_method_begin_bulk_theme_override">void <strong>begin_bulk_theme_override</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>防止 <literal>*_theme_*_override</literal> 方法发出 <reference internal="True" refid="class-window-constant-notification-theme-changed"><inline classes="std std-ref">NOTIFICATION_THEME_CHANGED</inline></reference>，直到 <reference internal="True" refid="class-window-method-end-bulk-theme-override"><inline classes="std std-ref">end_bulk_theme_override</inline></reference> 被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-can-draw"></target>
            <paragraph classes="classref-method" ids="class-window-method-can-draw" names="class_window_method_can_draw"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>can_draw</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该窗口是否正在被绘制到屏幕上。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-child-controls-changed"></target>
            <paragraph classes="classref-method" ids="class-window-method-child-controls-changed" names="class_window_method_child_controls_changed">void <strong>child_controls_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>请求更新 <strong>Window</strong> 大小以适应底层 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-end-bulk-theme-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-end-bulk-theme-override" names="class_window_method_end_bulk_theme_override">void <strong>end_bulk_theme_override</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>结束批量主题覆盖更新。见 <reference internal="True" refid="class-window-method-begin-bulk-theme-override"><inline classes="std std-ref">begin_bulk_theme_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-contents-minimum-size"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-contents-minimum-size" names="class_window_method_get_contents_minimum_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_contents_minimum_size</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该窗口子 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点最小尺寸的合并大小。请在子节点发生改变时使用 <reference internal="True" refid="class-window-method-child-controls-changed"><inline classes="std std-ref">child_controls_changed</inline></reference> 进行更新。</paragraph>
            <paragraph>这个方法的返回值可以使用 <reference internal="True" refid="class-window-private-method-get-contents-minimum-size"><inline classes="std std-ref">_get_contents_minimum_size</inline></reference> 覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-flag"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-flag" names="class_window_method_get_flag"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果设置了标志 <literal>flag</literal>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-layout-direction"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-layout-direction" names="class_window_method_get_layout_direction"><reference internal="True" refid="enum-window-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> <strong>get_layout_direction</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回排版方向和文本书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-position-with-decorations"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-position-with-decorations" names="class_window_method_get_position_with_decorations"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_position_with_decorations</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该窗口的位置，包括边框。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-size-with-decorations"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-size-with-decorations" names="class_window_method_get_size_with_decorations"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_size_with_decorations</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该窗口的大小，包括边框。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-theme-color"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-theme-color" names="class_window_method_get_theme_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_theme_color</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中返回 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中需要有名称为 <literal>name</literal> 类型为 <literal>theme_type</literal> 的颜色项目。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-theme-constant"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-theme-constant" names="class_window_method_get_theme_constant"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_theme_constant</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中返回常量，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中需要有名称为 <literal>name</literal> 类型为 <literal>theme_type</literal> 的常量项目。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-theme-default-base-scale"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-theme-default-base-scale" names="class_window_method_get_theme_default_base_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_theme_default_base_scale</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中返回默认基础缩放，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中需要具有有效的 <reference internal="True" refuri="class_theme#class-theme-property-default-base-scale"><inline classes="std std-ref">Theme.default_base_scale</inline></reference> 值。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-theme-default-font"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-theme-default-font" names="class_window_method_get_theme_default_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>get_theme_default_font</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中返回默认字体，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中需要具有有效的 <reference internal="True" refuri="class_theme#class-theme-property-default-font"><inline classes="std std-ref">Theme.default_font</inline></reference> 值。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-theme-default-font-size"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-theme-default-font-size" names="class_window_method_get_theme_default_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_theme_default_font_size</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中返回默认字体大小，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中需要具有有效的 <reference internal="True" refuri="class_theme#class-theme-property-default-font-size"><inline classes="std std-ref">Theme.default_font_size</inline></reference> 值。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-theme-font"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-theme-font" names="class_window_method_get_theme_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>get_theme_font</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中返回 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中需要有名称为 <literal>name</literal> 类型为 <literal>theme_type</literal> 的字体项目。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-theme-font-size"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-theme-font-size" names="class_window_method_get_theme_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_theme_font_size</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中返回字体大小，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中需要有名称为 <literal>name</literal> 类型为 <literal>theme_type</literal> 的字体大小项目。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-theme-icon"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-theme-icon" names="class_window_method_get_theme_icon"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_theme_icon</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中返回图标，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中需要有名称为 <literal>name</literal> 类型为 <literal>theme_type</literal> 的图标项目。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-theme-stylebox"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-theme-stylebox" names="class_window_method_get_theme_stylebox"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>get_theme_stylebox</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中返回 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中需要有名称为 <literal>name</literal> 类型为 <literal>theme_type</literal> 的样式盒项目。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-get-window-id"></target>
            <paragraph classes="classref-method" ids="class-window-method-get-window-id" names="class_window_method_get_window_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_window_id</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该窗口的 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-grab-focus"></target>
            <paragraph classes="classref-method" ids="class-window-method-grab-focus" names="class_window_method_grab_focus">void <strong>grab_focus</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>使该窗口获得焦点，从而接收用户输入。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-focus"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-focus" names="class_window_method_has_focus"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_focus</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该窗口已获得焦点，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-theme-color"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-theme-color" names="class_window_method_has_theme_color"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_color</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果树中存在匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>，具有指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的颜色项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-theme-color-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-theme-color-override" names="class_window_method_has_theme_color_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_color_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点中存在名为指定 <literal>name</literal> 的主题 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 本地覆盖项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-window-method-add-theme-color-override"><inline classes="std std-ref">add_theme_color_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-theme-constant"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-theme-constant" names="class_window_method_has_theme_constant"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_constant</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果树中存在匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>，具有指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的常量项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-theme-constant-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-theme-constant-override" names="class_window_method_has_theme_constant_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_constant_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点中存在名为指定 <literal>name</literal> 的主题常量本地覆盖项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-window-method-add-theme-constant-override"><inline classes="std std-ref">add_theme_constant_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-theme-font"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-theme-font" names="class_window_method_has_theme_font"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_font</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果树中存在匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>，具有指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的字体项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-theme-font-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-theme-font-override" names="class_window_method_has_theme_font_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_font_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点中存在名为指定 <literal>name</literal> 的主题 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 本地覆盖项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-window-method-add-theme-font-override"><inline classes="std std-ref">add_theme_font_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-theme-font-size"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-theme-font-size" names="class_window_method_has_theme_font_size"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_font_size</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果树中存在匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>，具有指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的字体大小项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-theme-font-size-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-theme-font-size-override" names="class_window_method_has_theme_font_size_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_font_size_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点中存在名为指定 <literal>name</literal> 的主题字体大小本地覆盖项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-window-method-add-theme-font-size-override"><inline classes="std std-ref">add_theme_font_size_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-theme-icon"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-theme-icon" names="class_window_method_has_theme_icon"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_icon</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果树中存在匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>，具有指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的图标项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-theme-icon-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-theme-icon-override" names="class_window_method_has_theme_icon_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_icon_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点中存在名为指定 <literal>name</literal> 的主题图标本地覆盖项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-window-method-add-theme-icon-override"><inline classes="std std-ref">add_theme_icon_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-theme-stylebox"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-theme-stylebox" names="class_window_method_has_theme_stylebox"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_stylebox</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type="" <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果树中存在匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>，具有指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的样式盒项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="class_control#class-control-method-get-theme-color"><inline classes="std std-ref">Control.get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-has-theme-stylebox-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-has-theme-stylebox-override" names="class_window_method_has_theme_stylebox_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_stylebox_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点中存在名为指定 <literal>name</literal> 的主题 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 本地覆盖项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-window-method-add-theme-stylebox-override"><inline classes="std std-ref">add_theme_stylebox_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-hide"></target>
            <paragraph classes="classref-method" ids="class-window-method-hide" names="class_window_method_hide">void <strong>hide</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>隐藏该窗口。与最小化状态不同。隐藏窗口无法进行交互，需要用 <reference internal="True" refid="class-window-method-show"><inline classes="std std-ref">show</inline></reference> 显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-is-embedded"></target>
            <paragraph classes="classref-method" ids="class-window-method-is-embedded" names="class_window_method_is_embedded"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_embedded</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该窗口当前嵌入在其他窗口中，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-is-layout-rtl"></target>
            <paragraph classes="classref-method" ids="class-window-method-is-layout-rtl" names="class_window_method_is_layout_rtl"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_layout_rtl</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果布局是从右至左的，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-is-maximize-allowed"></target>
            <paragraph classes="classref-method" ids="class-window-method-is-maximize-allowed" names="class_window_method_is_maximize_allowed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_maximize_allowed</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该窗口可以最大化（启用了最大化按钮），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-is-using-font-oversampling"></target>
            <paragraph classes="classref-method" ids="class-window-method-is-using-font-oversampling" names="class_window_method_is_using_font_oversampling"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_font_oversampling</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果启用了字体过采样，则返回 <literal>true</literal>。见 <reference internal="True" refid="class-window-method-set-use-font-oversampling"><inline classes="std std-ref">set_use_font_oversampling</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-move-to-center"></target>
            <paragraph classes="classref-method" ids="class-window-method-move-to-center" names="class_window_method_move_to_center">void <strong>move_to_center</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在当前屏幕里居中原生窗口，如果时嵌入式窗口则是在嵌入器 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 里居中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-move-to-foreground"></target>
            <paragraph classes="classref-method" ids="class-window-method-move-to-foreground" names="class_window_method_move_to_foreground">void <strong>move_to_foreground</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>将该 <strong>Window</strong> 移动到其他窗口的顶部并聚焦。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-popup"></target>
            <paragraph classes="classref-method" ids="class-window-method-popup" names="class_window_method_popup">void <strong>popup</strong> <strong>(</strong> <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> rect=Rect2i(0, 0, 0, 0) <strong>)</strong></paragraph>
            <paragraph>显示该 <strong>Window</strong> 并标记为临时窗口（见 <reference internal="True" refid="class-window-property-transient"><inline classes="std std-ref">transient</inline></reference>）。如果提供了 <literal>rect</literal>，则会设为该 <strong>Window</strong> 的大小。对主窗口调用时会失败。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-popup-centered"></target>
            <paragraph classes="classref-method" ids="class-window-method-popup-centered" names="class_window_method_popup_centered">void <strong>popup_centered</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> minsize=Vector2i(0, 0) <strong>)</strong></paragraph>
            <paragraph>在当前屏幕的中心弹出该 <strong>Window</strong>，可以选择给定最小尺寸。如果该 <strong>Window</strong> 是嵌入的，它将在父 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 中居中。</paragraph>
            <paragraph><strong>注意：</strong>用 <literal>minsize</literal> 的默认值调用它等同于用 <reference internal="True" refid="class-window-property-size"><inline classes="std std-ref">size</inline></reference> 调用它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-popup-centered-clamped"></target>
            <paragraph classes="classref-method" ids="class-window-method-popup-centered-clamped" names="class_window_method_popup_centered_clamped">void <strong>popup_centered_clamped</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> minsize=Vector2i(0, 0), <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> fallback_ratio=0.75 <strong>)</strong></paragraph>
            <paragraph>在父 <strong>Window</strong> 中居中弹出该 <strong>Window</strong>。<literal>fallback_ratio</literal> 确定 <strong>Window</strong> 相对于其父级的最大尺寸。</paragraph>
            <paragraph><strong>注意：</strong>用 <literal>minsize</literal> 的默认值调用它等同于用 <reference internal="True" refid="class-window-property-size"><inline classes="std std-ref">size</inline></reference> 调用它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-popup-centered-ratio"></target>
            <paragraph classes="classref-method" ids="class-window-method-popup-centered-ratio" names="class_window_method_popup_centered_ratio">void <strong>popup_centered_ratio</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> ratio=0.8 <strong>)</strong></paragraph>
            <paragraph>如果 <strong>Window</strong> 为嵌入式窗口，则 <strong>Window</strong> 在弹出时会在嵌入器内居中，并按照嵌入器大小的比例 <literal>ratio</literal> 设置其大小。</paragraph>
            <paragraph>如果 <strong>Window</strong> 为原生窗口，则 <strong>Window</strong> 在弹出时会在其父 <strong>Window</strong> 所在屏幕内居中，并按照屏幕大小的比例 <literal>ratio</literal> 设置其大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-popup-exclusive"></target>
            <paragraph classes="classref-method" ids="class-window-method-popup-exclusive" names="class_window_method_popup_exclusive">void <strong>popup_exclusive</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> from_node, <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> rect=Rect2i(0, 0, 0, 0) <strong>)</strong></paragraph>
            <paragraph>尝试将该对话框的父节点设为最近的独占窗口，相对于 <literal>from_node</literal>，然后对其调用 <reference internal="True" refid="class-window-method-popup"><inline classes="std std-ref">popup</inline></reference>。对话框目前必须没有父节点，否则该方法会失败。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-window-method-set-unparent-when-invisible"><inline classes="std std-ref">set_unparent_when_invisible</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-method-get-last-exclusive-window"><inline classes="std std-ref">Node.get_last_exclusive_window</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-popup-exclusive-centered"></target>
            <paragraph classes="classref-method" ids="class-window-method-popup-exclusive-centered" names="class_window_method_popup_exclusive_centered">void <strong>popup_exclusive_centered</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> from_node, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> minsize=Vector2i(0, 0) <strong>)</strong></paragraph>
            <paragraph>尝试将该对话框的父节点设为最近的独占窗口，相对于 <literal>from_node</literal>，然后对其调用 <reference internal="True" refid="class-window-method-popup-centered"><inline classes="std std-ref">popup_centered</inline></reference>。对话框目前必须没有父节点，否则该方法会失败。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-window-method-set-unparent-when-invisible"><inline classes="std std-ref">set_unparent_when_invisible</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-method-get-last-exclusive-window"><inline classes="std std-ref">Node.get_last_exclusive_window</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-popup-exclusive-centered-clamped"></target>
            <paragraph classes="classref-method" ids="class-window-method-popup-exclusive-centered-clamped" names="class_window_method_popup_exclusive_centered_clamped">void <strong>popup_exclusive_centered_clamped</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> from_node, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> minsize=Vector2i(0, 0), <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> fallback_ratio=0.75 <strong>)</strong></paragraph>
            <paragraph>尝试将该对话框的父节点设为最近的独占窗口，相对于 <literal>from_node</literal>，然后对其调用 <reference internal="True" refid="class-window-method-popup-centered-clamped"><inline classes="std std-ref">popup_centered_clamped</inline></reference>。对话框目前必须没有父节点，否则该方法会失败。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-window-method-set-unparent-when-invisible"><inline classes="std std-ref">set_unparent_when_invisible</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-method-get-last-exclusive-window"><inline classes="std std-ref">Node.get_last_exclusive_window</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-popup-exclusive-centered-ratio"></target>
            <paragraph classes="classref-method" ids="class-window-method-popup-exclusive-centered-ratio" names="class_window_method_popup_exclusive_centered_ratio">void <strong>popup_exclusive_centered_ratio</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> from_node, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> ratio=0.8 <strong>)</strong></paragraph>
            <paragraph>尝试将该对话框的父节点设为最近的独占窗口，相对于 <literal>from_node</literal>，然后对其调用 <reference internal="True" refid="class-window-method-popup-centered-ratio"><inline classes="std std-ref">popup_centered_ratio</inline></reference>。对话框目前必须没有父节点，否则该方法会失败。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-window-method-set-unparent-when-invisible"><inline classes="std std-ref">set_unparent_when_invisible</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-method-get-last-exclusive-window"><inline classes="std std-ref">Node.get_last_exclusive_window</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-popup-exclusive-on-parent"></target>
            <paragraph classes="classref-method" ids="class-window-method-popup-exclusive-on-parent" names="class_window_method_popup_exclusive_on_parent">void <strong>popup_exclusive_on_parent</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> from_node, <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> parent_rect <strong>)</strong></paragraph>
            <paragraph>尝试将该对话框的父节点设为最近的独占窗口，相对于 <literal>from_node</literal>，然后对其调用 <reference internal="True" refid="class-window-method-popup-on-parent"><inline classes="std std-ref">popup_on_parent</inline></reference>。对话框目前必须没有父节点，否则该方法会失败。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-window-method-set-unparent-when-invisible"><inline classes="std std-ref">set_unparent_when_invisible</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-method-get-last-exclusive-window"><inline classes="std std-ref">Node.get_last_exclusive_window</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-popup-on-parent"></target>
            <paragraph classes="classref-method" ids="class-window-method-popup-on-parent" names="class_window_method_popup_on_parent">void <strong>popup_on_parent</strong> <strong>(</strong> <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> parent_rect <strong>)</strong></paragraph>
            <paragraph>弹出该 <strong>Window</strong>，位置会根据父级 <strong>Window</strong> 的位置进行偏移。如果该 <strong>Window</strong> 是内嵌的，则与 <reference internal="True" refid="class-window-method-popup"><inline classes="std std-ref">popup</inline></reference> 等效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-remove-theme-color-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-remove-theme-color-override" names="class_window_method_remove_theme_color_override">void <strong>remove_theme_color_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>移除名为指定 <literal>name</literal> 的主题 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 本地覆盖项，该覆盖项由 <reference internal="True" refid="class-window-method-add-theme-color-override"><inline classes="std std-ref">add_theme_color_override</inline></reference> 或检查器面板添加的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-remove-theme-constant-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-remove-theme-constant-override" names="class_window_method_remove_theme_constant_override">void <strong>remove_theme_constant_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>移除名为指定 <literal>name</literal> 的主题常量本地覆盖项，该覆盖项由 <reference internal="True" refid="class-window-method-add-theme-constant-override"><inline classes="std std-ref">add_theme_constant_override</inline></reference> 或检查器面板添加的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-remove-theme-font-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-remove-theme-font-override" names="class_window_method_remove_theme_font_override">void <strong>remove_theme_font_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>移除名为指定 <literal>name</literal> 的主题 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 本地覆盖项，该覆盖项由 <reference internal="True" refid="class-window-method-add-theme-font-override"><inline classes="std std-ref">add_theme_font_override</inline></reference> 或检查器面板添加的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-remove-theme-font-size-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-remove-theme-font-size-override" names="class_window_method_remove_theme_font_size_override">void <strong>remove_theme_font_size_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>移除名为指定 <literal>name</literal> 的主题字体大小本地覆盖项，该覆盖项由 <reference internal="True" refid="class-window-method-add-theme-font-size-override"><inline classes="std std-ref">add_theme_font_size_override</inline></reference> 或检查器面板添加的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-remove-theme-icon-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-remove-theme-icon-override" names="class_window_method_remove_theme_icon_override">void <strong>remove_theme_icon_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>移除名为指定 <literal>name</literal> 的主题图标本地覆盖项，该覆盖项由 <reference internal="True" refid="class-window-method-add-theme-icon-override"><inline classes="std std-ref">add_theme_icon_override</inline></reference> 或检查器面板添加的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-remove-theme-stylebox-override"></target>
            <paragraph classes="classref-method" ids="class-window-method-remove-theme-stylebox-override" names="class_window_method_remove_theme_stylebox_override">void <strong>remove_theme_stylebox_override</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>移除名为指定 <literal>name</literal> 的主题 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 本地覆盖项，该覆盖项由 <reference internal="True" refid="class-window-method-add-theme-stylebox-override"><inline classes="std std-ref">add_theme_stylebox_override</inline></reference> 或检查器面板添加的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-request-attention"></target>
            <paragraph classes="classref-method" ids="class-window-method-request-attention" names="class_window_method_request_attention">void <strong>request_attention</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>告诉操作系统 <strong>Window</strong> 需要注意。这样会让该窗口以某种方式脱颖而出，具体形式取决于系统，例如可能会在任务栏上闪烁。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-reset-size"></target>
            <paragraph classes="classref-method" ids="class-window-method-reset-size" names="class_window_method_reset_size">void <strong>reset_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>将大小重置为最小大小，即 <reference internal="True" refid="class-window-property-min-size"><inline classes="std std-ref">min_size</inline></reference> 和（<reference internal="True" refid="class-window-property-wrap-controls"><inline classes="std std-ref">wrap_controls</inline></reference> 启用时）<reference internal="True" refid="class-window-method-get-contents-minimum-size"><inline classes="std std-ref">get_contents_minimum_size</inline></reference> 之间的较大值。相当于调用 <literal>set_size(Vector2i())</literal>（或低于最小值的任何大小）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-set-flag"></target>
            <paragraph classes="classref-method" ids="class-window-method-set-flag" names="class_window_method_set_flag">void <strong>set_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-window-flags"><inline classes="std std-ref">Flags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>设置指定的窗口标志。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-set-ime-active"></target>
            <paragraph classes="classref-method" ids="class-window-method-set-ime-active" names="class_window_method_set_ime_active">void <strong>set_ime_active</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> active <strong>)</strong></paragraph>
            <paragraph>如果 <literal>active</literal> 为 <literal>true</literal>，则启用系统的原生 IME（输入法编辑器）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-set-ime-position"></target>
            <paragraph classes="classref-method" ids="class-window-method-set-ime-position" names="class_window_method_set_ime_position">void <strong>set_ime_position</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> position <strong>)</strong></paragraph>
            <paragraph>将 IME 移动到给定位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-set-layout-direction"></target>
            <paragraph classes="classref-method" ids="class-window-method-set-layout-direction" names="class_window_method_set_layout_direction">void <strong>set_layout_direction</strong> <strong>(</strong> <reference internal="True" refid="enum-window-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> direction <strong>)</strong></paragraph>
            <paragraph>设置布局方向和文本书写方向。某些语言需要从右至左的布局（例如阿拉伯语和希伯来语）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-set-unparent-when-invisible"></target>
            <paragraph classes="classref-method" ids="class-window-method-set-unparent-when-invisible" names="class_window_method_set_unparent_when_invisible">void <strong>set_unparent_when_invisible</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> unparent <strong>)</strong></paragraph>
            <paragraph>如果 <literal>unparent</literal> 为 <literal>true</literal>，则窗口会在隐藏时自动解除与父节点的关系。</paragraph>
            <paragraph><strong>注意：</strong>请确保存在对该节点的引用，否则该节点会变为孤立节点。没有父节点时，你还需要手动调用 <reference internal="True" refuri="class_node#class-node-method-queue-free"><inline classes="std std-ref">Node.queue_free</inline></reference> 来释放该窗口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-set-use-font-oversampling"></target>
            <paragraph classes="classref-method" ids="class-window-method-set-use-font-oversampling" names="class_window_method_set_use_font_oversampling">void <strong>set_use_font_oversampling</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enable <strong>)</strong></paragraph>
            <paragraph>启用字体过采样。会使得字体在放大后更好看。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-method-show"></target>
            <paragraph classes="classref-method" ids="class-window-method-show" names="class_window_method_show">void <strong>show</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>让该 <strong>Window</strong> 出现。这样会启用与 <strong>Window</strong> 的交互，除了可见性之外不会更改其他任何属性（与 <reference internal="True" refid="class-window-method-popup"><inline classes="std std-ref">popup</inline></reference> 不同）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id10" names="主题属性说明">
            <title>主题属性说明</title>
            <target refid="class-window-theme-color-title-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-color-title-color" names="class_window_theme_color_title_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>title_color</strong> = <literal>Color(0.875, 0.875, 0.875, 1)</literal></paragraph>
            <paragraph>标题文本的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-theme-color-title-outline-modulate"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-color-title-outline-modulate" names="class_window_theme_color_title_outline_modulate"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>title_outline_modulate</strong> = <literal>Color(1, 1, 1, 1)</literal></paragraph>
            <paragraph>标题文本轮廓的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-theme-constant-close-h-offset"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-constant-close-h-offset" names="class_window_theme_constant_close_h_offset"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>close_h_offset</strong> = <literal>18</literal></paragraph>
            <paragraph>关闭按钮的水平位置偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-theme-constant-close-v-offset"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-constant-close-v-offset" names="class_window_theme_constant_close_v_offset"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>close_v_offset</strong> = <literal>24</literal></paragraph>
            <paragraph>关闭按钮的垂直位置偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-theme-constant-resize-margin"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-constant-resize-margin" names="class_window_theme_constant_resize_margin"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>resize_margin</strong> = <literal>4</literal></paragraph>
            <paragraph>定义了窗口边框外侧可以使用鼠标抓取和调整大小的边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-theme-constant-title-height"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-constant-title-height" names="class_window_theme_constant_title_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>title_height</strong> = <literal>36</literal></paragraph>
            <paragraph>标题栏的高度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-theme-constant-title-outline-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-constant-title-outline-size" names="class_window_theme_constant_title_outline_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>title_outline_size</strong> = <literal>0</literal></paragraph>
            <paragraph>标题轮廓的尺寸。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-theme-font-title-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-font-title-font" names="class_window_theme_font_title_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>title_font</strong></paragraph>
            <paragraph>用于绘制标题的字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-theme-font-size-title-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-font-size-title-font-size" names="class_window_theme_font_size_title_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>title_font_size</strong></paragraph>
            <paragraph>标题字体的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-theme-icon-close"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-icon-close" names="class_window_theme_icon_close"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>close</strong></paragraph>
            <paragraph>关闭按钮的图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-theme-icon-close-pressed"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-icon-close-pressed" names="class_window_theme_icon_close_pressed"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>close_pressed</strong></paragraph>
            <paragraph>关闭按钮被按下时的图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-theme-style-embedded-border"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-style-embedded-border" names="class_window_theme_style_embedded_border"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>embedded_border</strong></paragraph>
            <paragraph><strong>Window</strong> 为嵌入模式时使用的背景样式。请注意，背景仅绘制在窗口内容的下方，不包括标题。要得到合适的边框和标题栏样式，可以使用 <reference internal="True" refuri="class_styleboxflat#class-styleboxflat"><inline classes="std std-ref">StyleBoxFlat</inline></reference> 的 <literal>expand_margin_*</literal> 属性。</paragraph>
            <paragraph><strong>注意：</strong>只有在启用 <reference internal="True" refid="class-window-property-transparent"><inline classes="std std-ref">transparent</inline></reference> 时，内容背景才会可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-window-theme-style-embedded-unfocused-border"></target>
            <paragraph classes="classref-themeproperty" ids="class-window-theme-style-embedded-unfocused-border" names="class_window_theme_style_embedded_unfocused_border"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>embedded_unfocused_border</strong></paragraph>
            <paragraph><strong>Window</strong> 为嵌入式且未获得焦点时使用的背景样式。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
