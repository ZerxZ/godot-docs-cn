<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_characterbody3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/CharacterBody3D.xml.</comment>
    <target refid="class-characterbody3d"></target>
    <section ids="characterbody3d class-characterbody3d" names="characterbody3d class_characterbody3d">
        <title>CharacterBody3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_physicsbody3d#class-physicsbody3d"><inline classes="std std-ref">PhysicsBody3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>专门用于通过脚本移动的角色的 3D 物理物体。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>CharacterBody3D</strong> 是针对用户控制的物理体的特化类。它们不会受到物理的影响，但会影响路径上的其他物理体。除了由 <reference internal="True" refuri="class_physicsbody3d#class-physicsbody3d-method-move-and-collide"><inline classes="std std-ref">PhysicsBody3D.move_and_collide</inline></reference> 提供的常见的碰撞检测之外，它们主要用于提供移动对象的高阶 API，能够检测墙壁和斜坡（<reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 方法）。因此适用于需要高度可配置的物理体，因为通常是用户控制的角色，所以必须按照特定的方式移动、与世界发生碰撞。</paragraph>
            <paragraph>如果是移动平台等不需要复杂移动和碰撞检测的游戏对象，<reference internal="True" refuri="class_animatablebody3d#class-animatablebody3d"><inline classes="std std-ref">AnimatableBody3D</inline></reference> 更方便配置。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/physics/kinematic_character_2d"><inline classes="doc">运动学角色（2D）</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 动力学角色演示" refuri="https://godotengine.org/asset-library/asset/2739">3D 动力学角色演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 平台跳跃演示" refuri="https://godotengine.org/asset-library/asset/2748">3D 平台跳跃演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 体素演示" refuri="https://godotengine.org/asset-library/asset/2755">3D 体素演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="第三人称射击（TPS）演示" refuri="https://godotengine.org/asset-library/asset/2710">第三人称射击（TPS）演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="62"></colspec>
                    <colspec colwidth="84"></colspec>
                    <colspec colwidth="22"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-floor-block-on-wall"><inline classes="std std-ref">floor_block_on_wall</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-floor-constant-speed"><inline classes="std std-ref">floor_constant_speed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-floor-max-angle"><inline classes="std std-ref">floor_max_angle</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.785398</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-floor-snap-length"><inline classes="std std-ref">floor_snap_length</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-floor-stop-on-slope"><inline classes="std std-ref">floor_stop_on_slope</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-max-slides"><inline classes="std std-ref">max_slides</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>6</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-characterbody3d-motionmode"><inline classes="std std-ref">MotionMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-motion-mode"><inline classes="std std-ref">motion_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-platform-floor-layers"><inline classes="std std-ref">platform_floor_layers</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4294967295</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-characterbody3d-platformonleave"><inline classes="std std-ref">PlatformOnLeave</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-platform-on-leave"><inline classes="std std-ref">platform_on_leave</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-platform-wall-layers"><inline classes="std std-ref">platform_wall_layers</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-safe-margin"><inline classes="std std-ref">safe_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.001</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-slide-on-ceiling"><inline classes="std std-ref">slide_on_ceiling</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-up-direction"><inline classes="std std-ref">up_direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 1, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-velocity"><inline classes="std std-ref">velocity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-property-wall-min-slide-angle"><inline classes="std std-ref">wall_min_slide_angle</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.261799</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="57"></colspec>
                    <colspec colwidth="149"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-apply-floor-snap"><inline classes="std std-ref">apply_floor_snap</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-get-floor-angle"><inline classes="std std-ref">get_floor_angle</inline></reference>(up_direction: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> = Vector3(0, 1, 0)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-get-floor-normal"><inline classes="std std-ref">get_floor_normal</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-get-last-motion"><inline classes="std std-ref">get_last_motion</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_kinematiccollision3d#class-kinematiccollision3d"><inline classes="std std-ref">KinematicCollision3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-get-last-slide-collision"><inline classes="std std-ref">get_last_slide_collision</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-get-platform-angular-velocity"><inline classes="std std-ref">get_platform_angular_velocity</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-get-platform-velocity"><inline classes="std std-ref">get_platform_velocity</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-get-position-delta"><inline classes="std std-ref">get_position_delta</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-get-real-velocity"><inline classes="std std-ref">get_real_velocity</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_kinematiccollision3d#class-kinematiccollision3d"><inline classes="std std-ref">KinematicCollision3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-get-slide-collision"><inline classes="std std-ref">get_slide_collision</inline></reference>(slide_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-get-slide-collision-count"><inline classes="std std-ref">get_slide_collision_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-get-wall-normal"><inline classes="std std-ref">get_wall_normal</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-is-on-ceiling"><inline classes="std std-ref">is_on_ceiling</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-is-on-ceiling-only"><inline classes="std std-ref">is_on_ceiling_only</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-is-on-floor"><inline classes="std std-ref">is_on_floor</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-is-on-floor-only"><inline classes="std std-ref">is_on_floor_only</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-is-on-wall"><inline classes="std std-ref">is_on_wall</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-is-on-wall-only"><inline classes="std std-ref">is_on_wall_only</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-characterbody3d-motionmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-characterbody3d-motionmode" names="enum_characterbody3d_motionmode">enum <strong>MotionMode</strong>: <reference internal="True" refid="enum-characterbody3d-motionmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-characterbody3d-constant-motion-mode-grounded"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-characterbody3d-constant-motion-mode-grounded" names="class_characterbody3d_constant_motion_mode_grounded"><reference internal="True" refid="enum-characterbody3d-motionmode"><inline classes="std std-ref">MotionMode</inline></reference> <strong>MOTION_MODE_GROUNDED</strong> = <literal>0</literal></paragraph>
            <paragraph>请在墙壁、天花板、地板等概念有意义时应用。在该模式下，物体运动会对斜坡作出反应（加减速）。该模式适合平台跳跃等地面游戏。</paragraph>
            <target refid="class-characterbody3d-constant-motion-mode-floating"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-characterbody3d-constant-motion-mode-floating" names="class_characterbody3d_constant_motion_mode_floating"><reference internal="True" refid="enum-characterbody3d-motionmode"><inline classes="std std-ref">MotionMode</inline></reference> <strong>MOTION_MODE_FLOATING</strong> = <literal>1</literal></paragraph>
            <paragraph>请在没有地板和天花板等概念时应用。所有碰撞都会作为 <literal>on_wall</literal>（撞墙）汇报。在该模式下，滑动时的速度恒定。该模式适合太空游戏等没有地面的游戏。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-characterbody3d-platformonleave"></target>
            <paragraph classes="classref-enumeration" ids="enum-characterbody3d-platformonleave" names="enum_characterbody3d_platformonleave">enum <strong>PlatformOnLeave</strong>: <reference internal="True" refid="enum-characterbody3d-platformonleave"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-characterbody3d-constant-platform-on-leave-add-velocity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-characterbody3d-constant-platform-on-leave-add-velocity" names="class_characterbody3d_constant_platform_on_leave_add_velocity"><reference internal="True" refid="enum-characterbody3d-platformonleave"><inline classes="std std-ref">PlatformOnLeave</inline></reference> <strong>PLATFORM_ON_LEAVE_ADD_VELOCITY</strong> = <literal>0</literal></paragraph>
            <paragraph>离开移动平台时，将最后的平台速度添加到 <reference internal="True" refid="class-characterbody3d-property-velocity"><inline classes="std std-ref">velocity</inline></reference> 中。</paragraph>
            <target refid="class-characterbody3d-constant-platform-on-leave-add-upward-velocity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-characterbody3d-constant-platform-on-leave-add-upward-velocity" names="class_characterbody3d_constant_platform_on_leave_add_upward_velocity"><reference internal="True" refid="enum-characterbody3d-platformonleave"><inline classes="std std-ref">PlatformOnLeave</inline></reference> <strong>PLATFORM_ON_LEAVE_ADD_UPWARD_VELOCITY</strong> = <literal>1</literal></paragraph>
            <paragraph>离开移动平台时，将最后的平台速度添加到 <reference internal="True" refid="class-characterbody3d-property-velocity"><inline classes="std std-ref">velocity</inline></reference> 中，但是忽略向下的运动。如果想要在平台向下移动时保持完整的跳跃高度，就非常有用。</paragraph>
            <target refid="class-characterbody3d-constant-platform-on-leave-do-nothing"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-characterbody3d-constant-platform-on-leave-do-nothing" names="class_characterbody3d_constant_platform_on_leave_do_nothing"><reference internal="True" refid="enum-characterbody3d-platformonleave"><inline classes="std std-ref">PlatformOnLeave</inline></reference> <strong>PLATFORM_ON_LEAVE_DO_NOTHING</strong> = <literal>2</literal></paragraph>
            <paragraph>离开平台时什么也不做。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-characterbody3d-property-floor-block-on-wall"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-floor-block-on-wall" names="class_characterbody3d_property_floor_block_on_wall"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>floor_block_on_wall</strong> = <literal>true</literal> <reference internal="True" refid="class-characterbody3d-property-floor-block-on-wall"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_floor_block_on_wall_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_floor_block_on_wall_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该物体将只能在地板上移动。此选项能够避免在墙壁上行走，但允许沿墙壁向下滑动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-floor-constant-speed"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-floor-constant-speed" names="class_characterbody3d_property_floor_constant_speed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>floor_constant_speed</strong> = <literal>false</literal> <reference internal="True" refid="class-characterbody3d-property-floor-constant-speed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_floor_constant_speed_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_floor_constant_speed_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>false</literal>（默认），则该物体在下坡时会移动得更快，在上坡时会移动得更慢。</paragraph>
            <paragraph>如果为 <literal>true</literal>，则无论坡度如何，该物体在地面上都会以相同的速度移动。请注意，你需要使用 <reference internal="True" refid="class-characterbody3d-property-floor-snap-length"><inline classes="std std-ref">floor_snap_length</inline></reference> 以恒定速度粘着至向下的斜坡。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-floor-max-angle"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-floor-max-angle" names="class_characterbody3d_property_floor_max_angle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>floor_max_angle</strong> = <literal>0.785398</literal> <reference internal="True" refid="class-characterbody3d-property-floor-max-angle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_floor_max_angle</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_floor_max_angle</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时，斜坡仍被视为地板（或天花板）而不是墙壁的最大角度（单位为弧度）。默认值等于 45 度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-floor-snap-length"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-floor-snap-length" names="class_characterbody3d_property_floor_snap_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>floor_snap_length</strong> = <literal>0.1</literal> <reference internal="True" refid="class-characterbody3d-property-floor-snap-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_floor_snap_length</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_floor_snap_length</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置吸附距离。设为非 <literal>0.0</literal> 值时，该物体在调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时会保持附着到斜坡上。吸附向量会根据给定的距离和 <reference internal="True" refid="class-characterbody3d-property-up-direction"><inline classes="std std-ref">up_direction</inline></reference> 反方向决定。</paragraph>
            <paragraph>只要吸附向量与地面有接触，该物体就会逆 <reference internal="True" refid="class-characterbody3d-property-up-direction"><inline classes="std std-ref">up_direction</inline></reference> 移动，保持附着到表面。如果该物体是沿着 <reference internal="True" refid="class-characterbody3d-property-up-direction"><inline classes="std std-ref">up_direction</inline></reference> 移动的，则不会应用吸附，这样跳跃时或者被其他物体推动时就能够不再附着地面。如果想要在应用吸附时无视速度，请使用 <reference internal="True" refid="class-characterbody3d-method-apply-floor-snap"><inline classes="std std-ref">apply_floor_snap</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-floor-stop-on-slope"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-floor-stop-on-slope" names="class_characterbody3d_property_floor_stop_on_slope"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>floor_stop_on_slope</strong> = <literal>true</literal> <reference internal="True" refid="class-characterbody3d-property-floor-stop-on-slope"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_floor_stop_on_slope_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_floor_stop_on_slope_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该物体静止时，调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 不会让它在斜坡上发生滑动。</paragraph>
            <paragraph>如果为 <literal>false</literal>，则 <reference internal="True" refid="class-characterbody3d-property-velocity"><inline classes="std std-ref">velocity</inline></reference> 施加向下的力时，该物体会在地板的斜坡上发生滑动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-max-slides"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-max-slides" names="class_characterbody3d_property_max_slides"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_slides</strong> = <literal>6</literal> <reference internal="True" refid="class-characterbody3d-property-max-slides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_slides</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_slides</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时，该物体在停止之前可以改变方向的最大次数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-motion-mode"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-motion-mode" names="class_characterbody3d_property_motion_mode"><reference internal="True" refid="enum-characterbody3d-motionmode"><inline classes="std std-ref">MotionMode</inline></reference> <strong>motion_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-characterbody3d-property-motion-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_motion_mode</strong>(value: <reference internal="True" refid="enum-characterbody3d-motionmode"><inline classes="std std-ref">MotionMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-characterbody3d-motionmode"><inline classes="std std-ref">MotionMode</inline></reference> <strong>get_motion_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置运动模式，定义 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 的行为。可用的模式见 <reference internal="True" refid="enum-characterbody3d-motionmode"><inline classes="std std-ref">MotionMode</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-platform-floor-layers"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-platform-floor-layers" names="class_characterbody3d_property_platform_floor_layers"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>platform_floor_layers</strong> = <literal>4294967295</literal> <reference internal="True" refid="class-characterbody3d-property-platform-floor-layers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_platform_floor_layers</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_platform_floor_layers</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于检测地板物体的碰撞层，该地板物体会被用作 <strong>CharacterBody3D</strong> 所要跟随的移动平台。默认情况下会检测所有地板物体并传播其速度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-platform-on-leave"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-platform-on-leave" names="class_characterbody3d_property_platform_on_leave"><reference internal="True" refid="enum-characterbody3d-platformonleave"><inline classes="std std-ref">PlatformOnLeave</inline></reference> <strong>platform_on_leave</strong> = <literal>0</literal> <reference internal="True" refid="class-characterbody3d-property-platform-on-leave"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_platform_on_leave</strong>(value: <reference internal="True" refid="enum-characterbody3d-platformonleave"><inline classes="std std-ref">PlatformOnLeave</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-characterbody3d-platformonleave"><inline classes="std std-ref">PlatformOnLeave</inline></reference> <strong>get_platform_on_leave</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置离开移动平台时要应用的行为。为了达到物理准确，默认会应用你离开时最后的平台速度。可用的行为见 <reference internal="True" refid="enum-characterbody3d-platformonleave"><inline classes="std std-ref">PlatformOnLeave</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-platform-wall-layers"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-platform-wall-layers" names="class_characterbody3d_property_platform_wall_layers"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>platform_wall_layers</strong> = <literal>0</literal> <reference internal="True" refid="class-characterbody3d-property-platform-wall-layers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_platform_wall_layers</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_platform_wall_layers</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于检测墙壁物体的碰撞层，该墙壁物体会被用作 <strong>CharacterBody3D</strong> 所要跟随的移动平台。默认情况下会忽略所有墙壁物体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-safe-margin"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-safe-margin" names="class_characterbody3d_property_safe_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>safe_margin</strong> = <literal>0.001</literal> <reference internal="True" refid="class-characterbody3d-property-safe-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_safe_margin</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_safe_margin</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>额外边距，用于在调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时进行碰撞恢复。</paragraph>
            <paragraph>如果该物体与另一个物体至少有这么近，就会认为它们正在碰撞，并在执行实际运动前推开。</paragraph>
            <paragraph>值较高时，对碰撞的检测会更加灵活，有助于持续检测墙壁和地板。</paragraph>
            <paragraph>值较低时，会强制碰撞算法进行更精确的检测，因此可以在特别需要精度的情况下使用，例如在非常低的缩放下避免可见的抖动，或者为了让一堆角色物体的达到稳定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-slide-on-ceiling"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-slide-on-ceiling" names="class_characterbody3d_property_slide_on_ceiling"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>slide_on_ceiling</strong> = <literal>true</literal> <reference internal="True" refid="class-characterbody3d-property-slide-on-ceiling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_slide_on_ceiling_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_slide_on_ceiling_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该物体在跳到天花板时会滑动；如果为 <literal>false</literal>，则会停止并垂直下落。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-up-direction"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-up-direction" names="class_characterbody3d_property_up_direction"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>up_direction</strong> = <literal>Vector3(0, 1, 0)</literal> <reference internal="True" refid="class-characterbody3d-property-up-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_up_direction</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_up_direction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指向上方的向量，用于在调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时决定什么是墙壁、什么是地板（或者天花板）。默认为 <reference internal="True" refuri="class_vector3#class-vector3-constant-up"><inline classes="std std-ref">Vector3.UP</inline></reference>。因为会对该向量进行归一化，所以不能等于 <reference internal="True" refuri="class_vector3#class-vector3-constant-zero"><inline classes="std std-ref">Vector3.ZERO</inline></reference>，如果你想要让所有碰撞都被报告为墙壁，请考虑使用 <reference internal="True" refid="class-characterbody3d-constant-motion-mode-floating"><inline classes="std std-ref">MOTION_MODE_FLOATING</inline></reference> 作为 <reference internal="True" refid="class-characterbody3d-property-motion-mode"><inline classes="std std-ref">motion_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-velocity"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-velocity" names="class_characterbody3d_property_velocity"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>velocity</strong> = <literal>Vector3(0, 0, 0)</literal> <reference internal="True" refid="class-characterbody3d-property-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_velocity</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_velocity</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前速度向量（通常为米每秒），调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 期间会进行使用并修改。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-property-wall-min-slide-angle"></target>
            <paragraph classes="classref-property" ids="class-characterbody3d-property-wall-min-slide-angle" names="class_characterbody3d_property_wall_min_slide_angle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>wall_min_slide_angle</strong> = <literal>0.261799</literal> <reference internal="True" refid="class-characterbody3d-property-wall-min-slide-angle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_wall_min_slide_angle</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_wall_min_slide_angle</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该物体遇到斜面时，允许滑动的最小角度（单位为弧度）。默认值等于 15 度。当 <reference internal="True" refid="class-characterbody3d-property-motion-mode"><inline classes="std std-ref">motion_mode</inline></reference> 为 <reference internal="True" refid="class-characterbody3d-constant-motion-mode-grounded"><inline classes="std std-ref">MOTION_MODE_GROUNDED</inline></reference> 时，只有 <reference internal="True" refid="class-characterbody3d-property-floor-block-on-wall"><inline classes="std std-ref">floor_block_on_wall</inline></reference> 为 <literal>true</literal> 才会影响运动。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-characterbody3d-method-apply-floor-snap"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-apply-floor-snap" names="class_characterbody3d_method_apply_floor_snap"><abbreviation explanation="无返回值。">void</abbreviation> <strong>apply_floor_snap</strong>() <reference internal="True" refid="class-characterbody3d-method-apply-floor-snap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>允许手动应用向地板的吸附，无论该物体的速度多大。<reference internal="True" refid="class-characterbody3d-method-is-on-floor"><inline classes="std std-ref">is_on_floor</inline></reference> 返回 <literal>true</literal> 时这个函数什么都不做。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-get-floor-angle"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-get-floor-angle" names="class_characterbody3d_method_get_floor_angle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_floor_angle</strong>(up_direction: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> = Vector3(0, 1, 0)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-get-floor-angle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回地板在最近一次碰撞点的碰撞角度，依据为 <literal>up_direction</literal>，默认为 <reference internal="True" refuri="class_vector3#class-vector3-constant-up"><inline classes="std std-ref">Vector3.UP</inline></reference>。该值始终为正数，只有在调用了 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 并且 <reference internal="True" refid="class-characterbody3d-method-is-on-floor"><inline classes="std std-ref">is_on_floor</inline></reference> 返回值为 <literal>true</literal> 时才有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-get-floor-normal"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-get-floor-normal" names="class_characterbody3d_method_get_floor_normal"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_floor_normal</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-get-floor-normal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最近一次碰撞点的地面法线。只有在调用了 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 并且 <reference internal="True" refid="class-characterbody3d-method-is-on-floor"><inline classes="std std-ref">is_on_floor</inline></reference> 返回值为 <literal>true</literal> 时才有效。</paragraph>
            <paragraph><strong>警告：</strong>碰撞法线并不总是与表面法线相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-get-last-motion"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-get-last-motion" names="class_characterbody3d_method_get_last_motion"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_last_motion</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-get-last-motion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最近一次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时施加给该 <strong>CharacterBody3D</strong> 的最后一次运动。如果发生了滑动，则该移动可以拆分为多次运动，此方法返回的是最后一次，可用于获取当前的移动方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-get-last-slide-collision"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-get-last-slide-collision" names="class_characterbody3d_method_get_last_slide_collision"><reference internal="True" refuri="class_kinematiccollision3d#class-kinematiccollision3d"><inline classes="std std-ref">KinematicCollision3D</inline></reference> <strong>get_last_slide_collision</strong>() <reference internal="True" refid="class-characterbody3d-method-get-last-slide-collision"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_kinematiccollision3d#class-kinematiccollision3d"><inline classes="std std-ref">KinematicCollision3D</inline></reference>，包含最近一次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时发生的最后一次运动的相关信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-get-platform-angular-velocity"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-get-platform-angular-velocity" names="class_characterbody3d_method_get_platform_angular_velocity"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_platform_angular_velocity</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-get-platform-angular-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于最近一次碰撞点的平台角速度。仅在调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 后有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-get-platform-velocity"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-get-platform-velocity" names="class_characterbody3d_method_get_platform_velocity"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_platform_velocity</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-get-platform-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于最近一次碰撞点的平台线速度。仅在调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 后有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-get-position-delta"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-get-position-delta" names="class_characterbody3d_method_get_position_delta"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_position_delta</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-get-position-delta"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最近一次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 所产生的运动（位置增量）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-get-real-velocity"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-get-real-velocity" names="class_characterbody3d_method_get_real_velocity"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_real_velocity</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-get-real-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最近一次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 之后的当前真实速度。例如，即便速度为水平方向，爬坡时你也会斜向移动。此方法返回的就是那个斜向移动，与返回请求速度的 <reference internal="True" refid="class-characterbody3d-property-velocity"><inline classes="std std-ref">velocity</inline></reference> 相对。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-get-slide-collision"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-get-slide-collision" names="class_characterbody3d_method_get_slide_collision"><reference internal="True" refuri="class_kinematiccollision3d#class-kinematiccollision3d"><inline classes="std std-ref">KinematicCollision3D</inline></reference> <strong>get_slide_collision</strong>(slide_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-characterbody3d-method-get-slide-collision"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_kinematiccollision3d#class-kinematiccollision3d"><inline classes="std std-ref">KinematicCollision3D</inline></reference>，包含最近一次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时发生的碰撞信息。因为单次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 可能发生多次碰撞，所以你必须指定碰撞索引，范围为 0 到 (<reference internal="True" refid="class-characterbody3d-method-get-slide-collision-count"><inline classes="std std-ref">get_slide_collision_count</inline></reference> - 1)。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-get-slide-collision-count"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-get-slide-collision-count" names="class_characterbody3d_method_get_slide_collision_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_slide_collision_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-get-slide-collision-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最近一次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时，该物体发生碰撞并改变方向的次数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-get-wall-normal"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-get-wall-normal" names="class_characterbody3d_method_get_wall_normal"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_wall_normal</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-get-wall-normal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最近一次碰撞点的墙面法线。只有在调用了 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 并且 <reference internal="True" refid="class-characterbody3d-method-is-on-wall"><inline classes="std std-ref">is_on_wall</inline></reference> 返回值为 <literal>true</literal> 时才有效。</paragraph>
            <paragraph><strong>警告：</strong>碰撞法线并不总是与表面法线相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-is-on-ceiling"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-is-on-ceiling" names="class_characterbody3d_method_is_on_ceiling"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_on_ceiling</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-is-on-ceiling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果最近一次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时，该物体和天花板发生了碰撞，则返回 <literal>true</literal>。否则返回 <literal>false</literal>。决定表面是否为“天花板”的是 <reference internal="True" refid="class-characterbody3d-property-up-direction"><inline classes="std std-ref">up_direction</inline></reference> 和 <reference internal="True" refid="class-characterbody3d-property-floor-max-angle"><inline classes="std std-ref">floor_max_angle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-is-on-ceiling-only"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-is-on-ceiling-only" names="class_characterbody3d_method_is_on_ceiling_only"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_on_ceiling_only</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-is-on-ceiling-only"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果最近一次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时，该物体仅和天花板发生了碰撞，则返回 <literal>true</literal>。否则返回 <literal>false</literal>。决定表面是否为“天花板”的是 <reference internal="True" refid="class-characterbody3d-property-up-direction"><inline classes="std std-ref">up_direction</inline></reference> 和 <reference internal="True" refid="class-characterbody3d-property-floor-max-angle"><inline classes="std std-ref">floor_max_angle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-is-on-floor"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-is-on-floor" names="class_characterbody3d_method_is_on_floor"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_on_floor</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-is-on-floor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果最近一次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时，该物体和地板发生了碰撞，则返回 <literal>true</literal>。否则返回 <literal>false</literal>。决定表面是否为“地板”的是 <reference internal="True" refid="class-characterbody3d-property-up-direction"><inline classes="std std-ref">up_direction</inline></reference> 和 <reference internal="True" refid="class-characterbody3d-property-floor-max-angle"><inline classes="std std-ref">floor_max_angle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-is-on-floor-only"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-is-on-floor-only" names="class_characterbody3d_method_is_on_floor_only"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_on_floor_only</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-is-on-floor-only"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果最近一次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时，该物体仅和地板发生了碰撞，则返回 <literal>true</literal>。否则返回 <literal>false</literal>。决定表面是否为“地板”的是 <reference internal="True" refid="class-characterbody3d-property-up-direction"><inline classes="std std-ref">up_direction</inline></reference> 和 <reference internal="True" refid="class-characterbody3d-property-floor-max-angle"><inline classes="std std-ref">floor_max_angle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-is-on-wall"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-is-on-wall" names="class_characterbody3d_method_is_on_wall"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_on_wall</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-is-on-wall"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果最近一次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时，该物体和墙壁发生了碰撞，则返回 <literal>true</literal>。否则返回 <literal>false</literal>。决定表面是否为“墙壁”的是 <reference internal="True" refid="class-characterbody3d-property-up-direction"><inline classes="std std-ref">up_direction</inline></reference> 和 <reference internal="True" refid="class-characterbody3d-property-floor-max-angle"><inline classes="std std-ref">floor_max_angle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-is-on-wall-only"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-is-on-wall-only" names="class_characterbody3d_method_is_on_wall_only"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_on_wall_only</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-characterbody3d-method-is-on-wall-only"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果最近一次调用 <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">move_and_slide</inline></reference> 时，该物体仅和墙壁发生了碰撞，则返回 <literal>true</literal>。否则返回 <literal>false</literal>。决定表面是否为“墙壁”的是 <reference internal="True" refid="class-characterbody3d-property-up-direction"><inline classes="std std-ref">up_direction</inline></reference> 和 <reference internal="True" refid="class-characterbody3d-property-floor-max-angle"><inline classes="std std-ref">floor_max_angle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-characterbody3d-method-move-and-slide"></target>
            <paragraph classes="classref-method" ids="class-characterbody3d-method-move-and-slide" names="class_characterbody3d_method_move_and_slide"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>move_and_slide</strong>() <reference internal="True" refid="class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据 <reference internal="True" refid="class-characterbody3d-property-velocity"><inline classes="std std-ref">velocity</inline></reference> 移动该物体。该物体如果与其他物体发生碰撞，则会沿着对方滑动，不会立即停止移动。如果对方是 <strong>CharacterBody3D</strong> 或 <reference internal="True" refuri="class_rigidbody3d#class-rigidbody3d"><inline classes="std std-ref">RigidBody3D</inline></reference>，还会受到对方运动的影响。可以用于制作移动、旋转的平台，也可用于推动其他节点。</paragraph>
            <paragraph>发生滑动碰撞时会改变 <reference internal="True" refid="class-characterbody3d-property-velocity"><inline classes="std std-ref">velocity</inline></reference>。要获取最后一次碰撞，请调用 <reference internal="True" refid="class-characterbody3d-method-get-last-slide-collision"><inline classes="std std-ref">get_last_slide_collision</inline></reference>，要获取碰撞的更多信息，请使用 <reference internal="True" refid="class-characterbody3d-method-get-slide-collision"><inline classes="std std-ref">get_slide_collision</inline></reference>。</paragraph>
            <paragraph>该物体接触到移动平台时，平台的速度会自动加入到该物体的运动中。平台运动所造成的碰撞始终为所有滑动碰撞中的第一个。</paragraph>
            <paragraph>如果该物体发生了碰撞，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
