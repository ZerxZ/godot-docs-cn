<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_engine.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Engine.xml.</comment>
    <target refid="class-engine"></target>
    <section ids="engine class-engine" names="engine class_engine">
        <title>Engine</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供对引擎属性的访问。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Engine</strong> 单例使你可以查询和修改项目的运行时参数，例如每秒帧数，时间范围等。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="87"></colspec>
                    <colspec colwidth="10"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-property-max-fps"><inline classes="std std-ref">max_fps</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-property-max-physics-steps-per-frame"><inline classes="std std-ref">max_physics_steps_per_frame</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>8</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-property-physics-jitter-fix"><inline classes="std std-ref">physics_jitter_fix</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">physics_ticks_per_second</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>60</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-property-print-error-messages"><inline classes="std std-ref">print_error_messages</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-property-time-scale"><inline classes="std std-ref">time_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="158"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-architecture-name"><inline classes="std std-ref">get_architecture_name</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-author-info"><inline classes="std std-ref">get_author_info</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-copyright-info"><inline classes="std std-ref">get_copyright_info</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-donor-info"><inline classes="std std-ref">get_donor_info</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-frames-drawn"><inline classes="std std-ref">get_frames_drawn</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-frames-per-second"><inline classes="std std-ref">get_frames_per_second</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-license-info"><inline classes="std std-ref">get_license_info</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-license-text"><inline classes="std std-ref">get_license_text</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_mainloop#class-mainloop"><inline classes="std std-ref">MainLoop</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-main-loop"><inline classes="std std-ref">get_main_loop</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-physics-frames"><inline classes="std std-ref">get_physics_frames</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-physics-interpolation-fraction"><inline classes="std std-ref">get_physics_interpolation_fraction</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-process-frames"><inline classes="std std-ref">get_process_frames</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-script-language"><inline classes="std std-ref">get_script_language</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-script-language-count"><inline classes="std std-ref">get_script_language_count</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-singleton"><inline classes="std std-ref">get_singleton</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-singleton-list"><inline classes="std std-ref">get_singleton_list</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-version-info"><inline classes="std std-ref">get_version_info</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-write-movie-path"><inline classes="std std-ref">get_write_movie_path</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-has-singleton"><inline classes="std std-ref">has_singleton</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-is-editor-hint"><inline classes="std std-ref">is_editor_hint</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-is-in-physics-frame"><inline classes="std std-ref">is_in_physics_frame</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-register-script-language"><inline classes="std std-ref">register_script_language</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> language <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-register-singleton"><inline classes="std std-ref">register_singleton</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> instance <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-unregister-script-language"><inline classes="std std-ref">unregister_script_language</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> language <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-unregister-singleton"><inline classes="std std-ref">unregister_singleton</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-engine-property-max-fps"></target>
            <paragraph classes="classref-property" ids="class-engine-property-max-fps" names="class_engine_property_max_fps"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_fps</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_max_fps</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_fps</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>每秒可渲染的最大帧数。值为 <literal>0</literal> 表示“无限制”。如果 CPU 或 GPU 跟不上项目逻辑和渲染的速度，实际的每秒帧数仍可能低于这个值。</paragraph>
            <paragraph>限制 FPS 会对降低系统功耗很有帮助，可以减少热量和噪音排放（并延长移动设备的电池寿命）。</paragraph>
            <paragraph>如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-display-window-vsync-vsync-mode"><inline classes="std std-ref">ProjectSettings.display/window/vsync/vsync_mode</inline></reference> 为 <literal>Enabled</literal> 或 <literal>Adaptive</literal> ，则该设置将被优先考虑，并且强制的 FPS 数不能超过显示器的刷新率。</paragraph>
            <paragraph>如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-display-window-vsync-vsync-mode"><inline classes="std std-ref">ProjectSettings.display/window/vsync/vsync_mode</inline></reference> 为 <literal>Enabled</literal>，在启用了可变刷新率（G-Sync/FreeSync）的显示器上，使用比显示器刷新率低几帧的 FPS 限制，将<reference name="减少输入延迟，同时可以避免撕裂" refuri="https://blurbusters.com/howto-low-lag-vsync-on/">减少输入延迟，同时可以避免撕裂</reference>。</paragraph>
            <paragraph>如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-display-window-vsync-vsync-mode"><inline classes="std std-ref">ProjectSettings.display/window/vsync/vsync_mode</inline></reference> 为 <literal>Disabled</literal>，则与无上限的帧率相比，将 FPS 限制为可以在系统上持续达到的高值，可以减少输入滞后。由于这是通过确保 GPU 负载低于 100% 来实现的，这种延迟减少仅在 GPU 瓶颈场景中有效，在 CPU 瓶颈的情况下无效。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">physics_ticks_per_second</inline></reference> 和 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-application-run-max-fps"><inline classes="std std-ref">ProjectSettings.application/run/max_fps</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-property-max-physics-steps-per-frame"></target>
            <paragraph classes="classref-property" ids="class-engine-property-max-physics-steps-per-frame" names="class_engine_property_max_physics_steps_per_frame"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_physics_steps_per_frame</strong> = <literal>8</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_max_physics_steps_per_frame</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_physics_steps_per_frame</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制每个渲染帧所能模拟的最大物理步骤数。默认值经过调试，可以避免“死亡螺旋”，防止开销较大的物理仿真无限触发开销更大的仿真。不过如果渲染 FPS 小于 <reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">physics_ticks_per_second</inline></reference> 的 <literal>1 / max_physics_steps_per_frame</literal>，游戏看上去会是降速的。即便在物理计算中始终使用 <literal>delta</literal> 也一样会发生。要避免这种情况，如果增大了 <reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">physics_ticks_per_second</inline></reference>，而且远大于默认值，那么建议将 <reference internal="True" refid="class-engine-property-max-physics-steps-per-frame"><inline classes="std std-ref">max_physics_steps_per_frame</inline></reference> 也调大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-property-physics-jitter-fix"></target>
            <paragraph classes="classref-property" ids="class-engine-property-physics-jitter-fix" names="class_engine_property_physics_jitter_fix"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>physics_jitter_fix</strong> = <literal>0.5</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_physics_jitter_fix</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_physics_jitter_fix</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制物理周期与实际时间的同步程度。如果小于等于 0，则周期是同步的。这样的值建议用于网络游戏，因为时钟的同步性很重要。较高的值会导致游戏中的时钟和真实时钟之间的偏差较大，但可以平滑帧速率的抖动。默认值 0.5 对于大多数人来说应该足够好了；超过 2 的值可能导致游戏对掉帧的反应有明显的延迟，因此不推荐使用。</paragraph>
            <paragraph><strong>注意：</strong>为了获得最佳效果，当使用自定义物理插值这种解决方案时，应通过将 <reference internal="True" refid="class-engine-property-physics-jitter-fix"><inline classes="std std-ref">physics_jitter_fix</inline></reference> 设置为 <literal>0</literal> 来禁用物理抖动修复。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-property-physics-ticks-per-second"></target>
            <paragraph classes="classref-property" ids="class-engine-property-physics-ticks-per-second" names="class_engine_property_physics_ticks_per_second"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>physics_ticks_per_second</strong> = <literal>60</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_physics_ticks_per_second</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_physics_ticks_per_second</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>每秒执行的固定迭代次数。用于控制物理仿真和 <reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference> 的执行频率。因为 Godot 不会进行物理步骤的插值，所以通常应该总是将其设成大于等于 <literal>60</literal> 的值。因此，如果值小于 <literal>60</literal> 就会看起来卡顿。提高该值可以让输入变得更加灵敏、也可以绕过碰撞隧道问题，但请记得这么做也会提升 CPU 的占用率。另请参阅 <reference internal="True" refid="class-engine-property-max-fps"><inline classes="std std-ref">max_fps</inline></reference> 和 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-common-physics-ticks-per-second"><inline classes="std std-ref">ProjectSettings.physics/common/physics_ticks_per_second</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>每个渲染帧最多只能模拟 <reference internal="True" refid="class-engine-property-max-physics-steps-per-frame"><inline classes="std std-ref">max_physics_steps_per_frame</inline></reference> 个物理周期。如果为了追赶渲染，需要在每个渲染帧中模拟更多物理周期，游戏看上去会是降速的（即便在物理计算中始终使用 <literal>delta</literal>）。因此，如果增大了 <reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">physics_ticks_per_second</inline></reference>，而且远大于默认值，那么建议将 <reference internal="True" refid="class-engine-property-max-physics-steps-per-frame"><inline classes="std std-ref">max_physics_steps_per_frame</inline></reference> 也调大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-property-print-error-messages"></target>
            <paragraph classes="classref-property" ids="class-engine-property-print-error-messages" names="class_engine_property_print_error_messages"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>print_error_messages</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_print_error_messages</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_printing_error_messages</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>false</literal>，则停止向控制台和编辑器输出日志打印错误和警告消息。这可用于在单元测试套件运行期间隐藏错误和警告消息。该属性等效于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-application-run-disable-stderr"><inline classes="std std-ref">ProjectSettings.application/run/disable_stderr</inline></reference> 项目设置。</paragraph>
            <paragraph><strong>警告：</strong>如果在项目的任何地方将该项设置为 <literal>false</literal>，重要的错误消息可能会被隐藏，即使它们是从其他脚本发出的。如果在 <literal>@tool</literal> 脚本中将该项设置为 <literal>false</literal>，这也会影响编辑器本身。在确保错误消息被启用（默认情况下）之前，<emphasis>不</emphasis>报告错误。</paragraph>
            <paragraph><strong>注意：</strong>从编辑器运行项目时，该属性不会影响编辑器的“错误”选项卡。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-property-time-scale"></target>
            <paragraph classes="classref-property" ids="class-engine-property-time-scale" names="class_engine_property_time_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>time_scale</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_time_scale</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_time_scale</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制游戏中的时钟与现实生活中的时钟的快慢。默认值为 1.0。值为 2.0 意味着游戏的移动速度是现实生活的两倍，而值为 0.5 意味着游戏的移动速度是常规速度的一半。<reference internal="True" refuri="class_timer#class-timer"><inline classes="std std-ref">Timer</inline></reference> 和 <reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer"><inline classes="std std-ref">SceneTreeTimer</inline></reference> 也会受到影响（如何控制见 <reference internal="True" refuri="class_scenetree#class-scenetree-method-create-timer"><inline classes="std std-ref">SceneTree.create_timer</inline></reference>）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-engine-method-get-architecture-name"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-architecture-name" names="class_engine_method_get_architecture_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_architecture_name</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回构建 Godot 二进制文件所针对的 CPU 架构的名称。可能的返回值有 <literal>x86_64</literal>、<literal>x86_32</literal>、<literal>arm64</literal>、<literal>arm32</literal>、<literal>rv64</literal>、<literal>riscv</literal>、<literal>ppc64</literal>、<literal>ppc</literal>、<literal>wasm64</literal> 和 <literal>wasm32</literal>。</paragraph>
            <paragraph>要检测当前 CPU 架构是否为 64 位，可以利用所有 64 位架构名称中都包含 <literal>64</literal>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">if "64" in Engine.get_architecture_name():
    print("正在运行 64 位 Godot。")
else:
    print("正在运行 32 位 Godot。")</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">if (Engine.GetArchitectureName().Contains("64"))
    GD.Print("正在运行 64 位 Godot。");
else
    GD.Print("正在运行 32 位 Godot。");</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-engine-method-get-architecture-name"><inline classes="std std-ref">get_architecture_name</inline></reference> 返回的<emphasis>不是</emphasis>主机 CPU 架构的名称。例如，如果在 x86_64 系统上运行 x86_32 的 Godot 二进制文件，那么返回值将是 <literal>x86_32</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-author-info"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-author-info" names="class_engine_method_get_author_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_author_info</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回一个字典中的引擎作者信息。</paragraph>
            <paragraph><literal>lead_developers</literal> - 字符串的数组，主要开发者的名字</paragraph>
            <paragraph><literal>founders</literal> - 创始人姓名的字符串数组</paragraph>
            <paragraph><literal>project_managers</literal> - 项目经理姓名的字符串数组</paragraph>
            <paragraph><literal>developers</literal> - 开发者名称的字符串数组</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-copyright-info"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-copyright-info" names="class_engine_method_get_copyright_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference> <strong>get_copyright_info</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回一个版权信息字典数组。</paragraph>
            <paragraph><literal>name</literal> - 字符串，组件名称。</paragraph>
            <paragraph><literal>partic</literal> - 描述组件子部分的字典数组 {<literal>files</literal>, <literal>copyright</literal>, <literal>license</literal>}</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-donor-info"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-donor-info" names="class_engine_method_get_donor_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_donor_info</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回捐赠者姓名数组的字典。</paragraph>
            <paragraph>{<literal>platinum_sponsors</literal>, <literal>gold_sponsors</literal>, <literal>silver_sponsors</literal>, <literal>bronze_sponsors</literal>, <literal>mini_sponsors</literal>, <literal>gold_donors</literal>, <literal>silver_donors</literal>, <literal>bronze_donors</literal>}</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-frames-drawn"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-frames-drawn" names="class_engine_method_get_frames_drawn"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_frames_drawn</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回绘制的总帧数。在无头平台上，或者如果通过命令行使用 <literal>--disable-render-loop</literal> 禁用渲染循环，<reference internal="True" refid="class-engine-method-get-frames-drawn"><inline classes="std std-ref">get_frames_drawn</inline></reference> 总是返回 <literal>0</literal>。请参阅 <reference internal="True" refid="class-engine-method-get-process-frames"><inline classes="std std-ref">get_process_frames</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-frames-per-second"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-frames-per-second" names="class_engine_method_get_frames_per_second"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_frames_per_second</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回运行游戏的每秒帧数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-license-info"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-license-info" names="class_engine_method_get_license_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_license_info</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 Godot 所使用的许可证的 Dictionary 字典列表，其中包括第三方组件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-license-text"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-license-text" names="class_engine_method_get_license_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_license_text</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回Godot许可证文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-main-loop"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-main-loop" names="class_engine_method_get_main_loop"><reference internal="True" refuri="class_mainloop#class-mainloop"><inline classes="std std-ref">MainLoop</inline></reference> <strong>get_main_loop</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回主循环对象（请参阅<reference internal="True" refuri="class_mainloop#class-mainloop"><inline classes="std std-ref">MainLoop</inline></reference>和<reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-physics-frames"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-physics-frames" names="class_engine_method_get_physics_frames"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_physics_frames</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回自引擎初始化以来通过的总帧数，该帧数在每个<strong>物理帧</strong>上行进。参阅 <reference internal="True" refid="class-engine-method-get-process-frames"><inline classes="std std-ref">get_process_frames</inline></reference>。</paragraph>
            <paragraph><reference internal="True" refid="class-engine-method-get-physics-frames"><inline classes="std std-ref">get_physics_frames</inline></reference> 可用于在不依赖 <reference internal="True" refuri="class_timer#class-timer"><inline classes="std std-ref">Timer</inline></reference> 的情况下，减少运行昂贵的逻辑的次数：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _physics_process(_delta):
    if Engine.get_physics_frames() % 2 == 0:
        pass  # 此处每 2 个物理帧仅运行一次昂贵的逻辑。</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _PhysicsProcess(double delta)
{
    base._PhysicsProcess(delta);

    if (Engine.GetPhysicsFrames() % 2 == 0)
    {
        // 此处每 2 个物理帧仅运行一次昂贵的逻辑。
    }
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-physics-interpolation-fraction"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-physics-interpolation-fraction" names="class_engine_method_get_physics_interpolation_fraction"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_physics_interpolation_fraction</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回渲染帧时当前物理周期中的分数。可用于实现固定的时间步插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-process-frames"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-process-frames" names="class_engine_method_get_process_frames"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_process_frames</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回自引擎初始化以来通过的总帧数，无论渲染循环是否启用，每个<strong>处理帧</strong>都会行进。另见 <reference internal="True" refid="class-engine-method-get-frames-drawn"><inline classes="std std-ref">get_frames_drawn</inline></reference> 和 <reference internal="True" refid="class-engine-method-get-physics-frames"><inline classes="std std-ref">get_physics_frames</inline></reference>。</paragraph>
            <paragraph><reference internal="True" refid="class-engine-method-get-process-frames"><inline classes="std std-ref">get_process_frames</inline></reference> 可用于在不依赖 <reference internal="True" refuri="class_timer#class-timer"><inline classes="std std-ref">Timer</inline></reference> 的情况下，减少运行昂贵的逻辑的次数：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _process(_delta):
    if Engine.get_process_frames() % 2 == 0:
        pass  # 此处每 2 个处理（渲染）帧仅运行一次昂贵的逻辑。</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Process(double delta)
{
    base._Process(delta);

    if (Engine.GetProcessFrames() % 2 == 0)
    {
        // 此处每 2 个处理（渲染）帧仅运行一次昂贵的逻辑。
    }
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-script-language"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-script-language" names="class_engine_method_get_script_language"><reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> <strong>get_script_language</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定索引处的 <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-script-language-count"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-script-language-count" names="class_engine_method_get_script_language_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_script_language_count</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回可用脚本语言的数量。请配合 <reference internal="True" refid="class-engine-method-get-script-language"><inline classes="std std-ref">get_script_language</inline></reference> 使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-singleton"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-singleton" names="class_engine_method_get_singleton"><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <strong>get_singleton</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回具有给定名称 <literal>name</literal> 的全局单例。常用于插件，例如 GodotPayments。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-singleton-list"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-singleton-list" names="class_engine_method_get_singleton_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_singleton_list</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回可用全局单例的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-version-info"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-version-info" names="class_engine_method_get_version_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_version_info</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>以字典形式返回当前引擎版本信息。</paragraph>
            <paragraph><literal>major</literal> - 将主要版本号保存为一个 int</paragraph>
            <paragraph><literal>minor</literal> - 将次要版本号保存为一个 int</paragraph>
            <paragraph><literal>patch</literal> - 将补丁版本号保存为一个 int</paragraph>
            <paragraph><literal>hex</literal> - 保存编码为十六进制整数的完整版本号，每个数字一个字节（2 位）（参见下面的示例）</paragraph>
            <paragraph><literal>status</literal> - 将状态（例如“beta”、“rc1”、“rc2”、...“stable”）保存为字符串</paragraph>
            <paragraph><literal>build</literal> - 将构建名称（例如“custom_build”）保存为字符串</paragraph>
            <paragraph><literal>hash</literal> - 将完整的 Git 提交哈希保存为字符串</paragraph>
            <paragraph><literal>year</literal> - 将版本发布的年份保存为 int</paragraph>
            <paragraph><literal>string</literal> - 将 <literal>major</literal> + <literal>minor</literal> + <literal>patch</literal> + <literal>status</literal> + <literal>build</literal> 保存在单个字符串中</paragraph>
            <paragraph><literal>hex</literal> 值的编码方式如下，从左到右：主版本对应一字节，次版本对应一字节，补丁版本对应一字节。例如，“3.1.12”将是 <literal>0x03010C</literal>。<strong>注意：</strong>它内部还是一个 int，打印出来就是它的十进制表示，没有特别的意义。使用十六进制文字从代码中轻松比较版本：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">if Engine.get_version_info().hex &gt;= 0x030200:
    # 执行特定于版本 3.2 或更高版本的操作
else:
    # 执行特定于 3.2 之前版本的操作</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">if ((int)Engine.GetVersionInfo()["hex"] &gt;= 0x030200)
{
    // 执行特定于版本 3.2 或更高版本的操作
}
else
{
    // 执行特定于 3.2 之前版本的操作
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-write-movie-path"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-write-movie-path" names="class_engine_method_get_write_movie_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_write_movie_path</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_moviewriter#class-moviewriter"><inline classes="std std-ref">MovieWriter</inline></reference> 的输出文件的路径，如果引擎未在 Movie Maker 模式下启动，则返回一个空字符串。该路径可以是绝对路径或相对路径，具体取决于用户指定它的方式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-has-singleton"></target>
            <paragraph classes="classref-method" ids="class-engine-method-has-singleton" names="class_engine_method_has_singleton"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_singleton</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果全局范围内存在具有给定 <literal>name</literal> 的单例，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-is-editor-hint"></target>
            <paragraph classes="classref-method" ids="class-engine-method-is-editor-hint" names="class_engine_method_is_editor_hint"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_editor_hint</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果脚本当前正在编辑器中运行，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。这对于 <literal>@tool</literal> 脚本很有用，可以有条件地绘制编辑器助手，或者防止在编辑器中意外运行会影响场景状态的“游戏”代码：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">if Engine.is_editor_hint():
    draw_gizmos()
else:
    simulate_physics()</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">if (Engine.IsEditorHint())
    DrawGizmos();
else
    SimulatePhysics();</literal_block>
                </div>
            </container>
            <paragraph>有关详细信息，请参阅文档中的<reference internal="True" refuri="../tutorials/plugins/running_code_in_the_editor"><inline classes="doc">《在编辑器中运行代码》</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>要检测脚本是否从编辑器<emphasis>构建</emphasis>中运行（例如，当按 <literal classes="kbd">F5</literal> 时），请改用 <reference internal="True" refuri="class_os#class-os-method-has-feature"><inline classes="std std-ref">OS.has_feature</inline></reference> 和 <literal>"editor"</literal> 参数。<literal>OS.has_feature("editor")</literal> 将在编辑器中运行代码和从编辑器运行项目时，被评估为 <literal>true</literal>；但当代码从导出的项目运行时，它将被评估为 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-is-in-physics-frame"></target>
            <paragraph classes="classref-method" ids="class-engine-method-is-in-physics-frame" names="class_engine_method_is_in_physics_frame"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_in_physics_frame</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果游戏在游戏循环的固定过程和物理阶段内，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-register-script-language"></target>
            <paragraph classes="classref-method" ids="class-engine-method-register-script-language" names="class_engine_method_register_script_language"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>register_script_language</strong> <strong>(</strong> <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> language <strong>)</strong></paragraph>
            <paragraph>注册一个 <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> 实例以供 <literal>ScriptServer</literal> 使用。</paragraph>
            <paragraph>返回：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference> 成功</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-unavailable"><inline classes="std std-ref">@GlobalScope.ERR_UNAVAILABLE</inline></reference> 如果 <literal>ScriptServer</literal> 已达到限制，并且无法注册任何新语言</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-already-exists"><inline classes="std std-ref">@GlobalScope.ERR_ALREADY_EXISTS</inline></reference> 如果 <literal>ScriptServer</literal> 已经包含一个具有相似扩展名/名称/类型的语言</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-register-singleton"></target>
            <paragraph classes="classref-method" ids="class-engine-method-register-singleton" names="class_engine_method_register_singleton">void <strong>register_singleton</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> instance <strong>)</strong></paragraph>
            <paragraph>将给定的对象注册为单例，名称 <literal>name</literal> 全局可用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-unregister-script-language"></target>
            <paragraph classes="classref-method" ids="class-engine-method-unregister-script-language" names="class_engine_method_unregister_script_language"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>unregister_script_language</strong> <strong>(</strong> <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> language <strong>)</strong></paragraph>
            <paragraph>从 <literal>ScriptServer</literal> 注销该 <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> 实例。</paragraph>
            <paragraph>返回：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference> 成功</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-does-not-exist"><inline classes="std std-ref">@GlobalScope.ERR_DOES_NOT_EXIST</inline></reference> 如果该语言尚未在 <literal>ScriptServer</literal> 中注册</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-unregister-singleton"></target>
            <paragraph classes="classref-method" ids="class-engine-method-unregister-singleton" names="class_engine_method_unregister_singleton">void <strong>unregister_singleton</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>将名称为 <literal>name</literal> 的单例解除注册。该单例对象不会被释放。仅能够对通过 <reference internal="True" refid="class-engine-method-register-singleton"><inline classes="std std-ref">register_singleton</inline></reference> 创建的用户定义单例使用。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
