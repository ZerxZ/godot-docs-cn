<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_engine.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Engine.xml.</comment>
    <target refid="class-engine"></target>
    <section ids="engine class-engine" names="engine class_engine">
        <title>Engine</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供对引擎属性的访问。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Engine</strong> 单例使你可以查询和修改项目的运行时参数，例如每秒帧数，时间缩放等。它还存储有关 Godot 当前构建的信息，例如当前版本。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="87"></colspec>
                    <colspec colwidth="10"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-property-max-fps"><inline classes="std std-ref">max_fps</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-property-max-physics-steps-per-frame"><inline classes="std std-ref">max_physics_steps_per_frame</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>8</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-property-physics-jitter-fix"><inline classes="std std-ref">physics_jitter_fix</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">physics_ticks_per_second</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>60</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-property-print-error-messages"><inline classes="std std-ref">print_error_messages</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-property-time-scale"><inline classes="std std-ref">time_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="157"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-architecture-name"><inline classes="std std-ref">get_architecture_name</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-author-info"><inline classes="std std-ref">get_author_info</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-copyright-info"><inline classes="std std-ref">get_copyright_info</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-donor-info"><inline classes="std std-ref">get_donor_info</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-frames-drawn"><inline classes="std std-ref">get_frames_drawn</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-frames-per-second"><inline classes="std std-ref">get_frames_per_second</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-license-info"><inline classes="std std-ref">get_license_info</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-license-text"><inline classes="std std-ref">get_license_text</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_mainloop#class-mainloop"><inline classes="std std-ref">MainLoop</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-main-loop"><inline classes="std std-ref">get_main_loop</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-physics-frames"><inline classes="std std-ref">get_physics_frames</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-physics-interpolation-fraction"><inline classes="std std-ref">get_physics_interpolation_fraction</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-process-frames"><inline classes="std std-ref">get_process_frames</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-script-language"><inline classes="std std-ref">get_script_language</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-script-language-count"><inline classes="std std-ref">get_script_language_count</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-singleton"><inline classes="std std-ref">get_singleton</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-singleton-list"><inline classes="std std-ref">get_singleton_list</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-version-info"><inline classes="std std-ref">get_version_info</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-get-write-movie-path"><inline classes="std std-ref">get_write_movie_path</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-has-singleton"><inline classes="std std-ref">has_singleton</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-is-editor-hint"><inline classes="std std-ref">is_editor_hint</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-is-in-physics-frame"><inline classes="std std-ref">is_in_physics_frame</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-register-script-language"><inline classes="std std-ref">register_script_language</inline></reference>(language: <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-register-singleton"><inline classes="std std-ref">register_singleton</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, instance: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-unregister-script-language"><inline classes="std std-ref">unregister_script_language</inline></reference>(language: <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-engine-method-unregister-singleton"><inline classes="std std-ref">unregister_singleton</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-engine-property-max-fps"></target>
            <paragraph classes="classref-property" ids="class-engine-property-max-fps" names="class_engine_property_max_fps"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_fps</strong> = <literal>0</literal> <reference internal="True" refid="class-engine-property-max-fps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_fps</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_fps</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The maximum number of frames that can be rendered every second (FPS). A value of <literal>0</literal> means the framerate is uncapped.</paragraph>
            <paragraph>Limiting the FPS can be useful to reduce the host machine's power consumption, which reduces heat, noise emissions, and improves battery life.</paragraph>
            <paragraph>If <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-display-window-vsync-vsync-mode"><inline classes="std std-ref">ProjectSettings.display/window/vsync/vsync_mode</inline></reference> is <strong>Enabled</strong> or <strong>Adaptive</strong>, the setting takes precedence and the max FPS number cannot exceed the monitor's refresh rate.</paragraph>
            <paragraph>If <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-display-window-vsync-vsync-mode"><inline classes="std std-ref">ProjectSettings.display/window/vsync/vsync_mode</inline></reference> is <strong>Enabled</strong>, on monitors with variable refresh rate enabled (G-Sync/FreeSync), using an FPS limit a few frames lower than the monitor's refresh rate will <reference name="reduce input lag while avoiding tearing" refuri="https://blurbusters.com/howto-low-lag-vsync-on/">reduce input lag while avoiding tearing</reference>.</paragraph>
            <paragraph>See also <reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">physics_ticks_per_second</inline></reference> and <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-application-run-max-fps"><inline classes="std std-ref">ProjectSettings.application/run/max_fps</inline></reference>.</paragraph>
            <paragraph><strong>Note:</strong> The actual number of frames per second may still be below this value if the CPU or GPU cannot keep up with the project's logic and rendering.</paragraph>
            <paragraph><strong>Note:</strong> If <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-display-window-vsync-vsync-mode"><inline classes="std std-ref">ProjectSettings.display/window/vsync/vsync_mode</inline></reference> is <strong>Disabled</strong>, limiting the FPS to a high value that can be consistently reached on the system can reduce input lag compared to an uncapped framerate. Since this works by ensuring the GPU load is lower than 100%, this latency reduction is only effective in GPU-bottlenecked scenarios, not CPU-bottlenecked scenarios.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-property-max-physics-steps-per-frame"></target>
            <paragraph classes="classref-property" ids="class-engine-property-max-physics-steps-per-frame" names="class_engine_property_max_physics_steps_per_frame"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_physics_steps_per_frame</strong> = <literal>8</literal> <reference internal="True" refid="class-engine-property-max-physics-steps-per-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_physics_steps_per_frame</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_physics_steps_per_frame</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>每个渲染帧所能模拟的最大物理迭代数。</paragraph>
            <paragraph><strong>注意：</strong>调整默认值是为了防止昂贵的物理模拟无限期地触发更昂贵的模拟。然而，如果渲染 FPS 小于 <reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">physics_ticks_per_second</inline></reference> 的 <literal>1 / max_physics_steps_per_frame</literal>，游戏看上去会是降速的。即便在物理计算中始终使用 <literal>delta</literal> 也一样会发生。要避免这种情况，如果已经增大了 <reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">physics_ticks_per_second</inline></reference>，而且远大于其默认值，那么建议将 <reference internal="True" refid="class-engine-property-max-physics-steps-per-frame"><inline classes="std std-ref">max_physics_steps_per_frame</inline></reference> 也调大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-property-physics-jitter-fix"></target>
            <paragraph classes="classref-property" ids="class-engine-property-physics-jitter-fix" names="class_engine_property_physics_jitter_fix"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>physics_jitter_fix</strong> = <literal>0.5</literal> <reference internal="True" refid="class-engine-property-physics-jitter-fix"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_physics_jitter_fix</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_physics_jitter_fix</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>有多少物理滴答与实际时间同步。如果为 <literal>0</literal> 或更少，则滴答完全同步。较高的值会导致游戏中的时钟与真实时钟的偏差更大，但它们可以平滑帧率抖动。</paragraph>
            <paragraph><strong>注意：</strong>默认值 <literal>0.5</literal> 对于大多数情况来说应该足够了；高于 <literal>2</literal> 的值可能会导致游戏对掉帧做出反应并出现明显的延迟，因此不推荐使用。</paragraph>
            <paragraph><strong>注意：</strong>当使用自定义物理插值解决方案或在网络游戏中时，建议通过将该属性设置为 <literal>0</literal> 来禁用物理抖动修复。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-property-physics-ticks-per-second"></target>
            <paragraph classes="classref-property" ids="class-engine-property-physics-ticks-per-second" names="class_engine_property_physics_ticks_per_second"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>physics_ticks_per_second</strong> = <literal>60</literal> <reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_physics_ticks_per_second</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_physics_ticks_per_second</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>每秒执行的固定迭代次数。用于控制物理仿真和 <reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference> 的执行频率。因为 Godot 不会进行物理步骤的插值，所以通常应该总是将其设成大于等于 <literal>60</literal> 的值。因此，如果值小于 <literal>60</literal> 就会看起来卡顿。提高该值可以让输入变得更加灵敏、也可以绕过碰撞隧道问题，但请记得这么做也会提升 CPU 的占用率。另请参阅 <reference internal="True" refid="class-engine-property-max-fps"><inline classes="std std-ref">max_fps</inline></reference> 和 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-common-physics-ticks-per-second"><inline classes="std std-ref">ProjectSettings.physics/common/physics_ticks_per_second</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>每个渲染帧最多只能模拟 <reference internal="True" refid="class-engine-property-max-physics-steps-per-frame"><inline classes="std std-ref">max_physics_steps_per_frame</inline></reference> 个物理周期。如果为了追赶渲染，需要在每个渲染帧中模拟更多物理周期，游戏看上去会是降速的（即便在物理计算中始终使用 <literal>delta</literal>）。因此，如果增大了 <reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">physics_ticks_per_second</inline></reference>，而且远大于默认值，那么建议将 <reference internal="True" refid="class-engine-property-max-physics-steps-per-frame"><inline classes="std std-ref">max_physics_steps_per_frame</inline></reference> 也调大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-property-print-error-messages"></target>
            <paragraph classes="classref-property" ids="class-engine-property-print-error-messages" names="class_engine_property_print_error_messages"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>print_error_messages</strong> = <literal>true</literal> <reference internal="True" refid="class-engine-property-print-error-messages"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_print_error_messages</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_printing_error_messages</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>false</literal>，则停止向控制台和编辑器输出日志打印错误和警告消息。这可用于在单元测试套件运行期间隐藏错误和警告消息。该属性等效于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-application-run-disable-stderr"><inline classes="std std-ref">ProjectSettings.application/run/disable_stderr</inline></reference> 项目设置。</paragraph>
            <paragraph><strong>注意：</strong>从编辑器运行项目时，该属性不会影响编辑器的“错误”选项卡。</paragraph>
            <paragraph><strong>警告：</strong>如果在项目的任何地方将该项设置为 <literal>false</literal>，则重要的错误消息可能会被隐藏，即使它们是从其他脚本发出的。在 <literal>@tool</literal> 脚本中，这也会影响编辑器本身。在确保错误消息被启用（默认情况下）之前，<emphasis>不</emphasis>要报告错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-property-time-scale"></target>
            <paragraph classes="classref-property" ids="class-engine-property-time-scale" names="class_engine_property_time_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>time_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-engine-property-time-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_time_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_time_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>游戏内部时钟更新的速度乘数，相对于真实时间。例如设置为 <literal>2.0</literal> 就会让游戏以二倍速运行，设置为 <literal>0.5</literal> 就会让游戏以一半的速度运行。</paragraph>
            <paragraph>这个值会影响 <reference internal="True" refuri="class_timer#class-timer"><inline classes="std std-ref">Timer</inline></reference>、<reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer"><inline classes="std std-ref">SceneTreeTimer</inline></reference> 以及其他使用 <literal>delta</literal> 时间进行的仿真（例如 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>建议让这个属性保持大于 <literal>0.0</literal>，否则可能导致游戏产生意外的行为。</paragraph>
            <paragraph><strong>注意：</strong>这个属性不会影响音频的播放。请使用 <reference internal="True" refuri="class_audioserver#class-audioserver-property-playback-speed-scale"><inline classes="std std-ref">AudioServer.playback_speed_scale</inline></reference> 来调整音频播放的速度，配合 <reference internal="True" refid="class-engine-property-time-scale"><inline classes="std std-ref">time_scale</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这个属性不会自动调整 <reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">physics_ticks_per_second</inline></reference>。大于 <literal>1.0</literal> 时可能导致物理仿真精度的下降，因为每个物理周期都会被拉伸到覆盖引擎中的一大段时间。修改 <reference internal="True" refid="class-engine-property-time-scale"><inline classes="std std-ref">time_scale</inline></reference> 大幅加速仿真速度时，请考虑同时增大 <reference internal="True" refid="class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">physics_ticks_per_second</inline></reference>，让仿真更可靠。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-engine-method-get-architecture-name"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-architecture-name" names="class_engine_method_get_architecture_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_architecture_name</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-architecture-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回构建 Godot 二进制文件所针对的 CPU 架构的名称。可能的返回值有 <literal>"x86_64"</literal>、<literal>"x86_32"</literal>、<literal>"arm64"</literal>、<literal>"arm32"</literal>、<literal>"rv64"</literal>、<literal>"riscv"</literal>、<literal>"ppc64"</literal>、<literal>"ppc"</literal>、<literal>"wasm64"</literal> 和 <literal>"wasm32"</literal>。</paragraph>
            <paragraph>要检测当前构建是否为 64 位，可以利用所有 64 位架构名称中都包含 <literal>64</literal>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">if "64" in Engine.get_architecture_name():
    print("正在运行 64 位 Godot。")
else:
    print("正在运行 32 位 Godot。")</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">if (Engine.GetArchitectureName().Contains("64"))
    GD.Print("正在运行 64 位 Godot。");
else
    GD.Print("正在运行 32 位 Godot。");</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>该方法<emphasis>不返回</emphasis>系统 CPU 架构的名称（如 <reference internal="True" refuri="class_os#class-os-method-get-processor-name"><inline classes="std std-ref">OS.get_processor_name</inline></reference>）。例如在 <literal>x86_64</literal> 系统上运行 <literal>x86_32</literal> Godot 二进制文件时，返回值仍为 <literal>"x86_32"</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-author-info"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-author-info" names="class_engine_method_get_author_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_author_info</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-author-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 形式返回引擎作者信息，其中每个条目都是一个字符串 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，其中包含 Godot 引擎著名贡献者的姓名：<literal>lead_developers</literal>、<literal>founders</literal>、<literal>project_managers</literal> 和 <literal>developers</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-copyright-info"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-copyright-info" names="class_engine_method_get_copyright_info"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>get_copyright_info</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-copyright-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含 Godot 源码组件版权信息的字典的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>。</paragraph>
            <paragraph>每个 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 中都包含了名称标识符 <literal>name</literal> 以及另一个字典数组 <literal>parts</literal>。后者详细描述了对应的组件，包含的字段如下：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>files</literal> - 受到该组件影响的源码文件路径 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>copyright</literal> - 该组件的所有者 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>license</literal> - 该组件适用的协议（例如 "<reference name="Expat" refuri="https://en.wikipedia.org/wiki/MIT_License#Ambiguity_and_variants">Expat</reference>" 或 "<reference name="CC-BY-4.0" refuri="https://creativecommons.org/licenses/by/4.0/">CC-BY-4.0</reference>"）。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-donor-info"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-donor-info" names="class_engine_method_get_donor_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_donor_info</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-donor-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回分类捐赠者姓名的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>。每个条目都是一个字符串 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>：</paragraph>
            <paragraph>{<literal>platinum_sponsors</literal>, <literal>gold_sponsors</literal>, <literal>silver_sponsors</literal>, <literal>bronze_sponsors</literal>, <literal>mini_sponsors</literal>, <literal>gold_donors</literal>, <literal>silver_donors</literal>, <literal>bronze_donors</literal>}</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-frames-drawn"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-frames-drawn" names="class_engine_method_get_frames_drawn"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_frames_drawn</strong>() <reference internal="True" refid="class-engine-method-get-frames-drawn"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自引擎启动以来绘制的帧的总数。</paragraph>
            <paragraph><strong>注意：</strong>在无头平台上，或者如果通过命令行使用 <literal>--disable-render-loop</literal> 禁用渲染，则该方法始终返回 <literal>0</literal>。请参阅 <reference internal="True" refid="class-engine-method-get-process-frames"><inline classes="std std-ref">get_process_frames</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-frames-per-second"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-frames-per-second" names="class_engine_method_get_frames_per_second"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_frames_per_second</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-frames-per-second"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回每秒渲染的平均帧数（FPS），也被称为帧速率。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-license-info"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-license-info" names="class_engine_method_get_license_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_license_info</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-license-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 Godot 和包含的第三方组件使用的许可证的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>。每个条目都是一个许可证名称（例如 "<reference name="Expat" refuri="https://en.wikipedia.org/wiki/MIT_License#Ambiguity_and_variants">Expat</reference>"）及其关联的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-license-text"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-license-text" names="class_engine_method_get_license_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_license_text</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-license-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回完整的 Godot 许可证文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-main-loop"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-main-loop" names="class_engine_method_get_main_loop"><reference internal="True" refuri="class_mainloop#class-mainloop"><inline classes="std std-ref">MainLoop</inline></reference> <strong>get_main_loop</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-main-loop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <reference internal="True" refuri="class_mainloop#class-mainloop"><inline classes="std std-ref">MainLoop</inline></reference> 的实例。这通常是主 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 并且与 <reference internal="True" refuri="class_node#class-node-method-get-tree"><inline classes="std std-ref">Node.get_tree</inline></reference> 相同。</paragraph>
            <paragraph><strong>注意：</strong>作为主循环的实例化类型可以通过 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-application-run-main-loop-type"><inline classes="std std-ref">ProjectSettings.application/run/main_loop_type</inline></reference> 更改。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-physics-frames"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-physics-frames" names="class_engine_method_get_physics_frames"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_physics_frames</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-physics-frames"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自引擎启动以来经过的总帧数。这个数字每个<strong>物理帧</strong>都会增加。另见 <reference internal="True" refid="class-engine-method-get-process-frames"><inline classes="std std-ref">get_process_frames</inline></reference>。</paragraph>
            <paragraph>该方法可用于在不依赖 <reference internal="True" refuri="class_timer#class-timer"><inline classes="std std-ref">Timer</inline></reference> 的情况下，减少运行昂贵的逻辑的次数：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _physics_process(_delta):
    if Engine.get_physics_frames() % 2 == 0:
        pass # 此处每 2 个物理帧仅运行一次昂贵的逻辑。</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _PhysicsProcess(double delta)
{
    base._PhysicsProcess(delta);

    if (Engine.GetPhysicsFrames() % 2 == 0)
    {
        // 此处每 2 个物理帧仅运行一次昂贵的逻辑。
    }
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-physics-interpolation-fraction"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-physics-interpolation-fraction" names="class_engine_method_get_physics_interpolation_fraction"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_physics_interpolation_fraction</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-physics-interpolation-fraction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回渲染帧时当前物理周期中的分数。可用于实现固定的时间步插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-process-frames"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-process-frames" names="class_engine_method_get_process_frames"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_process_frames</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-process-frames"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自引擎启动以来经过的总帧数，无论渲染循环是否启用，每个<strong>处理帧</strong>都会增加该数字。另见 <reference internal="True" refid="class-engine-method-get-frames-drawn"><inline classes="std std-ref">get_frames_drawn</inline></reference> 和 <reference internal="True" refid="class-engine-method-get-physics-frames"><inline classes="std std-ref">get_physics_frames</inline></reference>。</paragraph>
            <paragraph><reference internal="True" refid="class-engine-method-get-process-frames"><inline classes="std std-ref">get_process_frames</inline></reference> 可用于在不依赖 <reference internal="True" refuri="class_timer#class-timer"><inline classes="std std-ref">Timer</inline></reference> 的情况下，减少运行昂贵的逻辑的次数：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _process(_delta):
    if Engine.get_process_frames() % 2 == 0:
        pass # 此处每 2 个处理（渲染）帧仅运行一次昂贵的逻辑。</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Process(double delta)
{
    base._Process(delta);

    if (Engine.GetProcessFrames() % 2 == 0)
    {
        // 此处每 2 个处理（渲染）帧仅运行一次昂贵的逻辑。
    }
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-script-language"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-script-language" names="class_engine_method_get_script_language"><reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> <strong>get_script_language</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-script-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定索引 <literal>index</literal> 处的 <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-script-language-count"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-script-language-count" names="class_engine_method_get_script_language_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_script_language_count</strong>() <reference internal="True" refid="class-engine-method-get-script-language-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回可用脚本语言的数量。请配合 <reference internal="True" refid="class-engine-method-get-script-language"><inline classes="std std-ref">get_script_language</inline></reference> 使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-singleton"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-singleton" names="class_engine_method_get_singleton"><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <strong>get_singleton</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-singleton"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定 <literal>name</literal> 的全局单例，如果不存在则返回 <literal>null</literal>。常用于插件。另见 <reference internal="True" refid="class-engine-method-has-singleton"><inline classes="std std-ref">has_singleton</inline></reference> and <reference internal="True" refid="class-engine-method-get-singleton-list"><inline classes="std std-ref">get_singleton_list</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>全局单例与自动加载的节点不同，后者可以在项目设置中进行配置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-singleton-list"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-singleton-list" names="class_engine_method_get_singleton_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_singleton_list</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-singleton-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有可用全局单例的名称列表。另见 <reference internal="True" refid="class-engine-method-get-singleton"><inline classes="std std-ref">get_singleton</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-version-info"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-version-info" names="class_engine_method_get_version_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_version_info</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-version-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以包含以下条目的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 形式返回当前引擎版本信息：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>major</literal> - 主要版本号为一个 int；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>minor</literal> - 次要版本号为一个 int；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>patch</literal> - 补丁版本号为一个 int；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>hex</literal> - 完整版本被编码为一个十六进制 int，每个数字一个字节（2 个十六进制数字）（参见下面的示例）；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>status</literal> - 状态（例如“beta”、“rc1”、“rc2”、“stable” 等）为一串字符串；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>build</literal> - 构建名称（例如 “custom_build”）为一串字符串；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>hash</literal> - 完整的 Git 提交哈希为一串字符串；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>timestamp</literal> - 以秒为单位，以 int 形式保存 Git 提交日期 UNIX 时间戳，如果不可用，则保存为 <literal>0</literal>；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>string</literal> - 将 <literal>major</literal> + <literal>minor</literal> + <literal>patch</literal> + <literal>status</literal> + <literal>build</literal> 保存在单个字符串中。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><literal>hex</literal> 值的编码方式如下，从左到右：主版本对应一字节，次版本对应一字节，补丁版本对应一字节。例如，“3.1.12”将是 <literal>0x03010C</literal>。</paragraph>
            <paragraph><strong>注意：</strong><literal>hex</literal> 值内部还是一个 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>，打印出来就是它的十进制表示，没有特别的意义。使用十六进制文字从代码中快速比较版本：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">if Engine.get_version_info().hex &gt;= 0x040100:
    pass # 执行特定于版本 4.1 或更高版本的操作。
else:
    pass # 执行特定于 4.1 之前版本的操作。</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">if ((int)Engine.GetVersionInfo()["hex"] &gt;= 0x040100)
{
    // 执行特定于版本 4.1 或更高版本的操作。
}
else
{
    // 执行特定于 4.1 之前版本的操作。
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-get-write-movie-path"></target>
            <paragraph classes="classref-method" ids="class-engine-method-get-write-movie-path" names="class_engine_method_get_write_movie_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_write_movie_path</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-get-write-movie-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_moviewriter#class-moviewriter"><inline classes="std std-ref">MovieWriter</inline></reference> 的输出文件的路径，如果引擎未在 Movie Maker 模式下启动，则返回一个空字符串。该默认路径可以在 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-editor-movie-writer-movie-file"><inline classes="std std-ref">ProjectSettings.editor/movie_writer/movie_file</inline></reference> 中更改。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-has-singleton"></target>
            <paragraph classes="classref-method" ids="class-engine-method-has-singleton" names="class_engine_method_has_singleton"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_singleton</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-has-singleton"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果全局范围内存在具有给定 <literal>name</literal> 的单例，则返回 <literal>true</literal>。另见 <reference internal="True" refid="class-engine-method-get-singleton"><inline classes="std std-ref">get_singleton</inline></reference>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">print(Engine.has_singleton("OS"))          # 输出 true
print(Engine.has_singleton("Engine"))      # 输出 true
print(Engine.has_singleton("AudioServer")) # 输出 true
print(Engine.has_singleton("Unknown"))     # 输出 false</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.Print(Engine.HasSingleton("OS"));          // 输出 true
GD.Print(Engine.HasSingleton("Engine"));      // 输出 true
GD.Print(Engine.HasSingleton("AudioServer")); // 输出 true
GD.Print(Engine.HasSingleton("Unknown"));     // 输出 false</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>全局单例与自动加载的节点不同，后者可以在项目设置中进行配置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-is-editor-hint"></target>
            <paragraph classes="classref-method" ids="class-engine-method-is-editor-hint" names="class_engine_method_is_editor_hint"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_editor_hint</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-is-editor-hint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果脚本当前正在编辑器中运行，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。这对于 <literal>@tool</literal> 脚本很有用，可以有条件地绘制编辑器助手，或者防止在编辑器中意外运行会影响场景状态的“游戏”代码：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">if Engine.is_editor_hint():
    draw_gizmos()
else:
    simulate_physics()</literal_block>
                </div>
                <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">if (Engine.IsEditorHint())
    DrawGizmos();
else
    SimulatePhysics();</literal_block>
                </div>
            </container>
            <paragraph>有关详细信息，请参阅文档中的<reference internal="True" refuri="../tutorials/plugins/running_code_in_the_editor"><inline classes="doc">《在编辑器中运行代码》</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>要检测脚本是否在编辑器<emphasis>构建</emphasis>上运行（例如，当按 <literal classes="kbd">F5</literal> 时），请改用 <reference internal="True" refuri="class_os#class-os-method-has-feature"><inline classes="std std-ref">OS.has_feature</inline></reference> 和 <literal>"editor"</literal> 参数。<literal>OS.has_feature("editor")</literal> 将在编辑器中运行脚本和从编辑器运行项目时，被评估为 <literal>true</literal>；但当从导出的项目运行时，它将被评估为 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-is-in-physics-frame"></target>
            <paragraph classes="classref-method" ids="class-engine-method-is-in-physics-frame" names="class_engine_method_is_in_physics_frame"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_in_physics_frame</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-engine-method-is-in-physics-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果引擎位于主循环的固定物理处理步骤内，则返回 <literal>true</literal>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _enter_tree():
    # 根据节点添加到树中的时间，
    # 输出 “true” 或 “false”。
    print(Engine.is_in_physics_frame())

func _process(delta):
    print(Engine.is_in_physics_frame()) # 输出 false

func _physics_process(delta):
    print(Engine.is_in_physics_frame()) # 输出 true</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-register-script-language"></target>
            <paragraph classes="classref-method" ids="class-engine-method-register-script-language" names="class_engine_method_register_script_language"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>register_script_language</strong>(language: <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference>) <reference internal="True" refid="class-engine-method-register-script-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册一个 <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> 实例，供 <literal>ScriptServer</literal> 使用。</paragraph>
            <paragraph>返回：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference> 表示成功；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-unavailable"><inline classes="std std-ref">@GlobalScope.ERR_UNAVAILABLE</inline></reference> 表示 <literal>ScriptServer</literal> 已达到限制，无法注册任何新语言；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-already-exists"><inline classes="std std-ref">@GlobalScope.ERR_ALREADY_EXISTS</inline></reference> 表示 <literal>ScriptServer</literal> 已经包含一个具有相似扩展名/名称/类型的语言。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-register-singleton"></target>
            <paragraph classes="classref-method" ids="class-engine-method-register-singleton" names="class_engine_method_register_singleton"><abbreviation explanation="无返回值。">void</abbreviation> <strong>register_singleton</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, instance: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <reference internal="True" refid="class-engine-method-register-singleton"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <literal>instance</literal> 注册为单例，在名称 <literal>name</literal> 下全局可用。对于插件很有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-unregister-script-language"></target>
            <paragraph classes="classref-method" ids="class-engine-method-unregister-script-language" names="class_engine_method_unregister_script_language"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>unregister_script_language</strong>(language: <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference>) <reference internal="True" refid="class-engine-method-unregister-script-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 <literal>ScriptServer</literal> 注销该 <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> 实例。</paragraph>
            <paragraph>返回：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference> 表示成功；</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-does-not-exist"><inline classes="std std-ref">@GlobalScope.ERR_DOES_NOT_EXIST</inline></reference> 表示该语言尚未在 <literal>ScriptServer</literal> 中注册。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-engine-method-unregister-singleton"></target>
            <paragraph classes="classref-method" ids="class-engine-method-unregister-singleton" names="class_engine_method_unregister_singleton"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unregister_singleton</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-engine-method-unregister-singleton"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除在 <literal>name</literal> 下注册的单例。该单例对象<emphasis>不会</emphasis>被释放。仅适用于使用 <reference internal="True" refid="class-engine-method-register-singleton"><inline classes="std std-ref">register_singleton</inline></reference> 注册的用户定义的单例。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
