<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_rigidbody2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/RigidBody2D.xml.</comment>
    <target refid="class-rigidbody2d"></target>
    <section ids="rigidbody2d class-rigidbody2d" names="rigidbody2d class_rigidbody2d">
        <title>RigidBody2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_collisionobject2d#class-collisionobject2d"><inline classes="std std-ref">CollisionObject2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_physicalbone2d#class-physicalbone2d"><inline classes="std std-ref">PhysicalBone2D</inline></reference></paragraph>
        <paragraph>由物理仿真进行移动的 2D 物理体。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>RigidBody2D</strong> 实现了完整的 2D 物理。这个物理体无法直接控制，必须对其施加力（重力、冲量等），物理仿真将计算由此产生的移动、旋转、对碰撞的反应以及对沿路其他物理体的影响等。</paragraph>
            <paragraph>可以使用 <reference internal="True" refid="class-rigidbody2d-property-lock-rotation"><inline classes="std std-ref">lock_rotation</inline></reference>、<reference internal="True" refid="class-rigidbody2d-property-freeze"><inline classes="std std-ref">freeze</inline></reference> 和 <reference internal="True" refid="class-rigidbody2d-property-freeze-mode"><inline classes="std std-ref">freeze_mode</inline></reference> 调整该物理体的行为。通过修改该对象的 <reference internal="True" refid="class-rigidbody2d-property-mass"><inline classes="std std-ref">mass</inline></reference> 等属性，你可以控制物理仿真对其的影响。</paragraph>
            <paragraph>即使施加了力，刚体也会始终维持自身的形状和大小。适用于环境中可交互的对象，例如能够推倒的树木或者能够被推动的一堆箱子。</paragraph>
            <paragraph>如果你需要覆盖默认的物理行为，你可以编写自定义的力整合函数。见 <reference internal="True" refid="class-rigidbody2d-property-custom-integrator"><inline classes="std std-ref">custom_integrator</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>频繁修改 <strong>RigidBody2D</strong> 的 2D 变换或 <reference internal="True" refid="class-rigidbody2d-property-linear-velocity"><inline classes="std std-ref">linear_velocity</inline></reference> 可能导致无法预期的行为。如果你需要直接影响物理体，请优先使用 <reference internal="True" refid="class-rigidbody2d-private-method-integrate-forces"><inline classes="std std-ref">_integrate_forces</inline></reference>，能够直接访问物理状态。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="2D 物理平台跳跃演示" refuri="https://godotengine.org/asset-library/asset/2725">2D 物理平台跳跃演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="实例化演示" refuri="https://godotengine.org/asset-library/asset/2716">实例化演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="60"></colspec>
                    <colspec colwidth="88"></colspec>
                    <colspec colwidth="19"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-angular-damp"><inline classes="std std-ref">angular_damp</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">DampMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-angular-damp-mode"><inline classes="std std-ref">angular_damp_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-angular-velocity"><inline classes="std std-ref">angular_velocity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-can-sleep"><inline classes="std std-ref">can_sleep</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-center-of-mass"><inline classes="std std-ref">center_of_mass</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-rigidbody2d-centerofmassmode"><inline classes="std std-ref">CenterOfMassMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-center-of-mass-mode"><inline classes="std std-ref">center_of_mass_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-constant-force"><inline classes="std std-ref">constant_force</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-constant-torque"><inline classes="std std-ref">constant_torque</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-contact-monitor"><inline classes="std std-ref">contact_monitor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-rigidbody2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-continuous-cd"><inline classes="std std-ref">continuous_cd</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-custom-integrator"><inline classes="std std-ref">custom_integrator</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-freeze"><inline classes="std std-ref">freeze</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-rigidbody2d-freezemode"><inline classes="std std-ref">FreezeMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-freeze-mode"><inline classes="std std-ref">freeze_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-gravity-scale"><inline classes="std std-ref">gravity_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-inertia"><inline classes="std std-ref">inertia</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-linear-damp"><inline classes="std std-ref">linear_damp</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">DampMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-linear-damp-mode"><inline classes="std std-ref">linear_damp_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-linear-velocity"><inline classes="std std-ref">linear_velocity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-lock-rotation"><inline classes="std std-ref">lock_rotation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-mass"><inline classes="std std-ref">mass</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-max-contacts-reported"><inline classes="std std-ref">max_contacts_reported</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_physicsmaterial#class-physicsmaterial"><inline classes="std std-ref">PhysicsMaterial</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-physics-material-override"><inline classes="std std-ref">physics_material_override</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-property-sleeping"><inline classes="std std-ref">sleeping</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="58"></colspec>
                    <colspec colwidth="175"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-private-method-integrate-forces"><inline classes="std std-ref">_integrate_forces</inline></reference>(state: <reference internal="True" refuri="class_physicsdirectbodystate2d#class-physicsdirectbodystate2d"><inline classes="std std-ref">PhysicsDirectBodyState2D</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-method-add-constant-central-force"><inline classes="std std-ref">add_constant_central_force</inline></reference>(force: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-method-add-constant-force"><inline classes="std std-ref">add_constant_force</inline></reference>(force: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-method-add-constant-torque"><inline classes="std std-ref">add_constant_torque</inline></reference>(torque: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-method-apply-central-force"><inline classes="std std-ref">apply_central_force</inline></reference>(force: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-method-apply-central-impulse"><inline classes="std std-ref">apply_central_impulse</inline></reference>(impulse: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-method-apply-force"><inline classes="std std-ref">apply_force</inline></reference>(force: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-method-apply-impulse"><inline classes="std std-ref">apply_impulse</inline></reference>(impulse: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-method-apply-torque"><inline classes="std std-ref">apply_torque</inline></reference>(torque: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-method-apply-torque-impulse"><inline classes="std std-ref">apply_torque_impulse</inline></reference>(torque: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-method-get-colliding-bodies"><inline classes="std std-ref">get_colliding_bodies</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-method-get-contact-count"><inline classes="std std-ref">get_contact_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rigidbody2d-method-set-axis-velocity"><inline classes="std std-ref">set_axis_velocity</inline></reference>(axis_velocity: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-rigidbody2d-signal-body-entered"></target>
            <paragraph classes="classref-signal" ids="class-rigidbody2d-signal-body-entered" names="class_rigidbody2d_signal_body_entered"><strong>body_entered</strong>(body: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-rigidbody2d-signal-body-entered"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当与另一个 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 或 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 发生碰撞时发出。需要将 <reference internal="True" refid="class-rigidbody2d-property-contact-monitor"><inline classes="std std-ref">contact_monitor</inline></reference> 设置为 <literal>true</literal>，并将 <reference internal="True" refid="class-rigidbody2d-property-max-contacts-reported"><inline classes="std std-ref">max_contacts_reported</inline></reference> 设置得足够高以检测所有碰撞。如果 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> 具有碰撞 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference>，则 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 将被检测。</paragraph>
            <paragraph><literal>body</literal> 是其他 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 或 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 的 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>，如果该节点存在于树中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-signal-body-exited"></target>
            <paragraph classes="classref-signal" ids="class-rigidbody2d-signal-body-exited" names="class_rigidbody2d_signal_body_exited"><strong>body_exited</strong>(body: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-rigidbody2d-signal-body-exited"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当与另一个 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 或 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 的碰撞结束时发出。需要将 <reference internal="True" refid="class-rigidbody2d-property-contact-monitor"><inline classes="std std-ref">contact_monitor</inline></reference> 设置为 <literal>true</literal>，并将 <reference internal="True" refid="class-rigidbody2d-property-max-contacts-reported"><inline classes="std std-ref">max_contacts_reported</inline></reference> 设置得足够高以检测所有碰撞。如果 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> 具有碰撞 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference>，则 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 将被检测。</paragraph>
            <paragraph><literal>body</literal> 是其他 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 或 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 的 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>，如果该节点存在于树中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-signal-body-shape-entered"></target>
            <paragraph classes="classref-signal" ids="class-rigidbody2d-signal-body-shape-entered" names="class_rigidbody2d_signal_body_shape_entered"><strong>body_shape_entered</strong>(body_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, body: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>, body_shape_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, local_shape_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-rigidbody2d-signal-body-shape-entered"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该 RigidBody2D 的一个 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 与另一个 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 或 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 碰撞时发出。需要将 <reference internal="True" refid="class-rigidbody2d-property-contact-monitor"><inline classes="std std-ref">contact_monitor</inline></reference> 设置为 <literal>true</literal>，并将 <reference internal="True" refid="class-rigidbody2d-property-max-contacts-reported"><inline classes="std std-ref">max_contacts_reported</inline></reference> 设置得足够高以检测所有碰撞。如果 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> 具有 Collision <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference>，则 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 会被检测到。</paragraph>
            <paragraph><literal>body_rid</literal> 由 <reference internal="True" refuri="class_physicsserver2d#class-physicsserver2d"><inline classes="std std-ref">PhysicsServer2D</inline></reference> 使用的其他 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 或 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> 的 <reference internal="True" refuri="class_collisionobject2d#class-collisionobject2d"><inline classes="std std-ref">CollisionObject2D</inline></reference> 的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <paragraph><literal>body</literal> 其他 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 或 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 的 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>，如果该节点存在于树中。</paragraph>
            <paragraph><literal>body_shape_index</literal> 由 <reference internal="True" refuri="class_physicsserver2d#class-physicsserver2d"><inline classes="std std-ref">PhysicsServer2D</inline></reference> 使用的其他 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 或 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 的索引。该 <reference internal="True" refuri="class_collisionshape2d#class-collisionshape2d"><inline classes="std std-ref">CollisionShape2D</inline></reference> 节点可以使用 <literal>body.shape_owner_get_owner(body.shape_find_owner(body_shape_index))</literal> 获取。</paragraph>
            <paragraph><literal>local_shape_index</literal> 由 <reference internal="True" refuri="class_physicsserver2d#class-physicsserver2d"><inline classes="std std-ref">PhysicsServer2D</inline></reference> 使用的该 RigidBody2D 的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 的索引。该 <reference internal="True" refuri="class_collisionshape2d#class-collisionshape2d"><inline classes="std std-ref">CollisionShape2D</inline></reference> 节点可以使用 <literal>self.shape_owner_get_owner(self.shape_find_owner(local_shape_index))</literal> 获取。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-signal-body-shape-exited"></target>
            <paragraph classes="classref-signal" ids="class-rigidbody2d-signal-body-shape-exited" names="class_rigidbody2d_signal_body_shape_exited"><strong>body_shape_exited</strong>(body_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, body: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>, body_shape_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, local_shape_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-rigidbody2d-signal-body-shape-exited"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该 RigidBody2D 的一个 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 与另一个 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 或 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 之间的碰撞结束时发出。需要将 <reference internal="True" refid="class-rigidbody2d-property-contact-monitor"><inline classes="std std-ref">contact_monitor</inline></reference> 设置为 <literal>true</literal>，并将 <reference internal="True" refid="class-rigidbody2d-property-max-contacts-reported"><inline classes="std std-ref">max_contacts_reported</inline></reference> 设置得足够高以检测所有碰撞。如果 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> 具有 Collision <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference>，则 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 会被检测到。</paragraph>
            <paragraph><literal>body_rid</literal> 由 <reference internal="True" refuri="class_physicsserver2d#class-physicsserver2d"><inline classes="std std-ref">PhysicsServer2D</inline></reference> 使用的其他 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 或 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> 的 <reference internal="True" refuri="class_collisionobject2d#class-collisionobject2d"><inline classes="std std-ref">CollisionObject2D</inline></reference> 的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <paragraph><literal>body</literal> 其他 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 或 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 的 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>，如果该节点存在于树中。</paragraph>
            <paragraph><literal>body_shape_index</literal> 由 <reference internal="True" refuri="class_physicsserver2d#class-physicsserver2d"><inline classes="std std-ref">PhysicsServer2D</inline></reference> 使用的其他 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 或 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 的索引。该 <reference internal="True" refuri="class_collisionshape2d#class-collisionshape2d"><inline classes="std std-ref">CollisionShape2D</inline></reference> 节点可以使用 <literal>body.shape_owner_get_owner(body.shape_find_owner(body_shape_index))</literal> 获取。</paragraph>
            <paragraph><literal>local_shape_index</literal> 由 <reference internal="True" refuri="class_physicsserver2d#class-physicsserver2d"><inline classes="std std-ref">PhysicsServer2D</inline></reference> 使用的该 RigidBody2D 的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 的索引。该 <reference internal="True" refuri="class_collisionshape2d#class-collisionshape2d"><inline classes="std std-ref">CollisionShape2D</inline></reference> 节点可以使用 <literal>self.shape_owner_get_owner(self.shape_find_owner(local_shape_index))</literal> 获取。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-signal-sleeping-state-changed"></target>
            <paragraph classes="classref-signal" ids="class-rigidbody2d-signal-sleeping-state-changed" names="class_rigidbody2d_signal_sleeping_state_changed"><strong>sleeping_state_changed</strong>() <reference internal="True" refid="class-rigidbody2d-signal-sleeping-state-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当物理引擎改变物体的睡眠状态时发出。</paragraph>
            <paragraph><strong>注意：</strong>改变 <reference internal="True" refid="class-rigidbody2d-property-sleeping"><inline classes="std std-ref">sleeping</inline></reference> 的值不会触发这个信号。只有当物理引擎改变了睡眠状态或者使用了 <literal>emit_signal("sleeping_state_changed")</literal> 时，它才会被发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-rigidbody2d-freezemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-rigidbody2d-freezemode" names="enum_rigidbody2d_freezemode">enum <strong>FreezeMode</strong>: <reference internal="True" refid="enum-rigidbody2d-freezemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-rigidbody2d-constant-freeze-mode-static"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-rigidbody2d-constant-freeze-mode-static" names="class_rigidbody2d_constant_freeze_mode_static"><reference internal="True" refid="enum-rigidbody2d-freezemode"><inline classes="std std-ref">FreezeMode</inline></reference> <strong>FREEZE_MODE_STATIC</strong> = <literal>0</literal></paragraph>
            <paragraph>静态物体冻结模式（默认）。物体不受重力和力的影响。它只能由用户的代码移动，并且其他物体沿其路径运动时，不会与之发生碰撞。</paragraph>
            <target refid="class-rigidbody2d-constant-freeze-mode-kinematic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-rigidbody2d-constant-freeze-mode-kinematic" names="class_rigidbody2d_constant_freeze_mode_kinematic"><reference internal="True" refid="enum-rigidbody2d-freezemode"><inline classes="std std-ref">FreezeMode</inline></reference> <strong>FREEZE_MODE_KINEMATIC</strong> = <literal>1</literal></paragraph>
            <paragraph>运动物体的冻结模式。类似于 <reference internal="True" refid="class-rigidbody2d-constant-freeze-mode-static"><inline classes="std std-ref">FREEZE_MODE_STATIC</inline></reference> ，但是在移动时会与其路径上的其他物体发生碰撞。适用于需要动画的冻结物体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-rigidbody2d-centerofmassmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-rigidbody2d-centerofmassmode" names="enum_rigidbody2d_centerofmassmode">enum <strong>CenterOfMassMode</strong>: <reference internal="True" refid="enum-rigidbody2d-centerofmassmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-rigidbody2d-constant-center-of-mass-mode-auto"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-rigidbody2d-constant-center-of-mass-mode-auto" names="class_rigidbody2d_constant_center_of_mass_mode_auto"><reference internal="True" refid="enum-rigidbody2d-centerofmassmode"><inline classes="std std-ref">CenterOfMassMode</inline></reference> <strong>CENTER_OF_MASS_MODE_AUTO</strong> = <literal>0</literal></paragraph>
            <paragraph>在此模式下，该物体的质心将基于其形状自动计算。此处的前提是各个形状的原点也是对应的质心。</paragraph>
            <target refid="class-rigidbody2d-constant-center-of-mass-mode-custom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-rigidbody2d-constant-center-of-mass-mode-custom" names="class_rigidbody2d_constant_center_of_mass_mode_custom"><reference internal="True" refid="enum-rigidbody2d-centerofmassmode"><inline classes="std std-ref">CenterOfMassMode</inline></reference> <strong>CENTER_OF_MASS_MODE_CUSTOM</strong> = <literal>1</literal></paragraph>
            <paragraph>在此模式下，物体的质心通过 <reference internal="True" refid="class-rigidbody2d-property-center-of-mass"><inline classes="std std-ref">center_of_mass</inline></reference> 设置。默认为物体的原点位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-rigidbody2d-dampmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-rigidbody2d-dampmode" names="enum_rigidbody2d_dampmode">enum <strong>DampMode</strong>: <reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-rigidbody2d-constant-damp-mode-combine"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-rigidbody2d-constant-damp-mode-combine" names="class_rigidbody2d_constant_damp_mode_combine"><reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">DampMode</inline></reference> <strong>DAMP_MODE_COMBINE</strong> = <literal>0</literal></paragraph>
            <paragraph>在这种模式下，物体的阻尼值将被加到区域中设置的任何值或默认值。</paragraph>
            <target refid="class-rigidbody2d-constant-damp-mode-replace"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-rigidbody2d-constant-damp-mode-replace" names="class_rigidbody2d_constant_damp_mode_replace"><reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">DampMode</inline></reference> <strong>DAMP_MODE_REPLACE</strong> = <literal>1</literal></paragraph>
            <paragraph>在这种模式下，物体的阻尼值将替换掉区域中设置的任何值或默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-rigidbody2d-ccdmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-rigidbody2d-ccdmode" names="enum_rigidbody2d_ccdmode">enum <strong>CCDMode</strong>: <reference internal="True" refid="enum-rigidbody2d-ccdmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-rigidbody2d-constant-ccd-mode-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-rigidbody2d-constant-ccd-mode-disabled" names="class_rigidbody2d_constant_ccd_mode_disabled"><reference internal="True" refid="enum-rigidbody2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference> <strong>CCD_MODE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用连续碰撞检测。这是检测物体碰撞的最快方法，但可能会错过小型、快速移动的物体。</paragraph>
            <target refid="class-rigidbody2d-constant-ccd-mode-cast-ray"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-rigidbody2d-constant-ccd-mode-cast-ray" names="class_rigidbody2d_constant_ccd_mode_cast_ray"><reference internal="True" refid="enum-rigidbody2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference> <strong>CCD_MODE_CAST_RAY</strong> = <literal>1</literal></paragraph>
            <paragraph>使用射线投射启用连续碰撞检测。这比形状投射快，但精度较低。</paragraph>
            <target refid="class-rigidbody2d-constant-ccd-mode-cast-shape"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-rigidbody2d-constant-ccd-mode-cast-shape" names="class_rigidbody2d_constant_ccd_mode_cast_shape"><reference internal="True" refid="enum-rigidbody2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference> <strong>CCD_MODE_CAST_SHAPE</strong> = <literal>2</literal></paragraph>
            <paragraph>使用形状投射启用连续碰撞检测。这是最慢的 CCD 方法，也是最精确的。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-rigidbody2d-property-angular-damp"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-angular-damp" names="class_rigidbody2d_property_angular_damp"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>angular_damp</strong> = <literal>0.0</literal> <reference internal="True" refid="class-rigidbody2d-property-angular-damp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_angular_damp</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_angular_damp</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>减缓物体的旋转。默认情况下，物体将使用 <strong>项目&gt; 项目设置&gt; 物理&gt; 2D</strong> 中的<strong>默认角阻尼</strong>，或由 <reference internal="True" refuri="class_area2d#class-area2d"><inline classes="std std-ref">Area2D</inline></reference> 设置的任何值覆盖。根据 <reference internal="True" refid="class-rigidbody2d-property-angular-damp-mode"><inline classes="std std-ref">angular_damp_mode</inline></reference>，你可以设置 <reference internal="True" refid="class-rigidbody2d-property-angular-damp-mode"><inline classes="std std-ref">angular_damp_mode</inline></reference> 以添加到或替换物体的阻尼值。</paragraph>
            <paragraph>有关阻尼的更多详细信息，请参见 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-2d-default-angular-damp"><inline classes="std std-ref">ProjectSettings.physics/2d/default_angular_damp</inline></reference> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-angular-damp-mode"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-angular-damp-mode" names="class_rigidbody2d_property_angular_damp_mode"><reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">DampMode</inline></reference> <strong>angular_damp_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-rigidbody2d-property-angular-damp-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_angular_damp_mode</strong>(value: <reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">DampMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">DampMode</inline></reference> <strong>get_angular_damp_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>定义如何应用 <reference internal="True" refid="class-rigidbody2d-property-angular-damp"><inline classes="std std-ref">angular_damp</inline></reference>。可能的取值见 <reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">DampMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-angular-velocity"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-angular-velocity" names="class_rigidbody2d_property_angular_velocity"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>angular_velocity</strong> = <literal>0.0</literal> <reference internal="True" refid="class-rigidbody2d-property-angular-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_angular_velocity</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_angular_velocity</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>物体的旋转速度，单位为<emphasis>弧度</emphasis>每秒。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-can-sleep"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-can-sleep" names="class_rigidbody2d_property_can_sleep"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>can_sleep</strong> = <literal>true</literal> <reference internal="True" refid="class-rigidbody2d-property-can-sleep"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_can_sleep</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_able_to_sleep</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则物体未运动时可以进入睡眠模式。见 <reference internal="True" refid="class-rigidbody2d-property-sleeping"><inline classes="std std-ref">sleeping</inline></reference> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-center-of-mass"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-center-of-mass" names="class_rigidbody2d_property_center_of_mass"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>center_of_mass</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-rigidbody2d-property-center-of-mass"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_center_of_mass</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_center_of_mass</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当 <reference internal="True" refid="class-rigidbody2d-property-center-of-mass-mode"><inline classes="std std-ref">center_of_mass_mode</inline></reference> 设置为 <reference internal="True" refid="class-rigidbody2d-constant-center-of-mass-mode-custom"><inline classes="std std-ref">CENTER_OF_MASS_MODE_CUSTOM</inline></reference> 时，物体的自定义质心相对于物体原点位置的位置。这是物体的平衡点，只有施加在质心内的力才会引起线性加速度。施加在质心之外的力会引起角加速度。</paragraph>
            <paragraph>当 <reference internal="True" refid="class-rigidbody2d-property-center-of-mass-mode"><inline classes="std std-ref">center_of_mass_mode</inline></reference> 设置为 <reference internal="True" refid="class-rigidbody2d-constant-center-of-mass-mode-auto"><inline classes="std std-ref">CENTER_OF_MASS_MODE_AUTO</inline></reference>（默认值）时，会自动计算质心。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-center-of-mass-mode"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-center-of-mass-mode" names="class_rigidbody2d_property_center_of_mass_mode"><reference internal="True" refid="enum-rigidbody2d-centerofmassmode"><inline classes="std std-ref">CenterOfMassMode</inline></reference> <strong>center_of_mass_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-rigidbody2d-property-center-of-mass-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_center_of_mass_mode</strong>(value: <reference internal="True" refid="enum-rigidbody2d-centerofmassmode"><inline classes="std std-ref">CenterOfMassMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-rigidbody2d-centerofmassmode"><inline classes="std std-ref">CenterOfMassMode</inline></reference> <strong>get_center_of_mass_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>定义设置物体质心的方式。可能的取值见 <reference internal="True" refid="enum-rigidbody2d-centerofmassmode"><inline classes="std std-ref">CenterOfMassMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-constant-force"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-constant-force" names="class_rigidbody2d_property_constant_force"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>constant_force</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-rigidbody2d-property-constant-force"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_constant_force</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_constant_force</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在每个物理更新期间施加到物体的总恒定位置的力。</paragraph>
            <paragraph>见 <reference internal="True" refid="class-rigidbody2d-method-add-constant-force"><inline classes="std std-ref">add_constant_force</inline></reference> 和 <reference internal="True" refid="class-rigidbody2d-method-add-constant-central-force"><inline classes="std std-ref">add_constant_central_force</inline></reference> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-constant-torque"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-constant-torque" names="class_rigidbody2d_property_constant_torque"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>constant_torque</strong> = <literal>0.0</literal> <reference internal="True" refid="class-rigidbody2d-property-constant-torque"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_constant_torque</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_constant_torque</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在每个物理更新期间施加的物体的总恒定旋转力。</paragraph>
            <paragraph>见 <reference internal="True" refid="class-rigidbody2d-method-add-constant-torque"><inline classes="std std-ref">add_constant_torque</inline></reference> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-contact-monitor"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-contact-monitor" names="class_rigidbody2d_property_contact_monitor"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>contact_monitor</strong> = <literal>false</literal> <reference internal="True" refid="class-rigidbody2d-property-contact-monitor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_contact_monitor</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_contact_monitor_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 RigidBody2D 将在与其他物体碰撞时发出信号。</paragraph>
            <paragraph><strong>注意：</strong>默认情况下，报告的最大接触数被设置为 0，表示不会记录任何内容，见 <reference internal="True" refid="class-rigidbody2d-property-max-contacts-reported"><inline classes="std std-ref">max_contacts_reported</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-continuous-cd"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-continuous-cd" names="class_rigidbody2d_property_continuous_cd"><reference internal="True" refid="enum-rigidbody2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference> <strong>continuous_cd</strong> = <literal>0</literal> <reference internal="True" refid="class-rigidbody2d-property-continuous-cd"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_continuous_collision_detection_mode</strong>(value: <reference internal="True" refid="enum-rigidbody2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-rigidbody2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference> <strong>get_continuous_collision_detection_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>连续碰撞检测模式。</paragraph>
            <paragraph>连续碰撞检测尝试预测一个移动的物体会在哪里碰撞，而不是移动它并在碰撞后纠正它的运动。连续碰撞检测速度较慢，但更精确，并且与快速移动的小物体发生碰撞时遗漏更少。可以使用光线投射和形状投射方法。有关详细信息，请参阅 <reference internal="True" refid="enum-rigidbody2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-custom-integrator"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-custom-integrator" names="class_rigidbody2d_property_custom_integrator"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>custom_integrator</strong> = <literal>false</literal> <reference internal="True" refid="class-rigidbody2d-property-custom-integrator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_custom_integrator</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_custom_integrator</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If <literal>true</literal>, the standard force integration (like gravity or damping) will be disabled for this body. Other than collision response, the body will only move as determined by the <reference internal="True" refid="class-rigidbody2d-private-method-integrate-forces"><inline classes="std std-ref">_integrate_forces</inline></reference> method, if that virtual method is overridden.</paragraph>
            <paragraph>Setting this property will call the method <reference internal="True" refuri="class_physicsserver2d#class-physicsserver2d-method-body-set-omit-force-integration"><inline classes="std std-ref">PhysicsServer2D.body_set_omit_force_integration</inline></reference> internally.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-freeze"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-freeze" names="class_rigidbody2d_property_freeze"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>freeze</strong> = <literal>false</literal> <reference internal="True" refid="class-rigidbody2d-property-freeze"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_freeze_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_freeze_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果位 <literal>true</literal>，则物体被冻结。不再施加重力和力。</paragraph>
            <paragraph>请参阅 <reference internal="True" refid="class-rigidbody2d-property-freeze-mode"><inline classes="std std-ref">freeze_mode</inline></reference>，以设置冻结时，物体的行为。</paragraph>
            <paragraph>对于始终冻结的物体，请改用 <reference internal="True" refuri="class_staticbody2d#class-staticbody2d"><inline classes="std std-ref">StaticBody2D</inline></reference> 或 <reference internal="True" refuri="class_animatablebody2d#class-animatablebody2d"><inline classes="std std-ref">AnimatableBody2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-freeze-mode"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-freeze-mode" names="class_rigidbody2d_property_freeze_mode"><reference internal="True" refid="enum-rigidbody2d-freezemode"><inline classes="std std-ref">FreezeMode</inline></reference> <strong>freeze_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-rigidbody2d-property-freeze-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_freeze_mode</strong>(value: <reference internal="True" refid="enum-rigidbody2d-freezemode"><inline classes="std std-ref">FreezeMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-rigidbody2d-freezemode"><inline classes="std std-ref">FreezeMode</inline></reference> <strong>get_freeze_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该物体的冻结模式。可以设置该物体在启用 <reference internal="True" refid="class-rigidbody2d-property-freeze"><inline classes="std std-ref">freeze</inline></reference> 时的行为。可能的值见 <reference internal="True" refid="enum-rigidbody2d-freezemode"><inline classes="std std-ref">FreezeMode</inline></reference>。</paragraph>
            <paragraph>对于始终冻结的物体，请改用 <reference internal="True" refuri="class_staticbody3d#class-staticbody3d"><inline classes="std std-ref">StaticBody3D</inline></reference> 或 <reference internal="True" refuri="class_animatablebody3d#class-animatablebody3d"><inline classes="std std-ref">AnimatableBody3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-gravity-scale"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-gravity-scale" names="class_rigidbody2d_property_gravity_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>gravity_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-rigidbody2d-property-gravity-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_gravity_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_gravity_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>乘以施加在物体上的重力。物体的重力是由<strong>项目 &gt; 项目设置 &gt; 物理 &gt; 2D</strong> 中的<strong>默认重力</strong>值和/或任何由 <reference internal="True" refuri="class_area2d#class-area2d"><inline classes="std std-ref">Area2D</inline></reference> 应用的额外重力向量计算出来的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-inertia"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-inertia" names="class_rigidbody2d_property_inertia"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>inertia</strong> = <literal>0.0</literal> <reference internal="True" refid="class-rigidbody2d-property-inertia"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_inertia</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_inertia</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该物体的转动惯量。与质量类似，但用于旋转：用于确定需要施加多少力矩才能让该物体旋转。通常会自动根据质量和形状计算转动惯量，但这个属性能够让你设置自定义的值。</paragraph>
            <paragraph>设置为 <literal>0</literal> 时，会自动计算惯量（默认值）。</paragraph>
            <paragraph><strong>注意：</strong>自动计算出惯量后，这个值不会改变。请使用 <reference internal="True" refuri="class_physicsserver2d#class-physicsserver2d"><inline classes="std std-ref">PhysicsServer2D</inline></reference> 获取计算出的惯量。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@onready var ball = $Ball

func get_ball_inertia():
    return 1.0 / PhysicsServer2D.body_get_direct_state(ball.get_rid()).inverse_inertia</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private RigidBody2D _ball;

public override void _Ready()
{
    _ball = GetNode&lt;RigidBody2D&gt;("Ball");
}

private float GetBallInertia()
{
    return 1.0f / PhysicsServer2D.BodyGetDirectState(_ball.GetRid()).InverseInertia;
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-linear-damp"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-linear-damp" names="class_rigidbody2d_property_linear_damp"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>linear_damp</strong> = <literal>0.0</literal> <reference internal="True" refid="class-rigidbody2d-property-linear-damp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_linear_damp</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_linear_damp</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>阻碍物体的运动。默认情况下，物体将使用 <strong>项目 &gt; 项目设置 &gt; 物理 &gt; 2D</strong> 中的 <strong>默认线性阻尼</strong>或物体所在的 <reference internal="True" refuri="class_area2d#class-area2d"><inline classes="std std-ref">Area2D</inline></reference> 设置的任何值覆盖。取决于 <reference internal="True" refid="class-rigidbody2d-property-linear-damp-mode"><inline classes="std std-ref">linear_damp_mode</inline></reference>，你可以将 <reference internal="True" refid="class-rigidbody2d-property-linear-damp"><inline classes="std std-ref">linear_damp</inline></reference> 设置为添加或替换物体的阻尼值。</paragraph>
            <paragraph>有关阻尼的更多详细信息，请参见 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-2d-default-linear-damp"><inline classes="std std-ref">ProjectSettings.physics/2d/default_linear_damp</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-linear-damp-mode"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-linear-damp-mode" names="class_rigidbody2d_property_linear_damp_mode"><reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">DampMode</inline></reference> <strong>linear_damp_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-rigidbody2d-property-linear-damp-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_linear_damp_mode</strong>(value: <reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">DampMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">DampMode</inline></reference> <strong>get_linear_damp_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>定义如何应用 <reference internal="True" refid="class-rigidbody2d-property-linear-damp"><inline classes="std std-ref">linear_damp</inline></reference>。有关可能的值，请参阅 <reference internal="True" refid="enum-rigidbody2d-dampmode"><inline classes="std std-ref">DampMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-linear-velocity"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-linear-velocity" names="class_rigidbody2d_property_linear_velocity"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>linear_velocity</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-rigidbody2d-property-linear-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_linear_velocity</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_linear_velocity</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该实体的线速度，单位为像素每秒。可以偶尔使用，但是<strong>不要每一帧都去设置</strong>，因为物理可能在另一个线程中运行，并且以不同的间隔。使用 <reference internal="True" refid="class-rigidbody2d-private-method-integrate-forces"><inline classes="std std-ref">_integrate_forces</inline></reference> 作为你的进程循环，以精确控制物体状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-lock-rotation"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-lock-rotation" names="class_rigidbody2d_property_lock_rotation"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>lock_rotation</strong> = <literal>false</literal> <reference internal="True" refid="class-rigidbody2d-property-lock-rotation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_lock_rotation_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_lock_rotation_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该物体不能旋转。重力和力只施加线性运动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-mass"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-mass" names="class_rigidbody2d_property_mass"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>mass</strong> = <literal>1.0</literal> <reference internal="True" refid="class-rigidbody2d-property-mass"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_mass</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_mass</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>实体的质量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-max-contacts-reported"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-max-contacts-reported" names="class_rigidbody2d_property_max_contacts_reported"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_contacts_reported</strong> = <literal>0</literal> <reference internal="True" refid="class-rigidbody2d-property-max-contacts-reported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_contacts_reported</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_contacts_reported</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将记录的最大接触点数。需要一个大于 0 的值，并将 <reference internal="True" refid="class-rigidbody2d-property-contact-monitor"><inline classes="std std-ref">contact_monitor</inline></reference> 设置为 <literal>true</literal> 以开始注册接触。使用 <reference internal="True" refid="class-rigidbody2d-method-get-contact-count"><inline classes="std std-ref">get_contact_count</inline></reference> 检索计数或使用 <reference internal="True" refid="class-rigidbody2d-method-get-colliding-bodies"><inline classes="std std-ref">get_colliding_bodies</inline></reference> 检索已发生碰撞的物体。</paragraph>
            <paragraph><strong>注意：</strong>接触点的数量不同于碰撞的数量。平行边之间的碰撞将导致两个接触点（每个端点一个），平行面之间的碰撞将导致四个接触点（每个角落一个）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-physics-material-override"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-physics-material-override" names="class_rigidbody2d_property_physics_material_override"><reference internal="True" refuri="class_physicsmaterial#class-physicsmaterial"><inline classes="std std-ref">PhysicsMaterial</inline></reference> <strong>physics_material_override</strong> <reference internal="True" refid="class-rigidbody2d-property-physics-material-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_physics_material_override</strong>(value: <reference internal="True" refuri="class_physicsmaterial#class-physicsmaterial"><inline classes="std std-ref">PhysicsMaterial</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_physicsmaterial#class-physicsmaterial"><inline classes="std std-ref">PhysicsMaterial</inline></reference> <strong>get_physics_material_override</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>物体的物理材质。</paragraph>
            <paragraph>如果为该属性指定了一种材质，则将使用该材质代替任何其他物理材质，例如继承的材质。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-property-sleeping"></target>
            <paragraph classes="classref-property" ids="class-rigidbody2d-property-sleeping" names="class_rigidbody2d_property_sleeping"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>sleeping</strong> = <literal>false</literal> <reference internal="True" refid="class-rigidbody2d-property-sleeping"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_sleeping</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_sleeping</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal> ，该刚体将不会移动，也不会计算受力，直到被另一个物体唤醒，例如通过碰撞或使用 <reference internal="True" refid="class-rigidbody2d-method-apply-impulse"><inline classes="std std-ref">apply_impulse</inline></reference> 或 <reference internal="True" refid="class-rigidbody2d-method-apply-force"><inline classes="std std-ref">apply_force</inline></reference> 方法。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-rigidbody2d-private-method-integrate-forces"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-private-method-integrate-forces" names="class_rigidbody2d_private_method__integrate_forces"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_integrate_forces</strong>(state: <reference internal="True" refuri="class_physicsdirectbodystate2d#class-physicsdirectbodystate2d"><inline classes="std std-ref">PhysicsDirectBodyState2D</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-rigidbody2d-private-method-integrate-forces"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it is called before the standard force integration, but the <reference internal="True" refid="class-rigidbody2d-property-custom-integrator"><inline classes="std std-ref">custom_integrator</inline></reference> property allows you to disable the standard force integration and do fully custom force integration for a body.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-method-add-constant-central-force"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-method-add-constant-central-force" names="class_rigidbody2d_method_add_constant_central_force"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_constant_central_force</strong>(force: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-rigidbody2d-method-add-constant-central-force"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在不影响旋转的情况下，添加一个定向的恒定力，该力会随着时间的推移而持续施加，直到使用 <literal>constant_force = Vector2(0, 0)</literal> 清除。</paragraph>
            <paragraph>这相当于在物体的质心处，使用 <reference internal="True" refid="class-rigidbody2d-method-add-constant-force"><inline classes="std std-ref">add_constant_force</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-method-add-constant-force"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-method-add-constant-force" names="class_rigidbody2d_method_add_constant_force"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_constant_force</strong>(force: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <reference internal="True" refid="class-rigidbody2d-method-add-constant-force"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向实体添加一个恒定的定位力，持续施加，直到用 <literal>constant_force = Vector2(0, 0)</literal> 清除。</paragraph>
            <paragraph><literal>position</literal> 是在全局坐标中距实体原点的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-method-add-constant-torque"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-method-add-constant-torque" names="class_rigidbody2d_method_add_constant_torque"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_constant_torque</strong>(torque: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-rigidbody2d-method-add-constant-torque"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加一个恒定的旋转力矩，而不影响位置，该力会随着时间的推移不断施加，直到使用 <literal>constant_torque = 0</literal> 清除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-method-apply-central-force"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-method-apply-central-force" names="class_rigidbody2d_method_apply_central_force"><abbreviation explanation="无返回值。">void</abbreviation> <strong>apply_central_force</strong>(force: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-rigidbody2d-method-apply-central-force"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>施加一个不影响旋转的定向力。该力是时间相关的，意味着每次物理更新都会施加。</paragraph>
            <paragraph>这相当于在物体的质心处，使用 <reference internal="True" refid="class-rigidbody2d-method-apply-force"><inline classes="std std-ref">apply_force</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-method-apply-central-impulse"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-method-apply-central-impulse" names="class_rigidbody2d_method_apply_central_impulse"><abbreviation explanation="无返回值。">void</abbreviation> <strong>apply_central_impulse</strong>(impulse: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <reference internal="True" refid="class-rigidbody2d-method-apply-central-impulse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>施加一个不影响的旋转定向冲量。</paragraph>
            <paragraph>冲量与时间无关！每帧应用一个冲量，会产生一个依赖于帧速率的力。出于这个原因，它应该只在模拟一次性影响时使用（否则使用 “_force”函数）。</paragraph>
            <paragraph>这相当于在物体的质心处，使用 <reference internal="True" refid="class-rigidbody2d-method-apply-impulse"><inline classes="std std-ref">apply_impulse</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-method-apply-force"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-method-apply-force" names="class_rigidbody2d_method_apply_force"><abbreviation explanation="无返回值。">void</abbreviation> <strong>apply_force</strong>(force: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <reference internal="True" refid="class-rigidbody2d-method-apply-force"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>对实体施加一个定位力。力是时间相关的，意味着每次物理更新都会被施加。</paragraph>
            <paragraph><literal>position</literal> 是在全局坐标中距实体原点的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-method-apply-impulse"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-method-apply-impulse" names="class_rigidbody2d_method_apply_impulse"><abbreviation explanation="无返回值。">void</abbreviation> <strong>apply_impulse</strong>(impulse: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <reference internal="True" refid="class-rigidbody2d-method-apply-impulse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向实体施加一个定位冲量。</paragraph>
            <paragraph>冲量是时间无关的！每帧施加一个冲量将产生一个依赖于帧速率的力。出于这个原因，它应该只在模拟一次性影响时使用（否则使用“_force”函数）。</paragraph>
            <paragraph><literal>position</literal> 是在全局坐标中距实体原点的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-method-apply-torque"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-method-apply-torque" names="class_rigidbody2d_method_apply_torque"><abbreviation explanation="无返回值。">void</abbreviation> <strong>apply_torque</strong>(torque: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-rigidbody2d-method-apply-torque"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>施加旋转力但不影响位置。力是与时间相关的，应该每次物理更新时都要进行施加。</paragraph>
            <paragraph><strong>注意：</strong>有 <reference internal="True" refid="class-rigidbody2d-property-inertia"><inline classes="std std-ref">inertia</inline></reference> 才能正常工作。要让 <reference internal="True" refid="class-rigidbody2d-property-inertia"><inline classes="std std-ref">inertia</inline></reference> 存在，必须有一个 <reference internal="True" refuri="class_collisionshape2d#class-collisionshape2d"><inline classes="std std-ref">CollisionShape2D</inline></reference> 作为该节点的子节点，或者你也可以手动设置 <reference internal="True" refid="class-rigidbody2d-property-inertia"><inline classes="std std-ref">inertia</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-method-apply-torque-impulse"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-method-apply-torque-impulse" names="class_rigidbody2d_method_apply_torque_impulse"><abbreviation explanation="无返回值。">void</abbreviation> <strong>apply_torque_impulse</strong>(torque: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-rigidbody2d-method-apply-torque-impulse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在不影响位置的情况下，向实体施加一个旋转冲量。</paragraph>
            <paragraph>冲量是时间无关的！每帧施加一个冲量将产生依赖于帧速率的力。出于这个原因，它应该只在模拟一次性影响时使用（否则使用“_force”函数）。</paragraph>
            <paragraph><strong>注意：</strong>需要 <reference internal="True" refid="class-rigidbody2d-property-inertia"><inline classes="std std-ref">inertia</inline></reference> 才能发挥作用。要具有 <reference internal="True" refid="class-rigidbody2d-property-inertia"><inline classes="std std-ref">inertia</inline></reference>，活动的 <reference internal="True" refuri="class_collisionshape2d#class-collisionshape2d"><inline classes="std std-ref">CollisionShape2D</inline></reference> 必须是该节点的一个子节点，或者可以手动设置 <reference internal="True" refid="class-rigidbody2d-property-inertia"><inline classes="std std-ref">inertia</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-method-get-colliding-bodies"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-method-get-colliding-bodies" names="class_rigidbody2d_method_get_colliding_bodies"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference>] <strong>get_colliding_bodies</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rigidbody2d-method-get-colliding-bodies"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与此物体发生碰撞的物体的列表。需要将 <reference internal="True" refid="class-rigidbody2d-property-contact-monitor"><inline classes="std std-ref">contact_monitor</inline></reference> 设置为 <literal>true</literal>，并将 <reference internal="True" refid="class-rigidbody2d-property-max-contacts-reported"><inline classes="std std-ref">max_contacts_reported</inline></reference> 设置足够高以侦测所有碰撞。</paragraph>
            <paragraph><strong>注意：</strong>此测试的结果不会立即在移动物体后得出。为了提高性能，碰撞列表每帧更新一次，且在物理迭代之前进行。可考虑改用信号来代替。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-method-get-contact-count"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-method-get-contact-count" names="class_rigidbody2d_method_get_contact_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_contact_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rigidbody2d-method-get-contact-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此物体与其他物体的接触数。默认情况下，除非配置监视接触的物体（见 <reference internal="True" refid="class-rigidbody2d-property-contact-monitor"><inline classes="std std-ref">contact_monitor</inline></reference>），否则返回 0。</paragraph>
            <paragraph><strong>注意：</strong>要获取正在碰撞的物体，请使用 <reference internal="True" refid="class-rigidbody2d-method-get-colliding-bodies"><inline classes="std std-ref">get_colliding_bodies</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rigidbody2d-method-set-axis-velocity"></target>
            <paragraph classes="classref-method" ids="class-rigidbody2d-method-set-axis-velocity" names="class_rigidbody2d_method_set_axis_velocity"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_axis_velocity</strong>(axis_velocity: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-rigidbody2d-method-set-axis-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置物体在给定轴上的速度。给定矢量轴上的速度将设置为给定向量长度。这对于跳跃行为很有用。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
