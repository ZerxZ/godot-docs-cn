<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_multimesh.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/MultiMesh.xml.</comment>
    <target refid="class-multimesh"></target>
    <section ids="multimesh class-multimesh" names="multimesh class_multimesh">
        <title>MultiMesh</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>使用 GPU 实例提供单一网格的高性能多次绘制。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>MultiMesh 提供了低级别的网格实例化功能。绘制数以千计的 <reference internal="True" refuri="class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> 节点可能会很慢，因为每个对象都要提交给 GPU 然后单独绘制。</paragraph>
            <paragraph>MultiMesh 要快得多，因为它可以通过一次绘制调用来绘制成千上万的实例，从而减少 API 的开销。</paragraph>
            <paragraph>缺点是，如果实例之间的距离太远，性能可能会降低，因为每一个实例总是会被渲染（对于整个对象，它们在空间上被索引为一个）。</paragraph>
            <paragraph>由于实例可能具有任何行为，因此用于可见性的 AABB 必须由用户提供。</paragraph>
            <paragraph><strong>注意：</strong>MultiMesh 是单个对象，因此适用相同的对每个对象的最大灯光限制。这意味着，一旦最大灯光被一个或多个实例消耗了，其余的 MultiMesh 实例将<strong>不会</strong>接收任何光照。</paragraph>
            <paragraph><strong>注意：</strong>在 MultiMesh 中使用的 Blend Shape 将被忽略。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/using_multi_mesh_instance"><inline classes="doc">使用 MultiMeshInstance</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/performance/using_multimesh"><inline classes="doc">使用 MultiMesh 进行优化</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/performance/vertex_animation/animating_thousands_of_fish"><inline classes="doc">使用 MultiMeshInstance 动画化数千条鱼</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="56"></colspec>
                    <colspec colwidth="80"></colspec>
                    <colspec colwidth="26"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-property-buffer"><inline classes="std std-ref">buffer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedFloat32Array()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-property-color-array"><inline classes="std std-ref">color_array</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-property-custom-data-array"><inline classes="std std-ref">custom_data_array</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-property-instance-count"><inline classes="std std-ref">instance_count</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-property-mesh"><inline classes="std std-ref">mesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-property-transform-2d-array"><inline classes="std std-ref">transform_2d_array</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-property-transform-array"><inline classes="std std-ref">transform_array</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-multimesh-transformformat"><inline classes="std std-ref">TransformFormat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-property-transform-format"><inline classes="std std-ref">transform_format</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-property-use-colors"><inline classes="std std-ref">use_colors</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-property-use-custom-data"><inline classes="std std-ref">use_custom_data</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-property-visible-instance-count"><inline classes="std std-ref">visible_instance_count</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="176"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-method-get-aabb"><inline classes="std std-ref">get_aabb</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-method-get-instance-color"><inline classes="std std-ref">get_instance_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-method-get-instance-custom-data"><inline classes="std std-ref">get_instance_custom_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-method-get-instance-transform"><inline classes="std std-ref">get_instance_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-method-get-instance-transform-2d"><inline classes="std std-ref">get_instance_transform_2d</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-method-set-instance-color"><inline classes="std std-ref">set_instance_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-method-set-instance-custom-data"><inline classes="std std-ref">set_instance_custom_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> custom_data <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-method-set-instance-transform"><inline classes="std std-ref">set_instance_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance, <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> transform <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multimesh-method-set-instance-transform-2d"><inline classes="std std-ref">set_instance_transform_2d</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-multimesh-transformformat"></target>
            <paragraph classes="classref-enumeration" ids="enum-multimesh-transformformat" names="enum_multimesh_transformformat">enum <strong>TransformFormat</strong>:</paragraph>
            <target refid="class-multimesh-constant-transform-2d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multimesh-constant-transform-2d" names="class_multimesh_constant_transform_2d"><reference internal="True" refid="enum-multimesh-transformformat"><inline classes="std std-ref">TransformFormat</inline></reference> <strong>TRANSFORM_2D</strong> = <literal>0</literal></paragraph>
            <paragraph>使用 2D 变换时使用此选项。</paragraph>
            <target refid="class-multimesh-constant-transform-3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multimesh-constant-transform-3d" names="class_multimesh_constant_transform_3d"><reference internal="True" refid="enum-multimesh-transformformat"><inline classes="std std-ref">TransformFormat</inline></reference> <strong>TRANSFORM_3D</strong> = <literal>1</literal></paragraph>
            <paragraph>使用 3D 变换时使用此选项。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-multimesh-property-buffer"></target>
            <paragraph classes="classref-property" ids="class-multimesh-property-buffer" names="class_multimesh_property_buffer"><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> <strong>buffer</strong> = <literal>PackedFloat32Array()</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_buffer</strong> <strong>(</strong> <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> <strong>get_buffer</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <container classes="contribute">
                <paragraph>目前没有这个属性的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-property-color-array"></target>
            <paragraph classes="classref-property" ids="class-multimesh-property-color-array" names="class_multimesh_property_color_array"><reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>color_array</strong></paragraph>
            <paragraph>见 <reference internal="True" refid="class-multimesh-method-set-instance-color"><inline classes="std std-ref">set_instance_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-property-custom-data-array"></target>
            <paragraph classes="classref-property" ids="class-multimesh-property-custom-data-array" names="class_multimesh_property_custom_data_array"><reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>custom_data_array</strong></paragraph>
            <paragraph>见 <reference internal="True" refid="class-multimesh-method-set-instance-custom-data"><inline classes="std std-ref">set_instance_custom_data</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-property-instance-count"></target>
            <paragraph classes="classref-property" ids="class-multimesh-property-instance-count" names="class_multimesh_property_instance_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>instance_count</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_instance_count</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_instance_count</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将被绘制的实例数。这会清除缓冲区，并（重新）调整其大小。之后设置的数据格式或标志将无效。</paragraph>
            <paragraph>默认情况下，所有实例都会被绘制，但可以使用 <reference internal="True" refid="class-multimesh-property-visible-instance-count"><inline classes="std std-ref">visible_instance_count</inline></reference> 来限制它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-property-mesh"></target>
            <paragraph classes="classref-property" ids="class-multimesh-property-mesh" names="class_multimesh_property_mesh"><reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> <strong>mesh</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_mesh</strong> <strong>(</strong> <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> <strong>get_mesh</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要被实例化的 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源。</paragraph>
            <paragraph>各个实例的外观可以通过 <reference internal="True" refid="class-multimesh-method-set-instance-color"><inline classes="std std-ref">set_instance_color</inline></reference> 和 <reference internal="True" refid="class-multimesh-method-set-instance-custom-data"><inline classes="std std-ref">set_instance_custom_data</inline></reference> 来修改。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-property-transform-2d-array"></target>
            <paragraph classes="classref-property" ids="class-multimesh-property-transform-2d-array" names="class_multimesh_property_transform_2d_array"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>transform_2d_array</strong></paragraph>
            <paragraph>见 <reference internal="True" refid="class-multimesh-method-set-instance-transform-2d"><inline classes="std std-ref">set_instance_transform_2d</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-property-transform-array"></target>
            <paragraph classes="classref-property" ids="class-multimesh-property-transform-array" names="class_multimesh_property_transform_array"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>transform_array</strong></paragraph>
            <paragraph>见 <reference internal="True" refid="class-multimesh-method-set-instance-transform"><inline classes="std std-ref">set_instance_transform</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-property-transform-format"></target>
            <paragraph classes="classref-property" ids="class-multimesh-property-transform-format" names="class_multimesh_property_transform_format"><reference internal="True" refid="enum-multimesh-transformformat"><inline classes="std std-ref">TransformFormat</inline></reference> <strong>transform_format</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_transform_format</strong> <strong>(</strong> <reference internal="True" refid="enum-multimesh-transformformat"><inline classes="std std-ref">TransformFormat</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-multimesh-transformformat"><inline classes="std std-ref">TransformFormat</inline></reference> <strong>get_transform_format</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于变换网格的变换格式，可以是 2D 或 3D。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-property-use-colors"></target>
            <paragraph classes="classref-property" ids="class-multimesh-property-use-colors" names="class_multimesh_property_use_colors"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_colors</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_use_colors</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_colors</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 <strong>MultiMesh</strong> 将使用颜色数据（参见 <reference internal="True" refid="class-multimesh-method-set-instance-color"><inline classes="std std-ref">set_instance_color</inline></reference>）。只有在 <reference internal="True" refid="class-multimesh-property-instance-count"><inline classes="std std-ref">instance_count</inline></reference> 为 <literal>0</literal> 或更少时才能被设置。这意味着需要在设置实例计数之前调用该方法，或者暂时将实例计数重置为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-property-use-custom-data"></target>
            <paragraph classes="classref-property" ids="class-multimesh-property-use-custom-data" names="class_multimesh_property_use_custom_data"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_custom_data</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_use_custom_data</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_custom_data</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 <strong>MultiMesh</strong> 将使用自定义数据（参见 <reference internal="True" refid="class-multimesh-method-set-instance-custom-data"><inline classes="std std-ref">set_instance_custom_data</inline></reference>）。只有在 <reference internal="True" refid="class-multimesh-property-instance-count"><inline classes="std std-ref">instance_count</inline></reference> 为 <literal>0</literal> 或更少时才能被设置。这意味着需要在设置实例计数之前调用该方法，或者暂时将实例计数重置为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-property-visible-instance-count"></target>
            <paragraph classes="classref-property" ids="class-multimesh-property-visible-instance-count" names="class_multimesh_property_visible_instance_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>visible_instance_count</strong> = <literal>-1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_visible_instance_count</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_visible_instance_count</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>限制绘制的实例数量，-1 会绘制所有的实例。改变这一点并不改变缓冲区的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-multimesh-method-get-aabb"></target>
            <paragraph classes="classref-method" ids="class-multimesh-method-get-aabb" names="class_multimesh_method_get_aabb"><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>get_aabb</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回局部空间中的可见性轴对齐包围框。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-method-get-instance-color"></target>
            <paragraph classes="classref-method" ids="class-multimesh-method-get-instance-color" names="class_multimesh_method_get_instance_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_instance_color</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取特定实例的颜色倍数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-method-get-instance-custom-data"></target>
            <paragraph classes="classref-method" ids="class-multimesh-method-get-instance-custom-data" names="class_multimesh_method_get_instance_custom_data"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_instance_custom_data</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回已经为特定实例设置的自定义数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-method-get-instance-transform"></target>
            <paragraph classes="classref-method" ids="class-multimesh-method-get-instance-transform" names="class_multimesh_method_get_instance_transform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>get_instance_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回指定实例的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-method-get-instance-transform-2d"></target>
            <paragraph classes="classref-method" ids="class-multimesh-method-get-instance-transform-2d" names="class_multimesh_method_get_instance_transform_2d"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_instance_transform_2d</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回指定实例的 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-method-set-instance-color"></target>
            <paragraph classes="classref-method" ids="class-multimesh-method-set-instance-color" names="class_multimesh_method_set_instance_color">void <strong>set_instance_color</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
            <paragraph>设置一个特定实例的颜色，通过<emphasis>乘以</emphasis>该网格的现有顶点颜色来设置。这允许每个实例使用不同的颜色。</paragraph>
            <paragraph>要使颜色生效，请确保该 <strong>MultiMesh</strong> 上的 <reference internal="True" refid="class-multimesh-property-use-colors"><inline classes="std std-ref">use_colors</inline></reference> 为 <literal>true</literal>，并且材质上的 <reference internal="True" refuri="class_basematerial3d#class-basematerial3d-property-vertex-color-use-as-albedo"><inline classes="std std-ref">BaseMaterial3D.vertex_color_use_as_albedo</inline></reference> 为 <literal>true</literal>。如果打算设置绝对颜色而不是着色，请确保材质的反照率颜色被设置为纯白色 (<literal>Color(1, 1, 1)</literal>)。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-method-set-instance-custom-data"></target>
            <paragraph classes="classref-method" ids="class-multimesh-method-set-instance-custom-data" names="class_multimesh_method_set_instance_custom_data">void <strong>set_instance_custom_data</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> custom_data <strong>)</strong></paragraph>
            <paragraph>为特定的实例设置自定义数据。虽然使用了 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>，但它只是一个容纳 4 个浮点数的容器。</paragraph>
            <paragraph>对于要使用的自定义数据，请确保 <reference internal="True" refid="class-multimesh-property-use-custom-data"><inline classes="std std-ref">use_custom_data</inline></reference> 为 <literal>true</literal>。</paragraph>
            <paragraph>必须使用 <literal>INSTANCE_CUSTOM</literal> 在自定义着色器中，手动访问该自定义实例数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-method-set-instance-transform"></target>
            <paragraph classes="classref-method" ids="class-multimesh-method-set-instance-transform" names="class_multimesh_method_set_instance_transform">void <strong>set_instance_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance, <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> transform <strong>)</strong></paragraph>
            <paragraph>为指定实例设置 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multimesh-method-set-instance-transform-2d"></target>
            <paragraph classes="classref-method" ids="class-multimesh-method-set-instance-transform-2d" names="class_multimesh_method_set_instance_transform_2d">void <strong>set_instance_transform_2d</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform <strong>)</strong></paragraph>
            <paragraph>为指定实例设置 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
