<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_inputevent.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/InputEvent.xml.</comment>
    <target refid="class-inputevent"></target>
    <section ids="inputevent class-inputevent" names="inputevent class_inputevent">
        <title>InputEvent</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_inputeventaction#class-inputeventaction"><inline classes="std std-ref">InputEventAction</inline></reference>, <reference internal="True" refuri="class_inputeventfromwindow#class-inputeventfromwindow"><inline classes="std std-ref">InputEventFromWindow</inline></reference>, <reference internal="True" refuri="class_inputeventjoypadbutton#class-inputeventjoypadbutton"><inline classes="std std-ref">InputEventJoypadButton</inline></reference>, <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference>, <reference internal="True" refuri="class_inputeventmidi#class-inputeventmidi"><inline classes="std std-ref">InputEventMIDI</inline></reference>, <reference internal="True" refuri="class_inputeventshortcut#class-inputeventshortcut"><inline classes="std std-ref">InputEventShortcut</inline></reference></paragraph>
        <paragraph>输入事件的抽象基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>各种输入事件的抽象基类。见 <reference internal="True" refuri="class_node#class-node-private-method-input"><inline classes="std std-ref">Node._input</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/inputs/inputevent"><inline classes="doc">使用 InputEvent</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/2d_transforms"><inline classes="doc">Viewport 和画布变换</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2D Dodge The Creeps 演示" refuri="https://godotengine.org/asset-library/asset/2712">2D Dodge The Creeps 演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 体素演示" refuri="https://godotengine.org/asset-library/asset/2755">3D 体素演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="23"></colspec>
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="7"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-property-device"><inline classes="std std-ref">device</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="222"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-accumulate"><inline classes="std std-ref">accumulate</inline></reference>(with_event: <reference internal="True" refid="class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-as-text"><inline classes="std std-ref">as_text</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-get-action-strength"><inline classes="std std-ref">get_action_strength</inline></reference>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-is-action"><inline classes="std std-ref">is_action</inline></reference>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-is-action-pressed"><inline classes="std std-ref">is_action_pressed</inline></reference>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, allow_echo: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-is-action-released"><inline classes="std std-ref">is_action_released</inline></reference>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-is-action-type"><inline classes="std std-ref">is_action_type</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-is-canceled"><inline classes="std std-ref">is_canceled</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-is-echo"><inline classes="std std-ref">is_echo</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-is-match"><inline classes="std std-ref">is_match</inline></reference>(event: <reference internal="True" refid="class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-is-pressed"><inline classes="std std-ref">is_pressed</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-is-released"><inline classes="std std-ref">is_released</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputevent-method-xformed-by"><inline classes="std std-ref">xformed_by</inline></reference>(xform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>, local_ofs: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="常量">
            <title>常量</title>
            <target refid="class-inputevent-constant-device-id-emulation"></target>
            <paragraph classes="classref-constant" ids="class-inputevent-constant-device-id-emulation" names="class_inputevent_constant_device_id_emulation"><strong>DEVICE_ID_EMULATION</strong> = <literal>-1</literal> <reference internal="True" refid="class-inputevent-constant-device-id-emulation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>模拟设备 ID，用于根据触屏事件生成的鼠标输入，或根据鼠标事件生成的触摸输入。可以据此来区分模拟鼠标输入和物理鼠标输入，以及模拟触摸输入和物理触摸输入。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-inputevent-property-device"></target>
            <paragraph classes="classref-property" ids="class-inputevent-property-device" names="class_inputevent_property_device"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>device</strong> = <literal>0</literal> <reference internal="True" refid="class-inputevent-property-device"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_device</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_device</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>事件的设备 ID。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-inputevent-property-device"><inline classes="std std-ref">device</inline></reference> 在特殊情况下可能为负数，此时表示的不是系统中物理存在的设备。见 <reference internal="True" refid="class-inputevent-constant-device-id-emulation"><inline classes="std std-ref">DEVICE_ID_EMULATION</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-inputevent-method-accumulate"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-accumulate" names="class_inputevent_method_accumulate"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>accumulate</strong>(with_event: <reference internal="True" refid="class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>) <reference internal="True" refid="class-inputevent-method-accumulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的输入事件和这个输入事件可以相加，则返回 <literal>true</literal>（只针对 <reference internal="True" refuri="class_inputeventmousemotion#class-inputeventmousemotion"><inline classes="std std-ref">InputEventMouseMotion</inline></reference> 类型的事件）。</paragraph>
            <paragraph>给定输入事件的位置、全局位置和速度将被复制。产生的 <literal>relative</literal> 是两个事件的总和。两个事件的修饰符必须是相同的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputevent-method-as-text"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-as-text" names="class_inputevent_method_as_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>as_text</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputevent-method-as-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回事件的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 字符串表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputevent-method-get-action-strength"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-get-action-strength" names="class_inputevent_method_get_action_strength"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_action_strength</strong>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputevent-method-get-action-strength"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据给定动作的状态返回 0.0 到 1.0 之间的值。获取 <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference> 类型事件的值时很有用。</paragraph>
            <paragraph>如果 <literal>exact_match</literal> 为 <literal>false</literal>，它会忽略 <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference> 和 <reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference> 事件的额外输入修饰键，以及 <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference> 事件的方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputevent-method-is-action"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-is-action" names="class_inputevent_method_is_action"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_action</strong>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputevent-method-is-action"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该输入事件匹配任何类型的预定义动作，则返回 <literal>true</literal>。</paragraph>
            <paragraph>如果 <literal>exact_match</literal> 为 <literal>false</literal>，它会忽略 <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference> 和 <reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference> 事件的额外输入修饰键，以及 <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference> 事件的方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputevent-method-is-action-pressed"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-is-action-pressed" names="class_inputevent_method_is_action_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_action_pressed</strong>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, allow_echo: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputevent-method-is-action-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的动作正被按下，则返回 <literal>true</literal>（除非 <literal>allow_echo</literal> 为 <literal>true</literal>，否则不是 <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference> 事件中的回显事件）。与 <reference internal="True" refuri="class_inputeventmousemotion#class-inputeventmousemotion"><inline classes="std std-ref">InputEventMouseMotion</inline></reference> 或 <reference internal="True" refuri="class_inputeventscreendrag#class-inputeventscreendrag"><inline classes="std std-ref">InputEventScreenDrag</inline></reference> 类型的事件无关。</paragraph>
            <paragraph>如果 <literal>exact_match</literal> 为 <literal>false</literal>，则它会忽略 <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference> 和 <reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference> 事件的额外输入修饰键，以及 <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference> 事件的方向。</paragraph>
            <paragraph><strong>注意：</strong>由于键盘重影，<reference internal="True" refid="class-inputevent-method-is-action-pressed"><inline classes="std std-ref">is_action_pressed</inline></reference> 可能会返回 <literal>false</literal>，即使动作的某个键被按下时也是如此。有关详细信息，请参阅文档中的 <reference name="《输入示例》" refuri="../tutorials/inputs/input_examples.html#keyboard-events">《输入示例》</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputevent-method-is-action-released"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-is-action-released" names="class_inputevent_method_is_action_released"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_action_released</strong>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputevent-method-is-action-released"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的动作被释放（即未按下），则返回 <literal>true</literal>。与 <reference internal="True" refuri="class_inputeventmousemotion#class-inputeventmousemotion"><inline classes="std std-ref">InputEventMouseMotion</inline></reference> 或 <reference internal="True" refuri="class_inputeventscreendrag#class-inputeventscreendrag"><inline classes="std std-ref">InputEventScreenDrag</inline></reference> 类型的事件无关。</paragraph>
            <paragraph>如果 <literal>exact_match</literal> 为 <literal>false</literal>，它会忽略 <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference> 和 <reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference> 事件的额外输入修饰键，以及 <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference> 事件的方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputevent-method-is-action-type"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-is-action-type" names="class_inputevent_method_is_action_type"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_action_type</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputevent-method-is-action-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这个输入事件的类型是可以分配给输入动作的类型，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputevent-method-is-canceled"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-is-canceled" names="class_inputevent_method_is_canceled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_canceled</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputevent-method-is-canceled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这个输入事件已被取消，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputevent-method-is-echo"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-is-echo" names="class_inputevent_method_is_echo"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_echo</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputevent-method-is-echo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if this input event is an echo event (only for events of type <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference>). An echo event is a repeated key event sent when the user is holding down the key. Any other event type returns <literal>false</literal>.</paragraph>
            <paragraph><strong>Note:</strong> The rate at which echo events are sent is typically around 20 events per second (after holding down the key for roughly half a second). However, the key repeat delay/speed can be changed by the user or disabled entirely in the operating system settings. To ensure your project works correctly on all configurations, do not assume the user has a specific key repeat configuration in your project's behavior.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputevent-method-is-match"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-is-match" names="class_inputevent_method_is_match"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_match</strong>(event: <reference internal="True" refid="class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputevent-method-is-match"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果指定的 <literal>event</literal> 与该事件匹配，则返回 <literal>true</literal>。仅对动作事件有效，即键（<reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference>）、按钮（<reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference> 或 <reference internal="True" refuri="class_inputeventjoypadbutton#class-inputeventjoypadbutton"><inline classes="std std-ref">InputEventJoypadButton</inline></reference>）、轴 <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference> 或动作（<reference internal="True" refuri="class_inputeventaction#class-inputeventaction"><inline classes="std std-ref">InputEventAction</inline></reference>）事件。</paragraph>
            <paragraph>如果 <literal>exact_match</literal> 为 <literal>false</literal>，它会忽略 <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference> 和 <reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference> 事件的额外输入修饰键，以及 <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference> 事件的方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputevent-method-is-pressed"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-is-pressed" names="class_inputevent_method_is_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_pressed</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputevent-method-is-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该输入事件被按下，则返回 <literal>true</literal>。与 <reference internal="True" refuri="class_inputeventmousemotion#class-inputeventmousemotion"><inline classes="std std-ref">InputEventMouseMotion</inline></reference> 或 <reference internal="True" refuri="class_inputeventscreendrag#class-inputeventscreendrag"><inline classes="std std-ref">InputEventScreenDrag</inline></reference> 类型的事件无关。</paragraph>
            <paragraph><strong>注意：</strong>由于键盘重影，即使按下动作的某个键，<reference internal="True" refid="class-inputevent-method-is-pressed"><inline classes="std std-ref">is_pressed</inline></reference> 也有可能会返回 <literal>false</literal>。有关详细信息，请参阅文档中的<reference name="《输入示例》" refuri="../tutorials/inputs/input_examples.html#keyboard-events">《输入示例》</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputevent-method-is-released"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-is-released" names="class_inputevent_method_is_released"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_released</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputevent-method-is-released"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该输入事件是回显事件，则返回 <literal>true</literal>。不适用于类型为 <reference internal="True" refuri="class_inputeventmousemotion#class-inputeventmousemotion"><inline classes="std std-ref">InputEventMouseMotion</inline></reference> 和 <reference internal="True" refuri="class_inputeventscreendrag#class-inputeventscreendrag"><inline classes="std std-ref">InputEventScreenDrag</inline></reference> 的事件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputevent-method-xformed-by"></target>
            <paragraph classes="classref-method" ids="class-inputevent-method-xformed-by" names="class_inputevent_method_xformed_by"><reference internal="True" refid="class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> <strong>xformed_by</strong>(xform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>, local_ofs: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputevent-method-xformed-by"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定输入事件的副本，该副本已被 <literal>local_ofs</literal> 偏移并被 <literal>xform</literal> 变换。与 <reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference>、<reference internal="True" refuri="class_inputeventmousemotion#class-inputeventmousemotion"><inline classes="std std-ref">InputEventMouseMotion</inline></reference>、<reference internal="True" refuri="class_inputeventscreentouch#class-inputeventscreentouch"><inline classes="std std-ref">InputEventScreenTouch</inline></reference>、<reference internal="True" refuri="class_inputeventscreendrag#class-inputeventscreendrag"><inline classes="std std-ref">InputEventScreenDrag</inline></reference>、<reference internal="True" refuri="class_inputeventmagnifygesture#class-inputeventmagnifygesture"><inline classes="std std-ref">InputEventMagnifyGesture</inline></reference> 和 <reference internal="True" refuri="class_inputeventpangesture#class-inputeventpangesture"><inline classes="std std-ref">InputEventPanGesture</inline></reference> 类型的事件相关。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
