<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_texturelayered.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TextureLayered.xml.</comment>
    <target refid="class-texturelayered"></target>
    <section ids="texturelayered class-texturelayered" names="texturelayered class_texturelayered">
        <title>TextureLayered</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_texture#class-texture"><inline classes="std std-ref">Texture</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_compressedtexturelayered#class-compressedtexturelayered"><inline classes="std std-ref">CompressedTextureLayered</inline></reference>, <reference internal="True" refuri="class_imagetexturelayered#class-imagetexturelayered"><inline classes="std std-ref">ImageTextureLayered</inline></reference>, <reference internal="True" refuri="class_placeholdertexturelayered#class-placeholdertexturelayered"><inline classes="std std-ref">PlaceholderTextureLayered</inline></reference>, <reference internal="True" refuri="class_texturelayeredrd#class-texturelayeredrd"><inline classes="std std-ref">TextureLayeredRD</inline></reference></paragraph>
        <paragraph>包含多个 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 的纹理类型的基类。每个图像的大小和格式都是一样的。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><reference internal="True" refuri="class_imagetexturelayered#class-imagetexturelayered"><inline classes="std std-ref">ImageTextureLayered</inline></reference> 和 <reference internal="True" refuri="class_compressedtexturelayered#class-compressedtexturelayered"><inline classes="std std-ref">CompressedTextureLayered</inline></reference> 的基类。不能直接使用，但包含了访问派生资源类型所需的所有函数。另见 <reference internal="True" refuri="class_texture3d#class-texture3d"><inline classes="std std-ref">Texture3D</inline></reference>。</paragraph>
            <paragraph>数据是按层设置的。对于 <reference internal="True" refuri="class_texture2darray#class-texture2darray"><inline classes="std std-ref">Texture2DArray</inline></reference>，层指定的是数组层。</paragraph>
            <paragraph>所有图像都需要具有相同的宽度、高度和 mipmap 级别数。</paragraph>
            <paragraph><strong>TextureLayered</strong> 可以用 <reference internal="True" refuri="class_resourceloader#class-resourceloader-method-load"><inline classes="std std-ref">ResourceLoader.load</inline></reference> 加载。</paragraph>
            <paragraph>在内部，Godot 将这些文件映射到目标渲染驱动程序（Vulkan、OpenGL3）中的对应文件。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="138"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-private-method-get-format"><inline classes="std std-ref">_get_format</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-private-method-get-height"><inline classes="std std-ref">_get_height</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-private-method-get-layer-data"><inline classes="std std-ref">_get_layer_data</inline></reference>(layer_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-private-method-get-layered-type"><inline classes="std std-ref">_get_layered_type</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-private-method-get-layers"><inline classes="std std-ref">_get_layers</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-private-method-get-width"><inline classes="std std-ref">_get_width</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-private-method-has-mipmaps"><inline classes="std std-ref">_has_mipmaps</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-method-get-format"><inline classes="std std-ref">get_format</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-method-get-height"><inline classes="std std-ref">get_height</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-method-get-layer-data"><inline classes="std std-ref">get_layer_data</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-texturelayered-layeredtype"><inline classes="std std-ref">LayeredType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-method-get-layered-type"><inline classes="std std-ref">get_layered_type</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-method-get-layers"><inline classes="std std-ref">get_layers</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-method-get-width"><inline classes="std std-ref">get_width</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texturelayered-method-has-mipmaps"><inline classes="std std-ref">has_mipmaps</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-texturelayered-layeredtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-texturelayered-layeredtype" names="enum_texturelayered_layeredtype">enum <strong>LayeredType</strong>: <reference internal="True" refid="enum-texturelayered-layeredtype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-texturelayered-constant-layered-type-2d-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-texturelayered-constant-layered-type-2d-array" names="class_texturelayered_constant_layered_type_2d_array"><reference internal="True" refid="enum-texturelayered-layeredtype"><inline classes="std std-ref">LayeredType</inline></reference> <strong>LAYERED_TYPE_2D_ARRAY</strong> = <literal>0</literal></paragraph>
            <paragraph>纹理为通用的 <reference internal="True" refuri="class_texture2darray#class-texture2darray"><inline classes="std std-ref">Texture2DArray</inline></reference>。</paragraph>
            <target refid="class-texturelayered-constant-layered-type-cubemap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-texturelayered-constant-layered-type-cubemap" names="class_texturelayered_constant_layered_type_cubemap"><reference internal="True" refid="enum-texturelayered-layeredtype"><inline classes="std std-ref">LayeredType</inline></reference> <strong>LAYERED_TYPE_CUBEMAP</strong> = <literal>1</literal></paragraph>
            <paragraph>纹理为 <reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference>，每一面都有自己的层（共 6 层）。</paragraph>
            <target refid="class-texturelayered-constant-layered-type-cubemap-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-texturelayered-constant-layered-type-cubemap-array" names="class_texturelayered_constant_layered_type_cubemap_array"><reference internal="True" refid="enum-texturelayered-layeredtype"><inline classes="std std-ref">LayeredType</inline></reference> <strong>LAYERED_TYPE_CUBEMAP_ARRAY</strong> = <literal>2</literal></paragraph>
            <paragraph>纹理为 <reference internal="True" refuri="class_cubemaparray#class-cubemaparray"><inline classes="std std-ref">CubemapArray</inline></reference>，每个立方体贴图都由 6 层组成。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-texturelayered-private-method-get-format"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-private-method-get-format" names="class_texturelayered_private_method__get_format"><reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>_get_format</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-private-method-get-format"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查询该 <strong>TextureLayered</strong> 的格式时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-private-method-get-height"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-private-method-get-height" names="class_texturelayered_private_method__get_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_height</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-private-method-get-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查询该 <strong>TextureLayered</strong> 的高度时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-private-method-get-layer-data"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-private-method-get-layer-data" names="class_texturelayered_private_method__get_layer_data"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>_get_layer_data</strong>(layer_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-private-method-get-layer-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查询该 <strong>TextureLayered</strong> 中某一层的数据时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-private-method-get-layered-type"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-private-method-get-layered-type" names="class_texturelayered_private_method__get_layered_type"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_layered_type</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-private-method-get-layered-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查询该 <strong>TextureLayered</strong> 的层类型时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-private-method-get-layers"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-private-method-get-layers" names="class_texturelayered_private_method__get_layers"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_layers</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-private-method-get-layers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查询该 <strong>TextureLayered</strong> 的层数时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-private-method-get-width"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-private-method-get-width" names="class_texturelayered_private_method__get_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_width</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-private-method-get-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查询该 <strong>TextureLayered</strong> 的宽度时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-private-method-has-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-private-method-has-mipmaps" names="class_texturelayered_private_method__has_mipmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_mipmaps</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-private-method-has-mipmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查询该 <strong>TextureLayered</strong> 的 Mipmap 是否存在时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-method-get-format"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-method-get-format" names="class_texturelayered_method_get_format"><reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>get_format</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-method-get-format"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回纹理当前使用的格式。详情见 <reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-method-get-height"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-method-get-height" names="class_texturelayered_method_get_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_height</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-method-get-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该纹理的高度，单位为像素。高度通常由 Y 轴表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-method-get-layer-data"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-method-get-layer-data" names="class_texturelayered_method_get_layer_data"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>get_layer_data</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-method-get-layer-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回带有指定 <literal>layer</literal> 层数据的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 图像资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-method-get-layered-type"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-method-get-layered-type" names="class_texturelayered_method_get_layered_type"><reference internal="True" refid="enum-texturelayered-layeredtype"><inline classes="std std-ref">LayeredType</inline></reference> <strong>get_layered_type</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-method-get-layered-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>TextureLayered</strong> 的类型。类型决定了数据的访问方式，立方体图有特殊的类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-method-get-layers"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-method-get-layers" names="class_texturelayered_method_get_layers"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_layers</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-method-get-layers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回引用的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-method-get-width"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-method-get-width" names="class_texturelayered_method_get_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_width</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-method-get-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该纹理的宽度，单位为像素。宽度通常由 X 轴表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texturelayered-method-has-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-texturelayered-method-has-mipmaps" names="class_texturelayered_method_has_mipmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_mipmaps</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texturelayered-method-has-mipmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果层生成了 mipmap 则返回 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
