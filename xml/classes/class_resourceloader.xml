<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_resourceloader.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/ResourceLoader.xml.</comment>
    <target refid="class-resourceloader"></target>
    <section ids="resourceloader class-resourceloader" names="resourceloader class_resourceloader">
        <title>ResourceLoader</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于加载资源文件的单例。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于从文件系统加载资源文件的单例。</paragraph>
            <paragraph>会使用引擎中（内置或插件）注册的许多 <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference> 类将文件加载到内存中并将其转换为引擎可以使用的格式。</paragraph>
            <paragraph><strong>注意：</strong>你需要先将文件导入引擎，才能使用 <reference internal="True" refid="class-resourceloader-method-load"><inline classes="std std-ref">load</inline></reference> 进行加载。如果你想在运行时加载 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>，可以使用 <reference internal="True" refuri="class_image#class-image-method-load"><inline classes="std std-ref">Image.load</inline></reference>。如果你想导入音频文件，可以使用 <reference internal="True" refuri="class_audiostreammp3#class-audiostreammp3-property-data"><inline classes="std std-ref">AudioStreamMP3.data</inline></reference> 中描述的代码段。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="操作系统测试演示" refuri="https://godotengine.org/asset-library/asset/677">操作系统测试演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="63"></colspec>
                    <colspec colwidth="277"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceloader-method-add-resource-format-loader"><inline classes="std std-ref">add_resource_format_loader</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference> format_loader, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> at_front=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceloader-method-exists"><inline classes="std std-ref">exists</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> type_hint="" <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceloader-method-get-dependencies"><inline classes="std std-ref">get_dependencies</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceloader-method-get-recognized-extensions-for-type"><inline classes="std std-ref">get_recognized_extensions_for_type</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceloader-method-get-resource-uid"><inline classes="std std-ref">get_resource_uid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceloader-method-has-cached"><inline classes="std std-ref">has_cached</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceloader-method-load"><inline classes="std std-ref">load</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> type_hint="", <reference internal="True" refid="enum-resourceloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference> cache_mode=1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceloader-method-load-threaded-get"><inline classes="std std-ref">load_threaded_get</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-resourceloader-threadloadstatus"><inline classes="std std-ref">ThreadLoadStatus</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceloader-method-load-threaded-get-status"><inline classes="std std-ref">load_threaded_get_status</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> progress=[] <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceloader-method-load-threaded-request"><inline classes="std std-ref">load_threaded_request</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> type_hint="", <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_sub_threads=false, <reference internal="True" refid="enum-resourceloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference> cache_mode=1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceloader-method-remove-resource-format-loader"><inline classes="std std-ref">remove_resource_format_loader</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference> format_loader <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceloader-method-set-abort-on-missing-resources"><inline classes="std std-ref">set_abort_on_missing_resources</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> abort <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-resourceloader-threadloadstatus"></target>
            <paragraph classes="classref-enumeration" ids="enum-resourceloader-threadloadstatus" names="enum_resourceloader_threadloadstatus">enum <strong>ThreadLoadStatus</strong>:</paragraph>
            <target refid="class-resourceloader-constant-thread-load-invalid-resource"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-resourceloader-constant-thread-load-invalid-resource" names="class_resourceloader_constant_thread_load_invalid_resource"><reference internal="True" refid="enum-resourceloader-threadloadstatus"><inline classes="std std-ref">ThreadLoadStatus</inline></reference> <strong>THREAD_LOAD_INVALID_RESOURCE</strong> = <literal>0</literal></paragraph>
            <paragraph>该资源无效，或尚未使用 <reference internal="True" refid="class-resourceloader-method-load-threaded-request"><inline classes="std std-ref">load_threaded_request</inline></reference> 加载。</paragraph>
            <target refid="class-resourceloader-constant-thread-load-in-progress"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-resourceloader-constant-thread-load-in-progress" names="class_resourceloader_constant_thread_load_in_progress"><reference internal="True" refid="enum-resourceloader-threadloadstatus"><inline classes="std std-ref">ThreadLoadStatus</inline></reference> <strong>THREAD_LOAD_IN_PROGRESS</strong> = <literal>1</literal></paragraph>
            <paragraph>该资源仍在加载中。</paragraph>
            <target refid="class-resourceloader-constant-thread-load-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-resourceloader-constant-thread-load-failed" names="class_resourceloader_constant_thread_load_failed"><reference internal="True" refid="enum-resourceloader-threadloadstatus"><inline classes="std std-ref">ThreadLoadStatus</inline></reference> <strong>THREAD_LOAD_FAILED</strong> = <literal>2</literal></paragraph>
            <paragraph>加载过程中发生了错误，导致失败。</paragraph>
            <target refid="class-resourceloader-constant-thread-load-loaded"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-resourceloader-constant-thread-load-loaded" names="class_resourceloader_constant_thread_load_loaded"><reference internal="True" refid="enum-resourceloader-threadloadstatus"><inline classes="std std-ref">ThreadLoadStatus</inline></reference> <strong>THREAD_LOAD_LOADED</strong> = <literal>3</literal></paragraph>
            <paragraph>资源成功加载，可以通过 <reference internal="True" refid="class-resourceloader-method-load-threaded-get"><inline classes="std std-ref">load_threaded_get</inline></reference> 访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-resourceloader-cachemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-resourceloader-cachemode" names="enum_resourceloader_cachemode">enum <strong>CacheMode</strong>:</paragraph>
            <target refid="class-resourceloader-constant-cache-mode-ignore"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-resourceloader-constant-cache-mode-ignore" names="class_resourceloader_constant_cache_mode_ignore"><reference internal="True" refid="enum-resourceloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference> <strong>CACHE_MODE_IGNORE</strong> = <literal>0</literal></paragraph>
            <target refid="class-resourceloader-constant-cache-mode-reuse"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-resourceloader-constant-cache-mode-reuse" names="class_resourceloader_constant_cache_mode_reuse"><reference internal="True" refid="enum-resourceloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference> <strong>CACHE_MODE_REUSE</strong> = <literal>1</literal></paragraph>
            <target refid="class-resourceloader-constant-cache-mode-replace"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-resourceloader-constant-cache-mode-replace" names="class_resourceloader_constant_cache_mode_replace"><reference internal="True" refid="enum-resourceloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference> <strong>CACHE_MODE_REPLACE</strong> = <literal>2</literal></paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-resourceloader-method-add-resource-format-loader"></target>
            <paragraph classes="classref-method" ids="class-resourceloader-method-add-resource-format-loader" names="class_resourceloader_method_add_resource_format_loader">void <strong>add_resource_format_loader</strong> <strong>(</strong> <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference> format_loader, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> at_front=false <strong>)</strong></paragraph>
            <paragraph>注册一个新的 <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference>。ResourceLoader 将会按照 <reference internal="True" refid="class-resourceloader-method-load"><inline classes="std std-ref">load</inline></reference> 中的描述使用 ResourceFormatLoader。</paragraph>
            <paragraph>对于用 GDScript 编写的 ResourceFormatLoader，此方法将隐式执行（详见 <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceloader-method-exists"></target>
            <paragraph classes="classref-method" ids="class-resourceloader-method-exists" names="class_resourceloader_method_exists"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>exists</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> type_hint="" <strong>)</strong></paragraph>
            <paragraph>返回给定路径 <literal>path</literal> 是否存在已识别的资源。</paragraph>
            <paragraph>可选的 <literal>type_hint</literal> 可用于进一步指定 <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference> 应处理的 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 类型。任何继承自 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 的内容都可以用作类型提示，例如 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceloader-method-get-dependencies"></target>
            <paragraph classes="classref-method" ids="class-resourceloader-method-get-dependencies" names="class_resourceloader_method_get_dependencies"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_dependencies</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
            <paragraph>返回位于给定路径 <literal>path</literal> 的资源的依赖项。</paragraph>
            <paragraph><strong>注意：</strong>返回的单个依赖项是由 <literal>::</literal> 分隔的切片。你可以使用 <reference internal="True" refuri="class_string#class-string-method-get-slice"><inline classes="std std-ref">String.get_slice</inline></reference> 来获取每段的内容。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">for dep in ResourceLoader.get_dependencies(path):
    print(dep.get_slice("::", 0)) # 输出 UID。
    print(dep.get_slice("::", 2)) # 输出路径。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceloader-method-get-recognized-extensions-for-type"></target>
            <paragraph classes="classref-method" ids="class-resourceloader-method-get-recognized-extensions-for-type" names="class_resourceloader_method_get_recognized_extensions_for_type"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_recognized_extensions_for_type</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> type <strong>)</strong></paragraph>
            <paragraph>返回资源类型的已识别扩展名列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceloader-method-get-resource-uid"></target>
            <paragraph classes="classref-method" ids="class-resourceloader-method-get-resource-uid" names="class_resourceloader_method_get_resource_uid"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_resource_uid</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
            <paragraph>返回与一个给定资源路径关联的 ID，如果不存在此类 ID，则返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceloader-method-has-cached"></target>
            <paragraph classes="classref-method" ids="class-resourceloader-method-has-cached" names="class_resourceloader_method_has_cached"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_cached</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
            <paragraph>返回给定 <literal>path</literal> 的缓存资源是否可用。</paragraph>
            <paragraph>一旦引擎加载了资源，它将被缓存在内存中以加快访问速度，未来调用 <reference internal="True" refid="class-resourceloader-method-load"><inline classes="std std-ref">load</inline></reference> 方法将使用缓存版本。可以通过在具有相同路径的新资源上使用 <reference internal="True" refuri="class_resource#class-resource-method-take-over-path"><inline classes="std std-ref">Resource.take_over_path</inline></reference> 来覆盖缓存资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceloader-method-load"></target>
            <paragraph classes="classref-method" ids="class-resourceloader-method-load" names="class_resourceloader_method_load"><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>load</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> type_hint="", <reference internal="True" refid="enum-resourceloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference> cache_mode=1 <strong>)</strong></paragraph>
            <paragraph>在给定的 <literal>path</literal> 中加载资源，并将结果缓存以供进一步访问。</paragraph>
            <paragraph>按顺序查询注册的 <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference>，以找到可以处理文件扩展名的第一个 <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference>，然后尝试加载。如果加载失败，则还会尝试其余的 <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference>。</paragraph>
            <paragraph>可选的 <literal>type_hint</literal> 可用于进一步指定 <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference> 应处理的 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 类型。任何继承自 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 的东西都可以用作类型提示，例如 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>。</paragraph>
            <paragraph><literal>cache_mode</literal> 属性定义在加载资源时是否以及如何使用或更新缓存。详情见 <reference internal="True" refid="enum-resourceloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference>。</paragraph>
            <paragraph>如果没有 <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference> 可以处理该文件，则返回空资源。</paragraph>
            <paragraph>GDScript 具有一个简化的 <reference internal="True" refuri="class_@gdscript#class-gdscript-method-load"><inline classes="std std-ref">@GDScript.load</inline></reference> 内置方法，可在大多数情况下使用，而 <strong>ResourceLoader</strong> 供更高级的情况使用。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-editor-export-convert-text-resources-to-binary"><inline classes="std std-ref">ProjectSettings.editor/export/convert_text_resources_to_binary</inline></reference> 为 <literal>true</literal>，则 <reference internal="True" refuri="class_@gdscript#class-gdscript-method-load"><inline classes="std std-ref">@GDScript.load</inline></reference> 无法在导出后的项目中读取已转换的文件。如果你需要在运行时加载存在于 PCK 中的文件，请将 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-editor-export-convert-text-resources-to-binary"><inline classes="std std-ref">ProjectSettings.editor/export/convert_text_resources_to_binary</inline></reference> 设置为 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceloader-method-load-threaded-get"></target>
            <paragraph classes="classref-method" ids="class-resourceloader-method-load-threaded-get" names="class_resourceloader_method_load_threaded_get"><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>load_threaded_get</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
            <paragraph>返回由 <reference internal="True" refid="class-resourceloader-method-load-threaded-request"><inline classes="std std-ref">load_threaded_request</inline></reference> 加载的资源。</paragraph>
            <paragraph>如果在加载线程完成之前调用此方法（即 <reference internal="True" refid="class-resourceloader-method-load-threaded-get-status"><inline classes="std std-ref">load_threaded_get_status</inline></reference> 不是 <reference internal="True" refid="class-resourceloader-constant-thread-load-loaded"><inline classes="std std-ref">THREAD_LOAD_LOADED</inline></reference>），则调用线程将被阻塞，直到资源加载完成。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceloader-method-load-threaded-get-status"></target>
            <paragraph classes="classref-method" ids="class-resourceloader-method-load-threaded-get-status" names="class_resourceloader_method_load_threaded_get_status"><reference internal="True" refid="enum-resourceloader-threadloadstatus"><inline classes="std std-ref">ThreadLoadStatus</inline></reference> <strong>load_threaded_get_status</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> progress=[] <strong>)</strong></paragraph>
            <paragraph>返回使用 <reference internal="True" refid="class-resourceloader-method-load-threaded-request"><inline classes="std std-ref">load_threaded_request</inline></reference> 在 <literal>path</literal> 处启动的线程加载操作的状态。可能的返回值见 <reference internal="True" refid="enum-resourceloader-threadloadstatus"><inline classes="std std-ref">ThreadLoadStatus</inline></reference>。</paragraph>
            <paragraph>可以通过 <literal>progress</literal> 可选地传递一个数组变量，并返回一个包含线程加载完成百分比的单元素的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceloader-method-load-threaded-request"></target>
            <paragraph classes="classref-method" ids="class-resourceloader-method-load-threaded-request" names="class_resourceloader_method_load_threaded_request"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_threaded_request</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> type_hint="", <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_sub_threads=false, <reference internal="True" refid="enum-resourceloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference> cache_mode=1 <strong>)</strong></paragraph>
            <paragraph>使用线程加载资源。如果 <literal>use_sub_threads</literal> 为 <literal>true</literal>，将使用多个线程来加载资源，这会使加载更快，但可能会影响主线程（从而导致游戏降速）。</paragraph>
            <paragraph><literal>cache_mode</literal> 属性定义在加载资源时是否以及如何使用或更新缓存。详情见 <reference internal="True" refid="enum-resourceloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceloader-method-remove-resource-format-loader"></target>
            <paragraph classes="classref-method" ids="class-resourceloader-method-remove-resource-format-loader" names="class_resourceloader_method_remove_resource_format_loader">void <strong>remove_resource_format_loader</strong> <strong>(</strong> <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference> format_loader <strong>)</strong></paragraph>
            <paragraph>取消注册给定的 <reference internal="True" refuri="class_resourceformatloader#class-resourceformatloader"><inline classes="std std-ref">ResourceFormatLoader</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceloader-method-set-abort-on-missing-resources"></target>
            <paragraph classes="classref-method" ids="class-resourceloader-method-set-abort-on-missing-resources" names="class_resourceloader_method_set_abort_on_missing_resources">void <strong>set_abort_on_missing_resources</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> abort <strong>)</strong></paragraph>
            <paragraph>更改缺少子资源时的行为。默认行为是中止加载。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
