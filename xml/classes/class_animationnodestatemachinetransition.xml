<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_animationnodestatemachinetransition.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AnimationNodeStateMachineTransition.xml.</comment>
    <target refid="class-animationnodestatemachinetransition"></target>
    <section ids="animationnodestatemachinetransition class-animationnodestatemachinetransition" names="animationnodestatemachinetransition class_animationnodestatemachinetransition">
        <title>AnimationNodeStateMachineTransition</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><reference internal="True" refuri="class_animationnodestatemachine#class-animationnodestatemachine"><inline classes="std std-ref">AnimationNodeStateMachine</inline></reference> 中连接两个 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> 的过渡。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>使用 <reference internal="True" refuri="class_animationnodestatemachineplayback#class-animationnodestatemachineplayback-method-travel"><inline classes="std std-ref">AnimationNodeStateMachinePlayback.travel</inline></reference> 时生成的路径，仅限于通过 <strong>AnimationNodeStateMachineTransition</strong> 连接的节点。</paragraph>
            <paragraph>可以详细设置过渡的时机和条件。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/animation/animation_tree"><inline classes="doc">使用 AnimationTree</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="74"></colspec>
                    <colspec colwidth="98"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-condition"><inline classes="std std-ref">advance_condition</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>&amp;""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-expression"><inline classes="std std-ref">advance_expression</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-animationnodestatemachinetransition-advancemode"><inline classes="std std-ref">AdvanceMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-mode"><inline classes="std std-ref">advance_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachinetransition-property-break-loop-at-end"><inline classes="std std-ref">break_loop_at_end</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachinetransition-property-priority"><inline classes="std std-ref">priority</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachinetransition-property-reset"><inline classes="std std-ref">reset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-animationnodestatemachinetransition-switchmode"><inline classes="std std-ref">SwitchMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachinetransition-property-switch-mode"><inline classes="std std-ref">switch_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachinetransition-property-xfade-curve"><inline classes="std std-ref">xfade_curve</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachinetransition-property-xfade-time"><inline classes="std std-ref">xfade_time</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-animationnodestatemachinetransition-signal-advance-condition-changed"></target>
            <paragraph classes="classref-signal" ids="class-animationnodestatemachinetransition-signal-advance-condition-changed" names="class_animationnodestatemachinetransition_signal_advance_condition_changed"><strong>advance_condition_changed</strong>() <reference internal="True" refid="class-animationnodestatemachinetransition-signal-advance-condition-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>变更 <reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-condition"><inline classes="std std-ref">advance_condition</inline></reference> 时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-animationnodestatemachinetransition-switchmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-animationnodestatemachinetransition-switchmode" names="enum_animationnodestatemachinetransition_switchmode">enum <strong>SwitchMode</strong>: <reference internal="True" refid="enum-animationnodestatemachinetransition-switchmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animationnodestatemachinetransition-constant-switch-mode-immediate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnodestatemachinetransition-constant-switch-mode-immediate" names="class_animationnodestatemachinetransition_constant_switch_mode_immediate"><reference internal="True" refid="enum-animationnodestatemachinetransition-switchmode"><inline classes="std std-ref">SwitchMode</inline></reference> <strong>SWITCH_MODE_IMMEDIATE</strong> = <literal>0</literal></paragraph>
            <paragraph>立即切换到下一个状态。当前状态将结束，并混合到新状态的开始。</paragraph>
            <target refid="class-animationnodestatemachinetransition-constant-switch-mode-sync"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnodestatemachinetransition-constant-switch-mode-sync" names="class_animationnodestatemachinetransition_constant_switch_mode_sync"><reference internal="True" refid="enum-animationnodestatemachinetransition-switchmode"><inline classes="std std-ref">SwitchMode</inline></reference> <strong>SWITCH_MODE_SYNC</strong> = <literal>1</literal></paragraph>
            <paragraph>立即切换到下一个状态，但会将新的状态定位到旧状态的播放位置。</paragraph>
            <target refid="class-animationnodestatemachinetransition-constant-switch-mode-at-end"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnodestatemachinetransition-constant-switch-mode-at-end" names="class_animationnodestatemachinetransition_constant_switch_mode_at_end"><reference internal="True" refid="enum-animationnodestatemachinetransition-switchmode"><inline classes="std std-ref">SwitchMode</inline></reference> <strong>SWITCH_MODE_AT_END</strong> = <literal>2</literal></paragraph>
            <paragraph>等待当前状态播放结束，然后切换到下一个状态动画的开头。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-animationnodestatemachinetransition-advancemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-animationnodestatemachinetransition-advancemode" names="enum_animationnodestatemachinetransition_advancemode">enum <strong>AdvanceMode</strong>: <reference internal="True" refid="enum-animationnodestatemachinetransition-advancemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animationnodestatemachinetransition-constant-advance-mode-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnodestatemachinetransition-constant-advance-mode-disabled" names="class_animationnodestatemachinetransition_constant_advance_mode_disabled"><reference internal="True" refid="enum-animationnodestatemachinetransition-advancemode"><inline classes="std std-ref">AdvanceMode</inline></reference> <strong>ADVANCE_MODE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>不要使用该过渡。</paragraph>
            <target refid="class-animationnodestatemachinetransition-constant-advance-mode-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnodestatemachinetransition-constant-advance-mode-enabled" names="class_animationnodestatemachinetransition_constant_advance_mode_enabled"><reference internal="True" refid="enum-animationnodestatemachinetransition-advancemode"><inline classes="std std-ref">AdvanceMode</inline></reference> <strong>ADVANCE_MODE_ENABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>仅在 <reference internal="True" refuri="class_animationnodestatemachineplayback#class-animationnodestatemachineplayback-method-travel"><inline classes="std std-ref">AnimationNodeStateMachinePlayback.travel</inline></reference> 时使用该过渡。</paragraph>
            <target refid="class-animationnodestatemachinetransition-constant-advance-mode-auto"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnodestatemachinetransition-constant-advance-mode-auto" names="class_animationnodestatemachinetransition_constant_advance_mode_auto"><reference internal="True" refid="enum-animationnodestatemachinetransition-advancemode"><inline classes="std std-ref">AdvanceMode</inline></reference> <strong>ADVANCE_MODE_AUTO</strong> = <literal>2</literal></paragraph>
            <paragraph>如果 <reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-condition"><inline classes="std std-ref">advance_condition</inline></reference> 和 <reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-expression"><inline classes="std std-ref">advance_expression</inline></reference> 检查为真，则自动使用该过渡（如果已分配）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-animationnodestatemachinetransition-property-advance-condition"></target>
            <paragraph classes="classref-property" ids="class-animationnodestatemachinetransition-property-advance-condition" names="class_animationnodestatemachinetransition_property_advance_condition"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>advance_condition</strong> = <literal>&amp;""</literal> <reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-condition"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_advance_condition</strong>(value: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_advance_condition</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该条件被设置时打开自动前进。提供的名称将成为 <reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 上的布尔参数，可以通过代码进行控制（请参阅 <reference name="使用 AnimationTree" refuri="../tutorials/animation/animation_tree.html#controlling-from-code">使用 AnimationTree</reference>）。例如，如果 <reference internal="True" refuri="class_animationtree#class-animationtree-property-tree-root"><inline classes="std std-ref">AnimationTree.tree_root</inline></reference> 是一个 <reference internal="True" refuri="class_animationnodestatemachine#class-animationnodestatemachine"><inline classes="std std-ref">AnimationNodeStateMachine</inline></reference> 并且 <reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-condition"><inline classes="std std-ref">advance_condition</inline></reference> 被设置为 <literal>"idle"</literal>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">$animation_tree.set("parameters/conditions/idle", is_on_floor and (linear_velocity.x == 0))</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GetNode&lt;AnimationTree&gt;("animation_tree").Set("parameters/conditions/idle", IsOnFloor &amp;&amp; (LinearVelocity.X == 0));</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachinetransition-property-advance-expression"></target>
            <paragraph classes="classref-property" ids="class-animationnodestatemachinetransition-property-advance-expression" names="class_animationnodestatemachinetransition_property_advance_expression"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>advance_expression</strong> = <literal>""</literal> <reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-expression"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_advance_expression</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_advance_expression</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将表达式用作状态机过渡的条件。可以为状态之间的切换创建复杂的动画推进条件，并通过直接与脚本代码交互为创建复杂的状态机提供更大的灵活性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachinetransition-property-advance-mode"></target>
            <paragraph classes="classref-property" ids="class-animationnodestatemachinetransition-property-advance-mode" names="class_animationnodestatemachinetransition_property_advance_mode"><reference internal="True" refid="enum-animationnodestatemachinetransition-advancemode"><inline classes="std std-ref">AdvanceMode</inline></reference> <strong>advance_mode</strong> = <literal>1</literal> <reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_advance_mode</strong>(value: <reference internal="True" refid="enum-animationnodestatemachinetransition-advancemode"><inline classes="std std-ref">AdvanceMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-animationnodestatemachinetransition-advancemode"><inline classes="std std-ref">AdvanceMode</inline></reference> <strong>get_advance_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>决定在使用 <reference internal="True" refuri="class_animationnodestatemachineplayback#class-animationnodestatemachineplayback-method-travel"><inline classes="std std-ref">AnimationNodeStateMachinePlayback.travel</inline></reference> 时该过渡是否应该被禁用/启用，或者如果 <reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-condition"><inline classes="std std-ref">advance_condition</inline></reference> 和 <reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-expression"><inline classes="std std-ref">advance_expression</inline></reference> 检查为真则自动行进（如果已分配）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachinetransition-property-break-loop-at-end"></target>
            <paragraph classes="classref-property" ids="class-animationnodestatemachinetransition-property-break-loop-at-end" names="class_animationnodestatemachinetransition_property_break_loop_at_end"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>break_loop_at_end</strong> = <literal>false</literal> <reference internal="True" refid="class-animationnodestatemachinetransition-property-break-loop-at-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_break_loop_at_end</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_loop_broken_at_end</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果<literal>true</literal>，则在循环循环结束时中断循环以进行转换，即使动画正在循环。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachinetransition-property-priority"></target>
            <paragraph classes="classref-property" ids="class-animationnodestatemachinetransition-property-priority" names="class_animationnodestatemachinetransition_property_priority"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>priority</strong> = <literal>1</literal> <reference internal="True" refid="class-animationnodestatemachinetransition-property-priority"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_priority</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_priority</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当在树中通过 <reference internal="True" refuri="class_animationnodestatemachineplayback#class-animationnodestatemachineplayback-method-travel"><inline classes="std std-ref">AnimationNodeStateMachinePlayback.travel</inline></reference> 或将 <reference internal="True" refid="class-animationnodestatemachinetransition-property-advance-mode"><inline classes="std std-ref">advance_mode</inline></reference> 设置为 <reference internal="True" refid="class-animationnodestatemachinetransition-constant-advance-mode-auto"><inline classes="std std-ref">ADVANCE_MODE_AUTO</inline></reference> 行进时，倾向于优先级较低的过渡。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachinetransition-property-reset"></target>
            <paragraph classes="classref-property" ids="class-animationnodestatemachinetransition-property-reset" names="class_animationnodestatemachinetransition_property_reset"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>reset</strong> = <literal>true</literal> <reference internal="True" refid="class-animationnodestatemachinetransition-property-reset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_reset</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_reset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，切换时目标动画从头开始播放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachinetransition-property-switch-mode"></target>
            <paragraph classes="classref-property" ids="class-animationnodestatemachinetransition-property-switch-mode" names="class_animationnodestatemachinetransition_property_switch_mode"><reference internal="True" refid="enum-animationnodestatemachinetransition-switchmode"><inline classes="std std-ref">SwitchMode</inline></reference> <strong>switch_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-animationnodestatemachinetransition-property-switch-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_switch_mode</strong>(value: <reference internal="True" refid="enum-animationnodestatemachinetransition-switchmode"><inline classes="std std-ref">SwitchMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-animationnodestatemachinetransition-switchmode"><inline classes="std std-ref">SwitchMode</inline></reference> <strong>get_switch_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>过渡类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachinetransition-property-xfade-curve"></target>
            <paragraph classes="classref-property" ids="class-animationnodestatemachinetransition-property-xfade-curve" names="class_animationnodestatemachinetransition_property_xfade_curve"><reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference> <strong>xfade_curve</strong> <reference internal="True" refid="class-animationnodestatemachinetransition-property-xfade-curve"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_xfade_curve</strong>(value: <reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference> <strong>get_xfade_curve</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>缓动曲线可以更好地控制此状态和下一个状态之间的交叉淡入淡出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachinetransition-property-xfade-time"></target>
            <paragraph classes="classref-property" ids="class-animationnodestatemachinetransition-property-xfade-time" names="class_animationnodestatemachinetransition_property_xfade_time"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>xfade_time</strong> = <literal>0.0</literal> <reference internal="True" refid="class-animationnodestatemachinetransition-property-xfade-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_xfade_time</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_xfade_time</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在该状态和下一个状态之间交叉渐变的时间。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_animationnodestatemachine#class-animationnodestatemachine"><inline classes="std std-ref">AnimationNodeStateMachine</inline></reference> 是在淡入淡出结束后转换当前状态的。只能根据主动画推断精确的剩余时间。将 <reference internal="True" refuri="class_animationnodeoutput#class-animationnodeoutput"><inline classes="std std-ref">AnimationNodeOutput</inline></reference> 视为最上游时，<reference internal="True" refid="class-animationnodestatemachinetransition-property-xfade-time"><inline classes="std std-ref">xfade_time</inline></reference> 不会根据下游增量进行缩放。另见 <reference internal="True" refuri="class_animationnodeoneshot#class-animationnodeoneshot-property-fadeout-time"><inline classes="std std-ref">AnimationNodeOneShot.fadeout_time</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
