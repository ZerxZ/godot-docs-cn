<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_charfxtransform.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/CharFXTransform.xml.</comment>
    <target refid="class-charfxtransform"></target>
    <section ids="charfxtransform class-charfxtransform" names="charfxtransform class_charfxtransform">
        <title>CharFXTransform</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>控制单个字符在 <reference internal="True" refuri="class_richtexteffect#class-richtexteffect"><inline classes="std std-ref">RichTextEffect</inline></reference> 中的显示方式。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>通过在此对象上设置各种属性，可以控制单个字符在 <reference internal="True" refuri="class_richtexteffect#class-richtexteffect"><inline classes="std std-ref">RichTextEffect</inline></reference> 中的显示方式。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/ui/bbcode_in_richtextlabel"><inline classes="doc">RichTextLabel 中的 BBCode</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="RichTextEffect 测试项目（第三方）" refuri="https://github.com/Eoin-ONeill-Yokai/Godot-Rich-Text-Effect-Test-Project">RichTextEffect 测试项目（第三方）</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="70"></colspec>
                    <colspec colwidth="35"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-color"><inline classes="std std-ref">color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-elapsed-time"><inline classes="std std-ref">elapsed_time</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-env"><inline classes="std std-ref">env</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>{}</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-font"><inline classes="std std-ref">font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>RID()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-glyph-count"><inline classes="std std-ref">glyph_count</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-glyph-flags"><inline classes="std std-ref">glyph_flags</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-glyph-index"><inline classes="std std-ref">glyph_index</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-offset"><inline classes="std std-ref">offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-outline"><inline classes="std std-ref">outline</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-range"><inline classes="std std-ref">range</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2i(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-relative-index"><inline classes="std std-ref">relative_index</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-transform"><inline classes="std std-ref">transform</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Transform2D(1, 0, 0, 1, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-charfxtransform-property-visible"><inline classes="std std-ref">visible</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-charfxtransform-property-color"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-color" names="class_charfxtransform_property_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>color</strong> = <literal>Color(0, 0, 0, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_color</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>绘制字符所用的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-charfxtransform-property-elapsed-time"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-elapsed-time" names="class_charfxtransform_property_elapsed_time"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>elapsed_time</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_elapsed_time</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_elapsed_time</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>自 <reference internal="True" refuri="class_richtextlabel#class-richtextlabel"><inline classes="std std-ref">RichTextLabel</inline></reference> 被添加到场景树以来经过的时间（单位：秒）。时间在 <reference internal="True" refuri="class_richtextlabel#class-richtextlabel"><inline classes="std std-ref">RichTextLabel</inline></reference> 暂停时停止（参见 <reference internal="True" refuri="class_node#class-node-property-process-mode"><inline classes="std std-ref">Node.process_mode</inline></reference>）。在 <reference internal="True" refuri="class_richtextlabel#class-richtextlabel"><inline classes="std std-ref">RichTextLabel</inline></reference> 中的文本改变时重置。</paragraph>
            <paragraph><strong>注意：</strong>当 <reference internal="True" refuri="class_richtextlabel#class-richtextlabel"><inline classes="std std-ref">RichTextLabel</inline></reference> 被隐藏时，时间仍在流逝。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-charfxtransform-property-env"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-env" names="class_charfxtransform_property_env"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>env</strong> = <literal>{}</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_environment</strong> <strong>(</strong> <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_environment</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>包含在开头的 BBCode 标记中传递的参数。默认情况下，参数是字符串。如果它们的内容与 <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>、<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>、<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 之类的类型匹配，它们将被自动转换。格式为 <literal>#rrggbb</literal> 或 <literal>#rgb</literal> 的颜色代码将转换为不透明的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。字符串参数即使使用引号也不能包含空格。如果存在，引号也将出现在最终字符串中。</paragraph>
            <paragraph>例如，开头的 BBCode 标签 <literal>[example foo = hello bar = true baz = 42 color =＃ffffff]</literal> 将映射到以下 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{"foo": "hello", "bar": true, "baz": 42, "color": Color(1, 1, 1, 1)}</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-charfxtransform-property-font"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-font" names="class_charfxtransform_property_font"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>font</strong> = <literal>RID()</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_font</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_font</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于渲染字形的字体资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-charfxtransform-property-glyph-count"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-glyph-count" names="class_charfxtransform_property_glyph_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>glyph_count</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_glyph_count</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_glyph_count</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>字素簇中的字形数量。该值在簇的第一个字形中设置。设置此属性不会影响绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-charfxtransform-property-glyph-flags"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-glyph-flags" names="class_charfxtransform_property_glyph_flags"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>glyph_flags</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_glyph_flags</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_glyph_flags</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>字形标志。详情见 <reference internal="True" refuri="class_textserver#enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>。设置此属性不会影响绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-charfxtransform-property-glyph-index"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-glyph-index" names="class_charfxtransform_property_glyph_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>glyph_index</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_glyph_index</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_glyph_index</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>字体特定字形的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-charfxtransform-property-offset"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-offset" names="class_charfxtransform_property_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>offset</strong> = <literal>Vector2(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_offset</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>绘制字符的位置偏移量（单位：像素）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-charfxtransform-property-outline"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-outline" names="class_charfxtransform_property_outline"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>outline</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_outline</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_outline</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则调用 FX 变换进行轮廓绘制。设置该属性不会影响绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-charfxtransform-property-range"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-range" names="class_charfxtransform_property_range"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>range</strong> = <literal>Vector2i(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_range</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_range</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该字符串中的绝对字符范围，对应于字形。设置该属性不会影响绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-charfxtransform-property-relative-index"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-relative-index" names="class_charfxtransform_property_relative_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>relative_index</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_relative_index</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_relative_index</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该字形的字符偏移量，相对于当前 <reference internal="True" refuri="class_richtexteffect#class-richtexteffect"><inline classes="std std-ref">RichTextEffect</inline></reference> 自定义块。设置该属性不会影响绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-charfxtransform-property-transform"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-transform" names="class_charfxtransform_property_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>transform</strong> = <literal>Transform2D(1, 0, 0, 1, 0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_transform</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前字形的当前变换。可以被覆盖（例如根据曲线来确定位置和旋转）。你还可以修改现有值，在其他效果的基础上应用变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-charfxtransform-property-visible"></target>
            <paragraph classes="classref-property" ids="class-charfxtransform-property-visible" names="class_charfxtransform_property_visible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>visible</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_visibility</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_visible</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，将绘制字符。如果为 <literal>false</literal>，则隐藏字符。隐藏字符周围的字符将回流以占用隐藏字符的空间。如果不希望这样做，可以将它们的 <reference internal="True" refid="class-charfxtransform-property-color"><inline classes="std std-ref">color</inline></reference> 设置为<literal>Color(1, 1, 1, 0)</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
