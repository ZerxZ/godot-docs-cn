<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editornode3dgizmoplugin.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/EditorNode3DGizmoPlugin.xml.</comment>
    <target refid="class-editornode3dgizmoplugin"></target>
    <section ids="editornode3dgizmoplugin class-editornode3dgizmoplugin" names="editornode3dgizmoplugin class_editornode3dgizmoplugin">
        <title>EditorNode3DGizmoPlugin</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>编辑器用来定义 Node3D 小工具类型的类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>EditorNode3DGizmoPlugin</strong> 允许定义一种新的小工具类型。定义主要有两种方法：比较简单的小工具可以扩展 <strong>EditorNode3DGizmoPlugin</strong>，否则可以创建新的 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> 类型。有关详细信息，请参阅文档中的教程。</paragraph>
            <paragraph>要使用 <strong>EditorNode3DGizmoPlugin</strong>，请先使用 <reference internal="True" refuri="class_editorplugin#class-editorplugin-method-add-node-3d-gizmo-plugin"><inline classes="std std-ref">EditorPlugin.add_node_3d_gizmo_plugin</inline></reference> 方法注册它。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/plugins/editor/3d_gizmos"><inline classes="doc">Node3D 小工具插件</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="306"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-can-be-hidden"><inline classes="std std-ref">_can_be_hidden</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-commit-handle"><inline classes="std std-ref">_commit_handle</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> handle_id, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> secondary, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> restore, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> cancel <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-commit-subgizmos"><inline classes="std std-ref">_commit_subgizmos</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> ids, <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D[]</inline></reference> restores, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> cancel <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-create-gizmo"><inline classes="std std-ref">_create_gizmo</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> for_node_3d <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-get-gizmo-name"><inline classes="std std-ref">_get_gizmo_name</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-get-handle-name"><inline classes="std std-ref">_get_handle_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> handle_id, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> secondary <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-get-handle-value"><inline classes="std std-ref">_get_handle_value</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> handle_id, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> secondary <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-get-priority"><inline classes="std std-ref">_get_priority</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-get-subgizmo-transform"><inline classes="std std-ref">_get_subgizmo_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> subgizmo_id <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-has-gizmo"><inline classes="std std-ref">_has_gizmo</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> for_node_3d <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-is-handle-highlighted"><inline classes="std std-ref">_is_handle_highlighted</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> handle_id, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> secondary <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-is-selectable-when-hidden"><inline classes="std std-ref">_is_selectable_when_hidden</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-redraw"><inline classes="std std-ref">_redraw</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-set-handle"><inline classes="std std-ref">_set_handle</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> handle_id, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> secondary, <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference> camera, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> screen_pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-set-subgizmo-transform"><inline classes="std std-ref">_set_subgizmo_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> subgizmo_id, <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> transform <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-subgizmos-intersect-frustum"><inline classes="std std-ref">_subgizmos_intersect_frustum</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference> camera, <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane[]</inline></reference> frustum_planes <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-private-method-subgizmos-intersect-ray"><inline classes="std std-ref">_subgizmos_intersect_ray</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference> camera, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> screen_pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-method-add-material"><inline classes="std std-ref">add_material</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_standardmaterial3d#class-standardmaterial3d"><inline classes="std std-ref">StandardMaterial3D</inline></reference> material <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-method-create-handle-material"><inline classes="std std-ref">create_handle_material</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> billboard=false, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> texture=null <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-method-create-icon-material"><inline classes="std std-ref">create_icon_material</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> texture, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> on_top=false, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color=Color(1, 1, 1, 1) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-method-create-material"><inline classes="std std-ref">create_material</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> billboard=false, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> on_top=false, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_vertex_color=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_standardmaterial3d#class-standardmaterial3d"><inline classes="std std-ref">StandardMaterial3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmoplugin-method-get-material"><inline classes="std std-ref">get_material</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo=null <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editornode3dgizmoplugin-private-method-can-be-hidden"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-can-be-hidden" names="class_editornode3dgizmoplugin_private_method__can_be_hidden"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_can_be_hidden</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖该方法，以定义是否可以隐藏该插件处理的小工具。如果未被覆盖，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-commit-handle"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-commit-handle" names="class_editornode3dgizmoplugin_private_method__commit_handle">void <strong>_commit_handle</strong> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> handle_id, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> secondary, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> restore, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> cancel <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>覆盖该方法，以提交正在编辑的控柄（控柄必须是先前在 <reference internal="True" refid="class-editornode3dgizmoplugin-private-method-redraw"><inline classes="std std-ref">_redraw</inline></reference> 期间通过 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">EditorNode3DGizmo.add_handles</inline></reference> 添加的）。这通常意味着为该更改创建一个 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 动作，将当前控柄值用作“做”，并将 <literal>restore</literal> 参数用作“撤销”。</paragraph>
            <paragraph>如果 <literal>cancel</literal> 参数为 <literal>true</literal>，则 <literal>restore</literal> 值应被直接设置，无需任何 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 动作。</paragraph>
            <paragraph>当提交的控柄为次要控柄时，<literal>secondary</literal> 参数为 <literal>true</literal>（有关更多信息，请参阅 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">EditorNode3DGizmo.add_handles</inline></reference>）。</paragraph>
            <paragraph>为该插件的活动小工具而调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-commit-subgizmos"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-commit-subgizmos" names="class_editornode3dgizmoplugin_private_method__commit_subgizmos">void <strong>_commit_subgizmos</strong> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> ids, <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D[]</inline></reference> restores, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> cancel <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>覆盖该方法，以提交一组正在编辑的子小工具（参见 <reference internal="True" refid="class-editornode3dgizmoplugin-private-method-subgizmos-intersect-ray"><inline classes="std std-ref">_subgizmos_intersect_ray</inline></reference> 和 <reference internal="True" refid="class-editornode3dgizmoplugin-private-method-subgizmos-intersect-frustum"><inline classes="std std-ref">_subgizmos_intersect_frustum</inline></reference>）。这通常意味着为该更改创建一个 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 动作，将当前变换用作“做”，并将 <literal>restores</literal> 变换用作“撤消”。</paragraph>
            <paragraph>如果 <literal>cancel</literal> 参数为 <literal>true</literal>，则 <literal>restores</literal> 变换应被直接设置，无需任何 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 动作。对于所有子小工具方法，变换是在与小工具的 Node3D 相关的局部空间中给出的。为该插件的活动小工具而调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-create-gizmo"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-create-gizmo" names="class_editornode3dgizmoplugin_private_method__create_gizmo"><reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> <strong>_create_gizmo</strong> <strong>(</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> for_node_3d <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖此方法，为选择的空间节点返回一个自定义的 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference>，为其余节点返回 <literal>null</literal>。另见 <reference internal="True" refid="class-editornode3dgizmoplugin-private-method-has-gizmo"><inline classes="std std-ref">_has_gizmo</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-get-gizmo-name"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-get-gizmo-name" names="class_editornode3dgizmoplugin_private_method__get_gizmo_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_gizmo_name</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖该方法，以提供将出现在小工具可见性菜单中的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-get-handle-name"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-get-handle-name" names="class_editornode3dgizmoplugin_private_method__get_handle_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_handle_name</strong> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> handle_id, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> secondary <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖该方法，以提供小工具的控柄名称。当请求的控柄是次要控柄时，<literal>secondary</literal> 参数为 <literal>true</literal>（有关更多信息，请参阅 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">EditorNode3DGizmo.add_handles</inline></reference>）。为该插件的活动小工具而调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-get-handle-value"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-get-handle-value" names="class_editornode3dgizmoplugin_private_method__get_handle_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_get_handle_value</strong> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> handle_id, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> secondary <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖该方法，以返回一个控柄的当前值。该值将在编辑开始时被请求，并用作 <reference internal="True" refid="class-editornode3dgizmoplugin-private-method-commit-handle"><inline classes="std std-ref">_commit_handle</inline></reference> 中的 <literal>restore</literal> 参数。</paragraph>
            <paragraph>当请求的控柄是次要控柄时，<literal>secondary</literal> 参数为 <literal>true</literal>（有关更多信息，请参阅 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">EditorNode3DGizmo.add_handles</inline></reference>）。</paragraph>
            <paragraph>为该插件的活动小工具而调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-get-priority"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-get-priority" names="class_editornode3dgizmoplugin_private_method__get_priority"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_priority</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖该方法，以设置该小工具的优先级。具有更高优先级的小工具，将在处理控柄或子小工具选择等输入时具有优先权。</paragraph>
            <paragraph>所有内置编辑器小工具都会返回 <literal>-1</literal> 的优先级。如果未被覆盖，该方法将返回 <literal>0</literal>，这意味着自定义小工具将自动获得比内置小工具更高的优先级。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-get-subgizmo-transform"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-get-subgizmo-transform" names="class_editornode3dgizmoplugin_private_method__get_subgizmo_transform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>_get_subgizmo_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> subgizmo_id <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖该方法，以返回子小工具的当前变换。对于所有子小工具方法，变换应该在相对于小工具的 Node3D 的局部空间中。此变换将在编辑开始时被请求，并在 <reference internal="True" refid="class-editornode3dgizmoplugin-private-method-commit-subgizmos"><inline classes="std std-ref">_commit_subgizmos</inline></reference> 中的 <literal>restore</literal> 参数中使用。为该插件的活动小工具而调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-has-gizmo"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-has-gizmo" names="class_editornode3dgizmoplugin_private_method__has_gizmo"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_gizmo</strong> <strong>(</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> for_node_3d <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖该方法，以定义哪些 Node3D 节点具有来自该插件的小工具。每当将 <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 节点添加到场景时，该方法都会被调用，如果它返回 <literal>true</literal>，则该节点将被分配一个通用的 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference>，并被添加到该插件的活动小工具列表中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-is-handle-highlighted"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-is-handle-highlighted" names="class_editornode3dgizmoplugin_private_method__is_handle_highlighted"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_handle_highlighted</strong> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> handle_id, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> secondary <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖该方法，以在编辑器中高亮显示给定控柄时返回 <literal>true</literal>。当请求的控柄是次要控柄时，<literal>secondary</literal> 参数为 <literal>true</literal>（有关更多信息，请参阅 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">EditorNode3DGizmo.add_handles</inline></reference>）。为该插件的活动小工具而调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-is-selectable-when-hidden"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-is-selectable-when-hidden" names="class_editornode3dgizmoplugin_private_method__is_selectable_when_hidden"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_selectable_when_hidden</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖该方法，以定义具有该小工具的 Node3D 是否应该是可选的，即使该小工具被隐藏。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-redraw"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-redraw" names="class_editornode3dgizmoplugin_private_method__redraw">void <strong>_redraw</strong> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>覆盖该方法，以在每当请求小工具更新时添加所有小工具元素。通常在该方法的开头调用 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo-method-clear"><inline classes="std std-ref">EditorNode3DGizmo.clear</inline></reference>，然后根据节点的属性添加可视元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-set-handle"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-set-handle" names="class_editornode3dgizmoplugin_private_method__set_handle">void <strong>_set_handle</strong> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> handle_id, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> secondary, <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference> camera, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> screen_pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>覆盖该方法，以在用户拖动小工具控柄（控柄是之前使用 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">EditorNode3DGizmo.add_handles</inline></reference> 添加的）时更新节点的属性。提供的 <literal>screen_pos</literal> 是屏幕坐标中的鼠标位置， <literal>camera</literal> 可用于将其转换为射线投射。</paragraph>
            <paragraph>当编辑的控柄是次要控柄时，<literal>secondary</literal> 参数为 <literal>true</literal>（有关更多信息，请参阅 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">EditorNode3DGizmo.add_handles</inline></reference>）。</paragraph>
            <paragraph>为该插件的活动小工具而调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-set-subgizmo-transform"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-set-subgizmo-transform" names="class_editornode3dgizmoplugin_private_method__set_subgizmo_transform">void <strong>_set_subgizmo_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> subgizmo_id, <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> transform <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>覆盖该方法，以在子小工具编辑期间更新节点属性（参见 <reference internal="True" refid="class-editornode3dgizmoplugin-private-method-subgizmos-intersect-ray"><inline classes="std std-ref">_subgizmos_intersect_ray</inline></reference> 和 <reference internal="True" refid="class-editornode3dgizmoplugin-private-method-subgizmos-intersect-frustum"><inline classes="std std-ref">_subgizmos_intersect_frustum</inline></reference>）。<literal>transform</literal> 在 Node3D 的局部坐标系中给出。为该插件的活动小工具而调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-subgizmos-intersect-frustum"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-subgizmos-intersect-frustum" names="class_editornode3dgizmoplugin_private_method__subgizmos_intersect_frustum"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_subgizmos_intersect_frustum</strong> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference> camera, <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane[]</inline></reference> frustum_planes <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖该方法，以允许使用鼠标拖动框选来选择子小工具。给定一个 <literal>camera</literal> 和 <literal>frustum_planes</literal>，该方法应返回哪些子小工具包含在视锥体中。<literal>frustum_planes</literal> 参数由一个构成选择视锥体的所有 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> 的数组组成。返回的值应该包含一个唯一的子小工具标识符列表，这些标识符可以有任何非负值，并将用于其他虚方法，如 <reference internal="True" refid="class-editornode3dgizmoplugin-private-method-get-subgizmo-transform"><inline classes="std std-ref">_get_subgizmo_transform</inline></reference> 或 <reference internal="True" refid="class-editornode3dgizmoplugin-private-method-commit-subgizmos"><inline classes="std std-ref">_commit_subgizmos</inline></reference>。为该插件的活动小工具而调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-private-method-subgizmos-intersect-ray"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-private-method-subgizmos-intersect-ray" names="class_editornode3dgizmoplugin_private_method__subgizmos_intersect_ray"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_subgizmos_intersect_ray</strong> <strong>(</strong> <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo, <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference> camera, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> screen_pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖该方法，以允许使用鼠标点击选择子小工具。给定屏幕坐标中的 <literal>camera</literal> 和 <literal>screen_pos</literal> 时，该方法应返回应选择哪个子小工具。返回值应该是一个唯一的子小工具标识符，它可以有任何非负值，并将用于其他虚方法，如 <reference internal="True" refid="class-editornode3dgizmoplugin-private-method-get-subgizmo-transform"><inline classes="std std-ref">_get_subgizmo_transform</inline></reference> 或 <reference internal="True" refid="class-editornode3dgizmoplugin-private-method-commit-subgizmos"><inline classes="std std-ref">_commit_subgizmos</inline></reference>。为该插件的活动小工具而调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-method-add-material"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-method-add-material" names="class_editornode3dgizmoplugin_method_add_material">void <strong>add_material</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_standardmaterial3d#class-standardmaterial3d"><inline classes="std std-ref">StandardMaterial3D</inline></reference> material <strong>)</strong></paragraph>
            <paragraph>将新材质添加到该插件的内部材质列表中。然后可以使用 <reference internal="True" refid="class-editornode3dgizmoplugin-method-get-material"><inline classes="std std-ref">get_material</inline></reference> 访问它。不应被重写。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-method-create-handle-material"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-method-create-handle-material" names="class_editornode3dgizmoplugin_method_create_handle_material">void <strong>create_handle_material</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> billboard=false, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> texture=null <strong>)</strong></paragraph>
            <paragraph>创建具有变体（选定的和/或可编辑的）的控柄材质，并将它们添加到内部材质列表中。然后可以使用 <reference internal="True" refid="class-editornode3dgizmoplugin-method-get-material"><inline classes="std std-ref">get_material</inline></reference> 访问它们，并在 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">EditorNode3DGizmo.add_handles</inline></reference> 中使用它们。不应被重写。</paragraph>
            <paragraph>可以选择提供一个要使用的纹理代替默认图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-method-create-icon-material"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-method-create-icon-material" names="class_editornode3dgizmoplugin_method_create_icon_material">void <strong>create_icon_material</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> texture, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> on_top=false, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color=Color(1, 1, 1, 1) <strong>)</strong></paragraph>
            <paragraph>创建具有变体（选定的和/或可编辑的）的图标材质，并将它们添加到内部材质列表中。然后可以使用 <reference internal="True" refid="class-editornode3dgizmoplugin-method-get-material"><inline classes="std std-ref">get_material</inline></reference> 访问它们，并在 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo-method-add-unscaled-billboard"><inline classes="std std-ref">EditorNode3DGizmo.add_unscaled_billboard</inline></reference> 中使用它们。不应被重写。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-method-create-material"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-method-create-material" names="class_editornode3dgizmoplugin_method_create_material">void <strong>create_material</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> billboard=false, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> on_top=false, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_vertex_color=false <strong>)</strong></paragraph>
            <paragraph>创建具有变体（选定的和/或可编辑的）的未着色材质，并将它们添加到内部材质列表中。然后可以使用 <reference internal="True" refid="class-editornode3dgizmoplugin-method-get-material"><inline classes="std std-ref">get_material</inline></reference> 访问它们，并在 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo-method-add-mesh"><inline classes="std std-ref">EditorNode3DGizmo.add_mesh</inline></reference> 和 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo-method-add-lines"><inline classes="std std-ref">EditorNode3DGizmo.add_lines</inline></reference> 中使用。不应被重写。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmoplugin-method-get-material"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmoplugin-method-get-material" names="class_editornode3dgizmoplugin_method_get_material"><reference internal="True" refuri="class_standardmaterial3d#class-standardmaterial3d"><inline classes="std std-ref">StandardMaterial3D</inline></reference> <strong>get_material</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> gizmo=null <strong>)</strong></paragraph>
            <paragraph>从内部材质列表中获取材质。如果提供了一个 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference>，它将尝试获取相应的变体（选定的和/或可编辑的）。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
