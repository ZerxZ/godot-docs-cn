<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_gdextension.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/GDExtension.xml.</comment>
    <target refid="class-gdextension"></target>
    <section ids="gdextension class-gdextension" names="gdextension class_gdextension">
        <title>GDExtension</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>GDExtension 的原生库。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>GDExtension</strong> 资源类型代表一个<reference name="共享库" refuri="https://en.wikipedia.org/wiki/Shared_library">共享库</reference>，它可以扩展引擎的功能。<reference internal="True" refuri="class_gdextensionmanager#class-gdextensionmanager"><inline classes="std std-ref">GDExtensionManager</inline></reference> 单例负责加载、重新加载和卸载 <strong>GDExtension</strong> 资源。</paragraph>
            <paragraph><strong>注意：</strong>GDExtension 本身不是脚本语言，与 <reference internal="True" refuri="class_gdscript#class-gdscript"><inline classes="std std-ref">GDScript</inline></reference> 资源没有关系。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/scripting/gdextension/what_is_gdextension"><inline classes="doc">GDExtension 概述</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/scripting/gdextension/gdextension_cpp_example"><inline classes="doc">C++ 的 GDExtension 示例</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="130"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-gdextension-initializationlevel"><inline classes="std std-ref">InitializationLevel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdextension-method-get-minimum-library-initialization-level"><inline classes="std std-ref">get_minimum_library_initialization_level</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdextension-method-is-library-open"><inline classes="std std-ref">is_library_open</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-gdextension-initializationlevel"></target>
            <paragraph classes="classref-enumeration" ids="enum-gdextension-initializationlevel" names="enum_gdextension_initializationlevel">enum <strong>InitializationLevel</strong>: <reference internal="True" refid="enum-gdextension-initializationlevel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-gdextension-constant-initialization-level-core"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gdextension-constant-initialization-level-core" names="class_gdextension_constant_initialization_level_core"><reference internal="True" refid="enum-gdextension-initializationlevel"><inline classes="std std-ref">InitializationLevel</inline></reference> <strong>INITIALIZATION_LEVEL_CORE</strong> = <literal>0</literal></paragraph>
            <paragraph>该库与引擎的核心功能同时初始化。</paragraph>
            <target refid="class-gdextension-constant-initialization-level-servers"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gdextension-constant-initialization-level-servers" names="class_gdextension_constant_initialization_level_servers"><reference internal="True" refid="enum-gdextension-initializationlevel"><inline classes="std std-ref">InitializationLevel</inline></reference> <strong>INITIALIZATION_LEVEL_SERVERS</strong> = <literal>1</literal></paragraph>
            <paragraph>该库与引擎的服务器（例如 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> 或 <reference internal="True" refuri="class_physicsserver3d#class-physicsserver3d"><inline classes="std std-ref">PhysicsServer3D</inline></reference>）同时初始化。</paragraph>
            <target refid="class-gdextension-constant-initialization-level-scene"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gdextension-constant-initialization-level-scene" names="class_gdextension_constant_initialization_level_scene"><reference internal="True" refid="enum-gdextension-initializationlevel"><inline classes="std std-ref">InitializationLevel</inline></reference> <strong>INITIALIZATION_LEVEL_SCENE</strong> = <literal>2</literal></paragraph>
            <paragraph>该库与引擎的场景相关类同时初始化。</paragraph>
            <target refid="class-gdextension-constant-initialization-level-editor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gdextension-constant-initialization-level-editor" names="class_gdextension_constant_initialization_level_editor"><reference internal="True" refid="enum-gdextension-initializationlevel"><inline classes="std std-ref">InitializationLevel</inline></reference> <strong>INITIALIZATION_LEVEL_EDITOR</strong> = <literal>3</literal></paragraph>
            <paragraph>该库与引擎的编辑器类同时初始化。仅在编辑器中加载 GDExtension 时发生。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-gdextension-method-get-minimum-library-initialization-level"></target>
            <paragraph classes="classref-method" ids="class-gdextension-method-get-minimum-library-initialization-level" names="class_gdextension_method_get_minimum_library_initialization_level"><reference internal="True" refid="enum-gdextension-initializationlevel"><inline classes="std std-ref">InitializationLevel</inline></reference> <strong>get_minimum_library_initialization_level</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-gdextension-method-get-minimum-library-initialization-level"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回正确初始化该扩展所需的最低级别（请参阅 <reference internal="True" refid="enum-gdextension-initializationlevel"><inline classes="std std-ref">InitializationLevel</inline></reference> 枚举）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdextension-method-is-library-open"></target>
            <paragraph classes="classref-method" ids="class-gdextension-method-is-library-open" names="class_gdextension_method_is_library_open"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_library_open</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-gdextension-method-is-library-open"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该扩展的库已被打开，则返回 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
