<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_textedit.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <meta content="textarea" name="keywords">
    </meta>
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TextEdit.xml.</comment>
    <target refid="class-textedit"></target>
    <section ids="textedit class-textedit" names="textedit class_textedit">
        <title>TextEdit</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_codeedit#class-codeedit"><inline classes="std std-ref">CodeEdit</inline></reference></paragraph>
        <paragraph>多行文本编辑器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>A multiline text editor. It also has limited facilities for editing code, such as syntax highlighting support. For more advanced facilities for editing code, see <reference internal="True" refuri="class_codeedit#class-codeedit"><inline classes="std std-ref">CodeEdit</inline></reference>.</paragraph>
            <paragraph><strong>Note:</strong> Most viewport, caret, and edit methods contain a <literal>caret_index</literal> argument for <reference internal="True" refid="class-textedit-property-caret-multiple"><inline classes="std std-ref">caret_multiple</inline></reference> support. The argument should be one of the following: <literal>-1</literal> for all carets, <literal>0</literal> for the main caret, or greater than <literal>0</literal> for secondary carets in the order they were created.</paragraph>
            <paragraph><strong>Note:</strong> When holding down <literal classes="kbd">Alt</literal>, the vertical scroll wheel will scroll 5 times as fast as it would normally do. This also works in the Godot script editor.</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="67"></colspec>
                    <colspec colwidth="109"></colspec>
                    <colspec colwidth="85"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-autowrap-mode"><inline classes="std std-ref">autowrap_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-caret-blink"><inline classes="std std-ref">caret_blink</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-caret-blink-interval"><inline classes="std std-ref">caret_blink_interval</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.65</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-caret-draw-when-editable-disabled"><inline classes="std std-ref">caret_draw_when_editable_disabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-caret-mid-grapheme"><inline classes="std std-ref">caret_mid_grapheme</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-caret-move-on-right-click"><inline classes="std std-ref">caret_move_on_right_click</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-caret-multiple"><inline classes="std std-ref">caret_multiple</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-textedit-carettype"><inline classes="std std-ref">CaretType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-caret-type"><inline classes="std std-ref">caret_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>clip_contents</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-clip-contents"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-context-menu-enabled"><inline classes="std std-ref">context_menu_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-deselect-on-focus-loss-enabled"><inline classes="std std-ref">deselect_on_focus_loss_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-drag-and-drop-selection-enabled"><inline classes="std std-ref">drag_and_drop_selection_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-draw-control-chars"><inline classes="std std-ref">draw_control_chars</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-draw-spaces"><inline classes="std std-ref">draw_spaces</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-draw-tabs"><inline classes="std std-ref">draw_tabs</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-editable"><inline classes="std std-ref">editable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-focusmode"><inline classes="std std-ref">FocusMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>focus_mode</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-focus-mode"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-highlight-all-occurrences"><inline classes="std std-ref">highlight_all_occurrences</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-highlight-current-line"><inline classes="std std-ref">highlight_current_line</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-indent-wrapped-lines"><inline classes="std std-ref">indent_wrapped_lines</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-language"><inline classes="std std-ref">language</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-middle-mouse-paste-enabled"><inline classes="std std-ref">middle_mouse_paste_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-minimap-draw"><inline classes="std std-ref">minimap_draw</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-minimap-width"><inline classes="std std-ref">minimap_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>80</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>mouse_default_cursor_shape</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-mouse-default-cursor-shape"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-placeholder-text"><inline classes="std std-ref">placeholder_text</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-scroll-fit-content-height"><inline classes="std std-ref">scroll_fit_content_height</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-scroll-horizontal"><inline classes="std std-ref">scroll_horizontal</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-scroll-past-end-of-file"><inline classes="std std-ref">scroll_past_end_of_file</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-scroll-smooth"><inline classes="std std-ref">scroll_smooth</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-scroll-v-scroll-speed"><inline classes="std std-ref">scroll_v_scroll_speed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>80.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-scroll-vertical"><inline classes="std std-ref">scroll_vertical</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-selecting-enabled"><inline classes="std std-ref">selecting_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-shortcut-keys-enabled"><inline classes="std std-ref">shortcut_keys_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-structured-text-bidi-override"><inline classes="std std-ref">structured_text_bidi_override</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-structured-text-bidi-override-options"><inline classes="std std-ref">structured_text_bidi_override_options</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_syntaxhighlighter#class-syntaxhighlighter"><inline classes="std std-ref">SyntaxHighlighter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-syntax-highlighter"><inline classes="std std-ref">syntax_highlighter</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-text"><inline classes="std std-ref">text</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-text-direction"><inline classes="std std-ref">text_direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-virtual-keyboard-enabled"><inline classes="std std-ref">virtual_keyboard_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-textedit-linewrappingmode"><inline classes="std std-ref">LineWrappingMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-property-wrap-mode"><inline classes="std std-ref">wrap_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="62"></colspec>
                    <colspec colwidth="276"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-private-method-backspace"><inline classes="std std-ref">_backspace</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-private-method-copy"><inline classes="std std-ref">_copy</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-private-method-cut"><inline classes="std std-ref">_cut</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-private-method-handle-unicode-input"><inline classes="std std-ref">_handle_unicode_input</inline></reference>(unicode_char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-private-method-paste"><inline classes="std std-ref">_paste</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-private-method-paste-primary-clipboard"><inline classes="std std-ref">_paste_primary_clipboard</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-add-caret"><inline classes="std std-ref">add_caret</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-add-caret-at-carets"><inline classes="std std-ref">add_caret_at_carets</inline></reference>(below: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-add-gutter"><inline classes="std std-ref">add_gutter</inline></reference>(at: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-add-selection-for-next-occurrence"><inline classes="std std-ref">add_selection_for_next_occurrence</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-adjust-carets-after-edit"><inline classes="std std-ref">adjust_carets_after_edit</inline></reference>(caret: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_col: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_col: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-adjust-viewport-to-caret"><inline classes="std std-ref">adjust_viewport_to_caret</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-apply-ime"><inline classes="std std-ref">apply_ime</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-backspace"><inline classes="std std-ref">backspace</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-begin-complex-operation"><inline classes="std std-ref">begin_complex_operation</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-begin-multicaret-edit"><inline classes="std std-ref">begin_multicaret_edit</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-cancel-ime"><inline classes="std std-ref">cancel_ime</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-center-viewport-to-caret"><inline classes="std std-ref">center_viewport_to_caret</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-clear-undo-history"><inline classes="std std-ref">clear_undo_history</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-collapse-carets"><inline classes="std std-ref">collapse_carets</inline></reference>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, inclusive: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-copy"><inline classes="std std-ref">copy</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-cut"><inline classes="std std-ref">cut</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-delete-selection"><inline classes="std std-ref">delete_selection</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-deselect"><inline classes="std std-ref">deselect</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-end-action"><inline classes="std std-ref">end_action</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-end-complex-operation"><inline classes="std std-ref">end_complex_operation</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-end-multicaret-edit"><inline classes="std std-ref">end_multicaret_edit</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-caret-column"><inline classes="std std-ref">get_caret_column</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-caret-count"><inline classes="std std-ref">get_caret_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-caret-draw-pos"><inline classes="std std-ref">get_caret_draw_pos</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-caret-index-edit-order"><inline classes="std std-ref">get_caret_index_edit_order</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-caret-line"><inline classes="std std-ref">get_caret_line</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-caret-wrap-index"><inline classes="std std-ref">get_caret_wrap_index</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-first-non-whitespace-column"><inline classes="std std-ref">get_first_non_whitespace_column</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-first-visible-line"><inline classes="std std-ref">get_first_visible_line</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-gutter-count"><inline classes="std std-ref">get_gutter_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-gutter-name"><inline classes="std std-ref">get_gutter_name</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-textedit-guttertype"><inline classes="std std-ref">GutterType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-gutter-type"><inline classes="std std-ref">get_gutter_type</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-gutter-width"><inline classes="std std-ref">get_gutter_width</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_hscrollbar#class-hscrollbar"><inline classes="std std-ref">HScrollBar</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-h-scroll-bar"><inline classes="std std-ref">get_h_scroll_bar</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-indent-level"><inline classes="std std-ref">get_indent_level</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-last-full-visible-line"><inline classes="std std-ref">get_last_full_visible_line</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-last-full-visible-line-wrap-index"><inline classes="std std-ref">get_last_full_visible_line_wrap_index</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-last-unhidden-line"><inline classes="std std-ref">get_last_unhidden_line</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line"><inline classes="std std-ref">get_line</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-background-color"><inline classes="std std-ref">get_line_background_color</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-column-at-pos"><inline classes="std std-ref">get_line_column_at_pos</inline></reference>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, allow_out_of_bounds: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-count"><inline classes="std std-ref">get_line_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-gutter-icon"><inline classes="std std-ref">get_line_gutter_icon</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-gutter-item-color"><inline classes="std std-ref">get_line_gutter_item_color</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-gutter-metadata"><inline classes="std std-ref">get_line_gutter_metadata</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-gutter-text"><inline classes="std std-ref">get_line_gutter_text</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-height"><inline classes="std std-ref">get_line_height</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-ranges-from-carets"><inline classes="std std-ref">get_line_ranges_from_carets</inline></reference>(only_selections: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, merge_adjacent: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-width"><inline classes="std std-ref">get_line_width</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-wrap-count"><inline classes="std std-ref">get_line_wrap_count</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-wrap-index-at-column"><inline classes="std std-ref">get_line_wrap_index_at_column</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-line-wrapped-text"><inline classes="std std-ref">get_line_wrapped_text</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-local-mouse-pos"><inline classes="std std-ref">get_local_mouse_pos</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-menu"><inline classes="std std-ref">get_menu</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-minimap-line-at-pos"><inline classes="std std-ref">get_minimap_line_at_pos</inline></reference>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-minimap-visible-lines"><inline classes="std std-ref">get_minimap_visible_lines</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-next-visible-line-index-offset-from"><inline classes="std std-ref">get_next_visible_line_index_offset_from</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, visible_amount: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-next-visible-line-offset-from"><inline classes="std std-ref">get_next_visible_line_offset_from</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, visible_amount: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-pos-at-line-column"><inline classes="std std-ref">get_pos_at_line_column</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-rect-at-line-column"><inline classes="std std-ref">get_rect_at_line_column</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-saved-version"><inline classes="std std-ref">get_saved_version</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-scroll-pos-for-line"><inline classes="std std-ref">get_scroll_pos_for_line</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-selected-text"><inline classes="std std-ref">get_selected_text</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-selection-at-line-column"><inline classes="std std-ref">get_selection_at_line_column</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, include_edges: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, only_selections: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-selection-column"><inline classes="std std-ref">get_selection_column</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-selection-from-column"><inline classes="std std-ref">get_selection_from_column</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-selection-from-line"><inline classes="std std-ref">get_selection_from_line</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-selection-line"><inline classes="std std-ref">get_selection_line</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-textedit-selectionmode"><inline classes="std std-ref">SelectionMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-selection-mode"><inline classes="std std-ref">get_selection_mode</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-selection-origin-column"><inline classes="std std-ref">get_selection_origin_column</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-selection-origin-line"><inline classes="std std-ref">get_selection_origin_line</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-selection-to-column"><inline classes="std std-ref">get_selection_to_column</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-selection-to-line"><inline classes="std std-ref">get_selection_to_line</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-sorted-carets"><inline classes="std std-ref">get_sorted_carets</inline></reference>(include_ignored_carets: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-tab-size"><inline classes="std std-ref">get_tab_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-total-gutter-width"><inline classes="std std-ref">get_total_gutter_width</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-total-visible-line-count"><inline classes="std std-ref">get_total_visible_line_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vscrollbar#class-vscrollbar"><inline classes="std std-ref">VScrollBar</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-v-scroll-bar"><inline classes="std std-ref">get_v_scroll_bar</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-version"><inline classes="std std-ref">get_version</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-visible-line-count"><inline classes="std std-ref">get_visible_line_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-visible-line-count-in-range"><inline classes="std std-ref">get_visible_line_count_in_range</inline></reference>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-word-at-pos"><inline classes="std std-ref">get_word_at_pos</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-get-word-under-caret"><inline classes="std std-ref">get_word_under_caret</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-has-ime-text"><inline classes="std std-ref">has_ime_text</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-has-redo"><inline classes="std std-ref">has_redo</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-has-selection"><inline classes="std std-ref">has_selection</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-has-undo"><inline classes="std std-ref">has_undo</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-insert-line-at"><inline classes="std std-ref">insert_line_at</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-insert-text"><inline classes="std std-ref">insert_text</inline></reference>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, before_selection_begin: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, before_selection_end: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-insert-text-at-caret"><inline classes="std std-ref">insert_text_at_caret</inline></reference>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-is-caret-after-selection-origin"><inline classes="std std-ref">is_caret_after_selection_origin</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-is-caret-visible"><inline classes="std std-ref">is_caret_visible</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-is-dragging-cursor"><inline classes="std std-ref">is_dragging_cursor</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-is-gutter-clickable"><inline classes="std std-ref">is_gutter_clickable</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-is-gutter-drawn"><inline classes="std std-ref">is_gutter_drawn</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-is-gutter-overwritable"><inline classes="std std-ref">is_gutter_overwritable</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-is-in-mulitcaret-edit"><inline classes="std std-ref">is_in_mulitcaret_edit</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-is-line-gutter-clickable"><inline classes="std std-ref">is_line_gutter_clickable</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-is-line-wrapped"><inline classes="std std-ref">is_line_wrapped</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-is-menu-visible"><inline classes="std std-ref">is_menu_visible</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-is-mouse-over-selection"><inline classes="std std-ref">is_mouse_over_selection</inline></reference>(edges: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-is-overtype-mode-enabled"><inline classes="std std-ref">is_overtype_mode_enabled</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-menu-option"><inline classes="std std-ref">menu_option</inline></reference>(option: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-merge-gutters"><inline classes="std std-ref">merge_gutters</inline></reference>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-merge-overlapping-carets"><inline classes="std std-ref">merge_overlapping_carets</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-multicaret-edit-ignore-caret"><inline classes="std std-ref">multicaret_edit_ignore_caret</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-paste"><inline classes="std std-ref">paste</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-paste-primary-clipboard"><inline classes="std std-ref">paste_primary_clipboard</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-redo"><inline classes="std std-ref">redo</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-remove-caret"><inline classes="std std-ref">remove_caret</inline></reference>(caret: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-remove-gutter"><inline classes="std std-ref">remove_gutter</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-remove-line-at"><inline classes="std std-ref">remove_line_at</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, move_carets_down: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-remove-secondary-carets"><inline classes="std std-ref">remove_secondary_carets</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-remove-text"><inline classes="std std-ref">remove_text</inline></reference>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-search"><inline classes="std std-ref">search</inline></reference>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-select"><inline classes="std std-ref">select</inline></reference>(origin_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, origin_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, caret_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, caret_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-select-all"><inline classes="std std-ref">select_all</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-select-word-under-caret"><inline classes="std std-ref">select_word_under_caret</inline></reference>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-caret-column"><inline classes="std std-ref">set_caret_column</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, adjust_viewport: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-caret-line"><inline classes="std std-ref">set_caret_line</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, adjust_viewport: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, can_be_hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-gutter-clickable"><inline classes="std std-ref">set_gutter_clickable</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, clickable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-gutter-custom-draw"><inline classes="std std-ref">set_gutter_custom_draw</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, draw_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-gutter-draw"><inline classes="std std-ref">set_gutter_draw</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, draw: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-gutter-name"><inline classes="std std-ref">set_gutter_name</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-gutter-overwritable"><inline classes="std std-ref">set_gutter_overwritable</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, overwritable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-gutter-type"><inline classes="std std-ref">set_gutter_type</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, type: <reference internal="True" refid="enum-textedit-guttertype"><inline classes="std std-ref">GutterType</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-gutter-width"><inline classes="std std-ref">set_gutter_width</inline></reference>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-line"><inline classes="std std-ref">set_line</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, new_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-line-as-center-visible"><inline classes="std std-ref">set_line_as_center_visible</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-line-as-first-visible"><inline classes="std std-ref">set_line_as_first_visible</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-line-as-last-visible"><inline classes="std std-ref">set_line_as_last_visible</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-line-background-color"><inline classes="std std-ref">set_line_background_color</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-line-gutter-clickable"><inline classes="std std-ref">set_line_gutter_clickable</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, clickable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-line-gutter-icon"><inline classes="std std-ref">set_line_gutter_icon</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-line-gutter-item-color"><inline classes="std std-ref">set_line_gutter_item_color</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-line-gutter-metadata"><inline classes="std std-ref">set_line_gutter_metadata</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, metadata: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-line-gutter-text"><inline classes="std std-ref">set_line_gutter_text</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-overtype-mode-enabled"><inline classes="std std-ref">set_overtype_mode_enabled</inline></reference>(enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-search-flags"><inline classes="std std-ref">set_search_flags</inline></reference>(flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-search-text"><inline classes="std std-ref">set_search_text</inline></reference>(search_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-selection-mode"><inline classes="std std-ref">set_selection_mode</inline></reference>(mode: <reference internal="True" refid="enum-textedit-selectionmode"><inline classes="std std-ref">SelectionMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-selection-origin-column"><inline classes="std std-ref">set_selection_origin_column</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-selection-origin-line"><inline classes="std std-ref">set_selection_origin_line</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, can_be_hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-tab-size"><inline classes="std std-ref">set_tab_size</inline></reference>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-set-tooltip-request-func"><inline classes="std std-ref">set_tooltip_request_func</inline></reference>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-skip-selection-for-next-occurrence"><inline classes="std std-ref">skip_selection_for_next_occurrence</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-start-action"><inline classes="std std-ref">start_action</inline></reference>(action: <reference internal="True" refid="enum-textedit-editaction"><inline classes="std std-ref">EditAction</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-swap-lines"><inline classes="std std-ref">swap_lines</inline></reference>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-tag-saved-version"><inline classes="std std-ref">tag_saved_version</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-method-undo"><inline classes="std std-ref">undo</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="主题属性">
            <title>主题属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="90"></colspec>
                    <colspec colwidth="37"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-background-color"><inline classes="std std-ref">background_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-caret-background-color"><inline classes="std std-ref">caret_background_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-caret-color"><inline classes="std std-ref">caret_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-current-line-color"><inline classes="std std-ref">current_line_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.25, 0.25, 0.26, 0.8)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-font-color"><inline classes="std std-ref">font_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-font-outline-color"><inline classes="std std-ref">font_outline_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-font-placeholder-color"><inline classes="std std-ref">font_placeholder_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 0.6)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-font-readonly-color"><inline classes="std std-ref">font_readonly_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 0.5)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-font-selected-color"><inline classes="std std-ref">font_selected_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-search-result-border-color"><inline classes="std std-ref">search_result_border_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.3, 0.3, 0.3, 0.4)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-search-result-color"><inline classes="std std-ref">search_result_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.3, 0.3, 0.3, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-selection-color"><inline classes="std std-ref">selection_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.5, 0.5, 0.5, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-color-word-highlighted-color"><inline classes="std std-ref">word_highlighted_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.5, 0.5, 0.5, 0.25)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-constant-caret-width"><inline classes="std std-ref">caret_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-constant-line-spacing"><inline classes="std std-ref">line_spacing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-font-font"><inline classes="std std-ref">font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-font-size-font-size"><inline classes="std std-ref">font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-icon-space"><inline classes="std std-ref">space</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-icon-tab"><inline classes="std std-ref">tab</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-style-focus"><inline classes="std std-ref">focus</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-style-normal"><inline classes="std std-ref">normal</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textedit-theme-style-read-only"><inline classes="std std-ref">read_only</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-textedit-signal-caret-changed"></target>
            <paragraph classes="classref-signal" ids="class-textedit-signal-caret-changed" names="class_textedit_signal_caret_changed"><strong>caret_changed</strong>() <reference internal="True" refid="class-textedit-signal-caret-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Emitted when any caret changes position.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-signal-gutter-added"></target>
            <paragraph classes="classref-signal" ids="class-textedit-signal-gutter-added" names="class_textedit_signal_gutter_added"><strong>gutter_added</strong>() <reference internal="True" refid="class-textedit-signal-gutter-added"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加边栏时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-signal-gutter-clicked"></target>
            <paragraph classes="classref-signal" ids="class-textedit-signal-gutter-clicked" names="class_textedit_signal_gutter_clicked"><strong>gutter_clicked</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-signal-gutter-clicked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>点击边栏时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-signal-gutter-removed"></target>
            <paragraph classes="classref-signal" ids="class-textedit-signal-gutter-removed" names="class_textedit_signal_gutter_removed"><strong>gutter_removed</strong>() <reference internal="True" refid="class-textedit-signal-gutter-removed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除边栏时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-signal-lines-edited-from"></target>
            <paragraph classes="classref-signal" ids="class-textedit-signal-lines-edited-from" names="class_textedit_signal_lines_edited_from"><strong>lines_edited_from</strong>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-signal-lines-edited-from"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文本改变时立即发出。</paragraph>
            <paragraph>添加文本时 <literal>from_line</literal> 小于 <literal>to_line</literal>。移除文本时 <literal>to_line</literal> 小于 <literal>from_line</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-signal-text-changed"></target>
            <paragraph classes="classref-signal" ids="class-textedit-signal-text-changed" names="class_textedit_signal_text_changed"><strong>text_changed</strong>() <reference internal="True" refid="class-textedit-signal-text-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当文本更改时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-signal-text-set"></target>
            <paragraph classes="classref-signal" ids="class-textedit-signal-text-set" names="class_textedit_signal_text_set"><strong>text_set</strong>() <reference internal="True" refid="class-textedit-signal-text-set"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refid="class-textedit-method-clear"><inline classes="std std-ref">clear</inline></reference> 被调用，或 <reference internal="True" refid="class-textedit-property-text"><inline classes="std std-ref">text</inline></reference> 被设置时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-textedit-menuitems"></target>
            <paragraph classes="classref-enumeration" ids="enum-textedit-menuitems" names="enum_textedit_menuitems">enum <strong>MenuItems</strong>: <reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textedit-constant-menu-cut"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-cut" names="class_textedit_constant_menu_cut"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_CUT</strong> = <literal>0</literal></paragraph>
            <paragraph>剪切（复制并删除）选中的文本。</paragraph>
            <target refid="class-textedit-constant-menu-copy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-copy" names="class_textedit_constant_menu_copy"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_COPY</strong> = <literal>1</literal></paragraph>
            <paragraph>复制选中的文本。</paragraph>
            <target refid="class-textedit-constant-menu-paste"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-paste" names="class_textedit_constant_menu_paste"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_PASTE</strong> = <literal>2</literal></paragraph>
            <paragraph>将剪贴板上的文本粘贴在选定的文本上（或光标的位置）。</paragraph>
            <target refid="class-textedit-constant-menu-clear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-clear" names="class_textedit_constant_menu_clear"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_CLEAR</strong> = <literal>3</literal></paragraph>
            <paragraph>擦除整个 <strong>TextEdit</strong> 文本。</paragraph>
            <target refid="class-textedit-constant-menu-select-all"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-select-all" names="class_textedit_constant_menu_select_all"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_SELECT_ALL</strong> = <literal>4</literal></paragraph>
            <paragraph>选择整个 <strong>TextEdit</strong> 文本。</paragraph>
            <target refid="class-textedit-constant-menu-undo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-undo" names="class_textedit_constant_menu_undo"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_UNDO</strong> = <literal>5</literal></paragraph>
            <paragraph>撤销之前的操作。</paragraph>
            <target refid="class-textedit-constant-menu-redo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-redo" names="class_textedit_constant_menu_redo"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_REDO</strong> = <literal>6</literal></paragraph>
            <paragraph>重做前一个动作。</paragraph>
            <target refid="class-textedit-constant-menu-submenu-text-dir"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-submenu-text-dir" names="class_textedit_constant_menu_submenu_text_dir"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_SUBMENU_TEXT_DIR</strong> = <literal>7</literal></paragraph>
            <paragraph>“文本书写方向”子菜单的 ID。</paragraph>
            <target refid="class-textedit-constant-menu-dir-inherited"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-dir-inherited" names="class_textedit_constant_menu_dir_inherited"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_DIR_INHERITED</strong> = <literal>8</literal></paragraph>
            <paragraph>将文本方向设置为继承。</paragraph>
            <target refid="class-textedit-constant-menu-dir-auto"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-dir-auto" names="class_textedit_constant_menu_dir_auto"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_DIR_AUTO</strong> = <literal>9</literal></paragraph>
            <paragraph>将文本方向设置为自动。</paragraph>
            <target refid="class-textedit-constant-menu-dir-ltr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-dir-ltr" names="class_textedit_constant_menu_dir_ltr"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_DIR_LTR</strong> = <literal>10</literal></paragraph>
            <paragraph>将文本方向设置为从左至右。</paragraph>
            <target refid="class-textedit-constant-menu-dir-rtl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-dir-rtl" names="class_textedit_constant_menu_dir_rtl"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_DIR_RTL</strong> = <literal>11</literal></paragraph>
            <paragraph>将文本方向设置为从右至左。</paragraph>
            <target refid="class-textedit-constant-menu-display-ucc"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-display-ucc" names="class_textedit_constant_menu_display_ucc"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_DISPLAY_UCC</strong> = <literal>12</literal></paragraph>
            <paragraph>切换控制字符的显示。</paragraph>
            <target refid="class-textedit-constant-menu-submenu-insert-ucc"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-submenu-insert-ucc" names="class_textedit_constant_menu_submenu_insert_ucc"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_SUBMENU_INSERT_UCC</strong> = <literal>13</literal></paragraph>
            <paragraph>“插入控制字符”子菜单的 ID。</paragraph>
            <target refid="class-textedit-constant-menu-insert-lrm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-lrm" names="class_textedit_constant_menu_insert_lrm"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_LRM</strong> = <literal>14</literal></paragraph>
            <paragraph>插入从左至右标志（LRM）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-rlm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-rlm" names="class_textedit_constant_menu_insert_rlm"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_RLM</strong> = <literal>15</literal></paragraph>
            <paragraph>插入从右至左标志（LRM）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-lre"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-lre" names="class_textedit_constant_menu_insert_lre"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_LRE</strong> = <literal>16</literal></paragraph>
            <paragraph>插入开始从左至右嵌入（LRE）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-rle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-rle" names="class_textedit_constant_menu_insert_rle"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_RLE</strong> = <literal>17</literal></paragraph>
            <paragraph>插入开始从右至左嵌入（RLE）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-lro"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-lro" names="class_textedit_constant_menu_insert_lro"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_LRO</strong> = <literal>18</literal></paragraph>
            <paragraph>插入开始从左至右强制（LRO）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-rlo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-rlo" names="class_textedit_constant_menu_insert_rlo"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_RLO</strong> = <literal>19</literal></paragraph>
            <paragraph>插入开始从右至左嵌入（RLE）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-pdf"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-pdf" names="class_textedit_constant_menu_insert_pdf"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_PDF</strong> = <literal>20</literal></paragraph>
            <paragraph>插入退出方向格式化（PDF）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-alm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-alm" names="class_textedit_constant_menu_insert_alm"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_ALM</strong> = <literal>21</literal></paragraph>
            <paragraph>插入阿拉伯字母标记（ALM）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-lri"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-lri" names="class_textedit_constant_menu_insert_lri"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_LRI</strong> = <literal>22</literal></paragraph>
            <paragraph>插入从左至右隔离（LRI）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-rli"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-rli" names="class_textedit_constant_menu_insert_rli"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_RLI</strong> = <literal>23</literal></paragraph>
            <paragraph>插入从右至左隔离（RLI）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-fsi"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-fsi" names="class_textedit_constant_menu_insert_fsi"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_FSI</strong> = <literal>24</literal></paragraph>
            <paragraph>插入第一个强隔离（FSI）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-pdi"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-pdi" names="class_textedit_constant_menu_insert_pdi"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_PDI</strong> = <literal>25</literal></paragraph>
            <paragraph>插入退出方向隔离（PDI）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-zwj"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-zwj" names="class_textedit_constant_menu_insert_zwj"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_ZWJ</strong> = <literal>26</literal></paragraph>
            <paragraph>插入零宽连接符（ZWJ）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-zwnj"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-zwnj" names="class_textedit_constant_menu_insert_zwnj"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_ZWNJ</strong> = <literal>27</literal></paragraph>
            <paragraph>插入零宽非连接符（ZWNJ）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-wj"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-wj" names="class_textedit_constant_menu_insert_wj"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_WJ</strong> = <literal>28</literal></paragraph>
            <paragraph>插入文字连接符（WJ）字符。</paragraph>
            <target refid="class-textedit-constant-menu-insert-shy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-insert-shy" names="class_textedit_constant_menu_insert_shy"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_SHY</strong> = <literal>29</literal></paragraph>
            <paragraph>插入软连字符（SHY）字符。</paragraph>
            <target refid="class-textedit-constant-menu-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-menu-max" names="class_textedit_constant_menu_max"><reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_MAX</strong> = <literal>30</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textedit-editaction"></target>
            <paragraph classes="classref-enumeration" ids="enum-textedit-editaction" names="enum_textedit_editaction">enum <strong>EditAction</strong>: <reference internal="True" refid="enum-textedit-editaction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textedit-constant-action-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-action-none" names="class_textedit_constant_action_none"><reference internal="True" refid="enum-textedit-editaction"><inline classes="std std-ref">EditAction</inline></reference> <strong>ACTION_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>无当前动作。</paragraph>
            <target refid="class-textedit-constant-action-typing"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-action-typing" names="class_textedit_constant_action_typing"><reference internal="True" refid="enum-textedit-editaction"><inline classes="std std-ref">EditAction</inline></reference> <strong>ACTION_TYPING</strong> = <literal>1</literal></paragraph>
            <paragraph>打字动作。</paragraph>
            <target refid="class-textedit-constant-action-backspace"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-action-backspace" names="class_textedit_constant_action_backspace"><reference internal="True" refid="enum-textedit-editaction"><inline classes="std std-ref">EditAction</inline></reference> <strong>ACTION_BACKSPACE</strong> = <literal>2</literal></paragraph>
            <paragraph>向后删除动作。</paragraph>
            <target refid="class-textedit-constant-action-delete"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-action-delete" names="class_textedit_constant_action_delete"><reference internal="True" refid="enum-textedit-editaction"><inline classes="std std-ref">EditAction</inline></reference> <strong>ACTION_DELETE</strong> = <literal>3</literal></paragraph>
            <paragraph>向前删除动作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textedit-searchflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-textedit-searchflags" names="enum_textedit_searchflags">enum <strong>SearchFlags</strong>: <reference internal="True" refid="enum-textedit-searchflags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textedit-constant-search-match-case"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-search-match-case" names="class_textedit_constant_search_match_case"><reference internal="True" refid="enum-textedit-searchflags"><inline classes="std std-ref">SearchFlags</inline></reference> <strong>SEARCH_MATCH_CASE</strong> = <literal>1</literal></paragraph>
            <paragraph>搜索时匹配大小写。</paragraph>
            <target refid="class-textedit-constant-search-whole-words"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-search-whole-words" names="class_textedit_constant_search_whole_words"><reference internal="True" refid="enum-textedit-searchflags"><inline classes="std std-ref">SearchFlags</inline></reference> <strong>SEARCH_WHOLE_WORDS</strong> = <literal>2</literal></paragraph>
            <paragraph>搜索时匹配整个单词。</paragraph>
            <target refid="class-textedit-constant-search-backwards"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-search-backwards" names="class_textedit_constant_search_backwards"><reference internal="True" refid="enum-textedit-searchflags"><inline classes="std std-ref">SearchFlags</inline></reference> <strong>SEARCH_BACKWARDS</strong> = <literal>4</literal></paragraph>
            <paragraph>从头到尾搜索。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textedit-carettype"></target>
            <paragraph classes="classref-enumeration" ids="enum-textedit-carettype" names="enum_textedit_carettype">enum <strong>CaretType</strong>: <reference internal="True" refid="enum-textedit-carettype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textedit-constant-caret-type-line"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-caret-type-line" names="class_textedit_constant_caret_type_line"><reference internal="True" refid="enum-textedit-carettype"><inline classes="std std-ref">CaretType</inline></reference> <strong>CARET_TYPE_LINE</strong> = <literal>0</literal></paragraph>
            <paragraph>垂直线光标。</paragraph>
            <target refid="class-textedit-constant-caret-type-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-caret-type-block" names="class_textedit_constant_caret_type_block"><reference internal="True" refid="enum-textedit-carettype"><inline classes="std std-ref">CaretType</inline></reference> <strong>CARET_TYPE_BLOCK</strong> = <literal>1</literal></paragraph>
            <paragraph>方块光标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textedit-selectionmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-textedit-selectionmode" names="enum_textedit_selectionmode">enum <strong>SelectionMode</strong>: <reference internal="True" refid="enum-textedit-selectionmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textedit-constant-selection-mode-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-selection-mode-none" names="class_textedit_constant_selection_mode_none"><reference internal="True" refid="enum-textedit-selectionmode"><inline classes="std std-ref">SelectionMode</inline></reference> <strong>SELECTION_MODE_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>不选择。</paragraph>
            <target refid="class-textedit-constant-selection-mode-shift"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-selection-mode-shift" names="class_textedit_constant_selection_mode_shift"><reference internal="True" refid="enum-textedit-selectionmode"><inline classes="std std-ref">SelectionMode</inline></reference> <strong>SELECTION_MODE_SHIFT</strong> = <literal>1</literal></paragraph>
            <paragraph>就像按下 <literal>shift</literal> 一样进行选择。</paragraph>
            <target refid="class-textedit-constant-selection-mode-pointer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-selection-mode-pointer" names="class_textedit_constant_selection_mode_pointer"><reference internal="True" refid="enum-textedit-selectionmode"><inline classes="std std-ref">SelectionMode</inline></reference> <strong>SELECTION_MODE_POINTER</strong> = <literal>2</literal></paragraph>
            <paragraph>选择单个字符，就像用户单击一样。</paragraph>
            <target refid="class-textedit-constant-selection-mode-word"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-selection-mode-word" names="class_textedit_constant_selection_mode_word"><reference internal="True" refid="enum-textedit-selectionmode"><inline classes="std std-ref">SelectionMode</inline></reference> <strong>SELECTION_MODE_WORD</strong> = <literal>3</literal></paragraph>
            <paragraph>选择整个单词，就像用户双击一样。</paragraph>
            <target refid="class-textedit-constant-selection-mode-line"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-selection-mode-line" names="class_textedit_constant_selection_mode_line"><reference internal="True" refid="enum-textedit-selectionmode"><inline classes="std std-ref">SelectionMode</inline></reference> <strong>SELECTION_MODE_LINE</strong> = <literal>4</literal></paragraph>
            <paragraph>选择整行文本，就像用户三击一样。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textedit-linewrappingmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-textedit-linewrappingmode" names="enum_textedit_linewrappingmode">enum <strong>LineWrappingMode</strong>: <reference internal="True" refid="enum-textedit-linewrappingmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textedit-constant-line-wrapping-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-line-wrapping-none" names="class_textedit_constant_line_wrapping_none"><reference internal="True" refid="enum-textedit-linewrappingmode"><inline classes="std std-ref">LineWrappingMode</inline></reference> <strong>LINE_WRAPPING_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>换行被禁用。</paragraph>
            <target refid="class-textedit-constant-line-wrapping-boundary"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-line-wrapping-boundary" names="class_textedit_constant_line_wrapping_boundary"><reference internal="True" refid="enum-textedit-linewrappingmode"><inline classes="std std-ref">LineWrappingMode</inline></reference> <strong>LINE_WRAPPING_BOUNDARY</strong> = <literal>1</literal></paragraph>
            <paragraph>换行发生在控件边界，超出通常可见的范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textedit-guttertype"></target>
            <paragraph classes="classref-enumeration" ids="enum-textedit-guttertype" names="enum_textedit_guttertype">enum <strong>GutterType</strong>: <reference internal="True" refid="enum-textedit-guttertype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textedit-constant-gutter-type-string"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-gutter-type-string" names="class_textedit_constant_gutter_type_string"><reference internal="True" refid="enum-textedit-guttertype"><inline classes="std std-ref">GutterType</inline></reference> <strong>GUTTER_TYPE_STRING</strong> = <literal>0</literal></paragraph>
            <paragraph>当使用 <reference internal="True" refid="class-textedit-method-set-gutter-type"><inline classes="std std-ref">set_gutter_type</inline></reference> 将边栏设置为字符串时，它被用于包含通过 <reference internal="True" refid="class-textedit-method-set-line-gutter-text"><inline classes="std std-ref">set_line_gutter_text</inline></reference> 方法设置的文本。</paragraph>
            <target refid="class-textedit-constant-gutter-type-icon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-gutter-type-icon" names="class_textedit_constant_gutter_type_icon"><reference internal="True" refid="enum-textedit-guttertype"><inline classes="std std-ref">GutterType</inline></reference> <strong>GUTTER_TYPE_ICON</strong> = <literal>1</literal></paragraph>
            <paragraph>当使用 <reference internal="True" refid="class-textedit-method-set-gutter-type"><inline classes="std std-ref">set_gutter_type</inline></reference> 将边栏设置为图标时，它被用于包含通过 <reference internal="True" refid="class-textedit-method-set-line-gutter-icon"><inline classes="std std-ref">set_line_gutter_icon</inline></reference> 方法设置的图标。</paragraph>
            <target refid="class-textedit-constant-gutter-type-custom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textedit-constant-gutter-type-custom" names="class_textedit_constant_gutter_type_custom"><reference internal="True" refid="enum-textedit-guttertype"><inline classes="std std-ref">GutterType</inline></reference> <strong>GUTTER_TYPE_CUSTOM</strong> = <literal>2</literal></paragraph>
            <paragraph>当使用 <reference internal="True" refid="class-textedit-method-set-gutter-type"><inline classes="std std-ref">set_gutter_type</inline></reference> 将边栏设置为自定义时，它被用于包含由通过 <reference internal="True" refid="class-textedit-method-set-gutter-custom-draw"><inline classes="std std-ref">set_gutter_custom_draw</inline></reference> 方法设置的回调方法控制的自定义视觉效果。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-textedit-property-autowrap-mode"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-autowrap-mode" names="class_textedit_property_autowrap_mode"><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>autowrap_mode</strong> = <literal>3</literal> <reference internal="True" refid="class-textedit-property-autowrap-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_autowrap_mode</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>get_autowrap_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果 <reference internal="True" refid="class-textedit-property-wrap-mode"><inline classes="std std-ref">wrap_mode</inline></reference> 设置为 <reference internal="True" refid="class-textedit-constant-line-wrapping-boundary"><inline classes="std std-ref">LINE_WRAPPING_BOUNDARY</inline></reference>，则设置文本换行模式。不同模式的行为见 <reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-caret-blink"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-caret-blink" names="class_textedit_property_caret_blink"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>caret_blink</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-caret-blink"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_caret_blink_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_caret_blink_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则文本光标会闪烁。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-caret-blink-interval"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-caret-blink-interval" names="class_textedit_property_caret_blink_interval"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>caret_blink_interval</strong> = <literal>0.65</literal> <reference internal="True" refid="class-textedit-property-caret-blink-interval"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_caret_blink_interval</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_caret_blink_interval</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本光标的闪烁间隔（单位为秒）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-caret-draw-when-editable-disabled"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-caret-draw-when-editable-disabled" names="class_textedit_property_caret_draw_when_editable_disabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>caret_draw_when_editable_disabled</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-caret-draw-when-editable-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_caret_when_editable_disabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drawing_caret_when_editable_disabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则禁用 <reference internal="True" refid="class-textedit-property-editable"><inline classes="std std-ref">editable</inline></reference> 时光标可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-caret-mid-grapheme"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-caret-mid-grapheme" names="class_textedit_property_caret_mid_grapheme"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>caret_mid_grapheme</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-caret-mid-grapheme"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_caret_mid_grapheme_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_caret_mid_grapheme_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>允许在单个复合字符的组件中进行移动光标、选中、删除的操作。</paragraph>
            <paragraph><strong>注意：</strong>退格键 <literal classes="kbd">Backspace</literal> 始终按复合字符的组件删除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-caret-move-on-right-click"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-caret-move-on-right-click" names="class_textedit_property_caret_move_on_right_click"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>caret_move_on_right_click</strong> = <literal>true</literal> <reference internal="True" refid="class-textedit-property-caret-move-on-right-click"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_move_caret_on_right_click_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_move_caret_on_right_click_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则单击右键时会先将文本光标移动到鼠标位置，然后再显示上下文菜单。</paragraph>
            <paragraph>如果为 <literal>false</literal>，则上下文菜单将忽略鼠标位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-caret-multiple"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-caret-multiple" names="class_textedit_property_caret_multiple"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>caret_multiple</strong> = <literal>true</literal> <reference internal="True" refid="class-textedit-property-caret-multiple"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_multiple_carets_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_multiple_carets_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置是否允许使用多个文本光标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-caret-type"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-caret-type" names="class_textedit_property_caret_type"><reference internal="True" refid="enum-textedit-carettype"><inline classes="std std-ref">CaretType</inline></reference> <strong>caret_type</strong> = <literal>0</literal> <reference internal="True" refid="class-textedit-property-caret-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_caret_type</strong>(value: <reference internal="True" refid="enum-textedit-carettype"><inline classes="std std-ref">CaretType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-textedit-carettype"><inline classes="std std-ref">CaretType</inline></reference> <strong>get_caret_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置要绘制的文本光标的类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-context-menu-enabled"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-context-menu-enabled" names="class_textedit_property_context_menu_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>context_menu_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-textedit-property-context-menu-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_context_menu_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_context_menu_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为 <literal>true</literal> 时右键单击会显示上下文菜单。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-deselect-on-focus-loss-enabled"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-deselect-on-focus-loss-enabled" names="class_textedit_property_deselect_on_focus_loss_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>deselect_on_focus_loss_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-textedit-property-deselect-on-focus-loss-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_deselect_on_focus_loss_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_deselect_on_focus_loss_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在丢失焦点时会取消选中文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-drag-and-drop-selection-enabled"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-drag-and-drop-selection-enabled" names="class_textedit_property_drag_and_drop_selection_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>drag_and_drop_selection_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-textedit-property-drag-and-drop-selection-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_and_drop_selection_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drag_and_drop_selection_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If <literal>true</literal>, allow drag and drop of selected text. Text can still be dropped from other sources.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-draw-control-chars"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-draw-control-chars" names="class_textedit_property_draw_control_chars"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>draw_control_chars</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-draw-control-chars"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_control_chars</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_control_chars</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会显示控制字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-draw-spaces"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-draw-spaces" names="class_textedit_property_draw_spaces"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>draw_spaces</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-draw-spaces"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_spaces</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drawing_spaces</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，“空格”字符将具有可见表示形式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-draw-tabs"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-draw-tabs" names="class_textedit_property_draw_tabs"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>draw_tabs</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-draw-tabs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_tabs</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drawing_tabs</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，“制表符”字符将具有可见表示形式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-editable"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-editable" names="class_textedit_property_editable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>editable</strong> = <literal>true</literal> <reference internal="True" refid="class-textedit-property-editable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_editable</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_editable</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>false</literal>，则不能修改现在的文本，也不能添加新文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-highlight-all-occurrences"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-highlight-all-occurrences" names="class_textedit_property_highlight_all_occurrences"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>highlight_all_occurrences</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-highlight-all-occurrences"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_highlight_all_occurrences</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_highlight_all_occurrences_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，所选文本的所有匹配项都将突出显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-highlight-current-line"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-highlight-current-line" names="class_textedit_property_highlight_current_line"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>highlight_current_line</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-highlight-current-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_highlight_current_line</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_highlight_current_line_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则包含光标的行会突出显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-indent-wrapped-lines"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-indent-wrapped-lines" names="class_textedit_property_indent_wrapped_lines"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>indent_wrapped_lines</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-indent-wrapped-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_indent_wrapped_lines</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_indent_wrapped_lines</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If <literal>true</literal>, all wrapped lines are indented to the same amount as the unwrapped line.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-language"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-language" names="class_textedit_property_language"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>language</strong> = <literal>""</literal> <reference internal="True" refid="class-textedit-property-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_language</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_language</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>语言代码，用于断行和文本塑形算法，如果留空则使用当前区域设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-middle-mouse-paste-enabled"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-middle-mouse-paste-enabled" names="class_textedit_property_middle_mouse_paste_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>middle_mouse_paste_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-textedit-property-middle-mouse-paste-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_middle_mouse_paste_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_middle_mouse_paste_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>false</literal>，将禁用鼠标中键粘贴剪贴板。</paragraph>
            <paragraph><strong>注意：</strong>这个方法只在 Linux 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-minimap-draw"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-minimap-draw" names="class_textedit_property_minimap_draw"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>minimap_draw</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-minimap-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_minimap</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drawing_minimap</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If <literal>true</literal>, a minimap is shown, providing an outline of your source code. The minimap uses a fixed-width text size.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-minimap-width"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-minimap-width" names="class_textedit_property_minimap_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>minimap_width</strong> = <literal>80</literal> <reference internal="True" refid="class-textedit-property-minimap-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_minimap_width</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_minimap_width</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>小地图的宽度（以像素为单位）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-placeholder-text"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-placeholder-text" names="class_textedit_property_placeholder_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>placeholder_text</strong> = <literal>""</literal> <reference internal="True" refid="class-textedit-property-placeholder-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_placeholder</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_placeholder</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>TextEdit</strong> 为空时显示的文本。它<strong>不是</strong> <strong>TextEdit</strong> 的默认值（参见 <reference internal="True" refid="class-textedit-property-text"><inline classes="std std-ref">text</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-scroll-fit-content-height"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-scroll-fit-content-height" names="class_textedit_property_scroll_fit_content_height"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>scroll_fit_content_height</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-scroll-fit-content-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fit_content_height_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_fit_content_height_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 <strong>TextEdit</strong> 将禁用垂直滚动，并将最小高度与可见行数相匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-scroll-horizontal"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-scroll-horizontal" names="class_textedit_property_scroll_horizontal"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>scroll_horizontal</strong> = <literal>0</literal> <reference internal="True" refid="class-textedit-property-scroll-horizontal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_h_scroll</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_h_scroll</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果有一个水平滚动条，这决定了当前的水平滚动值，单位是像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-scroll-past-end-of-file"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-scroll-past-end-of-file" names="class_textedit_property_scroll_past_end_of_file"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>scroll_past_end_of_file</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-scroll-past-end-of-file"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_scroll_past_end_of_file_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_scroll_past_end_of_file_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>允许滚动过最后一行，进入“虚拟”空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-scroll-smooth"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-scroll-smooth" names="class_textedit_property_scroll_smooth"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>scroll_smooth</strong> = <literal>false</literal> <reference internal="True" refid="class-textedit-property-scroll-smooth"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_smooth_scroll_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_smooth_scroll_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在文本上平滑滚动，而不是跳到下一个位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-scroll-v-scroll-speed"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-scroll-v-scroll-speed" names="class_textedit_property_scroll_v_scroll_speed"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>scroll_v_scroll_speed</strong> = <literal>80.0</literal> <reference internal="True" refid="class-textedit-property-scroll-v-scroll-speed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_v_scroll_speed</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_v_scroll_speed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置使用小地图或当 <reference internal="True" refid="class-textedit-property-scroll-smooth"><inline classes="std std-ref">scroll_smooth</inline></reference> 被启用时的滚动速度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-scroll-vertical"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-scroll-vertical" names="class_textedit_property_scroll_vertical"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>scroll_vertical</strong> = <literal>0.0</literal> <reference internal="True" refid="class-textedit-property-scroll-vertical"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_v_scroll</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_v_scroll</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果有一个垂直滚动条，这就决定了当前的垂直滚动值，以行数为单位，顶行从0开始。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-selecting-enabled"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-selecting-enabled" names="class_textedit_property_selecting_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>selecting_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-textedit-property-selecting-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_selecting_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_selecting_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，文本可以被选择。</paragraph>
            <paragraph>如果为 <literal>false</literal>，用户或使用<reference internal="True" refid="class-textedit-method-select"><inline classes="std std-ref">select</inline></reference>或<reference internal="True" refid="class-textedit-method-select-all"><inline classes="std std-ref">select_all</inline></reference>方法都不能选择文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-shortcut-keys-enabled"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-shortcut-keys-enabled" names="class_textedit_property_shortcut_keys_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shortcut_keys_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-textedit-property-shortcut-keys-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_shortcut_keys_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_shortcut_keys_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为 <literal>true</literal> 时，即使上下文菜单已被禁用，也会启用该上下文菜单的快捷键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-structured-text-bidi-override"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-structured-text-bidi-override" names="class_textedit_property_structured_text_bidi_override"><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>structured_text_bidi_override</strong> = <literal>0</literal> <reference internal="True" refid="class-textedit-property-structured-text-bidi-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_structured_text_bidi_override</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>get_structured_text_bidi_override</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为结构化文本设置 BiDi 算法覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-structured-text-bidi-override-options"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-structured-text-bidi-override-options" names="class_textedit_property_structured_text_bidi_override_options"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>structured_text_bidi_override_options</strong> = <literal>[]</literal> <reference internal="True" refid="class-textedit-property-structured-text-bidi-override-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_structured_text_bidi_override_options</strong>(value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_structured_text_bidi_override_options</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置 BiDi 覆盖的附加选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-syntax-highlighter"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-syntax-highlighter" names="class_textedit_property_syntax_highlighter"><reference internal="True" refuri="class_syntaxhighlighter#class-syntaxhighlighter"><inline classes="std std-ref">SyntaxHighlighter</inline></reference> <strong>syntax_highlighter</strong> <reference internal="True" refid="class-textedit-property-syntax-highlighter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_syntax_highlighter</strong>(value: <reference internal="True" refuri="class_syntaxhighlighter#class-syntaxhighlighter"><inline classes="std std-ref">SyntaxHighlighter</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_syntaxhighlighter#class-syntaxhighlighter"><inline classes="std std-ref">SyntaxHighlighter</inline></reference> <strong>get_syntax_highlighter</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置要使用的 <reference internal="True" refuri="class_syntaxhighlighter#class-syntaxhighlighter"><inline classes="std std-ref">SyntaxHighlighter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-text"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-text" names="class_textedit_property_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>text</strong> = <literal>""</literal> <reference internal="True" refid="class-textedit-property-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_text</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>TextEdit</strong> 的字符串值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-text-direction"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-text-direction" names="class_textedit_property_text_direction"><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>text_direction</strong> = <literal>0</literal> <reference internal="True" refid="class-textedit-property-text-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_direction</strong>(value: <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>get_text_direction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>基础文本书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-virtual-keyboard-enabled"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-virtual-keyboard-enabled" names="class_textedit_property_virtual_keyboard_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>virtual_keyboard_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-textedit-property-virtual-keyboard-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_virtual_keyboard_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_virtual_keyboard_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在获得焦点时会在支持的平台上显示原生虚拟键盘。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-property-wrap-mode"></target>
            <paragraph classes="classref-property" ids="class-textedit-property-wrap-mode" names="class_textedit_property_wrap_mode"><reference internal="True" refid="enum-textedit-linewrappingmode"><inline classes="std std-ref">LineWrappingMode</inline></reference> <strong>wrap_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-textedit-property-wrap-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_wrapping_mode</strong>(value: <reference internal="True" refid="enum-textedit-linewrappingmode"><inline classes="std std-ref">LineWrappingMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-textedit-linewrappingmode"><inline classes="std std-ref">LineWrappingMode</inline></reference> <strong>get_line_wrapping_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置要使用的换行模式。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-textedit-private-method-backspace"></target>
            <paragraph classes="classref-method" ids="class-textedit-private-method-backspace" names="class_textedit_private_method__backspace"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_backspace</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textedit-private-method-backspace"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法可以定义用户按下退格键时应该发生什么。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-private-method-copy"></target>
            <paragraph classes="classref-method" ids="class-textedit-private-method-copy" names="class_textedit_private_method__copy"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_copy</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textedit-private-method-copy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法可以定义用户执行复制操作时应该发生什么。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-private-method-cut"></target>
            <paragraph classes="classref-method" ids="class-textedit-private-method-cut" names="class_textedit_private_method__cut"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_cut</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textedit-private-method-cut"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法可以定义用户执行剪切操作时应该发生什么。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-private-method-handle-unicode-input"></target>
            <paragraph classes="classref-method" ids="class-textedit-private-method-handle-unicode-input" names="class_textedit_private_method__handle_unicode_input"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_handle_unicode_input</strong>(unicode_char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textedit-private-method-handle-unicode-input"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法可以定义用户打出所提供的键 <literal>unicode_char</literal> 时应该发生什么。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-private-method-paste"></target>
            <paragraph classes="classref-method" ids="class-textedit-private-method-paste" names="class_textedit_private_method__paste"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_paste</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textedit-private-method-paste"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法可以定义用户执行粘贴操作时应该发生什么。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-private-method-paste-primary-clipboard"></target>
            <paragraph classes="classref-method" ids="class-textedit-private-method-paste-primary-clipboard" names="class_textedit_private_method__paste_primary_clipboard"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_paste_primary_clipboard</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textedit-private-method-paste-primary-clipboard"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法可以定义用户使用鼠标中键执行粘贴操作时应该发生什么。</paragraph>
            <paragraph><strong>注意：</strong>此方法仅在 Linux 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-add-caret"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-add-caret" names="class_textedit_method_add_caret"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_caret</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-method-add-caret"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的位置添加新的光标。返回新光标的索引，如果位置无效则返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-add-caret-at-carets"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-add-caret-at-carets" names="class_textedit_method_add_caret_at_carets"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_caret_at_carets</strong>(below: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textedit-method-add-caret-at-carets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Adds an additional caret above or below every caret. If <literal>below</literal> is <literal>true</literal> the new caret will be added below and above otherwise.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-add-gutter"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-add-gutter" names="class_textedit_method_add_gutter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_gutter</strong>(at: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-textedit-method-add-gutter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为这个 <strong>TextEdit</strong> 注册一个新的边栏。请使用 <literal>at</literal> 指定边栏的顺序。<literal>-1</literal> 会将该边栏追加到右侧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-add-selection-for-next-occurrence"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-add-selection-for-next-occurrence" names="class_textedit_method_add_selection_for_next_occurrence"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_selection_for_next_occurrence</strong>() <reference internal="True" refid="class-textedit-method-add-selection-for-next-occurrence"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选中当前所选内容下一次出现的位置并添加文本光标。如果没有活动的选中内容，则选中当前光标所处的单词。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-adjust-carets-after-edit"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-adjust-carets-after-edit" names="class_textedit_method_adjust_carets_after_edit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>adjust_carets_after_edit</strong>(caret: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_col: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_col: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-method-adjust-carets-after-edit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> No longer necessary since methods now adjust carets themselves.</paragraph>
            <paragraph>这个方法什么也不做。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-adjust-viewport-to-caret"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-adjust-viewport-to-caret" names="class_textedit_method_adjust_viewport_to_caret"><abbreviation explanation="无返回值。">void</abbreviation> <strong>adjust_viewport_to_caret</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-textedit-method-adjust-viewport-to-caret"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>调整视口，让光标可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-apply-ime"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-apply-ime" names="class_textedit_method_apply_ime"><abbreviation explanation="无返回值。">void</abbreviation> <strong>apply_ime</strong>() <reference internal="True" refid="class-textedit-method-apply-ime"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为所有光标应用<reference name="输入法编辑器" refuri="https://zh.wikipedia.org/zh-cn/%E8%BE%93%E5%85%A5%E6%B3%95">输入法编辑器</reference>中的文本，如果输入法编辑器处于打开状态，还会将其关闭。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-backspace"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-backspace" names="class_textedit_method_backspace"><abbreviation explanation="无返回值。">void</abbreviation> <strong>backspace</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-textedit-method-backspace"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用户按下退格键时调用。可以用 <reference internal="True" refid="class-textedit-private-method-backspace"><inline classes="std std-ref">_backspace</inline></reference> 覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-begin-complex-operation"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-begin-complex-operation" names="class_textedit_method_begin_complex_operation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>begin_complex_operation</strong>() <reference internal="True" refid="class-textedit-method-begin-complex-operation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>开始一个多部分编辑。在调用 <reference internal="True" refid="class-textedit-method-end-complex-operation"><inline classes="std std-ref">end_complex_operation</inline></reference> 之前，所有编辑都将被视为一个动作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-begin-multicaret-edit"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-begin-multicaret-edit" names="class_textedit_method_begin_multicaret_edit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>begin_multicaret_edit</strong>() <reference internal="True" refid="class-textedit-method-begin-multicaret-edit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Starts an edit for multiple carets. The edit must be ended with <reference internal="True" refid="class-textedit-method-end-multicaret-edit"><inline classes="std std-ref">end_multicaret_edit</inline></reference>. Multicaret edits can be used to edit text at multiple carets and delay merging the carets until the end, so the caret indexes aren't affected immediately. <reference internal="True" refid="class-textedit-method-begin-multicaret-edit"><inline classes="std std-ref">begin_multicaret_edit</inline></reference> and <reference internal="True" refid="class-textedit-method-end-multicaret-edit"><inline classes="std std-ref">end_multicaret_edit</inline></reference> can be nested, and the merge will happen at the last <reference internal="True" refid="class-textedit-method-end-multicaret-edit"><inline classes="std std-ref">end_multicaret_edit</inline></reference>.</paragraph>
            <paragraph>Example usage:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">begin_complex_operation()
begin_multicaret_edit()
for i in range(get_caret_count()):
    if multicaret_edit_ignore_caret(i):
        continue
    # Logic here.
end_multicaret_edit()
end_complex_operation()</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-cancel-ime"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-cancel-ime" names="class_textedit_method_cancel_ime"><abbreviation explanation="无返回值。">void</abbreviation> <strong>cancel_ime</strong>() <reference internal="True" refid="class-textedit-method-cancel-ime"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果<reference name="输入法编辑器" refuri="https://zh.wikipedia.org/zh-cn/%E8%BE%93%E5%85%A5%E6%B3%95">输入法编辑器</reference>处于打开状态，则会将其关闭。输入法编辑器中的文本会丢失。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-center-viewport-to-caret"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-center-viewport-to-caret" names="class_textedit_method_center_viewport_to_caret"><abbreviation explanation="无返回值。">void</abbreviation> <strong>center_viewport_to_caret</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-textedit-method-center-viewport-to-caret"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将视口居中在正在编辑的插入符号所在的行上。这也将 <reference internal="True" refid="class-textedit-property-scroll-horizontal"><inline classes="std std-ref">scroll_horizontal</inline></reference> 值重置为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-clear"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-clear" names="class_textedit_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-textedit-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>执行对 <strong>TextEdit</strong> 的完全重置，包括撤消历史。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-clear-undo-history"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-clear-undo-history" names="class_textedit_method_clear_undo_history"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_undo_history</strong>() <reference internal="True" refid="class-textedit-method-clear-undo-history"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除撤销历史。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-collapse-carets"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-collapse-carets" names="class_textedit_method_collapse_carets"><abbreviation explanation="无返回值。">void</abbreviation> <strong>collapse_carets</strong>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, inclusive: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-textedit-method-collapse-carets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Collapse all carets in the given range to the <literal>from_line</literal> and <literal>from_column</literal> position.</paragraph>
            <paragraph><literal>inclusive</literal> applies to both ends.</paragraph>
            <paragraph>If <reference internal="True" refid="class-textedit-method-is-in-mulitcaret-edit"><inline classes="std std-ref">is_in_mulitcaret_edit</inline></reference> is <literal>true</literal>, carets that are collapsed will be <literal>true</literal> for <reference internal="True" refid="class-textedit-method-multicaret-edit-ignore-caret"><inline classes="std std-ref">multicaret_edit_ignore_caret</inline></reference>.</paragraph>
            <paragraph><reference internal="True" refid="class-textedit-method-merge-overlapping-carets"><inline classes="std std-ref">merge_overlapping_carets</inline></reference> will be called if any carets were collapsed.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-copy"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-copy" names="class_textedit_method_copy"><abbreviation explanation="无返回值。">void</abbreviation> <strong>copy</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-textedit-method-copy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>复制当前选区。可以使用 <reference internal="True" refid="class-textedit-private-method-copy"><inline classes="std std-ref">_copy</inline></reference> 覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-cut"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-cut" names="class_textedit_method_cut"><abbreviation explanation="无返回值。">void</abbreviation> <strong>cut</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-textedit-method-cut"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>剪切当前选区。可以使用 <reference internal="True" refid="class-textedit-private-method-cut"><inline classes="std std-ref">_cut</inline></reference> 覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-delete-selection"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-delete-selection" names="class_textedit_method_delete_selection"><abbreviation explanation="无返回值。">void</abbreviation> <strong>delete_selection</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-textedit-method-delete-selection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除选定的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-deselect"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-deselect" names="class_textedit_method_deselect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>deselect</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-textedit-method-deselect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>取消当前选择。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-end-action"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-end-action" names="class_textedit_method_end_action"><abbreviation explanation="无返回值。">void</abbreviation> <strong>end_action</strong>() <reference internal="True" refid="class-textedit-method-end-action"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>标记在 <reference internal="True" refid="class-textedit-method-start-action"><inline classes="std std-ref">start_action</inline></reference> 开始的当前动作中步骤的末尾。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-end-complex-operation"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-end-complex-operation" names="class_textedit_method_end_complex_operation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>end_complex_operation</strong>() <reference internal="True" refid="class-textedit-method-end-complex-operation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>结束一个多部分编辑，该多部分编辑从 <reference internal="True" refid="class-textedit-method-begin-complex-operation"><inline classes="std std-ref">begin_complex_operation</inline></reference> 开始。如果在一个复杂动作之外调用，则将当前动作将被压入撤消/重做堆栈。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-end-multicaret-edit"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-end-multicaret-edit" names="class_textedit_method_end_multicaret_edit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>end_multicaret_edit</strong>() <reference internal="True" refid="class-textedit-method-end-multicaret-edit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Ends an edit for multiple carets, that was started with <reference internal="True" refid="class-textedit-method-begin-multicaret-edit"><inline classes="std std-ref">begin_multicaret_edit</inline></reference>. If this was the last <reference internal="True" refid="class-textedit-method-end-multicaret-edit"><inline classes="std std-ref">end_multicaret_edit</inline></reference> and <reference internal="True" refid="class-textedit-method-merge-overlapping-carets"><inline classes="std std-ref">merge_overlapping_carets</inline></reference> was called, carets will be merged.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-caret-column"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-caret-column" names="class_textedit_method_get_caret_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_caret_column</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-caret-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回编辑光标所在的列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-caret-count"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-caret-count" names="class_textedit_method_get_caret_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_caret_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-caret-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>TextEdit</strong> 中的光标数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-caret-draw-pos"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-caret-draw-pos" names="class_textedit_method_get_caret_draw_pos"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_caret_draw_pos</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-caret-draw-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回光标的像素绘制位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-caret-index-edit-order"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-caret-index-edit-order" names="class_textedit_method_get_caret_index_edit_order"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_caret_index_edit_order</strong>() <reference internal="True" refid="class-textedit-method-get-caret-index-edit-order"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Carets no longer need to be edited in any specific order. If the carets need to be sorted, use <reference internal="True" refid="class-textedit-method-get-sorted-carets"><inline classes="std std-ref">get_sorted_carets</inline></reference> instead.</paragraph>
            <paragraph>返回文本光标索引的列表，使用编辑顺序，从下到上进行。编辑顺序是 <reference internal="True" refid="class-textedit-method-insert-text-at-caret"><inline classes="std std-ref">insert_text_at_caret</inline></reference> 等动作的应用顺序。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-caret-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-caret-line" names="class_textedit_method_get_caret_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_caret_line</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-caret-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回编辑光标所在的行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-caret-wrap-index"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-caret-wrap-index" names="class_textedit_method_get_caret_wrap_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_caret_wrap_index</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-caret-wrap-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回正编辑的文本光标所在的换行索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-first-non-whitespace-column"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-first-non-whitespace-column" names="class_textedit_method_get_first_non_whitespace_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_first_non_whitespace_column</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-first-non-whitespace-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回第一个非空白字符列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-first-visible-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-first-visible-line" names="class_textedit_method_get_first_visible_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_first_visible_line</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-first-visible-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回第一个可见行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-gutter-count"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-gutter-count" names="class_textedit_method_get_gutter_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_gutter_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-gutter-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回注册的边栏数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-gutter-name"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-gutter-name" names="class_textedit_method_get_gutter_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_gutter_name</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-gutter-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定索引处边栏的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-gutter-type"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-gutter-type" names="class_textedit_method_get_gutter_type"><reference internal="True" refid="enum-textedit-guttertype"><inline classes="std std-ref">GutterType</inline></reference> <strong>get_gutter_type</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-gutter-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定索引处的边栏的类型。边栏可以包含图标、文本或自定义视觉效果。选项见 <reference internal="True" refid="enum-textedit-guttertype"><inline classes="std std-ref">GutterType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-gutter-width"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-gutter-width" names="class_textedit_method_get_gutter_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_gutter_width</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-gutter-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定索引处边栏的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-h-scroll-bar"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-h-scroll-bar" names="class_textedit_method_get_h_scroll_bar"><reference internal="True" refuri="class_hscrollbar#class-hscrollbar"><inline classes="std std-ref">HScrollBar</inline></reference> <strong>get_h_scroll_bar</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-h-scroll-bar"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该 <strong>TextEdit</strong> 所使用的 <reference internal="True" refuri="class_hscrollbar#class-hscrollbar"><inline classes="std std-ref">HScrollBar</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-indent-level"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-indent-level" names="class_textedit_method_get_indent_level"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_indent_level</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-indent-level"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回第一个字符前的空格和 <literal>tab * tab_size</literal> 数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-last-full-visible-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-last-full-visible-line" names="class_textedit_method_get_last_full_visible_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_last_full_visible_line</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-last-full-visible-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最后一个可见的行。获得换行索引的话，使用 <reference internal="True" refid="class-textedit-method-get-last-full-visible-line-wrap-index"><inline classes="std std-ref">get_last_full_visible_line_wrap_index</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-last-full-visible-line-wrap-index"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-last-full-visible-line-wrap-index" names="class_textedit_method_get_last_full_visible_line_wrap_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_last_full_visible_line_wrap_index</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-last-full-visible-line-wrap-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最后一个可见行的最后一个可见换行索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-last-unhidden-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-last-unhidden-line" names="class_textedit_method_get_last_unhidden_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_last_unhidden_line</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-last-unhidden-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回整个 <strong>TextEdit</strong> 中最后一个未隐藏的行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line" names="class_textedit_method_get_line"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_line</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回特定行的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-background-color"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-background-color" names="class_textedit_method_get_line_background_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_line_background_color</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-background-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该行的当前背景色。如果没有设置颜色，则返回 <literal>Color(0, 0, 0, 0)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-column-at-pos"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-column-at-pos" names="class_textedit_method_get_line_column_at_pos"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_line_column_at_pos</strong>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, allow_out_of_bounds: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-column-at-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定位置的行和列。在返回的向量中，<literal>x</literal> 是列，<literal>y</literal> 是行。如果 <literal>allow_out_of_bounds</literal> 为 <literal>false</literal>，且该位置不在文本上方，则两个向量值都将被设置为 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-count"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-count" names="class_textedit_method_get_line_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_line_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本中的行数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-gutter-icon"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-gutter-icon" names="class_textedit_method_get_line_gutter_icon"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_line_gutter_icon</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-gutter-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>gutter</literal> 中当前位于 <literal>line</literal> 的图标。仅当边栏类型为 <reference internal="True" refid="class-textedit-constant-gutter-type-icon"><inline classes="std std-ref">GUTTER_TYPE_ICON</inline></reference> 时才有效（请参阅 <reference internal="True" refid="class-textedit-method-set-gutter-type"><inline classes="std std-ref">set_gutter_type</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-gutter-item-color"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-gutter-item-color" names="class_textedit_method_get_line_gutter_item_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_line_gutter_item_color</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-gutter-item-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回边栏 <literal>gutter</literal> 中，当前位于 <literal>line</literal> 行的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-gutter-metadata"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-gutter-metadata" names="class_textedit_method_get_line_gutter_metadata"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_line_gutter_metadata</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-gutter-metadata"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回边栏 <literal>gutter</literal> 中，当前位于 <literal>line</literal> 行的元数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-gutter-text"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-gutter-text" names="class_textedit_method_get_line_gutter_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_line_gutter_text</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-gutter-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>gutter</literal> 中当前位于 <literal>line</literal> 的文本。仅当边栏类型为 <reference internal="True" refid="class-textedit-constant-gutter-type-string"><inline classes="std std-ref">GUTTER_TYPE_STRING</inline></reference> 时才有效（请参阅 <reference internal="True" refid="class-textedit-method-set-gutter-type"><inline classes="std std-ref">set_gutter_type</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-height"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-height" names="class_textedit_method_get_line_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_line_height</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有行中行高的最大值。</paragraph>
            <paragraph><strong>注意：</strong>返回值受 <reference internal="True" refid="class-textedit-theme-constant-line-spacing"><inline classes="std std-ref">line_spacing</inline></reference> 和 <reference internal="True" refid="class-textedit-theme-font-size-font-size"><inline classes="std std-ref">font_size</inline></reference> 的影响。不会比 <literal>1</literal> 小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-ranges-from-carets"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-ranges-from-carets" names="class_textedit_method_get_line_ranges_from_carets"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>] <strong>get_line_ranges_from_carets</strong>(only_selections: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, merge_adjacent: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-ranges-from-carets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns an <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> of line ranges where <literal>x</literal> is the first line and <literal>y</literal> is the last line. All lines within these ranges will have a caret on them or be part of a selection. Each line will only be part of one line range, even if it has multiple carets on it.</paragraph>
            <paragraph>If a selection's end column (<reference internal="True" refid="class-textedit-method-get-selection-to-column"><inline classes="std std-ref">get_selection_to_column</inline></reference>) is at column <literal>0</literal>, that line will not be included. If a selection begins on the line after another selection ends and <literal>merge_adjacent</literal> is <literal>true</literal>, or they begin and end on the same line, one line range will include both selections.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-width"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-width" names="class_textedit_method_get_line_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_line_width</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于 <literal>line</literal> 的 <literal>wrap_index</literal> 的像素宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-wrap-count"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-wrap-count" names="class_textedit_method_get_line_wrap_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_line_wrap_count</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-wrap-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定行换行的次数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-wrap-index-at-column"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-wrap-index-at-column" names="class_textedit_method_get_line_wrap_index_at_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_line_wrap_index_at_column</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-wrap-index-at-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定行的列的换行索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-line-wrapped-text"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-line-wrapped-text" names="class_textedit_method_get_line_wrapped_text"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_line_wrapped_text</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-line-wrapped-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回代表各个换行索引的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-local-mouse-pos"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-local-mouse-pos" names="class_textedit_method_get_local_mouse_pos"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_local_mouse_pos</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-local-mouse-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回针对文本方向调整过的局部鼠标位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-menu"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-menu" names="class_textedit_method_get_menu"><reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> <strong>get_menu</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>TextEdit</strong> 的 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference>。默认情况下，会在右键单击 <strong>TextEdit</strong> 时显示改菜单。</paragraph>
            <paragraph>你可以添加自定义菜单项，也可以移除标准菜单项。请确保你使用的 ID 与标准菜单项的 ID 不冲突（见 <reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference>）。例如：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    var menu = get_menu()
    # 移除“撤销”后的所有菜单项。
    menu.item_count = menu.get_item_index(MENU_REDO) + 1
    # 添加自定义菜单项。
    menu.add_separator()
    menu.add_item("插入日期", MENU_MAX + 1)
    # 连接回调。
    menu.id_pressed.connect(_on_item_pressed)

func _on_item_pressed(id):
    if id == MENU_MAX + 1:
        insert_text_at_caret(Time.get_date_string_from_system())</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    var menu = GetMenu();
    // 移除“撤销”后的所有菜单项。
    menu.ItemCount = menu.GetItemIndex(TextEdit.MenuItems.Redo) + 1;
    // 添加自定义菜单项。
    menu.AddSeparator();
    menu.AddItem("插入日期", TextEdit.MenuItems.Max + 1);
    // 添加事件处理器。
    menu.IdPressed += OnItemPressed;
}

public void OnItemPressed(int id)
{
    if (id == TextEdit.MenuItems.Max + 1)
    {
        InsertTextAtCaret(Time.GetDateStringFromSystem());
    }
}</literal_block>
                </div>
            </container>
            <paragraph><strong>警告：</strong>这是必要的内部节点，将其移除或释放会导致崩溃。如果你想要将其隐藏，或者将其子节点隐藏，请使用对应的 <reference internal="True" refuri="class_window#class-window-property-visible"><inline classes="std std-ref">Window.visible</inline></reference> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-minimap-line-at-pos"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-minimap-line-at-pos" names="class_textedit_method_get_minimap_line_at_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_minimap_line_at_pos</strong>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-minimap-line-at-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回小地图 <literal>position</literal> 处等价的行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-minimap-visible-lines"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-minimap-visible-lines" names="class_textedit_method_get_minimap_visible_lines"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_minimap_visible_lines</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-minimap-visible-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回小地图上能够绘制的行数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-next-visible-line-index-offset-from"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-next-visible-line-index-offset-from" names="class_textedit_method_get_next_visible_line_index_offset_from"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_next_visible_line_index_offset_from</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, visible_amount: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-next-visible-line-index-offset-from"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>类似于 <reference internal="True" refid="class-textedit-method-get-next-visible-line-offset-from"><inline classes="std std-ref">get_next_visible_line_offset_from</inline></reference>，但考虑了换行索引。在返回的向量中，<literal>x</literal> 是行，<literal>y</literal> 是换行索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-next-visible-line-offset-from"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-next-visible-line-offset-from" names="class_textedit_method_get_next_visible_line_offset_from"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_next_visible_line_offset_from</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, visible_amount: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-next-visible-line-offset-from"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从 <literal>line</literal> 到 <literal>line + visible_amount</literal> 的下一个可见行的计数。也可以倒数计数。例如，如果 <strong>TextEdit</strong> 有 5 行，其中隐藏了第 2 行和第 3 行，使用 <literal>line = 1, visible_amount = 1</literal> 调用它会返回 3。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-pos-at-line-column"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-pos-at-line-column" names="class_textedit_method_get_pos_at_line_column"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_pos_at_line_column</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-pos-at-line-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定 <literal>line</literal> 和 <literal>column</literal> 的局部位置。如果返回的向量的 <literal>x</literal> 或 <literal>y</literal> 等于 <literal>-1</literal>，则该位置在该控件的可视区域之外。</paragraph>
            <paragraph><strong>注意：</strong>Y 位置对应于行的底部。请使用 <reference internal="True" refid="class-textedit-method-get-rect-at-line-column"><inline classes="std std-ref">get_rect_at_line_column</inline></reference> 来获取顶部位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-rect-at-line-column"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-rect-at-line-column" names="class_textedit_method_get_rect_at_line_column"><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> <strong>get_rect_at_line_column</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-rect-at-line-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定 <literal>line</literal> 和 <literal>column</literal> 处的字素的局部位置和大小。如果返回的矩形的 <literal>x</literal> 或 <literal>y</literal> 位置等于 <literal>-1</literal>，则该位置在该控件的可视区域之外。</paragraph>
            <paragraph><strong>注意：</strong>返回的矩形的 Y 位置对应于该行的顶部，不像 <reference internal="True" refid="class-textedit-method-get-pos-at-line-column"><inline classes="std std-ref">get_pos_at_line_column</inline></reference> 返回底边。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-saved-version"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-saved-version" names="class_textedit_method_get_saved_version"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_saved_version</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-saved-version"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 <reference internal="True" refid="class-textedit-method-tag-saved-version"><inline classes="std std-ref">tag_saved_version</inline></reference> 返回最后一个标记的保存版本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-scroll-pos-for-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-scroll-pos-for-line" names="class_textedit_method_get_scroll_pos_for_line"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_scroll_pos_for_line</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-scroll-pos-for-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>line</literal> 的 <literal>wrap_index</literal> 对应的滚动位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-selected-text"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-selected-text" names="class_textedit_method_get_selected_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_selected_text</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-textedit-method-get-selected-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回光标所选文本，如果 <literal>caret_index</literal> 为默认值 <literal>-1</literal> 则为所有光标所选文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-selection-at-line-column"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-selection-at-line-column" names="class_textedit_method_get_selection_at_line_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_at_line_column</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, include_edges: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, only_selections: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-selection-at-line-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the caret index of the selection at the given <literal>line</literal> and <literal>column</literal>, or <literal>-1</literal> if there is none.</paragraph>
            <paragraph>If <literal>include_edges</literal> is <literal>false</literal>, the position must be inside the selection and not at either end. If <literal>only_selections</literal> is <literal>false</literal>, carets without a selection will also be considered.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-selection-column"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-selection-column" names="class_textedit_method_get_selection_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_column</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-selection-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refid="class-textedit-method-get-selection-origin-column"><inline classes="std std-ref">get_selection_origin_column</inline></reference> instead.</paragraph>
            <paragraph>返回选区的原始起始列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-selection-from-column"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-selection-from-column" names="class_textedit_method_get_selection_from_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_from_column</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-selection-from-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the selection begin column. Returns the caret column if there is no selection.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-selection-from-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-selection-from-line" names="class_textedit_method_get_selection_from_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_from_line</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-selection-from-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the selection begin line. Returns the caret line if there is no selection.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-selection-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-selection-line" names="class_textedit_method_get_selection_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_line</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-selection-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refid="class-textedit-method-get-selection-origin-line"><inline classes="std std-ref">get_selection_origin_line</inline></reference> instead.</paragraph>
            <paragraph>返回选区的原始起始行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-selection-mode"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-selection-mode" names="class_textedit_method_get_selection_mode"><reference internal="True" refid="enum-textedit-selectionmode"><inline classes="std std-ref">SelectionMode</inline></reference> <strong>get_selection_mode</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-selection-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前的选区模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-selection-origin-column"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-selection-origin-column" names="class_textedit_method_get_selection_origin_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_origin_column</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-selection-origin-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the origin column of the selection. This is the opposite end from the caret.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-selection-origin-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-selection-origin-line" names="class_textedit_method_get_selection_origin_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_origin_line</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-selection-origin-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the origin line of the selection. This is the opposite end from the caret.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-selection-to-column"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-selection-to-column" names="class_textedit_method_get_selection_to_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_to_column</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-selection-to-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the selection end column. Returns the caret column if there is no selection.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-selection-to-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-selection-to-line" names="class_textedit_method_get_selection_to_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_to_line</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-selection-to-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the selection end line. Returns the caret line if there is no selection.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-sorted-carets"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-sorted-carets" names="class_textedit_method_get_sorted_carets"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_sorted_carets</strong>(include_ignored_carets: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-sorted-carets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the carets sorted by selection beginning from lowest line and column to highest (from top to bottom of text).</paragraph>
            <paragraph>If <literal>include_ignored_carets</literal> is <literal>false</literal>, carets from <reference internal="True" refid="class-textedit-method-multicaret-edit-ignore-caret"><inline classes="std std-ref">multicaret_edit_ignore_caret</inline></reference> will be ignored.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-tab-size"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-tab-size" names="class_textedit_method_get_tab_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_tab_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-tab-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>TextEdit</strong> 的制表符大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-total-gutter-width"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-total-gutter-width" names="class_textedit_method_get_total_gutter_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_total_gutter_width</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-total-gutter-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有栏位及内部边距的总宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-total-visible-line-count"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-total-visible-line-count" names="class_textedit_method_get_total_visible_line_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_total_visible_line_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-total-visible-line-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回可绘制的行数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-v-scroll-bar"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-v-scroll-bar" names="class_textedit_method_get_v_scroll_bar"><reference internal="True" refuri="class_vscrollbar#class-vscrollbar"><inline classes="std std-ref">VScrollBar</inline></reference> <strong>get_v_scroll_bar</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-v-scroll-bar"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该 <strong>TextEdit</strong> 所使用的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-version"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-version" names="class_textedit_method_get_version"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_version</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-version"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>TextEdit</strong> 的当前版本。版本是撤消/重做历史所记录操作的计数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-visible-line-count"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-visible-line-count" names="class_textedit_method_get_visible_line_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_visible_line_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-visible-line-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回可见行数，包括自动换行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-visible-line-count-in-range"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-visible-line-count-in-range" names="class_textedit_method_get_visible_line_count_in_range"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_visible_line_count_in_range</strong>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-visible-line-count-in-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回两行之间，可见行与换行的行的总数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-word-at-pos"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-word-at-pos" names="class_textedit_method_get_word_at_pos"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_word_at_pos</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-word-at-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于 <literal>position</literal> 的单词。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-get-word-under-caret"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-get-word-under-caret" names="class_textedit_method_get_word_under_caret"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_word_under_caret</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-get-word-under-caret"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 文本，其中包含文本光标位置下的单词。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-has-ime-text"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-has-ime-text" names="class_textedit_method_has_ime_text"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_ime_text</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-has-ime-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果用户的<reference name="输入法编辑器" refuri="https://zh.wikipedia.org/zh-cn/%E8%BE%93%E5%85%A5%E6%B3%95">输入法编辑器</reference>中存在文本，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-has-redo"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-has-redo" names="class_textedit_method_has_redo"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_redo</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-has-redo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>有“重做”动作可用时返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-has-selection"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-has-selection" names="class_textedit_method_has_selection"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_selection</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-has-selection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果用户选中了文本，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-has-undo"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-has-undo" names="class_textedit_method_has_undo"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_undo</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-has-undo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>有“撤销”动作可用时返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-insert-line-at"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-insert-line-at" names="class_textedit_method_insert_line_at"><abbreviation explanation="无返回值。">void</abbreviation> <strong>insert_line_at</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textedit-method-insert-line-at"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在第 <literal>line</literal> 行插入文本为 <literal>text</literal> 的新行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-insert-text"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-insert-text" names="class_textedit_method_insert_text"><abbreviation explanation="无返回值。">void</abbreviation> <strong>insert_text</strong>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, before_selection_begin: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, before_selection_end: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-textedit-method-insert-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Inserts the <literal>text</literal> at <literal>line</literal> and <literal>column</literal>.</paragraph>
            <paragraph>If <literal>before_selection_begin</literal> is <literal>true</literal>, carets and selections that begin at <literal>line</literal> and <literal>column</literal> will moved to the end of the inserted text, along with all carets after it.</paragraph>
            <paragraph>If <literal>before_selection_end</literal> is <literal>true</literal>, selections that end at <literal>line</literal> and <literal>column</literal> will be extended to the end of the inserted text. These parameters can be used to insert text inside of or outside of selections.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-insert-text-at-caret"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-insert-text-at-caret" names="class_textedit_method_insert_text_at_caret"><abbreviation explanation="无返回值。">void</abbreviation> <strong>insert_text_at_caret</strong>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-textedit-method-insert-text-at-caret"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在光标位置插入指定的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-is-caret-after-selection-origin"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-is-caret-after-selection-origin" names="class_textedit_method_is_caret_after_selection_origin"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_caret_after_selection_origin</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-is-caret-after-selection-origin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if the caret of the selection is after the selection origin. This can be used to determine the direction of the selection.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-is-caret-visible"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-is-caret-visible" names="class_textedit_method_is_caret_visible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_caret_visible</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-is-caret-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果光标在屏幕上可见，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-is-dragging-cursor"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-is-dragging-cursor" names="class_textedit_method_is_dragging_cursor"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_dragging_cursor</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-is-dragging-cursor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if the user is dragging their mouse for scrolling, selecting, or text dragging.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-is-gutter-clickable"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-is-gutter-clickable" names="class_textedit_method_is_gutter_clickable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_gutter_clickable</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-is-gutter-clickable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该边栏是否可点击。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-is-gutter-drawn"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-is-gutter-drawn" names="class_textedit_method_is_gutter_drawn"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_gutter_drawn</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-is-gutter-drawn"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该边栏是否正被绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-is-gutter-overwritable"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-is-gutter-overwritable" names="class_textedit_method_is_gutter_overwritable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_gutter_overwritable</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-is-gutter-overwritable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该边栏是否可覆写。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-is-in-mulitcaret-edit"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-is-in-mulitcaret-edit" names="class_textedit_method_is_in_mulitcaret_edit"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_in_mulitcaret_edit</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-is-in-mulitcaret-edit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if a <reference internal="True" refid="class-textedit-method-begin-multicaret-edit"><inline classes="std std-ref">begin_multicaret_edit</inline></reference> has been called and <reference internal="True" refid="class-textedit-method-end-multicaret-edit"><inline classes="std std-ref">end_multicaret_edit</inline></reference> has not yet been called.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-is-line-gutter-clickable"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-is-line-gutter-clickable" names="class_textedit_method_is_line_gutter_clickable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_line_gutter_clickable</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-is-line-gutter-clickable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该边栏的给定行是否可点击。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-is-line-wrapped"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-is-line-wrapped" names="class_textedit_method_is_line_wrapped"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_line_wrapped</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-is-line-wrapped"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定的行是否换行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-is-menu-visible"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-is-menu-visible" names="class_textedit_method_is_menu_visible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_menu_visible</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-is-menu-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回菜单是否可见。请使用这个方法来代替 <literal>get_menu().visible</literal>，可以提高性能（因为避免了菜单的创建）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-is-mouse-over-selection"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-is-mouse-over-selection" names="class_textedit_method_is_mouse_over_selection"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_mouse_over_selection</strong>(edges: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-is-mouse-over-selection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回鼠标是否位于选区之上。如果 <literal>edges</literal> 为 <literal>true</literal>，则边界会被认为是选区的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-is-overtype-mode-enabled"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-is-overtype-mode-enabled" names="class_textedit_method_is_overtype_mode_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_overtype_mode_enabled</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-is-overtype-mode-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回用户是否处于改写模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-menu-option"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-menu-option" names="class_textedit_method_menu_option"><abbreviation explanation="无返回值。">void</abbreviation> <strong>menu_option</strong>(option: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-method-menu-option"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>执行 <reference internal="True" refid="enum-textedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> 枚举中定义的给定操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-merge-gutters"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-merge-gutters" names="class_textedit_method_merge_gutters"><abbreviation explanation="无返回值。">void</abbreviation> <strong>merge_gutters</strong>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-method-merge-gutters"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>合并从 <literal>from_line</literal> 到 <literal>to_line</literal> 的边栏。只会复制可覆盖的边栏。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-merge-overlapping-carets"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-merge-overlapping-carets" names="class_textedit_method_merge_overlapping_carets"><abbreviation explanation="无返回值。">void</abbreviation> <strong>merge_overlapping_carets</strong>() <reference internal="True" refid="class-textedit-method-merge-overlapping-carets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Merges any overlapping carets. Will favor the newest caret, or the caret with a selection.</paragraph>
            <paragraph>If <reference internal="True" refid="class-textedit-method-is-in-mulitcaret-edit"><inline classes="std std-ref">is_in_mulitcaret_edit</inline></reference> is <literal>true</literal>, the merge will be queued to happen at the end of the multicaret edit. See <reference internal="True" refid="class-textedit-method-begin-multicaret-edit"><inline classes="std std-ref">begin_multicaret_edit</inline></reference> and <reference internal="True" refid="class-textedit-method-end-multicaret-edit"><inline classes="std std-ref">end_multicaret_edit</inline></reference>.</paragraph>
            <paragraph><strong>Note:</strong> This is not called when a caret changes position but after certain actions, so it is possible to get into a state where carets overlap.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-multicaret-edit-ignore-caret"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-multicaret-edit-ignore-caret" names="class_textedit_method_multicaret_edit_ignore_caret"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>multicaret_edit_ignore_caret</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-multicaret-edit-ignore-caret"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if the given <literal>caret_index</literal> should be ignored as part of a multicaret edit. See <reference internal="True" refid="class-textedit-method-begin-multicaret-edit"><inline classes="std std-ref">begin_multicaret_edit</inline></reference> and <reference internal="True" refid="class-textedit-method-end-multicaret-edit"><inline classes="std std-ref">end_multicaret_edit</inline></reference>. Carets that should be ignored are ones that were part of removed text and will likely be merged at the end of the edit, or carets that were added during the edit.</paragraph>
            <paragraph>It is recommended to <literal>continue</literal> within a loop iterating on multiple carets if a caret should be ignored.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-paste"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-paste" names="class_textedit_method_paste"><abbreviation explanation="无返回值。">void</abbreviation> <strong>paste</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-textedit-method-paste"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>粘贴到当前位置。可以用 <reference internal="True" refid="class-textedit-private-method-paste"><inline classes="std std-ref">_paste</inline></reference> 覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-paste-primary-clipboard"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-paste-primary-clipboard" names="class_textedit_method_paste_primary_clipboard"><abbreviation explanation="无返回值。">void</abbreviation> <strong>paste_primary_clipboard</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-textedit-method-paste-primary-clipboard"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>粘贴主剪贴板。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-redo"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-redo" names="class_textedit_method_redo"><abbreviation explanation="无返回值。">void</abbreviation> <strong>redo</strong>() <reference internal="True" refid="class-textedit-method-redo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>执行重做操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-remove-caret"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-remove-caret" names="class_textedit_method_remove_caret"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_caret</strong>(caret: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-method-remove-caret"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除给定的文本光标索引。</paragraph>
            <paragraph><strong>注意：</strong>可能导致所有其他光标索引的调整。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-remove-gutter"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-remove-gutter" names="class_textedit_method_remove_gutter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_gutter</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-method-remove-gutter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 <strong>TextEdit</strong> 中移除该边栏。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-remove-line-at"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-remove-line-at" names="class_textedit_method_remove_line_at"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_line_at</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, move_carets_down: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-textedit-method-remove-line-at"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Removes the line of text at <literal>line</literal>. Carets on this line will attempt to match their previous visual x position.</paragraph>
            <paragraph>If <literal>move_carets_down</literal> is <literal>true</literal> carets will move to the next line down, otherwise carets will move up.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-remove-secondary-carets"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-remove-secondary-carets" names="class_textedit_method_remove_secondary_carets"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_secondary_carets</strong>() <reference internal="True" refid="class-textedit-method-remove-secondary-carets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除所有额外的光标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-remove-text"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-remove-text" names="class_textedit_method_remove_text"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_text</strong>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-method-remove-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除给定位置之间的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-search"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-search" names="class_textedit_method_search"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>search</strong>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textedit-method-search"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在文本内部进行搜索。搜索标志可以在 <reference internal="True" refid="enum-textedit-searchflags"><inline classes="std std-ref">SearchFlags</inline></reference> 枚举中指定。</paragraph>
            <paragraph>在返回的向量中，<literal>x</literal> 是列，<literal>y</literal> 是行。如果没有找到结果，则两者都等于 <literal>-1</literal> 。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var result = search("print", SEARCH_WHOLE_WORDS, 0, 0)
if result.x != -1:
    # 找到了结果。
    var line_number = result.y
    var column_number = result.x</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Vector2I result = Search("print", (uint)TextEdit.SearchFlags.WholeWords, 0, 0);
if (result.X != -1)
{
    // 找到了结果。
    int lineNumber = result.Y;
    int columnNumber = result.X;
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-select"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-select" names="class_textedit_method_select"><abbreviation explanation="无返回值。">void</abbreviation> <strong>select</strong>(origin_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, origin_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, caret_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, caret_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-textedit-method-select"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Selects text from <literal>origin_line</literal> and <literal>origin_column</literal> to <literal>caret_line</literal> and <literal>caret_column</literal> for the given <literal>caret_index</literal>. This moves the selection origin and the caret. If the positions are the same, the selection will be deselected.</paragraph>
            <paragraph>If <reference internal="True" refid="class-textedit-property-selecting-enabled"><inline classes="std std-ref">selecting_enabled</inline></reference> is <literal>false</literal>, no selection will occur.</paragraph>
            <paragraph><strong>Note:</strong> If supporting multiple carets this will not check for any overlap. See <reference internal="True" refid="class-textedit-method-merge-overlapping-carets"><inline classes="std std-ref">merge_overlapping_carets</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-select-all"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-select-all" names="class_textedit_method_select_all"><abbreviation explanation="无返回值。">void</abbreviation> <strong>select_all</strong>() <reference internal="True" refid="class-textedit-method-select-all"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选择所有文本。</paragraph>
            <paragraph>如果 <reference internal="True" refid="class-textedit-property-selecting-enabled"><inline classes="std std-ref">selecting_enabled</inline></reference> 为 <literal>false</literal>，则不会发生选择。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-select-word-under-caret"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-select-word-under-caret" names="class_textedit_method_select_word_under_caret"><abbreviation explanation="无返回值。">void</abbreviation> <strong>select_word_under_caret</strong>(caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-textedit-method-select-word-under-caret"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选中光标下的单词。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-caret-column"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-caret-column" names="class_textedit_method_set_caret_column"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_caret_column</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, adjust_viewport: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-textedit-method-set-caret-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将光标移动到指定的 <literal>column</literal> 索引。</paragraph>
            <paragraph>如果 <literal>adjust_viewport</literal> 为 <literal>true</literal>，则视口将在移动发生后以光标位置为中心。</paragraph>
            <paragraph><strong>注意：</strong>如果支持多个光标，则不会检查任何重叠。请参阅 <reference internal="True" refid="class-textedit-method-merge-overlapping-carets"><inline classes="std std-ref">merge_overlapping_carets</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-caret-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-caret-line" names="class_textedit_method_set_caret_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_caret_line</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, adjust_viewport: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, can_be_hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-textedit-method-set-caret-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Moves the caret to the specified <literal>line</literal> index. The caret column will be moved to the same visual position it was at the last time <reference internal="True" refid="class-textedit-method-set-caret-column"><inline classes="std std-ref">set_caret_column</inline></reference> was called, or clamped to the end of the line.</paragraph>
            <paragraph>If <literal>adjust_viewport</literal> is <literal>true</literal>, the viewport will center at the caret position after the move occurs.</paragraph>
            <paragraph>If <literal>can_be_hidden</literal> is <literal>true</literal>, the specified <literal>line</literal> can be hidden.</paragraph>
            <paragraph>If <literal>wrap_index</literal> is <literal>-1</literal>, the caret column will be clamped to the <literal>line</literal>'s length. If <literal>wrap_index</literal> is greater than <literal>-1</literal>, the column will be moved to attempt to match the visual x position on the line's <literal>wrap_index</literal> to the position from the last time <reference internal="True" refid="class-textedit-method-set-caret-column"><inline classes="std std-ref">set_caret_column</inline></reference> was called.</paragraph>
            <paragraph><strong>Note:</strong> If supporting multiple carets this will not check for any overlap. See <reference internal="True" refid="class-textedit-method-merge-overlapping-carets"><inline classes="std std-ref">merge_overlapping_carets</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-gutter-clickable"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-gutter-clickable" names="class_textedit_method_set_gutter_clickable"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_gutter_clickable</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, clickable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textedit-method-set-gutter-clickable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将边栏设置为可点击。当鼠标在边栏上悬停时，会将鼠标光标变为指点的手形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-gutter-custom-draw"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-gutter-custom-draw" names="class_textedit_method_set_gutter_custom_draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_gutter_custom_draw</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, draw_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-textedit-method-set-gutter-custom-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为边栏设置自定义的绘制方法。回调方法必须接受以下参数：<literal>line: int, gutter: int, Area: Rect2</literal>。仅当边栏类型为 <reference internal="True" refid="class-textedit-constant-gutter-type-custom"><inline classes="std std-ref">GUTTER_TYPE_CUSTOM</inline></reference> 时才有效（请参阅 <reference internal="True" refid="class-textedit-method-set-gutter-type"><inline classes="std std-ref">set_gutter_type</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-gutter-draw"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-gutter-draw" names="class_textedit_method_set_gutter_draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_gutter_draw</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, draw: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textedit-method-set-gutter-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该边栏是否应被绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-gutter-name"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-gutter-name" names="class_textedit_method_set_gutter_name"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_gutter_name</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textedit-method-set-gutter-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该边栏的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-gutter-overwritable"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-gutter-overwritable" names="class_textedit_method_set_gutter_overwritable"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_gutter_overwritable</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, overwritable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textedit-method-set-gutter-overwritable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该边栏为可覆写。见 <reference internal="True" refid="class-textedit-method-merge-gutters"><inline classes="std std-ref">merge_gutters</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-gutter-type"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-gutter-type" names="class_textedit_method_set_gutter_type"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_gutter_type</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, type: <reference internal="True" refid="enum-textedit-guttertype"><inline classes="std std-ref">GutterType</inline></reference>) <reference internal="True" refid="class-textedit-method-set-gutter-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置边栏的类型。边栏可以包含图标、文本或自定义视觉效果。有关选项，请参阅 <reference internal="True" refid="enum-textedit-guttertype"><inline classes="std std-ref">GutterType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-gutter-width"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-gutter-width" names="class_textedit_method_set_gutter_width"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_gutter_width</strong>(gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-method-set-gutter-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该边栏的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-line" names="class_textedit_method_set_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, new_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textedit-method-set-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Sets the text for a specific <literal>line</literal>.</paragraph>
            <paragraph>Carets on the line will attempt to keep their visual x position.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-line-as-center-visible"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-line-as-center-visible" names="class_textedit_method_set_line_as_center_visible"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_as_center_visible</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-textedit-method-set-line-as-center-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>line</literal> 的 <literal>wrap_index</literal> 放置在视口的中心。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-line-as-first-visible"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-line-as-first-visible" names="class_textedit_method_set_line_as_first_visible"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_as_first_visible</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-textedit-method-set-line-as-first-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>line</literal> 的 <literal>wrap_index</literal> 放置在视口的顶部。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-line-as-last-visible"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-line-as-last-visible" names="class_textedit_method_set_line_as_last_visible"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_as_last_visible</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-textedit-method-set-line-as-last-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>line</literal> 的 <literal>wrap_index</literal> 放置在视口的底部。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-line-background-color"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-line-background-color" names="class_textedit_method_set_line_background_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_background_color</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-textedit-method-set-line-background-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该行的当前背景色。设置为 <literal>Color(0, 0, 0, 0)</literal> 则没有颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-line-gutter-clickable"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-line-gutter-clickable" names="class_textedit_method_set_line_gutter_clickable"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_gutter_clickable</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, clickable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textedit-method-set-line-gutter-clickable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>clickable</literal> 为 <literal>true</literal>，则让位于 <literal>line</literal> 的 <literal>gutter</literal> 可点击。见 <reference internal="True" refid="class-textedit-signal-gutter-clicked"><inline classes="std std-ref">gutter_clicked</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-line-gutter-icon"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-line-gutter-icon" names="class_textedit_method_set_line_gutter_icon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_gutter_icon</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-textedit-method-set-line-gutter-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>line</literal> 上的 <literal>gutter</literal> 的图标设置为 <literal>icon</literal>。仅当边栏类型为 <reference internal="True" refid="class-textedit-constant-gutter-type-icon"><inline classes="std std-ref">GUTTER_TYPE_ICON</inline></reference> 时才有效（请参阅 <reference internal="True" refid="class-textedit-method-set-gutter-type"><inline classes="std std-ref">set_gutter_type</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-line-gutter-item-color"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-line-gutter-item-color" names="class_textedit_method_set_line_gutter_item_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_gutter_item_color</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-textedit-method-set-line-gutter-item-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将边栏 <literal>gutter</literal> 在第 <literal>line</literal> 行的颜色设置为 <literal>color</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-line-gutter-metadata"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-line-gutter-metadata" names="class_textedit_method_set_line_gutter_metadata"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_gutter_metadata</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, metadata: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-textedit-method-set-line-gutter-metadata"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将边栏 <literal>gutter</literal> 在第 <literal>line</literal> 行的元数据设置为 <literal>metadata</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-line-gutter-text"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-line-gutter-text" names="class_textedit_method_set_line_gutter_text"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_gutter_text</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gutter: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textedit-method-set-line-gutter-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>line</literal> 上的 <literal>gutter</literal> 的文本设置为 <literal>text</literal>。仅当边栏类型为 <reference internal="True" refid="class-textedit-constant-gutter-type-string"><inline classes="std std-ref">GUTTER_TYPE_STRING</inline></reference> 时才有效（请参阅 <reference internal="True" refid="class-textedit-method-set-gutter-type"><inline classes="std std-ref">set_gutter_type</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-overtype-mode-enabled"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-overtype-mode-enabled" names="class_textedit_method_set_overtype_mode_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_overtype_mode_enabled</strong>(enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textedit-method-set-overtype-mode-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则将用户设置为改写模式。当用户在该模式下键入时，它将覆盖现有文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-search-flags"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-search-flags" names="class_textedit_method_set_search_flags"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_search_flags</strong>(flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-method-set-search-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置搜索标志 <literal>flags</literal>。配合 <reference internal="True" refid="class-textedit-method-set-search-text"><inline classes="std std-ref">set_search_text</inline></reference> 使用可以高亮被搜索的文本。搜索标志可以使用 <reference internal="True" refid="enum-textedit-searchflags"><inline classes="std std-ref">SearchFlags</inline></reference> 枚举指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-search-text"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-search-text" names="class_textedit_method_set_search_text"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_search_text</strong>(search_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textedit-method-set-search-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置搜索文本。见 <reference internal="True" refid="class-textedit-method-set-search-flags"><inline classes="std std-ref">set_search_flags</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-selection-mode"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-selection-mode" names="class_textedit_method_set_selection_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_selection_mode</strong>(mode: <reference internal="True" refid="enum-textedit-selectionmode"><inline classes="std std-ref">SelectionMode</inline></reference>) <reference internal="True" refid="class-textedit-method-set-selection-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置当前的选区模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-selection-origin-column"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-selection-origin-column" names="class_textedit_method_set_selection_origin_column"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_selection_origin_column</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-textedit-method-set-selection-origin-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Sets the selection origin column to the <literal>column</literal> for the given <literal>caret_index</literal>. If the selection origin is moved to the caret position, the selection will deselect.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-selection-origin-line"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-selection-origin-line" names="class_textedit_method_set_selection_origin_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_selection_origin_line</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, can_be_hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, wrap_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, caret_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-textedit-method-set-selection-origin-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Sets the selection origin line to the <literal>line</literal> for the given <literal>caret_index</literal>. If the selection origin is moved to the caret position, the selection will deselect.</paragraph>
            <paragraph>If <literal>can_be_hidden</literal> is <literal>false</literal>, The line will be set to the nearest unhidden line below or above.</paragraph>
            <paragraph>If <literal>wrap_index</literal> is <literal>-1</literal>, the selection origin column will be clamped to the <literal>line</literal>'s length. If <literal>wrap_index</literal> is greater than <literal>-1</literal>, the column will be moved to attempt to match the visual x position on the line's <literal>wrap_index</literal> to the position from the last time <reference internal="True" refid="class-textedit-method-set-selection-origin-column"><inline classes="std std-ref">set_selection_origin_column</inline></reference> or <reference internal="True" refid="class-textedit-method-select"><inline classes="std std-ref">select</inline></reference> was called.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-tab-size"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-tab-size" names="class_textedit_method_set_tab_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tab_size</strong>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-method-set-tab-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该 <strong>TextEdit</strong> 使用的制表符大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-set-tooltip-request-func"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-set-tooltip-request-func" names="class_textedit_method_set_tooltip_request_func"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tooltip_request_func</strong>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-textedit-method-set-tooltip-request-func"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>提供自定义工具提示文本。该回调方法必须接受以下参数：<literal>hovered_word: String</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-skip-selection-for-next-occurrence"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-skip-selection-for-next-occurrence" names="class_textedit_method_skip_selection_for_next_occurrence"><abbreviation explanation="无返回值。">void</abbreviation> <strong>skip_selection_for_next_occurrence</strong>() <reference internal="True" refid="class-textedit-method-skip-selection-for-next-occurrence"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Moves a selection and a caret for the next occurrence of the current selection. If there is no active selection, moves to the next occurrence of the word under caret.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-start-action"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-start-action" names="class_textedit_method_start_action"><abbreviation explanation="无返回值。">void</abbreviation> <strong>start_action</strong>(action: <reference internal="True" refid="enum-textedit-editaction"><inline classes="std std-ref">EditAction</inline></reference>) <reference internal="True" refid="class-textedit-method-start-action"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>开始一个动作，如果 <literal>action</literal> 与当前动作不同，则会终止当前动作。</paragraph>
            <paragraph>调用 <reference internal="True" refid="class-textedit-method-end-action"><inline classes="std std-ref">end_action</inline></reference>、触发 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-gui-timers-text-edit-idle-detect-sec"><inline classes="std std-ref">ProjectSettings.gui/timers/text_edit_idle_detect_sec</inline></reference> 或者在 <reference internal="True" refid="class-textedit-method-start-action"><inline classes="std std-ref">start_action</inline></reference> 和 <reference internal="True" refid="class-textedit-method-end-action"><inline classes="std std-ref">end_action</inline></reference> 之外调用可撤销的操作都会导致动作的终止。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-swap-lines"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-swap-lines" names="class_textedit_method_swap_lines"><abbreviation explanation="无返回值。">void</abbreviation> <strong>swap_lines</strong>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textedit-method-swap-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Swaps the two lines. Carets will be swapped with the lines.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-tag-saved-version"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-tag-saved-version" names="class_textedit_method_tag_saved_version"><abbreviation explanation="无返回值。">void</abbreviation> <strong>tag_saved_version</strong>() <reference internal="True" refid="class-textedit-method-tag-saved-version"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将当前版本标记为已保存。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-method-undo"></target>
            <paragraph classes="classref-method" ids="class-textedit-method-undo" names="class_textedit_method_undo"><abbreviation explanation="无返回值。">void</abbreviation> <strong>undo</strong>() <reference internal="True" refid="class-textedit-method-undo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>执行撤销操作。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="主题属性说明">
            <title>主题属性说明</title>
            <target refid="class-textedit-theme-color-background-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-background-color" names="class_textedit_theme_color_background_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>background_color</strong> = <literal>Color(0, 0, 0, 0)</literal> <reference internal="True" refid="class-textedit-theme-color-background-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该 <strong>TextEdit</strong> 的背景 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-color-caret-background-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-caret-background-color" names="class_textedit_theme_color_caret_background_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>caret_background_color</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-textedit-theme-color-caret-background-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用块状光标时，光标下文本的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-color-caret-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-caret-color" names="class_textedit_theme_color_caret_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>caret_color</strong> = <literal>Color(0.875, 0.875, 0.875, 1)</literal> <reference internal="True" refid="class-textedit-theme-color-caret-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>光标的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。可以设为完全透明的颜色，从而完全隐藏光标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-color-current-line-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-current-line-color" names="class_textedit_theme_color_current_line_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>current_line_color</strong> = <literal>Color(0.25, 0.25, 0.26, 0.8)</literal> <reference internal="True" refid="class-textedit-theme-color-current-line-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>光标所在行的背景 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-color-font-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-font-color" names="class_textedit_theme_color_font_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_color</strong> = <literal>Color(0.875, 0.875, 0.875, 1)</literal> <reference internal="True" refid="class-textedit-theme-color-font-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-color-font-outline-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-font-outline-color" names="class_textedit_theme_color_font_outline_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_outline_color</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-textedit-theme-color-font-outline-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>TextEdit</strong> 的文本轮廓的色调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-color-font-placeholder-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-font-placeholder-color" names="class_textedit_theme_color_font_placeholder_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_placeholder_color</strong> = <literal>Color(0.875, 0.875, 0.875, 0.6)</literal> <reference internal="True" refid="class-textedit-theme-color-font-placeholder-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refid="class-textedit-property-placeholder-text"><inline classes="std std-ref">placeholder_text</inline></reference> 的字体颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-color-font-readonly-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-font-readonly-color" names="class_textedit_theme_color_font_readonly_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_readonly_color</strong> = <literal>Color(0.875, 0.875, 0.875, 0.5)</literal> <reference internal="True" refid="class-textedit-theme-color-font-readonly-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置禁用 <reference internal="True" refid="class-textedit-property-editable"><inline classes="std std-ref">editable</inline></reference> 时的字体 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-color-font-selected-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-font-selected-color" names="class_textedit_theme_color_font_selected_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_selected_color</strong> = <literal>Color(0, 0, 0, 0)</literal> <reference internal="True" refid="class-textedit-theme-color-font-selected-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置所选文本的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。如果等于 <literal>Color(0, 0, 0, 0)</literal>，则该属性将被忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-color-search-result-border-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-search-result-border-color" names="class_textedit_theme_color_search_result_border_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>search_result_border_color</strong> = <literal>Color(0.3, 0.3, 0.3, 0.4)</literal> <reference internal="True" refid="class-textedit-theme-color-search-result-border-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>与搜索查询匹配的文本周围的边框的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-color-search-result-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-search-result-color" names="class_textedit_theme_color_search_result_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>search_result_color</strong> = <literal>Color(0.3, 0.3, 0.3, 1)</literal> <reference internal="True" refid="class-textedit-theme-color-search-result-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>与搜索查询匹配的文本背景的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-color-selection-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-selection-color" names="class_textedit_theme_color_selection_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>selection_color</strong> = <literal>Color(0.5, 0.5, 0.5, 1)</literal> <reference internal="True" refid="class-textedit-theme-color-selection-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置文本选择的高亮 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-color-word-highlighted-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-color-word-highlighted-color" names="class_textedit_theme_color_word_highlighted_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>word_highlighted_color</strong> = <literal>Color(0.5, 0.5, 0.5, 0.25)</literal> <reference internal="True" refid="class-textedit-theme-color-word-highlighted-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置多次出现的高亮 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 颜色。须启用 <reference internal="True" refid="class-textedit-property-highlight-all-occurrences"><inline classes="std std-ref">highlight_all_occurrences</inline></reference> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-constant-caret-width"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-constant-caret-width" names="class_textedit_theme_constant_caret_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>caret_width</strong> = <literal>1</literal> <reference internal="True" refid="class-textedit-theme-constant-caret-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文本光标的像素宽度。较大的值能够确保光标易于看到，确保光标与较大的字体保持一致，从而提高可访问性。如果设置为 <literal>0</literal> 或更低，光标的宽度将被自动设置为 1 像素，并乘以显示缩放系数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-constant-line-spacing"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-constant-line-spacing" names="class_textedit_theme_constant_line_spacing"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>line_spacing</strong> = <literal>4</literal> <reference internal="True" refid="class-textedit-theme-constant-line-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置行间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-constant-outline-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-constant-outline-size" names="class_textedit_theme_constant_outline_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>outline_size</strong> = <literal>0</literal> <reference internal="True" refid="class-textedit-theme-constant-outline-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文字轮廓的大小。</paragraph>
            <paragraph><strong>注意：</strong>如果使用启用了 <reference internal="True" refuri="class_fontfile#class-fontfile-property-multichannel-signed-distance-field"><inline classes="std std-ref">FontFile.multichannel_signed_distance_field</inline></reference> 的字体，其 <reference internal="True" refuri="class_fontfile#class-fontfile-property-msdf-pixel-range"><inline classes="std std-ref">FontFile.msdf_pixel_range</inline></reference> 必须至少设置为 <reference internal="True" refid="class-textedit-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference> 的<emphasis>两倍</emphasis>，轮廓渲染才能看起来正确。否则，轮廓可能会比预期的更早被切断。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-font-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-font-font" names="class_textedit_theme_font_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>font</strong> <reference internal="True" refid="class-textedit-theme-font-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置默认的字体 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-font-size-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-font-size-font-size" names="class_textedit_theme_font_size_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_size</strong> <reference internal="True" refid="class-textedit-theme-font-size-font-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置默认的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-icon-space"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-icon-space" names="class_textedit_theme_icon_space"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>space</strong> <reference internal="True" refid="class-textedit-theme-icon-space"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为空格文本字符，设置一个自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-icon-tab"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-icon-tab" names="class_textedit_theme_icon_tab"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>tab</strong> <reference internal="True" refid="class-textedit-theme-icon-tab"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为制表符文本字符，设置一个自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-style-focus"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-style-focus" names="class_textedit_theme_style_focus"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>focus</strong> <reference internal="True" refid="class-textedit-theme-style-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置当获得焦点时的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。该 <reference internal="True" refid="class-textedit-theme-style-focus"><inline classes="std std-ref">focus</inline></reference> <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 显示在基础 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <emphasis>之上</emphasis>，因此应使用部分透明的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 以确保基础 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 保持可见。表示轮廓或下划线的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 非常适合此目的。要禁用焦点视觉效果，请指定一个 <reference internal="True" refuri="class_styleboxempty#class-styleboxempty"><inline classes="std std-ref">StyleBoxEmpty</inline></reference> 资源。请注意，禁用焦点视觉效果会破坏键盘 / 控制器导航的可用性，出于可访问性原因，不建议这样做。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-style-normal"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-style-normal" names="class_textedit_theme_style_normal"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>normal</strong> <reference internal="True" refid="class-textedit-theme-style-normal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置这个 <strong>TextEdit</strong> 的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textedit-theme-style-read-only"></target>
            <paragraph classes="classref-themeproperty" ids="class-textedit-theme-style-read-only" names="class_textedit_theme_style_read_only"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>read_only</strong> <reference internal="True" refid="class-textedit-theme-style-read-only"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置这个 <strong>TextEdit</strong> 在禁用 <reference internal="True" refid="class-textedit-property-editable"><inline classes="std std-ref">editable</inline></reference> 时的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
