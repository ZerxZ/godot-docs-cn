<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_geometry3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Geometry3D.xml.</comment>
    <target refid="class-geometry3d"></target>
    <section ids="geometry3d class-geometry3d" names="geometry3d class_geometry3d">
        <title>Geometry3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供常见 3D 几何运算的方法。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>为创建几何形状，计算形状之间的交集，以及处理 3D 中的各种其他几何操作提供了一组辅助函数。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="269"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-build-box-planes"><inline classes="std std-ref">build_box_planes</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> extents <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-build-capsule-planes"><inline classes="std std-ref">build_capsule_planes</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> radius, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> height, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> sides, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> lats, Vector3.Axis axis=2 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-build-cylinder-planes"><inline classes="std std-ref">build_cylinder_planes</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> radius, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> height, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> sides, Vector3.Axis axis=2 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-clip-polygon"><inline classes="std std-ref">clip_polygon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> points, <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> plane <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-compute-convex-mesh-points"><inline classes="std std-ref">compute_convex_mesh_points</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane[]</inline></reference> planes <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-get-closest-point-to-segment"><inline classes="std std-ref">get_closest_point_to_segment</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> point, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> s1, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> s2 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-get-closest-point-to-segment-uncapped"><inline classes="std std-ref">get_closest_point_to_segment_uncapped</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> point, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> s1, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> s2 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-get-closest-points-between-segments"><inline classes="std std-ref">get_closest_points_between_segments</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> p1, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> p2, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> q1, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> q2 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-get-triangle-barycentric-coords"><inline classes="std std-ref">get_triangle_barycentric_coords</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> point, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> a, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> b, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> c <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-ray-intersects-triangle"><inline classes="std std-ref">ray_intersects_triangle</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> dir, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> a, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> b, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> c <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-segment-intersects-convex"><inline classes="std std-ref">segment_intersects_convex</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to, <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane[]</inline></reference> planes <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-segment-intersects-cylinder"><inline classes="std std-ref">segment_intersects_cylinder</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> height, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> radius <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-segment-intersects-sphere"><inline classes="std std-ref">segment_intersects_sphere</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> sphere_position, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> sphere_radius <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry3d-method-segment-intersects-triangle"><inline classes="std std-ref">segment_intersects_triangle</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> a, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> b, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> c <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-geometry3d-method-build-box-planes"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-build-box-planes" names="class_geometry3d_method_build_box_planes"><reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane[]</inline></reference> <strong>build_box_planes</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> extents <strong>)</strong></paragraph>
            <paragraph>返回一个包含 6 个 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> 的数组，这些 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> 描述以原点为中心的盒子的边。盒子大小由 <literal>extents</literal> 定义，它代表盒子的一个（正）角（即实际大小的一半）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-build-capsule-planes"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-build-capsule-planes" names="class_geometry3d_method_build_capsule_planes"><reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane[]</inline></reference> <strong>build_capsule_planes</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> radius, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> height, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> sides, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> lats, Vector3.Axis axis=2 <strong>)</strong></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> 的数组，这些 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> 紧密围绕着以原点为中心的多面胶囊，该胶囊半径为 <literal>radius</literal>、高度为 <literal>height</literal>。参数 <literal>sides</literal> 定义了将为胶囊的侧面部分生成多少个平面，而 <literal>lats</literal> 给出了胶囊底部和顶部的纬向步数。参数 <literal>axis</literal> 描述了胶囊的方向轴（0 代表 X，1 代表 Y，2 代表 Z）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-build-cylinder-planes"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-build-cylinder-planes" names="class_geometry3d_method_build_cylinder_planes"><reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane[]</inline></reference> <strong>build_cylinder_planes</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> radius, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> height, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> sides, Vector3.Axis axis=2 <strong>)</strong></paragraph>
            <paragraph>返回一组 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>，这些 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> 紧密围绕着以原点为中心的多面圆柱体，该圆柱体半径为 <literal>radius</literal>、高度为 <literal>height</literal> 。参数 <literal>sides</literal> 定义了将为圆柱体的圆形部分生成多少个平面。参数 <literal>axis</literal> 描述了圆柱体的方向轴（0 代表 X，1 代表 Y，2 代表 Z）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-clip-polygon"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-clip-polygon" names="class_geometry3d_method_clip_polygon"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>clip_polygon</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> points, <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> plane <strong>)</strong></paragraph>
            <paragraph>将 <literal>points</literal> 中的点所定义的多边形，裁剪该 <literal>plane</literal> 并返回该裁剪后的多边形的点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-compute-convex-mesh-points"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-compute-convex-mesh-points" names="class_geometry3d_method_compute_convex_mesh_points"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>compute_convex_mesh_points</strong> <strong>(</strong> <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane[]</inline></reference> planes <strong>)</strong></paragraph>
            <paragraph>计算并返回由一组 <literal>planes</literal> 定义的凸形状的所有顶点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-get-closest-point-to-segment"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-get-closest-point-to-segment" names="class_geometry3d_method_get_closest_point_to_segment"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_closest_point_to_segment</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> point, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> s1, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> s2 <strong>)</strong></paragraph>
            <paragraph>返回 3D 线段 (<literal>s1</literal>, <literal>s2</literal>) 上与 <literal>point</literal> 最近的 3D 点。返回的点始终在指定的线段内部。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-get-closest-point-to-segment-uncapped"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-get-closest-point-to-segment-uncapped" names="class_geometry3d_method_get_closest_point_to_segment_uncapped"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_closest_point_to_segment_uncapped</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> point, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> s1, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> s2 <strong>)</strong></paragraph>
            <paragraph>返回直线上与 <literal>point</literal> 最近的 3D 点，该直线由 (<literal>s1</literal>, <literal>s2</literal>) 定义。返回的点可能在线段 (<literal>s1</literal>, <literal>s2</literal>) 上，也可能不在，即位于线段的延长线上。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-get-closest-points-between-segments"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-get-closest-points-between-segments" names="class_geometry3d_method_get_closest_points_between_segments"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>get_closest_points_between_segments</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> p1, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> p2, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> q1, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> q2 <strong>)</strong></paragraph>
            <paragraph>给定两个 3D 线段 (<literal>p1</literal>, <literal>p2</literal>) 和 (<literal>q1</literal>, <literal>q2</literal>)，找出这两个线段见距离最近的两个点。返回 <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>，包含 (<literal>p1</literal>, <literal>q1</literal>) 和 (<literal>p2</literal>, <literal>q2</literal>) 上的点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-get-triangle-barycentric-coords"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-get-triangle-barycentric-coords" names="class_geometry3d_method_get_triangle_barycentric_coords"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_triangle_barycentric_coords</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> point, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> a, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> b, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> c <strong>)</strong></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>，其中包含基于 3D 位置（<literal>point</literal>）与三角形不同顶点（<literal>a</literal>、<literal>b</literal> 和 <literal>c</literal>）的接近程度的权重。这对于在三角形中不同顶点的数据之间进行插值非常有用。一个示例用例是使用它在网格上平滑旋转，而不是仅仅依赖于面法线。</paragraph>
            <paragraph><reference name="这里是重心坐标的更详细解释。" refuri="https://en.wikipedia.org/wiki/Barycentric_coordinate_system">这里是重心坐标的更详细解释。</reference></paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-ray-intersects-triangle"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-ray-intersects-triangle" names="class_geometry3d_method_ray_intersects_triangle"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>ray_intersects_triangle</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> dir, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> a, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> b, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> c <strong>)</strong></paragraph>
            <paragraph>测试起始于 <literal>from</literal>、方向为 <literal>dir</literal> 的 3D 射线是否与 <literal>a</literal>、<literal>b</literal>、<literal>c</literal> 构成的三角形相交。如果相交则返回交点 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>。如果不相交则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-segment-intersects-convex"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-segment-intersects-convex" names="class_geometry3d_method_segment_intersects_convex"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>segment_intersects_convex</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to, <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane[]</inline></reference> planes <strong>)</strong></paragraph>
            <paragraph>给定一个通过数组 <literal>planes</literal> 中的 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> 定义的凸面体，测试线段（<literal>from</literal>，<literal>to</literal>）是否与该面体相交。如果找到交点，则返回一个 <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>，其中包含交点和凸面体的法线。否则，返回一个空数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-segment-intersects-cylinder"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-segment-intersects-cylinder" names="class_geometry3d_method_segment_intersects_cylinder"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>segment_intersects_cylinder</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> height, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> radius <strong>)</strong></paragraph>
            <paragraph>检查线段（<literal>from</literal>，<literal>to</literal>）是否与以原点为中心且高度为 <literal>height</literal>、半径为 <literal>radius</literal> 的圆柱相交。如果不相交，则返回一个空的 <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>。如果相交，则返回的数组包含交点和圆柱体在交点处的法线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-segment-intersects-sphere"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-segment-intersects-sphere" names="class_geometry3d_method_segment_intersects_sphere"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>segment_intersects_sphere</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> sphere_position, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> sphere_radius <strong>)</strong></paragraph>
            <paragraph>检查线段（<literal>from</literal>，<literal>to</literal>）是否与球心位于 <literal>sphere_position</literal> 且半径为 <literal>sphere_radius</literal> 的球体相交。如果不相交，则返回一个空的 <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>。如果相交，则返回一个 <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>，其中包含交点和球体在交点处的法线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry3d-method-segment-intersects-triangle"></target>
            <paragraph classes="classref-method" ids="class-geometry3d-method-segment-intersects-triangle" names="class_geometry3d_method_segment_intersects_triangle"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>segment_intersects_triangle</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> a, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> b, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> c <strong>)</strong></paragraph>
            <paragraph>测试线段（<literal>from</literal>，<literal>to</literal>）是否与三角形 <literal>a</literal>、<literal>b</literal>、<literal>c</literal> 相交。如果相交，则将交点作为 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 返回。如果不相交，则返回 <literal>null</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
