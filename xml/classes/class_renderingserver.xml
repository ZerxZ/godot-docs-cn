<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_renderingserver.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/RenderingServer.xml.</comment>
    <target refid="class-renderingserver"></target>
    <section ids="renderingserver class-renderingserver" names="renderingserver class_renderingserver">
        <title>RenderingServer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>任何可见的东西的服务器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>渲染服务器是所有可见内容的 API 后端。整个场景系统都挂载在它上面来显示。渲染服务器是完全不透明的：内部实现完全取决于具体的实现，无法进行访问。</paragraph>
            <paragraph>使用渲染服务器可以完全绕过场景和 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 系统。如果场景系统是瓶颈所在，那么这样做就可以提升性能，否则无法提升性能（例如已经完全利用 GPU 的情况）。</paragraph>
            <paragraph>资源是使用 <literal>*_create</literal> 函数创建的。这些函数返回的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 并不是对对象本身的引用，而是指向这些对象的不透明<emphasis>指针</emphasis>。</paragraph>
            <paragraph>所有对象都会被绘制到视口中。你可以使用附加到 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 的 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference>，或者也可以使用 <reference internal="True" refid="class-renderingserver-method-viewport-create"><inline classes="std std-ref">viewport_create</inline></reference> 自行创建。使用自定义场景或画布时，需要使用 <reference internal="True" refid="class-renderingserver-method-viewport-set-scenario"><inline classes="std std-ref">viewport_set_scenario</inline></reference> 或 <reference internal="True" refid="class-renderingserver-method-viewport-attach-canvas"><inline classes="std std-ref">viewport_attach_canvas</inline></reference> 将场景或画布附加到视口。</paragraph>
            <paragraph><strong>场景：</strong>在 3D 中，所有可视对象都必须与一个场景（Scenario）相关联。场景是世界的可视化表示。如果要从正在运行的游戏中访问渲染服务器，那么就可以使用 <reference internal="True" refuri="class_node3d#class-node3d-method-get-world-3d"><inline classes="std std-ref">Node3D.get_world_3d</inline></reference> 从任何 <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 节点的场景树访问该场景。此外，也可以使用 <reference internal="True" refid="class-renderingserver-method-scenario-create"><inline classes="std std-ref">scenario_create</inline></reference> 创建场景。</paragraph>
            <paragraph>在 2D 中也是类似的，需要一个画布（Canvas）来绘制所有的画布项。</paragraph>
            <paragraph><strong>3D：</strong>在 3D 中，所有可视对象都由资源（Resource）和实例（Instance）组成。资源可以是网格、粒子系统、灯光或任何其他 3D 对象。为了使资源可见，必须使用 <reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">instance_set_base</inline></reference> 将其附加到一个实例。该实例还必须使用 <reference internal="True" refid="class-renderingserver-method-instance-set-scenario"><inline classes="std std-ref">instance_set_scenario</inline></reference> 附加到场景中才可见。不带前缀的 RenderingServer 方法通常都是针对 3D 的（但也有例外）。</paragraph>
            <paragraph><strong>2D：</strong>在 2D 中，所有可见对象都是某种形式的画布项（Canvas Item）。为了使画布项可见，就需要让它成为附加到视口的画布的子项，或者需要让它成为其他画布项的子项，但这些画布项最终也需要是画布的子项。针对 2D 的 RenderingServer 方法一般都以 <literal>canvas_*</literal> 开头。</paragraph>
            <paragraph><strong>无头模式：</strong>使用 <literal>--headless</literal> <reference internal="True" refuri="../tutorials/editor/command_line_tutorial"><inline classes="doc">命令行参数</inline></reference>启动引擎将禁用所有渲染和窗口管理功能。在这种情况下，<strong>RenderingServer</strong> 中的大多数函数将返回虚设值。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/performance/using_servers"><inline classes="doc">使用服务器进行优化</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="80"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-property-render-loop-enabled"><inline classes="std std-ref">render_loop_enabled</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="82"></colspec>
                    <colspec colwidth="681"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-bake-render-uv2"><inline classes="std std-ref">bake_render_uv2</inline></reference>(base: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material_overrides: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>], image_size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-call-on-render-thread"><inline classes="std std-ref">call_on_render_thread</inline></reference>(callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-attributes-create"><inline classes="std std-ref">camera_attributes_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-attributes-set-auto-exposure"><inline classes="std std-ref">camera_attributes_set_auto_exposure</inline></reference>(camera_attributes: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, min_sensitivity: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max_sensitivity: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, speed: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-attributes-set-dof-blur"><inline classes="std std-ref">camera_attributes_set_dof_blur</inline></reference>(camera_attributes: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, far_enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, far_distance: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, far_transition: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, near_enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, near_distance: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, near_transition: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-attributes-set-dof-blur-bokeh-shape"><inline classes="std std-ref">camera_attributes_set_dof_blur_bokeh_shape</inline></reference>(shape: <reference internal="True" refid="enum-renderingserver-dofbokehshape"><inline classes="std std-ref">DOFBokehShape</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-attributes-set-dof-blur-quality"><inline classes="std std-ref">camera_attributes_set_dof_blur_quality</inline></reference>(quality: <reference internal="True" refid="enum-renderingserver-dofblurquality"><inline classes="std std-ref">DOFBlurQuality</inline></reference>, use_jitter: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-attributes-set-exposure"><inline classes="std std-ref">camera_attributes_set_exposure</inline></reference>(camera_attributes: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, multiplier: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, normalization: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-create"><inline classes="std std-ref">camera_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-set-camera-attributes"><inline classes="std std-ref">camera_set_camera_attributes</inline></reference>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, effects: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-set-compositor"><inline classes="std std-ref">camera_set_compositor</inline></reference>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, compositor: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-set-cull-mask"><inline classes="std std-ref">camera_set_cull_mask</inline></reference>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, layers: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-set-environment"><inline classes="std std-ref">camera_set_environment</inline></reference>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-set-frustum"><inline classes="std std-ref">camera_set_frustum</inline></reference>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-set-orthogonal"><inline classes="std std-ref">camera_set_orthogonal</inline></reference>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-set-perspective"><inline classes="std std-ref">camera_set_perspective</inline></reference>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fovy_degrees: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-set-transform"><inline classes="std std-ref">camera_set_transform</inline></reference>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-camera-set-use-vertical-aspect"><inline classes="std std-ref">camera_set_use_vertical_aspect</inline></reference>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-create"><inline classes="std std-ref">canvas_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-animation-slice"><inline classes="std std-ref">canvas_item_add_animation_slice</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, animation_length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, slice_begin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, slice_end: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-circle"><inline classes="std std-ref">canvas_item_add_circle</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, radius: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-clip-ignore"><inline classes="std std-ref">canvas_item_add_clip_ignore</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, ignore: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-lcd-texture-rect-region"><inline classes="std std-ref">canvas_item_add_lcd_texture_rect_region</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-line"><inline classes="std std-ref">canvas_item_add_line</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, from: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, to: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-mesh"><inline classes="std std-ref">canvas_item_add_mesh</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> = Transform2D(1, 0, 0, 1, 0, 0), modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID())</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-msdf-texture-rect-region"><inline classes="std std-ref">canvas_item_add_msdf_texture_rect_region</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, px_range: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-multiline"><inline classes="std std-ref">canvas_item_add_multiline</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-multimesh"><inline classes="std std-ref">canvas_item_add_multimesh</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID())</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-nine-patch"><inline classes="std std-ref">canvas_item_add_nine_patch</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, source: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, topleft: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, bottomright: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, x_axis_mode: <reference internal="True" refid="enum-renderingserver-ninepatchaxismode"><inline classes="std std-ref">NinePatchAxisMode</inline></reference> = 0, y_axis_mode: <reference internal="True" refid="enum-renderingserver-ninepatchaxismode"><inline classes="std std-ref">NinePatchAxisMode</inline></reference> = 0, draw_center: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-particles"><inline classes="std std-ref">canvas_item_add_particles</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-polygon"><inline classes="std std-ref">canvas_item_add_polygon</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> = PackedVector2Array(), texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID())</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-polyline"><inline classes="std std-ref">canvas_item_add_polyline</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-primitive"><inline classes="std std-ref">canvas_item_add_primitive</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-rect"><inline classes="std std-ref">canvas_item_add_rect</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-set-transform"><inline classes="std std-ref">canvas_item_add_set_transform</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-texture-rect"><inline classes="std std-ref">canvas_item_add_texture_rect</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, tile: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-texture-rect-region"><inline classes="std std-ref">canvas_item_add_texture_rect_region</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, clip_uv: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-add-triangle-array"><inline classes="std std-ref">canvas_item_add_triangle_array</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, indices: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>, points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> = PackedVector2Array(), bones: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> = PackedInt32Array(), weights: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> = PackedFloat32Array(), texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID(), count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-clear"><inline classes="std std-ref">canvas_item_clear</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-create"><inline classes="std std-ref">canvas_item_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-reset-physics-interpolation"><inline classes="std std-ref">canvas_item_reset_physics_interpolation</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-canvas-group-mode"><inline classes="std std-ref">canvas_item_set_canvas_group_mode</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-canvasgroupmode"><inline classes="std std-ref">CanvasGroupMode</inline></reference>, clear_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 5.0, fit_empty: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, fit_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, blur_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-clip"><inline classes="std std-ref">canvas_item_set_clip</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, clip: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-copy-to-backbuffer"><inline classes="std std-ref">canvas_item_set_copy_to_backbuffer</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-custom-rect"><inline classes="std std-ref">canvas_item_set_custom_rect</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, use_custom_rect: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> = Rect2(0, 0, 0, 0))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-default-texture-filter"><inline classes="std std-ref">canvas_item_set_default_texture_filter</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, filter: <reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-default-texture-repeat"><inline classes="std std-ref">canvas_item_set_default_texture_repeat</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, repeat: <reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-distance-field-mode"><inline classes="std std-ref">canvas_item_set_distance_field_mode</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-draw-behind-parent"><inline classes="std std-ref">canvas_item_set_draw_behind_parent</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-draw-index"><inline classes="std std-ref">canvas_item_set_draw_index</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-interpolated"><inline classes="std std-ref">canvas_item_set_interpolated</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, interpolated: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-light-mask"><inline classes="std std-ref">canvas_item_set_light_mask</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-material"><inline classes="std std-ref">canvas_item_set_material</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-modulate"><inline classes="std std-ref">canvas_item_set_modulate</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-parent"><inline classes="std std-ref">canvas_item_set_parent</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parent: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-self-modulate"><inline classes="std std-ref">canvas_item_set_self_modulate</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-sort-children-by-y"><inline classes="std std-ref">canvas_item_set_sort_children_by_y</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-transform"><inline classes="std std-ref">canvas_item_set_transform</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-use-parent-material"><inline classes="std std-ref">canvas_item_set_use_parent_material</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-visibility-layer"><inline classes="std std-ref">canvas_item_set_visibility_layer</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, visibility_layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-visibility-notifier"><inline classes="std std-ref">canvas_item_set_visibility_notifier</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, area: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, enter_callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, exit_callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-visible"><inline classes="std std-ref">canvas_item_set_visible</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, visible: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-z-as-relative-to-parent"><inline classes="std std-ref">canvas_item_set_z_as_relative_to_parent</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-set-z-index"><inline classes="std std-ref">canvas_item_set_z_index</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, z_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-item-transform-physics-interpolation"><inline classes="std std-ref">canvas_item_transform_physics_interpolation</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-attach-to-canvas"><inline classes="std std-ref">canvas_light_attach_to_canvas</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-create"><inline classes="std std-ref">canvas_light_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-attach-to-canvas"><inline classes="std std-ref">canvas_light_occluder_attach_to_canvas</inline></reference>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-create"><inline classes="std std-ref">canvas_light_occluder_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-reset-physics-interpolation"><inline classes="std std-ref">canvas_light_occluder_reset_physics_interpolation</inline></reference>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-set-as-sdf-collision"><inline classes="std std-ref">canvas_light_occluder_set_as_sdf_collision</inline></reference>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-set-enabled"><inline classes="std std-ref">canvas_light_occluder_set_enabled</inline></reference>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-set-interpolated"><inline classes="std std-ref">canvas_light_occluder_set_interpolated</inline></reference>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, interpolated: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-set-light-mask"><inline classes="std std-ref">canvas_light_occluder_set_light_mask</inline></reference>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-set-polygon"><inline classes="std std-ref">canvas_light_occluder_set_polygon</inline></reference>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, polygon: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-set-transform"><inline classes="std std-ref">canvas_light_occluder_set_transform</inline></reference>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-transform-physics-interpolation"><inline classes="std std-ref">canvas_light_occluder_transform_physics_interpolation</inline></reference>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-reset-physics-interpolation"><inline classes="std std-ref">canvas_light_reset_physics_interpolation</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-blend-mode"><inline classes="std std-ref">canvas_light_set_blend_mode</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-canvaslightblendmode"><inline classes="std std-ref">CanvasLightBlendMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-color"><inline classes="std std-ref">canvas_light_set_color</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-enabled"><inline classes="std std-ref">canvas_light_set_enabled</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-energy"><inline classes="std std-ref">canvas_light_set_energy</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-height"><inline classes="std std-ref">canvas_light_set_height</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, height: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-interpolated"><inline classes="std std-ref">canvas_light_set_interpolated</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, interpolated: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-item-cull-mask"><inline classes="std std-ref">canvas_light_set_item_cull_mask</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-item-shadow-cull-mask"><inline classes="std std-ref">canvas_light_set_item_shadow_cull_mask</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-layer-range"><inline classes="std std-ref">canvas_light_set_layer_range</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, min_layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max_layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-mode"><inline classes="std std-ref">canvas_light_set_mode</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-canvaslightmode"><inline classes="std std-ref">CanvasLightMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-shadow-color"><inline classes="std std-ref">canvas_light_set_shadow_color</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-shadow-enabled"><inline classes="std std-ref">canvas_light_set_shadow_enabled</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-shadow-filter"><inline classes="std std-ref">canvas_light_set_shadow_filter</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, filter: <reference internal="True" refid="enum-renderingserver-canvaslightshadowfilter"><inline classes="std std-ref">CanvasLightShadowFilter</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-shadow-smooth"><inline classes="std std-ref">canvas_light_set_shadow_smooth</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, smooth: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-texture"><inline classes="std std-ref">canvas_light_set_texture</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-texture-offset"><inline classes="std std-ref">canvas_light_set_texture_offset</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-texture-scale"><inline classes="std std-ref">canvas_light_set_texture_scale</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-transform"><inline classes="std std-ref">canvas_light_set_transform</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-set-z-range"><inline classes="std std-ref">canvas_light_set_z_range</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, min_z: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max_z: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-light-transform-physics-interpolation"><inline classes="std std-ref">canvas_light_transform_physics_interpolation</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-occluder-polygon-create"><inline classes="std std-ref">canvas_occluder_polygon_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-occluder-polygon-set-cull-mode"><inline classes="std std-ref">canvas_occluder_polygon_set_cull_mode</inline></reference>(occluder_polygon: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-canvasoccluderpolygoncullmode"><inline classes="std std-ref">CanvasOccluderPolygonCullMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-occluder-polygon-set-shape"><inline classes="std std-ref">canvas_occluder_polygon_set_shape</inline></reference>(occluder_polygon: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, shape: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, closed: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-set-disable-scale"><inline classes="std std-ref">canvas_set_disable_scale</inline></reference>(disable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-set-item-mirroring"><inline classes="std std-ref">canvas_set_item_mirroring</inline></reference>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mirroring: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-set-item-repeat"><inline classes="std std-ref">canvas_set_item_repeat</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, repeat_size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, repeat_times: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-set-modulate"><inline classes="std std-ref">canvas_set_modulate</inline></reference>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-set-shadow-texture-size"><inline classes="std std-ref">canvas_set_shadow_texture_size</inline></reference>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-texture-create"><inline classes="std std-ref">canvas_texture_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-texture-set-channel"><inline classes="std std-ref">canvas_texture_set_channel</inline></reference>(canvas_texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, channel: <reference internal="True" refid="enum-renderingserver-canvastexturechannel"><inline classes="std std-ref">CanvasTextureChannel</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-texture-set-shading-parameters"><inline classes="std std-ref">canvas_texture_set_shading_parameters</inline></reference>(canvas_texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, base_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, shininess: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-texture-set-texture-filter"><inline classes="std std-ref">canvas_texture_set_texture_filter</inline></reference>(canvas_texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, filter: <reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-canvas-texture-set-texture-repeat"><inline classes="std std-ref">canvas_texture_set_texture_repeat</inline></reference>(canvas_texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, repeat: <reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-compositor-create"><inline classes="std std-ref">compositor_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-compositor-effect-create"><inline classes="std std-ref">compositor_effect_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-compositor-effect-set-callback"><inline classes="std std-ref">compositor_effect_set_callback</inline></reference>(effect: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, callback_type: <reference internal="True" refid="enum-renderingserver-compositoreffectcallbacktype"><inline classes="std std-ref">CompositorEffectCallbackType</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-compositor-effect-set-enabled"><inline classes="std std-ref">compositor_effect_set_enabled</inline></reference>(effect: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-compositor-effect-set-flag"><inline classes="std std-ref">compositor_effect_set_flag</inline></reference>(effect: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, flag: <reference internal="True" refid="enum-renderingserver-compositoreffectflags"><inline classes="std std-ref">CompositorEffectFlags</inline></reference>, set: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-compositor-set-compositor-effects"><inline classes="std std-ref">compositor_set_compositor_effects</inline></reference>(compositor: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, effects: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-create-local-rendering-device"><inline classes="std std-ref">create_local_rendering_device</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-debug-canvas-item-get-rect"><inline classes="std std-ref">debug_canvas_item_get_rect</inline></reference>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-decal-create"><inline classes="std std-ref">decal_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-decal-set-albedo-mix"><inline classes="std std-ref">decal_set_albedo_mix</inline></reference>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, albedo_mix: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-decal-set-cull-mask"><inline classes="std std-ref">decal_set_cull_mask</inline></reference>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-decal-set-distance-fade"><inline classes="std std-ref">decal_set_distance_fade</inline></reference>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, begin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-decal-set-emission-energy"><inline classes="std std-ref">decal_set_emission_energy</inline></reference>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-decal-set-fade"><inline classes="std std-ref">decal_set_fade</inline></reference>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, above: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, below: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-decal-set-modulate"><inline classes="std std-ref">decal_set_modulate</inline></reference>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-decal-set-normal-fade"><inline classes="std std-ref">decal_set_normal_fade</inline></reference>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fade: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-decal-set-size"><inline classes="std std-ref">decal_set_size</inline></reference>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-decal-set-texture"><inline classes="std std-ref">decal_set_texture</inline></reference>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, type: <reference internal="True" refid="enum-renderingserver-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-decals-set-filter"><inline classes="std std-ref">decals_set_filter</inline></reference>(filter: <reference internal="True" refid="enum-renderingserver-decalfilter"><inline classes="std std-ref">DecalFilter</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-directional-light-create"><inline classes="std std-ref">directional_light_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-directional-shadow-atlas-set-size"><inline classes="std std-ref">directional_shadow_atlas_set_size</inline></reference>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, is_16bits: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-directional-soft-shadow-filter-set-quality"><inline classes="std std-ref">directional_soft_shadow_filter_set_quality</inline></reference>(quality: <reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">ShadowQuality</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-bake-panorama"><inline classes="std std-ref">environment_bake_panorama</inline></reference>(environment: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bake_irradiance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-create"><inline classes="std std-ref">environment_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-glow-set-use-bicubic-upscale"><inline classes="std std-ref">environment_glow_set_use_bicubic_upscale</inline></reference>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-adjustment"><inline classes="std std-ref">environment_set_adjustment</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, brightness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, contrast: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, saturation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, use_1d_color_correction: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, color_correction: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-ambient-light"><inline classes="std std-ref">environment_set_ambient_light</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, ambient: <reference internal="True" refid="enum-renderingserver-environmentambientsource"><inline classes="std std-ref">EnvironmentAmbientSource</inline></reference> = 0, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, sky_contibution: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, reflection_source: <reference internal="True" refid="enum-renderingserver-environmentreflectionsource"><inline classes="std std-ref">EnvironmentReflectionSource</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-background"><inline classes="std std-ref">environment_set_background</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bg: <reference internal="True" refid="enum-renderingserver-environmentbg"><inline classes="std std-ref">EnvironmentBG</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-bg-color"><inline classes="std std-ref">environment_set_bg_color</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-bg-energy"><inline classes="std std-ref">environment_set_bg_energy</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, multiplier: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, exposure_value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-canvas-max-layer"><inline classes="std std-ref">environment_set_canvas_max_layer</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, max_layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-fog"><inline classes="std std-ref">environment_set_fog</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, light_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, light_energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, sun_scatter: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, density: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, height: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, height_density: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, aerial_perspective: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, sky_affect: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, fog_mode: <reference internal="True" refid="enum-renderingserver-environmentfogmode"><inline classes="std std-ref">EnvironmentFogMode</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-glow"><inline classes="std std-ref">environment_set_glow</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, levels: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>, intensity: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, mix: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, bloom_threshold: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, blend_mode: <reference internal="True" refid="enum-renderingserver-environmentglowblendmode"><inline classes="std std-ref">EnvironmentGlowBlendMode</inline></reference>, hdr_bleed_threshold: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, hdr_bleed_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, hdr_luminance_cap: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, glow_map_strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, glow_map: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-sdfgi"><inline classes="std std-ref">environment_set_sdfgi</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, cascades: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, min_cell_size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y_scale: <reference internal="True" refid="enum-renderingserver-environmentsdfgiyscale"><inline classes="std std-ref">EnvironmentSDFGIYScale</inline></reference>, use_occlusion: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, bounce_feedback: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, read_sky: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, normal_bias: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, probe_bias: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-sdfgi-frames-to-converge"><inline classes="std std-ref">environment_set_sdfgi_frames_to_converge</inline></reference>(frames: <reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoconverge"><inline classes="std std-ref">EnvironmentSDFGIFramesToConverge</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-sdfgi-frames-to-update-light"><inline classes="std std-ref">environment_set_sdfgi_frames_to_update_light</inline></reference>(frames: <reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoupdatelight"><inline classes="std std-ref">EnvironmentSDFGIFramesToUpdateLight</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-sdfgi-ray-count"><inline classes="std std-ref">environment_set_sdfgi_ray_count</inline></reference>(ray_count: <reference internal="True" refid="enum-renderingserver-environmentsdfgiraycount"><inline classes="std std-ref">EnvironmentSDFGIRayCount</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-sky"><inline classes="std std-ref">environment_set_sky</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, sky: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-sky-custom-fov"><inline classes="std std-ref">environment_set_sky_custom_fov</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-sky-orientation"><inline classes="std std-ref">environment_set_sky_orientation</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, orientation: <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-ssao"><inline classes="std std-ref">environment_set_ssao</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, radius: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, intensity: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, power: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, detail: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, horizon: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, sharpness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, light_affect: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, ao_channel_affect: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-ssao-quality"><inline classes="std std-ref">environment_set_ssao_quality</inline></reference>(quality: <reference internal="True" refid="enum-renderingserver-environmentssaoquality"><inline classes="std std-ref">EnvironmentSSAOQuality</inline></reference>, half_size: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, adaptive_target: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, blur_passes: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, fadeout_from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, fadeout_to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-ssil-quality"><inline classes="std std-ref">environment_set_ssil_quality</inline></reference>(quality: <reference internal="True" refid="enum-renderingserver-environmentssilquality"><inline classes="std std-ref">EnvironmentSSILQuality</inline></reference>, half_size: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, adaptive_target: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, blur_passes: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, fadeout_from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, fadeout_to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-ssr"><inline classes="std std-ref">environment_set_ssr</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, max_steps: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, fade_in: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, fade_out: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, depth_tolerance: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-ssr-roughness-quality"><inline classes="std std-ref">environment_set_ssr_roughness_quality</inline></reference>(quality: <reference internal="True" refid="enum-renderingserver-environmentssrroughnessquality"><inline classes="std std-ref">EnvironmentSSRRoughnessQuality</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-tonemap"><inline classes="std std-ref">environment_set_tonemap</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, tone_mapper: <reference internal="True" refid="enum-renderingserver-environmenttonemapper"><inline classes="std std-ref">EnvironmentToneMapper</inline></reference>, exposure: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, white: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-volumetric-fog"><inline classes="std std-ref">environment_set_volumetric_fog</inline></reference>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, density: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, albedo: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, emission: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, emission_energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, anisotropy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, p_detail_spread: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, gi_inject: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, temporal_reprojection: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, temporal_reprojection_amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, ambient_inject: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, sky_affect: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-volumetric-fog-filter-active"><inline classes="std std-ref">environment_set_volumetric_fog_filter_active</inline></reference>(active: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-environment-set-volumetric-fog-volume-size"><inline classes="std std-ref">environment_set_volumetric_fog_volume_size</inline></reference>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, depth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-fog-volume-create"><inline classes="std std-ref">fog_volume_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-fog-volume-set-material"><inline classes="std std-ref">fog_volume_set_material</inline></reference>(fog_volume: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-fog-volume-set-shape"><inline classes="std std-ref">fog_volume_set_shape</inline></reference>(fog_volume: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, shape: <reference internal="True" refid="enum-renderingserver-fogvolumeshape"><inline classes="std std-ref">FogVolumeShape</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-fog-volume-set-size"><inline classes="std std-ref">fog_volume_set_size</inline></reference>(fog_volume: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-force-draw"><inline classes="std std-ref">force_draw</inline></reference>(swap_buffers: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, frame_step: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-force-sync"><inline classes="std std-ref">force_sync</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-get-default-clear-color"><inline classes="std std-ref">get_default_clear_color</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-get-frame-setup-time-cpu"><inline classes="std std-ref">get_frame_setup_time_cpu</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-get-rendering-device"><inline classes="std std-ref">get_rendering_device</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-get-rendering-info"><inline classes="std std-ref">get_rendering_info</inline></reference>(info: <reference internal="True" refid="enum-renderingserver-renderinginfo"><inline classes="std std-ref">RenderingInfo</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-get-shader-parameter-list"><inline classes="std std-ref">get_shader_parameter_list</inline></reference>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-get-test-cube"><inline classes="std std-ref">get_test_cube</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-get-test-texture"><inline classes="std std-ref">get_test_texture</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-get-video-adapter-api-version"><inline classes="std std-ref">get_video_adapter_api_version</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-get-video-adapter-name"><inline classes="std std-ref">get_video_adapter_name</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-devicetype"><inline classes="std std-ref">DeviceType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-get-video-adapter-type"><inline classes="std std-ref">get_video_adapter_type</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-get-video-adapter-vendor"><inline classes="std std-ref">get_video_adapter_vendor</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-get-white-texture"><inline classes="std std-ref">get_white_texture</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-gi-set-use-half-resolution"><inline classes="std std-ref">gi_set_use_half_resolution</inline></reference>(half_resolution: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-global-shader-parameter-add"><inline classes="std std-ref">global_shader_parameter_add</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, type: <reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference>, default_value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-global-shader-parameter-get"><inline classes="std std-ref">global_shader_parameter_get</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-global-shader-parameter-get-list"><inline classes="std std-ref">global_shader_parameter_get_list</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-global-shader-parameter-get-type"><inline classes="std std-ref">global_shader_parameter_get_type</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-global-shader-parameter-remove"><inline classes="std std-ref">global_shader_parameter_remove</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-global-shader-parameter-set"><inline classes="std std-ref">global_shader_parameter_set</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-global-shader-parameter-set-override"><inline classes="std std-ref">global_shader_parameter_set_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-has-changed"><inline classes="std std-ref">has_changed</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-has-feature"><inline classes="std std-ref">has_feature</inline></reference>(feature: <reference internal="True" refid="enum-renderingserver-features"><inline classes="std std-ref">Features</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-has-os-feature"><inline classes="std std-ref">has_os_feature</inline></reference>(feature: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-attach-object-instance-id"><inline classes="std std-ref">instance_attach_object_instance_id</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-attach-skeleton"><inline classes="std std-ref">instance_attach_skeleton</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-create"><inline classes="std std-ref">instance_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-create2"><inline classes="std std-ref">instance_create2</inline></reference>(base: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-geometry-get-shader-parameter"><inline classes="std std-ref">instance_geometry_get_shader_parameter</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parameter: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-geometry-get-shader-parameter-default-value"><inline classes="std std-ref">instance_geometry_get_shader_parameter_default_value</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parameter: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-geometry-get-shader-parameter-list"><inline classes="std std-ref">instance_geometry_get_shader_parameter_list</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-geometry-set-cast-shadows-setting"><inline classes="std std-ref">instance_geometry_set_cast_shadows_setting</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, shadow_casting_setting: <reference internal="True" refid="enum-renderingserver-shadowcastingsetting"><inline classes="std std-ref">ShadowCastingSetting</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-geometry-set-flag"><inline classes="std std-ref">instance_geometry_set_flag</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, flag: <reference internal="True" refid="enum-renderingserver-instanceflags"><inline classes="std std-ref">InstanceFlags</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-geometry-set-lightmap"><inline classes="std std-ref">instance_geometry_set_lightmap</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, lightmap_uv_scale: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, lightmap_slice: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-geometry-set-lod-bias"><inline classes="std std-ref">instance_geometry_set_lod_bias</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, lod_bias: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-geometry-set-material-overlay"><inline classes="std std-ref">instance_geometry_set_material_overlay</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-geometry-set-material-override"><inline classes="std std-ref">instance_geometry_set_material_override</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-geometry-set-shader-parameter"><inline classes="std std-ref">instance_geometry_set_shader_parameter</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parameter: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-geometry-set-transparency"><inline classes="std std-ref">instance_geometry_set_transparency</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transparency: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-geometry-set-visibility-range"><inline classes="std std-ref">instance_geometry_set_visibility_range</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, min_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, fade_mode: <reference internal="True" refid="enum-renderingserver-visibilityrangefademode"><inline classes="std std-ref">VisibilityRangeFadeMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">instance_set_base</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, base: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-set-blend-shape-weight"><inline classes="std std-ref">instance_set_blend_shape_weight</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, shape: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-set-custom-aabb"><inline classes="std std-ref">instance_set_custom_aabb</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-set-extra-visibility-margin"><inline classes="std std-ref">instance_set_extra_visibility_margin</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-set-ignore-culling"><inline classes="std std-ref">instance_set_ignore_culling</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-set-layer-mask"><inline classes="std std-ref">instance_set_layer_mask</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-set-pivot-data"><inline classes="std std-ref">instance_set_pivot_data</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, sorting_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, use_aabb_center: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-set-scenario"><inline classes="std std-ref">instance_set_scenario</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-set-surface-override-material"><inline classes="std std-ref">instance_set_surface_override_material</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-set-transform"><inline classes="std std-ref">instance_set_transform</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-set-visibility-parent"><inline classes="std std-ref">instance_set_visibility_parent</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parent: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instance-set-visible"><inline classes="std std-ref">instance_set_visible</inline></reference>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, visible: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instances-cull-aabb"><inline classes="std std-ref">instances_cull_aabb</inline></reference>(aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>, scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID()) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instances-cull-convex"><inline classes="std std-ref">instances_cull_convex</inline></reference>(convex: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>], scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID()) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-instances-cull-ray"><inline classes="std std-ref">instances_cull_ray</inline></reference>(from: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, to: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID()) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-is-on-render-thread"><inline classes="std std-ref">is_on_render_thread</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-directional-set-blend-splits"><inline classes="std std-ref">light_directional_set_blend_splits</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-directional-set-shadow-mode"><inline classes="std std-ref">light_directional_set_shadow_mode</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-lightdirectionalshadowmode"><inline classes="std std-ref">LightDirectionalShadowMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-directional-set-sky-mode"><inline classes="std std-ref">light_directional_set_sky_mode</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-lightdirectionalskymode"><inline classes="std std-ref">LightDirectionalSkyMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-omni-set-shadow-mode"><inline classes="std std-ref">light_omni_set_shadow_mode</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-lightomnishadowmode"><inline classes="std std-ref">LightOmniShadowMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-projectors-set-filter"><inline classes="std std-ref">light_projectors_set_filter</inline></reference>(filter: <reference internal="True" refid="enum-renderingserver-lightprojectorfilter"><inline classes="std std-ref">LightProjectorFilter</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-set-bake-mode"><inline classes="std std-ref">light_set_bake_mode</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bake_mode: <reference internal="True" refid="enum-renderingserver-lightbakemode"><inline classes="std std-ref">LightBakeMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-set-color"><inline classes="std std-ref">light_set_color</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-set-cull-mask"><inline classes="std std-ref">light_set_cull_mask</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-set-distance-fade"><inline classes="std std-ref">light_set_distance_fade</inline></reference>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, begin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, shadow: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-set-max-sdfgi-cascade"><inline classes="std std-ref">light_set_max_sdfgi_cascade</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, cascade: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-set-negative"><inline classes="std std-ref">light_set_negative</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-set-param"><inline classes="std std-ref">light_set_param</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, param: <reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-set-projector"><inline classes="std std-ref">light_set_projector</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-set-reverse-cull-face-mode"><inline classes="std std-ref">light_set_reverse_cull_face_mode</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-light-set-shadow"><inline classes="std std-ref">light_set_shadow</inline></reference>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-lightmap-create"><inline classes="std std-ref">lightmap_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-lightmap-get-probe-capture-bsp-tree"><inline classes="std std-ref">lightmap_get_probe_capture_bsp_tree</inline></reference>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-lightmap-get-probe-capture-points"><inline classes="std std-ref">lightmap_get_probe_capture_points</inline></reference>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-lightmap-get-probe-capture-sh"><inline classes="std std-ref">lightmap_get_probe_capture_sh</inline></reference>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-lightmap-get-probe-capture-tetrahedra"><inline classes="std std-ref">lightmap_get_probe_capture_tetrahedra</inline></reference>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-lightmap-set-baked-exposure-normalization"><inline classes="std std-ref">lightmap_set_baked_exposure_normalization</inline></reference>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, baked_exposure: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-lightmap-set-probe-bounds"><inline classes="std std-ref">lightmap_set_probe_bounds</inline></reference>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bounds: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-lightmap-set-probe-capture-data"><inline classes="std std-ref">lightmap_set_probe_capture_data</inline></reference>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, points: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>, point_sh: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, tetrahedra: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>, bsp_tree: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-lightmap-set-probe-capture-update-speed"><inline classes="std std-ref">lightmap_set_probe_capture_update_speed</inline></reference>(speed: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-lightmap-set-probe-interior"><inline classes="std std-ref">lightmap_set_probe_interior</inline></reference>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, interior: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-lightmap-set-textures"><inline classes="std std-ref">lightmap_set_textures</inline></reference>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, uses_sh: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-make-sphere-mesh"><inline classes="std std-ref">make_sphere_mesh</inline></reference>(latitudes: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, longitudes: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, radius: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-material-create"><inline classes="std std-ref">material_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-material-get-param"><inline classes="std std-ref">material_get_param</inline></reference>(material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parameter: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-material-set-next-pass"><inline classes="std std-ref">material_set_next_pass</inline></reference>(material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, next_material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-material-set-param"><inline classes="std std-ref">material_set_param</inline></reference>(material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parameter: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-material-set-render-priority"><inline classes="std std-ref">material_set_render_priority</inline></reference>(material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, priority: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-material-set-shader"><inline classes="std std-ref">material_set_shader</inline></reference>(shader_material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-add-surface"><inline classes="std std-ref">mesh_add_surface</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-add-surface-from-arrays"><inline classes="std std-ref">mesh_add_surface_from_arrays</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, primitive: <reference internal="True" refid="enum-renderingserver-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference>, arrays: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, blend_shapes: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = [], lods: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> = {}, compress_format: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>] = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-clear"><inline classes="std std-ref">mesh_clear</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-create"><inline classes="std std-ref">mesh_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-create-from-surfaces"><inline classes="std std-ref">mesh_create_from_surfaces</inline></reference>(surfaces: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>], blend_shape_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-get-blend-shape-count"><inline classes="std std-ref">mesh_get_blend_shape_count</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-renderingserver-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-get-blend-shape-mode"><inline classes="std std-ref">mesh_get_blend_shape_mode</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-get-custom-aabb"><inline classes="std std-ref">mesh_get_custom_aabb</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-get-surface"><inline classes="std std-ref">mesh_get_surface</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-get-surface-count"><inline classes="std std-ref">mesh_get_surface_count</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-set-blend-shape-mode"><inline classes="std std-ref">mesh_set_blend_shape_mode</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-set-custom-aabb"><inline classes="std std-ref">mesh_set_custom_aabb</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-set-shadow-mesh"><inline classes="std std-ref">mesh_set_shadow_mesh</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, shadow_mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-surface-get-arrays"><inline classes="std std-ref">mesh_surface_get_arrays</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-surface-get-blend-shape-arrays"><inline classes="std std-ref">mesh_surface_get_blend_shape_arrays</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-surface-get-format-attribute-stride"><inline classes="std std-ref">mesh_surface_get_format_attribute_stride</inline></reference>(format: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>], vertex_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-surface-get-format-normal-tangent-stride"><inline classes="std std-ref">mesh_surface_get_format_normal_tangent_stride</inline></reference>(format: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>], vertex_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-surface-get-format-offset"><inline classes="std std-ref">mesh_surface_get_format_offset</inline></reference>(format: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>], vertex_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, array_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-surface-get-format-skin-stride"><inline classes="std std-ref">mesh_surface_get_format_skin_stride</inline></reference>(format: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>], vertex_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-surface-get-format-vertex-stride"><inline classes="std std-ref">mesh_surface_get_format_vertex_stride</inline></reference>(format: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>], vertex_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-surface-get-material"><inline classes="std std-ref">mesh_surface_get_material</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-surface-set-material"><inline classes="std std-ref">mesh_surface_set_material</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-surface-update-attribute-region"><inline classes="std std-ref">mesh_surface_update_attribute_region</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-surface-update-skin-region"><inline classes="std std-ref">mesh_surface_update_skin_region</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-mesh-surface-update-vertex-region"><inline classes="std std-ref">mesh_surface_update_vertex_region</inline></reference>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-allocate-data"><inline classes="std std-ref">multimesh_allocate_data</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, instances: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform_format: <reference internal="True" refid="enum-renderingserver-multimeshtransformformat"><inline classes="std std-ref">MultimeshTransformFormat</inline></reference>, color_format: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, custom_data_format: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-create"><inline classes="std std-ref">multimesh_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-get-aabb"><inline classes="std std-ref">multimesh_get_aabb</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-get-buffer"><inline classes="std std-ref">multimesh_get_buffer</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-get-custom-aabb"><inline classes="std std-ref">multimesh_get_custom_aabb</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-get-instance-count"><inline classes="std std-ref">multimesh_get_instance_count</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-get-mesh"><inline classes="std std-ref">multimesh_get_mesh</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-get-visible-instances"><inline classes="std std-ref">multimesh_get_visible_instances</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-instance-get-color"><inline classes="std std-ref">multimesh_instance_get_color</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-instance-get-custom-data"><inline classes="std std-ref">multimesh_instance_get_custom_data</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-instance-get-transform"><inline classes="std std-ref">multimesh_instance_get_transform</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-instance-get-transform-2d"><inline classes="std std-ref">multimesh_instance_get_transform_2d</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-instance-set-color"><inline classes="std std-ref">multimesh_instance_set_color</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-instance-set-custom-data"><inline classes="std std-ref">multimesh_instance_set_custom_data</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, custom_data: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-instance-set-transform"><inline classes="std std-ref">multimesh_instance_set_transform</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-instance-set-transform-2d"><inline classes="std std-ref">multimesh_instance_set_transform_2d</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-set-buffer"><inline classes="std std-ref">multimesh_set_buffer</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, buffer: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-set-custom-aabb"><inline classes="std std-ref">multimesh_set_custom_aabb</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-set-mesh"><inline classes="std std-ref">multimesh_set_mesh</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-multimesh-set-visible-instances"><inline classes="std std-ref">multimesh_set_visible_instances</inline></reference>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, visible: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-occluder-create"><inline classes="std std-ref">occluder_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-occluder-set-mesh"><inline classes="std std-ref">occluder_set_mesh</inline></reference>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, vertices: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>, indices: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-omni-light-create"><inline classes="std std-ref">omni_light_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-collision-create"><inline classes="std std-ref">particles_collision_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-collision-height-field-update"><inline classes="std std-ref">particles_collision_height_field_update</inline></reference>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-collision-set-attractor-attenuation"><inline classes="std std-ref">particles_collision_set_attractor_attenuation</inline></reference>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, curve: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-collision-set-attractor-directionality"><inline classes="std std-ref">particles_collision_set_attractor_directionality</inline></reference>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-collision-set-attractor-strength"><inline classes="std std-ref">particles_collision_set_attractor_strength</inline></reference>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-collision-set-box-extents"><inline classes="std std-ref">particles_collision_set_box_extents</inline></reference>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, extents: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-collision-set-collision-type"><inline classes="std std-ref">particles_collision_set_collision_type</inline></reference>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, type: <reference internal="True" refid="enum-renderingserver-particlescollisiontype"><inline classes="std std-ref">ParticlesCollisionType</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-collision-set-cull-mask"><inline classes="std std-ref">particles_collision_set_cull_mask</inline></reference>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-collision-set-field-texture"><inline classes="std std-ref">particles_collision_set_field_texture</inline></reference>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-collision-set-height-field-resolution"><inline classes="std std-ref">particles_collision_set_height_field_resolution</inline></reference>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, resolution: <reference internal="True" refid="enum-renderingserver-particlescollisionheightfieldresolution"><inline classes="std std-ref">ParticlesCollisionHeightfieldResolution</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-collision-set-sphere-radius"><inline classes="std std-ref">particles_collision_set_sphere_radius</inline></reference>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, radius: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-create"><inline classes="std std-ref">particles_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-emit"><inline classes="std std-ref">particles_emit</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>, velocity: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, custom: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, emit_flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-get-current-aabb"><inline classes="std std-ref">particles_get_current_aabb</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-get-emitting"><inline classes="std std-ref">particles_get_emitting</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-is-inactive"><inline classes="std std-ref">particles_is_inactive</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-request-process"><inline classes="std std-ref">particles_request_process</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-restart"><inline classes="std std-ref">particles_restart</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-amount"><inline classes="std std-ref">particles_set_amount</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, amount: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-amount-ratio"><inline classes="std std-ref">particles_set_amount_ratio</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, ratio: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-collision-base-size"><inline classes="std std-ref">particles_set_collision_base_size</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-custom-aabb"><inline classes="std std-ref">particles_set_custom_aabb</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-draw-order"><inline classes="std std-ref">particles_set_draw_order</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, order: <reference internal="True" refid="enum-renderingserver-particlesdraworder"><inline classes="std std-ref">ParticlesDrawOrder</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-draw-pass-mesh"><inline classes="std std-ref">particles_set_draw_pass_mesh</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pass: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-draw-passes"><inline classes="std std-ref">particles_set_draw_passes</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-emission-transform"><inline classes="std std-ref">particles_set_emission_transform</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-emitter-velocity"><inline classes="std std-ref">particles_set_emitter_velocity</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, velocity: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-emitting"><inline classes="std std-ref">particles_set_emitting</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, emitting: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-explosiveness-ratio"><inline classes="std std-ref">particles_set_explosiveness_ratio</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, ratio: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-fixed-fps"><inline classes="std std-ref">particles_set_fixed_fps</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fps: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-fractional-delta"><inline classes="std std-ref">particles_set_fractional_delta</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-interp-to-end"><inline classes="std std-ref">particles_set_interp_to_end</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, factor: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-interpolate"><inline classes="std std-ref">particles_set_interpolate</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-lifetime"><inline classes="std std-ref">particles_set_lifetime</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, lifetime: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-mode"><inline classes="std std-ref">particles_set_mode</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-particlesmode"><inline classes="std std-ref">ParticlesMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-one-shot"><inline classes="std std-ref">particles_set_one_shot</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, one_shot: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-pre-process-time"><inline classes="std std-ref">particles_set_pre_process_time</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-process-material"><inline classes="std std-ref">particles_set_process_material</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-randomness-ratio"><inline classes="std std-ref">particles_set_randomness_ratio</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, ratio: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-speed-scale"><inline classes="std std-ref">particles_set_speed_scale</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-subemitter"><inline classes="std std-ref">particles_set_subemitter</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, subemitter_particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-trail-bind-poses"><inline classes="std std-ref">particles_set_trail_bind_poses</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bind_poses: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-trails"><inline classes="std std-ref">particles_set_trails</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, length_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-transform-align"><inline classes="std std-ref">particles_set_transform_align</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, align: <reference internal="True" refid="enum-renderingserver-particlestransformalign"><inline classes="std std-ref">ParticlesTransformAlign</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-particles-set-use-local-coordinates"><inline classes="std std-ref">particles_set_use_local_coordinates</inline></reference>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-positional-soft-shadow-filter-set-quality"><inline classes="std std-ref">positional_soft_shadow_filter_set_quality</inline></reference>(quality: <reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">ShadowQuality</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-create"><inline classes="std std-ref">reflection_probe_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-ambient-color"><inline classes="std std-ref">reflection_probe_set_ambient_color</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-ambient-energy"><inline classes="std std-ref">reflection_probe_set_ambient_energy</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-ambient-mode"><inline classes="std std-ref">reflection_probe_set_ambient_mode</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-reflectionprobeambientmode"><inline classes="std std-ref">ReflectionProbeAmbientMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-as-interior"><inline classes="std std-ref">reflection_probe_set_as_interior</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-cull-mask"><inline classes="std std-ref">reflection_probe_set_cull_mask</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, layers: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-enable-box-projection"><inline classes="std std-ref">reflection_probe_set_enable_box_projection</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-enable-shadows"><inline classes="std std-ref">reflection_probe_set_enable_shadows</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-intensity"><inline classes="std std-ref">reflection_probe_set_intensity</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, intensity: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-max-distance"><inline classes="std std-ref">reflection_probe_set_max_distance</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, distance: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-mesh-lod-threshold"><inline classes="std std-ref">reflection_probe_set_mesh_lod_threshold</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pixels: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-origin-offset"><inline classes="std std-ref">reflection_probe_set_origin_offset</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, offset: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-reflection-mask"><inline classes="std std-ref">reflection_probe_set_reflection_mask</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, layers: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-resolution"><inline classes="std std-ref">reflection_probe_set_resolution</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, resolution: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-size"><inline classes="std std-ref">reflection_probe_set_size</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-reflection-probe-set-update-mode"><inline classes="std std-ref">reflection_probe_set_update_mode</inline></reference>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-reflectionprobeupdatemode"><inline classes="std std-ref">ReflectionProbeUpdateMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-request-frame-drawn-callback"><inline classes="std std-ref">request_frame_drawn_callback</inline></reference>(callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-scenario-create"><inline classes="std std-ref">scenario_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-scenario-set-camera-attributes"><inline classes="std std-ref">scenario_set_camera_attributes</inline></reference>(scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, effects: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-scenario-set-compositor"><inline classes="std std-ref">scenario_set_compositor</inline></reference>(scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, compositor: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-scenario-set-environment"><inline classes="std std-ref">scenario_set_environment</inline></reference>(scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, environment: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-scenario-set-fallback-environment"><inline classes="std std-ref">scenario_set_fallback_environment</inline></reference>(scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, environment: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-screen-space-roughness-limiter-set-active"><inline classes="std std-ref">screen_space_roughness_limiter_set_active</inline></reference>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, limit: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-set-boot-image"><inline classes="std std-ref">set_boot_image</inline></reference>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, scale: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, use_filter: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-set-debug-generate-wireframes"><inline classes="std std-ref">set_debug_generate_wireframes</inline></reference>(generate: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-set-default-clear-color"><inline classes="std std-ref">set_default_clear_color</inline></reference>(color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-shader-create"><inline classes="std std-ref">shader_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-shader-get-code"><inline classes="std std-ref">shader_get_code</inline></reference>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-shader-get-default-texture-parameter"><inline classes="std std-ref">shader_get_default_texture_parameter</inline></reference>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-shader-get-parameter-default"><inline classes="std std-ref">shader_get_parameter_default</inline></reference>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-shader-set-code"><inline classes="std std-ref">shader_set_code</inline></reference>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, code: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-shader-set-default-texture-parameter"><inline classes="std std-ref">shader_set_default_texture_parameter</inline></reference>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-shader-set-path-hint"><inline classes="std std-ref">shader_set_path_hint</inline></reference>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-skeleton-allocate-data"><inline classes="std std-ref">skeleton_allocate_data</inline></reference>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bones: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, is_2d_skeleton: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-skeleton-bone-get-transform"><inline classes="std std-ref">skeleton_bone_get_transform</inline></reference>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bone: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-skeleton-bone-get-transform-2d"><inline classes="std std-ref">skeleton_bone_get_transform_2d</inline></reference>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bone: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-skeleton-bone-set-transform"><inline classes="std std-ref">skeleton_bone_set_transform</inline></reference>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bone: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-skeleton-bone-set-transform-2d"><inline classes="std std-ref">skeleton_bone_set_transform_2d</inline></reference>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bone: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-skeleton-create"><inline classes="std std-ref">skeleton_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-skeleton-get-bone-count"><inline classes="std std-ref">skeleton_get_bone_count</inline></reference>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-skeleton-set-base-transform-2d"><inline classes="std std-ref">skeleton_set_base_transform_2d</inline></reference>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, base_transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-sky-bake-panorama"><inline classes="std std-ref">sky_bake_panorama</inline></reference>(sky: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, bake_irradiance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-sky-create"><inline classes="std std-ref">sky_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-sky-set-material"><inline classes="std std-ref">sky_set_material</inline></reference>(sky: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-sky-set-mode"><inline classes="std std-ref">sky_set_mode</inline></reference>(sky: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-skymode"><inline classes="std std-ref">SkyMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-sky-set-radiance-size"><inline classes="std std-ref">sky_set_radiance_size</inline></reference>(sky: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, radiance_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-spot-light-create"><inline classes="std std-ref">spot_light_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-sub-surface-scattering-set-quality"><inline classes="std std-ref">sub_surface_scattering_set_quality</inline></reference>(quality: <reference internal="True" refid="enum-renderingserver-subsurfacescatteringquality"><inline classes="std std-ref">SubSurfaceScatteringQuality</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-sub-surface-scattering-set-scale"><inline classes="std std-ref">sub_surface_scattering_set_scale</inline></reference>(scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, depth_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-2d-create"><inline classes="std std-ref">texture_2d_create</inline></reference>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-2d-get"><inline classes="std std-ref">texture_2d_get</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-2d-layer-get"><inline classes="std std-ref">texture_2d_layer_get</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-2d-layered-create"><inline classes="std std-ref">texture_2d_layered_create</inline></reference>(layers: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>], layered_type: <reference internal="True" refid="enum-renderingserver-texturelayeredtype"><inline classes="std std-ref">TextureLayeredType</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-2d-layered-placeholder-create"><inline classes="std std-ref">texture_2d_layered_placeholder_create</inline></reference>(layered_type: <reference internal="True" refid="enum-renderingserver-texturelayeredtype"><inline classes="std std-ref">TextureLayeredType</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-2d-placeholder-create"><inline classes="std std-ref">texture_2d_placeholder_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-2d-update"><inline classes="std std-ref">texture_2d_update</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>, layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-3d-create"><inline classes="std std-ref">texture_3d_create</inline></reference>(format: <reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference>, width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, depth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, data: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-3d-get"><inline classes="std std-ref">texture_3d_get</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-3d-placeholder-create"><inline classes="std std-ref">texture_3d_placeholder_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-3d-update"><inline classes="std std-ref">texture_3d_update</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, data: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-get-format"><inline classes="std std-ref">texture_get_format</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-get-native-handle"><inline classes="std std-ref">texture_get_native_handle</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, srgb: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-get-path"><inline classes="std std-ref">texture_get_path</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-get-rd-texture"><inline classes="std std-ref">texture_get_rd_texture</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, srgb: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-proxy-create"><inline classes="std std-ref">texture_proxy_create</inline></reference>(base: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-proxy-update"><inline classes="std std-ref">texture_proxy_update</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, proxy_to: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-rd-create"><inline classes="std std-ref">texture_rd_create</inline></reference>(rd_texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, layer_type: <reference internal="True" refid="enum-renderingserver-texturelayeredtype"><inline classes="std std-ref">TextureLayeredType</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-replace"><inline classes="std std-ref">texture_replace</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, by_texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-set-force-redraw-if-visible"><inline classes="std std-ref">texture_set_force_redraw_if_visible</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-set-path"><inline classes="std std-ref">texture_set_path</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-texture-set-size-override"><inline classes="std std-ref">texture_set_size_override</inline></reference>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-attach-camera"><inline classes="std std-ref">viewport_attach_camera</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-attach-canvas"><inline classes="std std-ref">viewport_attach_canvas</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-attach-to-screen"><inline classes="std std-ref">viewport_attach_to_screen</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> = Rect2(0, 0, 0, 0), screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-create"><inline classes="std std-ref">viewport_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-get-measured-render-time-cpu"><inline classes="std std-ref">viewport_get_measured_render_time_cpu</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-get-measured-render-time-gpu"><inline classes="std std-ref">viewport_get_measured_render_time_gpu</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-get-render-info"><inline classes="std std-ref">viewport_get_render_info</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, type: <reference internal="True" refid="enum-renderingserver-viewportrenderinfotype"><inline classes="std std-ref">ViewportRenderInfoType</inline></reference>, info: <reference internal="True" refid="enum-renderingserver-viewportrenderinfo"><inline classes="std std-ref">ViewportRenderInfo</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-get-render-target"><inline classes="std std-ref">viewport_get_render_target</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-get-texture"><inline classes="std std-ref">viewport_get_texture</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-renderingserver-viewportupdatemode"><inline classes="std std-ref">ViewportUpdateMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-get-update-mode"><inline classes="std std-ref">viewport_get_update_mode</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-remove-canvas"><inline classes="std std-ref">viewport_remove_canvas</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-active"><inline classes="std std-ref">viewport_set_active</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, active: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-canvas-cull-mask"><inline classes="std std-ref">viewport_set_canvas_cull_mask</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas_cull_mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-canvas-stacking"><inline classes="std std-ref">viewport_set_canvas_stacking</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, sublayer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-canvas-transform"><inline classes="std std-ref">viewport_set_canvas_transform</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, offset: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-clear-mode"><inline classes="std std-ref">viewport_set_clear_mode</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, clear_mode: <reference internal="True" refid="enum-renderingserver-viewportclearmode"><inline classes="std std-ref">ViewportClearMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-debug-draw"><inline classes="std std-ref">viewport_set_debug_draw</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, draw: <reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-default-canvas-item-texture-filter"><inline classes="std std-ref">viewport_set_default_canvas_item_texture_filter</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, filter: <reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-default-canvas-item-texture-repeat"><inline classes="std std-ref">viewport_set_default_canvas_item_texture_repeat</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, repeat: <reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-disable-2d"><inline classes="std std-ref">viewport_set_disable_2d</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, disable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-disable-3d"><inline classes="std std-ref">viewport_set_disable_3d</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, disable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-environment-mode"><inline classes="std std-ref">viewport_set_environment_mode</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-viewportenvironmentmode"><inline classes="std std-ref">ViewportEnvironmentMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-fsr-sharpness"><inline classes="std std-ref">viewport_set_fsr_sharpness</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, sharpness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-global-canvas-transform"><inline classes="std std-ref">viewport_set_global_canvas_transform</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-measure-render-time"><inline classes="std std-ref">viewport_set_measure_render_time</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-msaa-2d"><inline classes="std std-ref">viewport_set_msaa_2d</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msaa: <reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-msaa-3d"><inline classes="std std-ref">viewport_set_msaa_3d</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msaa: <reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-occlusion-culling-build-quality"><inline classes="std std-ref">viewport_set_occlusion_culling_build_quality</inline></reference>(quality: <reference internal="True" refid="enum-renderingserver-viewportocclusioncullingbuildquality"><inline classes="std std-ref">ViewportOcclusionCullingBuildQuality</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-occlusion-rays-per-thread"><inline classes="std std-ref">viewport_set_occlusion_rays_per_thread</inline></reference>(rays_per_thread: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-parent-viewport"><inline classes="std std-ref">viewport_set_parent_viewport</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parent_viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-positional-shadow-atlas-quadrant-subdivision"><inline classes="std std-ref">viewport_set_positional_shadow_atlas_quadrant_subdivision</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, subdivision: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-positional-shadow-atlas-size"><inline classes="std std-ref">viewport_set_positional_shadow_atlas_size</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, use_16_bits: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-render-direct-to-screen"><inline classes="std std-ref">viewport_set_render_direct_to_screen</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-scaling-3d-mode"><inline classes="std std-ref">viewport_set_scaling_3d_mode</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scaling_3d_mode: <reference internal="True" refid="enum-renderingserver-viewportscaling3dmode"><inline classes="std std-ref">ViewportScaling3DMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-scaling-3d-scale"><inline classes="std std-ref">viewport_set_scaling_3d_scale</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-scenario"><inline classes="std std-ref">viewport_set_scenario</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-screen-space-aa"><inline classes="std std-ref">viewport_set_screen_space_aa</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-viewportscreenspaceaa"><inline classes="std std-ref">ViewportScreenSpaceAA</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-sdf-oversize-and-scale"><inline classes="std std-ref">viewport_set_sdf_oversize_and_scale</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, oversize: <reference internal="True" refid="enum-renderingserver-viewportsdfoversize"><inline classes="std std-ref">ViewportSDFOversize</inline></reference>, scale: <reference internal="True" refid="enum-renderingserver-viewportsdfscale"><inline classes="std std-ref">ViewportSDFScale</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-size"><inline classes="std std-ref">viewport_set_size</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-snap-2d-transforms-to-pixel"><inline classes="std std-ref">viewport_set_snap_2d_transforms_to_pixel</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-snap-2d-vertices-to-pixel"><inline classes="std std-ref">viewport_set_snap_2d_vertices_to_pixel</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-texture-mipmap-bias"><inline classes="std std-ref">viewport_set_texture_mipmap_bias</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mipmap_bias: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-transparent-background"><inline classes="std std-ref">viewport_set_transparent_background</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-update-mode"><inline classes="std std-ref">viewport_set_update_mode</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, update_mode: <reference internal="True" refid="enum-renderingserver-viewportupdatemode"><inline classes="std std-ref">ViewportUpdateMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-use-debanding"><inline classes="std std-ref">viewport_set_use_debanding</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-use-hdr-2d"><inline classes="std std-ref">viewport_set_use_hdr_2d</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-use-occlusion-culling"><inline classes="std std-ref">viewport_set_use_occlusion_culling</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-use-taa"><inline classes="std std-ref">viewport_set_use_taa</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-use-xr"><inline classes="std std-ref">viewport_set_use_xr</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, use_xr: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-vrs-mode"><inline classes="std std-ref">viewport_set_vrs_mode</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-viewportvrsmode"><inline classes="std std-ref">ViewportVRSMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-vrs-texture"><inline classes="std std-ref">viewport_set_vrs_texture</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-viewport-set-vrs-update-mode"><inline classes="std std-ref">viewport_set_vrs_update_mode</inline></reference>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-viewportvrsupdatemode"><inline classes="std std-ref">ViewportVRSUpdateMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-visibility-notifier-create"><inline classes="std std-ref">visibility_notifier_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-visibility-notifier-set-aabb"><inline classes="std std-ref">visibility_notifier_set_aabb</inline></reference>(notifier: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-visibility-notifier-set-callbacks"><inline classes="std std-ref">visibility_notifier_set_callbacks</inline></reference>(notifier: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enter_callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, exit_callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-allocate-data"><inline classes="std std-ref">voxel_gi_allocate_data</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, to_cell_xform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>, octree_size: <reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>, octree_cells: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, data_cells: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, distance_field: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, level_counts: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-create"><inline classes="std std-ref">voxel_gi_create</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-get-data-cells"><inline classes="std std-ref">voxel_gi_get_data_cells</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-get-distance-field"><inline classes="std std-ref">voxel_gi_get_distance_field</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-get-level-counts"><inline classes="std std-ref">voxel_gi_get_level_counts</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-get-octree-cells"><inline classes="std std-ref">voxel_gi_get_octree_cells</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-get-octree-size"><inline classes="std std-ref">voxel_gi_get_octree_size</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-get-to-cell-xform"><inline classes="std std-ref">voxel_gi_get_to_cell_xform</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-set-baked-exposure-normalization"><inline classes="std std-ref">voxel_gi_set_baked_exposure_normalization</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, baked_exposure: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-set-bias"><inline classes="std std-ref">voxel_gi_set_bias</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bias: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-set-dynamic-range"><inline classes="std std-ref">voxel_gi_set_dynamic_range</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, range: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-set-energy"><inline classes="std std-ref">voxel_gi_set_energy</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-set-interior"><inline classes="std std-ref">voxel_gi_set_interior</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-set-normal-bias"><inline classes="std std-ref">voxel_gi_set_normal_bias</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bias: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-set-propagation"><inline classes="std std-ref">voxel_gi_set_propagation</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-set-quality"><inline classes="std std-ref">voxel_gi_set_quality</inline></reference>(quality: <reference internal="True" refid="enum-renderingserver-voxelgiquality"><inline classes="std std-ref">VoxelGIQuality</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingserver-method-voxel-gi-set-use-two-bounces"><inline classes="std std-ref">voxel_gi_set_use_two_bounces</inline></reference>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-renderingserver-signal-frame-post-draw"></target>
            <paragraph classes="classref-signal" ids="class-renderingserver-signal-frame-post-draw" names="class_renderingserver_signal_frame_post_draw"><strong>frame_post_draw</strong>() <reference internal="True" refid="class-renderingserver-signal-frame-post-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在该帧的结尾发出，此时 RenderingServer 刚刚完成对所有 Viewport 的更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-signal-frame-pre-draw"></target>
            <paragraph classes="classref-signal" ids="class-renderingserver-signal-frame-pre-draw" names="class_renderingserver_signal_frame_pre_draw"><strong>frame_pre_draw</strong>() <reference internal="True" refid="class-renderingserver-signal-frame-pre-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在该帧的开头发出，此后 RenderingServer 会更新所有 Viewport。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-renderingserver-texturelayeredtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-texturelayeredtype" names="enum_renderingserver_texturelayeredtype">enum <strong>TextureLayeredType</strong>: <reference internal="True" refid="enum-renderingserver-texturelayeredtype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-texture-layered-2d-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-texture-layered-2d-array" names="class_renderingserver_constant_texture_layered_2d_array"><reference internal="True" refid="enum-renderingserver-texturelayeredtype"><inline classes="std std-ref">TextureLayeredType</inline></reference> <strong>TEXTURE_LAYERED_2D_ARRAY</strong> = <literal>0</literal></paragraph>
            <paragraph>二维纹理数组（见 <reference internal="True" refuri="class_texture2darray#class-texture2darray"><inline classes="std std-ref">Texture2DArray</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-texture-layered-cubemap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-texture-layered-cubemap" names="class_renderingserver_constant_texture_layered_cubemap"><reference internal="True" refid="enum-renderingserver-texturelayeredtype"><inline classes="std std-ref">TextureLayeredType</inline></reference> <strong>TEXTURE_LAYERED_CUBEMAP</strong> = <literal>1</literal></paragraph>
            <paragraph>立方体贴图纹理（见 <reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-texture-layered-cubemap-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-texture-layered-cubemap-array" names="class_renderingserver_constant_texture_layered_cubemap_array"><reference internal="True" refid="enum-renderingserver-texturelayeredtype"><inline classes="std std-ref">TextureLayeredType</inline></reference> <strong>TEXTURE_LAYERED_CUBEMAP_ARRAY</strong> = <literal>2</literal></paragraph>
            <paragraph>立方体贴图纹理数组（见 <reference internal="True" refuri="class_cubemaparray#class-cubemaparray"><inline classes="std std-ref">CubemapArray</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-cubemaplayer"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-cubemaplayer" names="enum_renderingserver_cubemaplayer">enum <strong>CubeMapLayer</strong>: <reference internal="True" refid="enum-renderingserver-cubemaplayer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-cubemap-layer-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-cubemap-layer-left" names="class_renderingserver_constant_cubemap_layer_left"><reference internal="True" refid="enum-renderingserver-cubemaplayer"><inline classes="std std-ref">CubeMapLayer</inline></reference> <strong>CUBEMAP_LAYER_LEFT</strong> = <literal>0</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 的左面。</paragraph>
            <target refid="class-renderingserver-constant-cubemap-layer-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-cubemap-layer-right" names="class_renderingserver_constant_cubemap_layer_right"><reference internal="True" refid="enum-renderingserver-cubemaplayer"><inline classes="std std-ref">CubeMapLayer</inline></reference> <strong>CUBEMAP_LAYER_RIGHT</strong> = <literal>1</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 的右面。</paragraph>
            <target refid="class-renderingserver-constant-cubemap-layer-bottom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-cubemap-layer-bottom" names="class_renderingserver_constant_cubemap_layer_bottom"><reference internal="True" refid="enum-renderingserver-cubemaplayer"><inline classes="std std-ref">CubeMapLayer</inline></reference> <strong>CUBEMAP_LAYER_BOTTOM</strong> = <literal>2</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 的底面。</paragraph>
            <target refid="class-renderingserver-constant-cubemap-layer-top"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-cubemap-layer-top" names="class_renderingserver_constant_cubemap_layer_top"><reference internal="True" refid="enum-renderingserver-cubemaplayer"><inline classes="std std-ref">CubeMapLayer</inline></reference> <strong>CUBEMAP_LAYER_TOP</strong> = <literal>3</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 的顶面。</paragraph>
            <target refid="class-renderingserver-constant-cubemap-layer-front"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-cubemap-layer-front" names="class_renderingserver_constant_cubemap_layer_front"><reference internal="True" refid="enum-renderingserver-cubemaplayer"><inline classes="std std-ref">CubeMapLayer</inline></reference> <strong>CUBEMAP_LAYER_FRONT</strong> = <literal>4</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 的正面。</paragraph>
            <target refid="class-renderingserver-constant-cubemap-layer-back"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-cubemap-layer-back" names="class_renderingserver_constant_cubemap_layer_back"><reference internal="True" refid="enum-renderingserver-cubemaplayer"><inline classes="std std-ref">CubeMapLayer</inline></reference> <strong>CUBEMAP_LAYER_BACK</strong> = <literal>5</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 的背面。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-shadermode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-shadermode" names="enum_renderingserver_shadermode">enum <strong>ShaderMode</strong>: <reference internal="True" refid="enum-renderingserver-shadermode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-shader-spatial"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shader-spatial" names="class_renderingserver_constant_shader_spatial"><reference internal="True" refid="enum-renderingserver-shadermode"><inline classes="std std-ref">ShaderMode</inline></reference> <strong>SHADER_SPATIAL</strong> = <literal>0</literal></paragraph>
            <paragraph>着色器是 3D 着色器。</paragraph>
            <target refid="class-renderingserver-constant-shader-canvas-item"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shader-canvas-item" names="class_renderingserver_constant_shader_canvas_item"><reference internal="True" refid="enum-renderingserver-shadermode"><inline classes="std std-ref">ShaderMode</inline></reference> <strong>SHADER_CANVAS_ITEM</strong> = <literal>1</literal></paragraph>
            <paragraph>着色器是 2D 着色器。</paragraph>
            <target refid="class-renderingserver-constant-shader-particles"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shader-particles" names="class_renderingserver_constant_shader_particles"><reference internal="True" refid="enum-renderingserver-shadermode"><inline classes="std std-ref">ShaderMode</inline></reference> <strong>SHADER_PARTICLES</strong> = <literal>2</literal></paragraph>
            <paragraph>着色器是粒子着色器（2D 和 3D 均可使用）。</paragraph>
            <target refid="class-renderingserver-constant-shader-sky"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shader-sky" names="class_renderingserver_constant_shader_sky"><reference internal="True" refid="enum-renderingserver-shadermode"><inline classes="std std-ref">ShaderMode</inline></reference> <strong>SHADER_SKY</strong> = <literal>3</literal></paragraph>
            <paragraph>着色器是 3D 天空着色器。</paragraph>
            <target refid="class-renderingserver-constant-shader-fog"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shader-fog" names="class_renderingserver_constant_shader_fog"><reference internal="True" refid="enum-renderingserver-shadermode"><inline classes="std std-ref">ShaderMode</inline></reference> <strong>SHADER_FOG</strong> = <literal>4</literal></paragraph>
            <paragraph>着色器是 3D 雾着色器。</paragraph>
            <target refid="class-renderingserver-constant-shader-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shader-max" names="class_renderingserver_constant_shader_max"><reference internal="True" refid="enum-renderingserver-shadermode"><inline classes="std std-ref">ShaderMode</inline></reference> <strong>SHADER_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-shadermode"><inline classes="std std-ref">ShaderMode</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-arraytype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-arraytype" names="enum_renderingserver_arraytype">enum <strong>ArrayType</strong>: <reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-array-vertex"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-vertex" names="class_renderingserver_constant_array_vertex"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_VERTEX</strong> = <literal>0</literal></paragraph>
            <paragraph>数组是顶点位置数组。</paragraph>
            <target refid="class-renderingserver-constant-array-normal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-normal" names="class_renderingserver_constant_array_normal"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_NORMAL</strong> = <literal>1</literal></paragraph>
            <paragraph>数组是法线数组。</paragraph>
            <target refid="class-renderingserver-constant-array-tangent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-tangent" names="class_renderingserver_constant_array_tangent"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_TANGENT</strong> = <literal>2</literal></paragraph>
            <paragraph>数组是切线数组。</paragraph>
            <target refid="class-renderingserver-constant-array-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-color" names="class_renderingserver_constant_array_color"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_COLOR</strong> = <literal>3</literal></paragraph>
            <paragraph>数组是顶点颜色数组。</paragraph>
            <target refid="class-renderingserver-constant-array-tex-uv"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-tex-uv" names="class_renderingserver_constant_array_tex_uv"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_TEX_UV</strong> = <literal>4</literal></paragraph>
            <paragraph>数组是 UV 坐标数组。</paragraph>
            <target refid="class-renderingserver-constant-array-tex-uv2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-tex-uv2" names="class_renderingserver_constant_array_tex_uv2"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_TEX_UV2</strong> = <literal>5</literal></paragraph>
            <paragraph>数组是第二组 UV 坐标的 UV 坐标数组。</paragraph>
            <target refid="class-renderingserver-constant-array-custom0"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom0" names="class_renderingserver_constant_array_custom0"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_CUSTOM0</strong> = <literal>6</literal></paragraph>
            <paragraph>数组是第一组自定义数据的自定义数据数组。</paragraph>
            <target refid="class-renderingserver-constant-array-custom1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom1" names="class_renderingserver_constant_array_custom1"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_CUSTOM1</strong> = <literal>7</literal></paragraph>
            <paragraph>数组是第二组自定义数据的自定义数据数组。</paragraph>
            <target refid="class-renderingserver-constant-array-custom2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom2" names="class_renderingserver_constant_array_custom2"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_CUSTOM2</strong> = <literal>8</literal></paragraph>
            <paragraph>数组是第三组自定义数据的自定义数据数组。</paragraph>
            <target refid="class-renderingserver-constant-array-custom3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom3" names="class_renderingserver_constant_array_custom3"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_CUSTOM3</strong> = <literal>9</literal></paragraph>
            <paragraph>数组是第四组自定义数据的自定义数据数组。</paragraph>
            <target refid="class-renderingserver-constant-array-bones"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-bones" names="class_renderingserver_constant_array_bones"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_BONES</strong> = <literal>10</literal></paragraph>
            <paragraph>数组包含骨骼信息。</paragraph>
            <target refid="class-renderingserver-constant-array-weights"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-weights" names="class_renderingserver_constant_array_weights"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_WEIGHTS</strong> = <literal>11</literal></paragraph>
            <paragraph>数组是重量信息。</paragraph>
            <target refid="class-renderingserver-constant-array-index"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-index" names="class_renderingserver_constant_array_index"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_INDEX</strong> = <literal>12</literal></paragraph>
            <paragraph>数组是索引数组。</paragraph>
            <target refid="class-renderingserver-constant-array-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-max" names="class_renderingserver_constant_array_max"><reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> <strong>ARRAY_MAX</strong> = <literal>13</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-arraycustomformat"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-arraycustomformat" names="enum_renderingserver_arraycustomformat">enum <strong>ArrayCustomFormat</strong>: <reference internal="True" refid="enum-renderingserver-arraycustomformat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-array-custom-rgba8-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom-rgba8-unorm" names="class_renderingserver_constant_array_custom_rgba8_unorm"><reference internal="True" refid="enum-renderingserver-arraycustomformat"><inline classes="std std-ref">ArrayCustomFormat</inline></reference> <strong>ARRAY_CUSTOM_RGBA8_UNORM</strong> = <literal>0</literal></paragraph>
            <paragraph>自定义数据数组包含的是每通道 8 位的红、绿、蓝、Alpha 颜色数据。元素经过归一化，是 <literal>[0.0, 1.0]</literal> 范围内的无符号浮点数。</paragraph>
            <target refid="class-renderingserver-constant-array-custom-rgba8-snorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom-rgba8-snorm" names="class_renderingserver_constant_array_custom_rgba8_snorm"><reference internal="True" refid="enum-renderingserver-arraycustomformat"><inline classes="std std-ref">ArrayCustomFormat</inline></reference> <strong>ARRAY_CUSTOM_RGBA8_SNORM</strong> = <literal>1</literal></paragraph>
            <paragraph>自定义数据数组包含的是每通道 8 位的红、绿、蓝、Alpha 颜色数据。元素经过归一化，是 <literal>[0.0, 1.0]</literal> 范围内的带符号浮点数。</paragraph>
            <target refid="class-renderingserver-constant-array-custom-rg-half"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom-rg-half" names="class_renderingserver_constant_array_custom_rg_half"><reference internal="True" refid="enum-renderingserver-arraycustomformat"><inline classes="std std-ref">ArrayCustomFormat</inline></reference> <strong>ARRAY_CUSTOM_RG_HALF</strong> = <literal>2</literal></paragraph>
            <paragraph>自定义数据数组包含的是每通道 16 位的红、绿、蓝颜色数据。元素为半精度浮点数。</paragraph>
            <target refid="class-renderingserver-constant-array-custom-rgba-half"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom-rgba-half" names="class_renderingserver_constant_array_custom_rgba_half"><reference internal="True" refid="enum-renderingserver-arraycustomformat"><inline classes="std std-ref">ArrayCustomFormat</inline></reference> <strong>ARRAY_CUSTOM_RGBA_HALF</strong> = <literal>3</literal></paragraph>
            <paragraph>自定义数据数组包含的是每通道 16 位的红、绿、蓝、Alpha 颜色数据。元素为半精度浮点数。</paragraph>
            <target refid="class-renderingserver-constant-array-custom-r-float"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom-r-float" names="class_renderingserver_constant_array_custom_r_float"><reference internal="True" refid="enum-renderingserver-arraycustomformat"><inline classes="std std-ref">ArrayCustomFormat</inline></reference> <strong>ARRAY_CUSTOM_R_FLOAT</strong> = <literal>4</literal></paragraph>
            <paragraph>自定义数据数组包含的是每通道 32 位的红色数据。元素为单精度浮点数。</paragraph>
            <target refid="class-renderingserver-constant-array-custom-rg-float"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom-rg-float" names="class_renderingserver_constant_array_custom_rg_float"><reference internal="True" refid="enum-renderingserver-arraycustomformat"><inline classes="std std-ref">ArrayCustomFormat</inline></reference> <strong>ARRAY_CUSTOM_RG_FLOAT</strong> = <literal>5</literal></paragraph>
            <paragraph>自定义数据数组包含的是每通道 32 位的红、绿颜色数据。元素为单精度浮点数。</paragraph>
            <target refid="class-renderingserver-constant-array-custom-rgb-float"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom-rgb-float" names="class_renderingserver_constant_array_custom_rgb_float"><reference internal="True" refid="enum-renderingserver-arraycustomformat"><inline classes="std std-ref">ArrayCustomFormat</inline></reference> <strong>ARRAY_CUSTOM_RGB_FLOAT</strong> = <literal>6</literal></paragraph>
            <paragraph>自定义数据数组包含的是每通道 32 位的红、绿、蓝颜色数据。元素为单精度浮点数。</paragraph>
            <target refid="class-renderingserver-constant-array-custom-rgba-float"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom-rgba-float" names="class_renderingserver_constant_array_custom_rgba_float"><reference internal="True" refid="enum-renderingserver-arraycustomformat"><inline classes="std std-ref">ArrayCustomFormat</inline></reference> <strong>ARRAY_CUSTOM_RGBA_FLOAT</strong> = <literal>7</literal></paragraph>
            <paragraph>自定义数据数组包含的是每通道 32 位的红、绿、蓝、Alpha 颜色数据。元素为单精度浮点数。</paragraph>
            <target refid="class-renderingserver-constant-array-custom-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-custom-max" names="class_renderingserver_constant_array_custom_max"><reference internal="True" refid="enum-renderingserver-arraycustomformat"><inline classes="std std-ref">ArrayCustomFormat</inline></reference> <strong>ARRAY_CUSTOM_MAX</strong> = <literal>8</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-arraycustomformat"><inline classes="std std-ref">ArrayCustomFormat</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-arrayformat"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-arrayformat" names="enum_renderingserver_arrayformat">flags <strong>ArrayFormat</strong>: <reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-array-format-vertex"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-vertex" names="class_renderingserver_constant_array_format_vertex"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_VERTEX</strong> = <literal>1</literal></paragraph>
            <paragraph>用于标记顶点位置数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-format-normal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-normal" names="class_renderingserver_constant_array_format_normal"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_NORMAL</strong> = <literal>2</literal></paragraph>
            <paragraph>用于标记法线数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-format-tangent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-tangent" names="class_renderingserver_constant_array_format_tangent"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_TANGENT</strong> = <literal>4</literal></paragraph>
            <paragraph>用于标记切线数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-format-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-color" names="class_renderingserver_constant_array_format_color"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_COLOR</strong> = <literal>8</literal></paragraph>
            <paragraph>用于标记顶点颜色数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-format-tex-uv"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-tex-uv" names="class_renderingserver_constant_array_format_tex_uv"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_TEX_UV</strong> = <literal>16</literal></paragraph>
            <paragraph>用于标记 UV 坐标数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-format-tex-uv2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-tex-uv2" names="class_renderingserver_constant_array_format_tex_uv2"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_TEX_UV2</strong> = <literal>32</literal></paragraph>
            <paragraph>用于标记第二个 UV 坐标的 UV 坐标数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-format-custom0"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-custom0" names="class_renderingserver_constant_array_format_custom0"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_CUSTOM0</strong> = <literal>64</literal></paragraph>
            <paragraph>用于标记第一组自定义数据的自定义顶点数据数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-format-custom1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-custom1" names="class_renderingserver_constant_array_format_custom1"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_CUSTOM1</strong> = <literal>128</literal></paragraph>
            <paragraph>用于标记第二组自定义数据的自定义顶点数据数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-format-custom2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-custom2" names="class_renderingserver_constant_array_format_custom2"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_CUSTOM2</strong> = <literal>256</literal></paragraph>
            <paragraph>用于标记第三组自定义数据的自定义顶点数据数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-format-custom3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-custom3" names="class_renderingserver_constant_array_format_custom3"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_CUSTOM3</strong> = <literal>512</literal></paragraph>
            <paragraph>用于标记第四组自定义数据的自定义顶点数据数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-format-bones"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-bones" names="class_renderingserver_constant_array_format_bones"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_BONES</strong> = <literal>1024</literal></paragraph>
            <paragraph>用来标记骨骼信息数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-format-weights"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-weights" names="class_renderingserver_constant_array_format_weights"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_WEIGHTS</strong> = <literal>2048</literal></paragraph>
            <paragraph>用于标记重量数组的标记。</paragraph>
            <target refid="class-renderingserver-constant-array-format-index"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-index" names="class_renderingserver_constant_array_format_index"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_INDEX</strong> = <literal>4096</literal></paragraph>
            <paragraph>用于标记索引数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-format-blend-shape-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-blend-shape-mask" names="class_renderingserver_constant_array_format_blend_shape_mask"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_BLEND_SHAPE_MASK</strong> = <literal>7</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-array-format-custom-base"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-custom-base" names="class_renderingserver_constant_array_format_custom_base"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_CUSTOM_BASE</strong> = <literal>13</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-array-format-custom-bits"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-custom-bits" names="class_renderingserver_constant_array_format_custom_bits"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_CUSTOM_BITS</strong> = <literal>3</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-array-format-custom0-shift"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-custom0-shift" names="class_renderingserver_constant_array_format_custom0_shift"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_CUSTOM0_SHIFT</strong> = <literal>13</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-array-format-custom1-shift"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-custom1-shift" names="class_renderingserver_constant_array_format_custom1_shift"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_CUSTOM1_SHIFT</strong> = <literal>16</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-array-format-custom2-shift"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-custom2-shift" names="class_renderingserver_constant_array_format_custom2_shift"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_CUSTOM2_SHIFT</strong> = <literal>19</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-array-format-custom3-shift"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-custom3-shift" names="class_renderingserver_constant_array_format_custom3_shift"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_CUSTOM3_SHIFT</strong> = <literal>22</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-array-format-custom-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-format-custom-mask" names="class_renderingserver_constant_array_format_custom_mask"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FORMAT_CUSTOM_MASK</strong> = <literal>7</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-array-compress-flags-base"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-compress-flags-base" names="class_renderingserver_constant_array_compress_flags_base"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_COMPRESS_FLAGS_BASE</strong> = <literal>25</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-array-flag-use-2d-vertices"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-flag-use-2d-vertices" names="class_renderingserver_constant_array_flag_use_2d_vertices"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FLAG_USE_2D_VERTICES</strong> = <literal>33554432</literal></paragraph>
            <paragraph>用于标记包含 2D 顶点的数组的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-flag-use-dynamic-update"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-flag-use-dynamic-update" names="class_renderingserver_constant_array_flag_use_dynamic_update"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FLAG_USE_DYNAMIC_UPDATE</strong> = <literal>67108864</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-array-flag-use-8-bone-weights"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-flag-use-8-bone-weights" names="class_renderingserver_constant_array_flag_use_8_bone_weights"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FLAG_USE_8_BONE_WEIGHTS</strong> = <literal>134217728</literal></paragraph>
            <paragraph>用于标记数组使用 8 个骨骼权重而不是 4 个的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-flag-uses-empty-vertex-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-flag-uses-empty-vertex-array" names="class_renderingserver_constant_array_flag_uses_empty_vertex_array"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY</strong> = <literal>268435456</literal></paragraph>
            <paragraph>用于标记网格没有顶点数组，而是使用索引和其他信息推断着色器中的顶点位置的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-flag-compress-attributes"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-flag-compress-attributes" names="class_renderingserver_constant_array_flag_compress_attributes"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FLAG_COMPRESS_ATTRIBUTES</strong> = <literal>536870912</literal></paragraph>
            <paragraph>用于标记网格正在使用的压缩的属性（顶点、法线、切线、UV）的标志。启用这种形式的压缩后，顶点位置将被打包到 RGBA16UNORM 属性中，并在顶点着色器中进行缩放。法线和切线将被打包到表示一个轴的 RG16UNORM 中，并在顶点的 A 通道中存储一个 16 位浮点数。UV 将使用 16 位标准化浮点数而不是完整的 32 位有符号浮点数。使用该压缩模式时，必须使用顶点、法线和切线或仅使用顶点。你无法使用没有切线的法线。如果可以的话，导入器将自动启用这种压缩。</paragraph>
            <target refid="class-renderingserver-constant-array-flag-format-version-base"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-flag-format-version-base" names="class_renderingserver_constant_array_flag_format_version_base"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FLAG_FORMAT_VERSION_BASE</strong> = <literal>35</literal></paragraph>
            <paragraph>用于标记被用于存储网格版本的位的起始的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-flag-format-version-shift"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-flag-format-version-shift" names="class_renderingserver_constant_array_flag_format_version_shift"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FLAG_FORMAT_VERSION_SHIFT</strong> = <literal>35</literal></paragraph>
            <paragraph>用于移动网格格式 int，以将版本带入最低位的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-flag-format-version-1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-flag-format-version-1" names="class_renderingserver_constant_array_flag_format_version_1"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FLAG_FORMAT_VERSION_1</strong> = <literal>0</literal></paragraph>
            <paragraph>用于记录版本引入之前先前网格版本所使用的格式的标志。</paragraph>
            <target refid="class-renderingserver-constant-array-flag-format-version-2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-flag-format-version-2" names="class_renderingserver_constant_array_flag_format_version_2"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FLAG_FORMAT_VERSION_2</strong> = <literal>34359738368</literal></paragraph>
            <paragraph>用于记录第二次迭代的网格版本标志的标志。该版本与 <reference internal="True" refid="class-renderingserver-constant-array-flag-format-version-1"><inline classes="std std-ref">ARRAY_FLAG_FORMAT_VERSION_1</inline></reference> 之间的主要区别在于，该版本支持 <reference internal="True" refid="class-renderingserver-constant-array-flag-compress-attributes"><inline classes="std std-ref">ARRAY_FLAG_COMPRESS_ATTRIBUTES</inline></reference>，并且在该版本中，顶点位置与法线和切线去交错。</paragraph>
            <target refid="class-renderingserver-constant-array-flag-format-current-version"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-flag-format-current-version" names="class_renderingserver_constant_array_flag_format_current_version"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FLAG_FORMAT_CURRENT_VERSION</strong> = <literal>34359738368</literal></paragraph>
            <paragraph>用于记录引擎期望的当前版本的标志。目前这与 <reference internal="True" refid="class-renderingserver-constant-array-flag-format-version-2"><inline classes="std std-ref">ARRAY_FLAG_FORMAT_VERSION_2</inline></reference> 相同。</paragraph>
            <target refid="class-renderingserver-constant-array-flag-format-version-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-array-flag-format-version-mask" names="class_renderingserver_constant_array_flag_format_version_mask"><reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> <strong>ARRAY_FLAG_FORMAT_VERSION_MASK</strong> = <literal>255</literal></paragraph>
            <paragraph>使用 <reference internal="True" refid="class-renderingserver-constant-array-flag-format-version-shift"><inline classes="std std-ref">ARRAY_FLAG_FORMAT_VERSION_SHIFT</inline></reference> 将用于网格版本的位转移到位后，用于隔离这些位的标志。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-primitivetype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-primitivetype" names="enum_renderingserver_primitivetype">enum <strong>PrimitiveType</strong>: <reference internal="True" refid="enum-renderingserver-primitivetype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-primitive-points"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-primitive-points" names="class_renderingserver_constant_primitive_points"><reference internal="True" refid="enum-renderingserver-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> <strong>PRIMITIVE_POINTS</strong> = <literal>0</literal></paragraph>
            <paragraph>绘制的图元由点组成。</paragraph>
            <target refid="class-renderingserver-constant-primitive-lines"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-primitive-lines" names="class_renderingserver_constant_primitive_lines"><reference internal="True" refid="enum-renderingserver-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> <strong>PRIMITIVE_LINES</strong> = <literal>1</literal></paragraph>
            <paragraph>绘制的图元由线组成。</paragraph>
            <target refid="class-renderingserver-constant-primitive-line-strip"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-primitive-line-strip" names="class_renderingserver_constant_primitive_line_strip"><reference internal="True" refid="enum-renderingserver-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> <strong>PRIMITIVE_LINE_STRIP</strong> = <literal>2</literal></paragraph>
            <paragraph>绘制的图元由单条线带组成。</paragraph>
            <target refid="class-renderingserver-constant-primitive-triangles"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-primitive-triangles" names="class_renderingserver_constant_primitive_triangles"><reference internal="True" refid="enum-renderingserver-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> <strong>PRIMITIVE_TRIANGLES</strong> = <literal>3</literal></paragraph>
            <paragraph>绘制的图元由三角形组成。</paragraph>
            <target refid="class-renderingserver-constant-primitive-triangle-strip"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-primitive-triangle-strip" names="class_renderingserver_constant_primitive_triangle_strip"><reference internal="True" refid="enum-renderingserver-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> <strong>PRIMITIVE_TRIANGLE_STRIP</strong> = <literal>4</literal></paragraph>
            <paragraph>绘制的图元由单条三角形带组成（最后 3 个顶点总是会构成三角形）。</paragraph>
            <target refid="class-renderingserver-constant-primitive-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-primitive-max" names="class_renderingserver_constant_primitive_max"><reference internal="True" refid="enum-renderingserver-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> <strong>PRIMITIVE_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-blendshapemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-blendshapemode" names="enum_renderingserver_blendshapemode">enum <strong>BlendShapeMode</strong>: <reference internal="True" refid="enum-renderingserver-blendshapemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-blend-shape-mode-normalized"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-blend-shape-mode-normalized" names="class_renderingserver_constant_blend_shape_mode_normalized"><reference internal="True" refid="enum-renderingserver-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference> <strong>BLEND_SHAPE_MODE_NORMALIZED</strong> = <literal>0</literal></paragraph>
            <paragraph>混合形状是被归一化了的。</paragraph>
            <target refid="class-renderingserver-constant-blend-shape-mode-relative"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-blend-shape-mode-relative" names="class_renderingserver_constant_blend_shape_mode_relative"><reference internal="True" refid="enum-renderingserver-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference> <strong>BLEND_SHAPE_MODE_RELATIVE</strong> = <literal>1</literal></paragraph>
            <paragraph>混合形状是相对于基础的权重。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-multimeshtransformformat"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-multimeshtransformformat" names="enum_renderingserver_multimeshtransformformat">enum <strong>MultimeshTransformFormat</strong>: <reference internal="True" refid="enum-renderingserver-multimeshtransformformat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-multimesh-transform-2d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-multimesh-transform-2d" names="class_renderingserver_constant_multimesh_transform_2d"><reference internal="True" refid="enum-renderingserver-multimeshtransformformat"><inline classes="std std-ref">MultimeshTransformFormat</inline></reference> <strong>MULTIMESH_TRANSFORM_2D</strong> = <literal>0</literal></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> 存储 MultiMesh 变换。</paragraph>
            <target refid="class-renderingserver-constant-multimesh-transform-3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-multimesh-transform-3d" names="class_renderingserver_constant_multimesh_transform_3d"><reference internal="True" refid="enum-renderingserver-multimeshtransformformat"><inline classes="std std-ref">MultimeshTransformFormat</inline></reference> <strong>MULTIMESH_TRANSFORM_3D</strong> = <literal>1</literal></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> 存储 MultiMesh 变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-lightprojectorfilter"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-lightprojectorfilter" names="enum_renderingserver_lightprojectorfilter">enum <strong>LightProjectorFilter</strong>: <reference internal="True" refid="enum-renderingserver-lightprojectorfilter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-light-projector-filter-nearest"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-projector-filter-nearest" names="class_renderingserver_constant_light_projector_filter_nearest"><reference internal="True" refid="enum-renderingserver-lightprojectorfilter"><inline classes="std std-ref">LightProjectorFilter</inline></reference> <strong>LIGHT_PROJECTOR_FILTER_NEAREST</strong> = <literal>0</literal></paragraph>
            <paragraph>光线投射器的最近邻过滤（用于像素风光线投射器）。渲染时不使用 mipmap，这意味着较远处的光线投射器看上去会很锐利，但会有颗粒状的图案。与使用 mipmap 的性能开销大致相同。</paragraph>
            <target refid="class-renderingserver-constant-light-projector-filter-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-projector-filter-linear" names="class_renderingserver_constant_light_projector_filter_linear"><reference internal="True" refid="enum-renderingserver-lightprojectorfilter"><inline classes="std std-ref">LightProjectorFilter</inline></reference> <strong>LIGHT_PROJECTOR_FILTER_LINEAR</strong> = <literal>1</literal></paragraph>
            <paragraph>光线投射器的线性过滤（用于非像素风光线投射器）。渲染时不使用 mipmap，这意味着较远处的光线投射器看上去会很平滑，但会有模糊的效果。与使用 mipmap 的性能开销大致相同。</paragraph>
            <target refid="class-renderingserver-constant-light-projector-filter-nearest-mipmaps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-projector-filter-nearest-mipmaps" names="class_renderingserver_constant_light_projector_filter_nearest_mipmaps"><reference internal="True" refid="enum-renderingserver-lightprojectorfilter"><inline classes="std std-ref">LightProjectorFilter</inline></reference> <strong>LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS</strong> = <literal>2</literal></paragraph>
            <paragraph>光线投射器的最近邻过滤（用于像素风光线投射器）。渲染时使用各向同性的 mipmap，这意味着较远处的光线投射器看上去会很平滑，但会有模糊的效果。与不使用 mipmap 的性能开销大致相同。</paragraph>
            <target refid="class-renderingserver-constant-light-projector-filter-linear-mipmaps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-projector-filter-linear-mipmaps" names="class_renderingserver_constant_light_projector_filter_linear_mipmaps"><reference internal="True" refid="enum-renderingserver-lightprojectorfilter"><inline classes="std std-ref">LightProjectorFilter</inline></reference> <strong>LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS</strong> = <literal>3</literal></paragraph>
            <paragraph>光线投射器的线性过滤（用于非像素风光线投射器）。渲染时使用各向同性的 mipmap，这意味着较远处的光线投射器看上去会很平滑，但会有模糊的效果。与不使用 mipmap 的性能开销大致相同。</paragraph>
            <target refid="class-renderingserver-constant-light-projector-filter-nearest-mipmaps-anisotropic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-projector-filter-nearest-mipmaps-anisotropic" names="class_renderingserver_constant_light_projector_filter_nearest_mipmaps_anisotropic"><reference internal="True" refid="enum-renderingserver-lightprojectorfilter"><inline classes="std std-ref">LightProjectorFilter</inline></reference> <strong>LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS_ANISOTROPIC</strong> = <literal>4</literal></paragraph>
            <paragraph>光线投射器的最近邻过滤（用于像素风光线投射器）。渲染时使用各向异性的 mipmap，这意味着光线投射器从斜角度观察会既平滑又锐利。比各向同性的 mipmap 更好看，但也更慢。各向异性的级别由 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-anisotropic-filtering-level"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</inline></reference> 定义。</paragraph>
            <target refid="class-renderingserver-constant-light-projector-filter-linear-mipmaps-anisotropic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-projector-filter-linear-mipmaps-anisotropic" names="class_renderingserver_constant_light_projector_filter_linear_mipmaps_anisotropic"><reference internal="True" refid="enum-renderingserver-lightprojectorfilter"><inline classes="std std-ref">LightProjectorFilter</inline></reference> <strong>LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS_ANISOTROPIC</strong> = <literal>5</literal></paragraph>
            <paragraph>光线投射器的线性过滤（用于非像素风光线投射器）。渲染时使用各向异性的 mipmap，这意味着光线投射器从斜角度观察会既平滑又锐利。比各向同性的 mipmap 更好看，但也更慢。各向异性的级别由 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-anisotropic-filtering-level"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</inline></reference> 定义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-lighttype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-lighttype" names="enum_renderingserver_lighttype">enum <strong>LightType</strong>: <reference internal="True" refid="enum-renderingserver-lighttype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-light-directional"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-directional" names="class_renderingserver_constant_light_directional"><reference internal="True" refid="enum-renderingserver-lighttype"><inline classes="std std-ref">LightType</inline></reference> <strong>LIGHT_DIRECTIONAL</strong> = <literal>0</literal></paragraph>
            <paragraph>方向（太阳/月亮）灯（见 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-light-omni"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-omni" names="class_renderingserver_constant_light_omni"><reference internal="True" refid="enum-renderingserver-lighttype"><inline classes="std std-ref">LightType</inline></reference> <strong>LIGHT_OMNI</strong> = <literal>1</literal></paragraph>
            <paragraph>全向灯（见 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-light-spot"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-spot" names="class_renderingserver_constant_light_spot"><reference internal="True" refid="enum-renderingserver-lighttype"><inline classes="std std-ref">LightType</inline></reference> <strong>LIGHT_SPOT</strong> = <literal>2</literal></paragraph>
            <paragraph>聚光灯（见 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-lightparam"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-lightparam" names="enum_renderingserver_lightparam">enum <strong>LightParam</strong>: <reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-light-param-energy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-energy" names="class_renderingserver_constant_light_param_energy"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_ENERGY</strong> = <literal>0</literal></paragraph>
            <paragraph>该灯光的能量倍数。</paragraph>
            <target refid="class-renderingserver-constant-light-param-indirect-energy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-indirect-energy" names="class_renderingserver_constant_light_param_indirect_energy"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_INDIRECT_ENERGY</strong> = <literal>1</literal></paragraph>
            <paragraph>该灯光的间接能量倍数（最终的间接能量为 <reference internal="True" refid="class-renderingserver-constant-light-param-energy"><inline classes="std std-ref">LIGHT_PARAM_ENERGY</inline></reference> * <reference internal="True" refid="class-renderingserver-constant-light-param-indirect-energy"><inline classes="std std-ref">LIGHT_PARAM_INDIRECT_ENERGY</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-light-param-volumetric-fog-energy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-volumetric-fog-energy" names="class_renderingserver_constant_light_param_volumetric_fog_energy"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_VOLUMETRIC_FOG_ENERGY</strong> = <literal>2</literal></paragraph>
            <paragraph>该灯光的体积雾能量倍数（最终的体积雾能量为 <reference internal="True" refid="class-renderingserver-constant-light-param-energy"><inline classes="std std-ref">LIGHT_PARAM_ENERGY</inline></reference> * <reference internal="True" refid="class-renderingserver-constant-light-param-volumetric-fog-energy"><inline classes="std std-ref">LIGHT_PARAM_VOLUMETRIC_FOG_ENERGY</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-light-param-specular"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-specular" names="class_renderingserver_constant_light_param_specular"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SPECULAR</strong> = <literal>3</literal></paragraph>
            <paragraph>灯光对镜面反射的影响。</paragraph>
            <target refid="class-renderingserver-constant-light-param-range"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-range" names="class_renderingserver_constant_light_param_range"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_RANGE</strong> = <literal>4</literal></paragraph>
            <paragraph>灯光的范围。</paragraph>
            <target refid="class-renderingserver-constant-light-param-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-size" names="class_renderingserver_constant_light_param_size"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SIZE</strong> = <literal>5</literal></paragraph>
            <paragraph>使用聚光灯或全向灯时的灯光大小。使用定向光时是光的角度大小。</paragraph>
            <target refid="class-renderingserver-constant-light-param-attenuation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-attenuation" names="class_renderingserver_constant_light_param_attenuation"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_ATTENUATION</strong> = <literal>6</literal></paragraph>
            <paragraph>光线的衰减。</paragraph>
            <target refid="class-renderingserver-constant-light-param-spot-angle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-spot-angle" names="class_renderingserver_constant_light_param_spot_angle"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SPOT_ANGLE</strong> = <literal>7</literal></paragraph>
            <paragraph>聚光灯的角度。</paragraph>
            <target refid="class-renderingserver-constant-light-param-spot-attenuation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-spot-attenuation" names="class_renderingserver_constant_light_param_spot_attenuation"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SPOT_ATTENUATION</strong> = <literal>8</literal></paragraph>
            <paragraph>聚光灯的衰减。</paragraph>
            <target refid="class-renderingserver-constant-light-param-shadow-max-distance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-shadow-max-distance" names="class_renderingserver_constant_light_param_shadow_max_distance"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SHADOW_MAX_DISTANCE</strong> = <literal>9</literal></paragraph>
            <paragraph>阴影分割的最大距离。将这个值增大会让定向阴影在更远处可见，代价是整体的阴影细节降低和性能（因为渲染定向阴影时需要包含更多的物体）。</paragraph>
            <target refid="class-renderingserver-constant-light-param-shadow-split-1-offset"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-shadow-split-1-offset" names="class_renderingserver_constant_light_param_shadow_split_1_offset"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET</strong> = <literal>10</literal></paragraph>
            <paragraph>第一次拆分所占据的阴影图集的比例。</paragraph>
            <target refid="class-renderingserver-constant-light-param-shadow-split-2-offset"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-shadow-split-2-offset" names="class_renderingserver_constant_light_param_shadow_split_2_offset"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET</strong> = <literal>11</literal></paragraph>
            <paragraph>第二次拆分所占用的阴影图集的比例。</paragraph>
            <target refid="class-renderingserver-constant-light-param-shadow-split-3-offset"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-shadow-split-3-offset" names="class_renderingserver_constant_light_param_shadow_split_3_offset"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET</strong> = <literal>12</literal></paragraph>
            <paragraph>第三次拆分所占用的阴影图集的比例。第四个拆分占据了其余部分。</paragraph>
            <target refid="class-renderingserver-constant-light-param-shadow-fade-start"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-shadow-fade-start" names="class_renderingserver_constant_light_param_shadow_fade_start"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SHADOW_FADE_START</strong> = <literal>13</literal></paragraph>
            <paragraph>阴影将开始淡出的阴影最大距离的比例。</paragraph>
            <target refid="class-renderingserver-constant-light-param-shadow-normal-bias"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-shadow-normal-bias" names="class_renderingserver_constant_light_param_shadow_normal_bias"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SHADOW_NORMAL_BIAS</strong> = <literal>14</literal></paragraph>
            <paragraph>法线偏置，用于抵消物体法线的阴影查找。可以用来修复自阴影的伪影。</paragraph>
            <target refid="class-renderingserver-constant-light-param-shadow-bias"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-shadow-bias" names="class_renderingserver_constant_light_param_shadow_bias"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SHADOW_BIAS</strong> = <literal>15</literal></paragraph>
            <paragraph>对阴影查找进行偏置，以修复自我阴影的假象。</paragraph>
            <target refid="class-renderingserver-constant-light-param-shadow-pancake-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-shadow-pancake-size" names="class_renderingserver_constant_light_param_shadow_pancake_size"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SHADOW_PANCAKE_SIZE</strong> = <literal>16</literal></paragraph>
            <paragraph>设置定向阴影压平区域的大小。压平区域会偏移阴影相机视锥体的起点，为阴影提供更高的有效深度分辨率。但是，较大的压平区大小会导致靠近视锥体边缘的大型物体的阴影出现伪影。减少压平区大小会有所帮助。将大小设置为 <literal>0</literal> 会关闭该压平效果。</paragraph>
            <target refid="class-renderingserver-constant-light-param-shadow-opacity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-shadow-opacity" names="class_renderingserver_constant_light_param_shadow_opacity"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SHADOW_OPACITY</strong> = <literal>17</literal></paragraph>
            <paragraph>灯光的阴影不透明度。低于 <literal>1.0</literal> 的值会使光线透过阴影出现。这可以用于以较低的性能成本伪造全局照明。</paragraph>
            <target refid="class-renderingserver-constant-light-param-shadow-blur"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-shadow-blur" names="class_renderingserver_constant_light_param_shadow_blur"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_SHADOW_BLUR</strong> = <literal>18</literal></paragraph>
            <paragraph>模糊阴影的边缘。可用于隐藏低分辨率阴影贴图中的像素伪影。较高的值会使阴影显得粗糙，并可能导致其他不需要的伪影。尽量保持接近默认值。</paragraph>
            <target refid="class-renderingserver-constant-light-param-transmittance-bias"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-transmittance-bias" names="class_renderingserver_constant_light_param_transmittance_bias"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_TRANSMITTANCE_BIAS</strong> = <literal>19</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-light-param-intensity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-intensity" names="class_renderingserver_constant_light_param_intensity"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_INTENSITY</strong> = <literal>20</literal></paragraph>
            <paragraph>代表灯光强度的常量，<reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference> 和 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference> 的单位为流明，<reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference> 的单位为勒克斯。仅在 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-lights-and-shadows-use-physical-light-units"><inline classes="std std-ref">ProjectSettings.rendering/lights_and_shadows/use_physical_light_units</inline></reference> 为 <literal>true</literal> 时使用。</paragraph>
            <target refid="class-renderingserver-constant-light-param-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-param-max" names="class_renderingserver_constant_light_param_max"><reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> <strong>LIGHT_PARAM_MAX</strong> = <literal>21</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-lightbakemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-lightbakemode" names="enum_renderingserver_lightbakemode">enum <strong>LightBakeMode</strong>: <reference internal="True" refid="enum-renderingserver-lightbakemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-light-bake-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-bake-disabled" names="class_renderingserver_constant_light_bake_disabled"><reference internal="True" refid="enum-renderingserver-lightbakemode"><inline classes="std std-ref">LightBakeMode</inline></reference> <strong>LIGHT_BAKE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>烘焙时灯光将被忽略。这是最快的模式，但是在烘焙全局照明时仍会考虑该灯光。该模式通常应用于快速变化的动态灯光，因为全局照明的效果在这些灯光上不太明显。</paragraph>
            <target refid="class-renderingserver-constant-light-bake-static"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-bake-static" names="class_renderingserver_constant_light_bake_static"><reference internal="True" refid="enum-renderingserver-lightbakemode"><inline classes="std std-ref">LightBakeMode</inline></reference> <strong>LIGHT_BAKE_STATIC</strong> = <literal>1</literal></paragraph>
            <paragraph>在静态烘焙（<reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference>、<reference internal="True" refuri="class_lightmapgi#class-lightmapgi"><inline classes="std std-ref">LightmapGI</inline></reference>、SDFGI（<reference internal="True" refuri="class_environment#class-environment-property-sdfgi-enabled"><inline classes="std std-ref">Environment.sdfgi_enabled</inline></reference>））时，考虑了灯光。灯光可以四处移动或修改，但其全局照明不会实时更新。这适用于细微的变化（例如闪烁的手电筒），但通常不适用于大的变化，例如打开和关闭灯光。</paragraph>
            <target refid="class-renderingserver-constant-light-bake-dynamic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-bake-dynamic" names="class_renderingserver_constant_light_bake_dynamic"><reference internal="True" refid="enum-renderingserver-lightbakemode"><inline classes="std std-ref">LightBakeMode</inline></reference> <strong>LIGHT_BAKE_DYNAMIC</strong> = <literal>2</literal></paragraph>
            <paragraph>动态烘焙时考虑灯光（仅 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 和 SDFGI（<reference internal="True" refuri="class_environment#class-environment-property-sdfgi-enabled"><inline classes="std std-ref">Environment.sdfgi_enabled</inline></reference>））。灯光可以四处移动或修改，全局照明会实时更新。灯光的全局照明效果与 <reference internal="True" refid="class-renderingserver-constant-light-bake-static"><inline classes="std std-ref">LIGHT_BAKE_STATIC</inline></reference> 略有不同。性能开销比 <reference internal="True" refid="class-renderingserver-constant-light-bake-static"><inline classes="std std-ref">LIGHT_BAKE_STATIC</inline></reference> 更大。使用 SDFGI 时，动态灯光的更新速度受 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-global-illumination-sdfgi-frames-to-update-lights"><inline classes="std std-ref">ProjectSettings.rendering/global_illumination/sdfgi/frames_to_update_lights</inline></reference> 的影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-lightomnishadowmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-lightomnishadowmode" names="enum_renderingserver_lightomnishadowmode">enum <strong>LightOmniShadowMode</strong>: <reference internal="True" refid="enum-renderingserver-lightomnishadowmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-light-omni-shadow-dual-paraboloid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-omni-shadow-dual-paraboloid" names="class_renderingserver_constant_light_omni_shadow_dual_paraboloid"><reference internal="True" refid="enum-renderingserver-lightomnishadowmode"><inline classes="std std-ref">LightOmniShadowMode</inline></reference> <strong>LIGHT_OMNI_SHADOW_DUAL_PARABOLOID</strong> = <literal>0</literal></paragraph>
            <paragraph>对全向光使用双抛物面阴影贴图。</paragraph>
            <target refid="class-renderingserver-constant-light-omni-shadow-cube"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-omni-shadow-cube" names="class_renderingserver_constant_light_omni_shadow_cube"><reference internal="True" refid="enum-renderingserver-lightomnishadowmode"><inline classes="std std-ref">LightOmniShadowMode</inline></reference> <strong>LIGHT_OMNI_SHADOW_CUBE</strong> = <literal>1</literal></paragraph>
            <paragraph>对全向光使用立方体贴图阴影贴图。比双抛物面更慢但质量更好。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-lightdirectionalshadowmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-lightdirectionalshadowmode" names="enum_renderingserver_lightdirectionalshadowmode">enum <strong>LightDirectionalShadowMode</strong>: <reference internal="True" refid="enum-renderingserver-lightdirectionalshadowmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-light-directional-shadow-orthogonal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-directional-shadow-orthogonal" names="class_renderingserver_constant_light_directional_shadow_orthogonal"><reference internal="True" refid="enum-renderingserver-lightdirectionalshadowmode"><inline classes="std std-ref">LightDirectionalShadowMode</inline></reference> <strong>LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL</strong> = <literal>0</literal></paragraph>
            <paragraph>对平行光使用正交阴影投影。</paragraph>
            <target refid="class-renderingserver-constant-light-directional-shadow-parallel-2-splits"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-directional-shadow-parallel-2-splits" names="class_renderingserver_constant_light_directional_shadow_parallel_2_splits"><reference internal="True" refid="enum-renderingserver-lightdirectionalshadowmode"><inline classes="std std-ref">LightDirectionalShadowMode</inline></reference> <strong>LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS</strong> = <literal>1</literal></paragraph>
            <paragraph>使用平行光时，使用 2 个分割进行阴影投影。</paragraph>
            <target refid="class-renderingserver-constant-light-directional-shadow-parallel-4-splits"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-directional-shadow-parallel-4-splits" names="class_renderingserver_constant_light_directional_shadow_parallel_4_splits"><reference internal="True" refid="enum-renderingserver-lightdirectionalshadowmode"><inline classes="std std-ref">LightDirectionalShadowMode</inline></reference> <strong>LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS</strong> = <literal>2</literal></paragraph>
            <paragraph>使用平行光时，使用 4 个分割进行阴影投影。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-lightdirectionalskymode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-lightdirectionalskymode" names="enum_renderingserver_lightdirectionalskymode">enum <strong>LightDirectionalSkyMode</strong>: <reference internal="True" refid="enum-renderingserver-lightdirectionalskymode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-light-directional-sky-mode-light-and-sky"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-directional-sky-mode-light-and-sky" names="class_renderingserver_constant_light_directional_sky_mode_light_and_sky"><reference internal="True" refid="enum-renderingserver-lightdirectionalskymode"><inline classes="std std-ref">LightDirectionalSkyMode</inline></reference> <strong>LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_AND_SKY</strong> = <literal>0</literal></paragraph>
            <paragraph>在天空渲染和场景照明中都使用 DirectionalLight3D。</paragraph>
            <target refid="class-renderingserver-constant-light-directional-sky-mode-light-only"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-directional-sky-mode-light-only" names="class_renderingserver_constant_light_directional_sky_mode_light_only"><reference internal="True" refid="enum-renderingserver-lightdirectionalskymode"><inline classes="std std-ref">LightDirectionalSkyMode</inline></reference> <strong>LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_ONLY</strong> = <literal>1</literal></paragraph>
            <paragraph>仅在场景照明中使用 DirectionalLight3D。</paragraph>
            <target refid="class-renderingserver-constant-light-directional-sky-mode-sky-only"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-light-directional-sky-mode-sky-only" names="class_renderingserver_constant_light_directional_sky_mode_sky_only"><reference internal="True" refid="enum-renderingserver-lightdirectionalskymode"><inline classes="std std-ref">LightDirectionalSkyMode</inline></reference> <strong>LIGHT_DIRECTIONAL_SKY_MODE_SKY_ONLY</strong> = <literal>2</literal></paragraph>
            <paragraph>仅在天空渲染中使用 DirectionalLight3D。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-shadowquality"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-shadowquality" names="enum_renderingserver_shadowquality">enum <strong>ShadowQuality</strong>: <reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-shadow-quality-hard"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shadow-quality-hard" names="class_renderingserver_constant_shadow_quality_hard"><reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">ShadowQuality</inline></reference> <strong>SHADOW_QUALITY_HARD</strong> = <literal>0</literal></paragraph>
            <paragraph>最低的阴影过滤质量（最快）。使用这种质量设置时，软阴影不可用，这意味着如果 <reference internal="True" refuri="class_light3d#class-light3d-property-light-size"><inline classes="std std-ref">Light3D.light_size</inline></reference> 和 <reference internal="True" refuri="class_light3d#class-light3d-property-light-angular-distance"><inline classes="std std-ref">Light3D.light_angular_distance</inline></reference> 为 <literal>0.0</literal>，则会忽略 <reference internal="True" refuri="class_light3d#class-light3d-property-shadow-blur"><inline classes="std std-ref">Light3D.shadow_blur</inline></reference> 属性。</paragraph>
            <paragraph><strong>注意：</strong>使用硬阴影过滤时，由 <reference internal="True" refuri="class_light3d#class-light3d-property-light-size"><inline classes="std std-ref">Light3D.light_size</inline></reference> 和 <reference internal="True" refuri="class_light3d#class-light3d-property-light-angular-distance"><inline classes="std std-ref">Light3D.light_angular_distance</inline></reference> 执行的可变阴影模糊仍然有效。在这种情况下<emphasis>会</emphasis>考虑 <reference internal="True" refuri="class_light3d#class-light3d-property-shadow-blur"><inline classes="std std-ref">Light3D.shadow_blur</inline></reference>。但是不会对结果进行模糊处理，而是将模糊量视为半影的最大半径。</paragraph>
            <target refid="class-renderingserver-constant-shadow-quality-soft-very-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shadow-quality-soft-very-low" names="class_renderingserver_constant_shadow_quality_soft_very_low"><reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">ShadowQuality</inline></reference> <strong>SHADOW_QUALITY_SOFT_VERY_LOW</strong> = <literal>1</literal></paragraph>
            <paragraph>非常低的阴影过滤质量（更快）。使用该质量设置时，<reference internal="True" refuri="class_light3d#class-light3d-property-shadow-blur"><inline classes="std std-ref">Light3D.shadow_blur</inline></reference> 会自动乘以 0.75 倍以避免引入过多的噪点。该划分仅适用于 <reference internal="True" refuri="class_light3d#class-light3d-property-light-size"><inline classes="std std-ref">Light3D.light_size</inline></reference> 或 <reference internal="True" refuri="class_light3d#class-light3d-property-light-angular-distance"><inline classes="std std-ref">Light3D.light_angular_distance</inline></reference> 为 <literal>0.0</literal> 的灯光。</paragraph>
            <target refid="class-renderingserver-constant-shadow-quality-soft-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shadow-quality-soft-low" names="class_renderingserver_constant_shadow_quality_soft_low"><reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">ShadowQuality</inline></reference> <strong>SHADOW_QUALITY_SOFT_LOW</strong> = <literal>2</literal></paragraph>
            <paragraph>低阴影过滤质量（快速）。</paragraph>
            <target refid="class-renderingserver-constant-shadow-quality-soft-medium"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shadow-quality-soft-medium" names="class_renderingserver_constant_shadow_quality_soft_medium"><reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">ShadowQuality</inline></reference> <strong>SHADOW_QUALITY_SOFT_MEDIUM</strong> = <literal>3</literal></paragraph>
            <paragraph>中低阴影过滤质量（平均）。</paragraph>
            <target refid="class-renderingserver-constant-shadow-quality-soft-high"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shadow-quality-soft-high" names="class_renderingserver_constant_shadow_quality_soft_high"><reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">ShadowQuality</inline></reference> <strong>SHADOW_QUALITY_SOFT_HIGH</strong> = <literal>4</literal></paragraph>
            <paragraph>高低阴影过滤质量（慢）。使用该质量设置时，<reference internal="True" refuri="class_light3d#class-light3d-property-shadow-blur"><inline classes="std std-ref">Light3D.shadow_blur</inline></reference> 会自动乘以 1.5 倍以更好地利用高样本数。这种增加的模糊还提高了动态对象阴影的稳定性。该乘数仅适用于 <reference internal="True" refuri="class_light3d#class-light3d-property-light-size"><inline classes="std std-ref">Light3D.light_size</inline></reference> 或 <reference internal="True" refuri="class_light3d#class-light3d-property-light-angular-distance"><inline classes="std std-ref">Light3D.light_angular_distance</inline></reference> 为 <literal>0.0</literal> 的灯光。</paragraph>
            <target refid="class-renderingserver-constant-shadow-quality-soft-ultra"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shadow-quality-soft-ultra" names="class_renderingserver_constant_shadow_quality_soft_ultra"><reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">ShadowQuality</inline></reference> <strong>SHADOW_QUALITY_SOFT_ULTRA</strong> = <literal>5</literal></paragraph>
            <paragraph>最高的低阴影过滤质量（最慢）。使用该质量设置时，<reference internal="True" refuri="class_light3d#class-light3d-property-shadow-blur"><inline classes="std std-ref">Light3D.shadow_blur</inline></reference> 会自动乘以 2 倍以更好地利用高样本数。这种增加的模糊还提高了动态对象阴影的稳定性。该乘数仅适用于 <reference internal="True" refuri="class_light3d#class-light3d-property-light-size"><inline classes="std std-ref">Light3D.light_size</inline></reference> 或 <reference internal="True" refuri="class_light3d#class-light3d-property-light-angular-distance"><inline classes="std std-ref">Light3D.light_angular_distance</inline></reference> 为 <literal>0.0</literal> 的灯光。</paragraph>
            <target refid="class-renderingserver-constant-shadow-quality-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shadow-quality-max" names="class_renderingserver_constant_shadow_quality_max"><reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">ShadowQuality</inline></reference> <strong>SHADOW_QUALITY_MAX</strong> = <literal>6</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">ShadowQuality</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-reflectionprobeupdatemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-reflectionprobeupdatemode" names="enum_renderingserver_reflectionprobeupdatemode">enum <strong>ReflectionProbeUpdateMode</strong>: <reference internal="True" refid="enum-renderingserver-reflectionprobeupdatemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-reflection-probe-update-once"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-reflection-probe-update-once" names="class_renderingserver_constant_reflection_probe_update_once"><reference internal="True" refid="enum-renderingserver-reflectionprobeupdatemode"><inline classes="std std-ref">ReflectionProbeUpdateMode</inline></reference> <strong>REFLECTION_PROBE_UPDATE_ONCE</strong> = <literal>0</literal></paragraph>
            <paragraph>反射探针将更新一次反射，然后停止。</paragraph>
            <target refid="class-renderingserver-constant-reflection-probe-update-always"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-reflection-probe-update-always" names="class_renderingserver_constant_reflection_probe_update_always"><reference internal="True" refid="enum-renderingserver-reflectionprobeupdatemode"><inline classes="std std-ref">ReflectionProbeUpdateMode</inline></reference> <strong>REFLECTION_PROBE_UPDATE_ALWAYS</strong> = <literal>1</literal></paragraph>
            <paragraph>反射探针将每帧更新。这种模式对于捕捉移动物体是必要的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-reflectionprobeambientmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-reflectionprobeambientmode" names="enum_renderingserver_reflectionprobeambientmode">enum <strong>ReflectionProbeAmbientMode</strong>: <reference internal="True" refid="enum-renderingserver-reflectionprobeambientmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-reflection-probe-ambient-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-reflection-probe-ambient-disabled" names="class_renderingserver_constant_reflection_probe_ambient_disabled"><reference internal="True" refid="enum-renderingserver-reflectionprobeambientmode"><inline classes="std std-ref">ReflectionProbeAmbientMode</inline></reference> <strong>REFLECTION_PROBE_AMBIENT_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>不要在反射探针的区域内应用任何环境光，区域由探针的大小决定。</paragraph>
            <target refid="class-renderingserver-constant-reflection-probe-ambient-environment"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-reflection-probe-ambient-environment" names="class_renderingserver_constant_reflection_probe_ambient_environment"><reference internal="True" refid="enum-renderingserver-reflectionprobeambientmode"><inline classes="std std-ref">ReflectionProbeAmbientMode</inline></reference> <strong>REFLECTION_PROBE_AMBIENT_ENVIRONMENT</strong> = <literal>1</literal></paragraph>
            <paragraph>在反射探针的区域内应用自动来源的环境光照，区域由探针的大小决定。</paragraph>
            <target refid="class-renderingserver-constant-reflection-probe-ambient-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-reflection-probe-ambient-color" names="class_renderingserver_constant_reflection_probe_ambient_color"><reference internal="True" refid="enum-renderingserver-reflectionprobeambientmode"><inline classes="std std-ref">ReflectionProbeAmbientMode</inline></reference> <strong>REFLECTION_PROBE_AMBIENT_COLOR</strong> = <literal>2</literal></paragraph>
            <paragraph>在反射探针的区域内应用自定义环境光，区域由探针的大小决定。见 <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-ambient-color"><inline classes="std std-ref">reflection_probe_set_ambient_color</inline></reference> 和 <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-ambient-energy"><inline classes="std std-ref">reflection_probe_set_ambient_energy</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-decaltexture"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-decaltexture" names="enum_renderingserver_decaltexture">enum <strong>DecalTexture</strong>: <reference internal="True" refid="enum-renderingserver-decaltexture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-decal-texture-albedo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-decal-texture-albedo" names="class_renderingserver_constant_decal_texture_albedo"><reference internal="True" refid="enum-renderingserver-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> <strong>DECAL_TEXTURE_ALBEDO</strong> = <literal>0</literal></paragraph>
            <paragraph>贴花中的反照率纹理（<reference internal="True" refuri="class_decal#class-decal-property-texture-albedo"><inline classes="std std-ref">Decal.texture_albedo</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-decal-texture-normal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-decal-texture-normal" names="class_renderingserver_constant_decal_texture_normal"><reference internal="True" refid="enum-renderingserver-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> <strong>DECAL_TEXTURE_NORMAL</strong> = <literal>1</literal></paragraph>
            <paragraph>贴花中的法线贴图纹理（<reference internal="True" refuri="class_decal#class-decal-property-texture-normal"><inline classes="std std-ref">Decal.texture_normal</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-decal-texture-orm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-decal-texture-orm" names="class_renderingserver_constant_decal_texture_orm"><reference internal="True" refid="enum-renderingserver-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> <strong>DECAL_TEXTURE_ORM</strong> = <literal>2</literal></paragraph>
            <paragraph>贴花中的遮蔽/粗糙度/金属性纹理（<reference internal="True" refuri="class_decal#class-decal-property-texture-orm"><inline classes="std std-ref">Decal.texture_orm</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-decal-texture-emission"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-decal-texture-emission" names="class_renderingserver_constant_decal_texture_emission"><reference internal="True" refid="enum-renderingserver-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> <strong>DECAL_TEXTURE_EMISSION</strong> = <literal>3</literal></paragraph>
            <paragraph>贴花中的自发光纹理（<reference internal="True" refuri="class_decal#class-decal-property-texture-orm"><inline classes="std std-ref">Decal.texture_orm</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-decal-texture-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-decal-texture-max" names="class_renderingserver_constant_decal_texture_max"><reference internal="True" refid="enum-renderingserver-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> <strong>DECAL_TEXTURE_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-decalfilter"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-decalfilter" names="enum_renderingserver_decalfilter">enum <strong>DecalFilter</strong>: <reference internal="True" refid="enum-renderingserver-decalfilter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-decal-filter-nearest"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-decal-filter-nearest" names="class_renderingserver_constant_decal_filter_nearest"><reference internal="True" refid="enum-renderingserver-decalfilter"><inline classes="std std-ref">DecalFilter</inline></reference> <strong>DECAL_FILTER_NEAREST</strong> = <literal>0</literal></paragraph>
            <paragraph>贴花的最近邻过滤（用于像素风贴花）。渲染时不使用 mipmap，这意味着较远处的贴花看上去会很锐利，但会有颗粒状的图案。与使用 mipmap 的性能开销大致相同。</paragraph>
            <target refid="class-renderingserver-constant-decal-filter-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-decal-filter-linear" names="class_renderingserver_constant_decal_filter_linear"><reference internal="True" refid="enum-renderingserver-decalfilter"><inline classes="std std-ref">DecalFilter</inline></reference> <strong>DECAL_FILTER_LINEAR</strong> = <literal>1</literal></paragraph>
            <paragraph>贴花的线性过滤（用于非像素风贴花）。渲染时不使用 mipmap，这意味着较远处的贴花看上去会很平滑，但会有模糊的效果。与使用 mipmap 的性能开销大致相同。</paragraph>
            <target refid="class-renderingserver-constant-decal-filter-nearest-mipmaps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-decal-filter-nearest-mipmaps" names="class_renderingserver_constant_decal_filter_nearest_mipmaps"><reference internal="True" refid="enum-renderingserver-decalfilter"><inline classes="std std-ref">DecalFilter</inline></reference> <strong>DECAL_FILTER_NEAREST_MIPMAPS</strong> = <literal>2</literal></paragraph>
            <paragraph>贴花的最近邻过滤（用于像素风贴花）。渲染时使用各向同性的 mipmap，这意味着较远处的贴花看上去会很平滑，但会有模糊的效果。与不使用 mipmap 的性能开销大致相同。</paragraph>
            <target refid="class-renderingserver-constant-decal-filter-linear-mipmaps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-decal-filter-linear-mipmaps" names="class_renderingserver_constant_decal_filter_linear_mipmaps"><reference internal="True" refid="enum-renderingserver-decalfilter"><inline classes="std std-ref">DecalFilter</inline></reference> <strong>DECAL_FILTER_LINEAR_MIPMAPS</strong> = <literal>3</literal></paragraph>
            <paragraph>贴花的线性过滤（用于非像素风贴花）。渲染时使用各向同性的 mipmap，这意味着较远处的贴花看上去会很平滑，但会有模糊的效果。与不使用 mipmap 的性能开销大致相同。</paragraph>
            <target refid="class-renderingserver-constant-decal-filter-nearest-mipmaps-anisotropic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-decal-filter-nearest-mipmaps-anisotropic" names="class_renderingserver_constant_decal_filter_nearest_mipmaps_anisotropic"><reference internal="True" refid="enum-renderingserver-decalfilter"><inline classes="std std-ref">DecalFilter</inline></reference> <strong>DECAL_FILTER_NEAREST_MIPMAPS_ANISOTROPIC</strong> = <literal>4</literal></paragraph>
            <paragraph>贴花的最近邻过滤（用于像素风贴花）。渲染时使用各向异性的 mipmap，这意味着贴花从斜角度观察会既平滑又锐利。比各向同性的 mipmap 更好看，但也更慢。各向异性的级别由 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-anisotropic-filtering-level"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</inline></reference> 定义。</paragraph>
            <target refid="class-renderingserver-constant-decal-filter-linear-mipmaps-anisotropic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-decal-filter-linear-mipmaps-anisotropic" names="class_renderingserver_constant_decal_filter_linear_mipmaps_anisotropic"><reference internal="True" refid="enum-renderingserver-decalfilter"><inline classes="std std-ref">DecalFilter</inline></reference> <strong>DECAL_FILTER_LINEAR_MIPMAPS_ANISOTROPIC</strong> = <literal>5</literal></paragraph>
            <paragraph>贴花的线性过滤（用于非像素风贴花）。渲染时使用各向异性的 mipmap，这意味着贴花从斜角度观察会既平滑又锐利。比各向同性的 mipmap 更好看，但也更慢。各向异性的级别由 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-anisotropic-filtering-level"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</inline></reference> 定义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-voxelgiquality"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-voxelgiquality" names="enum_renderingserver_voxelgiquality">enum <strong>VoxelGIQuality</strong>: <reference internal="True" refid="enum-renderingserver-voxelgiquality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-voxel-gi-quality-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-voxel-gi-quality-low" names="class_renderingserver_constant_voxel_gi_quality_low"><reference internal="True" refid="enum-renderingserver-voxelgiquality"><inline classes="std std-ref">VoxelGIQuality</inline></reference> <strong>VOXEL_GI_QUALITY_LOW</strong> = <literal>0</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 较低渲染质量，使用 4 个锥体。</paragraph>
            <target refid="class-renderingserver-constant-voxel-gi-quality-high"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-voxel-gi-quality-high" names="class_renderingserver_constant_voxel_gi_quality_high"><reference internal="True" refid="enum-renderingserver-voxelgiquality"><inline classes="std std-ref">VoxelGIQuality</inline></reference> <strong>VOXEL_GI_QUALITY_HIGH</strong> = <literal>1</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 较高渲染质量，使用 6 个锥体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-particlesmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-particlesmode" names="enum_renderingserver_particlesmode">enum <strong>ParticlesMode</strong>: <reference internal="True" refid="enum-renderingserver-particlesmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-particles-mode-2d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-mode-2d" names="class_renderingserver_constant_particles_mode_2d"><reference internal="True" refid="enum-renderingserver-particlesmode"><inline classes="std std-ref">ParticlesMode</inline></reference> <strong>PARTICLES_MODE_2D</strong> = <literal>0</literal></paragraph>
            <paragraph>2D 粒子。</paragraph>
            <target refid="class-renderingserver-constant-particles-mode-3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-mode-3d" names="class_renderingserver_constant_particles_mode_3d"><reference internal="True" refid="enum-renderingserver-particlesmode"><inline classes="std std-ref">ParticlesMode</inline></reference> <strong>PARTICLES_MODE_3D</strong> = <literal>1</literal></paragraph>
            <paragraph>3D 粒子。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-particlestransformalign"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-particlestransformalign" names="enum_renderingserver_particlestransformalign">enum <strong>ParticlesTransformAlign</strong>: <reference internal="True" refid="enum-renderingserver-particlestransformalign"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-particles-transform-align-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-transform-align-disabled" names="class_renderingserver_constant_particles_transform_align_disabled"><reference internal="True" refid="enum-renderingserver-particlestransformalign"><inline classes="std std-ref">ParticlesTransformAlign</inline></reference> <strong>PARTICLES_TRANSFORM_ALIGN_DISABLED</strong> = <literal>0</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-transform-align-z-billboard"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-transform-align-z-billboard" names="class_renderingserver_constant_particles_transform_align_z_billboard"><reference internal="True" refid="enum-renderingserver-particlestransformalign"><inline classes="std std-ref">ParticlesTransformAlign</inline></reference> <strong>PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD</strong> = <literal>1</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-transform-align-y-to-velocity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-transform-align-y-to-velocity" names="class_renderingserver_constant_particles_transform_align_y_to_velocity"><reference internal="True" refid="enum-renderingserver-particlestransformalign"><inline classes="std std-ref">ParticlesTransformAlign</inline></reference> <strong>PARTICLES_TRANSFORM_ALIGN_Y_TO_VELOCITY</strong> = <literal>2</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-transform-align-z-billboard-y-to-velocity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-transform-align-z-billboard-y-to-velocity" names="class_renderingserver_constant_particles_transform_align_z_billboard_y_to_velocity"><reference internal="True" refid="enum-renderingserver-particlestransformalign"><inline classes="std std-ref">ParticlesTransformAlign</inline></reference> <strong>PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY</strong> = <literal>3</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-particlesdraworder"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-particlesdraworder" names="enum_renderingserver_particlesdraworder">enum <strong>ParticlesDrawOrder</strong>: <reference internal="True" refid="enum-renderingserver-particlesdraworder"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-particles-draw-order-index"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-draw-order-index" names="class_renderingserver_constant_particles_draw_order_index"><reference internal="True" refid="enum-renderingserver-particlesdraworder"><inline classes="std std-ref">ParticlesDrawOrder</inline></reference> <strong>PARTICLES_DRAW_ORDER_INDEX</strong> = <literal>0</literal></paragraph>
            <paragraph>按照粒子数组中出现的顺序绘制粒子。</paragraph>
            <target refid="class-renderingserver-constant-particles-draw-order-lifetime"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-draw-order-lifetime" names="class_renderingserver_constant_particles_draw_order_lifetime"><reference internal="True" refid="enum-renderingserver-particlesdraworder"><inline classes="std std-ref">ParticlesDrawOrder</inline></reference> <strong>PARTICLES_DRAW_ORDER_LIFETIME</strong> = <literal>1</literal></paragraph>
            <paragraph>根据粒子的寿命对其进行排序。换句话说，寿命最长的粒子被绘制在前面。</paragraph>
            <target refid="class-renderingserver-constant-particles-draw-order-reverse-lifetime"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-draw-order-reverse-lifetime" names="class_renderingserver_constant_particles_draw_order_reverse_lifetime"><reference internal="True" refid="enum-renderingserver-particlesdraworder"><inline classes="std std-ref">ParticlesDrawOrder</inline></reference> <strong>PARTICLES_DRAW_ORDER_REVERSE_LIFETIME</strong> = <literal>2</literal></paragraph>
            <paragraph>根据粒子寿命的倒数对粒子进行排序。换句话说，寿命最短的粒子被绘制在前面。</paragraph>
            <target refid="class-renderingserver-constant-particles-draw-order-view-depth"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-draw-order-view-depth" names="class_renderingserver_constant_particles_draw_order_view_depth"><reference internal="True" refid="enum-renderingserver-particlesdraworder"><inline classes="std std-ref">ParticlesDrawOrder</inline></reference> <strong>PARTICLES_DRAW_ORDER_VIEW_DEPTH</strong> = <literal>3</literal></paragraph>
            <paragraph>根据粒子与相机的距离对其进行排序。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-particlescollisiontype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-particlescollisiontype" names="enum_renderingserver_particlescollisiontype">enum <strong>ParticlesCollisionType</strong>: <reference internal="True" refid="enum-renderingserver-particlescollisiontype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-particles-collision-type-sphere-attract"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-type-sphere-attract" names="class_renderingserver_constant_particles_collision_type_sphere_attract"><reference internal="True" refid="enum-renderingserver-particlescollisiontype"><inline classes="std std-ref">ParticlesCollisionType</inline></reference> <strong>PARTICLES_COLLISION_TYPE_SPHERE_ATTRACT</strong> = <literal>0</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-collision-type-box-attract"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-type-box-attract" names="class_renderingserver_constant_particles_collision_type_box_attract"><reference internal="True" refid="enum-renderingserver-particlescollisiontype"><inline classes="std std-ref">ParticlesCollisionType</inline></reference> <strong>PARTICLES_COLLISION_TYPE_BOX_ATTRACT</strong> = <literal>1</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-collision-type-vector-field-attract"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-type-vector-field-attract" names="class_renderingserver_constant_particles_collision_type_vector_field_attract"><reference internal="True" refid="enum-renderingserver-particlescollisiontype"><inline classes="std std-ref">ParticlesCollisionType</inline></reference> <strong>PARTICLES_COLLISION_TYPE_VECTOR_FIELD_ATTRACT</strong> = <literal>2</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-collision-type-sphere-collide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-type-sphere-collide" names="class_renderingserver_constant_particles_collision_type_sphere_collide"><reference internal="True" refid="enum-renderingserver-particlescollisiontype"><inline classes="std std-ref">ParticlesCollisionType</inline></reference> <strong>PARTICLES_COLLISION_TYPE_SPHERE_COLLIDE</strong> = <literal>3</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-collision-type-box-collide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-type-box-collide" names="class_renderingserver_constant_particles_collision_type_box_collide"><reference internal="True" refid="enum-renderingserver-particlescollisiontype"><inline classes="std std-ref">ParticlesCollisionType</inline></reference> <strong>PARTICLES_COLLISION_TYPE_BOX_COLLIDE</strong> = <literal>4</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-collision-type-sdf-collide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-type-sdf-collide" names="class_renderingserver_constant_particles_collision_type_sdf_collide"><reference internal="True" refid="enum-renderingserver-particlescollisiontype"><inline classes="std std-ref">ParticlesCollisionType</inline></reference> <strong>PARTICLES_COLLISION_TYPE_SDF_COLLIDE</strong> = <literal>5</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-collision-type-heightfield-collide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-type-heightfield-collide" names="class_renderingserver_constant_particles_collision_type_heightfield_collide"><reference internal="True" refid="enum-renderingserver-particlescollisiontype"><inline classes="std std-ref">ParticlesCollisionType</inline></reference> <strong>PARTICLES_COLLISION_TYPE_HEIGHTFIELD_COLLIDE</strong> = <literal>6</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-particlescollisionheightfieldresolution"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-particlescollisionheightfieldresolution" names="enum_renderingserver_particlescollisionheightfieldresolution">enum <strong>ParticlesCollisionHeightfieldResolution</strong>: <reference internal="True" refid="enum-renderingserver-particlescollisionheightfieldresolution"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-particles-collision-heightfield-resolution-256"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-heightfield-resolution-256" names="class_renderingserver_constant_particles_collision_heightfield_resolution_256"><reference internal="True" refid="enum-renderingserver-particlescollisionheightfieldresolution"><inline classes="std std-ref">ParticlesCollisionHeightfieldResolution</inline></reference> <strong>PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_256</strong> = <literal>0</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-collision-heightfield-resolution-512"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-heightfield-resolution-512" names="class_renderingserver_constant_particles_collision_heightfield_resolution_512"><reference internal="True" refid="enum-renderingserver-particlescollisionheightfieldresolution"><inline classes="std std-ref">ParticlesCollisionHeightfieldResolution</inline></reference> <strong>PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_512</strong> = <literal>1</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-collision-heightfield-resolution-1024"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-heightfield-resolution-1024" names="class_renderingserver_constant_particles_collision_heightfield_resolution_1024"><reference internal="True" refid="enum-renderingserver-particlescollisionheightfieldresolution"><inline classes="std std-ref">ParticlesCollisionHeightfieldResolution</inline></reference> <strong>PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_1024</strong> = <literal>2</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-collision-heightfield-resolution-2048"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-heightfield-resolution-2048" names="class_renderingserver_constant_particles_collision_heightfield_resolution_2048"><reference internal="True" refid="enum-renderingserver-particlescollisionheightfieldresolution"><inline classes="std std-ref">ParticlesCollisionHeightfieldResolution</inline></reference> <strong>PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_2048</strong> = <literal>3</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-collision-heightfield-resolution-4096"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-heightfield-resolution-4096" names="class_renderingserver_constant_particles_collision_heightfield_resolution_4096"><reference internal="True" refid="enum-renderingserver-particlescollisionheightfieldresolution"><inline classes="std std-ref">ParticlesCollisionHeightfieldResolution</inline></reference> <strong>PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_4096</strong> = <literal>4</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-collision-heightfield-resolution-8192"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-heightfield-resolution-8192" names="class_renderingserver_constant_particles_collision_heightfield_resolution_8192"><reference internal="True" refid="enum-renderingserver-particlescollisionheightfieldresolution"><inline classes="std std-ref">ParticlesCollisionHeightfieldResolution</inline></reference> <strong>PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_8192</strong> = <literal>5</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-collision-heightfield-resolution-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-particles-collision-heightfield-resolution-max" names="class_renderingserver_constant_particles_collision_heightfield_resolution_max"><reference internal="True" refid="enum-renderingserver-particlescollisionheightfieldresolution"><inline classes="std std-ref">ParticlesCollisionHeightfieldResolution</inline></reference> <strong>PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_MAX</strong> = <literal>6</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-particlescollisionheightfieldresolution"><inline classes="std std-ref">ParticlesCollisionHeightfieldResolution</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-fogvolumeshape"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-fogvolumeshape" names="enum_renderingserver_fogvolumeshape">enum <strong>FogVolumeShape</strong>: <reference internal="True" refid="enum-renderingserver-fogvolumeshape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-fog-volume-shape-ellipsoid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-fog-volume-shape-ellipsoid" names="class_renderingserver_constant_fog_volume_shape_ellipsoid"><reference internal="True" refid="enum-renderingserver-fogvolumeshape"><inline classes="std std-ref">FogVolumeShape</inline></reference> <strong>FOG_VOLUME_SHAPE_ELLIPSOID</strong> = <literal>0</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_fogvolume#class-fogvolume"><inline classes="std std-ref">FogVolume</inline></reference> 的形状类似于一个椭球体（拉伸的球体）。</paragraph>
            <target refid="class-renderingserver-constant-fog-volume-shape-cone"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-fog-volume-shape-cone" names="class_renderingserver_constant_fog_volume_shape_cone"><reference internal="True" refid="enum-renderingserver-fogvolumeshape"><inline classes="std std-ref">FogVolumeShape</inline></reference> <strong>FOG_VOLUME_SHAPE_CONE</strong> = <literal>1</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_fogvolume#class-fogvolume"><inline classes="std std-ref">FogVolume</inline></reference> 的形状像一个向上的圆锥体（在局部坐标中）。圆锥体的角度会自动被设置以填充大小。锥体将被调整以适合大小。旋转 <reference internal="True" refuri="class_fogvolume#class-fogvolume"><inline classes="std std-ref">FogVolume</inline></reference> 节点以重新定向圆锥体。不支持通过大小进行非均匀缩放（改为缩放 <reference internal="True" refuri="class_fogvolume#class-fogvolume"><inline classes="std std-ref">FogVolume</inline></reference> 节点）。</paragraph>
            <target refid="class-renderingserver-constant-fog-volume-shape-cylinder"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-fog-volume-shape-cylinder" names="class_renderingserver_constant_fog_volume_shape_cylinder"><reference internal="True" refid="enum-renderingserver-fogvolumeshape"><inline classes="std std-ref">FogVolumeShape</inline></reference> <strong>FOG_VOLUME_SHAPE_CYLINDER</strong> = <literal>2</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_fogvolume#class-fogvolume"><inline classes="std std-ref">FogVolume</inline></reference> 的形状将像一个直立的圆柱体（在局部坐标中）。旋转 <reference internal="True" refuri="class_fogvolume#class-fogvolume"><inline classes="std std-ref">FogVolume</inline></reference> 节点以重新定向圆柱体。圆柱体将被调整以适合大小。不支持通过大小进行非均匀缩放（改为缩放 <reference internal="True" refuri="class_fogvolume#class-fogvolume"><inline classes="std std-ref">FogVolume</inline></reference> 节点）。</paragraph>
            <target refid="class-renderingserver-constant-fog-volume-shape-box"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-fog-volume-shape-box" names="class_renderingserver_constant_fog_volume_shape_box"><reference internal="True" refid="enum-renderingserver-fogvolumeshape"><inline classes="std std-ref">FogVolumeShape</inline></reference> <strong>FOG_VOLUME_SHAPE_BOX</strong> = <literal>3</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_fogvolume#class-fogvolume"><inline classes="std std-ref">FogVolume</inline></reference> 的形状会像一个盒子。</paragraph>
            <target refid="class-renderingserver-constant-fog-volume-shape-world"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-fog-volume-shape-world" names="class_renderingserver_constant_fog_volume_shape_world"><reference internal="True" refid="enum-renderingserver-fogvolumeshape"><inline classes="std std-ref">FogVolumeShape</inline></reference> <strong>FOG_VOLUME_SHAPE_WORLD</strong> = <literal>4</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_fogvolume#class-fogvolume"><inline classes="std std-ref">FogVolume</inline></reference> 将没有形状，将覆盖整个世界并且不会被剔除。</paragraph>
            <target refid="class-renderingserver-constant-fog-volume-shape-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-fog-volume-shape-max" names="class_renderingserver_constant_fog_volume_shape_max"><reference internal="True" refid="enum-renderingserver-fogvolumeshape"><inline classes="std std-ref">FogVolumeShape</inline></reference> <strong>FOG_VOLUME_SHAPE_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-fogvolumeshape"><inline classes="std std-ref">FogVolumeShape</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportscaling3dmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportscaling3dmode" names="enum_renderingserver_viewportscaling3dmode">enum <strong>ViewportScaling3DMode</strong>: <reference internal="True" refid="enum-renderingserver-viewportscaling3dmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-scaling-3d-mode-bilinear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-scaling-3d-mode-bilinear" names="class_renderingserver_constant_viewport_scaling_3d_mode_bilinear"><reference internal="True" refid="enum-renderingserver-viewportscaling3dmode"><inline classes="std std-ref">ViewportScaling3DMode</inline></reference> <strong>VIEWPORT_SCALING_3D_MODE_BILINEAR</strong> = <literal>0</literal></paragraph>
            <paragraph>对视口的 3D 缓冲区使用双线性缩放。可以使用 <reference internal="True" refuri="class_viewport#class-viewport-property-scaling-3d-scale"><inline classes="std std-ref">Viewport.scaling_3d_scale</inline></reference> 设置缩放量。小于 <literal>1.0</literal> 的值将导致欠采样，而大于 <literal>1.0</literal> 的值将导致超采样。<literal>1.0</literal> 的值将禁用缩放。</paragraph>
            <target refid="class-renderingserver-constant-viewport-scaling-3d-mode-fsr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-scaling-3d-mode-fsr" names="class_renderingserver_constant_viewport_scaling_3d_mode_fsr"><reference internal="True" refid="enum-renderingserver-viewportscaling3dmode"><inline classes="std std-ref">ViewportScaling3DMode</inline></reference> <strong>VIEWPORT_SCALING_3D_MODE_FSR</strong> = <literal>1</literal></paragraph>
            <paragraph>对视口的 3D 缓冲区使用 AMD FidelityFX 超分辨率 1.0 放大。可以使用 <reference internal="True" refuri="class_viewport#class-viewport-property-scaling-3d-scale"><inline classes="std std-ref">Viewport.scaling_3d_scale</inline></reference> 设置缩放量。小于 <literal>1.0</literal> 的值将导致使用 FSR 放大视口。不支持大于 <literal>1.0</literal> 的值，将改用双线性降采样。<literal>1.0</literal> 的值将禁用缩放。</paragraph>
            <target refid="class-renderingserver-constant-viewport-scaling-3d-mode-fsr2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-scaling-3d-mode-fsr2" names="class_renderingserver_constant_viewport_scaling_3d_mode_fsr2"><reference internal="True" refid="enum-renderingserver-viewportscaling3dmode"><inline classes="std std-ref">ViewportScaling3DMode</inline></reference> <strong>VIEWPORT_SCALING_3D_MODE_FSR2</strong> = <literal>2</literal></paragraph>
            <paragraph>对视口的 3D 缓冲区使用 AMD FidelityFX 超分辨率 2.2 放大。可以使用 <reference internal="True" refuri="class_viewport#class-viewport-property-scaling-3d-scale"><inline classes="std std-ref">Viewport.scaling_3d_scale</inline></reference> 设置缩放量。小于 <literal>1.0</literal> 的值将导致使用 FSR2 放大视口。不支持大于 <literal>1.0</literal> 的值，将改用双线性降采样。<literal>1.0</literal> 的值将使用原生分辨率下的 FSR2 作为 TAA 解决方案。</paragraph>
            <target refid="class-renderingserver-constant-viewport-scaling-3d-mode-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-scaling-3d-mode-max" names="class_renderingserver_constant_viewport_scaling_3d_mode_max"><reference internal="True" refid="enum-renderingserver-viewportscaling3dmode"><inline classes="std std-ref">ViewportScaling3DMode</inline></reference> <strong>VIEWPORT_SCALING_3D_MODE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-viewportscaling3dmode"><inline classes="std std-ref">ViewportScaling3DMode</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportupdatemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportupdatemode" names="enum_renderingserver_viewportupdatemode">enum <strong>ViewportUpdateMode</strong>: <reference internal="True" refid="enum-renderingserver-viewportupdatemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-update-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-update-disabled" names="class_renderingserver_constant_viewport_update_disabled"><reference internal="True" refid="enum-renderingserver-viewportupdatemode"><inline classes="std std-ref">ViewportUpdateMode</inline></reference> <strong>VIEWPORT_UPDATE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>不要更新视口的渲染目标。</paragraph>
            <target refid="class-renderingserver-constant-viewport-update-once"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-update-once" names="class_renderingserver_constant_viewport_update_once"><reference internal="True" refid="enum-renderingserver-viewportupdatemode"><inline classes="std std-ref">ViewportUpdateMode</inline></reference> <strong>VIEWPORT_UPDATE_ONCE</strong> = <literal>1</literal></paragraph>
            <paragraph>更新一次视口的渲染目标，然后切换到 <reference internal="True" refid="class-renderingserver-constant-viewport-update-disabled"><inline classes="std std-ref">VIEWPORT_UPDATE_DISABLED</inline></reference>。</paragraph>
            <target refid="class-renderingserver-constant-viewport-update-when-visible"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-update-when-visible" names="class_renderingserver_constant_viewport_update_when_visible"><reference internal="True" refid="enum-renderingserver-viewportupdatemode"><inline classes="std std-ref">ViewportUpdateMode</inline></reference> <strong>VIEWPORT_UPDATE_WHEN_VISIBLE</strong> = <literal>2</literal></paragraph>
            <paragraph>仅在渲染目标可见时更新视口的渲染目标。这是默认值。</paragraph>
            <target refid="class-renderingserver-constant-viewport-update-when-parent-visible"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-update-when-parent-visible" names="class_renderingserver_constant_viewport_update_when_parent_visible"><reference internal="True" refid="enum-renderingserver-viewportupdatemode"><inline classes="std std-ref">ViewportUpdateMode</inline></reference> <strong>VIEWPORT_UPDATE_WHEN_PARENT_VISIBLE</strong> = <literal>3</literal></paragraph>
            <paragraph>仅在其父级可见时更新视口的渲染目标。</paragraph>
            <target refid="class-renderingserver-constant-viewport-update-always"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-update-always" names="class_renderingserver_constant_viewport_update_always"><reference internal="True" refid="enum-renderingserver-viewportupdatemode"><inline classes="std std-ref">ViewportUpdateMode</inline></reference> <strong>VIEWPORT_UPDATE_ALWAYS</strong> = <literal>4</literal></paragraph>
            <paragraph>始终更新视口的渲染目标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportclearmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportclearmode" names="enum_renderingserver_viewportclearmode">enum <strong>ViewportClearMode</strong>: <reference internal="True" refid="enum-renderingserver-viewportclearmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-clear-always"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-clear-always" names="class_renderingserver_constant_viewport_clear_always"><reference internal="True" refid="enum-renderingserver-viewportclearmode"><inline classes="std std-ref">ViewportClearMode</inline></reference> <strong>VIEWPORT_CLEAR_ALWAYS</strong> = <literal>0</literal></paragraph>
            <paragraph>绘制前始终清除视口的渲染目标。</paragraph>
            <target refid="class-renderingserver-constant-viewport-clear-never"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-clear-never" names="class_renderingserver_constant_viewport_clear_never"><reference internal="True" refid="enum-renderingserver-viewportclearmode"><inline classes="std std-ref">ViewportClearMode</inline></reference> <strong>VIEWPORT_CLEAR_NEVER</strong> = <literal>1</literal></paragraph>
            <paragraph>永不清除视口的渲染目标。</paragraph>
            <target refid="class-renderingserver-constant-viewport-clear-only-next-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-clear-only-next-frame" names="class_renderingserver_constant_viewport_clear_only_next_frame"><reference internal="True" refid="enum-renderingserver-viewportclearmode"><inline classes="std std-ref">ViewportClearMode</inline></reference> <strong>VIEWPORT_CLEAR_ONLY_NEXT_FRAME</strong> = <literal>2</literal></paragraph>
            <paragraph>在下一帧清除视口的渲染目标，然后切换到 <reference internal="True" refid="class-renderingserver-constant-viewport-clear-never"><inline classes="std std-ref">VIEWPORT_CLEAR_NEVER</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportenvironmentmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportenvironmentmode" names="enum_renderingserver_viewportenvironmentmode">enum <strong>ViewportEnvironmentMode</strong>: <reference internal="True" refid="enum-renderingserver-viewportenvironmentmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-environment-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-environment-disabled" names="class_renderingserver_constant_viewport_environment_disabled"><reference internal="True" refid="enum-renderingserver-viewportenvironmentmode"><inline classes="std std-ref">ViewportEnvironmentMode</inline></reference> <strong>VIEWPORT_ENVIRONMENT_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用在 2D 画布上渲染 3D 环境。</paragraph>
            <target refid="class-renderingserver-constant-viewport-environment-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-environment-enabled" names="class_renderingserver_constant_viewport_environment_enabled"><reference internal="True" refid="enum-renderingserver-viewportenvironmentmode"><inline classes="std std-ref">ViewportEnvironmentMode</inline></reference> <strong>VIEWPORT_ENVIRONMENT_ENABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>启用在 2D 画布上渲染 3D 环境。</paragraph>
            <target refid="class-renderingserver-constant-viewport-environment-inherit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-environment-inherit" names="class_renderingserver_constant_viewport_environment_inherit"><reference internal="True" refid="enum-renderingserver-viewportenvironmentmode"><inline classes="std std-ref">ViewportEnvironmentMode</inline></reference> <strong>VIEWPORT_ENVIRONMENT_INHERIT</strong> = <literal>2</literal></paragraph>
            <paragraph>从父级继承启用/禁用值。如果最顶层的父级也被设置为 <reference internal="True" refid="class-renderingserver-constant-viewport-environment-inherit"><inline classes="std std-ref">VIEWPORT_ENVIRONMENT_INHERIT</inline></reference>，那么与 <reference internal="True" refid="class-renderingserver-constant-viewport-environment-enabled"><inline classes="std std-ref">VIEWPORT_ENVIRONMENT_ENABLED</inline></reference> 的行为相同。</paragraph>
            <target refid="class-renderingserver-constant-viewport-environment-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-environment-max" names="class_renderingserver_constant_viewport_environment_max"><reference internal="True" refid="enum-renderingserver-viewportenvironmentmode"><inline classes="std std-ref">ViewportEnvironmentMode</inline></reference> <strong>VIEWPORT_ENVIRONMENT_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-viewportenvironmentmode"><inline classes="std std-ref">ViewportEnvironmentMode</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportsdfoversize"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportsdfoversize" names="enum_renderingserver_viewportsdfoversize">enum <strong>ViewportSDFOversize</strong>: <reference internal="True" refid="enum-renderingserver-viewportsdfoversize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-sdf-oversize-100-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-sdf-oversize-100-percent" names="class_renderingserver_constant_viewport_sdf_oversize_100_percent"><reference internal="True" refid="enum-renderingserver-viewportsdfoversize"><inline classes="std std-ref">ViewportSDFOversize</inline></reference> <strong>VIEWPORT_SDF_OVERSIZE_100_PERCENT</strong> = <literal>0</literal></paragraph>
            <paragraph>不使用过大的 2D 带符号距离场。遮挡器可能在接触视口边缘时消失，<reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d"><inline classes="std std-ref">GPUParticles3D</inline></reference> 碰撞也可能比预期更早地停止工作。对 GPU 的要求最低。</paragraph>
            <target refid="class-renderingserver-constant-viewport-sdf-oversize-120-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-sdf-oversize-120-percent" names="class_renderingserver_constant_viewport_sdf_oversize_120_percent"><reference internal="True" refid="enum-renderingserver-viewportsdfoversize"><inline classes="std std-ref">ViewportSDFOversize</inline></reference> <strong>VIEWPORT_SDF_OVERSIZE_120_PERCENT</strong> = <literal>1</literal></paragraph>
            <paragraph>2D 带符号距离场在每个方向（上、右、下、左）都覆盖超出视口大小 20% 的范围。</paragraph>
            <target refid="class-renderingserver-constant-viewport-sdf-oversize-150-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-sdf-oversize-150-percent" names="class_renderingserver_constant_viewport_sdf_oversize_150_percent"><reference internal="True" refid="enum-renderingserver-viewportsdfoversize"><inline classes="std std-ref">ViewportSDFOversize</inline></reference> <strong>VIEWPORT_SDF_OVERSIZE_150_PERCENT</strong> = <literal>2</literal></paragraph>
            <paragraph>2D 带符号距离场在每个方向（上、右、下、左）都覆盖超出视口大小 50% 的范围。</paragraph>
            <target refid="class-renderingserver-constant-viewport-sdf-oversize-200-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-sdf-oversize-200-percent" names="class_renderingserver_constant_viewport_sdf_oversize_200_percent"><reference internal="True" refid="enum-renderingserver-viewportsdfoversize"><inline classes="std std-ref">ViewportSDFOversize</inline></reference> <strong>VIEWPORT_SDF_OVERSIZE_200_PERCENT</strong> = <literal>3</literal></paragraph>
            <paragraph>2D 带符号距离场在每个方向（上、右、下、左）都覆盖超出视口大小 100% 的范围。对 GPU 的要求最高。</paragraph>
            <target refid="class-renderingserver-constant-viewport-sdf-oversize-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-sdf-oversize-max" names="class_renderingserver_constant_viewport_sdf_oversize_max"><reference internal="True" refid="enum-renderingserver-viewportsdfoversize"><inline classes="std std-ref">ViewportSDFOversize</inline></reference> <strong>VIEWPORT_SDF_OVERSIZE_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-viewportsdfoversize"><inline classes="std std-ref">ViewportSDFOversize</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportsdfscale"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportsdfscale" names="enum_renderingserver_viewportsdfscale">enum <strong>ViewportSDFScale</strong>: <reference internal="True" refid="enum-renderingserver-viewportsdfscale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-sdf-scale-100-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-sdf-scale-100-percent" names="class_renderingserver_constant_viewport_sdf_scale_100_percent"><reference internal="True" refid="enum-renderingserver-viewportsdfscale"><inline classes="std std-ref">ViewportSDFScale</inline></reference> <strong>VIEWPORT_SDF_SCALE_100_PERCENT</strong> = <literal>0</literal></paragraph>
            <paragraph>全分辨率 2D 带符号距离场缩放。对 GPU 的要求最高。</paragraph>
            <target refid="class-renderingserver-constant-viewport-sdf-scale-50-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-sdf-scale-50-percent" names="class_renderingserver_constant_viewport_sdf_scale_50_percent"><reference internal="True" refid="enum-renderingserver-viewportsdfscale"><inline classes="std std-ref">ViewportSDFScale</inline></reference> <strong>VIEWPORT_SDF_SCALE_50_PERCENT</strong> = <literal>1</literal></paragraph>
            <paragraph>各轴半分辨率 2D 带符号距离场缩放（视口像素数的 25%）。</paragraph>
            <target refid="class-renderingserver-constant-viewport-sdf-scale-25-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-sdf-scale-25-percent" names="class_renderingserver_constant_viewport_sdf_scale_25_percent"><reference internal="True" refid="enum-renderingserver-viewportsdfscale"><inline classes="std std-ref">ViewportSDFScale</inline></reference> <strong>VIEWPORT_SDF_SCALE_25_PERCENT</strong> = <literal>2</literal></paragraph>
            <paragraph>各轴四分之一分辨率 2D 带符号距离场缩放（视口像素数的 6.25%）。对 GPU 的要求最低。</paragraph>
            <target refid="class-renderingserver-constant-viewport-sdf-scale-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-sdf-scale-max" names="class_renderingserver_constant_viewport_sdf_scale_max"><reference internal="True" refid="enum-renderingserver-viewportsdfscale"><inline classes="std std-ref">ViewportSDFScale</inline></reference> <strong>VIEWPORT_SDF_SCALE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-viewportsdfscale"><inline classes="std std-ref">ViewportSDFScale</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportmsaa"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportmsaa" names="enum_renderingserver_viewportmsaa">enum <strong>ViewportMSAA</strong>: <reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-msaa-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-msaa-disabled" names="class_renderingserver_constant_viewport_msaa_disabled"><reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference> <strong>VIEWPORT_MSAA_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>用于 3D 的多重采样抗锯齿被禁用。这是默认值，也是最快的设置。</paragraph>
            <target refid="class-renderingserver-constant-viewport-msaa-2x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-msaa-2x" names="class_renderingserver_constant_viewport_msaa_2x"><reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference> <strong>VIEWPORT_MSAA_2X</strong> = <literal>1</literal></paragraph>
            <paragraph>用于 3D 的多重采样抗锯齿，使用每个像素 2 个样本。这对性能有中等影响。</paragraph>
            <target refid="class-renderingserver-constant-viewport-msaa-4x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-msaa-4x" names="class_renderingserver_constant_viewport_msaa_4x"><reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference> <strong>VIEWPORT_MSAA_4X</strong> = <literal>2</literal></paragraph>
            <paragraph>用于 3D 的多重采样抗锯齿，使用每个像素 4 个样本。这对性能有较大影响。</paragraph>
            <target refid="class-renderingserver-constant-viewport-msaa-8x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-msaa-8x" names="class_renderingserver_constant_viewport_msaa_8x"><reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference> <strong>VIEWPORT_MSAA_8X</strong> = <literal>3</literal></paragraph>
            <paragraph>用于 3D 的多重采样抗锯齿，使用每个像素 8 个样本。这对性能有非常大的影响。可能在低端和较旧的硬件上不受支持。</paragraph>
            <target refid="class-renderingserver-constant-viewport-msaa-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-msaa-max" names="class_renderingserver_constant_viewport_msaa_max"><reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference> <strong>VIEWPORT_MSAA_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportscreenspaceaa"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportscreenspaceaa" names="enum_renderingserver_viewportscreenspaceaa">enum <strong>ViewportScreenSpaceAA</strong>: <reference internal="True" refid="enum-renderingserver-viewportscreenspaceaa"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-screen-space-aa-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-screen-space-aa-disabled" names="class_renderingserver_constant_viewport_screen_space_aa_disabled"><reference internal="True" refid="enum-renderingserver-viewportscreenspaceaa"><inline classes="std std-ref">ViewportScreenSpaceAA</inline></reference> <strong>VIEWPORT_SCREEN_SPACE_AA_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>不要在全屏后处理中执行抗锯齿。</paragraph>
            <target refid="class-renderingserver-constant-viewport-screen-space-aa-fxaa"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-screen-space-aa-fxaa" names="class_renderingserver_constant_viewport_screen_space_aa_fxaa"><reference internal="True" refid="enum-renderingserver-viewportscreenspaceaa"><inline classes="std std-ref">ViewportScreenSpaceAA</inline></reference> <strong>VIEWPORT_SCREEN_SPACE_AA_FXAA</strong> = <literal>1</literal></paragraph>
            <paragraph>使用快速近似抗锯齿（Fast Approximate Anti-Aliasing）。FXAA 是一种流行的屏幕空间抗锯齿方法，速度很快，但会让图像变模糊，使用较低分辨率时尤为显著。1440p 和 4K 等较高分辨率下效果仍然不错。</paragraph>
            <target refid="class-renderingserver-constant-viewport-screen-space-aa-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-screen-space-aa-max" names="class_renderingserver_constant_viewport_screen_space_aa_max"><reference internal="True" refid="enum-renderingserver-viewportscreenspaceaa"><inline classes="std std-ref">ViewportScreenSpaceAA</inline></reference> <strong>VIEWPORT_SCREEN_SPACE_AA_MAX</strong> = <literal>2</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-viewportscreenspaceaa"><inline classes="std std-ref">ViewportScreenSpaceAA</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportocclusioncullingbuildquality"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportocclusioncullingbuildquality" names="enum_renderingserver_viewportocclusioncullingbuildquality">enum <strong>ViewportOcclusionCullingBuildQuality</strong>: <reference internal="True" refid="enum-renderingserver-viewportocclusioncullingbuildquality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-occlusion-build-quality-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-occlusion-build-quality-low" names="class_renderingserver_constant_viewport_occlusion_build_quality_low"><reference internal="True" refid="enum-renderingserver-viewportocclusioncullingbuildquality"><inline classes="std std-ref">ViewportOcclusionCullingBuildQuality</inline></reference> <strong>VIEWPORT_OCCLUSION_BUILD_QUALITY_LOW</strong> = <literal>0</literal></paragraph>
            <paragraph>较低的遮挡剔除 BVH 构建质量（由 Embree 定义）。CPU 占用最低，但剔除效率最低。</paragraph>
            <target refid="class-renderingserver-constant-viewport-occlusion-build-quality-medium"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-occlusion-build-quality-medium" names="class_renderingserver_constant_viewport_occlusion_build_quality_medium"><reference internal="True" refid="enum-renderingserver-viewportocclusioncullingbuildquality"><inline classes="std std-ref">ViewportOcclusionCullingBuildQuality</inline></reference> <strong>VIEWPORT_OCCLUSION_BUILD_QUALITY_MEDIUM</strong> = <literal>1</literal></paragraph>
            <paragraph>中等的遮挡剔除 BVH 构建质量（由 Embree 定义）。</paragraph>
            <target refid="class-renderingserver-constant-viewport-occlusion-build-quality-high"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-occlusion-build-quality-high" names="class_renderingserver_constant_viewport_occlusion_build_quality_high"><reference internal="True" refid="enum-renderingserver-viewportocclusioncullingbuildquality"><inline classes="std std-ref">ViewportOcclusionCullingBuildQuality</inline></reference> <strong>VIEWPORT_OCCLUSION_BUILD_QUALITY_HIGH</strong> = <literal>2</literal></paragraph>
            <paragraph>较高的遮挡剔除 BVH 构建质量（由 Embree 定义）。CPU 占用最高，但剔除效率最高。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportrenderinfo"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportrenderinfo" names="enum_renderingserver_viewportrenderinfo">enum <strong>ViewportRenderInfo</strong>: <reference internal="True" refid="enum-renderingserver-viewportrenderinfo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-render-info-objects-in-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-render-info-objects-in-frame" names="class_renderingserver_constant_viewport_render_info_objects_in_frame"><reference internal="True" refid="enum-renderingserver-viewportrenderinfo"><inline classes="std std-ref">ViewportRenderInfo</inline></reference> <strong>VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME</strong> = <literal>0</literal></paragraph>
            <paragraph>在单帧中绘制的对象的数量。</paragraph>
            <target refid="class-renderingserver-constant-viewport-render-info-primitives-in-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-render-info-primitives-in-frame" names="class_renderingserver_constant_viewport_render_info_primitives_in_frame"><reference internal="True" refid="enum-renderingserver-viewportrenderinfo"><inline classes="std std-ref">ViewportRenderInfo</inline></reference> <strong>VIEWPORT_RENDER_INFO_PRIMITIVES_IN_FRAME</strong> = <literal>1</literal></paragraph>
            <paragraph>在单帧中绘制的点、线、三角形的数量。</paragraph>
            <target refid="class-renderingserver-constant-viewport-render-info-draw-calls-in-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-render-info-draw-calls-in-frame" names="class_renderingserver_constant_viewport_render_info_draw_calls_in_frame"><reference internal="True" refid="enum-renderingserver-viewportrenderinfo"><inline classes="std std-ref">ViewportRenderInfo</inline></reference> <strong>VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME</strong> = <literal>2</literal></paragraph>
            <paragraph>此帧期间的绘制调用数。</paragraph>
            <target refid="class-renderingserver-constant-viewport-render-info-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-render-info-max" names="class_renderingserver_constant_viewport_render_info_max"><reference internal="True" refid="enum-renderingserver-viewportrenderinfo"><inline classes="std std-ref">ViewportRenderInfo</inline></reference> <strong>VIEWPORT_RENDER_INFO_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-viewportrenderinfo"><inline classes="std std-ref">ViewportRenderInfo</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportrenderinfotype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportrenderinfotype" names="enum_renderingserver_viewportrenderinfotype">enum <strong>ViewportRenderInfoType</strong>: <reference internal="True" refid="enum-renderingserver-viewportrenderinfotype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-render-info-type-visible"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-render-info-type-visible" names="class_renderingserver_constant_viewport_render_info_type_visible"><reference internal="True" refid="enum-renderingserver-viewportrenderinfotype"><inline classes="std std-ref">ViewportRenderInfoType</inline></reference> <strong>VIEWPORT_RENDER_INFO_TYPE_VISIBLE</strong> = <literal>0</literal></paragraph>
            <paragraph>可见渲染阶段（不含阴影）。</paragraph>
            <target refid="class-renderingserver-constant-viewport-render-info-type-shadow"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-render-info-type-shadow" names="class_renderingserver_constant_viewport_render_info_type_shadow"><reference internal="True" refid="enum-renderingserver-viewportrenderinfotype"><inline classes="std std-ref">ViewportRenderInfoType</inline></reference> <strong>VIEWPORT_RENDER_INFO_TYPE_SHADOW</strong> = <literal>1</literal></paragraph>
            <paragraph>阴影渲染阶段。根据开启了阴影的灯光数以及方向阴影的拆分数，同一个对象可能会渲染多次。</paragraph>
            <target refid="class-renderingserver-constant-viewport-render-info-type-canvas"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-render-info-type-canvas" names="class_renderingserver_constant_viewport_render_info_type_canvas"><reference internal="True" refid="enum-renderingserver-viewportrenderinfotype"><inline classes="std std-ref">ViewportRenderInfoType</inline></reference> <strong>VIEWPORT_RENDER_INFO_TYPE_CANVAS</strong> = <literal>2</literal></paragraph>
            <paragraph>画布项渲染。包括所有 2D 渲染。</paragraph>
            <target refid="class-renderingserver-constant-viewport-render-info-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-render-info-type-max" names="class_renderingserver_constant_viewport_render_info_type_max"><reference internal="True" refid="enum-renderingserver-viewportrenderinfotype"><inline classes="std std-ref">ViewportRenderInfoType</inline></reference> <strong>VIEWPORT_RENDER_INFO_TYPE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-viewportrenderinfotype"><inline classes="std std-ref">ViewportRenderInfoType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportdebugdraw"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportdebugdraw" names="enum_renderingserver_viewportdebugdraw">enum <strong>ViewportDebugDraw</strong>: <reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-disabled" names="class_renderingserver_constant_viewport_debug_draw_disabled"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>调试绘制被禁用。默认设置。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-unshaded"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-unshaded" names="class_renderingserver_constant_viewport_debug_draw_unshaded"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_UNSHADED</strong> = <literal>1</literal></paragraph>
            <paragraph>显示的对象没有光照信息。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-lighting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-lighting" names="class_renderingserver_constant_viewport_debug_draw_lighting"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_LIGHTING</strong> = <literal>2</literal></paragraph>
            <paragraph>仅使用光照信息显示对象。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-overdraw"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-overdraw" names="class_renderingserver_constant_viewport_debug_draw_overdraw"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_OVERDRAW</strong> = <literal>3</literal></paragraph>
            <paragraph>对象通过加法混合显示为半透明，因此可以看到它们在彼此之上绘制的位置。更高的过度绘制（由更亮的颜色表示）意味着在绘制隐藏在其他像素后面的像素时浪费了性能。</paragraph>
            <paragraph><strong>注意：</strong>使用该调试绘制模式时，自定义着色器将被忽略。这意味着顶点置换不再可见。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-wireframe"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-wireframe" names="class_renderingserver_constant_viewport_debug_draw_wireframe"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_WIREFRAME</strong> = <literal>4</literal></paragraph>
            <paragraph>调试绘制，将对象用线框形式绘制。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-normal-buffer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-normal-buffer" names="class_renderingserver_constant_viewport_debug_draw_normal_buffer"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_NORMAL_BUFFER</strong> = <literal>5</literal></paragraph>
            <paragraph>绘制法线缓冲区而不是常规场景，因此可以看到将由后处理效果使用的每像素法线。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-voxel-gi-albedo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-voxel-gi-albedo" names="class_renderingserver_constant_viewport_debug_draw_voxel_gi_albedo"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_VOXEL_GI_ALBEDO</strong> = <literal>6</literal></paragraph>
            <paragraph>仅使用来自 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 的反照率值显示对象。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-voxel-gi-lighting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-voxel-gi-lighting" names="class_renderingserver_constant_viewport_debug_draw_voxel_gi_lighting"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_VOXEL_GI_LIGHTING</strong> = <literal>7</literal></paragraph>
            <paragraph>仅使用来自 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 的照明值显示对象。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-voxel-gi-emission"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-voxel-gi-emission" names="class_renderingserver_constant_viewport_debug_draw_voxel_gi_emission"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_VOXEL_GI_EMISSION</strong> = <literal>8</literal></paragraph>
            <paragraph>仅使用来自 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 的自发光颜色显示对象。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-shadow-atlas"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-shadow-atlas" names="class_renderingserver_constant_viewport_debug_draw_shadow_atlas"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_SHADOW_ATLAS</strong> = <literal>9</literal></paragraph>
            <paragraph>在 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 的左上象限中绘制存储来自 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference> 和 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference> 的阴影的阴影图集。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-directional-shadow-atlas"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-directional-shadow-atlas" names="class_renderingserver_constant_viewport_debug_draw_directional_shadow_atlas"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS</strong> = <literal>10</literal></paragraph>
            <paragraph>绘制阴影图集，该阴影图集存储 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 左上象限中 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference> 的阴影。</paragraph>
            <paragraph>与阴影贴图级联相关的相机视锥体切片被叠加以可视化覆盖范围。每个切片的颜色与 <reference internal="True" refid="class-renderingserver-constant-viewport-debug-draw-pssm-splits"><inline classes="std std-ref">VIEWPORT_DEBUG_DRAW_PSSM_SPLITS</inline></reference> 使用的颜色匹配。当混合阴影级联时，绘制视锥体切片时会考虑重叠。</paragraph>
            <paragraph>最后一个级联显示了所有视锥体切片，以说明所有切片的覆盖范围。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-scene-luminance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-scene-luminance" names="class_renderingserver_constant_viewport_debug_draw_scene_luminance"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_SCENE_LUMINANCE</strong> = <literal>11</literal></paragraph>
            <paragraph>绘制估计的场景亮度。这是一个 1×1 的纹理，启用自动曝光时生成，用于控制场景的曝光。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-ssao"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-ssao" names="class_renderingserver_constant_viewport_debug_draw_ssao"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_SSAO</strong> = <literal>12</literal></paragraph>
            <paragraph>绘制屏幕空间环境光遮蔽纹理而不是场景，以便可以清楚地看到它是如何影响对象的。为了使这种显示模式起作用，必须在 <reference internal="True" refuri="class_worldenvironment#class-worldenvironment"><inline classes="std std-ref">WorldEnvironment</inline></reference> 中设置 <reference internal="True" refuri="class_environment#class-environment-property-ssao-enabled"><inline classes="std std-ref">Environment.ssao_enabled</inline></reference>。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-ssil"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-ssil" names="class_renderingserver_constant_viewport_debug_draw_ssil"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_SSIL</strong> = <literal>13</literal></paragraph>
            <paragraph>绘制屏幕空间间接照明纹理而不是场景，以便可以清楚地看到它是如何影响对象的。为了使这种显示模式起作用，必须在 <reference internal="True" refuri="class_worldenvironment#class-worldenvironment"><inline classes="std std-ref">WorldEnvironment</inline></reference> 中设置 <reference internal="True" refuri="class_environment#class-environment-property-ssil-enabled"><inline classes="std std-ref">Environment.ssil_enabled</inline></reference>。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-pssm-splits"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-pssm-splits" names="class_renderingserver_constant_viewport_debug_draw_pssm_splits"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_PSSM_SPLITS</strong> = <literal>14</literal></paragraph>
            <paragraph>为场景中的 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference> 的每个 PSSM 分割着色不同的颜色，以便可以看到分割的位置。它们将按顺序被着色为红色、绿色、蓝色、黄色。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-decal-atlas"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-decal-atlas" names="class_renderingserver_constant_viewport_debug_draw_decal_atlas"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_DECAL_ATLAS</strong> = <literal>15</literal></paragraph>
            <paragraph>绘制贴花图集，图集中保存的是各个 <reference internal="True" refuri="class_decal#class-decal"><inline classes="std std-ref">Decal</inline></reference> 中的贴花纹理。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-sdfgi"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-sdfgi" names="class_renderingserver_constant_viewport_debug_draw_sdfgi"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_SDFGI</strong> = <literal>16</literal></paragraph>
            <paragraph>绘制 SDFGI 级联数据。这是用于反弹灯光、创建反射的数据结构。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-sdfgi-probes"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-sdfgi-probes" names="class_renderingserver_constant_viewport_debug_draw_sdfgi_probes"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_SDFGI_PROBES</strong> = <literal>17</literal></paragraph>
            <paragraph>绘制 SDFGI 探针数据。这是用于为场景中移动的动态对象提供间接光照的数据结构。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-gi-buffer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-gi-buffer" names="class_renderingserver_constant_viewport_debug_draw_gi_buffer"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_GI_BUFFER</strong> = <literal>18</literal></paragraph>
            <paragraph>绘制全局光照缓冲（<reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 或 SDFGI）。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-disable-lod"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-disable-lod" names="class_renderingserver_constant_viewport_debug_draw_disable_lod"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_DISABLE_LOD</strong> = <literal>19</literal></paragraph>
            <paragraph>禁用网格 LOD。所有网格都会使用完整细节绘制，可以用来比较性能。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-cluster-omni-lights"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-cluster-omni-lights" names="class_renderingserver_constant_viewport_debug_draw_cluster_omni_lights"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_CLUSTER_OMNI_LIGHTS</strong> = <literal>20</literal></paragraph>
            <paragraph>绘制 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference> 集群。集群决定屏幕空间中灯光的放置位置，能够让引擎在进行光照时仅对屏幕的部分区域进行处理。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-cluster-spot-lights"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-cluster-spot-lights" names="class_renderingserver_constant_viewport_debug_draw_cluster_spot_lights"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_CLUSTER_SPOT_LIGHTS</strong> = <literal>21</literal></paragraph>
            <paragraph>绘制 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference> 集群。集群决定屏幕空间中灯光的放置位置，能够让引擎在进行光照时仅对屏幕的部分区域进行处理。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-cluster-decals"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-cluster-decals" names="class_renderingserver_constant_viewport_debug_draw_cluster_decals"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_CLUSTER_DECALS</strong> = <literal>22</literal></paragraph>
            <paragraph>绘制 <reference internal="True" refuri="class_decal#class-decal"><inline classes="std std-ref">Decal</inline></reference> 集群。集群决定屏幕空间中贴花的放置位置，能够让引擎在进行贴花时仅对屏幕的部分区域进行处理。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-cluster-reflection-probes"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-cluster-reflection-probes" names="class_renderingserver_constant_viewport_debug_draw_cluster_reflection_probes"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_CLUSTER_REFLECTION_PROBES</strong> = <literal>23</literal></paragraph>
            <paragraph>绘制 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe"><inline classes="std std-ref">ReflectionProbe</inline></reference> 集群。集群决定屏幕空间中反射探针的放置位置，能够让引擎在处理反射探针时仅对屏幕的部分区域进行处理。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-occluders"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-occluders" names="class_renderingserver_constant_viewport_debug_draw_occluders"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_OCCLUDERS</strong> = <literal>24</literal></paragraph>
            <paragraph>绘制遮挡剔除缓冲。这个低分辨率遮挡剔除缓冲在 CPU 栅格化，可用于检查实例是否被其他对象遮挡。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-motion-vectors"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-motion-vectors" names="class_renderingserver_constant_viewport_debug_draw_motion_vectors"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_MOTION_VECTORS</strong> = <literal>25</literal></paragraph>
            <paragraph>绘制运动向量缓冲。由时间抗锯齿使用，能够修正在游戏过程中发生的运动。</paragraph>
            <target refid="class-renderingserver-constant-viewport-debug-draw-internal-buffer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-debug-draw-internal-buffer" names="class_renderingserver_constant_viewport_debug_draw_internal_buffer"><reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference> <strong>VIEWPORT_DEBUG_DRAW_INTERNAL_BUFFER</strong> = <literal>26</literal></paragraph>
            <paragraph>绘制内部缓冲区而不是常规场景，因此可以看到将被后处理效果使用的每像素输出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportvrsmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportvrsmode" names="enum_renderingserver_viewportvrsmode">enum <strong>ViewportVRSMode</strong>: <reference internal="True" refid="enum-renderingserver-viewportvrsmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-vrs-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-vrs-disabled" names="class_renderingserver_constant_viewport_vrs_disabled"><reference internal="True" refid="enum-renderingserver-viewportvrsmode"><inline classes="std std-ref">ViewportVRSMode</inline></reference> <strong>VIEWPORT_VRS_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>可变速率着色已禁用。</paragraph>
            <target refid="class-renderingserver-constant-viewport-vrs-texture"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-vrs-texture" names="class_renderingserver_constant_viewport_vrs_texture"><reference internal="True" refid="enum-renderingserver-viewportvrsmode"><inline classes="std std-ref">ViewportVRSMode</inline></reference> <strong>VIEWPORT_VRS_TEXTURE</strong> = <literal>1</literal></paragraph>
            <paragraph>可变速率着色使用纹理。请注意，对于立体视觉，请使用为每个视图提供纹理的纹理图集。</paragraph>
            <target refid="class-renderingserver-constant-viewport-vrs-xr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-vrs-xr" names="class_renderingserver_constant_viewport_vrs_xr"><reference internal="True" refid="enum-renderingserver-viewportvrsmode"><inline classes="std std-ref">ViewportVRSMode</inline></reference> <strong>VIEWPORT_VRS_XR</strong> = <literal>2</literal></paragraph>
            <paragraph>可变速率着色纹理由主 <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference> 提供。请注意，这可能会覆盖更新模式。</paragraph>
            <target refid="class-renderingserver-constant-viewport-vrs-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-vrs-max" names="class_renderingserver_constant_viewport_vrs_max"><reference internal="True" refid="enum-renderingserver-viewportvrsmode"><inline classes="std std-ref">ViewportVRSMode</inline></reference> <strong>VIEWPORT_VRS_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-viewportvrsmode"><inline classes="std std-ref">ViewportVRSMode</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-viewportvrsupdatemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-viewportvrsupdatemode" names="enum_renderingserver_viewportvrsupdatemode">enum <strong>ViewportVRSUpdateMode</strong>: <reference internal="True" refid="enum-renderingserver-viewportvrsupdatemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-viewport-vrs-update-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-vrs-update-disabled" names="class_renderingserver_constant_viewport_vrs_update_disabled"><reference internal="True" refid="enum-renderingserver-viewportvrsupdatemode"><inline classes="std std-ref">ViewportVRSUpdateMode</inline></reference> <strong>VIEWPORT_VRS_UPDATE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>可变速率着色的输入纹理将不会被处理。</paragraph>
            <target refid="class-renderingserver-constant-viewport-vrs-update-once"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-vrs-update-once" names="class_renderingserver_constant_viewport_vrs_update_once"><reference internal="True" refid="enum-renderingserver-viewportvrsupdatemode"><inline classes="std std-ref">ViewportVRSUpdateMode</inline></reference> <strong>VIEWPORT_VRS_UPDATE_ONCE</strong> = <literal>1</literal></paragraph>
            <paragraph>可变速率着色的输入纹理将被处理一次。</paragraph>
            <target refid="class-renderingserver-constant-viewport-vrs-update-always"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-vrs-update-always" names="class_renderingserver_constant_viewport_vrs_update_always"><reference internal="True" refid="enum-renderingserver-viewportvrsupdatemode"><inline classes="std std-ref">ViewportVRSUpdateMode</inline></reference> <strong>VIEWPORT_VRS_UPDATE_ALWAYS</strong> = <literal>2</literal></paragraph>
            <paragraph>可变速率着色的输入纹理将每帧进行处理。</paragraph>
            <target refid="class-renderingserver-constant-viewport-vrs-update-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-viewport-vrs-update-max" names="class_renderingserver_constant_viewport_vrs_update_max"><reference internal="True" refid="enum-renderingserver-viewportvrsupdatemode"><inline classes="std std-ref">ViewportVRSUpdateMode</inline></reference> <strong>VIEWPORT_VRS_UPDATE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-viewportvrsupdatemode"><inline classes="std std-ref">ViewportVRSUpdateMode</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-skymode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-skymode" names="enum_renderingserver_skymode">enum <strong>SkyMode</strong>: <reference internal="True" refid="enum-renderingserver-skymode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-sky-mode-automatic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-sky-mode-automatic" names="class_renderingserver_constant_sky_mode_automatic"><reference internal="True" refid="enum-renderingserver-skymode"><inline classes="std std-ref">SkyMode</inline></reference> <strong>SKY_MODE_AUTOMATIC</strong> = <literal>0</literal></paragraph>
            <paragraph>根据天空着色器自动选择合适的处理模式。如果着色器使用 <literal>TIME</literal> 或 <literal>POSITION</literal>，则会使用 <reference internal="True" refid="class-renderingserver-constant-sky-mode-realtime"><inline classes="std std-ref">SKY_MODE_REALTIME</inline></reference>。如果着色器使用任何 <literal>LIGHT_*</literal> 变量或任何自定义 uniform，则会使用 <reference internal="True" refid="class-renderingserver-constant-sky-mode-incremental"><inline classes="std std-ref">SKY_MODE_INCREMENTAL</inline></reference>。否则默认为 <reference internal="True" refid="class-renderingserver-constant-sky-mode-quality"><inline classes="std std-ref">SKY_MODE_QUALITY</inline></reference>。</paragraph>
            <target refid="class-renderingserver-constant-sky-mode-quality"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-sky-mode-quality" names="class_renderingserver_constant_sky_mode_quality"><reference internal="True" refid="enum-renderingserver-skymode"><inline classes="std std-ref">SkyMode</inline></reference> <strong>SKY_MODE_QUALITY</strong> = <literal>1</literal></paragraph>
            <paragraph>使用高质量重要性采样处理辐射度贴图。得到的结果通常比 <reference internal="True" refid="class-renderingserver-constant-sky-mode-realtime"><inline classes="std std-ref">SKY_MODE_REALTIME</inline></reference> 的质量更高，但需要花费更多的时间来生成。如果你计划在运行时修改天空，则不应使用。如果你发现反射不够模糊，出现了火花或者萤火虫，请尝试增大 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-reflections-sky-reflections-ggx-samples"><inline classes="std std-ref">ProjectSettings.rendering/reflections/sky_reflections/ggx_samples</inline></reference>。</paragraph>
            <target refid="class-renderingserver-constant-sky-mode-incremental"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-sky-mode-incremental" names="class_renderingserver_constant_sky_mode_incremental"><reference internal="True" refid="enum-renderingserver-skymode"><inline classes="std std-ref">SkyMode</inline></reference> <strong>SKY_MODE_INCREMENTAL</strong> = <literal>2</literal></paragraph>
            <paragraph>使用与 <reference internal="True" refid="class-renderingserver-constant-sky-mode-quality"><inline classes="std std-ref">SKY_MODE_QUALITY</inline></reference> 相同的高质量重要性采样来处理辐射度贴图，但更新会占用若干帧。帧数由 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-reflections-sky-reflections-roughness-layers"><inline classes="std std-ref">ProjectSettings.rendering/reflections/sky_reflections/roughness_layers</inline></reference> 决定。当需要最高质量的辐射度贴图，但天空更新缓慢时，请使用该选项。</paragraph>
            <target refid="class-renderingserver-constant-sky-mode-realtime"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-sky-mode-realtime" names="class_renderingserver_constant_sky_mode_realtime"><reference internal="True" refid="enum-renderingserver-skymode"><inline classes="std std-ref">SkyMode</inline></reference> <strong>SKY_MODE_REALTIME</strong> = <literal>3</literal></paragraph>
            <paragraph>使用快速过滤算法处理辐照度贴图。一般来说，这会导致质量降低，但运行时间会大大加快。如果需要更好的质量，但仍需要每帧更新天空，请考虑开启 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-reflections-sky-reflections-fast-filter-high-quality"><inline classes="std std-ref">ProjectSettings.rendering/reflections/sky_reflections/fast_filter_high_quality</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>快速过滤算法被限制为 256x256 立方体贴图，因此 <reference internal="True" refid="class-renderingserver-method-sky-set-radiance-size"><inline classes="std std-ref">sky_set_radiance_size</inline></reference> 必须被设置为 <literal>256</literal>。否则会打印警告并忽略对辐照度大小的覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-compositoreffectflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-compositoreffectflags" names="enum_renderingserver_compositoreffectflags">enum <strong>CompositorEffectFlags</strong>: <reference internal="True" refid="enum-renderingserver-compositoreffectflags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-compositor-effect-flag-access-resolved-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-compositor-effect-flag-access-resolved-color" names="class_renderingserver_constant_compositor_effect_flag_access_resolved_color"><reference internal="True" refid="enum-renderingserver-compositoreffectflags"><inline classes="std std-ref">CompositorEffectFlags</inline></reference> <strong>COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_COLOR</strong> = <literal>1</literal></paragraph>
            <paragraph>启用 MSAA 时，渲染效果需要解析颜色缓冲。</paragraph>
            <target refid="class-renderingserver-constant-compositor-effect-flag-access-resolved-depth"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-compositor-effect-flag-access-resolved-depth" names="class_renderingserver_constant_compositor_effect_flag_access_resolved_depth"><reference internal="True" refid="enum-renderingserver-compositoreffectflags"><inline classes="std std-ref">CompositorEffectFlags</inline></reference> <strong>COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_DEPTH</strong> = <literal>2</literal></paragraph>
            <paragraph>启用 MSAA 时，渲染效果需要解析深度缓冲。</paragraph>
            <target refid="class-renderingserver-constant-compositor-effect-flag-needs-motion-vectors"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-compositor-effect-flag-needs-motion-vectors" names="class_renderingserver_constant_compositor_effect_flag_needs_motion_vectors"><reference internal="True" refid="enum-renderingserver-compositoreffectflags"><inline classes="std std-ref">CompositorEffectFlags</inline></reference> <strong>COMPOSITOR_EFFECT_FLAG_NEEDS_MOTION_VECTORS</strong> = <literal>4</literal></paragraph>
            <paragraph>渲染效果需要生成运动向量。</paragraph>
            <target refid="class-renderingserver-constant-compositor-effect-flag-needs-roughness"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-compositor-effect-flag-needs-roughness" names="class_renderingserver_constant_compositor_effect_flag_needs_roughness"><reference internal="True" refid="enum-renderingserver-compositoreffectflags"><inline classes="std std-ref">CompositorEffectFlags</inline></reference> <strong>COMPOSITOR_EFFECT_FLAG_NEEDS_ROUGHNESS</strong> = <literal>8</literal></paragraph>
            <paragraph>渲染效果需要生成法线和粗糙度 G 缓冲（仅适用于 Forward+）。</paragraph>
            <target refid="class-renderingserver-constant-compositor-effect-flag-needs-separate-specular"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-compositor-effect-flag-needs-separate-specular" names="class_renderingserver_constant_compositor_effect_flag_needs_separate_specular"><reference internal="True" refid="enum-renderingserver-compositoreffectflags"><inline classes="std std-ref">CompositorEffectFlags</inline></reference> <strong>COMPOSITOR_EFFECT_FLAG_NEEDS_SEPARATE_SPECULAR</strong> = <literal>16</literal></paragraph>
            <paragraph>渲染效果需要单独的镜面反射数据（仅适用于 Forward+）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-compositoreffectcallbacktype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-compositoreffectcallbacktype" names="enum_renderingserver_compositoreffectcallbacktype">enum <strong>CompositorEffectCallbackType</strong>: <reference internal="True" refid="enum-renderingserver-compositoreffectcallbacktype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-compositor-effect-callback-type-pre-opaque"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-compositor-effect-callback-type-pre-opaque" names="class_renderingserver_constant_compositor_effect_callback_type_pre_opaque"><reference internal="True" refid="enum-renderingserver-compositoreffectcallbacktype"><inline classes="std std-ref">CompositorEffectCallbackType</inline></reference> <strong>COMPOSITOR_EFFECT_CALLBACK_TYPE_PRE_OPAQUE</strong> = <literal>0</literal></paragraph>
            <paragraph>该回调在我们的不透明渲染阶段之前、在深度前置阶段之后（如果适用）调用。</paragraph>
            <target refid="class-renderingserver-constant-compositor-effect-callback-type-post-opaque"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-compositor-effect-callback-type-post-opaque" names="class_renderingserver_constant_compositor_effect_callback_type_post_opaque"><reference internal="True" refid="enum-renderingserver-compositoreffectcallbacktype"><inline classes="std std-ref">CompositorEffectCallbackType</inline></reference> <strong>COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_OPAQUE</strong> = <literal>1</literal></paragraph>
            <paragraph>该回调在我们的不透明渲染阶段之后、天空渲染之前调用。</paragraph>
            <target refid="class-renderingserver-constant-compositor-effect-callback-type-post-sky"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-compositor-effect-callback-type-post-sky" names="class_renderingserver_constant_compositor_effect_callback_type_post_sky"><reference internal="True" refid="enum-renderingserver-compositoreffectcallbacktype"><inline classes="std std-ref">CompositorEffectCallbackType</inline></reference> <strong>COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_SKY</strong> = <literal>2</literal></paragraph>
            <paragraph>在渲染天空之后、创建后台缓冲区之前（如果启用，则在次表面散射和/或屏幕空间反射之前）调用回调。</paragraph>
            <target refid="class-renderingserver-constant-compositor-effect-callback-type-pre-transparent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-compositor-effect-callback-type-pre-transparent" names="class_renderingserver_constant_compositor_effect_callback_type_pre_transparent"><reference internal="True" refid="enum-renderingserver-compositoreffectcallbacktype"><inline classes="std std-ref">CompositorEffectCallbackType</inline></reference> <strong>COMPOSITOR_EFFECT_CALLBACK_TYPE_PRE_TRANSPARENT</strong> = <literal>3</literal></paragraph>
            <paragraph>在我们的透明渲染阶段之前、渲染天空并且创建了后台缓冲区之后，调用回调。</paragraph>
            <target refid="class-renderingserver-constant-compositor-effect-callback-type-post-transparent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-compositor-effect-callback-type-post-transparent" names="class_renderingserver_constant_compositor_effect_callback_type_post_transparent"><reference internal="True" refid="enum-renderingserver-compositoreffectcallbacktype"><inline classes="std std-ref">CompositorEffectCallbackType</inline></reference> <strong>COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_TRANSPARENT</strong> = <literal>4</literal></paragraph>
            <paragraph>该回调在我们的透明渲染阶段之后、任何构建后期效果和输出到渲染目标之前调用。</paragraph>
            <target refid="class-renderingserver-constant-compositor-effect-callback-type-any"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-compositor-effect-callback-type-any" names="class_renderingserver_constant_compositor_effect_callback_type_any"><reference internal="True" refid="enum-renderingserver-compositoreffectcallbacktype"><inline classes="std std-ref">CompositorEffectCallbackType</inline></reference> <strong>COMPOSITOR_EFFECT_CALLBACK_TYPE_ANY</strong> = <literal>-1</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmentbg"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmentbg" names="enum_renderingserver_environmentbg">enum <strong>EnvironmentBG</strong>: <reference internal="True" refid="enum-renderingserver-environmentbg"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-bg-clear-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-bg-clear-color" names="class_renderingserver_constant_env_bg_clear_color"><reference internal="True" refid="enum-renderingserver-environmentbg"><inline classes="std std-ref">EnvironmentBG</inline></reference> <strong>ENV_BG_CLEAR_COLOR</strong> = <literal>0</literal></paragraph>
            <paragraph>用透明的颜色作为背景。</paragraph>
            <target refid="class-renderingserver-constant-env-bg-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-bg-color" names="class_renderingserver_constant_env_bg_color"><reference internal="True" refid="enum-renderingserver-environmentbg"><inline classes="std std-ref">EnvironmentBG</inline></reference> <strong>ENV_BG_COLOR</strong> = <literal>1</literal></paragraph>
            <paragraph>使用指定的颜色作为背景。</paragraph>
            <target refid="class-renderingserver-constant-env-bg-sky"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-bg-sky" names="class_renderingserver_constant_env_bg_sky"><reference internal="True" refid="enum-renderingserver-environmentbg"><inline classes="std std-ref">EnvironmentBG</inline></reference> <strong>ENV_BG_SKY</strong> = <literal>2</literal></paragraph>
            <paragraph>使用天空资源作为背景。</paragraph>
            <target refid="class-renderingserver-constant-env-bg-canvas"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-bg-canvas" names="class_renderingserver_constant_env_bg_canvas"><reference internal="True" refid="enum-renderingserver-environmentbg"><inline classes="std std-ref">EnvironmentBG</inline></reference> <strong>ENV_BG_CANVAS</strong> = <literal>3</literal></paragraph>
            <paragraph>使用一个指定的画布层作为背景。这对在 3D 世界中实例化一个 2D 场景很有用。</paragraph>
            <target refid="class-renderingserver-constant-env-bg-keep"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-bg-keep" names="class_renderingserver_constant_env_bg_keep"><reference internal="True" refid="enum-renderingserver-environmentbg"><inline classes="std std-ref">EnvironmentBG</inline></reference> <strong>ENV_BG_KEEP</strong> = <literal>4</literal></paragraph>
            <paragraph>不要清除背景，使用上一帧渲染的东西作为背景。</paragraph>
            <target refid="class-renderingserver-constant-env-bg-camera-feed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-bg-camera-feed" names="class_renderingserver_constant_env_bg_camera_feed"><reference internal="True" refid="enum-renderingserver-environmentbg"><inline classes="std std-ref">EnvironmentBG</inline></reference> <strong>ENV_BG_CAMERA_FEED</strong> = <literal>5</literal></paragraph>
            <paragraph>在背景中显示相机源。</paragraph>
            <target refid="class-renderingserver-constant-env-bg-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-bg-max" names="class_renderingserver_constant_env_bg_max"><reference internal="True" refid="enum-renderingserver-environmentbg"><inline classes="std std-ref">EnvironmentBG</inline></reference> <strong>ENV_BG_MAX</strong> = <literal>6</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-environmentbg"><inline classes="std std-ref">EnvironmentBG</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmentambientsource"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmentambientsource" names="enum_renderingserver_environmentambientsource">enum <strong>EnvironmentAmbientSource</strong>: <reference internal="True" refid="enum-renderingserver-environmentambientsource"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-ambient-source-bg"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ambient-source-bg" names="class_renderingserver_constant_env_ambient_source_bg"><reference internal="True" refid="enum-renderingserver-environmentambientsource"><inline classes="std std-ref">EnvironmentAmbientSource</inline></reference> <strong>ENV_AMBIENT_SOURCE_BG</strong> = <literal>0</literal></paragraph>
            <paragraph>从指定为背景的任何来源收集环境光。</paragraph>
            <target refid="class-renderingserver-constant-env-ambient-source-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ambient-source-disabled" names="class_renderingserver_constant_env_ambient_source_disabled"><reference internal="True" refid="enum-renderingserver-environmentambientsource"><inline classes="std std-ref">EnvironmentAmbientSource</inline></reference> <strong>ENV_AMBIENT_SOURCE_DISABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>禁用环境光。</paragraph>
            <target refid="class-renderingserver-constant-env-ambient-source-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ambient-source-color" names="class_renderingserver_constant_env_ambient_source_color"><reference internal="True" refid="enum-renderingserver-environmentambientsource"><inline classes="std std-ref">EnvironmentAmbientSource</inline></reference> <strong>ENV_AMBIENT_SOURCE_COLOR</strong> = <literal>2</literal></paragraph>
            <paragraph>为环境光指定特定的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <target refid="class-renderingserver-constant-env-ambient-source-sky"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ambient-source-sky" names="class_renderingserver_constant_env_ambient_source_sky"><reference internal="True" refid="enum-renderingserver-environmentambientsource"><inline classes="std std-ref">EnvironmentAmbientSource</inline></reference> <strong>ENV_AMBIENT_SOURCE_SKY</strong> = <literal>3</literal></paragraph>
            <paragraph>无论背景如何，都从 <reference internal="True" refuri="class_sky#class-sky"><inline classes="std std-ref">Sky</inline></reference> 收集环境光。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmentreflectionsource"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmentreflectionsource" names="enum_renderingserver_environmentreflectionsource">enum <strong>EnvironmentReflectionSource</strong>: <reference internal="True" refid="enum-renderingserver-environmentreflectionsource"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-reflection-source-bg"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-reflection-source-bg" names="class_renderingserver_constant_env_reflection_source_bg"><reference internal="True" refid="enum-renderingserver-environmentreflectionsource"><inline classes="std std-ref">EnvironmentReflectionSource</inline></reference> <strong>ENV_REFLECTION_SOURCE_BG</strong> = <literal>0</literal></paragraph>
            <paragraph>使用背景进行反射。</paragraph>
            <target refid="class-renderingserver-constant-env-reflection-source-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-reflection-source-disabled" names="class_renderingserver_constant_env_reflection_source_disabled"><reference internal="True" refid="enum-renderingserver-environmentreflectionsource"><inline classes="std std-ref">EnvironmentReflectionSource</inline></reference> <strong>ENV_REFLECTION_SOURCE_DISABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>禁用反射。</paragraph>
            <target refid="class-renderingserver-constant-env-reflection-source-sky"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-reflection-source-sky" names="class_renderingserver_constant_env_reflection_source_sky"><reference internal="True" refid="enum-renderingserver-environmentreflectionsource"><inline classes="std std-ref">EnvironmentReflectionSource</inline></reference> <strong>ENV_REFLECTION_SOURCE_SKY</strong> = <literal>2</literal></paragraph>
            <paragraph>无论背景如何，都使用 <reference internal="True" refuri="class_sky#class-sky"><inline classes="std std-ref">Sky</inline></reference> 进行反射。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmentglowblendmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmentglowblendmode" names="enum_renderingserver_environmentglowblendmode">enum <strong>EnvironmentGlowBlendMode</strong>: <reference internal="True" refid="enum-renderingserver-environmentglowblendmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-glow-blend-mode-additive"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-glow-blend-mode-additive" names="class_renderingserver_constant_env_glow_blend_mode_additive"><reference internal="True" refid="enum-renderingserver-environmentglowblendmode"><inline classes="std std-ref">EnvironmentGlowBlendMode</inline></reference> <strong>ENV_GLOW_BLEND_MODE_ADDITIVE</strong> = <literal>0</literal></paragraph>
            <paragraph>添加辉光混合模式。主要用于粒子、辉光（泛光）、镜头眩光、亮源。</paragraph>
            <target refid="class-renderingserver-constant-env-glow-blend-mode-screen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-glow-blend-mode-screen" names="class_renderingserver_constant_env_glow_blend_mode_screen"><reference internal="True" refid="enum-renderingserver-environmentglowblendmode"><inline classes="std std-ref">EnvironmentGlowBlendMode</inline></reference> <strong>ENV_GLOW_BLEND_MODE_SCREEN</strong> = <literal>1</literal></paragraph>
            <paragraph>滤色辉光混合模式。增加亮度，经常与泛光一起使用。</paragraph>
            <target refid="class-renderingserver-constant-env-glow-blend-mode-softlight"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-glow-blend-mode-softlight" names="class_renderingserver_constant_env_glow_blend_mode_softlight"><reference internal="True" refid="enum-renderingserver-environmentglowblendmode"><inline classes="std std-ref">EnvironmentGlowBlendMode</inline></reference> <strong>ENV_GLOW_BLEND_MODE_SOFTLIGHT</strong> = <literal>2</literal></paragraph>
            <paragraph>柔光辉光混合模式。修改对比度，曝光阴影和高光（高质量泛光）。</paragraph>
            <target refid="class-renderingserver-constant-env-glow-blend-mode-replace"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-glow-blend-mode-replace" names="class_renderingserver_constant_env_glow_blend_mode_replace"><reference internal="True" refid="enum-renderingserver-environmentglowblendmode"><inline classes="std std-ref">EnvironmentGlowBlendMode</inline></reference> <strong>ENV_GLOW_BLEND_MODE_REPLACE</strong> = <literal>3</literal></paragraph>
            <paragraph>替换辉光混合模式。用辉光值替换所有像素的颜色。这可以通过调整辉光参数来模拟全屏模糊效果，使其与原始图像的亮度相匹配。</paragraph>
            <target refid="class-renderingserver-constant-env-glow-blend-mode-mix"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-glow-blend-mode-mix" names="class_renderingserver_constant_env_glow_blend_mode_mix"><reference internal="True" refid="enum-renderingserver-environmentglowblendmode"><inline classes="std std-ref">EnvironmentGlowBlendMode</inline></reference> <strong>ENV_GLOW_BLEND_MODE_MIX</strong> = <literal>4</literal></paragraph>
            <paragraph>将辉光与底层颜色混合，以避免在保持辉光效果的同时，尽可能多地增加亮度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmentfogmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmentfogmode" names="enum_renderingserver_environmentfogmode">enum <strong>EnvironmentFogMode</strong>: <reference internal="True" refid="enum-renderingserver-environmentfogmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-fog-mode-exponential"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-fog-mode-exponential" names="class_renderingserver_constant_env_fog_mode_exponential"><reference internal="True" refid="enum-renderingserver-environmentfogmode"><inline classes="std std-ref">EnvironmentFogMode</inline></reference> <strong>ENV_FOG_MODE_EXPONENTIAL</strong> = <literal>0</literal></paragraph>
            <paragraph>使用主要由雾密度定义的基于物理的雾模型。</paragraph>
            <target refid="class-renderingserver-constant-env-fog-mode-depth"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-fog-mode-depth" names="class_renderingserver_constant_env_fog_mode_depth"><reference internal="True" refid="enum-renderingserver-environmentfogmode"><inline classes="std std-ref">EnvironmentFogMode</inline></reference> <strong>ENV_FOG_MODE_DEPTH</strong> = <literal>1</literal></paragraph>
            <paragraph>使用由开始位置和结束位置以及自定义曲线定义的简单雾模型。虽然在物理上并不准确，但当你需要更多的艺术控制时，该模型可能会很有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmenttonemapper"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmenttonemapper" names="enum_renderingserver_environmenttonemapper">enum <strong>EnvironmentToneMapper</strong>: <reference internal="True" refid="enum-renderingserver-environmenttonemapper"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-tone-mapper-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-tone-mapper-linear" names="class_renderingserver_constant_env_tone_mapper_linear"><reference internal="True" refid="enum-renderingserver-environmenttonemapper"><inline classes="std std-ref">EnvironmentToneMapper</inline></reference> <strong>ENV_TONE_MAPPER_LINEAR</strong> = <literal>0</literal></paragraph>
            <paragraph>按照输入原样输出颜色。较亮的光照会导致过曝、输出的颜色中会有可见的截断。</paragraph>
            <target refid="class-renderingserver-constant-env-tone-mapper-reinhard"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-tone-mapper-reinhard" names="class_renderingserver_constant_env_tone_mapper_reinhard"><reference internal="True" refid="enum-renderingserver-environmenttonemapper"><inline classes="std std-ref">EnvironmentToneMapper</inline></reference> <strong>ENV_TONE_MAPPER_REINHARD</strong> = <literal>1</literal></paragraph>
            <paragraph>使用 Reinhard 色调映射器。对渲染后的像素颜色进行调整，使用的是这个公式：<literal>color = color / (1 + color)</literal>。可以避免对高光的截断，但最终的图像可能看上去有些寡淡。</paragraph>
            <target refid="class-renderingserver-constant-env-tone-mapper-filmic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-tone-mapper-filmic" names="class_renderingserver_constant_env_tone_mapper_filmic"><reference internal="True" refid="enum-renderingserver-environmenttonemapper"><inline classes="std std-ref">EnvironmentToneMapper</inline></reference> <strong>ENV_TONE_MAPPER_FILMIC</strong> = <literal>2</literal></paragraph>
            <paragraph>使用电影级色调映射器。可以避免对高光的截断，最终的图像一般比 <reference internal="True" refid="class-renderingserver-constant-env-tone-mapper-reinhard"><inline classes="std std-ref">ENV_TONE_MAPPER_REINHARD</inline></reference> 看上去更鲜艳。</paragraph>
            <target refid="class-renderingserver-constant-env-tone-mapper-aces"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-tone-mapper-aces" names="class_renderingserver_constant_env_tone_mapper_aces"><reference internal="True" refid="enum-renderingserver-environmenttonemapper"><inline classes="std std-ref">EnvironmentToneMapper</inline></reference> <strong>ENV_TONE_MAPPER_ACES</strong> = <literal>3</literal></paragraph>
            <paragraph>使用Academy 颜色编码系统色调映射器。ACES 比其他选项稍贵一些，但它通过在光线变亮时对其进行去饱和处理，以更逼真的方式处理明亮的光线。与 <reference internal="True" refid="class-renderingserver-constant-env-tone-mapper-reinhard"><inline classes="std std-ref">ENV_TONE_MAPPER_REINHARD</inline></reference> 和 <reference internal="True" refid="class-renderingserver-constant-env-tone-mapper-filmic"><inline classes="std std-ref">ENV_TONE_MAPPER_FILMIC</inline></reference> 相比，ACES 通常具有对比度更高的输出。</paragraph>
            <paragraph><strong>注意：</strong>这个色调映射运算符在 Godot 3.x 中被称为“ACES Fitted”。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmentssrroughnessquality"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmentssrroughnessquality" names="enum_renderingserver_environmentssrroughnessquality">enum <strong>EnvironmentSSRRoughnessQuality</strong>: <reference internal="True" refid="enum-renderingserver-environmentssrroughnessquality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-ssr-roughness-quality-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssr-roughness-quality-disabled" names="class_renderingserver_constant_env_ssr_roughness_quality_disabled"><reference internal="True" refid="enum-renderingserver-environmentssrroughnessquality"><inline classes="std std-ref">EnvironmentSSRRoughnessQuality</inline></reference> <strong>ENV_SSR_ROUGHNESS_QUALITY_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>用于屏幕空间反射的最低质量粗糙度过滤。与光滑（非粗糙）材质相比，粗糙材质不会有更模糊的屏幕空间反射。这是最快的选项。</paragraph>
            <target refid="class-renderingserver-constant-env-ssr-roughness-quality-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssr-roughness-quality-low" names="class_renderingserver_constant_env_ssr_roughness_quality_low"><reference internal="True" refid="enum-renderingserver-environmentssrroughnessquality"><inline classes="std std-ref">EnvironmentSSRRoughnessQuality</inline></reference> <strong>ENV_SSR_ROUGHNESS_QUALITY_LOW</strong> = <literal>1</literal></paragraph>
            <paragraph>屏幕空间反射的较低质量粗糙度过滤器。</paragraph>
            <target refid="class-renderingserver-constant-env-ssr-roughness-quality-medium"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssr-roughness-quality-medium" names="class_renderingserver_constant_env_ssr_roughness_quality_medium"><reference internal="True" refid="enum-renderingserver-environmentssrroughnessquality"><inline classes="std std-ref">EnvironmentSSRRoughnessQuality</inline></reference> <strong>ENV_SSR_ROUGHNESS_QUALITY_MEDIUM</strong> = <literal>2</literal></paragraph>
            <paragraph>屏幕空间反射的中等质量粗糙度过滤器。</paragraph>
            <target refid="class-renderingserver-constant-env-ssr-roughness-quality-high"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssr-roughness-quality-high" names="class_renderingserver_constant_env_ssr_roughness_quality_high"><reference internal="True" refid="enum-renderingserver-environmentssrroughnessquality"><inline classes="std std-ref">EnvironmentSSRRoughnessQuality</inline></reference> <strong>ENV_SSR_ROUGHNESS_QUALITY_HIGH</strong> = <literal>3</literal></paragraph>
            <paragraph>屏幕空间反射的较高质量粗糙度过滤器。这是最慢的选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmentssaoquality"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmentssaoquality" names="enum_renderingserver_environmentssaoquality">enum <strong>EnvironmentSSAOQuality</strong>: <reference internal="True" refid="enum-renderingserver-environmentssaoquality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-ssao-quality-very-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssao-quality-very-low" names="class_renderingserver_constant_env_ssao_quality_very_low"><reference internal="True" refid="enum-renderingserver-environmentssaoquality"><inline classes="std std-ref">EnvironmentSSAOQuality</inline></reference> <strong>ENV_SSAO_QUALITY_VERY_LOW</strong> = <literal>0</literal></paragraph>
            <paragraph>最低质量的屏幕空间环境光遮蔽。</paragraph>
            <target refid="class-renderingserver-constant-env-ssao-quality-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssao-quality-low" names="class_renderingserver_constant_env_ssao_quality_low"><reference internal="True" refid="enum-renderingserver-environmentssaoquality"><inline classes="std std-ref">EnvironmentSSAOQuality</inline></reference> <strong>ENV_SSAO_QUALITY_LOW</strong> = <literal>1</literal></paragraph>
            <paragraph>低质量的屏幕空间环境光遮蔽。</paragraph>
            <target refid="class-renderingserver-constant-env-ssao-quality-medium"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssao-quality-medium" names="class_renderingserver_constant_env_ssao_quality_medium"><reference internal="True" refid="enum-renderingserver-environmentssaoquality"><inline classes="std std-ref">EnvironmentSSAOQuality</inline></reference> <strong>ENV_SSAO_QUALITY_MEDIUM</strong> = <literal>2</literal></paragraph>
            <paragraph>中等质量的屏幕空间环境光遮蔽。</paragraph>
            <target refid="class-renderingserver-constant-env-ssao-quality-high"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssao-quality-high" names="class_renderingserver_constant_env_ssao_quality_high"><reference internal="True" refid="enum-renderingserver-environmentssaoquality"><inline classes="std std-ref">EnvironmentSSAOQuality</inline></reference> <strong>ENV_SSAO_QUALITY_HIGH</strong> = <literal>3</literal></paragraph>
            <paragraph>高质量的屏幕空间环境光遮蔽。</paragraph>
            <target refid="class-renderingserver-constant-env-ssao-quality-ultra"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssao-quality-ultra" names="class_renderingserver_constant_env_ssao_quality_ultra"><reference internal="True" refid="enum-renderingserver-environmentssaoquality"><inline classes="std std-ref">EnvironmentSSAOQuality</inline></reference> <strong>ENV_SSAO_QUALITY_ULTRA</strong> = <literal>4</literal></paragraph>
            <paragraph>最高质量的屏幕空间环境光遮蔽。使用可动态调整的自适应目标设置，以平滑地平衡性能和视觉质量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmentssilquality"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmentssilquality" names="enum_renderingserver_environmentssilquality">enum <strong>EnvironmentSSILQuality</strong>: <reference internal="True" refid="enum-renderingserver-environmentssilquality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-ssil-quality-very-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssil-quality-very-low" names="class_renderingserver_constant_env_ssil_quality_very_low"><reference internal="True" refid="enum-renderingserver-environmentssilquality"><inline classes="std std-ref">EnvironmentSSILQuality</inline></reference> <strong>ENV_SSIL_QUALITY_VERY_LOW</strong> = <literal>0</literal></paragraph>
            <paragraph>最低质量的屏幕空间间接光照。</paragraph>
            <target refid="class-renderingserver-constant-env-ssil-quality-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssil-quality-low" names="class_renderingserver_constant_env_ssil_quality_low"><reference internal="True" refid="enum-renderingserver-environmentssilquality"><inline classes="std std-ref">EnvironmentSSILQuality</inline></reference> <strong>ENV_SSIL_QUALITY_LOW</strong> = <literal>1</literal></paragraph>
            <paragraph>较低质量的屏幕空间间接光照。</paragraph>
            <target refid="class-renderingserver-constant-env-ssil-quality-medium"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssil-quality-medium" names="class_renderingserver_constant_env_ssil_quality_medium"><reference internal="True" refid="enum-renderingserver-environmentssilquality"><inline classes="std std-ref">EnvironmentSSILQuality</inline></reference> <strong>ENV_SSIL_QUALITY_MEDIUM</strong> = <literal>2</literal></paragraph>
            <paragraph>较高质量的屏幕空间间接光照。</paragraph>
            <target refid="class-renderingserver-constant-env-ssil-quality-high"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssil-quality-high" names="class_renderingserver_constant_env_ssil_quality_high"><reference internal="True" refid="enum-renderingserver-environmentssilquality"><inline classes="std std-ref">EnvironmentSSILQuality</inline></reference> <strong>ENV_SSIL_QUALITY_HIGH</strong> = <literal>3</literal></paragraph>
            <paragraph>较高质量的屏幕空间间接光照。</paragraph>
            <target refid="class-renderingserver-constant-env-ssil-quality-ultra"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-ssil-quality-ultra" names="class_renderingserver_constant_env_ssil_quality_ultra"><reference internal="True" refid="enum-renderingserver-environmentssilquality"><inline classes="std std-ref">EnvironmentSSILQuality</inline></reference> <strong>ENV_SSIL_QUALITY_ULTRA</strong> = <literal>4</literal></paragraph>
            <paragraph>最高质量的屏幕空间间接光照。使用可动态调整的自适应目标设置，以平滑地平衡性能和视觉质量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmentsdfgiyscale"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmentsdfgiyscale" names="enum_renderingserver_environmentsdfgiyscale">enum <strong>EnvironmentSDFGIYScale</strong>: <reference internal="True" refid="enum-renderingserver-environmentsdfgiyscale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-y-scale-50-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-y-scale-50-percent" names="class_renderingserver_constant_env_sdfgi_y_scale_50_percent"><reference internal="True" refid="enum-renderingserver-environmentsdfgiyscale"><inline classes="std std-ref">EnvironmentSDFGIYScale</inline></reference> <strong>ENV_SDFGI_Y_SCALE_50_PERCENT</strong> = <literal>0</literal></paragraph>
            <paragraph>在 Y（垂直）轴上对 SDFGI 使用 50% 的缩放。SDFGI 单元格将比它们的宽度短两倍。这允许提供更多的 GI 细节，并减少薄地板和天花板的漏光。这通常是垂直度不高的场景的最佳选择。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-y-scale-75-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-y-scale-75-percent" names="class_renderingserver_constant_env_sdfgi_y_scale_75_percent"><reference internal="True" refid="enum-renderingserver-environmentsdfgiyscale"><inline classes="std std-ref">EnvironmentSDFGIYScale</inline></reference> <strong>ENV_SDFGI_Y_SCALE_75_PERCENT</strong> = <literal>1</literal></paragraph>
            <paragraph>在 Y（垂直）轴上为 SDFGI 使用 75% 的缩放。这是 50% 和 100% SDFGI Y 缩放之间的平衡。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-y-scale-100-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-y-scale-100-percent" names="class_renderingserver_constant_env_sdfgi_y_scale_100_percent"><reference internal="True" refid="enum-renderingserver-environmentsdfgiyscale"><inline classes="std std-ref">EnvironmentSDFGIYScale</inline></reference> <strong>ENV_SDFGI_Y_SCALE_100_PERCENT</strong> = <literal>2</literal></paragraph>
            <paragraph>在 Y（垂直）轴上为 SDFGI 使用 100% 的缩放。SDFGI 单元格将与宽度一样高。这通常是高度垂直场景的最佳选择。不利之处在于，薄地板和天花板可能会导致漏光更加明显。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmentsdfgiraycount"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmentsdfgiraycount" names="enum_renderingserver_environmentsdfgiraycount">enum <strong>EnvironmentSDFGIRayCount</strong>: <reference internal="True" refid="enum-renderingserver-environmentsdfgiraycount"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-ray-count-4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-ray-count-4" names="class_renderingserver_constant_env_sdfgi_ray_count_4"><reference internal="True" refid="enum-renderingserver-environmentsdfgiraycount"><inline classes="std std-ref">EnvironmentSDFGIRayCount</inline></reference> <strong>ENV_SDFGI_RAY_COUNT_4</strong> = <literal>0</literal></paragraph>
            <paragraph>聚合 SDFGI 时每帧发出 4 条光线。对 GPU 的要求最低，但结果中噪点最多。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-ray-count-8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-ray-count-8" names="class_renderingserver_constant_env_sdfgi_ray_count_8"><reference internal="True" refid="enum-renderingserver-environmentsdfgiraycount"><inline classes="std std-ref">EnvironmentSDFGIRayCount</inline></reference> <strong>ENV_SDFGI_RAY_COUNT_8</strong> = <literal>1</literal></paragraph>
            <paragraph>聚合 SDFGI 时每帧发出 8 条光线。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-ray-count-16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-ray-count-16" names="class_renderingserver_constant_env_sdfgi_ray_count_16"><reference internal="True" refid="enum-renderingserver-environmentsdfgiraycount"><inline classes="std std-ref">EnvironmentSDFGIRayCount</inline></reference> <strong>ENV_SDFGI_RAY_COUNT_16</strong> = <literal>2</literal></paragraph>
            <paragraph>聚合 SDFGI 时每帧发出 16 条光线。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-ray-count-32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-ray-count-32" names="class_renderingserver_constant_env_sdfgi_ray_count_32"><reference internal="True" refid="enum-renderingserver-environmentsdfgiraycount"><inline classes="std std-ref">EnvironmentSDFGIRayCount</inline></reference> <strong>ENV_SDFGI_RAY_COUNT_32</strong> = <literal>3</literal></paragraph>
            <paragraph>聚合 SDFGI 时每帧发出 32 条光线。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-ray-count-64"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-ray-count-64" names="class_renderingserver_constant_env_sdfgi_ray_count_64"><reference internal="True" refid="enum-renderingserver-environmentsdfgiraycount"><inline classes="std std-ref">EnvironmentSDFGIRayCount</inline></reference> <strong>ENV_SDFGI_RAY_COUNT_64</strong> = <literal>4</literal></paragraph>
            <paragraph>聚合 SDFGI 时每帧发出 64 条光线。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-ray-count-96"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-ray-count-96" names="class_renderingserver_constant_env_sdfgi_ray_count_96"><reference internal="True" refid="enum-renderingserver-environmentsdfgiraycount"><inline classes="std std-ref">EnvironmentSDFGIRayCount</inline></reference> <strong>ENV_SDFGI_RAY_COUNT_96</strong> = <literal>5</literal></paragraph>
            <paragraph>聚合 SDFGI 时每帧发出 96 条光线。对 GPU 的要求较高。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-ray-count-128"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-ray-count-128" names="class_renderingserver_constant_env_sdfgi_ray_count_128"><reference internal="True" refid="enum-renderingserver-environmentsdfgiraycount"><inline classes="std std-ref">EnvironmentSDFGIRayCount</inline></reference> <strong>ENV_SDFGI_RAY_COUNT_128</strong> = <literal>6</literal></paragraph>
            <paragraph>聚合 SDFGI 时每帧发出 128 条光线。对 GPU 的要求非常高，但结果中噪点最少。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-ray-count-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-ray-count-max" names="class_renderingserver_constant_env_sdfgi_ray_count_max"><reference internal="True" refid="enum-renderingserver-environmentsdfgiraycount"><inline classes="std std-ref">EnvironmentSDFGIRayCount</inline></reference> <strong>ENV_SDFGI_RAY_COUNT_MAX</strong> = <literal>7</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-environmentsdfgiraycount"><inline classes="std std-ref">EnvironmentSDFGIRayCount</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmentsdfgiframestoconverge"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmentsdfgiframestoconverge" names="enum_renderingserver_environmentsdfgiframestoconverge">enum <strong>EnvironmentSDFGIFramesToConverge</strong>: <reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoconverge"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-converge-in-5-frames"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-converge-in-5-frames" names="class_renderingserver_constant_env_sdfgi_converge_in_5_frames"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoconverge"><inline classes="std std-ref">EnvironmentSDFGIFramesToConverge</inline></reference> <strong>ENV_SDFGI_CONVERGE_IN_5_FRAMES</strong> = <literal>0</literal></paragraph>
            <paragraph>通过 5 帧聚合 SDFGI。响应最快，但光线数量一定时，结果中噪点最多。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-converge-in-10-frames"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-converge-in-10-frames" names="class_renderingserver_constant_env_sdfgi_converge_in_10_frames"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoconverge"><inline classes="std std-ref">EnvironmentSDFGIFramesToConverge</inline></reference> <strong>ENV_SDFGI_CONVERGE_IN_10_FRAMES</strong> = <literal>1</literal></paragraph>
            <paragraph>让 SDFGI 通过 10 帧完成聚合。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-converge-in-15-frames"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-converge-in-15-frames" names="class_renderingserver_constant_env_sdfgi_converge_in_15_frames"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoconverge"><inline classes="std std-ref">EnvironmentSDFGIFramesToConverge</inline></reference> <strong>ENV_SDFGI_CONVERGE_IN_15_FRAMES</strong> = <literal>2</literal></paragraph>
            <paragraph>让 SDFGI 通过 15 帧完成聚合。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-converge-in-20-frames"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-converge-in-20-frames" names="class_renderingserver_constant_env_sdfgi_converge_in_20_frames"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoconverge"><inline classes="std std-ref">EnvironmentSDFGIFramesToConverge</inline></reference> <strong>ENV_SDFGI_CONVERGE_IN_20_FRAMES</strong> = <literal>3</literal></paragraph>
            <paragraph>让 SDFGI 通过 20 帧完成聚合。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-converge-in-25-frames"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-converge-in-25-frames" names="class_renderingserver_constant_env_sdfgi_converge_in_25_frames"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoconverge"><inline classes="std std-ref">EnvironmentSDFGIFramesToConverge</inline></reference> <strong>ENV_SDFGI_CONVERGE_IN_25_FRAMES</strong> = <literal>4</literal></paragraph>
            <paragraph>让 SDFGI 通过 25 帧完成聚合。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-converge-in-30-frames"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-converge-in-30-frames" names="class_renderingserver_constant_env_sdfgi_converge_in_30_frames"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoconverge"><inline classes="std std-ref">EnvironmentSDFGIFramesToConverge</inline></reference> <strong>ENV_SDFGI_CONVERGE_IN_30_FRAMES</strong> = <literal>5</literal></paragraph>
            <paragraph>让 SDFGI 通过 30 帧完成聚合。响应最慢，但光线数量一定时，结果中噪点最少。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-converge-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-converge-max" names="class_renderingserver_constant_env_sdfgi_converge_max"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoconverge"><inline classes="std std-ref">EnvironmentSDFGIFramesToConverge</inline></reference> <strong>ENV_SDFGI_CONVERGE_MAX</strong> = <literal>6</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoconverge"><inline classes="std std-ref">EnvironmentSDFGIFramesToConverge</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-environmentsdfgiframestoupdatelight"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-environmentsdfgiframestoupdatelight" names="enum_renderingserver_environmentsdfgiframestoupdatelight">enum <strong>EnvironmentSDFGIFramesToUpdateLight</strong>: <reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoupdatelight"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-update-light-in-1-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-update-light-in-1-frame" names="class_renderingserver_constant_env_sdfgi_update_light_in_1_frame"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoupdatelight"><inline classes="std std-ref">EnvironmentSDFGIFramesToUpdateLight</inline></reference> <strong>ENV_SDFGI_UPDATE_LIGHT_IN_1_FRAME</strong> = <literal>0</literal></paragraph>
            <paragraph>通过 1 帧更新 SDFGI 中动态灯光的间接光照。响应最快，但对 GPU 的要求最高。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-update-light-in-2-frames"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-update-light-in-2-frames" names="class_renderingserver_constant_env_sdfgi_update_light_in_2_frames"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoupdatelight"><inline classes="std std-ref">EnvironmentSDFGIFramesToUpdateLight</inline></reference> <strong>ENV_SDFGI_UPDATE_LIGHT_IN_2_FRAMES</strong> = <literal>1</literal></paragraph>
            <paragraph>通过 2 帧更新 SDFGI 中动态灯光的间接光照。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-update-light-in-4-frames"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-update-light-in-4-frames" names="class_renderingserver_constant_env_sdfgi_update_light_in_4_frames"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoupdatelight"><inline classes="std std-ref">EnvironmentSDFGIFramesToUpdateLight</inline></reference> <strong>ENV_SDFGI_UPDATE_LIGHT_IN_4_FRAMES</strong> = <literal>2</literal></paragraph>
            <paragraph>通过 4 帧更新 SDFGI 中动态灯光的间接光照。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-update-light-in-8-frames"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-update-light-in-8-frames" names="class_renderingserver_constant_env_sdfgi_update_light_in_8_frames"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoupdatelight"><inline classes="std std-ref">EnvironmentSDFGIFramesToUpdateLight</inline></reference> <strong>ENV_SDFGI_UPDATE_LIGHT_IN_8_FRAMES</strong> = <literal>3</literal></paragraph>
            <paragraph>通过 8 帧更新 SDFGI 中动态灯光的间接光照。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-update-light-in-16-frames"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-update-light-in-16-frames" names="class_renderingserver_constant_env_sdfgi_update_light_in_16_frames"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoupdatelight"><inline classes="std std-ref">EnvironmentSDFGIFramesToUpdateLight</inline></reference> <strong>ENV_SDFGI_UPDATE_LIGHT_IN_16_FRAMES</strong> = <literal>4</literal></paragraph>
            <paragraph>通过 16 帧更新 SDFGI 中动态灯光的间接光照。响应最慢，但对 GPU 的要求最低。</paragraph>
            <target refid="class-renderingserver-constant-env-sdfgi-update-light-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-env-sdfgi-update-light-max" names="class_renderingserver_constant_env_sdfgi_update_light_max"><reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoupdatelight"><inline classes="std std-ref">EnvironmentSDFGIFramesToUpdateLight</inline></reference> <strong>ENV_SDFGI_UPDATE_LIGHT_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoupdatelight"><inline classes="std std-ref">EnvironmentSDFGIFramesToUpdateLight</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-subsurfacescatteringquality"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-subsurfacescatteringquality" names="enum_renderingserver_subsurfacescatteringquality">enum <strong>SubSurfaceScatteringQuality</strong>: <reference internal="True" refid="enum-renderingserver-subsurfacescatteringquality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-sub-surface-scattering-quality-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-sub-surface-scattering-quality-disabled" names="class_renderingserver_constant_sub_surface_scattering_quality_disabled"><reference internal="True" refid="enum-renderingserver-subsurfacescatteringquality"><inline classes="std std-ref">SubSurfaceScatteringQuality</inline></reference> <strong>SUB_SURFACE_SCATTERING_QUALITY_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>完全禁用次表面散射，即便材质的 <reference internal="True" refuri="class_basematerial3d#class-basematerial3d-property-subsurf-scatter-enabled"><inline classes="std std-ref">BaseMaterial3D.subsurf_scatter_enabled</inline></reference> 为 <literal>true</literal>。对 GPU 的要求最低。</paragraph>
            <target refid="class-renderingserver-constant-sub-surface-scattering-quality-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-sub-surface-scattering-quality-low" names="class_renderingserver_constant_sub_surface_scattering_quality_low"><reference internal="True" refid="enum-renderingserver-subsurfacescatteringquality"><inline classes="std std-ref">SubSurfaceScatteringQuality</inline></reference> <strong>SUB_SURFACE_SCATTERING_QUALITY_LOW</strong> = <literal>1</literal></paragraph>
            <paragraph>较低质量的次表面散射。</paragraph>
            <target refid="class-renderingserver-constant-sub-surface-scattering-quality-medium"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-sub-surface-scattering-quality-medium" names="class_renderingserver_constant_sub_surface_scattering_quality_medium"><reference internal="True" refid="enum-renderingserver-subsurfacescatteringquality"><inline classes="std std-ref">SubSurfaceScatteringQuality</inline></reference> <strong>SUB_SURFACE_SCATTERING_QUALITY_MEDIUM</strong> = <literal>2</literal></paragraph>
            <paragraph>中等质量的次表面散射。</paragraph>
            <target refid="class-renderingserver-constant-sub-surface-scattering-quality-high"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-sub-surface-scattering-quality-high" names="class_renderingserver_constant_sub_surface_scattering_quality_high"><reference internal="True" refid="enum-renderingserver-subsurfacescatteringquality"><inline classes="std std-ref">SubSurfaceScatteringQuality</inline></reference> <strong>SUB_SURFACE_SCATTERING_QUALITY_HIGH</strong> = <literal>3</literal></paragraph>
            <paragraph>较高质量的次表面散射。对 GPU 的要求最高。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-dofbokehshape"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-dofbokehshape" names="enum_renderingserver_dofbokehshape">enum <strong>DOFBokehShape</strong>: <reference internal="True" refid="enum-renderingserver-dofbokehshape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-dof-bokeh-box"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-dof-bokeh-box" names="class_renderingserver_constant_dof_bokeh_box"><reference internal="True" refid="enum-renderingserver-dofbokehshape"><inline classes="std std-ref">DOFBokehShape</inline></reference> <strong>DOF_BOKEH_BOX</strong> = <literal>0</literal></paragraph>
            <paragraph>使用一个盒式过滤计算 DOF 模糊。最快的选项，但会在模糊图案中产生明显的线条。</paragraph>
            <target refid="class-renderingserver-constant-dof-bokeh-hexagon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-dof-bokeh-hexagon" names="class_renderingserver_constant_dof_bokeh_hexagon"><reference internal="True" refid="enum-renderingserver-dofbokehshape"><inline classes="std std-ref">DOFBokehShape</inline></reference> <strong>DOF_BOKEH_HEXAGON</strong> = <literal>1</literal></paragraph>
            <paragraph>使用一个六边形过滤计算 DOF 模糊。</paragraph>
            <target refid="class-renderingserver-constant-dof-bokeh-circle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-dof-bokeh-circle" names="class_renderingserver_constant_dof_bokeh_circle"><reference internal="True" refid="enum-renderingserver-dofbokehshape"><inline classes="std std-ref">DOFBokehShape</inline></reference> <strong>DOF_BOKEH_CIRCLE</strong> = <literal>2</literal></paragraph>
            <paragraph>使用一个圆形过滤计算 DOF 模糊。最好的质量和最真实的，但最慢的。仅用于可以将大量性能专用于后期处理的区域（例如过场动画）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-dofblurquality"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-dofblurquality" names="enum_renderingserver_dofblurquality">enum <strong>DOFBlurQuality</strong>: <reference internal="True" refid="enum-renderingserver-dofblurquality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-dof-blur-quality-very-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-dof-blur-quality-very-low" names="class_renderingserver_constant_dof_blur_quality_very_low"><reference internal="True" refid="enum-renderingserver-dofblurquality"><inline classes="std std-ref">DOFBlurQuality</inline></reference> <strong>DOF_BLUR_QUALITY_VERY_LOW</strong> = <literal>0</literal></paragraph>
            <paragraph>最低质量的 DOF 模糊。这是最快的设置，但你可能会看到不自然的过滤。</paragraph>
            <target refid="class-renderingserver-constant-dof-blur-quality-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-dof-blur-quality-low" names="class_renderingserver_constant_dof_blur_quality_low"><reference internal="True" refid="enum-renderingserver-dofblurquality"><inline classes="std std-ref">DOFBlurQuality</inline></reference> <strong>DOF_BLUR_QUALITY_LOW</strong> = <literal>1</literal></paragraph>
            <paragraph>较低质量的 DOF 模糊。</paragraph>
            <target refid="class-renderingserver-constant-dof-blur-quality-medium"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-dof-blur-quality-medium" names="class_renderingserver_constant_dof_blur_quality_medium"><reference internal="True" refid="enum-renderingserver-dofblurquality"><inline classes="std std-ref">DOFBlurQuality</inline></reference> <strong>DOF_BLUR_QUALITY_MEDIUM</strong> = <literal>2</literal></paragraph>
            <paragraph>中等质量的 DOF 模糊。</paragraph>
            <target refid="class-renderingserver-constant-dof-blur-quality-high"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-dof-blur-quality-high" names="class_renderingserver_constant_dof_blur_quality_high"><reference internal="True" refid="enum-renderingserver-dofblurquality"><inline classes="std std-ref">DOFBlurQuality</inline></reference> <strong>DOF_BLUR_QUALITY_HIGH</strong> = <literal>3</literal></paragraph>
            <paragraph>最高质量的 DOF 模糊。通过采集最多的样本，产生最平滑的模糊效果，但速度也明显变慢。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-instancetype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-instancetype" names="enum_renderingserver_instancetype">enum <strong>InstanceType</strong>: <reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-instance-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-none" names="class_renderingserver_constant_instance_none"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>实例没有类型。</paragraph>
            <target refid="class-renderingserver-constant-instance-mesh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-mesh" names="class_renderingserver_constant_instance_mesh"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_MESH</strong> = <literal>1</literal></paragraph>
            <paragraph>该实例是网格。</paragraph>
            <target refid="class-renderingserver-constant-instance-multimesh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-multimesh" names="class_renderingserver_constant_instance_multimesh"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_MULTIMESH</strong> = <literal>2</literal></paragraph>
            <paragraph>该实例是一个 multimesh。</paragraph>
            <target refid="class-renderingserver-constant-instance-particles"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-particles" names="class_renderingserver_constant_instance_particles"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_PARTICLES</strong> = <literal>3</literal></paragraph>
            <paragraph>该实例是粒子发射器。</paragraph>
            <target refid="class-renderingserver-constant-instance-particles-collision"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-particles-collision" names="class_renderingserver_constant_instance_particles_collision"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_PARTICLES_COLLISION</strong> = <literal>4</literal></paragraph>
            <paragraph>该实例是 GPUParticles 碰撞形状。</paragraph>
            <target refid="class-renderingserver-constant-instance-light"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-light" names="class_renderingserver_constant_instance_light"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_LIGHT</strong> = <literal>5</literal></paragraph>
            <paragraph>该实例是灯。</paragraph>
            <target refid="class-renderingserver-constant-instance-reflection-probe"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-reflection-probe" names="class_renderingserver_constant_instance_reflection_probe"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_REFLECTION_PROBE</strong> = <literal>6</literal></paragraph>
            <paragraph>该实例是反射探针。</paragraph>
            <target refid="class-renderingserver-constant-instance-decal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-decal" names="class_renderingserver_constant_instance_decal"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_DECAL</strong> = <literal>7</literal></paragraph>
            <paragraph>该实例是贴花。</paragraph>
            <target refid="class-renderingserver-constant-instance-voxel-gi"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-voxel-gi" names="class_renderingserver_constant_instance_voxel_gi"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_VOXEL_GI</strong> = <literal>8</literal></paragraph>
            <paragraph>该实例是 VoxelGI。</paragraph>
            <target refid="class-renderingserver-constant-instance-lightmap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-lightmap" names="class_renderingserver_constant_instance_lightmap"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_LIGHTMAP</strong> = <literal>9</literal></paragraph>
            <paragraph>该实例是光照贴图。</paragraph>
            <target refid="class-renderingserver-constant-instance-occluder"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-occluder" names="class_renderingserver_constant_instance_occluder"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_OCCLUDER</strong> = <literal>10</literal></paragraph>
            <paragraph>该实例是遮挡剔除遮挡器。</paragraph>
            <target refid="class-renderingserver-constant-instance-visiblity-notifier"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-visiblity-notifier" names="class_renderingserver_constant_instance_visiblity_notifier"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_VISIBLITY_NOTIFIER</strong> = <literal>11</literal></paragraph>
            <paragraph>该实例是屏幕可见通知器。</paragraph>
            <target refid="class-renderingserver-constant-instance-fog-volume"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-fog-volume" names="class_renderingserver_constant_instance_fog_volume"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_FOG_VOLUME</strong> = <literal>12</literal></paragraph>
            <paragraph>该实例是雾体积。</paragraph>
            <target refid="class-renderingserver-constant-instance-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-max" names="class_renderingserver_constant_instance_max"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_MAX</strong> = <literal>13</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> 枚举的大小。</paragraph>
            <target refid="class-renderingserver-constant-instance-geometry-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-geometry-mask" names="class_renderingserver_constant_instance_geometry_mask"><reference internal="True" refid="enum-renderingserver-instancetype"><inline classes="std std-ref">InstanceType</inline></reference> <strong>INSTANCE_GEOMETRY_MASK</strong> = <literal>14</literal></paragraph>
            <paragraph>几何体实例（网格、多网格、即时和粒子）的标志的组合。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-instanceflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-instanceflags" names="enum_renderingserver_instanceflags">enum <strong>InstanceFlags</strong>: <reference internal="True" refid="enum-renderingserver-instanceflags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-instance-flag-use-baked-light"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-flag-use-baked-light" names="class_renderingserver_constant_instance_flag_use_baked_light"><reference internal="True" refid="enum-renderingserver-instanceflags"><inline classes="std std-ref">InstanceFlags</inline></reference> <strong>INSTANCE_FLAG_USE_BAKED_LIGHT</strong> = <literal>0</literal></paragraph>
            <paragraph>允许在烘焙照明中使用实例。</paragraph>
            <target refid="class-renderingserver-constant-instance-flag-use-dynamic-gi"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-flag-use-dynamic-gi" names="class_renderingserver_constant_instance_flag_use_dynamic_gi"><reference internal="True" refid="enum-renderingserver-instanceflags"><inline classes="std std-ref">InstanceFlags</inline></reference> <strong>INSTANCE_FLAG_USE_DYNAMIC_GI</strong> = <literal>1</literal></paragraph>
            <paragraph>允许在动态全局光照中使用该实例。</paragraph>
            <target refid="class-renderingserver-constant-instance-flag-draw-next-frame-if-visible"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-flag-draw-next-frame-if-visible" names="class_renderingserver_constant_instance_flag_draw_next_frame_if_visible"><reference internal="True" refid="enum-renderingserver-instanceflags"><inline classes="std std-ref">InstanceFlags</inline></reference> <strong>INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE</strong> = <literal>2</literal></paragraph>
            <paragraph>当设置时，手动请求在下一帧绘制几何图形。</paragraph>
            <target refid="class-renderingserver-constant-instance-flag-ignore-occlusion-culling"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-flag-ignore-occlusion-culling" names="class_renderingserver_constant_instance_flag_ignore_occlusion_culling"><reference internal="True" refid="enum-renderingserver-instanceflags"><inline classes="std std-ref">InstanceFlags</inline></reference> <strong>INSTANCE_FLAG_IGNORE_OCCLUSION_CULLING</strong> = <literal>3</literal></paragraph>
            <paragraph>始终绘制，即便实例能够被遮挡剔除剔除。不影响视锥剔除。</paragraph>
            <target refid="class-renderingserver-constant-instance-flag-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-instance-flag-max" names="class_renderingserver_constant_instance_flag_max"><reference internal="True" refid="enum-renderingserver-instanceflags"><inline classes="std std-ref">InstanceFlags</inline></reference> <strong>INSTANCE_FLAG_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-instanceflags"><inline classes="std std-ref">InstanceFlags</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-shadowcastingsetting"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-shadowcastingsetting" names="enum_renderingserver_shadowcastingsetting">enum <strong>ShadowCastingSetting</strong>: <reference internal="True" refid="enum-renderingserver-shadowcastingsetting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-shadow-casting-setting-off"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shadow-casting-setting-off" names="class_renderingserver_constant_shadow_casting_setting_off"><reference internal="True" refid="enum-renderingserver-shadowcastingsetting"><inline classes="std std-ref">ShadowCastingSetting</inline></reference> <strong>SHADOW_CASTING_SETTING_OFF</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用这个实例的阴影。</paragraph>
            <target refid="class-renderingserver-constant-shadow-casting-setting-on"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shadow-casting-setting-on" names="class_renderingserver_constant_shadow_casting_setting_on"><reference internal="True" refid="enum-renderingserver-shadowcastingsetting"><inline classes="std std-ref">ShadowCastingSetting</inline></reference> <strong>SHADOW_CASTING_SETTING_ON</strong> = <literal>1</literal></paragraph>
            <paragraph>从此实例投下阴影。</paragraph>
            <target refid="class-renderingserver-constant-shadow-casting-setting-double-sided"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shadow-casting-setting-double-sided" names="class_renderingserver_constant_shadow_casting_setting_double_sided"><reference internal="True" refid="enum-renderingserver-shadowcastingsetting"><inline classes="std std-ref">ShadowCastingSetting</inline></reference> <strong>SHADOW_CASTING_SETTING_DOUBLE_SIDED</strong> = <literal>2</literal></paragraph>
            <paragraph>在渲染对象的阴影时禁用背面剔除。这会稍微慢一些，但可能会产生更正确的阴影。</paragraph>
            <target refid="class-renderingserver-constant-shadow-casting-setting-shadows-only"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-shadow-casting-setting-shadows-only" names="class_renderingserver_constant_shadow_casting_setting_shadows_only"><reference internal="True" refid="enum-renderingserver-shadowcastingsetting"><inline classes="std std-ref">ShadowCastingSetting</inline></reference> <strong>SHADOW_CASTING_SETTING_SHADOWS_ONLY</strong> = <literal>3</literal></paragraph>
            <paragraph>仅渲染对象的阴影。对象本身不会被绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-visibilityrangefademode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-visibilityrangefademode" names="enum_renderingserver_visibilityrangefademode">enum <strong>VisibilityRangeFadeMode</strong>: <reference internal="True" refid="enum-renderingserver-visibilityrangefademode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-visibility-range-fade-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-visibility-range-fade-disabled" names="class_renderingserver_constant_visibility_range_fade_disabled"><reference internal="True" refid="enum-renderingserver-visibilityrangefademode"><inline classes="std std-ref">VisibilityRangeFadeMode</inline></reference> <strong>VISIBILITY_RANGE_FADE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用给定实例的可见性范围淡出。</paragraph>
            <target refid="class-renderingserver-constant-visibility-range-fade-self"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-visibility-range-fade-self" names="class_renderingserver_constant_visibility_range_fade_self"><reference internal="True" refid="enum-renderingserver-visibilityrangefademode"><inline classes="std std-ref">VisibilityRangeFadeMode</inline></reference> <strong>VISIBILITY_RANGE_FADE_SELF</strong> = <literal>1</literal></paragraph>
            <paragraph>当给定实例接近其可见范围限制时淡出该给定实例。</paragraph>
            <target refid="class-renderingserver-constant-visibility-range-fade-dependencies"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-visibility-range-fade-dependencies" names="class_renderingserver_constant_visibility_range_fade_dependencies"><reference internal="True" refid="enum-renderingserver-visibilityrangefademode"><inline classes="std std-ref">VisibilityRangeFadeMode</inline></reference> <strong>VISIBILITY_RANGE_FADE_DEPENDENCIES</strong> = <literal>2</literal></paragraph>
            <paragraph>当达到其可见性范围限制时淡入给定实例的依赖项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-bakechannels"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-bakechannels" names="enum_renderingserver_bakechannels">enum <strong>BakeChannels</strong>: <reference internal="True" refid="enum-renderingserver-bakechannels"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-bake-channel-albedo-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-bake-channel-albedo-alpha" names="class_renderingserver_constant_bake_channel_albedo_alpha"><reference internal="True" refid="enum-renderingserver-bakechannels"><inline classes="std std-ref">BakeChannels</inline></reference> <strong>BAKE_CHANNEL_ALBEDO_ALPHA</strong> = <literal>0</literal></paragraph>
            <paragraph><reference internal="True" refid="class-renderingserver-method-bake-render-uv2"><inline classes="std std-ref">bake_render_uv2</inline></reference> 返回的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 数组中 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 的索引。图像使用 <reference internal="True" refuri="class_image#class-image-constant-format-rgba8"><inline classes="std std-ref">Image.FORMAT_RGBA8</inline></reference> 格式，并在 <literal>.rgb</literal> 通道中包含反照率颜色，在 <literal>.a</literal> 通道中包含 Alpha。</paragraph>
            <target refid="class-renderingserver-constant-bake-channel-normal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-bake-channel-normal" names="class_renderingserver_constant_bake_channel_normal"><reference internal="True" refid="enum-renderingserver-bakechannels"><inline classes="std std-ref">BakeChannels</inline></reference> <strong>BAKE_CHANNEL_NORMAL</strong> = <literal>1</literal></paragraph>
            <paragraph><reference internal="True" refid="class-renderingserver-method-bake-render-uv2"><inline classes="std std-ref">bake_render_uv2</inline></reference> 返回的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 数组中 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 的索引。图像使用 <reference internal="True" refuri="class_image#class-image-constant-format-rgba8"><inline classes="std std-ref">Image.FORMAT_RGBA8</inline></reference> 格式，并在 <literal>.rgb</literal> 通道中包含该对象的每像素法线，在 <literal>.a</literal> 通道中不包含任何内容。每像素法线被编码为 <literal>normal * 0.5 + 0.5</literal>。</paragraph>
            <target refid="class-renderingserver-constant-bake-channel-orm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-bake-channel-orm" names="class_renderingserver_constant_bake_channel_orm"><reference internal="True" refid="enum-renderingserver-bakechannels"><inline classes="std std-ref">BakeChannels</inline></reference> <strong>BAKE_CHANNEL_ORM</strong> = <literal>2</literal></paragraph>
            <paragraph><reference internal="True" refid="class-renderingserver-method-bake-render-uv2"><inline classes="std std-ref">bake_render_uv2</inline></reference> 返回的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 数组中 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 的索引。图像使用 <reference internal="True" refuri="class_image#class-image-constant-format-rgba8"><inline classes="std std-ref">Image.FORMAT_RGBA8</inline></reference> 格式，并在 <literal>.r</literal> 通道中包含环境光遮挡（仅来自材质和贴花），在 <literal>.g</literal> 通道中包含粗糙度，在 <literal>.b</literal> 通道中包含金属度，并且中 <literal>.a</literal> 通道中包含次表面散射量。</paragraph>
            <target refid="class-renderingserver-constant-bake-channel-emission"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-bake-channel-emission" names="class_renderingserver_constant_bake_channel_emission"><reference internal="True" refid="enum-renderingserver-bakechannels"><inline classes="std std-ref">BakeChannels</inline></reference> <strong>BAKE_CHANNEL_EMISSION</strong> = <literal>3</literal></paragraph>
            <paragraph><reference internal="True" refid="class-renderingserver-method-bake-render-uv2"><inline classes="std std-ref">bake_render_uv2</inline></reference> 返回的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 数组中 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 的索引。图像使用 <reference internal="True" refuri="class_image#class-image-constant-format-rgbah"><inline classes="std std-ref">Image.FORMAT_RGBAH</inline></reference> 格式，并在 <literal>.rgb</literal> 通道中包含自发光颜色，在 <literal>.a</literal> 通道中不包含任何内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-canvastexturechannel"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-canvastexturechannel" names="enum_renderingserver_canvastexturechannel">enum <strong>CanvasTextureChannel</strong>: <reference internal="True" refid="enum-renderingserver-canvastexturechannel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-canvas-texture-channel-diffuse"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-texture-channel-diffuse" names="class_renderingserver_constant_canvas_texture_channel_diffuse"><reference internal="True" refid="enum-renderingserver-canvastexturechannel"><inline classes="std std-ref">CanvasTextureChannel</inline></reference> <strong>CANVAS_TEXTURE_CHANNEL_DIFFUSE</strong> = <literal>0</literal></paragraph>
            <paragraph>漫反射画布纹理（<reference internal="True" refuri="class_canvastexture#class-canvastexture-property-diffuse-texture"><inline classes="std std-ref">CanvasTexture.diffuse_texture</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-canvas-texture-channel-normal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-texture-channel-normal" names="class_renderingserver_constant_canvas_texture_channel_normal"><reference internal="True" refid="enum-renderingserver-canvastexturechannel"><inline classes="std std-ref">CanvasTextureChannel</inline></reference> <strong>CANVAS_TEXTURE_CHANNEL_NORMAL</strong> = <literal>1</literal></paragraph>
            <paragraph>法线贴图画布纹理（<reference internal="True" refuri="class_canvastexture#class-canvastexture-property-normal-texture"><inline classes="std std-ref">CanvasTexture.normal_texture</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-canvas-texture-channel-specular"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-texture-channel-specular" names="class_renderingserver_constant_canvas_texture_channel_specular"><reference internal="True" refid="enum-renderingserver-canvastexturechannel"><inline classes="std std-ref">CanvasTextureChannel</inline></reference> <strong>CANVAS_TEXTURE_CHANNEL_SPECULAR</strong> = <literal>2</literal></paragraph>
            <paragraph>高光贴图画布纹理（<reference internal="True" refuri="class_canvastexture#class-canvastexture-property-specular-texture"><inline classes="std std-ref">CanvasTexture.specular_texture</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-ninepatchaxismode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-ninepatchaxismode" names="enum_renderingserver_ninepatchaxismode">enum <strong>NinePatchAxisMode</strong>: <reference internal="True" refid="enum-renderingserver-ninepatchaxismode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-nine-patch-stretch"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-nine-patch-stretch" names="class_renderingserver_constant_nine_patch_stretch"><reference internal="True" refid="enum-renderingserver-ninepatchaxismode"><inline classes="std std-ref">NinePatchAxisMode</inline></reference> <strong>NINE_PATCH_STRETCH</strong> = <literal>0</literal></paragraph>
            <paragraph>九宫格在需要的地方被拉伸。</paragraph>
            <target refid="class-renderingserver-constant-nine-patch-tile"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-nine-patch-tile" names="class_renderingserver_constant_nine_patch_tile"><reference internal="True" refid="enum-renderingserver-ninepatchaxismode"><inline classes="std std-ref">NinePatchAxisMode</inline></reference> <strong>NINE_PATCH_TILE</strong> = <literal>1</literal></paragraph>
            <paragraph>九宫格在需要的地方填充图块。</paragraph>
            <target refid="class-renderingserver-constant-nine-patch-tile-fit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-nine-patch-tile-fit" names="class_renderingserver_constant_nine_patch_tile_fit"><reference internal="True" refid="enum-renderingserver-ninepatchaxismode"><inline classes="std std-ref">NinePatchAxisMode</inline></reference> <strong>NINE_PATCH_TILE_FIT</strong> = <literal>2</literal></paragraph>
            <paragraph>九宫格在需要的地方填充图块，并在需要时将它们拉伸一点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-canvasitemtexturefilter"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-canvasitemtexturefilter" names="enum_renderingserver_canvasitemtexturefilter">enum <strong>CanvasItemTextureFilter</strong>: <reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-filter-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-filter-default" names="class_renderingserver_constant_canvas_item_texture_filter_default"><reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference> <strong>CANVAS_ITEM_TEXTURE_FILTER_DEFAULT</strong> = <literal>0</literal></paragraph>
            <paragraph>为 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 使用默认过滤模式。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-filter-nearest"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-filter-nearest" names="class_renderingserver_constant_canvas_item_texture_filter_nearest"><reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference> <strong>CANVAS_ITEM_TEXTURE_FILTER_NEAREST</strong> = <literal>1</literal></paragraph>
            <paragraph>纹理过滤仅从最近的像素读取。这使得纹理从近距离看是像素化的，从远处看是颗粒状的（由于多级渐远纹理没有被采样）。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-filter-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-filter-linear" names="class_renderingserver_constant_canvas_item_texture_filter_linear"><reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference> <strong>CANVAS_ITEM_TEXTURE_FILTER_LINEAR</strong> = <literal>2</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素之间进行混合。这使得纹理从近处看起来很平滑，从远处看起来却有颗粒感（由于多级渐远纹理没有被采样）。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-filter-nearest-with-mipmaps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-filter-nearest-with-mipmaps" names="class_renderingserver_constant_canvas_item_texture_filter_nearest_with_mipmaps"><reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference> <strong>CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS</strong> = <literal>3</literal></paragraph>
            <paragraph>纹理过滤从最近的像素读取并在最近的 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来像素化，从远处看起来平滑。</paragraph>
            <paragraph>将此用于可能以低缩放查看的非像素艺术纹理（例如，由于 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 缩放或精灵缩放），因为多级渐远纹理对于平滑小于屏幕像素的像素很重要。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-filter-linear-with-mipmaps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-filter-linear-with-mipmaps" names="class_renderingserver_constant_canvas_item_texture_filter_linear_with_mipmaps"><reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference> <strong>CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS</strong> = <literal>4</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素和最近的 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来平滑，从远处看起来也平滑。</paragraph>
            <paragraph>将此用于可能以低缩放查看的非像素艺术纹理（例如，由于 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 缩放或精灵缩放），因为多级渐远纹理对于平滑小于屏幕像素的像素很重要。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-filter-nearest-with-mipmaps-anisotropic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-filter-nearest-with-mipmaps-anisotropic" names="class_renderingserver_constant_canvas_item_texture_filter_nearest_with_mipmaps_anisotropic"><reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference> <strong>CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC</strong> = <literal>5</literal></paragraph>
            <paragraph>纹理过滤从最近的像素读取并根据表面和相机视图之间的角度在 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来像素化，从远处看起来平滑。各向异性过滤提高了几乎与相机位于一条线的表面上的纹理质量，但速度稍慢。各向异性过滤级别可以通过调整 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-anisotropic-filtering-level"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</inline></reference> 来改变。</paragraph>
            <paragraph><strong>注意：</strong>该纹理过滤在 2D 项目中很少有用。<reference internal="True" refid="class-renderingserver-constant-canvas-item-texture-filter-nearest-with-mipmaps"><inline classes="std std-ref">CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS</inline></reference> 在这种情况下通常更合适。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-filter-linear-with-mipmaps-anisotropic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-filter-linear-with-mipmaps-anisotropic" names="class_renderingserver_constant_canvas_item_texture_filter_linear_with_mipmaps_anisotropic"><reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference> <strong>CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC</strong> = <literal>6</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素之间进行混合，并基于表面与相机视图之间的角度在 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来平滑，从远处看起来也平滑。各向异性过滤提高了几乎与相机位于一条线的表面上的纹理质量，但速度稍慢。各向异性过滤级别可以通过调整 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-anisotropic-filtering-level"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</inline></reference> 来改变。</paragraph>
            <paragraph><strong>注意：</strong>该纹理过滤在 2D 项目中很少有用。<reference internal="True" refid="class-renderingserver-constant-canvas-item-texture-filter-linear-with-mipmaps"><inline classes="std std-ref">CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS</inline></reference> 在这种情况下通常更合适。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-filter-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-filter-max" names="class_renderingserver_constant_canvas_item_texture_filter_max"><reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference> <strong>CANVAS_ITEM_TEXTURE_FILTER_MAX</strong> = <literal>7</literal></paragraph>
            <paragraph><reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference> 枚举的最大值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-canvasitemtexturerepeat"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-canvasitemtexturerepeat" names="enum_renderingserver_canvasitemtexturerepeat">enum <strong>CanvasItemTextureRepeat</strong>: <reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-repeat-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-repeat-default" names="class_renderingserver_constant_canvas_item_texture_repeat_default"><reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference> <strong>CANVAS_ITEM_TEXTURE_REPEAT_DEFAULT</strong> = <literal>0</literal></paragraph>
            <paragraph>为 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 使用默认重复模式。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-repeat-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-repeat-disabled" names="class_renderingserver_constant_canvas_item_texture_repeat_disabled"><reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference> <strong>CANVAS_ITEM_TEXTURE_REPEAT_DISABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>禁用纹理重复。相反，当读取 0-1 范围之外的 UV 时，该值将被钳制在纹理的边缘，从而导致纹理的边界看起来被拉长。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-repeat-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-repeat-enabled" names="class_renderingserver_constant_canvas_item_texture_repeat_enabled"><reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference> <strong>CANVAS_ITEM_TEXTURE_REPEAT_ENABLED</strong> = <literal>2</literal></paragraph>
            <paragraph>当 UV 坐标超出 0-1 范围时，使纹理能够重复。如果使用其中一种线性过滤模式，则当采样器过滤纹理边缘时，这可能会导致纹理边缘出现伪影。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-repeat-mirror"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-repeat-mirror" names="class_renderingserver_constant_canvas_item_texture_repeat_mirror"><reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference> <strong>CANVAS_ITEM_TEXTURE_REPEAT_MIRROR</strong> = <literal>3</literal></paragraph>
            <paragraph>重复时翻转该纹理，使边缘对齐而不是突然改变。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-texture-repeat-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-item-texture-repeat-max" names="class_renderingserver_constant_canvas_item_texture_repeat_max"><reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference> <strong>CANVAS_ITEM_TEXTURE_REPEAT_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph><reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference> 枚举的最大值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-canvasgroupmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-canvasgroupmode" names="enum_renderingserver_canvasgroupmode">enum <strong>CanvasGroupMode</strong>: <reference internal="True" refid="enum-renderingserver-canvasgroupmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-canvas-group-mode-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-group-mode-disabled" names="class_renderingserver_constant_canvas_group_mode_disabled"><reference internal="True" refid="enum-renderingserver-canvasgroupmode"><inline classes="std std-ref">CanvasGroupMode</inline></reference> <strong>CANVAS_GROUP_MODE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>子级绘制在父级之上，不会被裁剪。</paragraph>
            <target refid="class-renderingserver-constant-canvas-group-mode-clip-only"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-group-mode-clip-only" names="class_renderingserver_constant_canvas_group_mode_clip_only"><reference internal="True" refid="enum-renderingserver-canvasgroupmode"><inline classes="std std-ref">CanvasGroupMode</inline></reference> <strong>CANVAS_GROUP_MODE_CLIP_ONLY</strong> = <literal>1</literal></paragraph>
            <paragraph>父级仅用于裁剪目的。子级被裁剪到父级的可见区域，不绘制父级。</paragraph>
            <target refid="class-renderingserver-constant-canvas-group-mode-clip-and-draw"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-group-mode-clip-and-draw" names="class_renderingserver_constant_canvas_group_mode_clip_and_draw"><reference internal="True" refid="enum-renderingserver-canvasgroupmode"><inline classes="std std-ref">CanvasGroupMode</inline></reference> <strong>CANVAS_GROUP_MODE_CLIP_AND_DRAW</strong> = <literal>2</literal></paragraph>
            <paragraph>父级用于裁剪子级，但在将子级剪裁到其可见区域之前，父级也像往常一样绘制在子级下方。</paragraph>
            <target refid="class-renderingserver-constant-canvas-group-mode-transparent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-group-mode-transparent" names="class_renderingserver_constant_canvas_group_mode_transparent"><reference internal="True" refid="enum-renderingserver-canvasgroupmode"><inline classes="std std-ref">CanvasGroupMode</inline></reference> <strong>CANVAS_GROUP_MODE_TRANSPARENT</strong> = <literal>3</literal></paragraph>
            <container classes="contribute">
                <paragraph>该枚举目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-canvaslightmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-canvaslightmode" names="enum_renderingserver_canvaslightmode">enum <strong>CanvasLightMode</strong>: <reference internal="True" refid="enum-renderingserver-canvaslightmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-canvas-light-mode-point"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-light-mode-point" names="class_renderingserver_constant_canvas_light_mode_point"><reference internal="True" refid="enum-renderingserver-canvaslightmode"><inline classes="std std-ref">CanvasLightMode</inline></reference> <strong>CANVAS_LIGHT_MODE_POINT</strong> = <literal>0</literal></paragraph>
            <paragraph>2D 点光（见 <reference internal="True" refuri="class_pointlight2d#class-pointlight2d"><inline classes="std std-ref">PointLight2D</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-canvas-light-mode-directional"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-light-mode-directional" names="class_renderingserver_constant_canvas_light_mode_directional"><reference internal="True" refid="enum-renderingserver-canvaslightmode"><inline classes="std std-ref">CanvasLightMode</inline></reference> <strong>CANVAS_LIGHT_MODE_DIRECTIONAL</strong> = <literal>1</literal></paragraph>
            <paragraph>2D 方向（日月）光（见 <reference internal="True" refuri="class_directionallight2d#class-directionallight2d"><inline classes="std std-ref">DirectionalLight2D</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-canvaslightblendmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-canvaslightblendmode" names="enum_renderingserver_canvaslightblendmode">enum <strong>CanvasLightBlendMode</strong>: <reference internal="True" refid="enum-renderingserver-canvaslightblendmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-canvas-light-blend-mode-add"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-light-blend-mode-add" names="class_renderingserver_constant_canvas_light_blend_mode_add"><reference internal="True" refid="enum-renderingserver-canvaslightblendmode"><inline classes="std std-ref">CanvasLightBlendMode</inline></reference> <strong>CANVAS_LIGHT_BLEND_MODE_ADD</strong> = <literal>0</literal></paragraph>
            <paragraph>向画布添加浅色。</paragraph>
            <target refid="class-renderingserver-constant-canvas-light-blend-mode-sub"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-light-blend-mode-sub" names="class_renderingserver_constant_canvas_light_blend_mode_sub"><reference internal="True" refid="enum-renderingserver-canvaslightblendmode"><inline classes="std std-ref">CanvasLightBlendMode</inline></reference> <strong>CANVAS_LIGHT_BLEND_MODE_SUB</strong> = <literal>1</literal></paragraph>
            <paragraph>从画布中减去浅色。</paragraph>
            <target refid="class-renderingserver-constant-canvas-light-blend-mode-mix"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-light-blend-mode-mix" names="class_renderingserver_constant_canvas_light_blend_mode_mix"><reference internal="True" refid="enum-renderingserver-canvaslightblendmode"><inline classes="std std-ref">CanvasLightBlendMode</inline></reference> <strong>CANVAS_LIGHT_BLEND_MODE_MIX</strong> = <literal>2</literal></paragraph>
            <paragraph>灯光根据透明度增加颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-canvaslightshadowfilter"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-canvaslightshadowfilter" names="enum_renderingserver_canvaslightshadowfilter">enum <strong>CanvasLightShadowFilter</strong>: <reference internal="True" refid="enum-renderingserver-canvaslightshadowfilter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-canvas-light-filter-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-light-filter-none" names="class_renderingserver_constant_canvas_light_filter_none"><reference internal="True" refid="enum-renderingserver-canvaslightshadowfilter"><inline classes="std std-ref">CanvasLightShadowFilter</inline></reference> <strong>CANVAS_LIGHT_FILTER_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>不要对画布上的光影应用滤镜。</paragraph>
            <target refid="class-renderingserver-constant-canvas-light-filter-pcf5"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-light-filter-pcf5" names="class_renderingserver_constant_canvas_light_filter_pcf5"><reference internal="True" refid="enum-renderingserver-canvaslightshadowfilter"><inline classes="std std-ref">CanvasLightShadowFilter</inline></reference> <strong>CANVAS_LIGHT_FILTER_PCF5</strong> = <literal>1</literal></paragraph>
            <paragraph>使用 PCF5 过滤法来过滤画布的光影。</paragraph>
            <target refid="class-renderingserver-constant-canvas-light-filter-pcf13"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-light-filter-pcf13" names="class_renderingserver_constant_canvas_light_filter_pcf13"><reference internal="True" refid="enum-renderingserver-canvaslightshadowfilter"><inline classes="std std-ref">CanvasLightShadowFilter</inline></reference> <strong>CANVAS_LIGHT_FILTER_PCF13</strong> = <literal>2</literal></paragraph>
            <paragraph>使用 PCF13 过滤法来过滤画布的光影。</paragraph>
            <target refid="class-renderingserver-constant-canvas-light-filter-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-light-filter-max" names="class_renderingserver_constant_canvas_light_filter_max"><reference internal="True" refid="enum-renderingserver-canvaslightshadowfilter"><inline classes="std std-ref">CanvasLightShadowFilter</inline></reference> <strong>CANVAS_LIGHT_FILTER_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph><reference internal="True" refid="enum-renderingserver-canvaslightshadowfilter"><inline classes="std std-ref">CanvasLightShadowFilter</inline></reference> 枚举的最大值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-canvasoccluderpolygoncullmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-canvasoccluderpolygoncullmode" names="enum_renderingserver_canvasoccluderpolygoncullmode">enum <strong>CanvasOccluderPolygonCullMode</strong>: <reference internal="True" refid="enum-renderingserver-canvasoccluderpolygoncullmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-canvas-occluder-polygon-cull-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-occluder-polygon-cull-disabled" names="class_renderingserver_constant_canvas_occluder_polygon_cull_disabled"><reference internal="True" refid="enum-renderingserver-canvasoccluderpolygoncullmode"><inline classes="std std-ref">CanvasOccluderPolygonCullMode</inline></reference> <strong>CANVAS_OCCLUDER_POLYGON_CULL_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用画布遮挡物的剔除。</paragraph>
            <target refid="class-renderingserver-constant-canvas-occluder-polygon-cull-clockwise"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-occluder-polygon-cull-clockwise" names="class_renderingserver_constant_canvas_occluder_polygon_cull_clockwise"><reference internal="True" refid="enum-renderingserver-canvasoccluderpolygoncullmode"><inline classes="std std-ref">CanvasOccluderPolygonCullMode</inline></reference> <strong>CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE</strong> = <literal>1</literal></paragraph>
            <paragraph>画布遮挡器的剔除是顺时针的。</paragraph>
            <target refid="class-renderingserver-constant-canvas-occluder-polygon-cull-counter-clockwise"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-canvas-occluder-polygon-cull-counter-clockwise" names="class_renderingserver_constant_canvas_occluder_polygon_cull_counter_clockwise"><reference internal="True" refid="enum-renderingserver-canvasoccluderpolygoncullmode"><inline classes="std std-ref">CanvasOccluderPolygonCullMode</inline></reference> <strong>CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE</strong> = <literal>2</literal></paragraph>
            <paragraph>画布遮挡物的剔除是逆时针的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-globalshaderparametertype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-globalshaderparametertype" names="enum_renderingserver_globalshaderparametertype">enum <strong>GlobalShaderParameterType</strong>: <reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-global-var-type-bool"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-bool" names="class_renderingserver_constant_global_var_type_bool"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_BOOL</strong> = <literal>0</literal></paragraph>
            <paragraph>布尔型全局着色器参数（<literal>global uniform bool ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-bvec2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-bvec2" names="class_renderingserver_constant_global_var_type_bvec2"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_BVEC2</strong> = <literal>1</literal></paragraph>
            <paragraph>二维布尔向量全局着色器参数（<literal>global uniform bvec2 ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-bvec3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-bvec3" names="class_renderingserver_constant_global_var_type_bvec3"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_BVEC3</strong> = <literal>2</literal></paragraph>
            <paragraph>三维布尔向量全局着色器参数（<literal>global uniform bvec3 ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-bvec4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-bvec4" names="class_renderingserver_constant_global_var_type_bvec4"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_BVEC4</strong> = <literal>3</literal></paragraph>
            <paragraph>四维布尔向量全局着色器参数（<literal>global uniform bvec4 ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-int"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-int" names="class_renderingserver_constant_global_var_type_int"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_INT</strong> = <literal>4</literal></paragraph>
            <paragraph>整数全局着色器参数（<literal>global uniform int ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-ivec2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-ivec2" names="class_renderingserver_constant_global_var_type_ivec2"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_IVEC2</strong> = <literal>5</literal></paragraph>
            <paragraph>二维整数向量全局着色器参数（<literal>global uniform ivec2 ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-ivec3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-ivec3" names="class_renderingserver_constant_global_var_type_ivec3"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_IVEC3</strong> = <literal>6</literal></paragraph>
            <paragraph>三维整数向量全局着色器参数（<literal>global uniform ivec3 ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-ivec4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-ivec4" names="class_renderingserver_constant_global_var_type_ivec4"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_IVEC4</strong> = <literal>7</literal></paragraph>
            <paragraph>四维整数向量全局着色器参数（<literal>global uniform ivec4 ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-rect2i"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-rect2i" names="class_renderingserver_constant_global_var_type_rect2i"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_RECT2I</strong> = <literal>8</literal></paragraph>
            <paragraph>二维整数矩形全局着色器参数（<literal>global uniform ivec4 ...</literal>）。等价于着色器代码中的 <reference internal="True" refid="class-renderingserver-constant-global-var-type-ivec4"><inline classes="std std-ref">GLOBAL_VAR_TYPE_IVEC4</inline></reference>，但在编辑器 UI 中以 <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> 的形式暴露。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-uint" names="class_renderingserver_constant_global_var_type_uint"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_UINT</strong> = <literal>9</literal></paragraph>
            <paragraph>无符号整数全局着色器参数（<literal>global uniform uint ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-uvec2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-uvec2" names="class_renderingserver_constant_global_var_type_uvec2"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_UVEC2</strong> = <literal>10</literal></paragraph>
            <paragraph>二维无符号整数向量全局着色器参数（<literal>global uniform uvec2 ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-uvec3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-uvec3" names="class_renderingserver_constant_global_var_type_uvec3"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_UVEC3</strong> = <literal>11</literal></paragraph>
            <paragraph>三维无符号整数向量全局着色器参数（<literal>global uniform uvec3 ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-uvec4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-uvec4" names="class_renderingserver_constant_global_var_type_uvec4"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_UVEC4</strong> = <literal>12</literal></paragraph>
            <paragraph>四维无符号整数向量全局着色器参数（<literal>global uniform uvec4 ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-float"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-float" names="class_renderingserver_constant_global_var_type_float"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_FLOAT</strong> = <literal>13</literal></paragraph>
            <paragraph>单精度浮点数全局着色器参数（<literal>global uniform float ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-vec2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-vec2" names="class_renderingserver_constant_global_var_type_vec2"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_VEC2</strong> = <literal>14</literal></paragraph>
            <paragraph>二维单精度浮点数向量全局着色器参数（<literal>global uniform vec2 ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-vec3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-vec3" names="class_renderingserver_constant_global_var_type_vec3"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_VEC3</strong> = <literal>15</literal></paragraph>
            <paragraph>三维单精度浮点数向量全局着色器参数（<literal>global uniform vec3 ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-vec4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-vec4" names="class_renderingserver_constant_global_var_type_vec4"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_VEC4</strong> = <literal>16</literal></paragraph>
            <paragraph>四维单精度浮点数向量全局着色器参数（<literal>global uniform vec4 ...</literal>）。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-color" names="class_renderingserver_constant_global_var_type_color"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_COLOR</strong> = <literal>17</literal></paragraph>
            <paragraph>颜色全局着色器参数（<literal>global uniform vec4 ...</literal>）。等价于着色器代码中的 <reference internal="True" refid="class-renderingserver-constant-global-var-type-vec4"><inline classes="std std-ref">GLOBAL_VAR_TYPE_VEC4</inline></reference>，但在编辑器 UI 中以 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 的形式暴露。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-rect2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-rect2" names="class_renderingserver_constant_global_var_type_rect2"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_RECT2</strong> = <literal>18</literal></paragraph>
            <paragraph>二维浮点数矩形全局着色器参数（<literal>global uniform vec4 ...</literal>）。等价于着色器代码中的 <reference internal="True" refid="class-renderingserver-constant-global-var-type-vec4"><inline classes="std std-ref">GLOBAL_VAR_TYPE_VEC4</inline></reference>，但在编辑器 UI 中以 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> 的形式暴露。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-mat2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-mat2" names="class_renderingserver_constant_global_var_type_mat2"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_MAT2</strong> = <literal>19</literal></paragraph>
            <paragraph>2×2 矩阵全局着色器参数（<literal>global uniform mat2 ...</literal>）。编辑器 UI 中以 <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> 的形式暴露。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-mat3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-mat3" names="class_renderingserver_constant_global_var_type_mat3"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_MAT3</strong> = <literal>20</literal></paragraph>
            <paragraph>3×3 矩阵全局着色器参数（<literal>global uniform mat3 ...</literal>）。编辑器 UI 中以 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> 的形式暴露。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-mat4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-mat4" names="class_renderingserver_constant_global_var_type_mat4"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_MAT4</strong> = <literal>21</literal></paragraph>
            <paragraph>4×4 矩阵全局着色器参数（<literal>global uniform mat4 ...</literal>）。编辑器 UI 中以 <reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference> 的形式暴露。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-transform-2d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-transform-2d" names="class_renderingserver_constant_global_var_type_transform_2d"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_TRANSFORM_2D</strong> = <literal>22</literal></paragraph>
            <paragraph>二维变换全局着色器参数（<literal>global uniform mat2x3 ...</literal>）。编辑器 UI 中以 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> 的形式暴露。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-transform"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-transform" names="class_renderingserver_constant_global_var_type_transform"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_TRANSFORM</strong> = <literal>23</literal></paragraph>
            <paragraph>三维变换全局着色器参数（<literal>global uniform mat3x4 ...</literal>）。编辑器 UI 中以 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> 的形式暴露。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-sampler2d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-sampler2d" names="class_renderingserver_constant_global_var_type_sampler2d"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_SAMPLER2D</strong> = <literal>24</literal></paragraph>
            <paragraph>2D 采样器全局着色器参数（<literal>global uniform sampler2D ...</literal>）。编辑器 UI 中以 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 的形式暴露。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-sampler2darray"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-sampler2darray" names="class_renderingserver_constant_global_var_type_sampler2darray"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_SAMPLER2DARRAY</strong> = <literal>25</literal></paragraph>
            <paragraph>2D 采样器数组全局着色器参数（<literal>global uniform sampler2DArray ...</literal>）。编辑器 UI 中以 <reference internal="True" refuri="class_texture2darray#class-texture2darray"><inline classes="std std-ref">Texture2DArray</inline></reference> 的形式暴露。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-sampler3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-sampler3d" names="class_renderingserver_constant_global_var_type_sampler3d"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_SAMPLER3D</strong> = <literal>26</literal></paragraph>
            <paragraph>3D 采样器全局着色器参数（<literal>global uniform sampler3D ...</literal>）。编辑器 UI 中以 <reference internal="True" refuri="class_texture3d#class-texture3d"><inline classes="std std-ref">Texture3D</inline></reference> 的形式暴露。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-samplercube"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-samplercube" names="class_renderingserver_constant_global_var_type_samplercube"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_SAMPLERCUBE</strong> = <literal>27</literal></paragraph>
            <paragraph>立方体贴图全局着色器参数（<literal>global uniform samplerCube ...</literal>）。编辑器 UI 中以 <reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 的形式暴露。</paragraph>
            <target refid="class-renderingserver-constant-global-var-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-global-var-type-max" names="class_renderingserver_constant_global_var_type_max"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>GLOBAL_VAR_TYPE_MAX</strong> = <literal>28</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-renderinginfo"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-renderinginfo" names="enum_renderingserver_renderinginfo">enum <strong>RenderingInfo</strong>: <reference internal="True" refid="enum-renderingserver-renderinginfo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-rendering-info-total-objects-in-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-rendering-info-total-objects-in-frame" names="class_renderingserver_constant_rendering_info_total_objects_in_frame"><reference internal="True" refid="enum-renderingserver-renderinginfo"><inline classes="std std-ref">RenderingInfo</inline></reference> <strong>RENDERING_INFO_TOTAL_OBJECTS_IN_FRAME</strong> = <literal>0</literal></paragraph>
            <paragraph>在当前 3D 场景中渲染的对象数。会根据相机的位置和旋转的不同而不同。</paragraph>
            <target refid="class-renderingserver-constant-rendering-info-total-primitives-in-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-rendering-info-total-primitives-in-frame" names="class_renderingserver_constant_rendering_info_total_primitives_in_frame"><reference internal="True" refid="enum-renderingserver-renderinginfo"><inline classes="std std-ref">RenderingInfo</inline></reference> <strong>RENDERING_INFO_TOTAL_PRIMITIVES_IN_FRAME</strong> = <literal>1</literal></paragraph>
            <paragraph>在当前 3D 场景中渲染的点、线、三角的数量。会根据相机的位置和旋转的不同而不同。</paragraph>
            <target refid="class-renderingserver-constant-rendering-info-total-draw-calls-in-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-rendering-info-total-draw-calls-in-frame" names="class_renderingserver_constant_rendering_info_total_draw_calls_in_frame"><reference internal="True" refid="enum-renderingserver-renderinginfo"><inline classes="std std-ref">RenderingInfo</inline></reference> <strong>RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME</strong> = <literal>2</literal></paragraph>
            <paragraph>在当前 3D 场景中渲染执行的绘制调用的数量。会根据相机的位置和旋转的不同而不同。</paragraph>
            <target refid="class-renderingserver-constant-rendering-info-texture-mem-used"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-rendering-info-texture-mem-used" names="class_renderingserver_constant_rendering_info_texture_mem_used"><reference internal="True" refid="enum-renderingserver-renderinginfo"><inline classes="std std-ref">RenderingInfo</inline></reference> <strong>RENDERING_INFO_TEXTURE_MEM_USED</strong> = <literal>3</literal></paragraph>
            <paragraph>纹理内存的使用量（单位为字节）。</paragraph>
            <target refid="class-renderingserver-constant-rendering-info-buffer-mem-used"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-rendering-info-buffer-mem-used" names="class_renderingserver_constant_rendering_info_buffer_mem_used"><reference internal="True" refid="enum-renderingserver-renderinginfo"><inline classes="std std-ref">RenderingInfo</inline></reference> <strong>RENDERING_INFO_BUFFER_MEM_USED</strong> = <literal>4</literal></paragraph>
            <paragraph>缓冲内存的使用量（单位为字节）。包括顶点数据、uniform 缓冲以及内部使用的各种不同缓冲类型。</paragraph>
            <target refid="class-renderingserver-constant-rendering-info-video-mem-used"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-rendering-info-video-mem-used" names="class_renderingserver_constant_rendering_info_video_mem_used"><reference internal="True" refid="enum-renderingserver-renderinginfo"><inline classes="std std-ref">RenderingInfo</inline></reference> <strong>RENDERING_INFO_VIDEO_MEM_USED</strong> = <literal>5</literal></paragraph>
            <paragraph>显存的使用量（单位为字节）。使用 Forward+ 或移动渲染后端时，始终比 <reference internal="True" refid="class-renderingserver-constant-rendering-info-texture-mem-used"><inline classes="std std-ref">RENDERING_INFO_TEXTURE_MEM_USED</inline></reference> 与 <reference internal="True" refid="class-renderingserver-constant-rendering-info-buffer-mem-used"><inline classes="std std-ref">RENDERING_INFO_BUFFER_MEM_USED</inline></reference> 的总和要大，因为这两项之外还有一些杂项数据。使用 GL Compatibility 后端时，等于 <reference internal="True" refid="class-renderingserver-constant-rendering-info-texture-mem-used"><inline classes="std std-ref">RENDERING_INFO_TEXTURE_MEM_USED</inline></reference> 与 <reference internal="True" refid="class-renderingserver-constant-rendering-info-buffer-mem-used"><inline classes="std std-ref">RENDERING_INFO_BUFFER_MEM_USED</inline></reference> 之和。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingserver-features"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingserver-features" names="enum_renderingserver_features">enum <strong>Features</strong>: <reference internal="True" refid="enum-renderingserver-features"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-renderingserver-constant-feature-shaders"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-feature-shaders" names="class_renderingserver_constant_feature_shaders"><reference internal="True" refid="enum-renderingserver-features"><inline classes="std std-ref">Features</inline></reference> <strong>FEATURE_SHADERS</strong> = <literal>0</literal></paragraph>
            <paragraph><strong>已弃用：</strong> This constant has not been used since Godot 3.0.</paragraph>
            <target refid="class-renderingserver-constant-feature-multithreaded"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingserver-constant-feature-multithreaded" names="class_renderingserver_constant_feature_multithreaded"><reference internal="True" refid="enum-renderingserver-features"><inline classes="std std-ref">Features</inline></reference> <strong>FEATURE_MULTITHREADED</strong> = <literal>1</literal></paragraph>
            <paragraph><strong>已弃用：</strong> This constant has not been used since Godot 3.0.</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="常量">
            <title>常量</title>
            <target refid="class-renderingserver-constant-no-index-array"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-no-index-array" names="class_renderingserver_constant_no_index_array"><strong>NO_INDEX_ARRAY</strong> = <literal>-1</literal> <reference internal="True" refid="class-renderingserver-constant-no-index-array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>标记一个错误，表明索引数组为空。</paragraph>
            <target refid="class-renderingserver-constant-array-weights-size"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-array-weights-size" names="class_renderingserver_constant_array_weights_size"><strong>ARRAY_WEIGHTS_SIZE</strong> = <literal>4</literal> <reference internal="True" refid="class-renderingserver-constant-array-weights-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>每个顶点的权重/骨骼数。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-z-min"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-canvas-item-z-min" names="class_renderingserver_constant_canvas_item_z_min"><strong>CANVAS_ITEM_Z_MIN</strong> = <literal>-4096</literal> <reference internal="True" refid="class-renderingserver-constant-canvas-item-z-min"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>画布项目的最小 Z 层。</paragraph>
            <target refid="class-renderingserver-constant-canvas-item-z-max"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-canvas-item-z-max" names="class_renderingserver_constant_canvas_item_z_max"><strong>CANVAS_ITEM_Z_MAX</strong> = <literal>4096</literal> <reference internal="True" refid="class-renderingserver-constant-canvas-item-z-max"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>帆布项目的最大 Z 层。</paragraph>
            <target refid="class-renderingserver-constant-max-glow-levels"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-max-glow-levels" names="class_renderingserver_constant_max_glow_levels"><strong>MAX_GLOW_LEVELS</strong> = <literal>7</literal> <reference internal="True" refid="class-renderingserver-constant-max-glow-levels"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>辉光后期处理效果使用的最大辉光级别数。</paragraph>
            <target refid="class-renderingserver-constant-max-cursors"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-max-cursors" names="class_renderingserver_constant_max_cursors"><strong>MAX_CURSORS</strong> = <literal>8</literal> <reference internal="True" refid="class-renderingserver-constant-max-cursors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> This constant is not used by the engine.</paragraph>
            <target refid="class-renderingserver-constant-max-2d-directional-lights"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-max-2d-directional-lights" names="class_renderingserver_constant_max_2d_directional_lights"><strong>MAX_2D_DIRECTIONAL_LIGHTS</strong> = <literal>8</literal> <reference internal="True" refid="class-renderingserver-constant-max-2d-directional-lights"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>2D 中同一时间能够渲染的最大方向光的数量。</paragraph>
            <target refid="class-renderingserver-constant-max-mesh-surfaces"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-max-mesh-surfaces" names="class_renderingserver_constant_max_mesh_surfaces"><strong>MAX_MESH_SURFACES</strong> = <literal>256</literal> <reference internal="True" refid="class-renderingserver-constant-max-mesh-surfaces"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>网格可拥有的最大表面数。</paragraph>
            <target refid="class-renderingserver-constant-material-render-priority-min"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-material-render-priority-min" names="class_renderingserver_constant_material_render_priority_min"><strong>MATERIAL_RENDER_PRIORITY_MIN</strong> = <literal>-128</literal> <reference internal="True" refid="class-renderingserver-constant-material-render-priority-min"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>所有材质的最小渲染优先级。</paragraph>
            <target refid="class-renderingserver-constant-material-render-priority-max"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-material-render-priority-max" names="class_renderingserver_constant_material_render_priority_max"><strong>MATERIAL_RENDER_PRIORITY_MAX</strong> = <literal>127</literal> <reference internal="True" refid="class-renderingserver-constant-material-render-priority-max"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>所有材质的最大渲染优先级。</paragraph>
            <target refid="class-renderingserver-constant-array-custom-count"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-array-custom-count" names="class_renderingserver_constant_array_custom_count"><strong>ARRAY_CUSTOM_COUNT</strong> = <literal>4</literal> <reference internal="True" refid="class-renderingserver-constant-array-custom-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>可用自定义数据数组的数量（<reference internal="True" refid="class-renderingserver-constant-array-custom0"><inline classes="std std-ref">ARRAY_CUSTOM0</inline></reference>、<reference internal="True" refid="class-renderingserver-constant-array-custom1"><inline classes="std std-ref">ARRAY_CUSTOM1</inline></reference>、<reference internal="True" refid="class-renderingserver-constant-array-custom2"><inline classes="std std-ref">ARRAY_CUSTOM2</inline></reference>、<reference internal="True" refid="class-renderingserver-constant-array-custom3"><inline classes="std std-ref">ARRAY_CUSTOM3</inline></reference>）。</paragraph>
            <target refid="class-renderingserver-constant-particles-emit-flag-position"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-particles-emit-flag-position" names="class_renderingserver_constant_particles_emit_flag_position"><strong>PARTICLES_EMIT_FLAG_POSITION</strong> = <literal>1</literal> <reference internal="True" refid="class-renderingserver-constant-particles-emit-flag-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该常量目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-emit-flag-rotation-scale"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-particles-emit-flag-rotation-scale" names="class_renderingserver_constant_particles_emit_flag_rotation_scale"><strong>PARTICLES_EMIT_FLAG_ROTATION_SCALE</strong> = <literal>2</literal> <reference internal="True" refid="class-renderingserver-constant-particles-emit-flag-rotation-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该常量目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-emit-flag-velocity"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-particles-emit-flag-velocity" names="class_renderingserver_constant_particles_emit_flag_velocity"><strong>PARTICLES_EMIT_FLAG_VELOCITY</strong> = <literal>4</literal> <reference internal="True" refid="class-renderingserver-constant-particles-emit-flag-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该常量目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-emit-flag-color"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-particles-emit-flag-color" names="class_renderingserver_constant_particles_emit_flag_color"><strong>PARTICLES_EMIT_FLAG_COLOR</strong> = <literal>8</literal> <reference internal="True" refid="class-renderingserver-constant-particles-emit-flag-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该常量目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <target refid="class-renderingserver-constant-particles-emit-flag-custom"></target>
            <paragraph classes="classref-constant" ids="class-renderingserver-constant-particles-emit-flag-custom" names="class_renderingserver_constant_particles_emit_flag_custom"><strong>PARTICLES_EMIT_FLAG_CUSTOM</strong> = <literal>16</literal> <reference internal="True" refid="class-renderingserver-constant-particles-emit-flag-custom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该常量目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-renderingserver-property-render-loop-enabled"></target>
            <paragraph classes="classref-property" ids="class-renderingserver-property-render-loop-enabled" names="class_renderingserver_property_render_loop_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>render_loop_enabled</strong> <reference internal="True" refid="class-renderingserver-property-render-loop-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_render_loop_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_render_loop_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>false</literal>，则完全禁用渲染，但引擎逻辑仍在处理中。即使禁用渲染，你也可以调用 <reference internal="True" refid="class-renderingserver-method-force-draw"><inline classes="std std-ref">force_draw</inline></reference> 来绘制帧。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="方法说明">
            <title>方法说明</title>
            <target refid="class-renderingserver-method-bake-render-uv2"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-bake-render-uv2" names="class_renderingserver_method_bake_render_uv2"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>] <strong>bake_render_uv2</strong>(base: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material_overrides: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>], image_size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-renderingserver-method-bake-render-uv2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用可选的 <literal>material_overrides</literal>，将 <literal>base</literal> 参数中传递的 Mesh 的材质数据，烘焙为一组大小为 <literal>image_size</literal> 的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>。返回包含 <reference internal="True" refid="enum-renderingserver-bakechannels"><inline classes="std std-ref">BakeChannels</inline></reference> 中指定的材质属性的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-call-on-render-thread"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-call-on-render-thread" names="class_renderingserver_method_call_on_render_thread"><abbreviation explanation="无返回值。">void</abbreviation> <strong>call_on_render_thread</strong>(callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-renderingserver-method-call-on-render-thread"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由于 RenderingServer 实际逻辑可能在单独的线程上运行，因此从主（或任何其他）线程访问其内部将导致错误。为了更轻松地运行可以安全访问渲染内部的代码（例如 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference> 和类似的 RD 类），请通过该函数推送一个可调用对象，以便它将在渲染线程上执行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-attributes-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-attributes-create" names="class_renderingserver_method_camera_attributes_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>camera_attributes_create</strong>() <reference internal="True" refid="class-renderingserver-method-camera-attributes-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建相机属性对象并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>camera_attributes_</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价资源为 <reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-attributes-set-auto-exposure"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-attributes-set-auto-exposure" names="class_renderingserver_method_camera_attributes_set_auto_exposure"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_attributes_set_auto_exposure</strong>(camera_attributes: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, min_sensitivity: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max_sensitivity: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, speed: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-attributes-set-auto-exposure"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置用于自动曝光效果的参数。这些参数与 <reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference> 和 <reference internal="True" refuri="class_cameraattributespractical#class-cameraattributespractical"><inline classes="std std-ref">CameraAttributesPractical</inline></reference> 中的对应参数具有相同的含义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-attributes-set-dof-blur"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-attributes-set-dof-blur" names="class_renderingserver_method_camera_attributes_set_dof_blur"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_attributes_set_dof_blur</strong>(camera_attributes: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, far_enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, far_distance: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, far_transition: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, near_enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, near_distance: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, near_transition: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-attributes-set-dof-blur"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置用于 DOF 模糊效果的参数。这些参数与 <reference internal="True" refuri="class_cameraattributespractical#class-cameraattributespractical"><inline classes="std std-ref">CameraAttributesPractical</inline></reference> 中的对应参数具有相同的含义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-attributes-set-dof-blur-bokeh-shape"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-attributes-set-dof-blur-bokeh-shape" names="class_renderingserver_method_camera_attributes_set_dof_blur_bokeh_shape"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_attributes_set_dof_blur_bokeh_shape</strong>(shape: <reference internal="True" refid="enum-renderingserver-dofbokehshape"><inline classes="std std-ref">DOFBokehShape</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-attributes-set-dof-blur-bokeh-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 DOF 散景图案的形状。可以使用不同的形状来达到艺术效果，或达到性能目标。有关可用选项的更多详细信息，请参阅 <reference internal="True" refid="enum-renderingserver-dofbokehshape"><inline classes="std std-ref">DOFBokehShape</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-attributes-set-dof-blur-quality"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-attributes-set-dof-blur-quality" names="class_renderingserver_method_camera_attributes_set_dof_blur_quality"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_attributes_set_dof_blur_quality</strong>(quality: <reference internal="True" refid="enum-renderingserver-dofblurquality"><inline classes="std std-ref">DOFBlurQuality</inline></reference>, use_jitter: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-attributes-set-dof-blur-quality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 DOF 模糊效果的质量级别设置为 <reference internal="True" refid="enum-renderingserver-dofblurquality"><inline classes="std std-ref">DOFBlurQuality</inline></reference> 中的选项之一。<literal>use_jitter</literal> 可用于抖动模糊过程中采集的样本，以隐藏伪影，代价是看起来更模糊。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-attributes-set-exposure"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-attributes-set-exposure" names="class_renderingserver_method_camera_attributes_set_exposure"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_attributes_set_exposure</strong>(camera_attributes: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, multiplier: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, normalization: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-attributes-set-exposure"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置渲染器所使用的曝光值。归一化量用于将给定的曝光值（Exposure Value，EV）烘焙进渲染计算，从而降低场景的动态范围。</paragraph>
            <paragraph>可以用如下方法根据曝光值（EV100）来计算归一化系数：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func get_exposure_normalization(ev100: float):
    return 1.0 / (pow(2.0, ev100) * 1.2)</literal_block>
            <paragraph>可以使用如下方法根据光圈（单位为 F 值）、快门速度（单位为秒）、感光度（单位为 ISO）来计算曝光值：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func get_exposure(aperture: float, shutter_speed: float, sensitivity: float):
    return log((aperture * aperture) / shutter_speed * (100.0 / sensitivity)) / log(2)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-create" names="class_renderingserver_method_camera_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>camera_create</strong>() <reference internal="True" refid="class-renderingserver-method-camera-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建 3D 相机并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>camera_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-set-camera-attributes"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-set-camera-attributes" names="class_renderingserver_method_camera_set_camera_attributes"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_set_camera_attributes</strong>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, effects: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-set-camera-attributes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将使用 <reference internal="True" refid="class-renderingserver-method-camera-attributes-create"><inline classes="std std-ref">camera_attributes_create</inline></reference> 创建的 camera_attributes 设置给给定的相机。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-set-compositor"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-set-compositor" names="class_renderingserver_method_camera_set_compositor"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_set_compositor</strong>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, compositor: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-set-compositor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该相机使用的合成器。相当于 <reference internal="True" refuri="class_camera3d#class-camera3d-property-compositor"><inline classes="std std-ref">Camera3D.compositor</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-set-cull-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-set-cull-mask" names="class_renderingserver_method_camera_set_cull_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_set_cull_mask</strong>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, layers: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-set-cull-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置与该相机关联的剔除掩码。剔除掩码描述了该相机渲染了哪些 3D 图层。相当于 <reference internal="True" refuri="class_camera3d#class-camera3d-property-cull-mask"><inline classes="std std-ref">Camera3D.cull_mask</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-set-environment"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-set-environment" names="class_renderingserver_method_camera_set_environment"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_set_environment</strong>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-set-environment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该相机使用的环境。相当于 <reference internal="True" refuri="class_camera3d#class-camera3d-property-environment"><inline classes="std std-ref">Camera3D.environment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-set-frustum"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-set-frustum" names="class_renderingserver_method_camera_set_frustum"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_set_frustum</strong>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-set-frustum"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将相机设置为使用视锥投影。该模式允许调整 <literal>offset</literal> 参数以创建“倾斜视锥”效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-set-orthogonal"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-set-orthogonal" names="class_renderingserver_method_camera_set_orthogonal"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_set_orthogonal</strong>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-set-orthogonal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将相机设置为使用正交投影，也称为正射投影。物体在屏幕上保持相同的尺寸，无论它们有多远。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-set-perspective"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-set-perspective" names="class_renderingserver_method_camera_set_perspective"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_set_perspective</strong>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fovy_degrees: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-set-perspective"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将相机设置为使用透视投影。屏幕上的物体在远处时变得更小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-set-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-set-transform" names="class_renderingserver_method_camera_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_set_transform</strong>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置相机的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-camera-set-use-vertical-aspect"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-camera-set-use-vertical-aspect" names="class_renderingserver_method_camera_set_use_vertical_aspect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>camera_set_use_vertical_aspect</strong>(camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-camera-set-use-vertical-aspect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则保留水平长宽比，相当于 <reference internal="True" refuri="class_camera3d#class-camera3d-constant-keep-width"><inline classes="std std-ref">Camera3D.KEEP_WIDTH</inline></reference>。如果为 <literal>false</literal>，则保留垂直长宽比，相当于 <reference internal="True" refuri="class_camera3d#class-camera3d-constant-keep-height"><inline classes="std std-ref">Camera3D.KEEP_HEIGHT</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-create" names="class_renderingserver_method_canvas_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>canvas_create</strong>() <reference internal="True" refid="class-renderingserver-method-canvas-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建画布并返回分配的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>canvas_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph>没有与画布等价的 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 或 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-animation-slice"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-animation-slice" names="class_renderingserver_method_canvas_item_add_animation_slice"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_animation_slice</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, animation_length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, slice_begin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, slice_end: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-animation-slice"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>后续的绘制命令将被忽略，除非它们位于指定的动画切片内。这是实现在背景上循环而不是不断重绘的动画的更快方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-circle"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-circle" names="class_renderingserver_method_canvas_item_add_circle"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_circle</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, radius: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-circle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上绘制一个圆圈。另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-circle"><inline classes="std std-ref">CanvasItem.draw_circle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-clip-ignore"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-clip-ignore" names="class_renderingserver_method_canvas_item_add_clip_ignore"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_clip_ignore</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, ignore: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-clip-ignore"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>ignore</literal> 为 <literal>true</literal>，则忽略使用该画布项绘制的项目的裁剪，直到将 <literal>ignore</literal> 设置为 false 时再次调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-lcd-texture-rect-region"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-lcd-texture-rect-region" names="class_renderingserver_method_canvas_item_add_lcd_texture_rect_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_lcd_texture_rect_region</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-lcd-texture-rect-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-lcd-texture-rect-region"><inline classes="std std-ref">CanvasItem.draw_lcd_texture_rect_region</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-line"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-line" names="class_renderingserver_method_canvas_item_add_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_line</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, from: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, to: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上画一条线。另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-line"><inline classes="std std-ref">CanvasItem.draw_line</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-mesh"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-mesh" names="class_renderingserver_method_canvas_item_add_mesh"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_mesh</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> = Transform2D(1, 0, 0, 1, 0, 0), modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID()) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的 <literal>transform</literal>、<literal>modulate</literal> 颜色和 <literal>texture</literal> 绘制使用 <reference internal="True" refid="class-renderingserver-method-mesh-create"><inline classes="std std-ref">mesh_create</inline></reference> 创建的网格。这由 <reference internal="True" refuri="class_meshinstance2d#class-meshinstance2d"><inline classes="std std-ref">MeshInstance2D</inline></reference> 内部使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-msdf-texture-rect-region"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-msdf-texture-rect-region" names="class_renderingserver_method_canvas_item_add_msdf_texture_rect_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_msdf_texture_rect_region</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, px_range: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-msdf-texture-rect-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-msdf-texture-rect-region"><inline classes="std std-ref">CanvasItem.draw_msdf_texture_rect_region</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-multiline"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-multiline" names="class_renderingserver_method_canvas_item_add_multiline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_multiline</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-multiline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上，绘制一个 2D 多线。另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-multiline"><inline classes="std std-ref">CanvasItem.draw_multiline</inline></reference> 和 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-multiline-colors"><inline classes="std std-ref">CanvasItem.draw_multiline_colors</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-multimesh"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-multimesh" names="class_renderingserver_method_canvas_item_add_multimesh"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_multimesh</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID()) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-multimesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上，绘制一个 2D <reference internal="True" refuri="class_multimesh#class-multimesh"><inline classes="std std-ref">MultiMesh</inline></reference>。另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-multimesh"><inline classes="std std-ref">CanvasItem.draw_multimesh</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-nine-patch"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-nine-patch" names="class_renderingserver_method_canvas_item_add_nine_patch"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_nine_patch</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, source: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, topleft: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, bottomright: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, x_axis_mode: <reference internal="True" refid="enum-renderingserver-ninepatchaxismode"><inline classes="std std-ref">NinePatchAxisMode</inline></reference> = 0, y_axis_mode: <reference internal="True" refid="enum-renderingserver-ninepatchaxismode"><inline classes="std std-ref">NinePatchAxisMode</inline></reference> = 0, draw_center: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-nine-patch"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上，绘制一个九宫格矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-particles"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-particles" names="class_renderingserver_method_canvas_item_add_particles"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_particles</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-particles"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上绘制粒子。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-polygon"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-polygon" names="class_renderingserver_method_canvas_item_add_polygon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_polygon</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> = PackedVector2Array(), texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID()) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-polygon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上绘制一个 2D 多边形。如果你需要更加灵活的设置（例如能够使用骨骼），请改用 <reference internal="True" refid="class-renderingserver-method-canvas-item-add-triangle-array"><inline classes="std std-ref">canvas_item_add_triangle_array</inline></reference>。另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-polygon"><inline classes="std std-ref">CanvasItem.draw_polygon</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-polyline"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-polyline" names="class_renderingserver_method_canvas_item_add_polyline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_polyline</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-polyline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上，绘制一个 2D 折线。另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-polyline"><inline classes="std std-ref">CanvasItem.draw_polyline</inline></reference> 和 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-polyline-colors"><inline classes="std std-ref">CanvasItem.draw_polyline_colors</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-primitive"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-primitive" names="class_renderingserver_method_canvas_item_add_primitive"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_primitive</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-primitive"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上绘制一个 2D 图元。另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-primitive"><inline classes="std std-ref">CanvasItem.draw_primitive</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-rect"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-rect" names="class_renderingserver_method_canvas_item_add_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_rect</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上绘制一个矩形。另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-rect"><inline classes="std std-ref">CanvasItem.draw_rect</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-set-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-set-transform" names="class_renderingserver_method_canvas_item_add_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_set_transform</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置将被用于变换后续画布项命令的 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-texture-rect"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-texture-rect" names="class_renderingserver_method_canvas_item_add_texture_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_texture_rect</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, tile: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-texture-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上绘制一个有纹理的 2D 矩形。另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-texture-rect"><inline classes="std std-ref">CanvasItem.draw_texture_rect</inline></reference> 和 <reference internal="True" refuri="class_texture2d#class-texture2d-method-draw-rect"><inline classes="std std-ref">Texture2D.draw_rect</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-texture-rect-region"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-texture-rect-region" names="class_renderingserver_method_canvas_item_add_texture_rect_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_texture_rect_region</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, clip_uv: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-texture-rect-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上绘制一个有纹理 2D 矩形的特定区域。另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-texture-rect-region"><inline classes="std std-ref">CanvasItem.draw_texture_rect_region</inline></reference> 和 <reference internal="True" refuri="class_texture2d#class-texture2d-method-draw-rect-region"><inline classes="std std-ref">Texture2D.draw_rect_region</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-add-triangle-array"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-add-triangle-array" names="class_renderingserver_method_canvas_item_add_triangle_array"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_add_triangle_array</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, indices: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>, points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> = PackedVector2Array(), bones: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> = PackedInt32Array(), weights: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> = PackedFloat32Array(), texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID(), count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-renderingserver-method-canvas-item-add-triangle-array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>item</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 指向的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上绘制一个三角形数组。渲染 <reference internal="True" refuri="class_line2d#class-line2d"><inline classes="std std-ref">Line2D</inline></reference> 和 <reference internal="True" refuri="class_styleboxflat#class-styleboxflat"><inline classes="std std-ref">StyleBoxFlat</inline></reference> 时内部使用。<reference internal="True" refid="class-renderingserver-method-canvas-item-add-triangle-array"><inline classes="std std-ref">canvas_item_add_triangle_array</inline></reference> 非常灵活，但用起来要比 <reference internal="True" refid="class-renderingserver-method-canvas-item-add-polygon"><inline classes="std std-ref">canvas_item_add_polygon</inline></reference> 复杂。</paragraph>
            <paragraph><strong>注意：</strong><literal>count</literal> 未使用，可以不指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-clear"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-clear" names="class_renderingserver_method_canvas_item_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_clear</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清空 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 并删除其中的所有命令。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-create" names="class_renderingserver_method_canvas_item_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>canvas_item_create</strong>() <reference internal="True" refid="class-renderingserver-method-canvas-item-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建 CanvasItem 实例并返回其 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>canvas_item_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-reset-physics-interpolation"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-reset-physics-interpolation" names="class_renderingserver_method_canvas_item_reset_physics_interpolation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_reset_physics_interpolation</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-reset-physics-interpolation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>防止当前物理刻度的物理插值。</paragraph>
            <paragraph>这在将画布项移动到新位置时很有用，可以产生瞬时变化，而不是从先前位置进行插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-canvas-group-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-canvas-group-mode" names="class_renderingserver_method_canvas_item_set_canvas_group_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_canvas_group_mode</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-canvasgroupmode"><inline classes="std std-ref">CanvasGroupMode</inline></reference>, clear_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 5.0, fit_empty: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, fit_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, blur_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-canvas-group-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置对画布项进行 2D 渲染时使用的画布分组模式，画布项由 <literal>item</literal> RID 指定。要使用更快速但局限性更大的裁剪，请改用 <reference internal="True" refid="class-renderingserver-method-canvas-item-set-clip"><inline classes="std std-ref">canvas_item_set_clip</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>等价的节点功能可以在 <reference internal="True" refuri="class_canvasgroup#class-canvasgroup"><inline classes="std std-ref">CanvasGroup</inline></reference> 和 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-clip-children"><inline classes="std std-ref">CanvasItem.clip_children</inline></reference> 中找到。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-clip"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-clip" names="class_renderingserver_method_canvas_item_set_clip"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_clip</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, clip: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-clip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>clip</literal> 为 <literal>true</literal>，则画布项不会在其矩形坐标之外绘制内容，画布项由 <literal>item</literal> RID 指定。这种裁剪很快，但只能用于轴对齐的矩形。也就是说裁剪矩形会忽略旋转。更高阶的裁剪形状请改用 <reference internal="True" refid="class-renderingserver-method-canvas-item-set-canvas-group-mode"><inline classes="std std-ref">canvas_item_set_canvas_group_mode</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>等价的节点功能可以在 <reference internal="True" refuri="class_label#class-label-property-clip-text"><inline classes="std std-ref">Label.clip_text</inline></reference>、<reference internal="True" refuri="class_richtextlabel#class-richtextlabel"><inline classes="std std-ref">RichTextLabel</inline></reference>（始终启用）等处找到。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-copy-to-backbuffer"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-copy-to-backbuffer" names="class_renderingserver_method_canvas_item_set_copy_to_backbuffer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_copy_to_backbuffer</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-copy-to-backbuffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 以将矩形复制到后台缓冲区。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-custom-rect"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-custom-rect" names="class_renderingserver_method_canvas_item_set_custom_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_custom_rect</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, use_custom_rect: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> = Rect2(0, 0, 0, 0)) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-custom-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>use_custom_rect</literal> 为 <literal>true</literal>，则将画布项 <literal>item</literal> 的自定义可见性框设置为 <literal>rect</literal>（用于剔除）。设置自定义可见性框能够在绘制大量 2D 实例时降低 CPU 负载。如果 <literal>use_custom_rect</literal> 为 <literal>false</literal>，则会根据画布项的绘制命令自动计算可见性框。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-default-texture-filter"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-default-texture-filter" names="class_renderingserver_method_canvas_item_set_default_texture_filter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_default_texture_filter</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, filter: <reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-default-texture-filter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 RID 为 <literal>item</literal> 的画布项的默认纹理过滤模式。等价于 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-texture-filter"><inline classes="std std-ref">CanvasItem.texture_filter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-default-texture-repeat"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-default-texture-repeat" names="class_renderingserver_method_canvas_item_set_default_texture_repeat"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_default_texture_repeat</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, repeat: <reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-default-texture-repeat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 RID 为 <literal>item</literal> 的画布项的默认纹理重复模式。等价于 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-texture-repeat"><inline classes="std std-ref">CanvasItem.texture_repeat</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-distance-field-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-distance-field-mode" names="class_renderingserver_method_canvas_item_set_distance_field_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_distance_field_mode</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-distance-field-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>enabled</literal> 为 <literal>true</literal>，则为 RID 为 <literal>item</literal> 的画布项启用多通道带符号距离场渲染模式。旨在用于字体渲染，或针对使用 <reference name="msdfgen" refuri="https://github.com/Chlumsky/msdfgen">msdfgen</reference> 生成的图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-draw-behind-parent"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-draw-behind-parent" names="class_renderingserver_method_canvas_item_set_draw_behind_parent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_draw_behind_parent</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-draw-behind-parent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>enabled</literal> 为 <literal>true</literal>，则为 RID 为 <literal>item</literal> 的画布项绘制在父级之后。等价于 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-show-behind-parent"><inline classes="std std-ref">CanvasItem.show_behind_parent</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-draw-index"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-draw-index" names="class_renderingserver_method_canvas_item_set_draw_index"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_draw_index</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-draw-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-interpolated"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-interpolated" names="class_renderingserver_method_canvas_item_set_interpolated"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_interpolated</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, interpolated: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-interpolated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>interpolated</literal> 为 <literal>true</literal>，则为该画布项打开物理插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-light-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-light-mask" names="class_renderingserver_method_canvas_item_set_light_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_light_mask</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-light-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 RID 为 <literal>item</literal> 的画布项的灯光掩码 <literal>mask</literal>。等价于 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-light-mask"><inline classes="std std-ref">CanvasItem.light_mask</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-material"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-material" names="class_renderingserver_method_canvas_item_set_material"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_material</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 RID 为 <literal>item</literal> 的画布项的新材质 <literal>material</literal>。等价于 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-material"><inline classes="std std-ref">CanvasItem.material</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-modulate"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-modulate" names="class_renderingserver_method_canvas_item_set_modulate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_modulate</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 RID 为 <literal>item</literal> 的画布项的颜色与其相乘，子项也受影响。另见 <reference internal="True" refid="class-renderingserver-method-canvas-item-set-self-modulate"><inline classes="std std-ref">canvas_item_set_self_modulate</inline></reference>。等价于 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-modulate"><inline classes="std std-ref">CanvasItem.modulate</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-parent"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-parent" names="class_renderingserver_method_canvas_item_set_parent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_parent</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parent: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-parent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 设置父级 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference>。该项目会从父级继承变换、调制、可见性，和场景树中的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 节点一样。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-self-modulate"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-self-modulate" names="class_renderingserver_method_canvas_item_set_self_modulate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_self_modulate</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-self-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 RID 为 <literal>item</literal> 的画布项的颜色与其相乘，子项不受影响。另见 <reference internal="True" refid="class-renderingserver-method-canvas-item-set-modulate"><inline classes="std std-ref">canvas_item_set_modulate</inline></reference>。等价于 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-self-modulate"><inline classes="std std-ref">CanvasItem.self_modulate</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-sort-children-by-y"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-sort-children-by-y" names="class_renderingserver_method_canvas_item_set_sort_children_by_y"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_sort_children_by_y</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-sort-children-by-y"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>enabled</literal> 为 <literal>true</literal>，则会在绘制 Y 位置最低的子节点之后再绘制 Y 位置较高的子节点。Y 排序仅影响继承自该画布项的子级，不影响画布项自身，该画布项由 <literal>item</literal> RID 指定。等价于 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-y-sort-enabled"><inline classes="std std-ref">CanvasItem.y_sort_enabled</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-transform" names="class_renderingserver_method_canvas_item_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_transform</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 RID 为 <literal>item</literal> 的画布项的变换设置为 <literal>transform</literal>。会影响该画布项绘制的位置和方法。子级画布项的变换会与父级变换相乘。等价于 <reference internal="True" refuri="class_node2d#class-node2d-property-transform"><inline classes="std std-ref">Node2D.transform</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-use-parent-material"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-use-parent-material" names="class_renderingserver_method_canvas_item_set_use_parent_material"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_use_parent_material</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-use-parent-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 是否使用其父级的材质。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-visibility-layer"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-visibility-layer" names="class_renderingserver_method_canvas_item_set_visibility_layer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_visibility_layer</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, visibility_layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-visibility-layer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置与这个 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 关联的渲染可见性层。只有渲染掩码与此匹配的 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 节点才会渲染这个 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-visibility-notifier"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-visibility-notifier" names="class_renderingserver_method_canvas_item_set_visibility_notifier"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_visibility_notifier</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, area: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, enter_callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, exit_callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-visibility-notifier"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 设置为可见性通知器。<literal>area</literal> 定义可见性检查的区域。<reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 进入屏幕时会调用 <literal>enter_callable</literal>，<reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 退出屏幕时会调用 <literal>exit_callable</literal>。如果 <literal>enable</literal> 为 <literal>false</literal>，则该项目将不再作为通知器。</paragraph>
            <paragraph>这个方法可用于手动模仿 <reference internal="True" refuri="class_visibleonscreennotifier2d#class-visibleonscreennotifier2d"><inline classes="std std-ref">VisibleOnScreenNotifier2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-visible"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-visible" names="class_renderingserver_method_canvas_item_set_visible"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_visible</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, visible: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 的可见性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-z-as-relative-to-parent"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-z-as-relative-to-parent" names="class_renderingserver_method_canvas_item_set_z_as_relative_to_parent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_z_as_relative_to_parent</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-z-as-relative-to-parent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果启用此选项，则父项的 Z 索引将添加到子项的 Z 索引中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-set-z-index"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-set-z-index" names="class_renderingserver_method_canvas_item_set_z_index"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_set_z_index</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, z_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-set-z-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 的 Z 索引，即它的绘制顺序（首先绘制数值较低的索引）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-item-transform-physics-interpolation"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-item-transform-physics-interpolation" names="class_renderingserver_method_canvas_item_transform_physics_interpolation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_item_transform_physics_interpolation</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-item-transform-physics-interpolation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>同时变换画布项的当前变换和之前存储的变换。</paragraph>
            <paragraph>这允许变换画布项而不会在插值中产生“卡顿”，这对于利用原点移位的大型世界特别有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-attach-to-canvas"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-attach-to-canvas" names="class_renderingserver_method_canvas_light_attach_to_canvas"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_attach_to_canvas</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-attach-to-canvas"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将画布灯连接到画布上，并将其从以前的画布中取出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-create" names="class_renderingserver_method_canvas_light_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>canvas_light_create</strong>() <reference internal="True" refid="class-renderingserver-method-canvas-light-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建画布灯光并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>canvas_light_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_light2d#class-light2d"><inline classes="std std-ref">Light2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-occluder-attach-to-canvas"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-occluder-attach-to-canvas" names="class_renderingserver_method_canvas_light_occluder_attach_to_canvas"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_occluder_attach_to_canvas</strong>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-attach-to-canvas"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将光遮挡物添加到画布上,并将其从之前的画布中移除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-occluder-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-occluder-create" names="class_renderingserver_method_canvas_light_occluder_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>canvas_light_occluder_create</strong>() <reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建光线遮挡器并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>canvas_light_occluder_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_lightoccluder2d#class-lightoccluder2d"><inline classes="std std-ref">LightOccluder2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-occluder-reset-physics-interpolation"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-occluder-reset-physics-interpolation" names="class_renderingserver_method_canvas_light_occluder_reset_physics_interpolation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_occluder_reset_physics_interpolation</strong>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-reset-physics-interpolation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>阻止当前物理周期的物理插值。</paragraph>
            <paragraph>适用于将遮挡器移动至新位置的情况，这样修改就是即时的，不会从原有位置进行插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-occluder-set-as-sdf-collision"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-occluder-set-as-sdf-collision" names="class_renderingserver_method_canvas_light_occluder_set_as_sdf_collision"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_occluder_set_as_sdf_collision</strong>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-set-as-sdf-collision"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-occluder-set-enabled"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-occluder-set-enabled" names="class_renderingserver_method_canvas_light_occluder_set_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_occluder_set_enabled</strong>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-set-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启用或禁用遮光器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-occluder-set-interpolated"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-occluder-set-interpolated" names="class_renderingserver_method_canvas_light_occluder_set_interpolated"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_occluder_set_interpolated</strong>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, interpolated: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-set-interpolated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>interpolated</literal> 为 <literal>true</literal>，则为该灯光遮挡器打开物理插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-occluder-set-light-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-occluder-set-light-mask" names="class_renderingserver_method_canvas_light_occluder_set_light_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_occluder_set_light_mask</strong>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-set-light-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>光线遮罩。详情请参阅 <reference internal="True" refuri="class_lightoccluder2d#class-lightoccluder2d"><inline classes="std std-ref">LightOccluder2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-occluder-set-polygon"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-occluder-set-polygon" names="class_renderingserver_method_canvas_light_occluder_set_polygon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_occluder_set_polygon</strong>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, polygon: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-set-polygon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置光遮挡物的多边形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-occluder-set-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-occluder-set-transform" names="class_renderingserver_method_canvas_light_occluder_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_occluder_set_transform</strong>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置光遮挡物的 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-occluder-transform-physics-interpolation"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-occluder-transform-physics-interpolation" names="class_renderingserver_method_canvas_light_occluder_transform_physics_interpolation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_occluder_transform_physics_interpolation</strong>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-occluder-transform-physics-interpolation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>同时变换光遮挡器的当前变换和之前存储的变换。</paragraph>
            <paragraph>这允许变换遮挡器而不会在插值中产生“卡顿”，这对于利用原点移位的大型世界特别有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-reset-physics-interpolation"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-reset-physics-interpolation" names="class_renderingserver_method_canvas_light_reset_physics_interpolation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_reset_physics_interpolation</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-reset-physics-interpolation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>防止当前物理刻度的物理插值。</paragraph>
            <paragraph>这在将画布项移动到新位置时很有用，可以产生瞬时变化，而不是从先前位置进行插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-blend-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-blend-mode" names="class_renderingserver_method_canvas_light_set_blend_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_blend_mode</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-canvaslightblendmode"><inline classes="std std-ref">CanvasLightBlendMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-blend-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定画布灯光的混合模式。选项见 <reference internal="True" refid="enum-renderingserver-canvaslightblendmode"><inline classes="std std-ref">CanvasLightBlendMode</inline></reference>。等价于 <reference internal="True" refuri="class_light2d#class-light2d-property-blend-mode"><inline classes="std std-ref">Light2D.blend_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-color"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-color" names="class_renderingserver_method_canvas_light_set_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_color</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置灯光的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-enabled"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-enabled" names="class_renderingserver_method_canvas_light_set_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_enabled</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启用或禁用画布灯。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-energy"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-energy" names="class_renderingserver_method_canvas_light_set_energy"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_energy</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-energy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置画布灯的能量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-height"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-height" names="class_renderingserver_method_canvas_light_set_height"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_height</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, height: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置画布灯的高度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-interpolated"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-interpolated" names="class_renderingserver_method_canvas_light_set_interpolated"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_interpolated</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, interpolated: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-interpolated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>interpolated</literal> 为 <literal>true</literal>，则为该画布灯光打开物理插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-item-cull-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-item-cull-mask" names="class_renderingserver_method_canvas_light_set_item_cull_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_item_cull_mask</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-item-cull-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>光线遮罩。详情请参阅 <reference internal="True" refuri="class_lightoccluder2d#class-lightoccluder2d"><inline classes="std std-ref">LightOccluder2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-item-shadow-cull-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-item-shadow-cull-mask" names="class_renderingserver_method_canvas_light_set_item_shadow_cull_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_item_shadow_cull_mask</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-item-shadow-cull-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于确定此画布灯光阴影影响哪些图层的二进制蒙版。有关光遮罩的更多信息，请参阅 <reference internal="True" refuri="class_lightoccluder2d#class-lightoccluder2d"><inline classes="std std-ref">LightOccluder2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-layer-range"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-layer-range" names="class_renderingserver_method_canvas_light_set_layer_range"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_layer_range</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, min_layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max_layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-layer-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用此灯光渲染的图层范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-mode" names="class_renderingserver_method_canvas_light_set_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_mode</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-canvaslightmode"><inline classes="std std-ref">CanvasLightMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>光的模式，详见<reference internal="True" refid="enum-renderingserver-canvaslightmode"><inline classes="std std-ref">CanvasLightMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-shadow-color"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-shadow-color" names="class_renderingserver_method_canvas_light_set_shadow_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_shadow_color</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-shadow-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置画布灯的阴影颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-shadow-enabled"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-shadow-enabled" names="class_renderingserver_method_canvas_light_set_shadow_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_shadow_enabled</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-shadow-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启用或禁用画布灯的阴影。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-shadow-filter"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-shadow-filter" names="class_renderingserver_method_canvas_light_set_shadow_filter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_shadow_filter</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, filter: <reference internal="True" refid="enum-renderingserver-canvaslightshadowfilter"><inline classes="std std-ref">CanvasLightShadowFilter</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-shadow-filter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置画布灯的阴影过滤器，详见 <reference internal="True" refid="enum-renderingserver-canvaslightshadowfilter"><inline classes="std std-ref">CanvasLightShadowFilter</inline></reference> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-shadow-smooth"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-shadow-smooth" names="class_renderingserver_method_canvas_light_set_shadow_smooth"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_shadow_smooth</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, smooth: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-shadow-smooth"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使阴影变得平滑。数值越低越光滑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-texture"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-texture" names="class_renderingserver_method_canvas_light_set_texture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_texture</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_pointlight2d#class-pointlight2d"><inline classes="std std-ref">PointLight2D</inline></reference> 所使用的纹理。相当于 <reference internal="True" refuri="class_pointlight2d#class-pointlight2d-property-texture"><inline classes="std std-ref">PointLight2D.texture</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-texture-offset"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-texture-offset" names="class_renderingserver_method_canvas_light_set_texture_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_texture_offset</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-texture-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_pointlight2d#class-pointlight2d"><inline classes="std std-ref">PointLight2D</inline></reference> 纹理的偏移量。相当于 <reference internal="True" refuri="class_pointlight2d#class-pointlight2d-property-offset"><inline classes="std std-ref">PointLight2D.offset</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-texture-scale"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-texture-scale" names="class_renderingserver_method_canvas_light_set_texture_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_texture_scale</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-texture-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_pointlight2d#class-pointlight2d"><inline classes="std std-ref">PointLight2D</inline></reference> 纹理的缩放系数。相当于 <reference internal="True" refuri="class_pointlight2d#class-pointlight2d-property-texture-scale"><inline classes="std std-ref">PointLight2D.texture_scale</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-transform" names="class_renderingserver_method_canvas_light_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_transform</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置画布灯的 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-set-z-range"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-set-z-range" names="class_renderingserver_method_canvas_light_set_z_range"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_set_z_range</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, min_z: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max_z: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-set-z-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置将受此光影响的对象的 Z 范围。相当于 <reference internal="True" refuri="class_light2d#class-light2d-property-range-z-min"><inline classes="std std-ref">Light2D.range_z_min</inline></reference> 和 <reference internal="True" refuri="class_light2d#class-light2d-property-range-z-max"><inline classes="std std-ref">Light2D.range_z_max</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-light-transform-physics-interpolation"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-light-transform-physics-interpolation" names="class_renderingserver_method_canvas_light_transform_physics_interpolation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_light_transform_physics_interpolation</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-light-transform-physics-interpolation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>同时变换画布灯光的当前变换和之前存储的变换。</paragraph>
            <paragraph>这允许变换灯光而不会在插值中产生“卡顿”，这对于利用原点移位的大型世界特别有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-occluder-polygon-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-occluder-polygon-create" names="class_renderingserver_method_canvas_occluder_polygon_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>canvas_occluder_polygon_create</strong>() <reference internal="True" refid="class-renderingserver-method-canvas-occluder-polygon-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建光线遮挡多边形并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>canvas_occluder_polygon_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_occluderpolygon2d#class-occluderpolygon2d"><inline classes="std std-ref">OccluderPolygon2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-occluder-polygon-set-cull-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-occluder-polygon-set-cull-mode" names="class_renderingserver_method_canvas_occluder_polygon_set_cull_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_occluder_polygon_set_cull_mode</strong>(occluder_polygon: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-canvasoccluderpolygoncullmode"><inline classes="std std-ref">CanvasOccluderPolygonCullMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-occluder-polygon-set-cull-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置遮挡多边形剔除模式。详见 <reference internal="True" refid="enum-renderingserver-canvasoccluderpolygoncullmode"><inline classes="std std-ref">CanvasOccluderPolygonCullMode</inline></reference> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-occluder-polygon-set-shape"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-occluder-polygon-set-shape" names="class_renderingserver_method_canvas_occluder_polygon_set_shape"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_occluder_polygon_set_shape</strong>(occluder_polygon: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, shape: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, closed: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-occluder-polygon-set-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置遮挡多边形的形状。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-set-disable-scale"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-set-disable-scale" names="class_renderingserver_method_canvas_set_disable_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_set_disable_scale</strong>(disable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-set-disable-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-set-item-mirroring"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-set-item-mirroring" names="class_renderingserver_method_canvas_set_item_mirroring"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_set_item_mirroring</strong>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mirroring: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-set-item-mirroring"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>画布项目的副本将以镜像的局部偏移量<reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>被绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-set-item-repeat"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-set-item-repeat" names="class_renderingserver_method_canvas_set_item_repeat"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_set_item_repeat</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, repeat_size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, repeat_times: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-set-item-repeat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将使用 <literal>repeat_size</literal> 的局部偏移量和 <literal>repeat_times</literal> 的次数来绘制画布项目的副本。随着 <literal>repeat_times</literal> 的增加，副本将从原始纹理蔓延开来。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-set-modulate"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-set-modulate" names="class_renderingserver_method_canvas_set_modulate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_set_modulate</strong>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-set-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>调制给定画布中的所有颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-set-shadow-texture-size"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-set-shadow-texture-size" names="class_renderingserver_method_canvas_set_shadow_texture_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_set_shadow_texture_size</strong>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-set-shadow-texture-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_light2d#class-light2d"><inline classes="std std-ref">Light2D</inline></reference> 阴影渲染时使用的 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-2d-shadow-atlas-size"><inline classes="std std-ref">ProjectSettings.rendering/2d/shadow_atlas/size</inline></reference>（单位为像素）。该值会向上取整到最接近的 2 的幂。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-texture-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-texture-create" names="class_renderingserver_method_canvas_texture_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>canvas_texture_create</strong>() <reference internal="True" refid="class-renderingserver-method-canvas-texture-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建画布纹理并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>canvas_texture_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。另见 <reference internal="True" refid="class-renderingserver-method-texture-2d-create"><inline classes="std std-ref">texture_2d_create</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>等价资源为 <reference internal="True" refuri="class_canvastexture#class-canvastexture"><inline classes="std std-ref">CanvasTexture</inline></reference>，应该仅用于 2D 渲染，不用于 3D。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-texture-set-channel"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-texture-set-channel" names="class_renderingserver_method_canvas_texture_set_channel"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_texture_set_channel</strong>(canvas_texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, channel: <reference internal="True" refid="enum-renderingserver-canvastexturechannel"><inline classes="std std-ref">CanvasTextureChannel</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-texture-set-channel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为画布纹理设置 <literal>channel</literal> 通道的纹理 <literal>texture</literal>，该画布纹理由 RID <literal>canvas_texture</literal> 指定。等价于 <reference internal="True" refuri="class_canvastexture#class-canvastexture-property-diffuse-texture"><inline classes="std std-ref">CanvasTexture.diffuse_texture</inline></reference>、<reference internal="True" refuri="class_canvastexture#class-canvastexture-property-normal-texture"><inline classes="std std-ref">CanvasTexture.normal_texture</inline></reference> 和 <reference internal="True" refuri="class_canvastexture#class-canvastexture-property-specular-texture"><inline classes="std std-ref">CanvasTexture.specular_texture</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-texture-set-shading-parameters"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-texture-set-shading-parameters" names="class_renderingserver_method_canvas_texture_set_shading_parameters"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_texture_set_shading_parameters</strong>(canvas_texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, base_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, shininess: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-texture-set-shading-parameters"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为画布纹理设置 <literal>base_color</literal> 和 <literal>shininess</literal>，该画布纹理由 RID <literal>canvas_texture</literal> 指定。等价于 <reference internal="True" refuri="class_canvastexture#class-canvastexture-property-specular-color"><inline classes="std std-ref">CanvasTexture.specular_color</inline></reference> 和 <reference internal="True" refuri="class_canvastexture#class-canvastexture-property-specular-shininess"><inline classes="std std-ref">CanvasTexture.specular_shininess</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-texture-set-texture-filter"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-texture-set-texture-filter" names="class_renderingserver_method_canvas_texture_set_texture_filter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_texture_set_texture_filter</strong>(canvas_texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, filter: <reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-texture-set-texture-filter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为画布纹理设置纹理过滤模式 <literal>filter</literal>，该画布纹理由 RID <literal>canvas_texture</literal> 指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-canvas-texture-set-texture-repeat"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-canvas-texture-set-texture-repeat" names="class_renderingserver_method_canvas_texture_set_texture_repeat"><abbreviation explanation="无返回值。">void</abbreviation> <strong>canvas_texture_set_texture_repeat</strong>(canvas_texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, repeat: <reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference>) <reference internal="True" refid="class-renderingserver-method-canvas-texture-set-texture-repeat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为画布纹理设置纹理重复模式 <literal>repeat</literal>，该画布纹理由 RID <literal>canvas_texture</literal> 指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-compositor-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-compositor-create" names="class_renderingserver_method_compositor_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>compositor_create</strong>() <reference internal="True" refid="class-renderingserver-method-compositor-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个新的合成器并将其添加到 RenderingServer。可以使用返回的 RID 来访问它。</paragraph>
            <paragraph>RID 使用完后，你将需要使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法释放该 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-compositor-effect-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-compositor-effect-create" names="class_renderingserver_method_compositor_effect_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>compositor_effect_create</strong>() <reference internal="True" refid="class-renderingserver-method-compositor-effect-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建新的渲染效果并将其添加到 RenderingServer。可以使用返回的 RID 来访问它。</paragraph>
            <paragraph>RID 使用完后，你将需要使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法释放该 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-compositor-effect-set-callback"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-compositor-effect-set-callback" names="class_renderingserver_method_compositor_effect_set_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>compositor_effect_set_callback</strong>(effect: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, callback_type: <reference internal="True" refid="enum-renderingserver-compositoreffectcallbacktype"><inline classes="std std-ref">CompositorEffectCallbackType</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-renderingserver-method-compositor-effect-set-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该渲染效果的回调类型（<literal>callback_type</literal>）和回调方法（<literal>callback</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-compositor-effect-set-enabled"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-compositor-effect-set-enabled" names="class_renderingserver_method_compositor_effect_set_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>compositor_effect_set_enabled</strong>(effect: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-compositor-effect-set-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启用/禁用该渲染效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-compositor-effect-set-flag"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-compositor-effect-set-flag" names="class_renderingserver_method_compositor_effect_set_flag"><abbreviation explanation="无返回值。">void</abbreviation> <strong>compositor_effect_set_flag</strong>(effect: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, flag: <reference internal="True" refid="enum-renderingserver-compositoreffectflags"><inline classes="std std-ref">CompositorEffectFlags</inline></reference>, set: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-compositor-effect-set-flag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该渲染效果的标志（<literal>flag</literal>）设置为 <literal>true</literal> 或 <literal>false</literal>（<literal>set</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-compositor-set-compositor-effects"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-compositor-set-compositor-effects" names="class_renderingserver_method_compositor_set_compositor_effects"><abbreviation explanation="无返回值。">void</abbreviation> <strong>compositor_set_compositor_effects</strong>(compositor: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, effects: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>]) <reference internal="True" refid="class-renderingserver-method-compositor-set-compositor-effects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定合成器 RID 的合成器效果。<literal>effects</literal> 应该是一个包含使用 <reference internal="True" refid="class-renderingserver-method-compositor-effect-create"><inline classes="std std-ref">compositor_effect_create</inline></reference> 创建的 RID 的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-create-local-rendering-device"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-create-local-rendering-device" names="class_renderingserver_method_create_local_rendering_device"><reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference> <strong>create_local_rendering_device</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-create-local-rendering-device"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个 RenderingDevice，可以用来在单独的线程上进行绘制和计算操作。不能绘制到屏幕上，也不能与全局的 RenderingDevice 共享数据。</paragraph>
            <paragraph><strong>注意：</strong>使用 OpenGL 后端或在无头模式下运行时，这个函数始终返回 <literal>null</literal> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-debug-canvas-item-get-rect"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-debug-canvas-item-get-rect" names="class_renderingserver_method_debug_canvas_item_get_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>debug_canvas_item_get_rect</strong>(item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-debug-canvas-item-get-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回渲染器计算出的局部空间中画布项的边界矩形。该边界在内部用于剔除。</paragraph>
            <paragraph><strong>警告：</strong>该函数用于在编辑器中进行调试，并且将在导出的项目中跳过并返回零 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-decal-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-decal-create" names="class_renderingserver_method_decal_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>decal_create</strong>() <reference internal="True" refid="class-renderingserver-method-decal-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建贴花并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>decal_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph>如果要将这个贴花放置到场景中，请使用返回的 RID 调用 <reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">instance_set_base</inline></reference>，将其附加至某个实例上。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_decal#class-decal"><inline classes="std std-ref">Decal</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-decal-set-albedo-mix"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-decal-set-albedo-mix" names="class_renderingserver_method_decal_set_albedo_mix"><abbreviation explanation="无返回值。">void</abbreviation> <strong>decal_set_albedo_mix</strong>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, albedo_mix: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-decal-set-albedo-mix"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为贴花设置 <literal>albedo_mix</literal>，该贴花由 RID <literal>decal</literal> 指定。等价于 <reference internal="True" refuri="class_decal#class-decal-property-albedo-mix"><inline classes="std std-ref">Decal.albedo_mix</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-decal-set-cull-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-decal-set-cull-mask" names="class_renderingserver_method_decal_set_cull_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>decal_set_cull_mask</strong>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-decal-set-cull-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为贴花设置剔除掩码 <literal>mask</literal>，该贴花由 RID <literal>decal</literal> 指定。等价于 <reference internal="True" refuri="class_decal#class-decal-property-cull-mask"><inline classes="std std-ref">Decal.cull_mask</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-decal-set-distance-fade"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-decal-set-distance-fade" names="class_renderingserver_method_decal_set_distance_fade"><abbreviation explanation="无返回值。">void</abbreviation> <strong>decal_set_distance_fade</strong>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, begin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-decal-set-distance-fade"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为贴花设置距离淡出参数，该贴花由 RID <literal>decal</literal> 指定。等价于 <reference internal="True" refuri="class_decal#class-decal-property-distance-fade-enabled"><inline classes="std std-ref">Decal.distance_fade_enabled</inline></reference>、<reference internal="True" refuri="class_decal#class-decal-property-distance-fade-begin"><inline classes="std std-ref">Decal.distance_fade_begin</inline></reference> 和 <reference internal="True" refuri="class_decal#class-decal-property-distance-fade-length"><inline classes="std std-ref">Decal.distance_fade_length</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-decal-set-emission-energy"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-decal-set-emission-energy" names="class_renderingserver_method_decal_set_emission_energy"><abbreviation explanation="无返回值。">void</abbreviation> <strong>decal_set_emission_energy</strong>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-decal-set-emission-energy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为贴花设置自发光能量 <literal>energy</literal>，该贴花由 RID <literal>decal</literal> 指定。等价于 <reference internal="True" refuri="class_decal#class-decal-property-emission-energy"><inline classes="std std-ref">Decal.emission_energy</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-decal-set-fade"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-decal-set-fade" names="class_renderingserver_method_decal_set_fade"><abbreviation explanation="无返回值。">void</abbreviation> <strong>decal_set_fade</strong>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, above: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, below: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-decal-set-fade"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为贴花设置上侧淡出（<literal>above</literal>）和下侧淡出（<literal>below</literal>），该贴花由 RID <literal>decal</literal> 指定。等价于 <reference internal="True" refuri="class_decal#class-decal-property-upper-fade"><inline classes="std std-ref">Decal.upper_fade</inline></reference> 和 <reference internal="True" refuri="class_decal#class-decal-property-lower-fade"><inline classes="std std-ref">Decal.lower_fade</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-decal-set-modulate"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-decal-set-modulate" names="class_renderingserver_method_decal_set_modulate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>decal_set_modulate</strong>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-decal-set-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将贴花的颜色乘数设置为 <literal>color</literal>，该贴花由 RID <literal>decal</literal> 指定。等价于 <reference internal="True" refuri="class_decal#class-decal-property-modulate"><inline classes="std std-ref">Decal.modulate</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-decal-set-normal-fade"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-decal-set-normal-fade" names="class_renderingserver_method_decal_set_normal_fade"><abbreviation explanation="无返回值。">void</abbreviation> <strong>decal_set_normal_fade</strong>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fade: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-decal-set-normal-fade"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 RID 为 <literal>decal</literal> 的贴花的法线淡出 <literal>fade</literal>。等价于 <reference internal="True" refuri="class_decal#class-decal-property-normal-fade"><inline classes="std std-ref">Decal.normal_fade</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-decal-set-size"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-decal-set-size" names="class_renderingserver_method_decal_set_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>decal_set_size</strong>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-renderingserver-method-decal-set-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 RID 为 <literal>decal</literal> 的贴花的大小 <literal>size</literal>。等价于 <reference internal="True" refuri="class_decal#class-decal-property-size"><inline classes="std std-ref">Decal.size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-decal-set-texture"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-decal-set-texture" names="class_renderingserver_method_decal_set_texture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>decal_set_texture</strong>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, type: <reference internal="True" refid="enum-renderingserver-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-decal-set-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定贴花中给定纹理类型插槽 <literal>type</literal> 的纹理 <literal>texture</literal>。等价于 <reference internal="True" refuri="class_decal#class-decal-method-set-texture"><inline classes="std std-ref">Decal.set_texture</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-decals-set-filter"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-decals-set-filter" names="class_renderingserver_method_decals_set_filter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>decals_set_filter</strong>(filter: <reference internal="True" refid="enum-renderingserver-decalfilter"><inline classes="std std-ref">DecalFilter</inline></reference>) <reference internal="True" refid="class-renderingserver-method-decals-set-filter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置渲染贴花时所使用的纹理过滤模式 <literal>filter</literal>。这个参数是全局的，无法针对某个贴花单独设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-directional-light-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-directional-light-create" names="class_renderingserver_method_directional_light_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>directional_light_create</strong>() <reference internal="True" refid="class-renderingserver-method-directional-light-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建平行光并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在大多数 <literal>light_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph>如果要将这个平行光放置到场景中，请使用返回的 RID 调用 <reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">instance_set_base</inline></reference>，将其附加至某个实例上。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-directional-shadow-atlas-set-size"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-directional-shadow-atlas-set-size" names="class_renderingserver_method_directional_shadow_atlas_set_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>directional_shadow_atlas_set_size</strong>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, is_16bits: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-directional-shadow-atlas-set-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 3D 方向灯光的阴影大小 <literal>size</literal>。另见 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-lights-and-shadows-directional-shadow-size"><inline classes="std std-ref">ProjectSettings.rendering/lights_and_shadows/directional_shadow/size</inline></reference>。这个参数是全局的，无法针对某个视口单独设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-directional-soft-shadow-filter-set-quality"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-directional-soft-shadow-filter-set-quality" names="class_renderingserver_method_directional_soft_shadow_filter_set_quality"><abbreviation explanation="无返回值。">void</abbreviation> <strong>directional_soft_shadow_filter_set_quality</strong>(quality: <reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">ShadowQuality</inline></reference>) <reference internal="True" refid="class-renderingserver-method-directional-soft-shadow-filter-set-quality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 3D 方向灯光的阴影过滤质量 <literal>quality</literal>。另见 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-lights-and-shadows-directional-shadow-soft-shadow-filter-quality"><inline classes="std std-ref">ProjectSettings.rendering/lights_and_shadows/directional_shadow/soft_shadow_filter_quality</inline></reference>。这个参数是全局的，无法针对某个视口单独设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-bake-panorama"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-bake-panorama" names="class_renderingserver_method_environment_bake_panorama"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>environment_bake_panorama</strong>(environment: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bake_irradiance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-bake-panorama"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>生成并返回包含 <literal>environment</literal> RID 中的天空的辐射度贴图的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>。支持内置天空材质和自定义天空着色器。如果 <literal>bake_irradiance</literal> 为 <literal>true</literal>，则保存的是辐照度贴图，而不是辐射度贴图。辐射度贴图用于渲染反射光，而辐照度贴图用于渲染环境光。另见 <reference internal="True" refid="class-renderingserver-method-sky-bake-panorama"><inline classes="std std-ref">sky_bake_panorama</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>图像使用线性色彩空间保存，未执行任何色调映射，也就是说如果在图像编辑器中查看会显得太暗。</paragraph>
            <paragraph><strong>注意：</strong>要让生成的全景图拥有正方形的像素，<literal>size</literal> 的长宽比应该为 2:1。辐射度贴图的高度超过 <reference internal="True" refuri="class_sky#class-sky-property-radiance-size"><inline classes="std std-ref">Sky.radiance_size</inline></reference> 没有意义，不会增加细节。辐照度仅包含低频数据，保存时超过 128×64 像素通常没有意义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-create" names="class_renderingserver_method_environment_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>environment_create</strong>() <reference internal="True" refid="class-renderingserver-method-environment-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建环境并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>environment_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价资源为 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-glow-set-use-bicubic-upscale"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-glow-set-use-bicubic-upscale" names="class_renderingserver_method_environment_glow_set_use_bicubic_upscale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_glow_set_use_bicubic_upscale</strong>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-glow-set-use-bicubic-upscale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>enable</literal> 为 <literal>true</literal>，则会为辉光启用双三次插值，能够牺牲性能、提升质量。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-environment-glow-upscale-mode"><inline classes="std std-ref">ProjectSettings.rendering/environment/glow/upscale_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-adjustment"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-adjustment" names="class_renderingserver_method_environment_set_adjustment"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_adjustment</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, brightness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, contrast: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, saturation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, use_1d_color_correction: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, color_correction: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-adjustment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置用于“调整”后期处理效果的数值。详见 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-ambient-light"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-ambient-light" names="class_renderingserver_method_environment_set_ambient_light"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_ambient_light</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, ambient: <reference internal="True" refid="enum-renderingserver-environmentambientsource"><inline classes="std std-ref">EnvironmentAmbientSource</inline></reference> = 0, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, sky_contibution: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, reflection_source: <reference internal="True" refid="enum-renderingserver-environmentreflectionsource"><inline classes="std std-ref">EnvironmentReflectionSource</inline></reference> = 0) <reference internal="True" refid="class-renderingserver-method-environment-set-ambient-light"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置用于环境光渲染的数值。详见 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-background"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-background" names="class_renderingserver_method_environment_set_background"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_background</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bg: <reference internal="True" refid="enum-renderingserver-environmentbg"><inline classes="std std-ref">EnvironmentBG</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-background"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置环境的背景模式。等价于 <reference internal="True" refuri="class_environment#class-environment-property-background-mode"><inline classes="std std-ref">Environment.background_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-bg-color"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-bg-color" names="class_renderingserver_method_environment_set_bg_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_bg_color</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-bg-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>场景中清屏区域的颜色。仅在使用 <reference internal="True" refid="class-renderingserver-constant-env-bg-color"><inline classes="std std-ref">ENV_BG_COLOR</inline></reference> 背景模式时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-bg-energy"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-bg-energy" names="class_renderingserver_method_environment_set_bg_energy"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_bg_energy</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, multiplier: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, exposure_value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-bg-energy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置背景颜色的强度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-canvas-max-layer"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-canvas-max-layer" names="class_renderingserver_method_environment_set_canvas_max_layer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_canvas_max_layer</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, max_layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-canvas-max-layer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果使用画布背景模式，设置要使用的最大层数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-fog"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-fog" names="class_renderingserver_method_environment_set_fog"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_fog</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, light_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, light_energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, sun_scatter: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, density: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, height: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, height_density: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, aerial_perspective: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, sky_affect: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, fog_mode: <reference internal="True" refid="enum-renderingserver-environmentfogmode"><inline classes="std std-ref">EnvironmentFogMode</inline></reference> = 0) <reference internal="True" refid="class-renderingserver-method-environment-set-fog"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为指定的环境 RID 配置雾。详见 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> 中的 <literal>fog_*</literal> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-glow"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-glow" names="class_renderingserver_method_environment_set_glow"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_glow</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, levels: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>, intensity: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, mix: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, bloom_threshold: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, blend_mode: <reference internal="True" refid="enum-renderingserver-environmentglowblendmode"><inline classes="std std-ref">EnvironmentGlowBlendMode</inline></reference>, hdr_bleed_threshold: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, hdr_bleed_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, hdr_luminance_cap: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, glow_map_strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, glow_map: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-glow"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为指定的环境 RID 配置辉光。详见 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> 中的 <literal>glow_*</literal> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-sdfgi"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-sdfgi" names="class_renderingserver_method_environment_set_sdfgi"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_sdfgi</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, cascades: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, min_cell_size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y_scale: <reference internal="True" refid="enum-renderingserver-environmentsdfgiyscale"><inline classes="std std-ref">EnvironmentSDFGIYScale</inline></reference>, use_occlusion: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, bounce_feedback: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, read_sky: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, normal_bias: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, probe_bias: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-sdfgi"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为指定的环境 RID 配置带符号距离场全局光照。详见 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> 中的 <literal>sdfgi_*</literal> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-sdfgi-frames-to-converge"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-sdfgi-frames-to-converge" names="class_renderingserver_method_environment_set_sdfgi_frames_to_converge"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_sdfgi_frames_to_converge</strong>(frames: <reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoconverge"><inline classes="std std-ref">EnvironmentSDFGIFramesToConverge</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-sdfgi-frames-to-converge"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置用于聚合带符号距离场全局光照的帧数。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-global-illumination-sdfgi-frames-to-converge"><inline classes="std std-ref">ProjectSettings.rendering/global_illumination/sdfgi/frames_to_converge</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-sdfgi-frames-to-update-light"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-sdfgi-frames-to-update-light" names="class_renderingserver_method_environment_set_sdfgi_frames_to_update_light"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_sdfgi_frames_to_update_light</strong>(frames: <reference internal="True" refid="enum-renderingserver-environmentsdfgiframestoupdatelight"><inline classes="std std-ref">EnvironmentSDFGIFramesToUpdateLight</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-sdfgi-frames-to-update-light"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置计算带符号距离场全局光照时动态灯光间接光照的更新速度。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-global-illumination-sdfgi-frames-to-update-lights"><inline classes="std std-ref">ProjectSettings.rendering/global_illumination/sdfgi/frames_to_update_lights</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-sdfgi-ray-count"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-sdfgi-ray-count" names="class_renderingserver_method_environment_set_sdfgi_ray_count"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_sdfgi_ray_count</strong>(ray_count: <reference internal="True" refid="enum-renderingserver-environmentsdfgiraycount"><inline classes="std std-ref">EnvironmentSDFGIRayCount</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-sdfgi-ray-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置计算带符号距离场全局光照时每帧射出的光线数。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-global-illumination-sdfgi-probe-ray-count"><inline classes="std std-ref">ProjectSettings.rendering/global_illumination/sdfgi/probe_ray_count</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-sky"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-sky" names="class_renderingserver_method_environment_set_sky"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_sky</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, sky: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-sky"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置当使用 <emphasis>BGMode</emphasis> 天空时被用作环境背景的 <reference internal="True" refuri="class_sky#class-sky"><inline classes="std std-ref">Sky</inline></reference>。相当于 <reference internal="True" refuri="class_environment#class-environment-property-sky"><inline classes="std std-ref">Environment.sky</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-sky-custom-fov"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-sky-custom-fov" names="class_renderingserver_method_environment_set_sky_custom_fov"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_sky_custom_fov</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-sky-custom-fov"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为背景 <reference internal="True" refuri="class_sky#class-sky"><inline classes="std std-ref">Sky</inline></reference> 设置自定义视野。相当于 <reference internal="True" refuri="class_environment#class-environment-property-sky-custom-fov"><inline classes="std std-ref">Environment.sky_custom_fov</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-sky-orientation"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-sky-orientation" names="class_renderingserver_method_environment_set_sky_orientation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_sky_orientation</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, orientation: <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-sky-orientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置被表示为 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> 的背景 <reference internal="True" refuri="class_sky#class-sky"><inline classes="std std-ref">Sky</inline></reference> 的旋转。相当于 <reference internal="True" refuri="class_environment#class-environment-property-sky-rotation"><inline classes="std std-ref">Environment.sky_rotation</inline></reference>，其中旋转向量用于构建该 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-ssao"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-ssao" names="class_renderingserver_method_environment_set_ssao"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_ssao</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, radius: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, intensity: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, power: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, detail: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, horizon: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, sharpness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, light_affect: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, ao_channel_affect: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-ssao"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置屏幕空间环境光遮蔽（SSAO）后期处理效果所使用的变量。详情见 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-ssao-quality"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-ssao-quality" names="class_renderingserver_method_environment_set_ssao_quality"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_ssao_quality</strong>(quality: <reference internal="True" refid="enum-renderingserver-environmentssaoquality"><inline classes="std std-ref">EnvironmentSSAOQuality</inline></reference>, half_size: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, adaptive_target: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, blur_passes: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, fadeout_from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, fadeout_to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-ssao-quality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置屏幕空间环境光遮蔽（SSAO）后期处理效果的质量级别。详情见 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-ssil-quality"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-ssil-quality" names="class_renderingserver_method_environment_set_ssil_quality"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_ssil_quality</strong>(quality: <reference internal="True" refid="enum-renderingserver-environmentssilquality"><inline classes="std std-ref">EnvironmentSSILQuality</inline></reference>, half_size: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, adaptive_target: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, blur_passes: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, fadeout_from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, fadeout_to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-ssil-quality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置屏幕空间间接照明（SSIL）后期处理效果的质量级别。详情见 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-ssr"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-ssr" names="class_renderingserver_method_environment_set_ssr"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_ssr</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, max_steps: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, fade_in: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, fade_out: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, depth_tolerance: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-ssr"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置屏幕空间反射（SSR）后期处理效果所使用的变量。详情见 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-ssr-roughness-quality"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-ssr-roughness-quality" names="class_renderingserver_method_environment_set_ssr_roughness_quality"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_ssr_roughness_quality</strong>(quality: <reference internal="True" refid="enum-renderingserver-environmentssrroughnessquality"><inline classes="std std-ref">EnvironmentSSRRoughnessQuality</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-ssr-roughness-quality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-tonemap"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-tonemap" names="class_renderingserver_method_environment_set_tonemap"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_tonemap</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, tone_mapper: <reference internal="True" refid="enum-renderingserver-environmenttonemapper"><inline classes="std std-ref">EnvironmentToneMapper</inline></reference>, exposure: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, white: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-tonemap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置“色调映射”后期处理效果所使用的变量。详情见 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-volumetric-fog"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-volumetric-fog" names="class_renderingserver_method_environment_set_volumetric_fog"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_volumetric_fog</strong>(env: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, density: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, albedo: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, emission: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, emission_energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, anisotropy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, p_detail_spread: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, gi_inject: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, temporal_reprojection: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, temporal_reprojection_amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, ambient_inject: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, sky_affect: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-volumetric-fog"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置体积雾后期处理效果所使用的变量。详情见 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-volumetric-fog-filter-active"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-volumetric-fog-filter-active" names="class_renderingserver_method_environment_set_volumetric_fog_filter_active"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_volumetric_fog_filter_active</strong>(active: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-volumetric-fog-filter-active"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启用体积雾散射缓冲区的过滤。这会产生更平滑的体积，并且几乎没有欠采样伪影。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-environment-set-volumetric-fog-volume-size"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-environment-set-volumetric-fog-volume-size" names="class_renderingserver_method_environment_set_volumetric_fog_volume_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>environment_set_volumetric_fog_volume_size</strong>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, depth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-environment-set-volumetric-fog-volume-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置体积雾的片段体素缓冲区分辨率。<literal>size</literal> 会被屏幕的纵横比修改，用于设置缓冲区的宽度和高度。<literal>depth</literal> 则用于设置缓冲区的深度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-fog-volume-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-fog-volume-create" names="class_renderingserver_method_fog_volume_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>fog_volume_create</strong>() <reference internal="True" refid="class-renderingserver-method-fog-volume-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建雾体积并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>fog_volume_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_fogvolume#class-fogvolume"><inline classes="std std-ref">FogVolume</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-fog-volume-set-material"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-fog-volume-set-material" names="class_renderingserver_method_fog_volume_set_material"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fog_volume_set_material</strong>(fog_volume: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-fog-volume-set-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该雾体积的 <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>。可以是 <reference internal="True" refuri="class_fogmaterial#class-fogmaterial"><inline classes="std std-ref">FogMaterial</inline></reference>，也可以是自定义的 <reference internal="True" refuri="class_shadermaterial#class-shadermaterial"><inline classes="std std-ref">ShaderMaterial</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-fog-volume-set-shape"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-fog-volume-set-shape" names="class_renderingserver_method_fog_volume_set_shape"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fog_volume_set_shape</strong>(fog_volume: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, shape: <reference internal="True" refid="enum-renderingserver-fogvolumeshape"><inline classes="std std-ref">FogVolumeShape</inline></reference>) <reference internal="True" refid="class-renderingserver-method-fog-volume-set-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将雾体积的形状设置为 <reference internal="True" refid="class-renderingserver-constant-fog-volume-shape-ellipsoid"><inline classes="std std-ref">FOG_VOLUME_SHAPE_ELLIPSOID</inline></reference>、<reference internal="True" refid="class-renderingserver-constant-fog-volume-shape-cone"><inline classes="std std-ref">FOG_VOLUME_SHAPE_CONE</inline></reference>、<reference internal="True" refid="class-renderingserver-constant-fog-volume-shape-cylinder"><inline classes="std std-ref">FOG_VOLUME_SHAPE_CYLINDER</inline></reference>、<reference internal="True" refid="class-renderingserver-constant-fog-volume-shape-box"><inline classes="std std-ref">FOG_VOLUME_SHAPE_BOX</inline></reference> 或 <reference internal="True" refid="class-renderingserver-constant-fog-volume-shape-world"><inline classes="std std-ref">FOG_VOLUME_SHAPE_WORLD</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-fog-volume-set-size"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-fog-volume-set-size" names="class_renderingserver_method_fog_volume_set_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fog_volume_set_size</strong>(fog_volume: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-renderingserver-method-fog-volume-set-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置形状为 <reference internal="True" refid="class-renderingserver-constant-fog-volume-shape-ellipsoid"><inline classes="std std-ref">FOG_VOLUME_SHAPE_ELLIPSOID</inline></reference>、<reference internal="True" refid="class-renderingserver-constant-fog-volume-shape-cone"><inline classes="std std-ref">FOG_VOLUME_SHAPE_CONE</inline></reference>、<reference internal="True" refid="class-renderingserver-constant-fog-volume-shape-cylinder"><inline classes="std std-ref">FOG_VOLUME_SHAPE_CYLINDER</inline></reference> 或 <reference internal="True" refid="class-renderingserver-constant-fog-volume-shape-box"><inline classes="std std-ref">FOG_VOLUME_SHAPE_BOX</inline></reference> 时，雾体积的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-force-draw"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-force-draw" names="class_renderingserver_method_force_draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>force_draw</strong>(swap_buffers: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, frame_step: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0) <reference internal="True" refid="class-renderingserver-method-force-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>强制立即重绘所有视口。必须从主线程调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-force-sync"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-force-sync" names="class_renderingserver_method_force_sync"><abbreviation explanation="无返回值。">void</abbreviation> <strong>force_sync</strong>() <reference internal="True" refid="class-renderingserver-method-force-sync"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>强制在 CPU 和 GPU 之间进行同步，某些情况下是必须的。请只在需要时调用，因为 CPU-GPU 同步对性能有影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-free-rid"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-free-rid" names="class_renderingserver_method_free_rid"><abbreviation explanation="无返回值。">void</abbreviation> <strong>free_rid</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>尝试释放 RenderingServer 中的某个对象。为了避免内存泄漏，应该在使用完对象后调用，因为直接使用 RenderingServer 时不会自动进行内存管理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-get-default-clear-color"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-get-default-clear-color" names="class_renderingserver_method_get_default_clear_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_default_clear_color</strong>() <reference internal="True" refid="class-renderingserver-method-get-default-clear-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回默认清屏颜色，会在没有选择特定的清屏颜色时使用。另见 <reference internal="True" refid="class-renderingserver-method-set-default-clear-color"><inline classes="std std-ref">set_default_clear_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-get-frame-setup-time-cpu"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-get-frame-setup-time-cpu" names="class_renderingserver_method_get_frame_setup_time_cpu"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_frame_setup_time_cpu</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-get-frame-setup-time-cpu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在 CPU 上设置渲染所消耗的时间，单位为毫秒。这个值是所有视口共享的，<emphasis>不需要</emphasis>在查询的视口上启用 <reference internal="True" refid="class-renderingserver-method-viewport-set-measure-render-time"><inline classes="std std-ref">viewport_set_measure_render_time</inline></reference>。另见 <reference internal="True" refid="class-renderingserver-method-viewport-get-measured-render-time-cpu"><inline classes="std std-ref">viewport_get_measured_render_time_cpu</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-get-rendering-device"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-get-rendering-device" names="class_renderingserver_method_get_rendering_device"><reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference> <strong>get_rendering_device</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-get-rendering-device"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回全局的 RenderingDevice。</paragraph>
            <paragraph><strong>注意：</strong>当使用 OpenGL 后端或在无头模式下运行时，这个函数始终返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-get-rendering-info"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-get-rendering-info" names="class_renderingserver_method_get_rendering_info"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_rendering_info</strong>(info: <reference internal="True" refid="enum-renderingserver-renderinginfo"><inline classes="std std-ref">RenderingInfo</inline></reference>) <reference internal="True" refid="class-renderingserver-method-get-rendering-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回关于渲染引擎的统计信息，能够用于性能分析。能够查询的值的列表见 <reference internal="True" refid="enum-renderingserver-renderinginfo"><inline classes="std std-ref">RenderingInfo</inline></reference>。另见 <reference internal="True" refid="class-renderingserver-method-viewport-get-render-info"><inline classes="std std-ref">viewport_get_render_info</inline></reference>，返回的是某个视口的相关信息。</paragraph>
            <paragraph><strong>注意：</strong>部分值目前仅考虑 3D 渲染，例如绘制调用的数量。</paragraph>
            <paragraph><strong>注意：</strong>引擎渲染至少 2 帧后渲染信息才可用。渲染信息不可用时 <reference internal="True" refid="class-renderingserver-method-get-rendering-info"><inline classes="std std-ref">get_rendering_info</inline></reference> 返回 <literal>0</literal>。要在 <literal>_ready()</literal> 中成功输出渲染信息，请使用如下代码：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    for _i in 2:
        await get_tree().process_frame

    print(RenderingServer.get_rendering_info(RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME))</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-get-shader-parameter-list"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-get-shader-parameter-list" names="class_renderingserver_method_get_shader_parameter_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>get_shader_parameter_list</strong>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-get-shader-parameter-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回着色器的参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-get-test-cube"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-get-test-cube" names="class_renderingserver_method_get_test_cube"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_test_cube</strong>() <reference internal="True" refid="class-renderingserver-method-get-test-cube"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回测试立方体的 RID。首次调用 <reference internal="True" refid="class-renderingserver-method-get-test-cube"><inline classes="std std-ref">get_test_cube</inline></reference> 时会创建并返回该网格，然后为后续调用缓存。另见 <reference internal="True" refid="class-renderingserver-method-make-sphere-mesh"><inline classes="std std-ref">make_sphere_mesh</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-get-test-texture"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-get-test-texture" names="class_renderingserver_method_get_test_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_test_texture</strong>() <reference internal="True" refid="class-renderingserver-method-get-test-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回带有测试图案的 256×256 纹理（格式为 <reference internal="True" refuri="class_image#class-image-constant-format-rgb8"><inline classes="std std-ref">Image.FORMAT_RGB8</inline></reference>）。首次调用 <reference internal="True" refid="class-renderingserver-method-get-test-texture"><inline classes="std std-ref">get_test_texture</inline></reference> 时会创建并返回该纹理，然后为后续调用缓存。另见 <reference internal="True" refid="class-renderingserver-method-get-white-texture"><inline classes="std std-ref">get_white_texture</inline></reference>。</paragraph>
            <paragraph>获取测试纹理并将其应用至 <reference internal="True" refuri="class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2D</inline></reference> 节点的示例：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var texture_rid = RenderingServer.get_test_texture()
var texture = ImageTexture.create_from_image(RenderingServer.texture_2d_get(texture_rid))
$Sprite2D.texture = texture</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-get-video-adapter-api-version"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-get-video-adapter-api-version" names="class_renderingserver_method_get_video_adapter_api_version"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_video_adapter_api_version</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-get-video-adapter-api-version"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回<emphasis>当前使用的</emphasis>图形视频适配器的版本（例如，Vulkan 为“1.2.189”，OpenGL 为“3.3.0 NVIDIA 510.60.02”）。该版本可能与硬件支持的实际最新版本不同，因为 Godot 可能并不总是要求最新版本。另见 <reference internal="True" refuri="class_os#class-os-method-get-video-adapter-driver-info"><inline classes="std std-ref">OS.get_video_adapter_driver_info</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>当运行无头或服务器可执行文件时，该函数返回一个空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-get-video-adapter-name"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-get-video-adapter-name" names="class_renderingserver_method_get_video_adapter_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_video_adapter_name</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-get-video-adapter-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回视频适配器的名称（例如“GeForce GTX 1080/PCIe/SSE2”）。</paragraph>
            <paragraph><strong>注意：</strong>运行无头或服务器二进制文件时，该函数返回空字符串。</paragraph>
            <paragraph><strong>注意：</strong>在 web 平台上，某些浏览器（例如 Firefox）可能会报告不同的固定 GPU 名称，例如“GeForce GTX 980”（无论用户的实际 GPU 型号如何）。这样做是为了使指纹识别更加困难。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-get-video-adapter-type"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-get-video-adapter-type" names="class_renderingserver_method_get_video_adapter_type"><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-devicetype"><inline classes="std std-ref">DeviceType</inline></reference> <strong>get_video_adapter_type</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-get-video-adapter-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回视频适配器的类型。由于给定代的专用显卡<emphasis>通常</emphasis>明显快于同一代制造的集成显卡，因此设备类型可用作自动图形设置调整的基础。然而，这并不总是正确的，因此请确保为用户提供一种手动覆盖图形设置的方法。</paragraph>
            <paragraph><strong>注意：</strong>当使用 OpenGL 后端或在无头模式下运行时，该函数始终返回 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice-constant-device-type-other"><inline classes="std std-ref">RenderingDevice.DEVICE_TYPE_OTHER</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-get-video-adapter-vendor"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-get-video-adapter-vendor" names="class_renderingserver_method_get_video_adapter_vendor"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_video_adapter_vendor</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-get-video-adapter-vendor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回视频适配器的供应商（例如 "NVIDIA Corporation"）。</paragraph>
            <paragraph><strong>注意：</strong>当运行精简或服务器可执行文件时，该函数返回一个空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-get-white-texture"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-get-white-texture" names="class_renderingserver_method_get_white_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_white_texture</strong>() <reference internal="True" refid="class-renderingserver-method-get-white-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 4×4 的白色纹理（格式为 <reference internal="True" refuri="class_image#class-image-constant-format-rgb8"><inline classes="std std-ref">Image.FORMAT_RGB8</inline></reference>）。首次调用 <reference internal="True" refid="class-renderingserver-method-get-white-texture"><inline classes="std std-ref">get_white_texture</inline></reference> 时会创建并返回该纹理，然后为后续调用缓存。另见 <reference internal="True" refid="class-renderingserver-method-get-test-texture"><inline classes="std std-ref">get_test_texture</inline></reference>。</paragraph>
            <paragraph>获取测试纹理并将其应用至 <reference internal="True" refuri="class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2D</inline></reference> 节点的示例：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var texture_rid = RenderingServer.get_white_texture()
var texture = ImageTexture.create_from_image(RenderingServer.texture_2d_get(texture_rid))
$Sprite2D.texture = texture</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-gi-set-use-half-resolution"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-gi-set-use-half-resolution" names="class_renderingserver_method_gi_set_use_half_resolution"><abbreviation explanation="无返回值。">void</abbreviation> <strong>gi_set_use_half_resolution</strong>(half_resolution: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-gi-set-use-half-resolution"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>half_resolution</literal> 为 <literal>true</literal>，则每个轴上都会使用一半的分辨率渲染 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 和 SDFGI（<reference internal="True" refuri="class_environment#class-environment-property-sdfgi-enabled"><inline classes="std std-ref">Environment.sdfgi_enabled</inline></reference>）缓冲区（例如视口大小为 1920×1080 时使用 960×540）。启用 VoxelGI 或 SDFGI 时，这样做能够显著提升性能，但代价是多边形边缘可能产生显示问题。视口分辨率越高，越不容易注意到质量的损失。<reference internal="True" refuri="class_lightmapgi#class-lightmapgi"><inline classes="std std-ref">LightmapGI</inline></reference> 的渲染不受这个设置的影响。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-global-illumination-gi-use-half-resolution"><inline classes="std std-ref">ProjectSettings.rendering/global_illumination/gi/use_half_resolution</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-global-shader-parameter-add"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-global-shader-parameter-add" names="class_renderingserver_method_global_shader_parameter_add"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_shader_parameter_add</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, type: <reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference>, default_value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-renderingserver-method-global-shader-parameter-add"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建全局着色器 uniform。</paragraph>
            <paragraph><strong>注意：</strong>全局着色器参数名称是大小写敏感的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-global-shader-parameter-get"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-global-shader-parameter-get" names="class_renderingserver_method_global_shader_parameter_get"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>global_shader_parameter_get</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-global-shader-parameter-get"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回名称为 <literal>name</literal> 的全局着色器 uniform 的值。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-renderingserver-method-global-shader-parameter-get"><inline classes="std std-ref">global_shader_parameter_get</inline></reference> 存在较大的性能损耗，因为渲染线程需要与调用线程同步，这个过程比较慢。为了避免卡顿，请勿在游戏过程中使用这个方法。如果你需要在设置后在脚本中读取，请考虑创建一个自动加载，在设置全局参数的同时保存一份你需要查询的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-global-shader-parameter-get-list"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-global-shader-parameter-get-list" names="class_renderingserver_method_global_shader_parameter_get_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>] <strong>global_shader_parameter_get_list</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-global-shader-parameter-get-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回全局着色器 uniform 名称的列表。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-renderingserver-method-global-shader-parameter-get"><inline classes="std std-ref">global_shader_parameter_get</inline></reference> 存在较大的性能损耗，因为渲染线程需要与调用线程同步，这个过程比较慢。为了避免卡顿，请勿在游戏过程中使用这个方法。如果你需要在设置后在脚本中读取，请考虑创建一个自动加载，在设置全局参数的同时保存一份你需要查询的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-global-shader-parameter-get-type"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-global-shader-parameter-get-type" names="class_renderingserver_method_global_shader_parameter_get_type"><reference internal="True" refid="enum-renderingserver-globalshaderparametertype"><inline classes="std std-ref">GlobalShaderParameterType</inline></reference> <strong>global_shader_parameter_get_type</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-global-shader-parameter-get-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与名称为 <literal>name</literal> 的全局着色器 uniform 相关联的类型。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-renderingserver-method-global-shader-parameter-get"><inline classes="std std-ref">global_shader_parameter_get</inline></reference> 存在较大的性能损耗，因为渲染线程需要与调用线程同步，这个过程比较慢。为了避免卡顿，请勿在游戏过程中使用这个方法。如果你需要在设置后在脚本中读取，请考虑创建一个自动加载，在设置全局参数的同时保存一份你需要查询的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-global-shader-parameter-remove"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-global-shader-parameter-remove" names="class_renderingserver_method_global_shader_parameter_remove"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_shader_parameter_remove</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-renderingserver-method-global-shader-parameter-remove"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除名称为 <literal>name</literal> 的全局着色器 Uniform。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-global-shader-parameter-set"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-global-shader-parameter-set" names="class_renderingserver_method_global_shader_parameter_set"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_shader_parameter_set</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-renderingserver-method-global-shader-parameter-set"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将名称为 <literal>name</literal> 的全局着色器 Uniform 设置为 <literal>value</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-global-shader-parameter-set-override"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-global-shader-parameter-set-override" names="class_renderingserver_method_global_shader_parameter_set_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_shader_parameter_set_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-renderingserver-method-global-shader-parameter-set-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <literal>value</literal> 覆盖名称为 <literal>name</literal> 的全局着色器 Uniform。等价于 <reference internal="True" refuri="class_shaderglobalsoverride#class-shaderglobalsoverride"><inline classes="std std-ref">ShaderGlobalsOverride</inline></reference> 节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-has-changed"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-has-changed" names="class_renderingserver_method_has_changed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_changed</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-has-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果对 RenderingServer 的数据进行了更改，则返回 <literal>true</literal>。如果发生这种情况，通常会调用 <reference internal="True" refid="class-renderingserver-method-force-draw"><inline classes="std std-ref">force_draw</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-has-feature"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-has-feature" names="class_renderingserver_method_has_feature"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_feature</strong>(feature: <reference internal="True" refid="enum-renderingserver-features"><inline classes="std std-ref">Features</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-has-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> This method has not been used since Godot 3.0.</paragraph>
            <paragraph>该方法不执行任何操作，并且始终返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-has-os-feature"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-has-os-feature" names="class_renderingserver_method_has_os_feature"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_os_feature</strong>(feature: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-has-os-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果操作系统支持某个特性 <literal>feature</literal>，则返回 <literal>true</literal>。特性可以是 <literal>s3tc</literal>、<literal>etc</literal>、<literal>etc2</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-attach-object-instance-id"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-attach-object-instance-id" names="class_renderingserver_method_instance_attach_object_instance_id"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_attach_object_instance_id</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-attach-object-instance-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将唯一的对象 ID 附加到实例上。必须将对象 ID 附加到实例上，以便通过 <reference internal="True" refid="class-renderingserver-method-instances-cull-aabb"><inline classes="std std-ref">instances_cull_aabb</inline></reference>、<reference internal="True" refid="class-renderingserver-method-instances-cull-convex"><inline classes="std std-ref">instances_cull_convex</inline></reference> 和 <reference internal="True" refid="class-renderingserver-method-instances-cull-ray"><inline classes="std std-ref">instances_cull_ray</inline></reference> 进行正确的筛除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-attach-skeleton"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-attach-skeleton" names="class_renderingserver_method_instance_attach_skeleton"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_attach_skeleton</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-attach-skeleton"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将骨架附加到实例。并从实例中移除之前骨架。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-create" names="class_renderingserver_method_instance_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>instance_create</strong>() <reference internal="True" refid="class-renderingserver-method-instance-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建可视实例并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>instance_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph>实例可以将 3D 对象放置到场景中。粒子、网格、反射探针、贴花等对象都需要使用 <reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">instance_set_base</inline></reference> 与实例关联，才能显示在场景中。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-create2"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-create2" names="class_renderingserver_method_instance_create2"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>instance_create2</strong>(base: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-create2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建可视实例并将其添加到 RenderingServer、设置基础和场景。可以通过返回的 RID 进行访问。这个 RID 会在大多数 <literal>instance_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。这是使用 <reference internal="True" refid="class-renderingserver-method-instance-create"><inline classes="std std-ref">instance_create</inline></reference> 并手动设置基础和场景的快捷方式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-geometry-get-shader-parameter"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-geometry-get-shader-parameter" names="class_renderingserver_method_instance_geometry_get_shader_parameter"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>instance_geometry_get_shader_parameter</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parameter: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-instance-geometry-get-shader-parameter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定 3D 几何体实例的单实例着色器 uniform 的值。等价于 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-method-get-instance-shader-parameter"><inline classes="std std-ref">GeometryInstance3D.get_instance_shader_parameter</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>单实例着色器参数的名称是大小写敏感的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-geometry-get-shader-parameter-default-value"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-geometry-get-shader-parameter-default-value" names="class_renderingserver_method_instance_geometry_get_shader_parameter_default_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>instance_geometry_get_shader_parameter_default_value</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parameter: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-instance-geometry-get-shader-parameter-default-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定 3D 几何体实例的单实例着色器 uniform 的默认值。等价于 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-method-get-instance-shader-parameter"><inline classes="std std-ref">GeometryInstance3D.get_instance_shader_parameter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-geometry-get-shader-parameter-list"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-geometry-get-shader-parameter-list" names="class_renderingserver_method_instance_geometry_get_shader_parameter_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>instance_geometry_get_shader_parameter_list</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-instance-geometry-get-shader-parameter-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定 3D 几何体实例的单实例着色器名称字典。返回的字典使用 PropertyInfo 格式，包含 <literal>name</literal>、<literal>class_name</literal>、<literal>type</literal>、<literal>hint</literal>、<literal>hint_string</literal> 以及 <literal>usage</literal> 等键。等价于 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-method-get-instance-shader-parameter"><inline classes="std std-ref">GeometryInstance3D.get_instance_shader_parameter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-geometry-set-cast-shadows-setting"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-geometry-set-cast-shadows-setting" names="class_renderingserver_method_instance_geometry_set_cast_shadows_setting"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_geometry_set_cast_shadows_setting</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, shadow_casting_setting: <reference internal="True" refid="enum-renderingserver-shadowcastingsetting"><inline classes="std std-ref">ShadowCastingSetting</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-geometry-set-cast-shadows-setting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将阴影的投射设置设置为 <reference internal="True" refid="enum-renderingserver-shadowcastingsetting"><inline classes="std std-ref">ShadowCastingSetting</inline></reference> 之一。相当于 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-cast-shadow"><inline classes="std std-ref">GeometryInstance3D.cast_shadow</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-geometry-set-flag"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-geometry-set-flag" names="class_renderingserver_method_instance_geometry_set_flag"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_geometry_set_flag</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, flag: <reference internal="True" refid="enum-renderingserver-instanceflags"><inline classes="std std-ref">InstanceFlags</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-geometry-set-flag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定的 <reference internal="True" refid="enum-renderingserver-instanceflags"><inline classes="std std-ref">InstanceFlags</inline></reference> 标志。更多细节请参阅 <reference internal="True" refid="enum-renderingserver-instanceflags"><inline classes="std std-ref">InstanceFlags</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-geometry-set-lightmap"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-geometry-set-lightmap" names="class_renderingserver_method_instance_geometry_set_lightmap"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_geometry_set_lightmap</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, lightmap_uv_scale: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, lightmap_slice: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-geometry-set-lightmap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为指定的 3D 几何体实例设置要使用的光照贴图 GI 实例。必须同时指定该实例的光照贴图 UV 缩放（等价于 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-gi-lightmap-scale"><inline classes="std std-ref">GeometryInstance3D.gi_lightmap_scale</inline></reference>）和光照贴图图集切片。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-geometry-set-lod-bias"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-geometry-set-lod-bias" names="class_renderingserver_method_instance_geometry_set_lod_bias"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_geometry_set_lod_bias</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, lod_bias: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-geometry-set-lod-bias"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为指定的 3D 几何体实例设置要使用的细节级别偏置。值越高，距离较远时的细节也会越高。等价于 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-lod-bias"><inline classes="std std-ref">GeometryInstance3D.lod_bias</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-geometry-set-material-overlay"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-geometry-set-material-overlay" names="class_renderingserver_method_instance_geometry_set_material_overlay"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_geometry_set_material_overlay</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-geometry-set-material-overlay"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置一个材质，该材质将在与该实例关联的网格的活动材质之上，为所有表面渲染。相当于<reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-material-overlay"><inline classes="std std-ref">GeometryInstance3D.material_overlay</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-geometry-set-material-override"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-geometry-set-material-override" names="class_renderingserver_method_instance_geometry_set_material_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_geometry_set_material_override</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-geometry-set-material-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置一种材质，该材质将覆盖与此实例关联的网格上的所有表面的材质。相当于 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-material-override"><inline classes="std std-ref">GeometryInstance3D.material_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-geometry-set-shader-parameter"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-geometry-set-shader-parameter" names="class_renderingserver_method_instance_geometry_set_shader_parameter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_geometry_set_shader_parameter</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parameter: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-geometry-set-shader-parameter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定的 3D 几何体实例的单实例着色器 uniform。等价于 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-method-set-instance-shader-parameter"><inline classes="std std-ref">GeometryInstance3D.set_instance_shader_parameter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-geometry-set-transparency"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-geometry-set-transparency" names="class_renderingserver_method_instance_geometry_set_transparency"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_geometry_set_transparency</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transparency: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-geometry-set-transparency"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定几何体实例的透明度。相当于 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-transparency"><inline classes="std std-ref">GeometryInstance3D.transparency</inline></reference>。</paragraph>
            <paragraph>透明度为 <literal>0.0</literal> 时完全不透明，为 <literal>1.0</literal> 时则完全透明。如果值比 <literal>0.0</literal> 大，则会强制让几何体的材质经过透明管线，渲染起来相对较慢，可能由于错误的透明排序而产生渲染问题。不过，与使用透明材质不同，将 <literal>transparency</literal> 设置为比 <literal>0.0</literal> 大的值<emphasis>不会</emphasis>禁用阴影的渲染。</paragraph>
            <paragraph>在空间着色器中，内置 <literal>ALPHA</literal> 的默认值为 <literal>1.0 - transparency</literal>。</paragraph>
            <paragraph><strong>注意：</strong><literal>transparency</literal> 会被钳制在 <literal>0.0</literal> 和 <literal>1.0</literal> 的范围内，所以这个属性无法让透明材质比原来更不透明。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-geometry-set-visibility-range"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-geometry-set-visibility-range" names="class_renderingserver_method_instance_geometry_set_visibility_range"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_geometry_set_visibility_range</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, min_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, fade_mode: <reference internal="True" refid="enum-renderingserver-visibilityrangefademode"><inline classes="std std-ref">VisibilityRangeFadeMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-geometry-set-visibility-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定几何实例的可见性范围值。相当于 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-visibility-range-begin"><inline classes="std std-ref">GeometryInstance3D.visibility_range_begin</inline></reference> 和相关属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-set-base"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-set-base" names="class_renderingserver_method_instance_set_base"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_set_base</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, base: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置实例的基础。基础可以是在 RenderingServer 中创建的任何可以显示的 3D 对象。例如，任何光源类型、网格、多重网格、粒子系统、反射探针、贴花、光照贴图、体素 GI 和可见性通知器都可以设置为实例的基础，以便在场景中显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-set-blend-shape-weight"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-set-blend-shape-weight" names="class_renderingserver_method_instance_set_blend_shape_weight"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_set_blend_shape_weight</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, shape: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-set-blend-shape-weight"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置与该实例相关的特定混合形状的权重。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-set-custom-aabb"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-set-custom-aabb" names="class_renderingserver_method_instance_set_custom_aabb"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_set_custom_aabb</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-set-custom-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置将对象从视锥中剔除时使用的自定义 AABB。相当于设置 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-custom-aabb"><inline classes="std std-ref">GeometryInstance3D.custom_aabb</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-set-extra-visibility-margin"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-set-extra-visibility-margin" names="class_renderingserver_method_instance_set_extra_visibility_margin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_set_extra_visibility_margin</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-set-extra-visibility-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置将对象从视锥中剔除时为 AABB 增加的边距大小。这样就可以避免剔除落在视锥外的对象。相当于 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-extra-cull-margin"><inline classes="std std-ref">GeometryInstance3D.extra_cull_margin</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-set-ignore-culling"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-set-ignore-culling" names="class_renderingserver_method_instance_set_ignore_culling"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_set_ignore_culling</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-set-ignore-culling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则会忽略指定 3D 几何体实例的视锥剔除和遮挡剔除。和 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-ignore-occlusion-culling"><inline classes="std std-ref">GeometryInstance3D.ignore_occlusion_culling</inline></reference> 不同，后者只会忽略遮挡剔除，仍会保留视锥剔除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-set-layer-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-set-layer-mask" names="class_renderingserver_method_instance_set_layer_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_set_layer_mask</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-set-layer-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置这个实例要绘制到的渲染层。相当于 <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d-property-layers"><inline classes="std std-ref">VisualInstance3D.layers</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-set-pivot-data"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-set-pivot-data" names="class_renderingserver_method_instance_set_pivot_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_set_pivot_data</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, sorting_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, use_aabb_center: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-set-pivot-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置排序偏移量，并在使用包围框还是实例原点进行深度排序之间进行切换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-set-scenario"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-set-scenario" names="class_renderingserver_method_instance_set_scenario"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_set_scenario</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-set-scenario"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置实例所在的场景。场景是对象将在其中显示的 3D 世界。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-set-surface-override-material"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-set-surface-override-material" names="class_renderingserver_method_instance_set_surface_override_material"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_set_surface_override_material</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-set-surface-override-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定表面的覆盖材质。相当于 <reference internal="True" refuri="class_meshinstance3d#class-meshinstance3d-method-set-surface-override-material"><inline classes="std std-ref">MeshInstance3D.set_surface_override_material</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-set-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-set-transform" names="class_renderingserver_method_instance_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_set_transform</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该实例的世界空间变换。相当于 <reference internal="True" refuri="class_node3d#class-node3d-property-global-transform"><inline classes="std std-ref">Node3D.global_transform</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-set-visibility-parent"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-set-visibility-parent" names="class_renderingserver_method_instance_set_visibility_parent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_set_visibility_parent</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parent: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-set-visibility-parent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定实例的可见性父级。相当于 <reference internal="True" refuri="class_node3d#class-node3d-property-visibility-parent"><inline classes="std std-ref">Node3D.visibility_parent</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instance-set-visible"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instance-set-visible" names="class_renderingserver_method_instance_set_visible"><abbreviation explanation="无返回值。">void</abbreviation> <strong>instance_set_visible</strong>(instance: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, visible: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-instance-set-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置是否绘制实例。相当于 <reference internal="True" refuri="class_node3d#class-node3d-property-visible"><inline classes="std std-ref">Node3D.visible</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instances-cull-aabb"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instances-cull-aabb" names="class_renderingserver_method_instances_cull_aabb"><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> <strong>instances_cull_aabb</strong>(aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>, scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID()) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-instances-cull-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与提供的 AABB 相交的对象 ID 的数组。仅考虑继承自 <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference> 的 3D 节点，例如 <reference internal="True" refuri="class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> 或 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference>。可使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-instance-from-id"><inline classes="std std-ref">@GlobalScope.instance_from_id</inline></reference> 来获取实际节点。必须提供一个场景 RID，且它在要查询的 <reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference> 中可用。这会强制更新所有已被队列以等待更新的资源。</paragraph>
            <paragraph><strong>警告：</strong>该函数主要供编辑器使用。对于游戏中的用例，最好是物理碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instances-cull-convex"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instances-cull-convex" names="class_renderingserver_method_instances_cull_convex"><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> <strong>instances_cull_convex</strong>(convex: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>], scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID()) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-instances-cull-convex"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与提供的凸形相交的对象 ID 的数组。仅考虑继承自 <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference> 的 3D 节点，例如 <reference internal="True" refuri="class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> 或 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference>。可使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-instance-from-id"><inline classes="std std-ref">@GlobalScope.instance_from_id</inline></reference> 以获取实际节点。必须提供场景 RID，且它在要查询的 <reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference> 中可用。这会强制更新所有已被队列以等待更新的资源。</paragraph>
            <paragraph><strong>警告：</strong>该函数主要供编辑器使用。对于游戏中的用例，最好是物理碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-instances-cull-ray"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-instances-cull-ray" names="class_renderingserver_method_instances_cull_ray"><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> <strong>instances_cull_ray</strong>(from: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, to: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> = RID()) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-instances-cull-ray"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与提供的 3D 射线相交的对象 ID 的数组。仅考虑继承自 <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference> 的 3D 节点，例如 <reference internal="True" refuri="class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> 或 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference>。可使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-instance-from-id"><inline classes="std std-ref">@GlobalScope.instance_from_id</inline></reference> 以获取实际节点。必须提供场景 RID，且它在你要查询的 <reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference> 中可用。这会强制更新所有已被队列以等待更新的资源。</paragraph>
            <paragraph><strong>警告：</strong>该函数主要供编辑器使用。对于游戏中的用例，最好是物理碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-is-on-render-thread"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-is-on-render-thread" names="class_renderingserver_method_is_on_render_thread"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_on_render_thread</strong>() <reference internal="True" refid="class-renderingserver-method-is-on-render-thread"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果我们的代码当前正在渲染线程上执行，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-directional-set-blend-splits"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-directional-set-blend-splits" names="class_renderingserver_method_light_directional_set_blend_splits"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_directional_set_blend_splits</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-directional-set-blend-splits"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则该平行光将在阴影贴图分割之间混合，从而在它们之间产生更平滑的过渡。相当于 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d-property-directional-shadow-blend-splits"><inline classes="std std-ref">DirectionalLight3D.directional_shadow_blend_splits</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-directional-set-shadow-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-directional-set-shadow-mode" names="class_renderingserver_method_light_directional_set_shadow_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_directional_set_shadow_mode</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-lightdirectionalshadowmode"><inline classes="std std-ref">LightDirectionalShadowMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-directional-set-shadow-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该平行光的阴影模式。相当于 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d-property-directional-shadow-mode"><inline classes="std std-ref">DirectionalLight3D.directional_shadow_mode</inline></reference>。有关选项，请参阅 <reference internal="True" refid="enum-renderingserver-lightdirectionalshadowmode"><inline classes="std std-ref">LightDirectionalShadowMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-directional-set-sky-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-directional-set-sky-mode" names="class_renderingserver_method_light_directional_set_sky_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_directional_set_sky_mode</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-lightdirectionalskymode"><inline classes="std std-ref">LightDirectionalSkyMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-directional-set-sky-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则该灯光将不会被用于除天空着色器之外的任何内容。将其用于影响天空着色器的灯光，可能希望隐藏这些灯光以免影响场景的其余部分。例如，当天空着色器中的太阳落在地平线以下时，可能希望启用该功能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-omni-set-shadow-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-omni-set-shadow-mode" names="class_renderingserver_method_light_omni_set_shadow_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_omni_set_shadow_mode</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-lightomnishadowmode"><inline classes="std std-ref">LightOmniShadowMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-omni-set-shadow-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置是使用双抛物面还是立方体贴图作为阴影贴图。双抛物面速度更快，但可能会出现伪影。相当于 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d-property-omni-shadow-mode"><inline classes="std std-ref">OmniLight3D.omni_shadow_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-projectors-set-filter"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-projectors-set-filter" names="class_renderingserver_method_light_projectors_set_filter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_projectors_set_filter</strong>(filter: <reference internal="True" refid="enum-renderingserver-lightprojectorfilter"><inline classes="std std-ref">LightProjectorFilter</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-projectors-set-filter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置渲染光线投射器时使用的纹理过滤模式。这个参数是全局的，不能单独针对某个灯光进行设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-set-bake-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-set-bake-mode" names="class_renderingserver_method_light_set_bake_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_set_bake_mode</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bake_mode: <reference internal="True" refid="enum-renderingserver-lightbakemode"><inline classes="std std-ref">LightBakeMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-set-bake-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定 3D 灯光所使用的烘焙模式。相当于 <reference internal="True" refuri="class_light3d#class-light3d-property-light-bake-mode"><inline classes="std std-ref">Light3D.light_bake_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-set-color"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-set-color" names="class_renderingserver_method_light_set_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_set_color</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-set-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置灯光的颜色。相当于 <reference internal="True" refuri="class_light3d#class-light3d-property-light-color"><inline classes="std std-ref">Light3D.light_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-set-cull-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-set-cull-mask" names="class_renderingserver_method_light_set_cull_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_set_cull_mask</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-set-cull-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该 3D 灯光的剔除掩码。灯光仅影响选定层中的对象。相当于 <reference internal="True" refuri="class_light3d#class-light3d-property-light-cull-mask"><inline classes="std std-ref">Light3D.light_cull_mask</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-set-distance-fade"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-set-distance-fade" names="class_renderingserver_method_light_set_distance_fade"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_set_distance_fade</strong>(decal: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, begin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, shadow: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-set-distance-fade"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该 3D 灯光的淡入淡出距离。这充当了一种多细节层次（LOD）的形式，可用于提高性能。相当于 <reference internal="True" refuri="class_light3d#class-light3d-property-distance-fade-enabled"><inline classes="std std-ref">Light3D.distance_fade_enabled</inline></reference>、<reference internal="True" refuri="class_light3d#class-light3d-property-distance-fade-begin"><inline classes="std std-ref">Light3D.distance_fade_begin</inline></reference>、<reference internal="True" refuri="class_light3d#class-light3d-property-distance-fade-shadow"><inline classes="std std-ref">Light3D.distance_fade_shadow</inline></reference> 和 <reference internal="True" refuri="class_light3d#class-light3d-property-distance-fade-length"><inline classes="std std-ref">Light3D.distance_fade_length</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-set-max-sdfgi-cascade"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-set-max-sdfgi-cascade" names="class_renderingserver_method_light_set_max_sdfgi_cascade"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_set_max_sdfgi_cascade</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, cascade: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-set-max-sdfgi-cascade"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置渲染 3D 灯光间接光照时的 SDFGI 最大级联数。较高的值能够让远离相机的灯光在 SDFGI 中渲染。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-set-negative"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-set-negative" names="class_renderingserver_method_light_set_negative"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_set_negative</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-set-negative"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则该 3D 灯光会扣除光照而不是增加。等价于 <reference internal="True" refuri="class_light3d#class-light3d-property-light-negative"><inline classes="std std-ref">Light3D.light_negative</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-set-param"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-set-param" names="class_renderingserver_method_light_set_param"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_set_param</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, param: <reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-set-param"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定的 3D 灯光参数。选项见 <reference internal="True" refid="enum-renderingserver-lightparam"><inline classes="std std-ref">LightParam</inline></reference>。等价于 <reference internal="True" refuri="class_light3d#class-light3d-method-set-param"><inline classes="std std-ref">Light3D.set_param</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-set-projector"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-set-projector" names="class_renderingserver_method_light_set_projector"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_set_projector</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-set-projector"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定 3D 灯光使用的投射器纹理。等价于 <reference internal="True" refuri="class_light3d#class-light3d-property-light-projector"><inline classes="std std-ref">Light3D.light_projector</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-set-reverse-cull-face-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-set-reverse-cull-face-mode" names="class_renderingserver_method_light_set_reverse_cull_face_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_set_reverse_cull_face_mode</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-set-reverse-cull-face-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则反转网格的背面剔除。当有一个背后有灯光的平面网格时，这会很有用。如果需要在网格的两侧投射阴影，请使用 <reference internal="True" refid="class-renderingserver-method-instance-geometry-set-cast-shadows-setting"><inline classes="std std-ref">instance_geometry_set_cast_shadows_setting</inline></reference>，将网格设置为使用双面阴影。相当于 <reference internal="True" refuri="class_light3d#class-light3d-property-shadow-reverse-cull-face"><inline classes="std std-ref">Light3D.shadow_reverse_cull_face</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-light-set-shadow"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-light-set-shadow" names="class_renderingserver_method_light_set_shadow"><abbreviation explanation="无返回值。">void</abbreviation> <strong>light_set_shadow</strong>(light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-light-set-shadow"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则灯光会投射阴影。相当于 <reference internal="True" refuri="class_light3d#class-light3d-property-shadow-enabled"><inline classes="std std-ref">Light3D.shadow_enabled</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-lightmap-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-lightmap-create" names="class_renderingserver_method_lightmap_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>lightmap_create</strong>() <reference internal="True" refid="class-renderingserver-method-lightmap-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建全局光照的光照贴图并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>lightmap_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>与其等价的资源为 <reference internal="True" refuri="class_lightmapgi#class-lightmapgi"><inline classes="std std-ref">LightmapGI</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-lightmap-get-probe-capture-bsp-tree"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-lightmap-get-probe-capture-bsp-tree" names="class_renderingserver_method_lightmap_get_probe_capture_bsp_tree"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>lightmap_get_probe_capture_bsp_tree</strong>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-lightmap-get-probe-capture-bsp-tree"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-lightmap-get-probe-capture-points"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-lightmap-get-probe-capture-points" names="class_renderingserver_method_lightmap_get_probe_capture_points"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>lightmap_get_probe_capture_points</strong>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-lightmap-get-probe-capture-points"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-lightmap-get-probe-capture-sh"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-lightmap-get-probe-capture-sh" names="class_renderingserver_method_lightmap_get_probe_capture_sh"><reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>lightmap_get_probe_capture_sh</strong>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-lightmap-get-probe-capture-sh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-lightmap-get-probe-capture-tetrahedra"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-lightmap-get-probe-capture-tetrahedra" names="class_renderingserver_method_lightmap_get_probe_capture_tetrahedra"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>lightmap_get_probe_capture_tetrahedra</strong>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-lightmap-get-probe-capture-tetrahedra"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-lightmap-set-baked-exposure-normalization"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-lightmap-set-baked-exposure-normalization" names="class_renderingserver_method_lightmap_set_baked_exposure_normalization"><abbreviation explanation="无返回值。">void</abbreviation> <strong>lightmap_set_baked_exposure_normalization</strong>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, baked_exposure: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-lightmap-set-baked-exposure-normalization"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于通知渲染器在烘焙光照贴图时使用的曝光归一化值。该值将在运行时被使用和被调制，以确保即使场景范围的曝光归一化值在运行时发生变化，光照贴图也能保持一致的曝光水平。有关详细信息，请参阅 <reference internal="True" refid="class-renderingserver-method-camera-attributes-set-exposure"><inline classes="std std-ref">camera_attributes_set_exposure</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-lightmap-set-probe-bounds"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-lightmap-set-probe-bounds" names="class_renderingserver_method_lightmap_set_probe_bounds"><abbreviation explanation="无返回值。">void</abbreviation> <strong>lightmap_set_probe_bounds</strong>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bounds: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>) <reference internal="True" refid="class-renderingserver-method-lightmap-set-probe-bounds"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-lightmap-set-probe-capture-data"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-lightmap-set-probe-capture-data" names="class_renderingserver_method_lightmap_set_probe_capture_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>lightmap_set_probe_capture_data</strong>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, points: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>, point_sh: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, tetrahedra: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>, bsp_tree: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <reference internal="True" refid="class-renderingserver-method-lightmap-set-probe-capture-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-lightmap-set-probe-capture-update-speed"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-lightmap-set-probe-capture-update-speed" names="class_renderingserver_method_lightmap_set_probe_capture_update_speed"><abbreviation explanation="无返回值。">void</abbreviation> <strong>lightmap_set_probe_capture_update_speed</strong>(speed: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-lightmap-set-probe-capture-update-speed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-lightmap-set-probe-interior"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-lightmap-set-probe-interior" names="class_renderingserver_method_lightmap_set_probe_interior"><abbreviation explanation="无返回值。">void</abbreviation> <strong>lightmap_set_probe_interior</strong>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, interior: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-lightmap-set-probe-interior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-lightmap-set-textures"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-lightmap-set-textures" names="class_renderingserver_method_lightmap_set_textures"><abbreviation explanation="无返回值。">void</abbreviation> <strong>lightmap_set_textures</strong>(lightmap: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, light: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, uses_sh: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-lightmap-set-textures"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定光照贴图 <literal>lightmap</literal> GI 实例的纹理设置为 <literal>light</literal> RID 所指向的纹理数组。如果烘焙光照贴图纹理时的 <reference internal="True" refuri="class_lightmapgi#class-lightmapgi-property-directional"><inline classes="std std-ref">LightmapGI.directional</inline></reference> 为 <literal>true</literal>，则 <literal>uses_sh</literal> 也必须为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-make-sphere-mesh"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-make-sphere-mesh" names="class_renderingserver_method_make_sphere_mesh"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>make_sphere_mesh</strong>(latitudes: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, longitudes: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, radius: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-make-sphere-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回球体网格，具有给定数量的水平细分、垂直细分、半径。另见 <reference internal="True" refid="class-renderingserver-method-get-test-cube"><inline classes="std std-ref">get_test_cube</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-material-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-material-create" names="class_renderingserver_method_material_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>material_create</strong>() <reference internal="True" refid="class-renderingserver-method-material-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建空材质并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>material_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>与其等价的资源为 <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-material-get-param"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-material-get-param" names="class_renderingserver_method_material_get_param"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>material_get_param</strong>(material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parameter: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-material-get-param"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回特定材质的参数值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-material-set-next-pass"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-material-set-next-pass" names="class_renderingserver_method_material_set_next_pass"><abbreviation explanation="无返回值。">void</abbreviation> <strong>material_set_next_pass</strong>(material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, next_material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-material-set-next-pass"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置对象的下一个材质。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-material-set-param"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-material-set-param" names="class_renderingserver_method_material_set_param"><abbreviation explanation="无返回值。">void</abbreviation> <strong>material_set_param</strong>(material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parameter: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-renderingserver-method-material-set-param"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置材质的参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-material-set-render-priority"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-material-set-render-priority" names="class_renderingserver_method_material_set_render_priority"><abbreviation explanation="无返回值。">void</abbreviation> <strong>material_set_render_priority</strong>(material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, priority: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-material-set-render-priority"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置材质的渲染优先级。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-material-set-shader"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-material-set-shader" names="class_renderingserver_method_material_set_shader"><abbreviation explanation="无返回值。">void</abbreviation> <strong>material_set_shader</strong>(shader_material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-material-set-shader"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置着色器材质的着色器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-add-surface"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-add-surface" names="class_renderingserver_method_mesh_add_surface"><abbreviation explanation="无返回值。">void</abbreviation> <strong>mesh_add_surface</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <reference internal="True" refid="class-renderingserver-method-mesh-add-surface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-add-surface-from-arrays"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-add-surface-from-arrays" names="class_renderingserver_method_mesh_add_surface_from_arrays"><abbreviation explanation="无返回值。">void</abbreviation> <strong>mesh_add_surface_from_arrays</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, primitive: <reference internal="True" refid="enum-renderingserver-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference>, arrays: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, blend_shapes: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = [], lods: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> = {}, compress_format: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>] = 0) <reference internal="True" refid="class-renderingserver-method-mesh-add-surface-from-arrays"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-clear"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-clear" names="class_renderingserver_method_mesh_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>mesh_clear</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-mesh-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除网格中的所有表面。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-create" names="class_renderingserver_method_mesh_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>mesh_create</strong>() <reference internal="True" refid="class-renderingserver-method-mesh-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建网格并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>mesh_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph>如果要将这个网格放置到场景中，请使用返回的 RID 调用 <reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">instance_set_base</inline></reference>，将其附加至某个实例上。</paragraph>
            <paragraph><strong>注意：</strong>与其等价的资源为 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-create-from-surfaces"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-create-from-surfaces" names="class_renderingserver_method_mesh_create_from_surfaces"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>mesh_create_from_surfaces</strong>(surfaces: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>], blend_shape_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-renderingserver-method-mesh-create-from-surfaces"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-get-blend-shape-count"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-get-blend-shape-count" names="class_renderingserver_method_mesh_get_blend_shape_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mesh_get_blend_shape_count</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-mesh-get-blend-shape-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个网格的混合形状数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-get-blend-shape-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-get-blend-shape-mode" names="class_renderingserver_method_mesh_get_blend_shape_mode"><reference internal="True" refid="enum-renderingserver-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference> <strong>mesh_get_blend_shape_mode</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-mesh-get-blend-shape-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回网格的混合形状模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-get-custom-aabb"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-get-custom-aabb" names="class_renderingserver_method_mesh_get_custom_aabb"><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>mesh_get_custom_aabb</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-mesh-get-custom-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回网格的自定义 AABB。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-get-surface"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-get-surface" names="class_renderingserver_method_mesh_get_surface"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>mesh_get_surface</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-mesh-get-surface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-get-surface-count"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-get-surface-count" names="class_renderingserver_method_mesh_get_surface_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mesh_get_surface_count</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-mesh-get-surface-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回网格的面数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-set-blend-shape-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-set-blend-shape-mode" names="class_renderingserver_method_mesh_set_blend_shape_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>mesh_set_blend_shape_mode</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-mesh-set-blend-shape-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置网格的混合形状模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-set-custom-aabb"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-set-custom-aabb" names="class_renderingserver_method_mesh_set_custom_aabb"><abbreviation explanation="无返回值。">void</abbreviation> <strong>mesh_set_custom_aabb</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>) <reference internal="True" refid="class-renderingserver-method-mesh-set-custom-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置网格的自定义 AABB。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-set-shadow-mesh"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-set-shadow-mesh" names="class_renderingserver_method_mesh_set_shadow_mesh"><abbreviation explanation="无返回值。">void</abbreviation> <strong>mesh_set_shadow_mesh</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, shadow_mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-mesh-set-shadow-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-surface-get-arrays"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-surface-get-arrays" names="class_renderingserver_method_mesh_surface_get_arrays"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>mesh_surface_get_arrays</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-mesh-surface-get-arrays"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回网格表面的缓冲区数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-surface-get-blend-shape-arrays"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-surface-get-blend-shape-arrays" names="class_renderingserver_method_mesh_surface_get_blend_shape_arrays"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>] <strong>mesh_surface_get_blend_shape_arrays</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-mesh-surface-get-blend-shape-arrays"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回网格表面的混合形状数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-surface-get-format-attribute-stride"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-surface-get-format-attribute-stride" names="class_renderingserver_method_mesh_surface_get_format_attribute_stride"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mesh_surface_get_format_attribute_stride</strong>(format: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>], vertex_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-mesh-surface-get-format-attribute-stride"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定 <literal>format</literal> 的网格的属性缓冲区的步幅。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-surface-get-format-normal-tangent-stride"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-surface-get-format-normal-tangent-stride" names="class_renderingserver_method_mesh_surface_get_format_normal_tangent_stride"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mesh_surface_get_format_normal_tangent_stride</strong>(format: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>], vertex_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-mesh-surface-get-format-normal-tangent-stride"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定 <literal>format</literal> 的网格的组合法线和切线的步幅。重要的是请注意，虽然法线和切线位于带有顶点的顶点缓冲区中，但它们仅彼此交错，因此具有与顶点位置不同的步幅。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-surface-get-format-offset"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-surface-get-format-offset" names="class_renderingserver_method_mesh_surface_get_format_offset"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mesh_surface_get_format_offset</strong>(format: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>], vertex_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, array_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-mesh-surface-get-format-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由 <literal>array_index</literal> 给定属性在其各自缓冲区开头的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-surface-get-format-skin-stride"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-surface-get-format-skin-stride" names="class_renderingserver_method_mesh_surface_get_format_skin_stride"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mesh_surface_get_format_skin_stride</strong>(format: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>], vertex_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-mesh-surface-get-format-skin-stride"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定 <literal>format</literal> 的网格的皮肤缓冲区的步幅。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-surface-get-format-vertex-stride"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-surface-get-format-vertex-stride" names="class_renderingserver_method_mesh_surface_get_format_vertex_stride"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mesh_surface_get_format_vertex_stride</strong>(format: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-renderingserver-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>], vertex_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-mesh-surface-get-format-vertex-stride"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定 <literal>format</literal> 的网格的顶点位置的步幅。请注意，重要的是，顶点位置是连续存储的，并且不与顶点缓冲区中的其他属性（法线和切线）交错。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-surface-get-material"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-surface-get-material" names="class_renderingserver_method_mesh_surface_get_material"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>mesh_surface_get_material</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-mesh-surface-get-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回网格表面的材质。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-surface-set-material"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-surface-set-material" names="class_renderingserver_method_mesh_surface_set_material"><abbreviation explanation="无返回值。">void</abbreviation> <strong>mesh_surface_set_material</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-mesh-surface-set-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置网格表面的材质。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-surface-update-attribute-region"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-surface-update-attribute-region" names="class_renderingserver_method_mesh_surface_update_attribute_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>mesh_surface_update_attribute_region</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-renderingserver-method-mesh-surface-update-attribute-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-surface-update-skin-region"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-surface-update-skin-region" names="class_renderingserver_method_mesh_surface_update_skin_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>mesh_surface_update_skin_region</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-renderingserver-method-mesh-surface-update-skin-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-mesh-surface-update-vertex-region"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-mesh-surface-update-vertex-region" names="class_renderingserver_method_mesh_surface_update_vertex_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>mesh_surface_update_vertex_region</strong>(mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-renderingserver-method-mesh-surface-update-vertex-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-allocate-data"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-allocate-data" names="class_renderingserver_method_multimesh_allocate_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>multimesh_allocate_data</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, instances: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform_format: <reference internal="True" refid="enum-renderingserver-multimeshtransformformat"><inline classes="std std-ref">MultimeshTransformFormat</inline></reference>, color_format: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, custom_data_format: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-renderingserver-method-multimesh-allocate-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-create" names="class_renderingserver_method_multimesh_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>multimesh_create</strong>() <reference internal="True" refid="class-renderingserver-method-multimesh-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建多网格并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>multimesh_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph>如果要将这个多网格放置到场景中，请使用返回的 RID 调用 <reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">instance_set_base</inline></reference>，将其附加至某个实例上。</paragraph>
            <paragraph><strong>注意：</strong>与其等价的资源为 <reference internal="True" refuri="class_multimesh#class-multimesh"><inline classes="std std-ref">MultiMesh</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-get-aabb"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-get-aabb" names="class_renderingserver_method_multimesh_get_aabb"><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>multimesh_get_aabb</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-multimesh-get-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>计算并返回轴对齐的边界框，该边界框将所有的实例都包含在 multimesh 中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-get-buffer"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-get-buffer" names="class_renderingserver_method_multimesh_get_buffer"><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> <strong>multimesh_get_buffer</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-multimesh-get-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 MultiMesh 数据（例如实例的变换、颜色等）。有关返回数据的详细信息，请参阅 <reference internal="True" refid="class-renderingserver-method-multimesh-set-buffer"><inline classes="std std-ref">multimesh_set_buffer</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果缓冲位于引擎的内部缓存中，则需要从 GPU 显存获取，并且有可能需要解压。也就是说 <reference internal="True" refid="class-renderingserver-method-multimesh-get-buffer"><inline classes="std std-ref">multimesh_get_buffer</inline></reference> 可能会比较慢，应该尽可能避免。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-get-custom-aabb"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-get-custom-aabb" names="class_renderingserver_method_multimesh_get_custom_aabb"><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>multimesh_get_custom_aabb</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-multimesh-get-custom-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回为该 MultiMesh 资源定义的自定义 AABB。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-get-instance-count"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-get-instance-count" names="class_renderingserver_method_multimesh_get_instance_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>multimesh_get_instance_count</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-multimesh-get-instance-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回分配给这个 multimesh 的实例的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-get-mesh"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-get-mesh" names="class_renderingserver_method_multimesh_get_mesh"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>multimesh_get_mesh</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-multimesh-get-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回用于绘制此 multimesh 的 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-get-visible-instances"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-get-visible-instances" names="class_renderingserver_method_multimesh_get_visible_instances"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>multimesh_get_visible_instances</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-multimesh-get-visible-instances"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此 multimesh 的可见实例数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-instance-get-color"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-instance-get-color" names="class_renderingserver_method_multimesh_instance_get_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>multimesh_instance_get_color</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-multimesh-instance-get-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定实例将被调制的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-instance-get-custom-data"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-instance-get-custom-data" names="class_renderingserver_method_multimesh_instance_get_custom_data"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>multimesh_instance_get_custom_data</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-multimesh-instance-get-custom-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与指定实例相关的自定义数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-instance-get-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-instance-get-transform" names="class_renderingserver_method_multimesh_instance_get_transform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>multimesh_instance_get_transform</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-multimesh-instance-get-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定实例的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-instance-get-transform-2d"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-instance-get-transform-2d" names="class_renderingserver_method_multimesh_instance_get_transform_2d"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>multimesh_instance_get_transform_2d</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-multimesh-instance-get-transform-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定实例的 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。只在 multimesh 设置为使用 2D 变换时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-instance-set-color"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-instance-set-color" names="class_renderingserver_method_multimesh_instance_set_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>multimesh_instance_set_color</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-multimesh-instance-set-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置这个实例的调制颜色。相当于 <reference internal="True" refuri="class_multimesh#class-multimesh-method-set-instance-color"><inline classes="std std-ref">MultiMesh.set_instance_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-instance-set-custom-data"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-instance-set-custom-data" names="class_renderingserver_method_multimesh_instance_set_custom_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>multimesh_instance_set_custom_data</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, custom_data: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-multimesh-instance-set-custom-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为这个实例设置自定义数据。自定义数据以 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 的形式传递，但在着色器中会被解释为 <literal>vec4</literal>。相当于 <reference internal="True" refuri="class_multimesh#class-multimesh-method-set-instance-custom-data"><inline classes="std std-ref">MultiMesh.set_instance_custom_data</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-instance-set-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-instance-set-transform" names="class_renderingserver_method_multimesh_instance_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>multimesh_instance_set_transform</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-multimesh-instance-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为此实例设置 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。相当于 <reference internal="True" refuri="class_multimesh#class-multimesh-method-set-instance-transform"><inline classes="std std-ref">MultiMesh.set_instance_transform</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-instance-set-transform-2d"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-instance-set-transform-2d" names="class_renderingserver_method_multimesh_instance_set_transform_2d"><abbreviation explanation="无返回值。">void</abbreviation> <strong>multimesh_instance_set_transform_2d</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-multimesh-instance-set-transform-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为此实例设置 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。用于在 2D 中使用 multimesh 时。相当于 <reference internal="True" refuri="class_multimesh#class-multimesh-method-set-instance-transform-2d"><inline classes="std std-ref">MultiMesh.set_instance_transform_2d</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-set-buffer"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-set-buffer" names="class_renderingserver_method_multimesh_set_buffer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>multimesh_set_buffer</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, buffer: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>) <reference internal="True" refid="class-renderingserver-method-multimesh-set-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将用于绘制 <literal>multimesh</literal> 的全部数据立即写入 <literal>buffer</literal>（例如实例的变换和颜色）。<literal>buffer</literal> 的大小必须与实例数和单实例数据大小的乘积匹配（后者取决于启用的 MultiMesh 字段）。否则，会输出错误信息，不渲染任何东西。另见 <reference internal="True" refid="class-renderingserver-method-multimesh-get-buffer"><inline classes="std std-ref">multimesh_get_buffer</inline></reference>。</paragraph>
            <paragraph>单实例数据大小与预期的数据顺序如下：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">2D:
  - 位置：8 个 float（Transform2D 占 8 个 float）
  - 位置 + 顶点颜色：12 个 float（Transform2D 占 8 个 float、颜色占 4 个 float）
  - 位置 + 自定义数据：12 个 float（Transform2D 占 8 个 float、自定义数据占 4 个 float）
  - 位置 + 顶点颜色 + 自定义数据：16 个 float（Transform2D 占 8 个 float、颜色占 4 个 float、自定义数据占 4 个 float）
3D:
  - 位置：12 个 float（Transform3D 占 12 个 float）
  - 位置 + 顶点颜色：16 个 float（Transform3D 占 12 个 float、颜色占 4 个 float）
  - 位置 + 自定义数据：16 个 float（Transform3D 占 12 个 float、自定义数据占 4 个 float）
  - 位置 + 顶点颜色 + 自定义数据：20 个 float（Transform3D 占 12 个 float、颜色占 4 个 float、自定义数据占 4 个 float）</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-set-custom-aabb"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-set-custom-aabb" names="class_renderingserver_method_multimesh_set_custom_aabb"><abbreviation explanation="无返回值。">void</abbreviation> <strong>multimesh_set_custom_aabb</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>) <reference internal="True" refid="class-renderingserver-method-multimesh-set-custom-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为该 MultiMesh 资源设置自定义 AABB。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-set-mesh"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-set-mesh" names="class_renderingserver_method_multimesh_set_mesh"><abbreviation explanation="无返回值。">void</abbreviation> <strong>multimesh_set_mesh</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-multimesh-set-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 Multimesh 所要绘制的网格。相当于 <reference internal="True" refuri="class_multimesh#class-multimesh-property-mesh"><inline classes="std std-ref">MultiMesh.mesh</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-multimesh-set-visible-instances"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-multimesh-set-visible-instances" names="class_renderingserver_method_multimesh_set_visible_instances"><abbreviation explanation="无返回值。">void</abbreviation> <strong>multimesh_set_visible_instances</strong>(multimesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, visible: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-multimesh-set-visible-instances"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置在给定时间内可见的实例的数量。如果是 -1，所有被分配的实例都会被画出来。相当于 <reference internal="True" refuri="class_multimesh#class-multimesh-property-visible-instance-count"><inline classes="std std-ref">MultiMesh.visible_instance_count</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-occluder-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-occluder-create" names="class_renderingserver_method_occluder_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>occluder_create</strong>() <reference internal="True" refid="class-renderingserver-method-occluder-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建遮挡器实例并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>occluder_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>与其等价的资源为 <reference internal="True" refuri="class_occluder3d#class-occluder3d"><inline classes="std std-ref">Occluder3D</inline></reference>（请勿与 <reference internal="True" refuri="class_occluderinstance3d#class-occluderinstance3d"><inline classes="std std-ref">OccluderInstance3D</inline></reference> 节点混淆）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-occluder-set-mesh"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-occluder-set-mesh" names="class_renderingserver_method_occluder_set_mesh"><abbreviation explanation="无返回值。">void</abbreviation> <strong>occluder_set_mesh</strong>(occluder: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, vertices: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>, indices: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <reference internal="True" refid="class-renderingserver-method-occluder-set-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定遮挡器 RID 的网格数据，控制执行遮挡剔除时的形状。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-omni-light-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-omni-light-create" names="class_renderingserver_method_omni_light_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>omni_light_create</strong>() <reference internal="True" refid="class-renderingserver-method-omni-light-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个新的全向灯并将其添加到 RenderingServer。可以使用返回的 RID 访问它。该 RID 可用于大多数 <literal>light_*</literal> RenderingServer 函数。</paragraph>
            <paragraph>一旦使用 RID 完成操作后，需要使用 RenderingServer 的方法 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 来释放该 RID。</paragraph>
            <paragraph>要放置在场景中，请使用 <reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">instance_set_base</inline></reference> 使用该返回的 RID 将该全向灯附加到一个实例。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-collision-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-collision-create" names="class_renderingserver_method_particles_collision_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>particles_collision_create</strong>() <reference internal="True" refid="class-renderingserver-method-particles-collision-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建 3D GPU 粒子碰撞或吸引器并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>particles_collision_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_gpuparticlescollision3d#class-gpuparticlescollision3d"><inline classes="std std-ref">GPUParticlesCollision3D</inline></reference> 和 <reference internal="True" refuri="class_gpuparticlesattractor3d#class-gpuparticlesattractor3d"><inline classes="std std-ref">GPUParticlesAttractor3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-collision-height-field-update"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-collision-height-field-update" names="class_renderingserver_method_particles_collision_height_field_update"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_collision_height_field_update</strong>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-collision-height-field-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请求对 3D GPU 粒子碰撞高度图进行更新。3D GPU 粒子碰撞高度图可能会自动调用这个函数，取决于 <reference internal="True" refuri="class_gpuparticlescollisionheightfield3d#class-gpuparticlescollisionheightfield3d-property-update-mode"><inline classes="std std-ref">GPUParticlesCollisionHeightField3D.update_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-collision-set-attractor-attenuation"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-collision-set-attractor-attenuation" names="class_renderingserver_method_particles_collision_set_attractor_attenuation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_collision_set_attractor_attenuation</strong>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, curve: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-collision-set-attractor-attenuation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 RID 为 <literal>particles_collision</literal> 的 3D GPU 粒子吸引器设置衰减曲线 <literal>curve</literal>。仅用于吸引器，对碰撞体不适用。等价于 <reference internal="True" refuri="class_gpuparticlesattractor3d#class-gpuparticlesattractor3d-property-attenuation"><inline classes="std std-ref">GPUParticlesAttractor3D.attenuation</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-collision-set-attractor-directionality"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-collision-set-attractor-directionality" names="class_renderingserver_method_particles_collision_set_attractor_directionality"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_collision_set_attractor_directionality</strong>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-collision-set-attractor-directionality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 3D GPU 粒子吸引器的方向量 <literal>amount</literal>，吸引器由 RID <literal>particles_collision</literal> 指定。仅用于吸引器，不适用于碰撞体。等价于 <reference internal="True" refuri="class_gpuparticlesattractor3d#class-gpuparticlesattractor3d-property-directionality"><inline classes="std std-ref">GPUParticlesAttractor3D.directionality</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-collision-set-attractor-strength"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-collision-set-attractor-strength" names="class_renderingserver_method_particles_collision_set_attractor_strength"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_collision_set_attractor_strength</strong>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-collision-set-attractor-strength"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 3D GPU 粒子吸引器的强度 <literal>strength</literal>，吸引器由 RID <literal>particles_collision</literal> 指定。仅用于吸引器，不适用于碰撞体。等价于 <reference internal="True" refuri="class_gpuparticlesattractor3d#class-gpuparticlesattractor3d-property-strength"><inline classes="std std-ref">GPUParticlesAttractor3D.strength</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-collision-set-box-extents"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-collision-set-box-extents" names="class_renderingserver_method_particles_collision_set_box_extents"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_collision_set_box_extents</strong>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, extents: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-collision-set-box-extents"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 3D GPU 粒子吸引器的范围 <literal>extents</literal>，吸引器由 RID <literal>particles_collision</literal> 指定。根据 <literal>particles_collision</literal> 类型的不同，等价于 <reference internal="True" refuri="class_gpuparticlescollisionbox3d#class-gpuparticlescollisionbox3d-property-size"><inline classes="std std-ref">GPUParticlesCollisionBox3D.size</inline></reference>、<reference internal="True" refuri="class_gpuparticlescollisionsdf3d#class-gpuparticlescollisionsdf3d-property-size"><inline classes="std std-ref">GPUParticlesCollisionSDF3D.size</inline></reference>、<reference internal="True" refuri="class_gpuparticlescollisionheightfield3d#class-gpuparticlescollisionheightfield3d-property-size"><inline classes="std std-ref">GPUParticlesCollisionHeightField3D.size</inline></reference>、<reference internal="True" refuri="class_gpuparticlesattractorbox3d#class-gpuparticlesattractorbox3d-property-size"><inline classes="std std-ref">GPUParticlesAttractorBox3D.size</inline></reference>、<reference internal="True" refuri="class_gpuparticlesattractorvectorfield3d#class-gpuparticlesattractorvectorfield3d-property-size"><inline classes="std std-ref">GPUParticlesAttractorVectorField3D.size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-collision-set-collision-type"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-collision-set-collision-type" names="class_renderingserver_method_particles_collision_set_collision_type"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_collision_set_collision_type</strong>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, type: <reference internal="True" refid="enum-renderingserver-particlescollisiontype"><inline classes="std std-ref">ParticlesCollisionType</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-collision-set-collision-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 3D GPU 粒子碰撞或吸引器的形状类型 <literal>type</literal>，碰撞或吸引器由 RID <literal>particles_collision</literal> 指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-collision-set-cull-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-collision-set-cull-mask" names="class_renderingserver_method_particles_collision_set_cull_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_collision_set_cull_mask</strong>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-collision-set-cull-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 3D GPU 粒子碰撞或吸引器的剔除掩码 <literal>mask</literal>，碰撞或吸引器由 RID <literal>particles_collision</literal> 指定。根据 <literal>particles_collision</literal> 类型的不同，等价于 <reference internal="True" refuri="class_gpuparticlescollision3d#class-gpuparticlescollision3d-property-cull-mask"><inline classes="std std-ref">GPUParticlesCollision3D.cull_mask</inline></reference> 或 <reference internal="True" refuri="class_gpuparticlesattractor3d#class-gpuparticlesattractor3d-property-cull-mask"><inline classes="std std-ref">GPUParticlesAttractor3D.cull_mask</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-collision-set-field-texture"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-collision-set-field-texture" names="class_renderingserver_method_particles_collision_set_field_texture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_collision_set_field_texture</strong>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-collision-set-field-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 3D GPU 粒子碰撞的带符号距离场纹理 <literal>texture</literal>，碰撞由 RID <literal>particles_collision</literal> 指定。根据 <literal>particles_collision</literal> 类型的不同，等价于 <reference internal="True" refuri="class_gpuparticlescollisionsdf3d#class-gpuparticlescollisionsdf3d-property-texture"><inline classes="std std-ref">GPUParticlesCollisionSDF3D.texture</inline></reference> 或 <reference internal="True" refuri="class_gpuparticlesattractorvectorfield3d#class-gpuparticlesattractorvectorfield3d-property-texture"><inline classes="std std-ref">GPUParticlesAttractorVectorField3D.texture</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-collision-set-height-field-resolution"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-collision-set-height-field-resolution" names="class_renderingserver_method_particles_collision_set_height_field_resolution"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_collision_set_height_field_resolution</strong>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, resolution: <reference internal="True" refid="enum-renderingserver-particlescollisionheightfieldresolution"><inline classes="std std-ref">ParticlesCollisionHeightfieldResolution</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-collision-set-height-field-resolution"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 3D GPU 粒子高度图碰撞的高度图分辨率 <literal>resolution</literal>，碰撞由 RID <literal>particles_collision</literal> 指定。等价于 <reference internal="True" refuri="class_gpuparticlescollisionheightfield3d#class-gpuparticlescollisionheightfield3d-property-resolution"><inline classes="std std-ref">GPUParticlesCollisionHeightField3D.resolution</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-collision-set-sphere-radius"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-collision-set-sphere-radius" names="class_renderingserver_method_particles_collision_set_sphere_radius"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_collision_set_sphere_radius</strong>(particles_collision: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, radius: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-collision-set-sphere-radius"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 3D GPU 粒子球体碰撞或吸引器的半径 <literal>radius</literal>，碰撞或吸引器由 RID <literal>particles_collision</literal> 指定。根据 <literal>particles_collision</literal> 类型的不同，等价于 <reference internal="True" refuri="class_gpuparticlescollisionsphere3d#class-gpuparticlescollisionsphere3d-property-radius"><inline classes="std std-ref">GPUParticlesCollisionSphere3D.radius</inline></reference> 或 <reference internal="True" refuri="class_gpuparticlesattractorsphere3d#class-gpuparticlesattractorsphere3d-property-radius"><inline classes="std std-ref">GPUParticlesAttractorSphere3D.radius</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-create" names="class_renderingserver_method_particles_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>particles_create</strong>() <reference internal="True" refid="class-renderingserver-method-particles-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建基于 GPU 的粒子系统并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>particles_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph>如果要将这个粒子系统放置到场景中，请使用返回的 RID 调用 <reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">instance_set_base</inline></reference>，将其附加至某个实例上。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_gpuparticles2d#class-gpuparticles2d"><inline classes="std std-ref">GPUParticles2D</inline></reference> 和 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d"><inline classes="std std-ref">GPUParticles3D</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>所有 <literal>particles_*</literal> 方法都仅适用于基于 GPU 的粒子，不适用于基于 CPU 的粒子。RenderingServer 中没有 <reference internal="True" refuri="class_cpuparticles2d#class-cpuparticles2d"><inline classes="std std-ref">CPUParticles2D</inline></reference> 和 <reference internal="True" refuri="class_cpuparticles3d#class-cpuparticles3d"><inline classes="std std-ref">CPUParticles3D</inline></reference> 的等价函数，因为这两个节点底层使用的是 <reference internal="True" refuri="class_multimeshinstance2d#class-multimeshinstance2d"><inline classes="std std-ref">MultiMeshInstance2D</inline></reference> 和 <reference internal="True" refuri="class_multimeshinstance3d#class-multimeshinstance3d"><inline classes="std std-ref">MultiMeshInstance3D</inline></reference>（见 <literal>multimesh_*</literal> 方法）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-emit"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-emit" names="class_renderingserver_method_particles_emit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_emit</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>, velocity: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, custom: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, emit_flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-emit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 <literal>particles</literal> 实例中手动发射粒子。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-get-current-aabb"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-get-current-aabb" names="class_renderingserver_method_particles_get_current_aabb"><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>particles_get_current_aabb</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-get-current-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>计算并返回包含所有粒子的轴对齐边界框。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-method-capture-aabb"><inline classes="std std-ref">GPUParticles3D.capture_aabb</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-get-emitting"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-get-emitting" names="class_renderingserver_method_particles_get_emitting"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>particles_get_emitting</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-get-emitting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果当前粒子被设置发射，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-is-inactive"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-is-inactive" names="class_renderingserver_method_particles_is_inactive"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>particles_is_inactive</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-is-inactive"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果粒子没有发射并且粒子设置为非活动状态，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-request-process"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-request-process" names="class_renderingserver_method_particles_request_process"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_request_process</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-request-process"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将粒子系统添加到需要更新的粒子系统列表中。更新将在下一帧或下一次调用 <reference internal="True" refid="class-renderingserver-method-instances-cull-aabb"><inline classes="std std-ref">instances_cull_aabb</inline></reference>、<reference internal="True" refid="class-renderingserver-method-instances-cull-convex"><inline classes="std std-ref">instances_cull_convex</inline></reference> 或 <reference internal="True" refid="class-renderingserver-method-instances-cull-ray"><inline classes="std std-ref">instances_cull_ray</inline></reference> 时进行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-restart"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-restart" names="class_renderingserver_method_particles_restart"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_restart</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-restart"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>下次更新时重置粒子。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-method-restart"><inline classes="std std-ref">GPUParticles3D.restart</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-amount"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-amount" names="class_renderingserver_method_particles_set_amount"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_amount</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, amount: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-amount"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置要绘制的粒子的数量，并为其分配内存。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-amount"><inline classes="std std-ref">GPUParticles3D.amount</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-amount-ratio"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-amount-ratio" names="class_renderingserver_method_particles_set_amount_ratio"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_amount_ratio</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, ratio: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-amount-ratio"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置要被发射的粒子的数量比率。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-amount-ratio"><inline classes="std std-ref">GPUParticles3D.amount_ratio</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-collision-base-size"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-collision-base-size" names="class_renderingserver_method_particles_set_collision_base_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_collision_base_size</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-collision-base-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-custom-aabb"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-custom-aabb" names="class_renderingserver_method_particles_set_custom_aabb"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_custom_aabb</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-custom-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置粒子系统的自定义轴对齐边界框。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-visibility-aabb"><inline classes="std std-ref">GPUParticles3D.visibility_aabb</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-draw-order"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-draw-order" names="class_renderingserver_method_particles_set_draw_order"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_draw_order</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, order: <reference internal="True" refid="enum-renderingserver-particlesdraworder"><inline classes="std std-ref">ParticlesDrawOrder</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-draw-order"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将粒子的绘制顺序设置为命名枚举 <reference internal="True" refid="enum-renderingserver-particlesdraworder"><inline classes="std std-ref">ParticlesDrawOrder</inline></reference>。选项见 <reference internal="True" refid="enum-renderingserver-particlesdraworder"><inline classes="std std-ref">ParticlesDrawOrder</inline></reference>。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-draw-order"><inline classes="std std-ref">GPUParticles3D.draw_order</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-draw-pass-mesh"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-draw-pass-mesh" names="class_renderingserver_method_particles_set_draw_pass_mesh"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_draw_pass_mesh</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pass: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mesh: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-draw-pass-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置用于指定绘制阶段的网格。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-draw-pass-1"><inline classes="std std-ref">GPUParticles3D.draw_pass_1</inline></reference>、<reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-draw-pass-2"><inline classes="std std-ref">GPUParticles3D.draw_pass_2</inline></reference>、<reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-draw-pass-3"><inline classes="std std-ref">GPUParticles3D.draw_pass_3</inline></reference> 和 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-draw-pass-4"><inline classes="std std-ref">GPUParticles3D.draw_pass_4</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-draw-passes"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-draw-passes" names="class_renderingserver_method_particles_set_draw_passes"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_draw_passes</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-draw-passes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置要使用的绘制阶段的数量。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-draw-passes"><inline classes="std std-ref">GPUParticles3D.draw_passes</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-emission-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-emission-transform" names="class_renderingserver_method_particles_set_emission_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_emission_transform</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-emission-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置粒子首次发射时使用的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-emitter-velocity"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-emitter-velocity" names="class_renderingserver_method_particles_set_emitter_velocity"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_emitter_velocity</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, velocity: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-emitter-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置粒子节点的速度，将由 <reference internal="True" refuri="class_particleprocessmaterial#class-particleprocessmaterial-property-inherit-velocity-ratio"><inline classes="std std-ref">ParticleProcessMaterial.inherit_velocity_ratio</inline></reference> 使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-emitting"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-emitting" names="class_renderingserver_method_particles_set_emitting"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_emitting</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, emitting: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-emitting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则粒子将随时间发射。设置为 false 不会重置粒子，只会停止发射。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-emitting"><inline classes="std std-ref">GPUParticles3D.emitting</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-explosiveness-ratio"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-explosiveness-ratio" names="class_renderingserver_method_particles_set_explosiveness_ratio"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_explosiveness_ratio</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, ratio: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-explosiveness-ratio"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置爆发比例。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-explosiveness"><inline classes="std std-ref">GPUParticles3D.explosiveness</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-fixed-fps"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-fixed-fps" names="class_renderingserver_method_particles_set_fixed_fps"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_fixed_fps</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fps: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-fixed-fps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置粒子系统渲染的固定帧率。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-fixed-fps"><inline classes="std std-ref">GPUParticles3D.fixed_fps</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-fractional-delta"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-fractional-delta" names="class_renderingserver_method_particles_set_fractional_delta"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_fractional_delta</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-fractional-delta"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则使用分数增量来平滑粒子的运动。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-fract-delta"><inline classes="std std-ref">GPUParticles3D.fract_delta</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-interp-to-end"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-interp-to-end" names="class_renderingserver_method_particles_set_interp_to_end"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_interp_to_end</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, factor: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-interp-to-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置通知 <reference internal="True" refuri="class_particleprocessmaterial#class-particleprocessmaterial"><inline classes="std std-ref">ParticleProcessMaterial</inline></reference> 将所有粒子冲向其生命周期终点的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-interpolate"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-interpolate" names="class_renderingserver_method_particles_set_interpolate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_interpolate</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-lifetime"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-lifetime" names="class_renderingserver_method_particles_set_lifetime"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_lifetime</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, lifetime: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-lifetime"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置系统中每个粒子的生命周期。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-lifetime"><inline classes="std std-ref">GPUParticles3D.lifetime</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-mode" names="class_renderingserver_method_particles_set_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_mode</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-particlesmode"><inline classes="std std-ref">ParticlesMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置由 RID <literal>particles</literal> 指定的 GPU 粒子是否应该根据 <literal>mode</literal> 在 2D 或 3D 中渲染。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-one-shot"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-one-shot" names="class_renderingserver_method_particles_set_one_shot"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_one_shot</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, one_shot: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-one-shot"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则粒子将发射一次然后停止。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-one-shot"><inline classes="std std-ref">GPUParticles3D.one_shot</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-pre-process-time"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-pre-process-time" names="class_renderingserver_method_particles_set_pre_process_time"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_pre_process_time</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-pre-process-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置粒子动画的预处理时间。这样可以让动画延迟到粒子开始发射之后再开始。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-preprocess"><inline classes="std std-ref">GPUParticles3D.preprocess</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-process-material"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-process-material" names="class_renderingserver_method_particles_set_process_material"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_process_material</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-process-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置用于处理粒子的材质。</paragraph>
            <paragraph><strong>注意：</strong>这不是用来绘制材质的材质。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-process-material"><inline classes="std std-ref">GPUParticles3D.process_material</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-randomness-ratio"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-randomness-ratio" names="class_renderingserver_method_particles_set_randomness_ratio"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_randomness_ratio</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, ratio: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-randomness-ratio"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置发射随机性比例。会随机化该粒子在其相位内的发射。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-randomness"><inline classes="std std-ref">GPUParticles3D.randomness</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-speed-scale"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-speed-scale" names="class_renderingserver_method_particles_set_speed_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_speed_scale</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-speed-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置粒子系统的速度缩放。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-speed-scale"><inline classes="std std-ref">GPUParticles3D.speed_scale</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-subemitter"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-subemitter" names="class_renderingserver_method_particles_set_subemitter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_subemitter</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, subemitter_particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-subemitter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-trail-bind-poses"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-trail-bind-poses" names="class_renderingserver_method_particles_set_trail_bind_poses"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_trail_bind_poses</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bind_poses: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>]) <reference internal="True" refid="class-renderingserver-method-particles-set-trail-bind-poses"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-trails"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-trails" names="class_renderingserver_method_particles_set_trails"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_trails</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, length_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-trails"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>enable</literal> 为 <literal>true</literal>，则会为 <literal>particles</literal> 启用尾迹，长度为 <literal>length_sec</literal> 秒。等价于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-trail-enabled"><inline classes="std std-ref">GPUParticles3D.trail_enabled</inline></reference> 和 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-trail-lifetime"><inline classes="std std-ref">GPUParticles3D.trail_lifetime</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-transform-align"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-transform-align" names="class_renderingserver_method_particles_set_transform_align"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_transform_align</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, align: <reference internal="True" refid="enum-renderingserver-particlestransformalign"><inline classes="std std-ref">ParticlesTransformAlign</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-transform-align"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-particles-set-use-local-coordinates"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-particles-set-use-local-coordinates" names="class_renderingserver_method_particles_set_use_local_coordinates"><abbreviation explanation="无返回值。">void</abbreviation> <strong>particles_set_use_local_coordinates</strong>(particles: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-particles-set-use-local-coordinates"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则粒子使用局部坐标。如果为 <literal>false</literal> 则使用全局坐标。相当于 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d-property-local-coords"><inline classes="std std-ref">GPUParticles3D.local_coords</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-positional-soft-shadow-filter-set-quality"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-positional-soft-shadow-filter-set-quality" names="class_renderingserver_method_positional_soft_shadow_filter_set_quality"><abbreviation explanation="无返回值。">void</abbreviation> <strong>positional_soft_shadow_filter_set_quality</strong>(quality: <reference internal="True" refid="enum-renderingserver-shadowquality"><inline classes="std std-ref">ShadowQuality</inline></reference>) <reference internal="True" refid="class-renderingserver-method-positional-soft-shadow-filter-set-quality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 3D 全向灯和聚光灯阴影的过滤质量。另见 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-lights-and-shadows-positional-shadow-soft-shadow-filter-quality"><inline classes="std std-ref">ProjectSettings.rendering/lights_and_shadows/positional_shadow/soft_shadow_filter_quality</inline></reference>。这个参数是全局的，无法针对单个视口设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-create" names="class_renderingserver_method_reflection_probe_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>reflection_probe_create</strong>() <reference internal="True" refid="class-renderingserver-method-reflection-probe-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建反射探针并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>reflection_probe_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph>如果要将这个反射探针放置到场景中，请使用返回的 RID 调用 <reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">instance_set_base</inline></reference>，将其附加至某个实例上。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe"><inline classes="std std-ref">ReflectionProbe</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-ambient-color"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-ambient-color" names="class_renderingserver_method_reflection_probe_set_ambient_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_ambient_color</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-ambient-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置反射探针的自定义环境光颜色。等价于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-ambient-color"><inline classes="std std-ref">ReflectionProbe.ambient_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-ambient-energy"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-ambient-energy" names="class_renderingserver_method_reflection_probe_set_ambient_energy"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_ambient_energy</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-ambient-energy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置反射探针的自定义环境光能量。等价于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-ambient-color-energy"><inline classes="std std-ref">ReflectionProbe.ambient_color_energy</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-ambient-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-ambient-mode" names="class_renderingserver_method_reflection_probe_set_ambient_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_ambient_mode</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-reflectionprobeambientmode"><inline classes="std std-ref">ReflectionProbeAmbientMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-ambient-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置反射探针的环境光模式。等价于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-ambient-mode"><inline classes="std std-ref">ReflectionProbe.ambient_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-as-interior"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-as-interior" names="class_renderingserver_method_reflection_probe_set_as_interior"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_as_interior</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-as-interior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则反射将忽略天空的贡献。相当于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-interior"><inline classes="std std-ref">ReflectionProbe.interior</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-cull-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-cull-mask" names="class_renderingserver_method_reflection_probe_set_cull_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_cull_mask</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, layers: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-cull-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该反射探针的渲染剔除掩码。只有具有匹配层的实例才会被该探针反射。相当于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-cull-mask"><inline classes="std std-ref">ReflectionProbe.cull_mask</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-enable-box-projection"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-enable-box-projection" names="class_renderingserver_method_reflection_probe_set_enable_box_projection"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_enable_box_projection</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-enable-box-projection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则使用箱体投影。这可以使反射在某些情况下看起来更正确。相当于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-box-projection"><inline classes="std std-ref">ReflectionProbe.box_projection</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-enable-shadows"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-enable-shadows" names="class_renderingserver_method_reflection_probe_set_enable_shadows"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_enable_shadows</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-enable-shadows"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，计算反射探针中的阴影。这会使得反射的计算速度慢得多。相当于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-enable-shadows"><inline classes="std std-ref">ReflectionProbe.enable_shadows</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-intensity"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-intensity" names="class_renderingserver_method_reflection_probe_set_intensity"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_intensity</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, intensity: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-intensity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置反射探针的强度。强度调节反射的强度。相当于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-intensity"><inline classes="std std-ref">ReflectionProbe.intensity</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-max-distance"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-max-distance" names="class_renderingserver_method_reflection_probe_set_max_distance"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_max_distance</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, distance: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-max-distance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置物体在被删除前与探针的最大距离。相当于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-max-distance"><inline classes="std std-ref">ReflectionProbe.max_distance</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-mesh-lod-threshold"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-mesh-lod-threshold" names="class_renderingserver_method_reflection_probe_set_mesh_lod_threshold"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_mesh_lod_threshold</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pixels: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-mesh-lod-threshold"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置渲染反射探针时所使用的网格细节级别。值越高，生成了 LOD 变体的网格所使用的版本细节就越低，能够提升性能。等价于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-mesh-lod-threshold"><inline classes="std std-ref">ReflectionProbe.mesh_lod_threshold</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-origin-offset"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-origin-offset" names="class_renderingserver_method_reflection_probe_set_origin_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_origin_offset</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, offset: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-origin-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置当此反射探针处于框项目模式时要使用的源偏移。相当于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-origin-offset"><inline classes="std std-ref">ReflectionProbe.origin_offset</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-reflection-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-reflection-mask" names="class_renderingserver_method_reflection_probe_set_reflection_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_reflection_mask</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, layers: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-reflection-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该反射探针的渲染反射掩码。只有具有匹配层的实例才会被该探针应用反射。相当于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-reflection-mask"><inline classes="std std-ref">ReflectionProbe.reflection_mask</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-resolution"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-resolution" names="class_renderingserver_method_reflection_probe_set_resolution"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_resolution</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, resolution: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-resolution"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置渲染指定的反射探针时使用的分辨率。<literal>resolution</literal> 指定的是各个立方体贴图面的分辨率：例如指定 <literal>512</literal> 时就会分配 6 个 512×512 的面（另外还有粗糙度级别的 mipmap）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-size"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-size" names="class_renderingserver_method_reflection_probe_set_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_size</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置反射探针将捕获的区域的大小。相当于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-size"><inline classes="std std-ref">ReflectionProbe.size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-reflection-probe-set-update-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-reflection-probe-set-update-mode" names="class_renderingserver_method_reflection_probe_set_update_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reflection_probe_set_update_mode</strong>(probe: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-reflectionprobeupdatemode"><inline classes="std std-ref">ReflectionProbeUpdateMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-reflection-probe-set-update-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置反射探针的更新频率。可以是一次，也可以是每一帧。参阅 <reference internal="True" refid="enum-renderingserver-reflectionprobeupdatemode"><inline classes="std std-ref">ReflectionProbeUpdateMode</inline></reference> 选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-request-frame-drawn-callback"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-request-frame-drawn-callback" names="class_renderingserver_method_request_frame_drawn_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>request_frame_drawn_callback</strong>(callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-renderingserver-method-request-frame-drawn-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>安排对给定可调用体的回调，会在一帧绘制完成后回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-scenario-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-scenario-create" names="class_renderingserver_method_scenario_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>scenario_create</strong>() <reference internal="True" refid="class-renderingserver-method-scenario-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建场景并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>scenario_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph>场景是所有可视实例存在的 3D 世界。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-scenario-set-camera-attributes"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-scenario-set-camera-attributes" names="class_renderingserver_method_scenario_set_camera_attributes"><abbreviation explanation="无返回值。">void</abbreviation> <strong>scenario_set_camera_attributes</strong>(scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, effects: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-scenario-set-camera-attributes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该场景会使用的相机属性（<literal>effects</literal>）。另见 <reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-scenario-set-compositor"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-scenario-set-compositor" names="class_renderingserver_method_scenario_set_compositor"><abbreviation explanation="无返回值。">void</abbreviation> <strong>scenario_set_compositor</strong>(scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, compositor: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-scenario-set-compositor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置将被用于该场景的合成器（<literal>compositor</literal>）。另请参阅 <reference internal="True" refuri="class_compositor#class-compositor"><inline classes="std std-ref">Compositor</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-scenario-set-environment"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-scenario-set-environment" names="class_renderingserver_method_scenario_set_environment"><abbreviation explanation="无返回值。">void</abbreviation> <strong>scenario_set_environment</strong>(scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, environment: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-scenario-set-environment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该场景会使用的环境。另见 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-scenario-set-fallback-environment"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-scenario-set-fallback-environment" names="class_renderingserver_method_scenario_set_fallback_environment"><abbreviation explanation="无返回值。">void</abbreviation> <strong>scenario_set_fallback_environment</strong>(scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, environment: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-scenario-set-fallback-environment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置此方案所使用的后备环境。如果没有设置环境，则使用后备环境。这被编辑器用来提供一个默认环境。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-screen-space-roughness-limiter-set-active"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-screen-space-roughness-limiter-set-active" names="class_renderingserver_method_screen_space_roughness_limiter_set_active"><abbreviation explanation="无返回值。">void</abbreviation> <strong>screen_space_roughness_limiter_set_active</strong>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, limit: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-screen-space-roughness-limiter-set-active"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置屏幕空间粗糙度限制参数，例如是否应该启用以及阈值等。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-anti-aliasing-screen-space-roughness-limiter-enabled"><inline classes="std std-ref">ProjectSettings.rendering/anti_aliasing/screen_space_roughness_limiter/enabled</inline></reference>、<reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-anti-aliasing-screen-space-roughness-limiter-amount"><inline classes="std std-ref">ProjectSettings.rendering/anti_aliasing/screen_space_roughness_limiter/amount</inline></reference> 和 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-anti-aliasing-screen-space-roughness-limiter-limit"><inline classes="std std-ref">ProjectSettings.rendering/anti_aliasing/screen_space_roughness_limiter/limit</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-set-boot-image"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-set-boot-image" names="class_renderingserver_method_set_boot_image"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_boot_image</strong>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, scale: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, use_filter: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-renderingserver-method-set-boot-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置一个启动图像。颜色定义背景颜色。如果 <literal>scale</literal> 为 <literal>true</literal>，则该图像将被缩放以适应屏幕大小。如果 <literal>use_filter</literal> 为 <literal>true</literal>，则该图像将使用线性插值的方式进行缩放。如果 <literal>use_filter</literal> 为 <literal>false</literal>，则该图像将使用最近邻插值的方式进行缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-set-debug-generate-wireframes"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-set-debug-generate-wireframes" names="class_renderingserver_method_set_debug_generate_wireframes"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_debug_generate_wireframes</strong>(generate: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-set-debug-generate-wireframes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>这个方法目前未实现，将 <literal>generate</literal> 设为 <literal>true</literal> 调用时没有任何效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-set-default-clear-color"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-set-default-clear-color" names="class_renderingserver_method_set_default_clear_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_clear_color</strong>(color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-renderingserver-method-set-default-clear-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置默认清屏颜色，会在尚未选择特定的清屏颜色时使用。另见 <reference internal="True" refid="class-renderingserver-method-get-default-clear-color"><inline classes="std std-ref">get_default_clear_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-shader-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-shader-create" names="class_renderingserver_method_shader_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>shader_create</strong>() <reference internal="True" refid="class-renderingserver-method-shader-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建空的着色器并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>shader_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价资源为 <reference internal="True" refuri="class_shader#class-shader"><inline classes="std std-ref">Shader</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-shader-get-code"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-shader-get-code" names="class_renderingserver_method_shader_get_code"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>shader_get_code</strong>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-shader-get-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以字符串形式返回着色器的源代码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-shader-get-default-texture-parameter"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-shader-get-default-texture-parameter" names="class_renderingserver_method_shader_get_default_texture_parameter"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>shader_get_default_texture_parameter</strong>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-shader-get-default-texture-parameter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回着色器中的默认纹理，根据名称搜索。</paragraph>
            <paragraph><strong>注意：</strong>如果使用了采样器数组，请使用 <literal>index</literal> 访问指定的纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-shader-get-parameter-default"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-shader-get-parameter-default" names="class_renderingserver_method_shader_get_parameter_default"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>shader_get_parameter_default</strong>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-shader-get-parameter-default"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定着色器 Uniform 的默认值。通常是着色器源代码中编写的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-shader-set-code"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-shader-set-code" names="class_renderingserver_method_shader_set_code"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shader_set_code</strong>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, code: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-renderingserver-method-shader-set-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置着色器的源代码（更改后会出发重新编译）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-shader-set-default-texture-parameter"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-shader-set-default-texture-parameter" names="class_renderingserver_method_shader_set_default_texture_parameter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shader_set_default_texture_parameter</strong>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-renderingserver-method-shader-set-default-texture-parameter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置着色器的默认纹理。覆盖给定名称的纹理。</paragraph>
            <paragraph><strong>注意：</strong>使用采样器数组时，使用 <literal>index</literal> 访问指定的纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-shader-set-path-hint"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-shader-set-path-hint" names="class_renderingserver_method_shader_set_path_hint"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shader_set_path_hint</strong>(shader: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-renderingserver-method-shader-set-path-hint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定着色器路径提示。一般应该与 <reference internal="True" refuri="class_shader#class-shader"><inline classes="std std-ref">Shader</inline></reference> 资源的 <reference internal="True" refuri="class_resource#class-resource-property-resource-path"><inline classes="std std-ref">Resource.resource_path</inline></reference> 相匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-skeleton-allocate-data"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-skeleton-allocate-data" names="class_renderingserver_method_skeleton_allocate_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>skeleton_allocate_data</strong>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bones: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, is_2d_skeleton: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-renderingserver-method-skeleton-allocate-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-skeleton-bone-get-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-skeleton-bone-get-transform" names="class_renderingserver_method_skeleton_bone_get_transform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>skeleton_bone_get_transform</strong>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bone: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-skeleton-bone-get-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该骨架中指定骨骼的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-skeleton-bone-get-transform-2d"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-skeleton-bone-get-transform-2d" names="class_renderingserver_method_skeleton_bone_get_transform_2d"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>skeleton_bone_get_transform_2d</strong>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bone: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-skeleton-bone-get-transform-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该骨架中指定骨骼的 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-skeleton-bone-set-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-skeleton-bone-set-transform" names="class_renderingserver_method_skeleton_bone_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>skeleton_bone_set_transform</strong>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bone: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-skeleton-bone-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该骨架中指定骨骼的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-skeleton-bone-set-transform-2d"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-skeleton-bone-set-transform-2d" names="class_renderingserver_method_skeleton_bone_set_transform_2d"><abbreviation explanation="无返回值。">void</abbreviation> <strong>skeleton_bone_set_transform_2d</strong>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bone: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-skeleton-bone-set-transform-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该骨架中指定骨骼的 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-skeleton-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-skeleton-create" names="class_renderingserver_method_skeleton_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>skeleton_create</strong>() <reference internal="True" refid="class-renderingserver-method-skeleton-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建骨架并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>skeleton_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-skeleton-get-bone-count"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-skeleton-get-bone-count" names="class_renderingserver_method_skeleton_get_bone_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>skeleton_get_bone_count</strong>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-skeleton-get-bone-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回分配给这个骨架的骨骼数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-skeleton-set-base-transform-2d"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-skeleton-set-base-transform-2d" names="class_renderingserver_method_skeleton_set_base_transform_2d"><abbreviation explanation="无返回值。">void</abbreviation> <strong>skeleton_set_base_transform_2d</strong>(skeleton: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, base_transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-skeleton-set-base-transform-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-sky-bake-panorama"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-sky-bake-panorama" names="class_renderingserver_method_sky_bake_panorama"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>sky_bake_panorama</strong>(sky: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, bake_irradiance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-renderingserver-method-sky-bake-panorama"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>生成并返回包含指定 <literal>sky</literal> RID 的辐射度贴图的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>。这样就能支持内置天空材质和自定义天空着色器。如果 <literal>bake_irradiance</literal> 为 <literal>true</literal>，则会保存辐照度贴图，不保存辐射度贴图。辐射度贴图用于渲染反射光，而辐照度贴图用于渲染环境光。另见 <reference internal="True" refid="class-renderingserver-method-environment-bake-panorama"><inline classes="std std-ref">environment_bake_panorama</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>图片保存时使用线性色彩空间，未进行色调映射，因此在图像编辑器中直接查看会感觉太暗。将 <literal>energy</literal> 设为大于 <literal>1.0</literal> 能够将得到的图像变亮。</paragraph>
            <paragraph><strong>注意：</strong>对于生成的全景图，<literal>size</literal> 应该是 2:1 的比例，才能够得到正方形的像素。对于辐射度贴图，将高度设为大于 <reference internal="True" refuri="class_sky#class-sky-property-radiance-size"><inline classes="std std-ref">Sky.radiance_size</inline></reference> 的值没有意义，因为不会增加细节。辐照度贴图仅包含低频数据，因此保存辐照度贴图时通常大小超过 128×64 像素没有意义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-sky-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-sky-create" names="class_renderingserver_method_sky_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>sky_create</strong>() <reference internal="True" refid="class-renderingserver-method-sky-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建空的天空并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>sky_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-sky-set-material"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-sky-set-material" names="class_renderingserver_method_sky_set_material"><abbreviation explanation="无返回值。">void</abbreviation> <strong>sky_set_material</strong>(sky: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, material: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-sky-set-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置天空用于渲染背景和反射贴图的材质。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-sky-set-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-sky-set-mode" names="class_renderingserver_method_sky_set_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>sky_set_mode</strong>(sky: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-skymode"><inline classes="std std-ref">SkyMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-sky-set-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 RID 为 <literal>sky</literal> 的天空的处理模式 <literal>mode</literal>。等价于 <reference internal="True" refuri="class_sky#class-sky-property-process-mode"><inline classes="std std-ref">Sky.process_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-sky-set-radiance-size"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-sky-set-radiance-size" names="class_renderingserver_method_sky_set_radiance_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>sky_set_radiance_size</strong>(sky: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, radiance_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-sky-set-radiance-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 RID 为 <literal>sky</literal> 的天空的辐照大小 <literal>radiance_size</literal>（单位为像素）。等价于 <reference internal="True" refuri="class_sky#class-sky-property-radiance-size"><inline classes="std std-ref">Sky.radiance_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-spot-light-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-spot-light-create" names="class_renderingserver_method_spot_light_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>spot_light_create</strong>() <reference internal="True" refid="class-renderingserver-method-spot-light-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建聚光灯并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在大多数 <literal>light_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph>如果要将这个聚光灯放置到场景中，请使用返回的 RID 调用 <reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">instance_set_base</inline></reference>，将其附加至某个实例上。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-sub-surface-scattering-set-quality"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-sub-surface-scattering-set-quality" names="class_renderingserver_method_sub_surface_scattering_set_quality"><abbreviation explanation="无返回值。">void</abbreviation> <strong>sub_surface_scattering_set_quality</strong>(quality: <reference internal="True" refid="enum-renderingserver-subsurfacescatteringquality"><inline classes="std std-ref">SubSurfaceScatteringQuality</inline></reference>) <reference internal="True" refid="class-renderingserver-method-sub-surface-scattering-set-quality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置渲染启用了次表面散射的材质时使用的 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-environment-subsurface-scattering-subsurface-scattering-quality"><inline classes="std std-ref">ProjectSettings.rendering/environment/subsurface_scattering/subsurface_scattering_quality</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-sub-surface-scattering-set-scale"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-sub-surface-scattering-set-scale" names="class_renderingserver_method_sub_surface_scattering_set_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>sub_surface_scattering_set_scale</strong>(scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, depth_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-sub-surface-scattering-set-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置渲染启用了次表面散射的材质时使用的 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-environment-subsurface-scattering-subsurface-scattering-scale"><inline classes="std std-ref">ProjectSettings.rendering/environment/subsurface_scattering/subsurface_scattering_scale</inline></reference> 和 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-environment-subsurface-scattering-subsurface-scattering-depth-scale"><inline classes="std std-ref">ProjectSettings.rendering/environment/subsurface_scattering/subsurface_scattering_depth_scale</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-2d-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-2d-create" names="class_renderingserver_method_texture_2d_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_2d_create</strong>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>) <reference internal="True" refid="class-renderingserver-method-texture-2d-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建二维纹理并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>texture_2d_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价资源为 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>请勿与 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice-method-texture-create"><inline classes="std std-ref">RenderingDevice.texture_create</inline></reference> 混淆，后者创建的是图形 API 自己的纹理类型，并非 Godot 专属的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-2d-get"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-2d-get" names="class_renderingserver_method_texture_2d_get"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>texture_2d_get</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-texture-2d-get"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从给定的纹理 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <literal>texture</literal> 返回 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 实例。</paragraph>
            <paragraph>从 <reference internal="True" refid="class-renderingserver-method-get-test-texture"><inline classes="std std-ref">get_test_texture</inline></reference> 获取测试纹理并将其应用至 <reference internal="True" refuri="class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2D</inline></reference> 节点的示例：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var texture_rid = RenderingServer.get_test_texture()
var texture = ImageTexture.create_from_image(RenderingServer.texture_2d_get(texture_rid))
$Sprite2D.texture = texture</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-2d-layer-get"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-2d-layer-get" names="class_renderingserver_method_texture_2d_layer_get"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>texture_2d_layer_get</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-texture-2d-layer-get"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定 <literal>texture</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 和 <literal>layer</literal> 中的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-2d-layered-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-2d-layered-create" names="class_renderingserver_method_texture_2d_layered_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_2d_layered_create</strong>(layers: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>], layered_type: <reference internal="True" refid="enum-renderingserver-texturelayeredtype"><inline classes="std std-ref">TextureLayeredType</inline></reference>) <reference internal="True" refid="class-renderingserver-method-texture-2d-layered-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建二维多层纹理并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>texture_2d_layered_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价资源为 <reference internal="True" refuri="class_texturelayered#class-texturelayered"><inline classes="std std-ref">TextureLayered</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-2d-layered-placeholder-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-2d-layered-placeholder-create" names="class_renderingserver_method_texture_2d_layered_placeholder_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_2d_layered_placeholder_create</strong>(layered_type: <reference internal="True" refid="enum-renderingserver-texturelayeredtype"><inline classes="std std-ref">TextureLayeredType</inline></reference>) <reference internal="True" refid="class-renderingserver-method-texture-2d-layered-placeholder-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建二维多层纹理的占位符并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>texture_2d_layered_*</literal> RenderingServer 函数中使用，但使用时什么都不会发生。另见 <reference internal="True" refid="class-renderingserver-method-texture-2d-placeholder-create"><inline classes="std std-ref">texture_2d_placeholder_create</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>等价资源为 <reference internal="True" refuri="class_placeholdertexturelayered#class-placeholdertexturelayered"><inline classes="std std-ref">PlaceholderTextureLayered</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-2d-placeholder-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-2d-placeholder-create" names="class_renderingserver_method_texture_2d_placeholder_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_2d_placeholder_create</strong>() <reference internal="True" refid="class-renderingserver-method-texture-2d-placeholder-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建二维多层纹理的占位符并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>texture_2d_layered_*</literal> RenderingServer 函数中使用，但使用时什么都不会发生。另见 <reference internal="True" refid="class-renderingserver-method-texture-2d-layered-placeholder-create"><inline classes="std std-ref">texture_2d_layered_placeholder_create</inline></reference>。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价资源为 <reference internal="True" refuri="class_placeholdertexture2d#class-placeholdertexture2d"><inline classes="std std-ref">PlaceholderTexture2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-2d-update"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-2d-update" names="class_renderingserver_method_texture_2d_update"><abbreviation explanation="无返回值。">void</abbreviation> <strong>texture_2d_update</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>, layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-texture-2d-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <literal>image</literal> 中的数据更新由纹理 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <literal>texture</literal> 指定的纹理。<literal>layer</literal> 也必须指定，更新单层纹理（<reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>）时应为 <literal>0</literal>。</paragraph>
            <paragraph><strong>注意：</strong><literal>image</literal> 的宽度、高度、格式都必须和当前 <literal>texture</literal> 的数据相同。否则会输出错误，不会修改原始纹理。如果你需要使用不同的宽度、高度或格式，请改用 <reference internal="True" refid="class-renderingserver-method-texture-replace"><inline classes="std std-ref">texture_replace</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-3d-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-3d-create" names="class_renderingserver_method_texture_3d_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_3d_create</strong>(format: <reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference>, width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, depth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, data: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>]) <reference internal="True" refid="class-renderingserver-method-texture-3d-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>注意：</strong>等价的资源是 <reference internal="True" refuri="class_texture3d#class-texture3d"><inline classes="std std-ref">Texture3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-3d-get"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-3d-get" names="class_renderingserver_method_texture_3d_get"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>] <strong>texture_3d_get</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-texture-3d-get"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 数组的形式返回指定纹理 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 的 3D 纹理数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-3d-placeholder-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-3d-placeholder-create" names="class_renderingserver_method_texture_3d_placeholder_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_3d_placeholder_create</strong>() <reference internal="True" refid="class-renderingserver-method-texture-3d-placeholder-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建三维纹理的占位符并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>texture_3d_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价资源为 <reference internal="True" refuri="class_placeholdertexture3d#class-placeholdertexture3d"><inline classes="std std-ref">PlaceholderTexture3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-3d-update"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-3d-update" names="class_renderingserver_method_texture_3d_update"><abbreviation explanation="无返回值。">void</abbreviation> <strong>texture_3d_update</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, data: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>]) <reference internal="True" refid="class-renderingserver-method-texture-3d-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <literal>data</literal> 中的数据更新由纹理 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <literal>texture</literal> 指定的纹理。必须同时更新所有纹理层。</paragraph>
            <paragraph><strong>注意：</strong><literal>texture</literal> 的宽度、高度、格式都必须和当前纹理数据相同。否则会输出错误，不会修改原始纹理。如果你需要使用不同的宽度、高度或格式，请改用 <reference internal="True" refid="class-renderingserver-method-texture-replace"><inline classes="std std-ref">texture_replace</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-get-format"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-get-format" names="class_renderingserver_method_texture_get_format"><reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>texture_get_format</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-texture-get-format"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该纹理的格式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-get-native-handle"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-get-native-handle" names="class_renderingserver_method_texture_get_native_handle"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>texture_get_native_handle</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, srgb: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-texture-get-native-handle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该纹理对象的内部图形句柄。主要用于 GDExtension 与第三方 API 通讯。</paragraph>
            <paragraph><strong>注意：</strong>这个函数返回的是 <literal>uint64_t</literal>，内部映射到 <literal>GLuint</literal>（OpenGL）或 <literal>VkImage</literal>（Vulkan）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-get-path"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-get-path" names="class_renderingserver_method_texture_get_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>texture_get_path</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-texture-get-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-get-rd-texture"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-get-rd-texture" names="class_renderingserver_method_texture_get_rd_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_get_rd_texture</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, srgb: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-texture-get-rd-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回可用于 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference> 的纹理 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-proxy-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-proxy-create" names="class_renderingserver_method_texture_proxy_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_proxy_create</strong>(base: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-texture-proxy-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> ProxyTexture was removed in Godot 4.</paragraph>
            <paragraph>这个方法不起任何作用，始终返回无效的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-proxy-update"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-proxy-update" names="class_renderingserver_method_texture_proxy_update"><abbreviation explanation="无返回值。">void</abbreviation> <strong>texture_proxy_update</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, proxy_to: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-texture-proxy-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> ProxyTexture was removed in Godot 4.</paragraph>
            <paragraph>这个方法什么也不做。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-rd-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-rd-create" names="class_renderingserver_method_texture_rd_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_rd_create</strong>(rd_texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, layer_type: <reference internal="True" refid="enum-renderingserver-texturelayeredtype"><inline classes="std std-ref">TextureLayeredType</inline></reference> = 0) <reference internal="True" refid="class-renderingserver-method-texture-rd-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>基于直接在 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference> 上创建的纹理创建新的纹理对象。如果该纹理包含图层，则 <literal>layer_type</literal> 被用于定义图层类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-replace"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-replace" names="class_renderingserver_method_texture_replace"><abbreviation explanation="无返回值。">void</abbreviation> <strong>texture_replace</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, by_texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-texture-replace"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>texture</literal> 的纹理数据替换为由纹理 RID <literal>by_texture</literal> 指定的纹理，不会改变 <literal>texture</literal> 的 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-set-force-redraw-if-visible"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-set-force-redraw-if-visible" names="class_renderingserver_method_texture_set_force_redraw_if_visible"><abbreviation explanation="无返回值。">void</abbreviation> <strong>texture_set_force_redraw_if_visible</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-texture-set-force-redraw-if-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-set-path"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-set-path" names="class_renderingserver_method_texture_set_path"><abbreviation explanation="无返回值。">void</abbreviation> <strong>texture_set_path</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-renderingserver-method-texture-set-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-texture-set-size-override"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-texture-set-size-override" names="class_renderingserver_method_texture_set_size_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>texture_set_size_override</strong>(texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-texture-set-size-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-attach-camera"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-attach-camera" names="class_renderingserver_method_viewport_attach_camera"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_attach_camera</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, camera: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-attach-camera"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视图的相机。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-attach-canvas"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-attach-canvas" names="class_renderingserver_method_viewport_attach_canvas"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_attach_canvas</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-attach-canvas"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口的画布。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-attach-to-screen"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-attach-to-screen" names="class_renderingserver_method_viewport_attach_to_screen"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_attach_to_screen</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> = Rect2(0, 0, 0, 0), screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-renderingserver-method-viewport-attach-to-screen"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该视口复制到 <literal>rect</literal> 指定的屏幕区域。如果 <reference internal="True" refid="class-renderingserver-method-viewport-set-render-direct-to-screen"><inline classes="std std-ref">viewport_set_render_direct_to_screen</inline></reference> 为 <literal>true</literal>，则视口不使用帧缓冲区，视口的内容将直接渲染到屏幕。但是，请注意根视口是最后绘制的，因此它会覆盖屏幕。相应地，必须将根视口的区域设置为不覆盖附加该视口的区域。</paragraph>
            <paragraph>例如，可以使用以下代码将根视口设置为完全不渲染：</paragraph>
            <paragraph>FIXME：该方法似乎不存在。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    get_viewport().set_attach_to_screen_rect(Rect2())
    $Viewport.set_attach_to_screen_rect(Rect2(0, 0, 600, 600))</literal_block>
                </div>
            </container>
            <paragraph>使用它可以带来显著的优化，尤其是在低端设备上。但是，这是以必须手动管理视口为代价的。进一步优化请参见 <reference internal="True" refid="class-renderingserver-method-viewport-set-render-direct-to-screen"><inline classes="std std-ref">viewport_set_render_direct_to_screen</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-create" names="class_renderingserver_method_viewport_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>viewport_create</strong>() <reference internal="True" refid="class-renderingserver-method-viewport-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建空的视口并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>viewport_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-get-measured-render-time-cpu"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-get-measured-render-time-cpu" names="class_renderingserver_method_viewport_get_measured_render_time_cpu"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>viewport_get_measured_render_time_cpu</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-viewport-get-measured-render-time-cpu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回渲染上一帧所消耗的 CPU 时间，单位为毫秒。<emphasis>只包含</emphasis>渲染相关操作所消耗的时间；读数中不含脚本的 <literal>_process</literal> 函数及其他引擎子系统。要获取渲染场景所消耗 CPU 时间的完整读数，请将每帧绘制的所有视口的渲染时间以及 <reference internal="True" refid="class-renderingserver-method-get-frame-setup-time-cpu"><inline classes="std std-ref">get_frame_setup_time_cpu</inline></reference> 相加。与 <reference internal="True" refuri="class_engine#class-engine-method-get-frames-per-second"><inline classes="std std-ref">Engine.get_frames_per_second</inline></reference> 不同，即便帧率受到垂直同步或 <reference internal="True" refuri="class_engine#class-engine-property-max-fps"><inline classes="std std-ref">Engine.max_fps</inline></reference> 的限制，这个方法也会精确反映 CPU 利用率。另见 <reference internal="True" refid="class-renderingserver-method-viewport-get-measured-render-time-gpu"><inline classes="std std-ref">viewport_get_measured_render_time_gpu</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>需要使用 <reference internal="True" refid="class-renderingserver-method-viewport-set-measure-render-time"><inline classes="std std-ref">viewport_set_measure_render_time</inline></reference> 启用 <literal>viewport</literal> 的测量。否则这个方法会返回 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-get-measured-render-time-gpu"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-get-measured-render-time-gpu" names="class_renderingserver_method_viewport_get_measured_render_time_gpu"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>viewport_get_measured_render_time_gpu</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-viewport-get-measured-render-time-gpu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回渲染上一帧所消耗的 GPU 时间，单位为毫秒。要获取渲染场景所消耗 GPU 时间的完整读数，请将每帧绘制的所有视口的渲染时间相加。与 <reference internal="True" refuri="class_engine#class-engine-method-get-frames-per-second"><inline classes="std std-ref">Engine.get_frames_per_second</inline></reference> 不同，即便帧率受到垂直同步或 <reference internal="True" refuri="class_engine#class-engine-property-max-fps"><inline classes="std std-ref">Engine.max_fps</inline></reference> 的限制，这个方法也会精确反映 GPU 利用率。另见 <reference internal="True" refid="class-renderingserver-method-viewport-get-measured-render-time-gpu"><inline classes="std std-ref">viewport_get_measured_render_time_gpu</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>需要使用 <reference internal="True" refid="class-renderingserver-method-viewport-set-measure-render-time"><inline classes="std std-ref">viewport_set_measure_render_time</inline></reference> 启用 <literal>viewport</literal> 的测量。否则这个方法会返回 <literal>0.0</literal>。</paragraph>
            <paragraph><strong>注意：</strong>GPU 的利用率在一段时间内低到一定程度时，GPU 会降低电源状态（导致内核与内存时钟速度的降低）。这会导致 GPU 在某个帧率下保持较低利用率时，汇报的 GPU 时间增大（相对于 GPU 的最高电源状态而言）。请在使用 <reference internal="True" refid="class-renderingserver-method-viewport-get-measured-render-time-gpu"><inline classes="std std-ref">viewport_get_measured_render_time_gpu</inline></reference> 进行性能测试时牢记这一点。可以在显卡驱动的设置中改变这种行为，但代价是耗电量增大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-get-render-info"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-get-render-info" names="class_renderingserver_method_viewport_get_render_info"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>viewport_get_render_info</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, type: <reference internal="True" refid="enum-renderingserver-viewportrenderinfotype"><inline classes="std std-ref">ViewportRenderInfoType</inline></reference>, info: <reference internal="True" refid="enum-renderingserver-viewportrenderinfo"><inline classes="std std-ref">ViewportRenderInfo</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-get-render-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回关于渲染引擎的统计信息，能够用于性能分析。会区分不同的渲染阶段类型 <literal>type</literal>，每种类型都有相同的可查询信息 <literal>info</literal>（不同的阶段会返回不同的值）。渲染阶段类型列表见 <reference internal="True" refid="enum-renderingserver-viewportrenderinfotype"><inline classes="std std-ref">ViewportRenderInfoType</inline></reference>，能够查询的信息列表见 <reference internal="True" refid="enum-renderingserver-viewportrenderinfo"><inline classes="std std-ref">ViewportRenderInfo</inline></reference>。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-renderingserver-method-get-rendering-info"><inline classes="std std-ref">get_rendering_info</inline></reference>，返回的是所有视口的全局信息。</paragraph>
            <paragraph><strong>注意：</strong>引擎渲染至少 2 帧后渲染信息才可用。渲染信息不可用时 <reference internal="True" refid="class-renderingserver-method-viewport-get-render-info"><inline classes="std std-ref">viewport_get_render_info</inline></reference> 返回 <literal>0</literal>。要在 <literal>_ready()</literal> 中成功输出渲染信息，请使用如下代码：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    for _i in 2:
        await get_tree().process_frame

    print(
            RenderingServer.viewport_get_render_info(get_viewport().get_viewport_rid(),
            RenderingServer.VIEWPORT_RENDER_INFO_TYPE_VISIBLE,
            RenderingServer.VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME)
    )</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-get-render-target"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-get-render-target" names="class_renderingserver_method_viewport_get_render_target"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>viewport_get_render_target</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-viewport-get-render-target"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该视口的渲染目标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-get-texture"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-get-texture" names="class_renderingserver_method_viewport_get_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>viewport_get_texture</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-viewport-get-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回视口的最后渲染帧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-get-update-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-get-update-mode" names="class_renderingserver_method_viewport_get_update_mode"><reference internal="True" refid="enum-renderingserver-viewportupdatemode"><inline classes="std std-ref">ViewportUpdateMode</inline></reference> <strong>viewport_get_update_mode</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-viewport-get-update-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回视口的更新模式。选项见 <reference internal="True" refid="enum-renderingserver-viewportupdatemode"><inline classes="std std-ref">ViewportUpdateMode</inline></reference> 常量。</paragraph>
            <paragraph><strong>警告：</strong>在渲染线程之外的线程调用该方法会损害性能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-remove-canvas"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-remove-canvas" names="class_renderingserver_method_viewport_remove_canvas"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_remove_canvas</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-remove-canvas"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从画布分离视口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-active"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-active" names="class_renderingserver_method_viewport_set_active"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_active</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, active: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-active"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则将视口设置为活动状态，否则将其设置为非活动状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-canvas-cull-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-canvas-cull-mask" names="class_renderingserver_method_viewport_set_canvas_cull_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_canvas_cull_mask</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas_cull_mask: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-canvas-cull-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置与此 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 关联的渲染掩码。渲染可见层与之匹配的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 节点才会被此 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 渲染。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-canvas-stacking"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-canvas-stacking" names="class_renderingserver_method_viewport_set_canvas_stacking"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_canvas_stacking</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, sublayer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-canvas-stacking"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口画布的堆叠顺序。</paragraph>
            <paragraph><literal>layer</literal> 是实际的画布层，而 <literal>sublayer</literal> 指定的是该画布在同一层中的堆叠顺序。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-canvas-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-canvas-transform" names="class_renderingserver_method_viewport_set_canvas_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_canvas_transform</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, offset: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-canvas-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口画布的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-clear-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-clear-mode" names="class_renderingserver_method_viewport_set_clear_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_clear_mode</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, clear_mode: <reference internal="True" refid="enum-renderingserver-viewportclearmode"><inline classes="std std-ref">ViewportClearMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-clear-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口的清除模式。可选项见 <reference internal="True" refid="enum-renderingserver-viewportclearmode"><inline classes="std std-ref">ViewportClearMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-debug-draw"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-debug-draw" names="class_renderingserver_method_viewport_set_debug_draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_debug_draw</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, draw: <reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-debug-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口的调试绘图模式。可选项见 <reference internal="True" refid="enum-renderingserver-viewportdebugdraw"><inline classes="std std-ref">ViewportDebugDraw</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-default-canvas-item-texture-filter"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-default-canvas-item-texture-filter" names="class_renderingserver_method_viewport_set_default_canvas_item_texture_filter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_default_canvas_item_texture_filter</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, filter: <reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-default-canvas-item-texture-filter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口的默认纹理过滤模式，视口由 <literal>viewport</literal> RID 指定。选项见 <reference internal="True" refid="enum-renderingserver-canvasitemtexturefilter"><inline classes="std std-ref">CanvasItemTextureFilter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-default-canvas-item-texture-repeat"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-default-canvas-item-texture-repeat" names="class_renderingserver_method_viewport_set_default_canvas_item_texture_repeat"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_default_canvas_item_texture_repeat</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, repeat: <reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-default-canvas-item-texture-repeat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口的默认纹理重复模式，视口由 <literal>viewport</literal> RID 指定。选项见 <reference internal="True" refid="enum-renderingserver-canvasitemtexturerepeat"><inline classes="std std-ref">CanvasItemTextureRepeat</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-disable-2d"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-disable-2d" names="class_renderingserver_method_viewport_set_disable_2d"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_disable_2d</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, disable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-disable-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则不渲染视口的画布（即 2D 和 GUI 元素）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-disable-3d"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-disable-3d" names="class_renderingserver_method_viewport_set_disable_3d"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_disable_3d</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, disable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-disable-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则不渲染视口的 3D 元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-environment-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-environment-mode" names="class_renderingserver_method_viewport_set_environment_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_environment_mode</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-viewportenvironmentmode"><inline classes="std std-ref">ViewportEnvironmentMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-environment-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口的环境模式，该模式允许启用或禁用 2D 画布上的 3D 环境渲染。禁用时，2D 将不受环境影响。启用时，如果环境背景模式为 <reference internal="True" refid="class-renderingserver-constant-env-bg-canvas"><inline classes="std std-ref">ENV_BG_CANVAS</inline></reference>，则 2D 会受到环境的影响。默认行为是从视口的父级继承设置。如果最顶层的父级也被设置为 <reference internal="True" refid="class-renderingserver-constant-viewport-environment-inherit"><inline classes="std std-ref">VIEWPORT_ENVIRONMENT_INHERIT</inline></reference>，则该行为将与设置为 <reference internal="True" refid="class-renderingserver-constant-viewport-environment-enabled"><inline classes="std std-ref">VIEWPORT_ENVIRONMENT_ENABLED</inline></reference> 时相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-fsr-sharpness"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-fsr-sharpness" names="class_renderingserver_method_viewport_set_fsr_sharpness"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_fsr_sharpness</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, sharpness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-fsr-sharpness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>决定使用 FSR 放大模式时放大图像的清晰度。每个整数的锐度减半。值从 0.0（最锐利）到 2.0。高于 2.0 的值不会产生明显的差异。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-global-canvas-transform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-global-canvas-transform" names="class_renderingserver_method_viewport_set_global_canvas_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_global_canvas_transform</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-global-canvas-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口的全局变换矩阵。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-measure-render-time"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-measure-render-time" names="class_renderingserver_method_viewport_set_measure_render_time"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_measure_render_time</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-measure-render-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为给定的 <literal>viewport</literal> RID（使用 <reference internal="True" refuri="class_viewport#class-viewport-method-get-viewport-rid"><inline classes="std std-ref">Viewport.get_viewport_rid</inline></reference> 获取）设置是否测量。启用后，使用给定的 <literal>viewport</literal> 对 <reference internal="True" refid="class-renderingserver-method-viewport-get-measured-render-time-cpu"><inline classes="std std-ref">viewport_get_measured_render_time_cpu</inline></reference> 和 <reference internal="True" refid="class-renderingserver-method-viewport-get-measured-render-time-gpu"><inline classes="std std-ref">viewport_get_measured_render_time_gpu</inline></reference> 进行查询返回的就是大于 <literal>0.0</literal> 的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-msaa-2d"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-msaa-2d" names="class_renderingserver_method_viewport_set_msaa_2d"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_msaa_2d</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msaa: <reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-msaa-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 RID 为 <literal>viewport</literal> 的视口的 2D/画布多重采样抗锯齿模式。选项见 <reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-msaa-3d"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-msaa-3d" names="class_renderingserver_method_viewport_set_msaa_3d"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_msaa_3d</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msaa: <reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-msaa-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 RID 为 <literal>viewport</literal> 的视口的 3D 多重采样抗锯齿模式。选项见 <reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-occlusion-culling-build-quality"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-occlusion-culling-build-quality" names="class_renderingserver_method_viewport_set_occlusion_culling_build_quality"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_occlusion_culling_build_quality</strong>(quality: <reference internal="True" refid="enum-renderingserver-viewportocclusioncullingbuildquality"><inline classes="std std-ref">ViewportOcclusionCullingBuildQuality</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-occlusion-culling-build-quality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置遮挡剔除的 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-occlusion-culling-bvh-build-quality"><inline classes="std std-ref">ProjectSettings.rendering/occlusion_culling/bvh_build_quality</inline></reference>。这个参数是全局的，无法针对特定视口设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-occlusion-rays-per-thread"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-occlusion-rays-per-thread" names="class_renderingserver_method_viewport_set_occlusion_rays_per_thread"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_occlusion_rays_per_thread</strong>(rays_per_thread: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-occlusion-rays-per-thread"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置遮挡剔除的 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-occlusion-culling-occlusion-rays-per-thread"><inline classes="std std-ref">ProjectSettings.rendering/occlusion_culling/occlusion_rays_per_thread</inline></reference>。这个参数是全局的，无法针对特定视口设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-parent-viewport"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-parent-viewport" names="class_renderingserver_method_viewport_set_parent_viewport"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_parent_viewport</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, parent_viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-parent-viewport"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该视口的父项设置为 <literal>parent_viewport</literal> RID 指定的视口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-positional-shadow-atlas-quadrant-subdivision"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-positional-shadow-atlas-quadrant-subdivision" names="class_renderingserver_method_viewport_set_positional_shadow_atlas_quadrant_subdivision"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_positional_shadow_atlas_quadrant_subdivision</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, subdivision: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-positional-shadow-atlas-quadrant-subdivision"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置全向灯和聚光灯阴影的指定阴影图集象限 <literal>quadrant</literal> 的细分次数。另见 <reference internal="True" refuri="class_viewport#class-viewport-method-set-positional-shadow-atlas-quadrant-subdiv"><inline classes="std std-ref">Viewport.set_positional_shadow_atlas_quadrant_subdiv</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-positional-shadow-atlas-size"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-positional-shadow-atlas-size" names="class_renderingserver_method_viewport_set_positional_shadow_atlas_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_positional_shadow_atlas_size</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, use_16_bits: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-renderingserver-method-viewport-set-positional-shadow-atlas-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置阴影图集图像的大小（用于全向灯和聚光灯），大小由 <literal>size</literal> 指定，生效的视口由 <literal>viewport</literal> RID 指定。该值将向上舍入到最接近的 2 次幂。如果 <literal>use_16_bits</literal> 为 <literal>true</literal>，则会使用 16 位的全向灯/聚光灯阴影深度贴图。启用后，阴影的精度会降低，可能造成阴影失真，但能够在部分设备上提升性能。</paragraph>
            <paragraph><strong>注意：</strong>如果设置为 <literal>0</literal>，将根本看不到任何阴影。可以通过降低 CPU 和 GPU 负载来显著提升在低端系统上的性能（因为绘制不带阴影的场景需要的绘制调用更少）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-render-direct-to-screen"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-render-direct-to-screen" names="class_renderingserver_method_viewport_set_render_direct_to_screen"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_render_direct_to_screen</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-render-direct-to-screen"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则将视口的内容直接渲染到屏幕。这允许一个低级别的优化，可以跳过将视口绘制到根视口。虽然这种优化可以显著提高速度（尤其是在旧设备上），但它是以可用性为代价的。启用后，无法从视口或 screen_texture 读取。而且还会失去某些窗口设置的好处，例如各种拉伸模式。另一个需要注意的后果是，在 2D 中，渲染是以窗口坐标进行的，所以如果有一个两倍于窗口大小的视口，并且设置了这个属性，那么只会绘制适合窗口的部分， 无法自动缩放，即使游戏场景明显大于窗口大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-scaling-3d-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-scaling-3d-mode" names="class_renderingserver_method_viewport_set_scaling_3d_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_scaling_3d_mode</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scaling_3d_mode: <reference internal="True" refid="enum-renderingserver-viewportscaling3dmode"><inline classes="std std-ref">ViewportScaling3DMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-scaling-3d-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 3D 分辨率缩放模式。双线性缩放使用不同的分辨率渲染，能够对视口进行欠采样或超采样。FidelityFX 超分辨率 1.0，缩写为 FSR，是一种放大技术，通过使用空间感知放大算法以快速帧速率生成高质量图像。FSR 比双线性的开销略大，但产生的图像质量明显更高。应尽可能使用 FSR。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-scaling-3d-scale"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-scaling-3d-scale" names="class_renderingserver_method_viewport_set_scaling_3d_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_scaling_3d_scale</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-scaling-3d-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据视图大小，缩放 3D 渲染缓冲区，使用 <reference internal="True" refid="enum-renderingserver-viewportscaling3dmode"><inline classes="std std-ref">ViewportScaling3DMode</inline></reference> 中指定的图像过滤器，将输出图像缩放到完整视图大小。低于 <literal>1.0</literal> 的值，可用于加速 3D 渲染，但会以质量为代价（欠采样）。大于 <literal>1.0</literal> 的值，仅对双线性模式有效，可用于以较高的性能成本（超级采样），提高 3D 渲染质量。另请参阅 <reference internal="True" refid="enum-renderingserver-viewportmsaa"><inline classes="std std-ref">ViewportMSAA</inline></reference> 以了解多重采样抗锯齿，这要便宜得多，但只会平滑多边形的边缘。</paragraph>
            <paragraph>在使用 FSR 放大时，AMD 建议将以下值，作为预设选项公开给用户：“超质量：0.77”、“质量：0.67”、“平衡：0.59”、“性能：0.5”，而不是公开整个比例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-scenario"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-scenario" names="class_renderingserver_method_viewport_set_scenario"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_scenario</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, scenario: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-scenario"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口的场景。该场景包含环境、反射图集等信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-screen-space-aa"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-screen-space-aa" names="class_renderingserver_method_viewport_set_screen_space_aa"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_screen_space_aa</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-viewportscreenspaceaa"><inline classes="std std-ref">ViewportScreenSpaceAA</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-screen-space-aa"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用视口的屏幕空间抗锯齿模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-sdf-oversize-and-scale"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-sdf-oversize-and-scale" names="class_renderingserver_method_viewport_set_sdf_oversize_and_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_sdf_oversize_and_scale</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, oversize: <reference internal="True" refid="enum-renderingserver-viewportsdfoversize"><inline classes="std std-ref">ViewportSDFOversize</inline></reference>, scale: <reference internal="True" refid="enum-renderingserver-viewportsdfscale"><inline classes="std std-ref">ViewportSDFScale</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-sdf-oversize-and-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口的 2D 带符号距离场的 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-2d-sdf-oversize"><inline classes="std std-ref">ProjectSettings.rendering/2d/sdf/oversize</inline></reference> 和 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-2d-sdf-scale"><inline classes="std std-ref">ProjectSettings.rendering/2d/sdf/scale</inline></reference>。在 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 着色器中对带符号距离场进行采样时会用到，<reference internal="True" refuri="class_gpuparticles2d#class-gpuparticles2d"><inline classes="std std-ref">GPUParticles2D</inline></reference> 碰撞时也会用到。3D 渲染时的 SDFGI <emphasis>不会</emphasis>使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-size"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-size" names="class_renderingserver_method_viewport_set_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_size</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口的宽度和高度，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-snap-2d-transforms-to-pixel"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-snap-2d-transforms-to-pixel" names="class_renderingserver_method_viewport_set_snap_2d_transforms_to_pixel"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_snap_2d_transforms_to_pixel</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-snap-2d-transforms-to-pixel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则画布项的变换（即原点的位置）会在渲染时吸附到整像素。这样外观看上去就会更锐利，但会影响移动的平滑程度，尤其是在启用了 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 平滑的情况下。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-2d-snap-snap-2d-transforms-to-pixel"><inline classes="std std-ref">ProjectSettings.rendering/2d/snap/snap_2d_transforms_to_pixel</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-snap-2d-vertices-to-pixel"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-snap-2d-vertices-to-pixel" names="class_renderingserver_method_viewport_set_snap_2d_vertices_to_pixel"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_snap_2d_vertices_to_pixel</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-snap-2d-vertices-to-pixel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则画布项的顶点（即多边形的点）会在渲染时吸附到整像素。这样外观看上去就会更锐利，但会影响移动的平滑程度，尤其是在启用了 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 平滑的情况下。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-2d-snap-snap-2d-vertices-to-pixel"><inline classes="std std-ref">ProjectSettings.rendering/2d/snap/snap_2d_vertices_to_pixel</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-texture-mipmap-bias"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-texture-mipmap-bias" names="class_renderingserver_method_viewport_set_texture_mipmap_bias"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_texture_mipmap_bias</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mipmap_bias: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-texture-mipmap-bias"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>读取较低或较高的 mipmap，影响最终纹理的清晰度（也称为“纹理 LOD 偏置”）。负值会让 mipmap 纹理更锐利，但从较远处观察时颗粒更明显，而正值会让 mipmap 纹理更模糊（即便凑近看也一样）。要在不引入太多颗粒感的情况下，在远处获得更锐利的纹理，请将其设置在 <literal>-0.75</literal> 和 <literal>0.0</literal> 之间。启用时间抗锯齿（<reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-anti-aliasing-quality-use-taa"><inline classes="std std-ref">ProjectSettings.rendering/anti_aliasing/quality/use_taa</inline></reference>）有助于减少使用负 mipmap 偏置时可见的颗粒度。</paragraph>
            <paragraph><strong>注意：</strong>当 3D 缩放模式设置为 FSR 1.0 时，会使用该值调整自动 mipmap 偏置，偏置的计算基于缩放系数。其公式为 <literal>-log2(1.0 / scale) + mipmap_bias</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-transparent-background"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-transparent-background" names="class_renderingserver_method_viewport_set_transparent_background"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_transparent_background</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-transparent-background"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，视口将其背景渲染为透明。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-update-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-update-mode" names="class_renderingserver_method_viewport_set_update_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_update_mode</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, update_mode: <reference internal="True" refid="enum-renderingserver-viewportupdatemode"><inline classes="std std-ref">ViewportUpdateMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-update-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置应更新视口的时间。可选项请参阅 <reference internal="True" refid="enum-renderingserver-viewportupdatemode"><inline classes="std std-ref">ViewportUpdateMode</inline></reference> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-use-debanding"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-use-debanding" names="class_renderingserver_method_viewport_set_use_debanding"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_use_debanding</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-use-debanding"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则在指定的视口上启用去条带。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-anti-aliasing-quality-use-debanding"><inline classes="std std-ref">ProjectSettings.rendering/anti_aliasing/quality/use_debanding</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-use-hdr-2d"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-use-hdr-2d" names="class_renderingserver_method_viewport_set_use_hdr_2d"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_use_hdr_2d</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-use-hdr-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，2D 渲染将使用与 3D 帧缓冲区的位深度匹配的高动态范围（HDR）格式帧缓冲区。当使用 Forward+ 渲染器时，这将是一个 <literal>RGBA16</literal> 帧缓冲区，而当使用 Mobile 渲染器时，它将是一个 <literal>RGB10_A2</literal> 帧缓冲区。此外，2D 渲染将在线性色彩空间中进行，并在位块传输到屏幕之前（如果视口被连接到屏幕）立即转换为 sRGB 空间。实际上，这意味着视口的最终结果不会被钳制在 <literal>0-1</literal> 范围内，并且可以在不进行色彩空间调整的情况下被用于 3D 渲染。这使得 2D 渲染能够利用需要高动态范围的效果（例如 2D 辉光），并显著改善需要高度详细渐变的效果的外观。该设置与 <reference internal="True" refuri="class_viewport#class-viewport-property-use-hdr-2d"><inline classes="std std-ref">Viewport.use_hdr_2d</inline></reference> 效果相同。</paragraph>
            <paragraph><strong>注意：</strong>使用 GL 兼容渲染器时，该设置无效，因为出于性能原因，GL 兼容渲染器始终在低动态范围内渲染。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-use-occlusion-culling"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-use-occlusion-culling" names="class_renderingserver_method_viewport_set_use_occlusion_culling"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_use_occlusion_culling</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-use-occlusion-culling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则在指定的视口上启用遮挡剔除。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-occlusion-culling-use-occlusion-culling"><inline classes="std std-ref">ProjectSettings.rendering/occlusion_culling/use_occlusion_culling</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-use-taa"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-use-taa" names="class_renderingserver_method_viewport_set_use_taa"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_use_taa</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-use-taa"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则在指定的视口上启用时间抗锯齿。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-anti-aliasing-quality-use-taa"><inline classes="std std-ref">ProjectSettings.rendering/anti_aliasing/quality/use_taa</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-use-xr"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-use-xr" names="class_renderingserver_method_viewport_set_use_xr"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_use_xr</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, use_xr: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-use-xr"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则视口使用增强或虚拟现实技术。参阅 <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-vrs-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-vrs-mode" names="class_renderingserver_method_viewport_set_vrs_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_vrs_mode</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-viewportvrsmode"><inline classes="std std-ref">ViewportVRSMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-vrs-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口的可变速率着色（VRS）模式。如果 GPU 不支持 VRS 则会忽略该属性。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-vrs-mode"><inline classes="std std-ref">ProjectSettings.rendering/vrs/mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-vrs-texture"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-vrs-texture" names="class_renderingserver_method_viewport_set_vrs_texture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_vrs_texture</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, texture: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-vrs-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 VRS 模式设置为 <reference internal="True" refid="class-renderingserver-constant-viewport-vrs-texture"><inline classes="std std-ref">VIEWPORT_VRS_TEXTURE</inline></reference> 时，要使用的纹理。等价于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-vrs-texture"><inline classes="std std-ref">ProjectSettings.rendering/vrs/texture</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-viewport-set-vrs-update-mode"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-viewport-set-vrs-update-mode" names="class_renderingserver_method_viewport_set_vrs_update_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>viewport_set_vrs_update_mode</strong>(viewport: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, mode: <reference internal="True" refid="enum-renderingserver-viewportvrsupdatemode"><inline classes="std std-ref">ViewportVRSUpdateMode</inline></reference>) <reference internal="True" refid="class-renderingserver-method-viewport-set-vrs-update-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视口的可变速率着色（VRS）更新模式。VRS 要求将输入纹理转换为硬件支持的 VRS 方法可用的格式。更新模式定义这种情况发生的频率。如果 GPU 不支持 VRS，或者未启用 VRS，则忽略该属性。</paragraph>
            <paragraph>如果设置为 <reference internal="True" refid="class-renderingserver-constant-viewport-vrs-update-once"><inline classes="std std-ref">VIEWPORT_VRS_UPDATE_ONCE</inline></reference>，则输入纹理将被复制一次，且模式更改为 <reference internal="True" refid="class-renderingserver-constant-viewport-vrs-update-disabled"><inline classes="std std-ref">VIEWPORT_VRS_UPDATE_DISABLED</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-visibility-notifier-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-visibility-notifier-create" names="class_renderingserver_method_visibility_notifier_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>visibility_notifier_create</strong>() <reference internal="True" refid="class-renderingserver-method-visibility-notifier-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建 3D 可见性通知对象并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>visibility_notifier_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph>如果要将这个网格放置到场景中，请使用返回的 RID 调用 <reference internal="True" refid="class-renderingserver-method-instance-set-base"><inline classes="std std-ref">instance_set_base</inline></reference>，将其附加至某个实例上。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_visibleonscreennotifier3d#class-visibleonscreennotifier3d"><inline classes="std std-ref">VisibleOnScreenNotifier3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-visibility-notifier-set-aabb"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-visibility-notifier-set-aabb" names="class_renderingserver_method_visibility_notifier_set_aabb"><abbreviation explanation="无返回值。">void</abbreviation> <strong>visibility_notifier_set_aabb</strong>(notifier: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>) <reference internal="True" refid="class-renderingserver-method-visibility-notifier-set-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-visibility-notifier-set-callbacks"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-visibility-notifier-set-callbacks" names="class_renderingserver_method_visibility_notifier_set_callbacks"><abbreviation explanation="无返回值。">void</abbreviation> <strong>visibility_notifier_set_callbacks</strong>(notifier: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enter_callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, exit_callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-renderingserver-method-visibility-notifier-set-callbacks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-allocate-data"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-allocate-data" names="class_renderingserver_method_voxel_gi_allocate_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>voxel_gi_allocate_data</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, to_cell_xform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>, octree_size: <reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>, octree_cells: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, data_cells: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, distance_field: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, level_counts: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <reference internal="True" refid="class-renderingserver-method-voxel-gi-allocate-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-create"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-create" names="class_renderingserver_method_voxel_gi_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>voxel_gi_create</strong>() <reference internal="True" refid="class-renderingserver-method-voxel-gi-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建基于体素的全局光照对象并将其添加到 RenderingServer。可以通过返回的 RID 进行访问。这个 RID 会在所有 <literal>voxel_gi_*</literal> RenderingServer 函数中使用。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>等价节点为 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-get-data-cells"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-get-data-cells" names="class_renderingserver_method_voxel_gi_get_data_cells"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>voxel_gi_get_data_cells</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-voxel-gi-get-data-cells"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-get-distance-field"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-get-distance-field" names="class_renderingserver_method_voxel_gi_get_distance_field"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>voxel_gi_get_distance_field</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-voxel-gi-get-distance-field"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-get-level-counts"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-get-level-counts" names="class_renderingserver_method_voxel_gi_get_level_counts"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>voxel_gi_get_level_counts</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-voxel-gi-get-level-counts"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-get-octree-cells"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-get-octree-cells" names="class_renderingserver_method_voxel_gi_get_octree_cells"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>voxel_gi_get_octree_cells</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-voxel-gi-get-octree-cells"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-get-octree-size"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-get-octree-size" names="class_renderingserver_method_voxel_gi_get_octree_size"><reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference> <strong>voxel_gi_get_octree_size</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-voxel-gi-get-octree-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-get-to-cell-xform"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-get-to-cell-xform" names="class_renderingserver_method_voxel_gi_get_to_cell_xform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>voxel_gi_get_to_cell_xform</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-renderingserver-method-voxel-gi-get-to-cell-xform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-set-baked-exposure-normalization"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-set-baked-exposure-normalization" names="class_renderingserver_method_voxel_gi_set_baked_exposure_normalization"><abbreviation explanation="无返回值。">void</abbreviation> <strong>voxel_gi_set_baked_exposure_normalization</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, baked_exposure: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-voxel-gi-set-baked-exposure-normalization"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于通知渲染器烘焙体素 GI 时使用的曝光归一化值。运行时会使用这个值进行调制，确保体素 GI 能够维持恒定的曝光等级，即便场景范围的曝光归一化值在运行时发生改变。更多信息见 <reference internal="True" refid="class-renderingserver-method-camera-attributes-set-exposure"><inline classes="std std-ref">camera_attributes_set_exposure</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-set-bias"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-set-bias" names="class_renderingserver_method_voxel_gi_set_bias"><abbreviation explanation="无返回值。">void</abbreviation> <strong>voxel_gi_set_bias</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bias: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-voxel-gi-set-bias"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 为 <literal>voxel_gi</literal> 的对象设置 <reference internal="True" refuri="class_voxelgidata#class-voxelgidata-property-bias"><inline classes="std std-ref">VoxelGIData.bias</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-set-dynamic-range"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-set-dynamic-range" names="class_renderingserver_method_voxel_gi_set_dynamic_range"><abbreviation explanation="无返回值。">void</abbreviation> <strong>voxel_gi_set_dynamic_range</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, range: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-voxel-gi-set-dynamic-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 为 <literal>voxel_gi</literal> 的对象设置 <reference internal="True" refuri="class_voxelgidata#class-voxelgidata-property-dynamic-range"><inline classes="std std-ref">VoxelGIData.dynamic_range</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-set-energy"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-set-energy" names="class_renderingserver_method_voxel_gi_set_energy"><abbreviation explanation="无返回值。">void</abbreviation> <strong>voxel_gi_set_energy</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, energy: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-voxel-gi-set-energy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 为 <literal>voxel_gi</literal> 的对象设置 <reference internal="True" refuri="class_voxelgidata#class-voxelgidata-property-energy"><inline classes="std std-ref">VoxelGIData.energy</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-set-interior"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-set-interior" names="class_renderingserver_method_voxel_gi_set_interior"><abbreviation explanation="无返回值。">void</abbreviation> <strong>voxel_gi_set_interior</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-voxel-gi-set-interior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 为 <literal>voxel_gi</literal> 的对象设置 <reference internal="True" refuri="class_voxelgidata#class-voxelgidata-property-interior"><inline classes="std std-ref">VoxelGIData.interior</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-set-normal-bias"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-set-normal-bias" names="class_renderingserver_method_voxel_gi_set_normal_bias"><abbreviation explanation="无返回值。">void</abbreviation> <strong>voxel_gi_set_normal_bias</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, bias: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-voxel-gi-set-normal-bias"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 为 <literal>voxel_gi</literal> 的对象设置 <reference internal="True" refuri="class_voxelgidata#class-voxelgidata-property-normal-bias"><inline classes="std std-ref">VoxelGIData.normal_bias</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-set-propagation"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-set-propagation" names="class_renderingserver_method_voxel_gi_set_propagation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>voxel_gi_set_propagation</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-renderingserver-method-voxel-gi-set-propagation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 为 <literal>voxel_gi</literal> 的对象设置 <reference internal="True" refuri="class_voxelgidata#class-voxelgidata-property-propagation"><inline classes="std std-ref">VoxelGIData.propagation</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-set-quality"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-set-quality" names="class_renderingserver_method_voxel_gi_set_quality"><abbreviation explanation="无返回值。">void</abbreviation> <strong>voxel_gi_set_quality</strong>(quality: <reference internal="True" refid="enum-renderingserver-voxelgiquality"><inline classes="std std-ref">VoxelGIQuality</inline></reference>) <reference internal="True" refid="class-renderingserver-method-voxel-gi-set-quality"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置渲染时使用的 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-global-illumination-voxel-gi-quality"><inline classes="std std-ref">ProjectSettings.rendering/global_illumination/voxel_gi/quality</inline></reference> 值。这个参数是全局的，无法为单独的 VoxelGI 进行设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingserver-method-voxel-gi-set-use-two-bounces"></target>
            <paragraph classes="classref-method" ids="class-renderingserver-method-voxel-gi-set-use-two-bounces" names="class_renderingserver_method_voxel_gi_set_use_two_bounces"><abbreviation explanation="无返回值。">void</abbreviation> <strong>voxel_gi_set_use_two_bounces</strong>(voxel_gi: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-renderingserver-method-voxel-gi-set-use-two-bounces"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 为 <literal>voxel_gi</literal> 的对象设置 <reference internal="True" refuri="class_voxelgidata#class-voxelgidata-property-use-two-bounces"><inline classes="std std-ref">VoxelGIData.use_two_bounces</inline></reference> 值。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
