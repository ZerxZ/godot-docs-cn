<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editorinspectorplugin.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/EditorInspectorPlugin.xml.</comment>
    <target refid="class-editorinspectorplugin"></target>
    <section ids="editorinspectorplugin class-editorinspectorplugin" names="editorinspectorplugin class_editorinspectorplugin">
        <title>EditorInspectorPlugin</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>插件，用于在检查器上添加自定义属性编辑器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>EditorInspectorPlugin</strong> 允许将自定义属性编辑器添加到 <reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference>。</paragraph>
            <paragraph>当编辑对象时，会调用 <reference internal="True" refid="class-editorinspectorplugin-private-method-can-handle"><inline classes="std std-ref">_can_handle</inline></reference> 函数，如果支持该对象类型，则必须返回 <literal>true</literal>。</paragraph>
            <paragraph>如果支持，函数 <reference internal="True" refid="class-editorinspectorplugin-private-method-parse-begin"><inline classes="std std-ref">_parse_begin</inline></reference> 将被调用，允许在类的开头放置自定义控件。</paragraph>
            <paragraph>随后，为每个类别和属性调用 <reference internal="True" refid="class-editorinspectorplugin-private-method-parse-category"><inline classes="std std-ref">_parse_category</inline></reference> 和 <reference internal="True" refid="class-editorinspectorplugin-private-method-parse-property"><inline classes="std std-ref">_parse_property</inline></reference>。它们也提供了向检查器添加自定义控件的能力。</paragraph>
            <paragraph>最后，将调用 <reference internal="True" refid="class-editorinspectorplugin-private-method-parse-end"><inline classes="std std-ref">_parse_end</inline></reference>。</paragraph>
            <paragraph>在这些调用中的每一个，都可以调用“add”函数。</paragraph>
            <paragraph>要使用 <strong>EditorInspectorPlugin</strong>，首先使用 <reference internal="True" refuri="class_editorplugin#class-editorplugin-method-add-inspector-plugin"><inline classes="std std-ref">EditorPlugin.add_inspector_plugin</inline></reference> 方法注册它。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/plugins/editor/inspector_plugins"><inline classes="doc">检查器插件</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="458"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinspectorplugin-private-method-can-handle"><inline classes="std std-ref">_can_handle</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinspectorplugin-private-method-parse-begin"><inline classes="std std-ref">_parse_begin</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinspectorplugin-private-method-parse-category"><inline classes="std std-ref">_parse_category</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> category <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinspectorplugin-private-method-parse-end"><inline classes="std std-ref">_parse_end</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinspectorplugin-private-method-parse-group"><inline classes="std std-ref">_parse_group</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> group <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinspectorplugin-private-method-parse-property"><inline classes="std std-ref">_parse_property</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_@globalscope#enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> type, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_@globalscope#enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> hint_type, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> hint_string, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_@globalscope#enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference>&gt; usage_flags, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> wide <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinspectorplugin-method-add-custom-control"><inline classes="std std-ref">add_custom_control</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> control <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinspectorplugin-method-add-property-editor"><inline classes="std std-ref">add_property_editor</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> property, <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> editor, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> add_to_end=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinspectorplugin-method-add-property-editor-for-multiple-properties"><inline classes="std std-ref">add_property_editor_for_multiple_properties</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> label, <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> properties, <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> editor <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editorinspectorplugin-private-method-can-handle"></target>
            <paragraph classes="classref-method" ids="class-editorinspectorplugin-private-method-can-handle" names="class_editorinspectorplugin_private_method__can_handle"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_can_handle</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果此插件可以处理此对象返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspectorplugin-private-method-parse-begin"></target>
            <paragraph classes="classref-method" ids="class-editorinspectorplugin-private-method-parse-begin" names="class_editorinspectorplugin_private_method__parse_begin">void <strong>_parse_begin</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>可以将控件添加在 <literal>object</literal> 的属性列表开头时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspectorplugin-private-method-parse-category"></target>
            <paragraph classes="classref-method" ids="class-editorinspectorplugin-private-method-parse-category" names="class_editorinspectorplugin_private_method__parse_category">void <strong>_parse_category</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> category <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>可以将控件添加在 <literal>object</literal> 属性列表中的某个分类开头时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspectorplugin-private-method-parse-end"></target>
            <paragraph classes="classref-method" ids="class-editorinspectorplugin-private-method-parse-end" names="class_editorinspectorplugin_private_method__parse_end">void <strong>_parse_end</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>可以将控件添加在 <literal>object</literal> 的属性列表末尾时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspectorplugin-private-method-parse-group"></target>
            <paragraph classes="classref-method" ids="class-editorinspectorplugin-private-method-parse-group" names="class_editorinspectorplugin_private_method__parse_group">void <strong>_parse_group</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> group <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>可以将控件添加在 <literal>object</literal> 属性列表的某个分组或子分组的开头时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspectorplugin-private-method-parse-property"></target>
            <paragraph classes="classref-method" ids="class-editorinspectorplugin-private-method-parse-property" names="class_editorinspectorplugin_private_method__parse_property"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_parse_property</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_@globalscope#enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> type, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_@globalscope#enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> hint_type, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> hint_string, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_@globalscope#enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference>&gt; usage_flags, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> wide <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>可以为 <literal>object</literal> 的属性列表添加针对属性的编辑器时调用。这些编辑器必须继承 <reference internal="True" refuri="class_editorproperty#class-editorproperty"><inline classes="std std-ref">EditorProperty</inline></reference>。返回 <literal>true</literal> 会移除该属性的内置编辑器，否则会在内置编辑器之前插入自定义编辑器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspectorplugin-method-add-custom-control"></target>
            <paragraph classes="classref-method" ids="class-editorinspectorplugin-method-add-custom-control" names="class_editorinspectorplugin_method_add_custom_control">void <strong>add_custom_control</strong> <strong>(</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> control <strong>)</strong></paragraph>
            <paragraph>添加自定义控件，它不一定是属性编辑器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspectorplugin-method-add-property-editor"></target>
            <paragraph classes="classref-method" ids="class-editorinspectorplugin-method-add-property-editor" names="class_editorinspectorplugin_method_add_property_editor">void <strong>add_property_editor</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> property, <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> editor, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> add_to_end=false <strong>)</strong></paragraph>
            <paragraph>为单独的属性添加属性编辑器。<literal>editor</literal> 控件必须扩展 <reference internal="True" refuri="class_editorproperty#class-editorproperty"><inline classes="std std-ref">EditorProperty</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspectorplugin-method-add-property-editor-for-multiple-properties"></target>
            <paragraph classes="classref-method" ids="class-editorinspectorplugin-method-add-property-editor-for-multiple-properties" names="class_editorinspectorplugin_method_add_property_editor_for_multiple_properties">void <strong>add_property_editor_for_multiple_properties</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> label, <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> properties, <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> editor <strong>)</strong></paragraph>
            <paragraph>添加能够修改多个属性的编辑器。<literal>editor</literal> 控件必须扩展 <reference internal="True" refuri="class_editorproperty#class-editorproperty"><inline classes="std std-ref">EditorProperty</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
