<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_udpserver.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/UDPServer.xml.</comment>
    <target refid="class-udpserver"></target>
    <section ids="udpserver class-udpserver" names="udpserver class_udpserver">
        <title>UDPServer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于实现 UDP 服务器的辅助类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>简易服务器，会打开 UDP 套接字，并在收到新数据包时返回已连接的 <reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp"><inline classes="std std-ref">PacketPeerUDP</inline></reference>。另见 <reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp-method-connect-to-host"><inline classes="std std-ref">PacketPeerUDP.connect_to_host</inline></reference>。</paragraph>
            <paragraph>服务器启动后（<reference internal="True" refid="class-udpserver-method-listen"><inline classes="std std-ref">listen</inline></reference>），你需要调用 <reference internal="True" refid="class-udpserver-method-poll"><inline classes="std std-ref">poll</inline></reference> 按照一定的间隔轮询（例如在 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference> 中）才能处理新数据包、将它们传递给合适的 <reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp"><inline classes="std std-ref">PacketPeerUDP</inline></reference>、获取新连接。</paragraph>
            <paragraph>下面是简单的用法示例：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># server_node.gd
class_name ServerNode
extends Node

var server := UDPServer.new()
var peers = []

func _ready():
    server.listen(4242)

func _process(delta):
    server.poll() # 重要！
    if server.is_connection_available():
        var peer: PacketPeerUDP = server.take_connection()
        var packet = peer.get_packet()
        print("接受对等体：%s:%s" % [peer.get_packet_ip(), peer.get_packet_port()])
        print("接收到数据：%s" % [packet.get_string_from_utf8()])
        # 进行回复，这样对方就知道我们收到了消息。
        peer.put_packet(packet)
        # 保持引用，这样我们就能继续与远程对等体联系。
        peers.append(peer)

    for i in range(0, peers.size()):
        pass # 针对已连接的对等体进行操作。</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// ServerNode.cs
using Godot;
using System.Collections.Generic;

public partial class ServerNode : Node
{
    private UdpServer _server = new UdpServer();
    private List&lt;PacketPeerUdp&gt; _peers  = new List&lt;PacketPeerUdp&gt;();

    public override void _Ready()
    {
        _server.Listen(4242);
    }

    public override void _Process(double delta)
    {
        _server.Poll(); // 重要！
        if (_server.IsConnectionAvailable())
        {
            PacketPeerUdp peer = _server.TakeConnection();
            byte[] packet = peer.GetPacket();
            GD.Print($"接受对等体：{peer.GetPacketIP()}:{peer.GetPacketPort()}");
            GD.Print($"接收到数据：{packet.GetStringFromUtf8()}");
            // 进行回复，这样对方就知道我们收到了消息。
            peer.PutPacket(packet);
            // 保持引用，这样我们就能继续与远程对等体联系。
            _peers.Add(peer);
        }
        foreach (var peer in _peers)
        {
            // 针对已连接的对等体进行操作。
        }
    }
}</literal_block>
                </div>
            </container>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># client_node.gd
class_name ClientNode
extends Node

var udp := PacketPeerUDP.new()
var connected = false

func _ready():
    udp.connect_to_host("127.0.0.1", 4242)

func _process(delta):
    if !connected:
        # 尝试连接服务器
        udp.put_packet("答案是……42！".to_utf8_buffer())
    if udp.get_available_packet_count() &gt; 0:
        print("已连接：%s" % udp.get_packet().get_string_from_utf8())
        connected = true</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// ClientNode.cs
using Godot;

public partial class ClientNode : Node
{
    private PacketPeerUdp _udp = new PacketPeerUdp();
    private bool _connected = false;

    public override void _Ready()
    {
        _udp.ConnectToHost("127.0.0.1", 4242);
    }

    public override void _Process(double delta)
    {
        if (!_connected)
        {
            // 尝试联系服务器
            _udp.PutPacket("答案是……42！".ToUtf8Buffer());
        }
        if (_udp.GetAvailablePacketCount() &gt; 0)
        {
            GD.Print($"已连接：{_udp.GetPacket().GetStringFromUtf8()}");
            _connected = true;
        }
    }
}</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="23"></colspec>
                    <colspec colwidth="82"></colspec>
                    <colspec colwidth="8"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-udpserver-property-max-pending-connections"><inline classes="std std-ref">max_pending_connections</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>16</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="43"></colspec>
                    <colspec colwidth="132"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-udpserver-method-get-local-port"><inline classes="std std-ref">get_local_port</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-udpserver-method-is-connection-available"><inline classes="std std-ref">is_connection_available</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-udpserver-method-is-listening"><inline classes="std std-ref">is_listening</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-udpserver-method-listen"><inline classes="std std-ref">listen</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bind_address: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "*")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-udpserver-method-poll"><inline classes="std std-ref">poll</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-udpserver-method-stop"><inline classes="std std-ref">stop</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp"><inline classes="std std-ref">PacketPeerUDP</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-udpserver-method-take-connection"><inline classes="std std-ref">take_connection</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-udpserver-property-max-pending-connections"></target>
            <paragraph classes="classref-property" ids="class-udpserver-property-max-pending-connections" names="class_udpserver_property_max_pending_connections"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_pending_connections</strong> = <literal>16</literal> <reference internal="True" refid="class-udpserver-property-max-pending-connections"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_pending_connections</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_pending_connections</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>定义最大的待定连接数，在<reference internal="True" refid="class-udpserver-method-poll"><inline classes="std std-ref">poll</inline></reference>期间，任何超过该值的新待定连接将被自动放弃。把这个值设置为<literal>0</literal>可以有效地防止任何新的待定连接被接受，例如，当你的所有玩家都连接时。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-udpserver-method-get-local-port"></target>
            <paragraph classes="classref-method" ids="class-udpserver-method-get-local-port" names="class_udpserver_method_get_local_port"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_local_port</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-udpserver-method-get-local-port"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该服务器正在监听的本地端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-udpserver-method-is-connection-available"></target>
            <paragraph classes="classref-method" ids="class-udpserver-method-is-connection-available" names="class_udpserver_method_is_connection_available"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_connection_available</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-udpserver-method-is-connection-available"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果在套接字中收到一个具有新地址及端口组合的数据包，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-udpserver-method-is-listening"></target>
            <paragraph classes="classref-method" ids="class-udpserver-method-is-listening" names="class_udpserver_method_is_listening"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_listening</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-udpserver-method-is-listening"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果套接字是打开的，并且在监听端口，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-udpserver-method-listen"></target>
            <paragraph classes="classref-method" ids="class-udpserver-method-listen" names="class_udpserver_method_listen"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>listen</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bind_address: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "*") <reference internal="True" refid="class-udpserver-method-listen"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启动服务器，打开监听给定端口 <literal>port</literal> 的 UDP 套接字。还可以指定 <literal>bind_address</literal>，仅监听发送至该地址的数据包。另见 <reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp-method-bind"><inline classes="std std-ref">PacketPeerUDP.bind</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-udpserver-method-poll"></target>
            <paragraph classes="classref-method" ids="class-udpserver-method-poll" names="class_udpserver_method_poll"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>poll</strong>() <reference internal="True" refid="class-udpserver-method-poll"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>定期调用这个方法，例如在<reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference>里面，来处理新数据包。来自已知地址及端口对的数据包，将被传递到相应的<reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp"><inline classes="std std-ref">PacketPeerUDP</inline></reference>，任何从未知地址及端口对收到的数据包将被添加为一个待定连接，参阅<reference internal="True" refid="class-udpserver-method-is-connection-available"><inline classes="std std-ref">is_connection_available</inline></reference>, <reference internal="True" refid="class-udpserver-method-take-connection"><inline classes="std std-ref">take_connection</inline></reference>。待定连接的最大数量通过<reference internal="True" refid="class-udpserver-property-max-pending-connections"><inline classes="std std-ref">max_pending_connections</inline></reference>定义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-udpserver-method-stop"></target>
            <paragraph classes="classref-method" ids="class-udpserver-method-stop" names="class_udpserver_method_stop"><abbreviation explanation="无返回值。">void</abbreviation> <strong>stop</strong>() <reference internal="True" refid="class-udpserver-method-stop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>停止服务器，如果 UDP 套接字处于打开状态，就关闭它。将关闭所有通过 <reference internal="True" refid="class-udpserver-method-take-connection"><inline classes="std std-ref">take_connection</inline></reference> 接受连接的 <reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp"><inline classes="std std-ref">PacketPeerUDP</inline></reference>（不会通知远程对等体）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-udpserver-method-take-connection"></target>
            <paragraph classes="classref-method" ids="class-udpserver-method-take-connection" names="class_udpserver_method_take_connection"><reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp"><inline classes="std std-ref">PacketPeerUDP</inline></reference> <strong>take_connection</strong>() <reference internal="True" refid="class-udpserver-method-take-connection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回第一个挂起的连接（连接到适当的地址及端口）。如果没有新的连接可用，将返回 <literal>null</literal>。另请参阅 <reference internal="True" refid="class-udpserver-method-is-connection-available"><inline classes="std std-ref">is_connection_available</inline></reference>、<reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp-method-connect-to-host"><inline classes="std std-ref">PacketPeerUDP.connect_to_host</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
