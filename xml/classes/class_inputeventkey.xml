<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_inputeventkey.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/InputEventKey.xml.</comment>
    <target refid="class-inputeventkey"></target>
    <section ids="inputeventkey class-inputeventkey" names="inputeventkey class_inputeventkey">
        <title>InputEventKey</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_inputeventwithmodifiers#class-inputeventwithmodifiers"><inline classes="std std-ref">InputEventWithModifiers</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_inputeventfromwindow#class-inputeventfromwindow"><inline classes="std std-ref">InputEventFromWindow</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>代表键盘上的某个按键被按下或松开。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>键盘上的按键操作对应的输入事件。支持按键按下、释放和 <reference internal="True" refid="class-inputeventkey-property-echo"><inline classes="std std-ref">echo</inline></reference> 事件。还可以在 <reference internal="True" refuri="class_node#class-node-private-method-unhandled-key-input"><inline classes="std std-ref">Node._unhandled_key_input</inline></reference> 收到。</paragraph>
            <paragraph><strong>注意：</strong>从键盘上接收的事件通常设置了所有属性。事件映射应该只设置 <reference internal="True" refid="class-inputeventkey-property-keycode"><inline classes="std std-ref">keycode</inline></reference>、<reference internal="True" refid="class-inputeventkey-property-physical-keycode"><inline classes="std std-ref">physical_keycode</inline></reference>、<reference internal="True" refid="class-inputeventkey-property-unicode"><inline classes="std std-ref">unicode</inline></reference> 的其中之一。</paragraph>
            <paragraph>比较事件时，将按以下优先级检查属性——<reference internal="True" refid="class-inputeventkey-property-keycode"><inline classes="std std-ref">keycode</inline></reference>、<reference internal="True" refid="class-inputeventkey-property-physical-keycode"><inline classes="std std-ref">physical_keycode</inline></reference>、<reference internal="True" refid="class-inputeventkey-property-unicode"><inline classes="std std-ref">unicode</inline></reference>。有一个匹配就会认为事件相等。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/inputs/inputevent"><inline classes="doc">使用 InputEvent</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="72"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-property-echo"><inline classes="std std-ref">echo</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-property-key-label"><inline classes="std std-ref">key_label</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-property-keycode"><inline classes="std std-ref">keycode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-keylocation"><inline classes="std std-ref">KeyLocation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-property-location"><inline classes="std std-ref">location</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-property-physical-keycode"><inline classes="std std-ref">physical_keycode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-property-pressed"><inline classes="std std-ref">pressed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-property-unicode"><inline classes="std std-ref">unicode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="122"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-method-as-text-key-label"><inline classes="std std-ref">as_text_key_label</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-method-as-text-keycode"><inline classes="std std-ref">as_text_keycode</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-method-as-text-location"><inline classes="std std-ref">as_text_location</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-method-as-text-physical-keycode"><inline classes="std std-ref">as_text_physical_keycode</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-method-get-key-label-with-modifiers"><inline classes="std std-ref">get_key_label_with_modifiers</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-method-get-keycode-with-modifiers"><inline classes="std std-ref">get_keycode_with_modifiers</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventkey-method-get-physical-keycode-with-modifiers"><inline classes="std std-ref">get_physical_keycode_with_modifiers</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-inputeventkey-property-echo"></target>
            <paragraph classes="classref-property" ids="class-inputeventkey-property-echo" names="class_inputeventkey_property_echo"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>echo</strong> = <literal>false</literal> <reference internal="True" refid="class-inputeventkey-property-echo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_echo</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_echo</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该键在此事件之前已被按下。这意味着用户正在按住该键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventkey-property-key-label"></target>
            <paragraph classes="classref-property" ids="class-inputeventkey-property-key-label" names="class_inputeventkey_property_key_label"><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>key_label</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventkey-property-key-label"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_key_label</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>get_key_label</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>表示当前键盘布局中印在键上的本地化标签，对应于 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 常量之一或任何有效的 Unicode 字符。</paragraph>
            <paragraph>对于键上只有一个标签的键盘布局，它等同于 <reference internal="True" refid="class-inputeventkey-property-keycode"><inline classes="std std-ref">keycode</inline></reference>。</paragraph>
            <paragraph>要获得 <strong>InputEventKey</strong> 的人类可读表示，请使用 <literal>OS.get_keycode_string(event.key_label)</literal>，其中 <literal>event</literal> 是 <strong>InputEventKey</strong>。</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">+-----+ +-----+
| Q   | | Q   | - "Q" - keycode
|   Й | |  ض | - "Й" and "ض" - key_label
+-----+ +-----+</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventkey-property-keycode"></target>
            <paragraph classes="classref-property" ids="class-inputeventkey-property-keycode" names="class_inputeventkey_property_keycode"><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>keycode</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventkey-property-keycode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_keycode</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>get_keycode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前键盘布局中键上打印的拉丁标签，对应于 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 常量之一。</paragraph>
            <paragraph>要获得 <strong>InputEventKey</strong> 的人类可读表示，请使用 <literal>OS.get_keycode_string(event.keycode)</literal>，其中 <literal>event</literal> 是 <strong>InputEventKey</strong>。</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">+-----+ +-----+
| Q   | | Q   | - "Q" - 键码
|   Й | |  ض | - "Й" 和 "ض" - key_label
+-----+ +-----+</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventkey-property-location"></target>
            <paragraph classes="classref-property" ids="class-inputeventkey-property-location" names="class_inputeventkey_property_location"><reference internal="True" refuri="class_@globalscope#enum-globalscope-keylocation"><inline classes="std std-ref">KeyLocation</inline></reference> <strong>location</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventkey-property-location"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_location</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-keylocation"><inline classes="std std-ref">KeyLocation</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-keylocation"><inline classes="std std-ref">KeyLocation</inline></reference> <strong>get_location</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>表示具有左右版本的键的位置，例如 <literal classes="kbd">Shift</literal> 和 <literal classes="kbd">Alt</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventkey-property-physical-keycode"></target>
            <paragraph classes="classref-property" ids="class-inputeventkey-property-physical-keycode" names="class_inputeventkey_property_physical_keycode"><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>physical_keycode</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventkey-property-physical-keycode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_physical_keycode</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>get_physical_keycode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>代表按键在 101/102 键的美式键盘上的物理位置，对应一个 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 常量。</paragraph>
            <paragraph>要获取 <strong>InputEventKey</strong> 的人类可读表示，请搭配使用 <reference internal="True" refuri="class_os#class-os-method-get-keycode-string"><inline classes="std std-ref">OS.get_keycode_string</inline></reference> 和 <reference internal="True" refuri="class_displayserver#class-displayserver-method-keyboard-get-keycode-from-physical"><inline classes="std std-ref">DisplayServer.keyboard_get_keycode_from_physical</inline></reference>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _input(event):
    if event is InputEventKey:
        var keycode = DisplayServer.keyboard_get_keycode_from_physical(event.physical_keycode)
        print(OS.get_keycode_string(keycode))</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Input(InputEvent @event)
{
    if (@event is InputEventKey inputEventKey)
    {
        var keycode = DisplayServer.KeyboardGetKeycodeFromPhysical(inputEventKey.PhysicalKeycode);
        GD.Print(OS.GetKeycodeString(keycode));
    }
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventkey-property-pressed"></target>
            <paragraph classes="classref-property" ids="class-inputeventkey-property-pressed" names="class_inputeventkey_property_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>pressed</strong> = <literal>false</literal> <reference internal="True" refid="class-inputeventkey-property-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pressed</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_pressed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，按键的状态是被按下。如果为 <literal>false</literal>，该键的状态被释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventkey-property-unicode"></target>
            <paragraph classes="classref-property" ids="class-inputeventkey-property-unicode" names="class_inputeventkey_property_unicode"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>unicode</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventkey-property-unicode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_unicode</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_unicode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>按键 Unicode 字符代码（当相关时），由修饰键移动。除非 IME 输入模式处于活动状态，否则复合字符和复杂文字的 Unicode 字符代码可能不可用。有关详细信息，请参阅 <reference internal="True" refuri="class_window#class-window-method-set-ime-active"><inline classes="std std-ref">Window.set_ime_active</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-inputeventkey-method-as-text-key-label"></target>
            <paragraph classes="classref-method" ids="class-inputeventkey-method-as-text-key-label" names="class_inputeventkey_method_as_text_key_label"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>as_text_key_label</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputeventkey-method-as-text-key-label"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该事件 <reference internal="True" refid="class-inputeventkey-property-key-label"><inline classes="std std-ref">key_label</inline></reference> 及修饰键的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 字符串表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventkey-method-as-text-keycode"></target>
            <paragraph classes="classref-method" ids="class-inputeventkey-method-as-text-keycode" names="class_inputeventkey_method_as_text_keycode"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>as_text_keycode</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputeventkey-method-as-text-keycode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该事件 <reference internal="True" refid="class-inputeventkey-property-keycode"><inline classes="std std-ref">keycode</inline></reference> 及修饰键的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 字符串表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventkey-method-as-text-location"></target>
            <paragraph classes="classref-method" ids="class-inputeventkey-method-as-text-location" names="class_inputeventkey_method_as_text_location"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>as_text_location</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputeventkey-method-as-text-location"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回事件的 <reference internal="True" refid="class-inputeventkey-property-location"><inline classes="std std-ref">location</inline></reference> 的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 表示形式。如果该事件不特定于某个位置，则这将是一个空白字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventkey-method-as-text-physical-keycode"></target>
            <paragraph classes="classref-method" ids="class-inputeventkey-method-as-text-physical-keycode" names="class_inputeventkey_method_as_text_physical_keycode"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>as_text_physical_keycode</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputeventkey-method-as-text-physical-keycode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该事件 <reference internal="True" refid="class-inputeventkey-property-physical-keycode"><inline classes="std std-ref">physical_keycode</inline></reference> 及修饰键的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 字符串表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventkey-method-get-key-label-with-modifiers"></target>
            <paragraph classes="classref-method" ids="class-inputeventkey-method-get-key-label-with-modifiers" names="class_inputeventkey_method_get_key_label_with_modifiers"><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>get_key_label_with_modifiers</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputeventkey-method-get-key-label-with-modifiers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与修饰键，例如 <literal classes="kbd">Shift</literal> 或 <literal classes="kbd">Alt</literal> 组合的本地化键标签。另见 <reference internal="True" refuri="class_inputeventwithmodifiers#class-inputeventwithmodifiers"><inline classes="std std-ref">InputEventWithModifiers</inline></reference>。</paragraph>
            <paragraph>要获得带有修饰键的 <strong>InputEventKey</strong> 的人类可读表示，请使用 <literal>OS.get_keycode_string(event.get_key_label_with_modifiers())</literal>，其中 <literal>event</literal> 是 <strong>InputEventKey</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventkey-method-get-keycode-with-modifiers"></target>
            <paragraph classes="classref-method" ids="class-inputeventkey-method-get-keycode-with-modifiers" names="class_inputeventkey_method_get_keycode_with_modifiers"><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>get_keycode_with_modifiers</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputeventkey-method-get-keycode-with-modifiers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与 <literal classes="kbd">Shift</literal> 或 <literal classes="kbd">Alt</literal> 等修饰键组合的拉丁键码。另见 <reference internal="True" refuri="class_inputeventwithmodifiers#class-inputeventwithmodifiers"><inline classes="std std-ref">InputEventWithModifiers</inline></reference>。</paragraph>
            <paragraph>要获得带有修饰键的 <strong>InputEventKey</strong> 的人类可读表示，请使用 <literal>OS.get_keycode_string(event.get_keycode_with_modifiers())</literal>，其中 <literal>event</literal> 是 <strong>InputEventKey</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventkey-method-get-physical-keycode-with-modifiers"></target>
            <paragraph classes="classref-method" ids="class-inputeventkey-method-get-physical-keycode-with-modifiers" names="class_inputeventkey_method_get_physical_keycode_with_modifiers"><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>get_physical_keycode_with_modifiers</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputeventkey-method-get-physical-keycode-with-modifiers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与诸如 <literal classes="kbd">Shift</literal> 或 <literal classes="kbd">Alt</literal> 的修饰键组合的物理键码。另请参阅 <reference internal="True" refuri="class_inputeventwithmodifiers#class-inputeventwithmodifiers"><inline classes="std std-ref">InputEventWithModifiers</inline></reference>。</paragraph>
            <paragraph>要获得带有修饰符的 <strong>InputEventKey</strong> 的人类可读表示，请使用 <literal>OS.get_keycode_string(event.get_physical_keycode_with_modifiers())</literal>，其中 <literal>event</literal> 是 <strong>InputEventKey</strong>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
