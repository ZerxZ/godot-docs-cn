<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_webxrinterface.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/webxr/doc_classes/WebXRInterface.xml.</comment>
    <target refid="class-webxrinterface"></target>
    <section ids="webxrinterface class-webxrinterface" names="webxrinterface class_webxrinterface">
        <title>WebXRInterface</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>使用 WebXR 的 AR/VR 接口。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>WebXR 是一种开放标准，允许创建在网络浏览器中运行的 VR 和 AR 应用程序。</paragraph>
            <paragraph>因此，此接口仅在 Web 导出中运行时可用。</paragraph>
            <paragraph>WebXR 支持范围广泛的设备，从功能强大的设备（如 Valve Index、HTC Vive、Oculus Rift 和 Quest）到功能低得多的设备（如 Google Cardboard、Oculus Go、GearVR 或普通智能手机）。</paragraph>
            <paragraph>由于 WebXR 基于 JavaScript，它大量使用回调，这意味着 <strong>WebXRInterface</strong> 被迫使用信号，而其他 XR 接口将改为使用立即返回结果的函数。这使得 <strong>WebXRInterface</strong> 的初始化比其他 XR 接口要复杂得多。</paragraph>
            <paragraph>以下是启动沉浸式 VR 会话所需的最少代码：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">extends Node3D

var webxr_interface
var vr_supported = false

func _ready():
    # 我们假设这个节点有一个按钮作为子节点。
    # 该按钮供用户同意进入沉浸式 VR 模式。
    $Button.pressed.connect(self._on_button_pressed)

    webxr_interface = XRServer.find_interface("WebXR")
    if webxr_interface:
        # WebXR 使用了很多异步回调，所以我们连接各种
        # 信号，以便接收它们。
        webxr_interface.session_supported.connect(self._webxr_session_supported)
        webxr_interface.session_started.connect(self._webxr_session_started)
        webxr_interface.session_ended.connect(self._webxr_session_ended)
        webxr_interface.session_failed.connect(self._webxr_session_failed)

        # 这会立即返回——我们的 _webxr_session_supported() 方法
        # （我们连接到上面的“session_supported”信号）将
        # 在稍后的某个时间被调用，让我们知道它是否受支持。
        webxr_interface.is_session_supported("immersive-vr")

func _webxr_session_supported(session_mode, supported):
    if session_mode == 'immersive-vr':
        vr_supported = supported

func _on_button_pressed():
    if not vr_supported:
        OS.alert("Your browser doesn't support VR")
        return

    # 我们想要一个沉浸式 VR 会话，而不是 AR（'immersive-ar'）或
    # 简单的 3DoF 查看器（'viewer'）。
    webxr_interface.session_mode = 'immersive-vr'
    # 'bounded-floor' 是房间比例，'local-floor' 是站立或坐着
    # 的体验（如果你有 3DoF 头戴设备，它会让你离地 1.6m），
    # 而“local”会让你在 XROrigin 下。
    # 这个列表意味着它会首先尝试请求“bounded-floor”，然后
    # 回退到“local-floor”，最后是“local”，如果没有别的
    # 支持的话。
    webxr_interface.requested_reference_space_types = 'bounded-floor, local-floor, local'
    # 为了使用“local-floor”或“bounded-floor”，我们还必须
    # 将功能标记为必需或可选。
    webxr_interface.required_features = 'local-floor'
    webxr_interface.optional_features = 'bounded-floor'

    # 如果我们甚至无法请求会话，这将返回 false，
    # 但是，它仍然可以在稍后的过程中异步失败，
    # 因此我们只有在调用 _webxr_session_started() 或
    # _webxr_session_failed() 方法时才知道它是真的成功还是失败。
    if not webxr_interface.initialize():
        OS.alert("Failed to initialize")
        return

func _webxr_session_started():
    $Button.visible = false
    # 这告诉 Godot 开始渲染到头戴设备。
    get_viewport().use_xr = true
    # 这将是你最终获得的参考空间类型，与你在上面请求的类型不同。
    # 如果你希望游戏在 “bounded-floor” 和 “local-floor”
    # 中的运行方式有所不同，这将很有用。
    print ("Reference space type: " + webxr_interface.reference_space_type)

func _webxr_session_ended():
    $Button.visible = true
    # 如果用户退出沉浸式模式，那么我们会告诉 Godot
    # 再次渲染到网页。
    get_viewport().use_xr = false

func _webxr_session_failed(message):
    OS.alert("Failed to initialize: " + message)</literal_block>
            <paragraph>有几种方法可以处理“控制器”输入：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="class_xrcontroller3d#class-xrcontroller3d"><inline classes="std std-ref">XRController3D</inline></reference> 节点及其 <reference internal="True" refuri="class_xrcontroller3d#class-xrcontroller3d-signal-button-pressed"><inline classes="std std-ref">XRController3D.button_pressed</inline></reference> 和 <reference internal="True" refuri="class_xrcontroller3d#class-xrcontroller3d-signal-button-released"><inline classes="std std-ref">XRController3D.button_released</inline></reference> 信号。这是 Godot 中 XR 应用程序通常处理控制器的方式，但是，这仅适用于高级 VR 控制器，例如 Oculus Touch 或 Index 控制器。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refid="class-webxrinterface-signal-select"><inline classes="std std-ref">select</inline></reference>、<reference internal="True" refid="class-webxrinterface-signal-squeeze"><inline classes="std std-ref">squeeze</inline></reference> 和其他相关信号。这种方法适用于高级 VR 控制器和非传统输入源，例如屏幕上的轻敲、语音命令或设备本身的按钮按下。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>你可以使用这两种方法来让你的游戏或应用程序支持更多或更窄的设备和输入法集，或者允许与更高级的设备进行更高级的交互。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="如何使用 Godot 4 制作 WebXR 的 VR 游戏" refuri="https://www.snopekgames.com/tutorial/2023/how-make-vr-game-webxr-godot-4">如何使用 Godot 4 制作 WebXR 的 VR 游戏</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="103"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-property-enabled-features"><inline classes="std std-ref">enabled_features</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-property-optional-features"><inline classes="std std-ref">optional_features</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-property-reference-space-type"><inline classes="std std-ref">reference_space_type</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-property-requested-reference-space-types"><inline classes="std std-ref">requested_reference_space_types</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-property-required-features"><inline classes="std std-ref">required_features</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-property-session-mode"><inline classes="std std-ref">session_mode</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-property-visibility-state"><inline classes="std std-ref">visibility_state</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="57"></colspec>
                    <colspec colwidth="158"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-method-get-available-display-refresh-rates"><inline classes="std std-ref">get_available_display_refresh_rates</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-method-get-display-refresh-rate"><inline classes="std std-ref">get_display_refresh_rate</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-webxrinterface-targetraymode"><inline classes="std std-ref">TargetRayMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-method-get-input-source-target-ray-mode"><inline classes="std std-ref">get_input_source_target_ray_mode</inline></reference>(input_source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_xrcontrollertracker#class-xrcontrollertracker"><inline classes="std std-ref">XRControllerTracker</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-method-get-input-source-tracker"><inline classes="std std-ref">get_input_source_tracker</inline></reference>(input_source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-method-is-input-source-active"><inline classes="std std-ref">is_input_source_active</inline></reference>(input_source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-method-is-session-supported"><inline classes="std std-ref">is_session_supported</inline></reference>(session_mode: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webxrinterface-method-set-display-refresh-rate"><inline classes="std std-ref">set_display_refresh_rate</inline></reference>(refresh_rate: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-webxrinterface-signal-display-refresh-rate-changed"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-display-refresh-rate-changed" names="class_webxrinterface_signal_display_refresh_rate_changed"><strong>display_refresh_rate_changed</strong>() <reference internal="True" refid="class-webxrinterface-signal-display-refresh-rate-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>显示器的刷新率发生改变后触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-signal-reference-space-reset"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-reference-space-reset" names="class_webxrinterface_signal_reference_space_reset"><strong>reference_space_reset</strong>() <reference internal="True" refid="class-webxrinterface-signal-reference-space-reset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>发射以表明参考空间已被重置或重新配置。</paragraph>
            <paragraph>何时（或是否）发射取决于用户的浏览器或设备，但可能包括用户改变了他们的游戏空间的大小（可以通过 <reference internal="True" refuri="class_xrinterface#class-xrinterface-method-get-play-area"><inline classes="std std-ref">XRInterface.get_play_area</inline></reference> 访问），或按下/按住一个按钮来重新定位他们的位置。</paragraph>
            <paragraph>有关详细信息，请参阅 <reference name="WebXR 的 XRReferenceSpace 重置事件" refuri="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace/reset_event">WebXR 的 XRReferenceSpace 重置事件</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-signal-select"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-select" names="class_webxrinterface_signal_select"><strong>select</strong>(input_source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-webxrinterface-signal-select"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>某个输入源完成其“主要动作”后发出。</paragraph>
            <paragraph>请使用 <reference internal="True" refid="class-webxrinterface-method-get-input-source-tracker"><inline classes="std std-ref">get_input_source_tracker</inline></reference> 和 <reference internal="True" refid="class-webxrinterface-method-get-input-source-target-ray-mode"><inline classes="std std-ref">get_input_source_target_ray_mode</inline></reference> 获取关于该输入源的更多信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-signal-selectend"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-selectend" names="class_webxrinterface_signal_selectend"><strong>selectend</strong>(input_source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-webxrinterface-signal-selectend"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>某个输入源完成其“主要动作”时发出。</paragraph>
            <paragraph>请使用 <reference internal="True" refid="class-webxrinterface-method-get-input-source-tracker"><inline classes="std std-ref">get_input_source_tracker</inline></reference> 和 <reference internal="True" refid="class-webxrinterface-method-get-input-source-target-ray-mode"><inline classes="std std-ref">get_input_source_target_ray_mode</inline></reference> 获取关于该输入源的更多信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-signal-selectstart"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-selectstart" names="class_webxrinterface_signal_selectstart"><strong>selectstart</strong>(input_source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-webxrinterface-signal-selectstart"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>某个输入源开始其“主要动作”时发出。</paragraph>
            <paragraph>请使用 <reference internal="True" refid="class-webxrinterface-method-get-input-source-tracker"><inline classes="std std-ref">get_input_source_tracker</inline></reference> 和 <reference internal="True" refid="class-webxrinterface-method-get-input-source-target-ray-mode"><inline classes="std std-ref">get_input_source_target_ray_mode</inline></reference> 获取关于该输入源的更多信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-signal-session-ended"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-session-ended" names="class_webxrinterface_signal_session_ended"><strong>session_ended</strong>() <reference internal="True" refid="class-webxrinterface-signal-session-ended"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用户结束 WebXR 会话时发出（可以使用浏览器或设备的 UI 结束会话）。</paragraph>
            <paragraph>此时，你应该执行 <literal>get_viewport().use_xr = false</literal>，让 Godot 继续渲染至屏幕。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-signal-session-failed"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-session-failed" names="class_webxrinterface_signal_session_failed"><strong>session_failed</strong>(message: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-webxrinterface-signal-session-failed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由 <reference internal="True" refuri="class_xrinterface#class-xrinterface-method-initialize"><inline classes="std std-ref">XRInterface.initialize</inline></reference> 在该会话启动失败时发出。</paragraph>
            <paragraph><literal>message</literal> 可能会包含 WebXR 的错误信息，如果没有可用信息则为空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-signal-session-started"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-session-started" names="class_webxrinterface_signal_session_started"><strong>session_started</strong>() <reference internal="True" refid="class-webxrinterface-signal-session-started"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由 <reference internal="True" refuri="class_xrinterface#class-xrinterface-method-initialize"><inline classes="std std-ref">XRInterface.initialize</inline></reference> 在该会话启动成功时发出。</paragraph>
            <paragraph>此时，可以安全地执行 <literal>get_viewport().use_xr = true</literal>，让 Godot 开始渲染至 XR 设备。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-signal-session-supported"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-session-supported" names="class_webxrinterface_signal_session_supported"><strong>session_supported</strong>(session_mode: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-webxrinterface-signal-session-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由 <reference internal="True" refid="class-webxrinterface-method-is-session-supported"><inline classes="std std-ref">is_session_supported</inline></reference> 触发，表示是否支持指定的 <literal>session_mode</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-signal-squeeze"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-squeeze" names="class_webxrinterface_signal_squeeze"><strong>squeeze</strong>(input_source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-webxrinterface-signal-squeeze"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>某个输入源完成其“主要紧握动作”后发出。</paragraph>
            <paragraph>请使用 <reference internal="True" refid="class-webxrinterface-method-get-input-source-tracker"><inline classes="std std-ref">get_input_source_tracker</inline></reference> 和 <reference internal="True" refid="class-webxrinterface-method-get-input-source-target-ray-mode"><inline classes="std std-ref">get_input_source_target_ray_mode</inline></reference> 获取关于该输入源的更多信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-signal-squeezeend"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-squeezeend" names="class_webxrinterface_signal_squeezeend"><strong>squeezeend</strong>(input_source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-webxrinterface-signal-squeezeend"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>某个输入源完成其“主要紧握动作”时发出。</paragraph>
            <paragraph>请使用 <reference internal="True" refid="class-webxrinterface-method-get-input-source-tracker"><inline classes="std std-ref">get_input_source_tracker</inline></reference> 和 <reference internal="True" refid="class-webxrinterface-method-get-input-source-target-ray-mode"><inline classes="std std-ref">get_input_source_target_ray_mode</inline></reference> 获取关于该输入源的更多信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-signal-squeezestart"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-squeezestart" names="class_webxrinterface_signal_squeezestart"><strong>squeezestart</strong>(input_source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-webxrinterface-signal-squeezestart"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>某个输入源开始其“主要紧握动作”时发出。</paragraph>
            <paragraph>请使用 <reference internal="True" refid="class-webxrinterface-method-get-input-source-tracker"><inline classes="std std-ref">get_input_source_tracker</inline></reference> 和 <reference internal="True" refid="class-webxrinterface-method-get-input-source-target-ray-mode"><inline classes="std std-ref">get_input_source_target_ray_mode</inline></reference> 获取关于该输入源的更多信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-signal-visibility-state-changed"></target>
            <paragraph classes="classref-signal" ids="class-webxrinterface-signal-visibility-state-changed" names="class_webxrinterface_signal_visibility_state_changed"><strong>visibility_state_changed</strong>() <reference internal="True" refid="class-webxrinterface-signal-visibility-state-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <reference internal="True" refid="class-webxrinterface-property-visibility-state"><inline classes="std std-ref">visibility_state</inline></reference> 已更改时触发。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-webxrinterface-targetraymode"></target>
            <paragraph classes="classref-enumeration" ids="enum-webxrinterface-targetraymode" names="enum_webxrinterface_targetraymode">enum <strong>TargetRayMode</strong>: <reference internal="True" refid="enum-webxrinterface-targetraymode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-webxrinterface-constant-target-ray-mode-unknown"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webxrinterface-constant-target-ray-mode-unknown" names="class_webxrinterface_constant_target_ray_mode_unknown"><reference internal="True" refid="enum-webxrinterface-targetraymode"><inline classes="std std-ref">TargetRayMode</inline></reference> <strong>TARGET_RAY_MODE_UNKNOWN</strong> = <literal>0</literal></paragraph>
            <paragraph>不知道目标射线模式。</paragraph>
            <target refid="class-webxrinterface-constant-target-ray-mode-gaze"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webxrinterface-constant-target-ray-mode-gaze" names="class_webxrinterface_constant_target_ray_mode_gaze"><reference internal="True" refid="enum-webxrinterface-targetraymode"><inline classes="std std-ref">TargetRayMode</inline></reference> <strong>TARGET_RAY_MODE_GAZE</strong> = <literal>1</literal></paragraph>
            <paragraph>目标射线从观察者的眼睛出发，指向所观察的方向。</paragraph>
            <target refid="class-webxrinterface-constant-target-ray-mode-tracked-pointer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webxrinterface-constant-target-ray-mode-tracked-pointer" names="class_webxrinterface_constant_target_ray_mode_tracked_pointer"><reference internal="True" refid="enum-webxrinterface-targetraymode"><inline classes="std std-ref">TargetRayMode</inline></reference> <strong>TARGET_RAY_MODE_TRACKED_POINTER</strong> = <literal>2</literal></paragraph>
            <paragraph>目标射线由手持指示器发射，很可能是 VR 触摸控制器。</paragraph>
            <target refid="class-webxrinterface-constant-target-ray-mode-screen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webxrinterface-constant-target-ray-mode-screen" names="class_webxrinterface_constant_target_ray_mode_screen"><reference internal="True" refid="enum-webxrinterface-targetraymode"><inline classes="std std-ref">TargetRayMode</inline></reference> <strong>TARGET_RAY_MODE_SCREEN</strong> = <literal>3</literal></paragraph>
            <paragraph>目标射线由触摸屏、鼠标等触觉输入设备发射。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-webxrinterface-property-enabled-features"></target>
            <paragraph classes="classref-property" ids="class-webxrinterface-property-enabled-features" names="class_webxrinterface_property_enabled_features"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>enabled_features</strong> <reference internal="True" refid="class-webxrinterface-property-enabled-features"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_enabled_features</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置 WebXR 会话时通过 <reference internal="True" refuri="class_xrinterface#class-xrinterface-method-initialize"><inline classes="std std-ref">XRInterface.initialize</inline></reference> 成功启用的功能的逗号分隔列表。</paragraph>
            <paragraph>这可能包括通过设置 <reference internal="True" refid="class-webxrinterface-property-required-features"><inline classes="std std-ref">required_features</inline></reference> 和 <reference internal="True" refid="class-webxrinterface-property-optional-features"><inline classes="std std-ref">optional_features</inline></reference> 请求的功能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-property-optional-features"></target>
            <paragraph classes="classref-property" ids="class-webxrinterface-property-optional-features" names="class_webxrinterface_property_optional_features"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>optional_features</strong> <reference internal="True" refid="class-webxrinterface-property-optional-features"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_optional_features</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_optional_features</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="class_xrinterface#class-xrinterface-method-initialize"><inline classes="std std-ref">XRInterface.initialize</inline></reference> 在设置 WebXR 会话时使用的以逗号分隔的可选功能列表。</paragraph>
            <paragraph>如果用户的浏览器或设备，不支持给定的任一功能，初始化将继续，但将无法使用所请求的功能。</paragraph>
            <paragraph>这对已经初始化的接口没有任何影响。</paragraph>
            <paragraph>可能的值来自 <reference name="WebXR 的 XRReferenceSpaceType" refuri="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceType">WebXR 的 XRReferenceSpaceType</reference>。如果想要使用特定的参考空间类型，则它必须列在 <reference internal="True" refid="class-webxrinterface-property-required-features"><inline classes="std std-ref">required_features</inline></reference> 或 <reference internal="True" refid="class-webxrinterface-property-optional-features"><inline classes="std std-ref">optional_features</inline></reference> 中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-property-reference-space-type"></target>
            <paragraph classes="classref-property" ids="class-webxrinterface-property-reference-space-type" names="class_webxrinterface_property_reference_space_type"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>reference_space_type</strong> <reference internal="True" refid="class-webxrinterface-property-reference-space-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_reference_space_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>参考空间类型（来自 <reference internal="True" refid="class-webxrinterface-property-requested-reference-space-types"><inline classes="std std-ref">requested_reference_space_types</inline></reference> 属性中设置的请求类型列表），在设置 WebXR 会话时最终由 <reference internal="True" refuri="class_xrinterface#class-xrinterface-method-initialize"><inline classes="std std-ref">XRInterface.initialize</inline></reference> 使用。</paragraph>
            <paragraph>可能的值来自 <reference name="WebXR 的 XRReferenceSpaceType" refuri="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceType">WebXR 的 XRReferenceSpaceType</reference>。 如果想要使用特定的参考空间类型，则它必须列在 <reference internal="True" refid="class-webxrinterface-property-required-features"><inline classes="std std-ref">required_features</inline></reference> 或 <reference internal="True" refid="class-webxrinterface-property-optional-features"><inline classes="std std-ref">optional_features</inline></reference> 中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-property-requested-reference-space-types"></target>
            <paragraph classes="classref-property" ids="class-webxrinterface-property-requested-reference-space-types" names="class_webxrinterface_property_requested_reference_space_types"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>requested_reference_space_types</strong> <reference internal="True" refid="class-webxrinterface-property-requested-reference-space-types"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_requested_reference_space_types</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_requested_reference_space_types</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="class_xrinterface#class-xrinterface-method-initialize"><inline classes="std std-ref">XRInterface.initialize</inline></reference> 在设置 WebXR 会话时使用的以逗号分隔的参考空间类型列表。</paragraph>
            <paragraph>按顺序请求参考空间类型，将使用用户设备或浏览器支持的第一个。<reference internal="True" refid="class-webxrinterface-property-reference-space-type"><inline classes="std std-ref">reference_space_type</inline></reference> 属性包含最终选择的参考空间类型。</paragraph>
            <paragraph>这对已经初始化的接口没有任何影响。</paragraph>
            <paragraph>可能的值来自 <reference name="WebXR 的 XRReferenceSpaceType" refuri="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceType">WebXR 的 XRReferenceSpaceType</reference>。如果想要使用特定的参考空间类型，则它必须列在 <reference internal="True" refid="class-webxrinterface-property-required-features"><inline classes="std std-ref">required_features</inline></reference> 或 <reference internal="True" refid="class-webxrinterface-property-optional-features"><inline classes="std std-ref">optional_features</inline></reference> 中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-property-required-features"></target>
            <paragraph classes="classref-property" ids="class-webxrinterface-property-required-features" names="class_webxrinterface_property_required_features"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>required_features</strong> <reference internal="True" refid="class-webxrinterface-property-required-features"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_required_features</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_required_features</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="class_xrinterface#class-xrinterface-method-initialize"><inline classes="std std-ref">XRInterface.initialize</inline></reference> 在设置 WebXR 会话时使用的以逗号分隔的所需功能列表。</paragraph>
            <paragraph>如果用户的浏览器或设备不支持给定的任一功能，则初始化将失败并发出 <reference internal="True" refid="class-webxrinterface-signal-session-failed"><inline classes="std std-ref">session_failed</inline></reference> 。</paragraph>
            <paragraph>这对已经初始化的接口没有任何影响。</paragraph>
            <paragraph>可能的值来自 <reference name="WebXR 的 XRReferenceSpaceType" refuri="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceType">WebXR 的 XRReferenceSpaceType</reference>。如果想要使用特定的参考空间类型，则它必须列在 <reference internal="True" refid="class-webxrinterface-property-required-features"><inline classes="std std-ref">required_features</inline></reference> 或 <reference internal="True" refid="class-webxrinterface-property-optional-features"><inline classes="std std-ref">optional_features</inline></reference> 中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-property-session-mode"></target>
            <paragraph classes="classref-property" ids="class-webxrinterface-property-session-mode" names="class_webxrinterface_property_session_mode"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>session_mode</strong> <reference internal="True" refid="class-webxrinterface-property-session-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_session_mode</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_session_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>建立 WebXR 会话时，<reference internal="True" refuri="class_xrinterface#class-xrinterface-method-initialize"><inline classes="std std-ref">XRInterface.initialize</inline></reference> 使用的会话模式。</paragraph>
            <paragraph>这对已经初始化的接口没有任何影响。</paragraph>
            <paragraph>可能的值来自 <reference name="WebXR 的 XRSessionMode" refuri="https://developer.mozilla.org/en-US/docs/Web/API/XRSessionMode">WebXR 的 XRSessionMode</reference>，包括：<literal>"immersive-vr"</literal> 、<literal>"immersive-ar"</literal> 和 <literal>"inline"</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-property-visibility-state"></target>
            <paragraph classes="classref-property" ids="class-webxrinterface-property-visibility-state" names="class_webxrinterface_property_visibility_state"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>visibility_state</strong> <reference internal="True" refid="class-webxrinterface-property-visibility-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_visibility_state</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指示用户是否可以看到 WebXR 会话的图像。</paragraph>
            <paragraph>可能的值来自 <reference name="WebXR 的 XRVisibilityState" refuri="https://developer.mozilla.org/en-US/docs/Web/API/XRVisibilityState">WebXR 的 XRVisibilityState</reference>，包括 <literal>"hidden"</literal>、<literal>"visible"</literal> 和 <literal>"visible-blurred"</literal>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-webxrinterface-method-get-available-display-refresh-rates"></target>
            <paragraph classes="classref-method" ids="class-webxrinterface-method-get-available-display-refresh-rates" names="class_webxrinterface_method_get_available_display_refresh_rates"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_available_display_refresh_rates</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-webxrinterface-method-get-available-display-refresh-rates"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前 HMD 所支持的显示刷新率。网页浏览器支持该功能，并且该接口已初始化时才会返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-method-get-display-refresh-rate"></target>
            <paragraph classes="classref-method" ids="class-webxrinterface-method-get-display-refresh-rate" names="class_webxrinterface_method_get_display_refresh_rate"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_display_refresh_rate</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-webxrinterface-method-get-display-refresh-rate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前 HMD 的显示刷新率。不是所有 HMD 和浏览器都支持。使用 <reference internal="True" refid="class-webxrinterface-method-set-display-refresh-rate"><inline classes="std std-ref">set_display_refresh_rate</inline></reference> 前可能不会汇报精确值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-method-get-input-source-target-ray-mode"></target>
            <paragraph classes="classref-method" ids="class-webxrinterface-method-get-input-source-target-ray-mode" names="class_webxrinterface_method_get_input_source_target_ray_mode"><reference internal="True" refid="enum-webxrinterface-targetraymode"><inline classes="std std-ref">TargetRayMode</inline></reference> <strong>get_input_source_target_ray_mode</strong>(input_source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-webxrinterface-method-get-input-source-target-ray-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定的 <literal>input_source_id</literal> 的目标射线模式。</paragraph>
            <paragraph>可用于帮助解析来自该输入源的输入。详见 <reference name="XRInputSource.targetRayMode" refuri="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/targetRayMode">XRInputSource.targetRayMode</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-method-get-input-source-tracker"></target>
            <paragraph classes="classref-method" ids="class-webxrinterface-method-get-input-source-tracker" names="class_webxrinterface_method_get_input_source_tracker"><reference internal="True" refuri="class_xrcontrollertracker#class-xrcontrollertracker"><inline classes="std std-ref">XRControllerTracker</inline></reference> <strong>get_input_source_tracker</strong>(input_source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-webxrinterface-method-get-input-source-tracker"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Gets an <reference internal="True" refuri="class_xrcontrollertracker#class-xrcontrollertracker"><inline classes="std std-ref">XRControllerTracker</inline></reference> for the given <literal>input_source_id</literal>.</paragraph>
            <paragraph>In the context of WebXR, an input source can be an advanced VR controller like the Oculus Touch or Index controllers, or even a tap on the screen, a spoken voice command or a button press on the device itself. When a non-traditional input source is used, interpret the position and orientation of the <reference internal="True" refuri="class_xrpositionaltracker#class-xrpositionaltracker"><inline classes="std std-ref">XRPositionalTracker</inline></reference> as a ray pointing at the object the user wishes to interact with.</paragraph>
            <paragraph>Use this method to get information about the input source that triggered one of these signals:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refid="class-webxrinterface-signal-selectstart"><inline classes="std std-ref">selectstart</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-webxrinterface-signal-select"><inline classes="std std-ref">select</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-webxrinterface-signal-selectend"><inline classes="std std-ref">selectend</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-webxrinterface-signal-squeezestart"><inline classes="std std-ref">squeezestart</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-webxrinterface-signal-squeeze"><inline classes="std std-ref">squeeze</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-webxrinterface-signal-squeezestart"><inline classes="std std-ref">squeezestart</inline></reference></paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-method-is-input-source-active"></target>
            <paragraph classes="classref-method" ids="class-webxrinterface-method-is-input-source-active" names="class_webxrinterface_method_is_input_source_active"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_input_source_active</strong>(input_source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-webxrinterface-method-is-input-source-active"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果存在具有给定 <literal>input_source_id</literal> 的活动输入源，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-method-is-session-supported"></target>
            <paragraph classes="classref-method" ids="class-webxrinterface-method-is-session-supported" names="class_webxrinterface_method_is_session_supported"><abbreviation explanation="无返回值。">void</abbreviation> <strong>is_session_supported</strong>(session_mode: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-webxrinterface-method-is-session-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>检查给定的 <literal>session_mode</literal> 是否被用户的浏览器支持。</paragraph>
            <paragraph>可能的值来自 <reference name="WebXR 的 XRSessionMode" refuri="https://developer.mozilla.org/en-US/docs/Web/API/XRSessionMode">WebXR 的 XRSessionMode</reference>，包括：<literal>"immersive-vr"</literal>、<literal>"immersive-ar"</literal> 和 <literal>"inline"</literal>。</paragraph>
            <paragraph>此方法不返回任何东西，而是将结果发送给 <reference internal="True" refid="class-webxrinterface-signal-session-supported"><inline classes="std std-ref">session_supported</inline></reference> 信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webxrinterface-method-set-display-refresh-rate"></target>
            <paragraph classes="classref-method" ids="class-webxrinterface-method-set-display-refresh-rate" names="class_webxrinterface_method_set_display_refresh_rate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_display_refresh_rate</strong>(refresh_rate: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-webxrinterface-method-set-display-refresh-rate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为当前的 HMD 设置屏幕刷新率。不是所有 HMD 和浏览器都支持。不会立即生效，发出 <reference internal="True" refid="class-webxrinterface-signal-display-refresh-rate-changed"><inline classes="std std-ref">display_refresh_rate_changed</inline></reference> 信号后才会生效。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
