<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_visualshadernodetextureparameter.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/VisualShaderNodeTextureParameter.xml.</comment>
    <target refid="class-visualshadernodetextureparameter"></target>
    <section ids="visualshadernodetextureparameter class-visualshadernodetextureparameter" names="visualshadernodetextureparameter class_visualshadernodetextureparameter">
        <title>VisualShaderNodeTextureParameter</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_visualshadernodeparameter#class-visualshadernodeparameter"><inline classes="std std-ref">VisualShaderNodeParameter</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_visualshadernodecubemapparameter#class-visualshadernodecubemapparameter"><inline classes="std std-ref">VisualShaderNodeCubemapParameter</inline></reference>, <reference internal="True" refuri="class_visualshadernodetexture2darrayparameter#class-visualshadernodetexture2darrayparameter"><inline classes="std std-ref">VisualShaderNodeTexture2DArrayParameter</inline></reference>, <reference internal="True" refuri="class_visualshadernodetexture2dparameter#class-visualshadernodetexture2dparameter"><inline classes="std std-ref">VisualShaderNodeTexture2DParameter</inline></reference>, <reference internal="True" refuri="class_visualshadernodetexture3dparameter#class-visualshadernodetexture3dparameter"><inline classes="std std-ref">VisualShaderNodeTexture3DParameter</inline></reference>, <reference internal="True" refuri="class_visualshadernodetextureparametertriplanar#class-visualshadernodetextureparametertriplanar"><inline classes="std std-ref">VisualShaderNodeTextureParameterTriplanar</inline></reference></paragraph>
        <paragraph>在可视化着色器图中执行 uniform 的纹理查找。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>对作为 uniform 着色器提供的纹理进行查找操作。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="75"></colspec>
                    <colspec colwidth="87"></colspec>
                    <colspec colwidth="7"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodetextureparameter-colordefault"><inline classes="std std-ref">ColorDefault</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodetextureparameter-property-color-default"><inline classes="std std-ref">color_default</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodetextureparameter-property-texture-filter"><inline classes="std std-ref">texture_filter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodetextureparameter-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodetextureparameter-property-texture-repeat"><inline classes="std std-ref">texture_repeat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodetextureparameter-texturesource"><inline classes="std std-ref">TextureSource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodetextureparameter-property-texture-source"><inline classes="std std-ref">texture_source</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodetextureparameter-texturetype"><inline classes="std std-ref">TextureType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodetextureparameter-property-texture-type"><inline classes="std std-ref">texture_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-visualshadernodetextureparameter-texturetype"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodetextureparameter-texturetype" names="enum_visualshadernodetextureparameter_texturetype">enum <strong>TextureType</strong>:</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-type-data"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-type-data" names="class_visualshadernodetextureparameter_constant_type_data"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TYPE_DATA</strong> = <literal>0</literal></paragraph>
            <paragraph>在uniform声明中未添加提示。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-type-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-type-color" names="class_visualshadernodetextureparameter_constant_type_color"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TYPE_COLOR</strong> = <literal>1</literal></paragraph>
            <paragraph>向该 uniform 声明添加 <literal>source_color</literal> 提示，用于进行正确的 sRGB 到线性颜色空间的转换。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-type-normal-map"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-type-normal-map" names="class_visualshadernodetextureparameter_constant_type_normal_map"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TYPE_NORMAL_MAP</strong> = <literal>2</literal></paragraph>
            <paragraph>将 <literal>hint_normal</literal> 作为提示添加到 uniform 声明中，该声明在内部将纹理转换为法线贴图。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-type-anisotropy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-type-anisotropy" names="class_visualshadernodetextureparameter_constant_type_anisotropy"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TYPE_ANISOTROPY</strong> = <literal>3</literal></paragraph>
            <paragraph>向该 uniform 声明添加 <literal>hint_anisotropy</literal> 提示，用于流向图。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-type-max" names="class_visualshadernodetextureparameter_constant_type_max"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TYPE_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodetextureparameter-texturetype"><inline classes="std std-ref">TextureType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-visualshadernodetextureparameter-colordefault"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodetextureparameter-colordefault" names="enum_visualshadernodetextureparameter_colordefault">enum <strong>ColorDefault</strong>:</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-color-default-white"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-color-default-white" names="class_visualshadernodetextureparameter_constant_color_default_white"><reference internal="True" refid="enum-visualshadernodetextureparameter-colordefault"><inline classes="std std-ref">ColorDefault</inline></reference> <strong>COLOR_DEFAULT_WHITE</strong> = <literal>0</literal></paragraph>
            <paragraph>默认为完全不透明的白色。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-color-default-black"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-color-default-black" names="class_visualshadernodetextureparameter_constant_color_default_black"><reference internal="True" refid="enum-visualshadernodetextureparameter-colordefault"><inline classes="std std-ref">ColorDefault</inline></reference> <strong>COLOR_DEFAULT_BLACK</strong> = <literal>1</literal></paragraph>
            <paragraph>默认为完全不透明的黑色。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-color-default-transparent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-color-default-transparent" names="class_visualshadernodetextureparameter_constant_color_default_transparent"><reference internal="True" refid="enum-visualshadernodetextureparameter-colordefault"><inline classes="std std-ref">ColorDefault</inline></reference> <strong>COLOR_DEFAULT_TRANSPARENT</strong> = <literal>2</literal></paragraph>
            <paragraph>默认为完全透明的黑色。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-color-default-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-color-default-max" names="class_visualshadernodetextureparameter_constant_color_default_max"><reference internal="True" refid="enum-visualshadernodetextureparameter-colordefault"><inline classes="std std-ref">ColorDefault</inline></reference> <strong>COLOR_DEFAULT_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodetextureparameter-colordefault"><inline classes="std std-ref">ColorDefault</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-visualshadernodetextureparameter-texturefilter"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodetextureparameter-texturefilter" names="enum_visualshadernodetextureparameter_texturefilter">enum <strong>TextureFilter</strong>:</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-filter-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-filter-default" names="class_visualshadernodetextureparameter_constant_filter_default"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>FILTER_DEFAULT</strong> = <literal>0</literal></paragraph>
            <paragraph>使用由该着色器所附加到的节点决定的过滤器对纹理进行采样。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-filter-nearest"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-filter-nearest" names="class_visualshadernodetextureparameter_constant_filter_nearest"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>FILTER_NEAREST</strong> = <literal>1</literal></paragraph>
            <paragraph>纹理过滤仅从最近的像素读取。这使得纹理从近距离看是像素化的，从远处看是颗粒状的（由于多级渐远纹理没有被采样）。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-filter-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-filter-linear" names="class_visualshadernodetextureparameter_constant_filter_linear"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>FILTER_LINEAR</strong> = <literal>2</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素之间进行混合。这使得纹理从近处看起来很平滑，从远处看起来却有颗粒感（由于多级渐远纹理没有被采样）。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-filter-nearest-mipmap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-filter-nearest-mipmap" names="class_visualshadernodetextureparameter_constant_filter_nearest_mipmap"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>FILTER_NEAREST_MIPMAP</strong> = <literal>3</literal></paragraph>
            <paragraph>纹理过滤从最近的像素读取并在最近的 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来像素化，从远处看起来平滑。</paragraph>
            <paragraph>将此用于可能以低缩放查看的非像素艺术纹理（例如，由于 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 缩放或精灵缩放），因为多级渐远纹理对于平滑小于屏幕像素的像素很重要。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-filter-linear-mipmap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-filter-linear-mipmap" names="class_visualshadernodetextureparameter_constant_filter_linear_mipmap"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>FILTER_LINEAR_MIPMAP</strong> = <literal>4</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素和最近的 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来平滑，从远处看起来也平滑。</paragraph>
            <paragraph>将此用于可能以低缩放查看的非像素艺术纹理（例如，由于 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 缩放或精灵缩放），因为多级渐远纹理对于平滑小于屏幕像素的像素很重要。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-filter-nearest-mipmap-anisotropic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-filter-nearest-mipmap-anisotropic" names="class_visualshadernodetextureparameter_constant_filter_nearest_mipmap_anisotropic"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>FILTER_NEAREST_MIPMAP_ANISOTROPIC</strong> = <literal>5</literal></paragraph>
            <paragraph>纹理过滤从最近的像素读取并根据表面和相机视图之间的角度在 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来像素化，从远处看起来平滑。各向异性过滤提高了几乎与相机位于一条线的表面上的纹理质量，但速度稍慢。各向异性过滤级别可以通过调整 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-anisotropic-filtering-level"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</inline></reference> 来改变。</paragraph>
            <paragraph><strong>注意：</strong>该纹理过滤在 2D 项目中很少有用。<reference internal="True" refid="class-visualshadernodetextureparameter-constant-filter-nearest-mipmap"><inline classes="std std-ref">FILTER_NEAREST_MIPMAP</inline></reference> 在这种情况下通常更合适。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-filter-linear-mipmap-anisotropic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-filter-linear-mipmap-anisotropic" names="class_visualshadernodetextureparameter_constant_filter_linear_mipmap_anisotropic"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>FILTER_LINEAR_MIPMAP_ANISOTROPIC</strong> = <literal>6</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素之间进行混合，并基于表面与相机视图之间的角度在 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来平滑，从远处看起来也平滑。各向异性过滤提高了几乎与相机位于一条线的表面上的纹理质量，但速度稍慢。各向异性过滤级别可以通过调整 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-anisotropic-filtering-level"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</inline></reference> 来改变。</paragraph>
            <paragraph><strong>注意：</strong>该纹理过滤在 2D 项目中很少有用。<reference internal="True" refid="class-visualshadernodetextureparameter-constant-filter-linear-mipmap"><inline classes="std std-ref">FILTER_LINEAR_MIPMAP</inline></reference> 在这种情况下通常更合适。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-filter-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-filter-max" names="class_visualshadernodetextureparameter_constant_filter_max"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>FILTER_MAX</strong> = <literal>7</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-visualshadernodetextureparameter-texturerepeat"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodetextureparameter-texturerepeat" names="enum_visualshadernodetextureparameter_texturerepeat">enum <strong>TextureRepeat</strong>:</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-repeat-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-repeat-default" names="class_visualshadernodetextureparameter_constant_repeat_default"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>REPEAT_DEFAULT</strong> = <literal>0</literal></paragraph>
            <paragraph>使用由该着色器所附加到的节点决定的重复模式对该纹理进行采样。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-repeat-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-repeat-enabled" names="class_visualshadernodetextureparameter_constant_repeat_enabled"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>REPEAT_ENABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>纹理将正常重复。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-repeat-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-repeat-disabled" names="class_visualshadernodetextureparameter_constant_repeat_disabled"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>REPEAT_DISABLED</strong> = <literal>2</literal></paragraph>
            <paragraph>纹理不会重复。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-repeat-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-repeat-max" names="class_visualshadernodetextureparameter_constant_repeat_max"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>REPEAT_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodetextureparameter-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-visualshadernodetextureparameter-texturesource"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodetextureparameter-texturesource" names="enum_visualshadernodetextureparameter_texturesource">enum <strong>TextureSource</strong>:</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-source-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-source-none" names="class_visualshadernodetextureparameter_constant_source_none"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturesource"><inline classes="std std-ref">TextureSource</inline></reference> <strong>SOURCE_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>着色器中未指定纹理源。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-source-screen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-source-screen" names="class_visualshadernodetextureparameter_constant_source_screen"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturesource"><inline classes="std std-ref">TextureSource</inline></reference> <strong>SOURCE_SCREEN</strong> = <literal>1</literal></paragraph>
            <paragraph>纹理源为屏幕纹理，捕获了本帧中绘制的所有不透明对象。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-source-depth"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-source-depth" names="class_visualshadernodetextureparameter_constant_source_depth"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturesource"><inline classes="std std-ref">TextureSource</inline></reference> <strong>SOURCE_DEPTH</strong> = <literal>2</literal></paragraph>
            <paragraph>纹理源为深度预处理阶段的深度纹理。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-source-normal-roughness"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-source-normal-roughness" names="class_visualshadernodetextureparameter_constant_source_normal_roughness"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturesource"><inline classes="std std-ref">TextureSource</inline></reference> <strong>SOURCE_NORMAL_ROUGHNESS</strong> = <literal>3</literal></paragraph>
            <paragraph>纹理源为深度预处理阶段的法线粗糙度缓冲区。</paragraph>
            <target refid="class-visualshadernodetextureparameter-constant-source-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetextureparameter-constant-source-max" names="class_visualshadernodetextureparameter_constant_source_max"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturesource"><inline classes="std std-ref">TextureSource</inline></reference> <strong>SOURCE_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodetextureparameter-texturesource"><inline classes="std std-ref">TextureSource</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-visualshadernodetextureparameter-property-color-default"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodetextureparameter-property-color-default" names="class_visualshadernodetextureparameter_property_color_default"><reference internal="True" refid="enum-visualshadernodetextureparameter-colordefault"><inline classes="std std-ref">ColorDefault</inline></reference> <strong>color_default</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_color_default</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshadernodetextureparameter-colordefault"><inline classes="std std-ref">ColorDefault</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodetextureparameter-colordefault"><inline classes="std std-ref">ColorDefault</inline></reference> <strong>get_color_default</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果没有给 uniform 分配纹理，则设置默认颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodetextureparameter-property-texture-filter"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodetextureparameter-property-texture-filter" names="class_visualshadernodetextureparameter_property_texture_filter"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>texture_filter</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_texture_filter</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>get_texture_filter</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置纹理过滤模式。选项见 <reference internal="True" refid="enum-visualshadernodetextureparameter-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodetextureparameter-property-texture-repeat"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodetextureparameter-property-texture-repeat" names="class_visualshadernodetextureparameter_property_texture_repeat"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>texture_repeat</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_texture_repeat</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshadernodetextureparameter-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodetextureparameter-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>get_texture_repeat</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置纹理重复模式。选项见 <reference internal="True" refid="enum-visualshadernodetextureparameter-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodetextureparameter-property-texture-source"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodetextureparameter-property-texture-source" names="class_visualshadernodetextureparameter_property_texture_source"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturesource"><inline classes="std std-ref">TextureSource</inline></reference> <strong>texture_source</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_texture_source</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshadernodetextureparameter-texturesource"><inline classes="std std-ref">TextureSource</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodetextureparameter-texturesource"><inline classes="std std-ref">TextureSource</inline></reference> <strong>get_texture_source</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置纹理源的模式。用于读取 screen（屏幕）、depth（深度）或 normal_roughness（法线粗糙度）纹理。选项见 <reference internal="True" refid="enum-visualshadernodetextureparameter-texturesource"><inline classes="std std-ref">TextureSource</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodetextureparameter-property-texture-type"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodetextureparameter-property-texture-type" names="class_visualshadernodetextureparameter_property_texture_type"><reference internal="True" refid="enum-visualshadernodetextureparameter-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>texture_type</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_texture_type</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshadernodetextureparameter-texturetype"><inline classes="std std-ref">TextureType</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodetextureparameter-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>get_texture_type</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>定义源纹理提供的数据类型。选项参阅<reference internal="True" refid="enum-visualshadernodetextureparameter-texturetype"><inline classes="std std-ref">TextureType</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
