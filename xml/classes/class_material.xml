<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_material.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Material.xml.</comment>
    <target refid="class-material"></target>
    <section ids="material class-material" names="material class_material">
        <title>Material</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_basematerial3d#class-basematerial3d"><inline classes="std std-ref">BaseMaterial3D</inline></reference>, <reference internal="True" refuri="class_canvasitemmaterial#class-canvasitemmaterial"><inline classes="std std-ref">CanvasItemMaterial</inline></reference>, <reference internal="True" refuri="class_fogmaterial#class-fogmaterial"><inline classes="std std-ref">FogMaterial</inline></reference>, <reference internal="True" refuri="class_panoramaskymaterial#class-panoramaskymaterial"><inline classes="std std-ref">PanoramaSkyMaterial</inline></reference>, <reference internal="True" refuri="class_particleprocessmaterial#class-particleprocessmaterial"><inline classes="std std-ref">ParticleProcessMaterial</inline></reference>, <reference internal="True" refuri="class_physicalskymaterial#class-physicalskymaterial"><inline classes="std std-ref">PhysicalSkyMaterial</inline></reference>, <reference internal="True" refuri="class_placeholdermaterial#class-placeholdermaterial"><inline classes="std std-ref">PlaceholderMaterial</inline></reference>, <reference internal="True" refuri="class_proceduralskymaterial#class-proceduralskymaterial"><inline classes="std std-ref">ProceduralSkyMaterial</inline></reference>, <reference internal="True" refuri="class_shadermaterial#class-shadermaterial"><inline classes="std std-ref">ShaderMaterial</inline></reference></paragraph>
        <paragraph>用于将如颜色、粗糙度等视觉属性应用于对象的虚拟基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Material</strong> 即材质，是一种基础资源，能够为几何体着色。所有的材质都继承自它，几乎所有从 <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference> 派生的节点都带有 <strong>Material</strong>。有一些标志和参数是在所有材质类型之间共享的，可以在这里进行配置。</paragraph>
            <paragraph>重要的是，你可以继承 <strong>Material</strong> 以在脚本或 GDExtension 中创建你自己的自定义材质类型。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="3D 材质测试演示" refuri="https://godotengine.org/asset-library/asset/2742">3D 材质测试演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="第三人称射击（TPS）演示" refuri="https://godotengine.org/asset-library/asset/2710">第三人称射击（TPS）演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="65"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-material"><inline classes="std std-ref">Material</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-material-property-next-pass"><inline classes="std std-ref">next_pass</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-material-property-render-priority"><inline classes="std std-ref">render_priority</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="113"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-material-private-method-can-do-next-pass"><inline classes="std std-ref">_can_do_next_pass</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-material-private-method-can-use-render-priority"><inline classes="std std-ref">_can_use_render_priority</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-material-private-method-get-shader-mode"><inline classes="std std-ref">_get_shader_mode</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-material-private-method-get-shader-rid"><inline classes="std std-ref">_get_shader_rid</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-material-method-create-placeholder"><inline classes="std std-ref">create_placeholder</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-material-method-inspect-native-shader-code"><inline classes="std std-ref">inspect_native_shader_code</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="常量">
            <title>常量</title>
            <target refid="class-material-constant-render-priority-max"></target>
            <paragraph classes="classref-constant" ids="class-material-constant-render-priority-max" names="class_material_constant_render_priority_max"><strong>RENDER_PRIORITY_MAX</strong> = <literal>127</literal> <reference internal="True" refid="class-material-constant-render-priority-max"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refid="class-material-property-render-priority"><inline classes="std std-ref">render_priority</inline></reference> 参数的最大值。</paragraph>
            <target refid="class-material-constant-render-priority-min"></target>
            <paragraph classes="classref-constant" ids="class-material-constant-render-priority-min" names="class_material_constant_render_priority_min"><strong>RENDER_PRIORITY_MIN</strong> = <literal>-128</literal> <reference internal="True" refid="class-material-constant-render-priority-min"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refid="class-material-property-render-priority"><inline classes="std std-ref">render_priority</inline></reference> 参数的最小值。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-material-property-next-pass"></target>
            <paragraph classes="classref-property" ids="class-material-property-next-pass" names="class_material_property_next_pass"><reference internal="True" refid="class-material"><inline classes="std std-ref">Material</inline></reference> <strong>next_pass</strong> <reference internal="True" refid="class-material-property-next-pass"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_next_pass</strong>(value: <reference internal="True" refid="class-material"><inline classes="std std-ref">Material</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-material"><inline classes="std std-ref">Material</inline></reference> <strong>get_next_pass</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置下一阶段使用的 <strong>Material</strong>。这将使用不同的材质再次渲染对象。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-material-property-next-pass"><inline classes="std std-ref">next_pass</inline></reference> 材质不一定是紧接在源 <strong>Material</strong> 之后绘制的。绘制顺序由材质属性、<reference internal="True" refid="class-material-property-render-priority"><inline classes="std std-ref">render_priority</inline></reference> 和到相机的距离决定。</paragraph>
            <paragraph><strong>注意：</strong>仅适用于 <reference internal="True" refuri="class_standardmaterial3d#class-standardmaterial3d"><inline classes="std std-ref">StandardMaterial3D</inline></reference> 和“Spatial”类型的 <reference internal="True" refuri="class_shadermaterial#class-shadermaterial"><inline classes="std std-ref">ShaderMaterial</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-material-property-render-priority"></target>
            <paragraph classes="classref-property" ids="class-material-property-render-priority" names="class_material_property_render_priority"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>render_priority</strong> <reference internal="True" refid="class-material-property-render-priority"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_render_priority</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_render_priority</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置 3D 场景中物体的渲染优先级。优先级高的物体将被排序在优先级低的物体前面。换句话说，所有具有 <reference internal="True" refid="class-material-property-render-priority"><inline classes="std std-ref">render_priority</inline></reference> <literal>1</literal> 的对象，将在所有具有 <reference internal="True" refid="class-material-property-render-priority"><inline classes="std std-ref">render_priority</inline></reference> <literal>0</literal> 的对象之前渲染。</paragraph>
            <paragraph><strong>注意：</strong>仅适用于 <reference internal="True" refuri="class_standardmaterial3d#class-standardmaterial3d"><inline classes="std std-ref">StandardMaterial3D</inline></reference> 和“Spatial”类型的 <reference internal="True" refuri="class_shadermaterial#class-shadermaterial"><inline classes="std std-ref">ShaderMaterial</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这不会影响透明对象相对于不透明对象的排序方式，或动态网格体相对于其他不透明网格体的排序方式。这是因为所有透明对象都是在所有不透明对象之后绘制的，并且所有动态不透明网格都是在其他不透明网格之前绘制的。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-material-private-method-can-do-next-pass"></target>
            <paragraph classes="classref-method" ids="class-material-private-method-can-do-next-pass" names="class_material_private_method__can_do_next_pass"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_can_do_next_pass</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-material-private-method-can-do-next-pass"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>仅出于覆盖目的而暴露。你不能直接调用该函数。在内部用于确定 <reference internal="True" refid="class-material-property-next-pass"><inline classes="std std-ref">next_pass</inline></reference> 是否应显示在编辑器中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-material-private-method-can-use-render-priority"></target>
            <paragraph classes="classref-method" ids="class-material-private-method-can-use-render-priority" names="class_material_private_method__can_use_render_priority"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_can_use_render_priority</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-material-private-method-can-use-render-priority"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>仅出于覆盖目的而暴露。你不能直接调用该函数。在内部用于确定 <reference internal="True" refid="class-material-property-render-priority"><inline classes="std std-ref">render_priority</inline></reference> 是否应显示在编辑器中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-material-private-method-get-shader-mode"></target>
            <paragraph classes="classref-method" ids="class-material-private-method-get-shader-mode" names="class_material_private_method__get_shader_mode"><reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>_get_shader_mode</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-material-private-method-get-shader-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>仅出于覆盖目的而暴露。你不能直接调用该函数。由各种编辑器工具内部使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-material-private-method-get-shader-rid"></target>
            <paragraph classes="classref-method" ids="class-material-private-method-get-shader-rid" names="class_material_private_method__get_shader_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_get_shader_rid</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-material-private-method-get-shader-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>仅出于覆盖目的而暴露。你不能直接调用该函数。由各种编辑器工具内部使用。用于访问 <strong>Material</strong> 的 <reference internal="True" refuri="class_shader#class-shader"><inline classes="std std-ref">Shader</inline></reference> 的 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-material-method-create-placeholder"></target>
            <paragraph classes="classref-method" ids="class-material-method-create-placeholder" names="class_material_method_create_placeholder"><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>create_placeholder</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-material-method-create-placeholder"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建该资源的占位符版本（<reference internal="True" refuri="class_placeholdermaterial#class-placeholdermaterial"><inline classes="std std-ref">PlaceholderMaterial</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-material-method-inspect-native-shader-code"></target>
            <paragraph classes="classref-method" ids="class-material-method-inspect-native-shader-code" names="class_material_method_inspect_native_shader_code"><abbreviation explanation="无返回值。">void</abbreviation> <strong>inspect_native_shader_code</strong>() <reference internal="True" refid="class-material-method-inspect-native-shader-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>仅在编辑器中运行时可用。打开一个弹出窗口，其中可视化生成的着色器代码，包括所有变体和内部着色器代码。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
