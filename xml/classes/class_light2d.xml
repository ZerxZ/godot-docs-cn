<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_light2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Light2D.xml.</comment>
    <target refid="class-light2d"></target>
    <section ids="light2d class-light2d" names="light2d class_light2d">
        <title>Light2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_directionallight2d#class-directionallight2d"><inline classes="std std-ref">DirectionalLight2D</inline></reference>, <reference internal="True" refuri="class_pointlight2d#class-pointlight2d"><inline classes="std std-ref">PointLight2D</inline></reference></paragraph>
        <paragraph>在 2D 环境中投射光线。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>在 2D 环境中投射光线。光线由颜色、能量值、模式（见常量）以及其他各种参数（与范围和阴影有关）来定义。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/2d_lights_and_shadows"><inline classes="doc">2D 灯光和阴影</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="48"></colspec>
                    <colspec colwidth="76"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-light2d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-blend-mode"><inline classes="std std-ref">blend_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-color"><inline classes="std std-ref">color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-editor-only"><inline classes="std std-ref">editor_only</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-enabled"><inline classes="std std-ref">enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-energy"><inline classes="std std-ref">energy</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-range-item-cull-mask"><inline classes="std std-ref">range_item_cull_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-range-layer-max"><inline classes="std std-ref">range_layer_max</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-range-layer-min"><inline classes="std std-ref">range_layer_min</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-range-z-max"><inline classes="std std-ref">range_z_max</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1024</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-range-z-min"><inline classes="std std-ref">range_z_min</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1024</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-shadow-color"><inline classes="std std-ref">shadow_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-shadow-enabled"><inline classes="std std-ref">shadow_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-light2d-shadowfilter"><inline classes="std std-ref">ShadowFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-shadow-filter"><inline classes="std std-ref">shadow_filter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-shadow-filter-smooth"><inline classes="std std-ref">shadow_filter_smooth</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-property-shadow-item-cull-mask"><inline classes="std std-ref">shadow_item_cull_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="97"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-method-get-height"><inline classes="std std-ref">get_height</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light2d-method-set-height"><inline classes="std std-ref">set_height</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> height <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-light2d-shadowfilter"></target>
            <paragraph classes="classref-enumeration" ids="enum-light2d-shadowfilter" names="enum_light2d_shadowfilter">enum <strong>ShadowFilter</strong>:</paragraph>
            <target refid="class-light2d-constant-shadow-filter-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light2d-constant-shadow-filter-none" names="class_light2d_constant_shadow_filter_none"><reference internal="True" refid="enum-light2d-shadowfilter"><inline classes="std std-ref">ShadowFilter</inline></reference> <strong>SHADOW_FILTER_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>不对阴影贴图应用过滤。提供较硬的阴影边缘，渲染速度最快。见 <reference internal="True" refid="class-light2d-property-shadow-filter"><inline classes="std std-ref">shadow_filter</inline></reference>。</paragraph>
            <target refid="class-light2d-constant-shadow-filter-pcf5"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light2d-constant-shadow-filter-pcf5" names="class_light2d_constant_shadow_filter_pcf5"><reference internal="True" refid="enum-light2d-shadowfilter"><inline classes="std std-ref">ShadowFilter</inline></reference> <strong>SHADOW_FILTER_PCF5</strong> = <literal>1</literal></paragraph>
            <paragraph>对阴影贴图使用百分比接近过滤（5 个样本）。与硬阴影渲染相比较慢。见 <reference internal="True" refid="class-light2d-property-shadow-filter"><inline classes="std std-ref">shadow_filter</inline></reference>。</paragraph>
            <target refid="class-light2d-constant-shadow-filter-pcf13"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light2d-constant-shadow-filter-pcf13" names="class_light2d_constant_shadow_filter_pcf13"><reference internal="True" refid="enum-light2d-shadowfilter"><inline classes="std std-ref">ShadowFilter</inline></reference> <strong>SHADOW_FILTER_PCF13</strong> = <literal>2</literal></paragraph>
            <paragraph>对阴影贴图使用百分比接近过滤（13 个样本）。最慢的阴影过滤模式，应谨慎使用。见 <reference internal="True" refid="class-light2d-property-shadow-filter"><inline classes="std std-ref">shadow_filter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-light2d-blendmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-light2d-blendmode" names="enum_light2d_blendmode">enum <strong>BlendMode</strong>:</paragraph>
            <target refid="class-light2d-constant-blend-mode-add"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light2d-constant-blend-mode-add" names="class_light2d_constant_blend_mode_add"><reference internal="True" refid="enum-light2d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>BLEND_MODE_ADD</strong> = <literal>0</literal></paragraph>
            <paragraph>将 Light2D 对应的像素值与其下方的像素值相加。这是灯的常见行为。</paragraph>
            <target refid="class-light2d-constant-blend-mode-sub"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light2d-constant-blend-mode-sub" names="class_light2d_constant_blend_mode_sub"><reference internal="True" refid="enum-light2d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>BLEND_MODE_SUB</strong> = <literal>1</literal></paragraph>
            <paragraph>将 Light2D 对应的像素值减去其下方的像素值，产生反光效果。</paragraph>
            <target refid="class-light2d-constant-blend-mode-mix"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light2d-constant-blend-mode-mix" names="class_light2d_constant_blend_mode_mix"><reference internal="True" refid="enum-light2d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>BLEND_MODE_MIX</strong> = <literal>2</literal></paragraph>
            <paragraph>通过线性插值将 Light2D 对应的像素值与其下方的像素值混合。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-light2d-property-blend-mode"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-blend-mode" names="class_light2d_property_blend_mode"><reference internal="True" refid="enum-light2d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>blend_mode</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_blend_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-light2d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-light2d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>get_blend_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 Light2D 的混合模式。取值见 <reference internal="True" refid="enum-light2d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-color"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-color" names="class_light2d_property_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>color</strong> = <literal>Color(1, 1, 1, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_color</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 Light2D 的颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-editor-only"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-editor-only" names="class_light2d_property_editor_only"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>editor_only</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_editor_only</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_editor_only</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，Light2D 将只在编辑场景时出现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-enabled"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-enabled" names="class_light2d_property_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>enabled</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，Light2D 会发光。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-energy"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-energy" names="class_light2d_property_energy"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>energy</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_energy</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_energy</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Light2D 的能量值。该值越大，光线就越强。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-range-item-cull-mask"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-range-item-cull-mask" names="class_light2d_property_range_item_cull_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>range_item_cull_mask</strong> = <literal>1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_item_cull_mask</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_item_cull_mask</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>层遮罩。<reference internal="True" refuri="class_canvasitem#class-canvasitem-property-light-mask"><inline classes="std std-ref">CanvasItem.light_mask</inline></reference> 与之匹配的对象才会被该 Light2D 影响。另见 <reference internal="True" refid="class-light2d-property-shadow-item-cull-mask"><inline classes="std std-ref">shadow_item_cull_mask</inline></reference>，影响的是哪些对象能够投射阴影。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_directionallight2d#class-directionallight2d"><inline classes="std std-ref">DirectionalLight2D</inline></reference> 会忽略 <reference internal="True" refid="class-light2d-property-range-item-cull-mask"><inline classes="std std-ref">range_item_cull_mask</inline></reference>，始终对 2D 节点进行照明，无论其 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-light-mask"><inline classes="std std-ref">CanvasItem.light_mask</inline></reference> 的取值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-range-layer-max"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-range-layer-max" names="class_light2d_property_range_layer_max"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>range_layer_max</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_layer_range_max</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_layer_range_max</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>受 Light2D 影响的对象的最大层数值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-range-layer-min"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-range-layer-min" names="class_light2d_property_range_layer_min"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>range_layer_min</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_layer_range_min</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_layer_range_min</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>受 Light2D 影响的对象的最小层数值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-range-z-max"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-range-z-max" names="class_light2d_property_range_z_max"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>range_z_max</strong> = <literal>1024</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_z_range_max</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_z_range_max</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>受 Light2D 影响的物体的最大 <literal>z</literal> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-range-z-min"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-range-z-min" names="class_light2d_property_range_z_min"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>range_z_min</strong> = <literal>-1024</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_z_range_min</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_z_range_min</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>受 Light2D 影响的物体的最小 <literal>z</literal> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-shadow-color"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-shadow-color" names="class_light2d_property_shadow_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>shadow_color</strong> = <literal>Color(0, 0, 0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_shadow_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_shadow_color</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 Light2D 投下的影子的颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-shadow-enabled"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-shadow-enabled" names="class_light2d_property_shadow_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shadow_enabled</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_shadow_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_shadow_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 Light2D 将投下阴影。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-shadow-filter"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-shadow-filter" names="class_light2d_property_shadow_filter"><reference internal="True" refid="enum-light2d-shadowfilter"><inline classes="std std-ref">ShadowFilter</inline></reference> <strong>shadow_filter</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_shadow_filter</strong> <strong>(</strong> <reference internal="True" refid="enum-light2d-shadowfilter"><inline classes="std std-ref">ShadowFilter</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-light2d-shadowfilter"><inline classes="std std-ref">ShadowFilter</inline></reference> <strong>get_shadow_filter</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>阴影过滤器类型。可能的取值见 <reference internal="True" refid="enum-light2d-shadowfilter"><inline classes="std std-ref">ShadowFilter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-shadow-filter-smooth"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-shadow-filter-smooth" names="class_light2d_property_shadow_filter_smooth"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shadow_filter_smooth</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_shadow_smooth</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_shadow_smooth</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>阴影的平滑值。更高的值将导致更柔和的阴影，代价是在阴影渲染中可能出现可见的条纹。只有在 <reference internal="True" refid="class-light2d-property-shadow-filter"><inline classes="std std-ref">shadow_filter</inline></reference> 为 <reference internal="True" refid="class-light2d-constant-shadow-filter-pcf5"><inline classes="std std-ref">SHADOW_FILTER_PCF5</inline></reference> 或 <reference internal="True" refid="class-light2d-constant-shadow-filter-pcf13"><inline classes="std std-ref">SHADOW_FILTER_PCF13</inline></reference> 时，<reference internal="True" refid="class-light2d-property-shadow-filter-smooth"><inline classes="std std-ref">shadow_filter_smooth</inline></reference> 才有效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-property-shadow-item-cull-mask"></target>
            <paragraph classes="classref-property" ids="class-light2d-property-shadow-item-cull-mask" names="class_light2d_property_shadow_item_cull_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shadow_item_cull_mask</strong> = <literal>1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_item_shadow_cull_mask</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_item_shadow_cull_mask</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>阴影遮罩。与 <reference internal="True" refuri="class_lightoccluder2d#class-lightoccluder2d"><inline classes="std std-ref">LightOccluder2D</inline></reference> 一起使用以投射阴影。只有匹配 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-light-mask"><inline classes="std std-ref">CanvasItem.light_mask</inline></reference> 的遮挡物才会投射阴影。另见 <reference internal="True" refid="class-light2d-property-range-item-cull-mask"><inline classes="std std-ref">range_item_cull_mask</inline></reference>，它影响哪些对象可以<emphasis>接收</emphasis>光。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-light2d-method-get-height"></target>
            <paragraph classes="classref-method" ids="class-light2d-method-get-height" names="class_light2d_method_get_height"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_height</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该灯光的高度，用于 2D 法线映射。见 <reference internal="True" refuri="class_pointlight2d#class-pointlight2d-property-height"><inline classes="std std-ref">PointLight2D.height</inline></reference> 和 <reference internal="True" refuri="class_directionallight2d#class-directionallight2d-property-height"><inline classes="std std-ref">DirectionalLight2D.height</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light2d-method-set-height"></target>
            <paragraph classes="classref-method" ids="class-light2d-method-set-height" names="class_light2d_method_set_height">void <strong>set_height</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> height <strong>)</strong></paragraph>
            <paragraph>设置该灯光的高度，用于 2D 法线映射。见 <reference internal="True" refuri="class_pointlight2d#class-pointlight2d-property-height"><inline classes="std std-ref">PointLight2D.height</inline></reference> 和 <reference internal="True" refuri="class_directionallight2d#class-directionallight2d-property-height"><inline classes="std std-ref">DirectionalLight2D.height</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
