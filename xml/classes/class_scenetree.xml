<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_scenetree.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/SceneTree.xml.</comment>
    <target refid="class-scenetree"></target>
    <section ids="scenetree class-scenetree" names="scenetree class_scenetree">
        <title>SceneTree</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_mainloop#class-mainloop"><inline classes="std std-ref">MainLoop</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>通过节点层次结构管理游戏循环。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>作为最重要的类之一，<strong>SceneTree</strong> 管理着场景中节点的层次结构以及场景本身。节点可以被添加、检索和删除。整个场景树可以被暂停，包括当前场景。场景可以被加载、切换和重新加载。</paragraph>
            <paragraph>你也可以使用 <strong>SceneTree</strong> 将你的节点组织成组，每个节点都可以被分配到你想要创建的组，例如“敌人”组。然后你可以遍历这些组，甚至可以统一对所有组成员调用方法并设置属性。</paragraph>
            <paragraph><strong>SceneTree</strong> 是场景所使用的默认 <reference internal="True" refuri="class_mainloop#class-mainloop"><inline classes="std std-ref">MainLoop</inline></reference> 实现，因此掌控着游戏循环。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/scripting/scene_tree"><inline classes="doc">SceneTree</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/rendering/multiple_resolutions"><inline classes="doc">多分辨率</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="78"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-auto-accept-quit"><inline classes="std std-ref">auto_accept_quit</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">current_scene</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-debug-collisions-hint"><inline classes="std std-ref">debug_collisions_hint</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-debug-navigation-hint"><inline classes="std std-ref">debug_navigation_hint</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-debug-paths-hint"><inline classes="std std-ref">debug_paths_hint</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-edited-scene-root"><inline classes="std std-ref">edited_scene_root</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-multiplayer-poll"><inline classes="std std-ref">multiplayer_poll</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-paused"><inline classes="std std-ref">paused</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-quit-on-go-back"><inline classes="std std-ref">quit_on_go_back</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-root"><inline classes="std std-ref">root</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="45"></colspec>
                    <colspec colwidth="249"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-call-group"><inline classes="std std-ref">call_group</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> method, ... <strong>)</strong> <abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-call-group-flags"><inline classes="std std-ref">call_group_flags</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> flags, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> method, ... <strong>)</strong> <abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-change-scene-to-file"><inline classes="std std-ref">change_scene_to_file</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-change-scene-to-packed"><inline classes="std std-ref">change_scene_to_packed</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> packed_scene <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer"><inline classes="std std-ref">SceneTreeTimer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-create-timer"><inline classes="std std-ref">create_timer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time_sec, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> process_always=true, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> process_in_physics=false, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> ignore_time_scale=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-create-tween"><inline classes="std std-ref">create_tween</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-first-node-in-group"><inline classes="std std-ref">get_first_node_in_group</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-frame"><inline classes="std std-ref">get_frame</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-multiplayer"><inline classes="std std-ref">get_multiplayer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> for_path=NodePath("") <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-node-count"><inline classes="std std-ref">get_node_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-nodes-in-group"><inline classes="std std-ref">get_nodes_in_group</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-processed-tweens"><inline classes="std std-ref">get_processed_tweens</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-has-group"><inline classes="std std-ref">has_group</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-notify-group"><inline classes="std std-ref">notify_group</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> notification <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-notify-group-flags"><inline classes="std std-ref">notify_group_flags</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> call_flags, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> notification <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-queue-delete"><inline classes="std std-ref">queue_delete</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> obj <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-quit"><inline classes="std std-ref">quit</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> exit_code=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-reload-current-scene"><inline classes="std std-ref">reload_current_scene</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-set-group"><inline classes="std std-ref">set_group</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> property, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-set-group-flags"><inline classes="std std-ref">set_group_flags</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> call_flags, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> property, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-set-multiplayer"><inline classes="std std-ref">set_multiplayer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> multiplayer, <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> root_path=NodePath("") <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-unload-current-scene"><inline classes="std std-ref">unload_current_scene</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-scenetree-signal-node-added"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-node-added" names="class_scenetree_signal_node_added"><strong>node_added</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> node <strong>)</strong></paragraph>
            <paragraph>当将节点添加到 <strong>SceneTree</strong> 时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-node-configuration-warning-changed"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-node-configuration-warning-changed" names="class_scenetree_signal_node_configuration_warning_changed"><strong>node_configuration_warning_changed</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> node <strong>)</strong></paragraph>
            <paragraph>当节点的配置更改时发出。仅在 <literal>tool</literal> 模式下发射。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-node-removed"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-node-removed" names="class_scenetree_signal_node_removed"><strong>node_removed</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> node <strong>)</strong></paragraph>
            <paragraph>当从 <strong>SceneTree</strong> 中移除节点时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-node-renamed"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-node-renamed" names="class_scenetree_signal_node_renamed"><strong>node_renamed</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> node <strong>)</strong></paragraph>
            <paragraph>当节点重命名时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-physics-frame"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-physics-frame" names="class_scenetree_signal_physics_frame"><strong>physics_frame</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在 <strong>SceneTree</strong> 中的每个节点上调用 <reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference> 之前立即发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-process-frame"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-process-frame" names="class_scenetree_signal_process_frame"><strong>process_frame</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在对 <strong>SceneTree</strong> 中的每个节点调用 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference> 之前立即发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-tree-changed"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-tree-changed" names="class_scenetree_signal_tree_changed"><strong>tree_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>当 <strong>SceneTree</strong> 层次结构发生变化（移动或重命名子项等）时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-tree-process-mode-changed"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-tree-process-mode-changed" names="class_scenetree_signal_tree_process_mode_changed"><strong>tree_process_mode_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>该信号仅在编辑器中发出，允许编辑器更新被禁用节点的可见性。任何节点的 <reference internal="True" refuri="class_node#class-node-property-process-mode"><inline classes="std std-ref">Node.process_mode</inline></reference> 更改时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-scenetree-groupcallflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-scenetree-groupcallflags" names="enum_scenetree_groupcallflags">enum <strong>GroupCallFlags</strong>:</paragraph>
            <target refid="class-scenetree-constant-group-call-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scenetree-constant-group-call-default" names="class_scenetree_constant_group_call_default"><reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference> <strong>GROUP_CALL_DEFAULT</strong> = <literal>0</literal></paragraph>
            <paragraph>对分组进行调用时，不使用标志（默认）。</paragraph>
            <target refid="class-scenetree-constant-group-call-reverse"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scenetree-constant-group-call-reverse" names="class_scenetree_constant_group_call_reverse"><reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference> <strong>GROUP_CALL_REVERSE</strong> = <literal>1</literal></paragraph>
            <paragraph>对分组进行调用时，使用逆场景序。</paragraph>
            <target refid="class-scenetree-constant-group-call-deferred"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scenetree-constant-group-call-deferred" names="class_scenetree_constant_group_call_deferred"><reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference> <strong>GROUP_CALL_DEFERRED</strong> = <literal>2</literal></paragraph>
            <paragraph>在当前帧的末尾对分组进行调用（处理帧或物理帧）。</paragraph>
            <target refid="class-scenetree-constant-group-call-unique"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scenetree-constant-group-call-unique" names="class_scenetree_constant_group_call_unique"><reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference> <strong>GROUP_CALL_UNIQUE</strong> = <literal>4</literal></paragraph>
            <paragraph>即便执行了多次调用，也只对分组进行一次调用。</paragraph>
            <paragraph><strong>注意：</strong>确定调用是否唯一时不考虑参数。因此，如果使用不同的参数调用了同一个方法，那么只会执行第一个调用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-scenetree-property-auto-accept-quit"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-auto-accept-quit" names="class_scenetree_property_auto_accept_quit"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>auto_accept_quit</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_auto_accept_quit</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_auto_accept_quit</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则应用程序会自动接受退出请求。</paragraph>
            <paragraph>移动平台见 <reference internal="True" refid="class-scenetree-property-quit-on-go-back"><inline classes="std std-ref">quit_on_go_back</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-current-scene"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-current-scene" names="class_scenetree_property_current_scene"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>current_scene</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_current_scene</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>get_current_scene</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>返回当前运行场景的根节点，无视其结构。</paragraph>
            <paragraph><strong>警告：</strong>直接设置这个属性可能无法达到预期效果，<emphasis>不会</emphasis>为场景树添加或移除任何节点，请考虑改用 <reference internal="True" refid="class-scenetree-method-change-scene-to-file"><inline classes="std std-ref">change_scene_to_file</inline></reference> 或 <reference internal="True" refid="class-scenetree-method-change-scene-to-packed"><inline classes="std std-ref">change_scene_to_packed</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-debug-collisions-hint"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-debug-collisions-hint" names="class_scenetree_property_debug_collisions_hint"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>debug_collisions_hint</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_debug_collisions_hint</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_debugging_collisions_hint</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，从编辑器中运行游戏时会显示碰撞形状，方便调试。</paragraph>
            <paragraph><strong>注意：</strong>这个属性不应在运行时更改。在运行项目时更改 <reference internal="True" refid="class-scenetree-property-debug-collisions-hint"><inline classes="std std-ref">debug_collisions_hint</inline></reference> 的值不会有想要的效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-debug-navigation-hint"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-debug-navigation-hint" names="class_scenetree_property_debug_navigation_hint"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>debug_navigation_hint</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_debug_navigation_hint</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_debugging_navigation_hint</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，从编辑器中运行游戏时会显示导航多边形，方便调试。</paragraph>
            <paragraph><strong>注意：</strong>这个属性不应在运行时更改。在运行项目时更改 <reference internal="True" refid="class-scenetree-property-debug-navigation-hint"><inline classes="std std-ref">debug_navigation_hint</inline></reference> 的值不会有想要的效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-debug-paths-hint"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-debug-paths-hint" names="class_scenetree_property_debug_paths_hint"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>debug_paths_hint</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_debug_paths_hint</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_debugging_paths_hint</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，从编辑器中运行游戏时，来自 <reference internal="True" refuri="class_path2d#class-path2d"><inline classes="std std-ref">Path2D</inline></reference> 和 <reference internal="True" refuri="class_path3d#class-path3d"><inline classes="std std-ref">Path3D</inline></reference> 节点的曲线将可见以进行调试。</paragraph>
            <paragraph><strong>注意：</strong>该属性没有被设计为在运行时更改。在项目运行时更改 <reference internal="True" refid="class-scenetree-property-debug-paths-hint"><inline classes="std std-ref">debug_paths_hint</inline></reference> 的值不会产生预期的效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-edited-scene-root"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-edited-scene-root" names="class_scenetree_property_edited_scene_root"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>edited_scene_root</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_edited_scene_root</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>get_edited_scene_root</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>编辑场景的根。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-multiplayer-poll"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-multiplayer-poll" names="class_scenetree_property_multiplayer_poll"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>multiplayer_poll</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_multiplayer_poll_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_multiplayer_poll_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>（默认值），则在 <reference internal="True" refid="class-scenetree-signal-process-frame"><inline classes="std std-ref">process_frame</inline></reference> 期间为该 SceneTree 启用 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 的自动轮询。</paragraph>
            <paragraph>如果为 <literal>false</literal>，则需要手动调用 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-poll"><inline classes="std std-ref">MultiplayerAPI.poll</inline></reference> 以处理网络数据包并下发 RPC。这允许在一个不同的循环（例如物理、线程、特定时间步长）中运行 RPC，并在从线程访问 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 时进行手动 <reference internal="True" refuri="class_mutex#class-mutex"><inline classes="std std-ref">Mutex</inline></reference> 保护。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-paused"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-paused" names="class_scenetree_property_paused"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>paused</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_pause</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_paused</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，<strong>SceneTree</strong> 会暂停。这样做会有以下行为：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>2D 和 3D 物理将停止，包括信号和碰撞检测。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>节点不再调用 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference>、<reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-private-method-input"><inline classes="std std-ref">Node._input</inline></reference>。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-quit-on-go-back"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-quit-on-go-back" names="class_scenetree_property_quit_on_go_back"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>quit_on_go_back</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_quit_on_go_back</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_quit_on_go_back</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该应用程序会在导航返回时自动退出（例如在 Android 上使用系统“返回”键）。</paragraph>
            <paragraph>禁用这个选项时，如果要处理“返回”按钮，请使用 <reference internal="True" refuri="class_displayserver#class-displayserver-constant-window-event-go-back-request"><inline classes="std std-ref">DisplayServer.WINDOW_EVENT_GO_BACK_REQUEST</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-root"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-root" names="class_scenetree_property_root"><reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> <strong>root</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> <strong>get_root</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>SceneTree</strong> 的根 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-scenetree-method-call-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-call-group" names="class_scenetree_method_call_group">void <strong>call_group</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> method, ... <strong>)</strong> <abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
            <paragraph>对给定分组的每个成员调用 <literal>method</literal>。调用方法时在末尾指定的参数会传递给 <literal>method</literal>。如果节点没有给定的方法或参数列表不匹配（无论是数量还是类型），那么就会跳过这个节点。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-scenetree-method-call-group"><inline classes="std std-ref">call_group</inline></reference> 将立即对所有成员调用一次方法，如果对大量成员调用昂贵的方法，这可能会导致卡顿。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-call-group-flags"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-call-group-flags" names="class_scenetree_method_call_group_flags">void <strong>call_group_flags</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> flags, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> method, ... <strong>)</strong> <abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
            <paragraph>调用给定分组中每个成员的 <literal>method</literal> 方法，遵循给定的 <reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference>。你可以在方法调用末尾指定要传递给 <literal>method</literal> 的参数。如果某个节点没有给定的方法，或者方法的参数列表不匹配（无论是数量还是类型不匹配），则会跳过这个节点。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 使用延迟方式逆序调用该方法。
get_tree().call_group_flags(SceneTree.GROUP_CALL_DEFERRED | SceneTree.GROUP_CALL_REVERSE)</literal_block>
            <paragraph><strong>注意：</strong>分组调用标志可用于控制方法调用的行为。默认情况下方法是立即调用的，与 <reference internal="True" refid="class-scenetree-method-call-group"><inline classes="std std-ref">call_group</inline></reference> 类似。但是如果在 <literal>flags</literal> 中存在 <reference internal="True" refid="class-scenetree-constant-group-call-deferred"><inline classes="std std-ref">GROUP_CALL_DEFERRED</inline></reference> 标志，则方法会在该帧末尾调用，与 <reference internal="True" refuri="class_object#class-object-method-set-deferred"><inline classes="std std-ref">Object.set_deferred</inline></reference> 类似。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-change-scene-to-file"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-change-scene-to-file" names="class_scenetree_method_change_scene_to_file"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>change_scene_to_file</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
            <paragraph>将位于给定路径 <literal>path</literal> 的场景加载进一个 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 并新建其实例，然后将正在运行的场景修改为这个场景。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>；如果 <literal>path</literal> 不能被加载到一个 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 中，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-open"><inline classes="std std-ref">@GlobalScope.ERR_CANT_OPEN</inline></reference>；如果该场景无法被实例化，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-create"><inline classes="std std-ref">@GlobalScope.ERR_CANT_CREATE</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>有关操作顺序的详细信息，请参阅 <reference internal="True" refid="class-scenetree-method-change-scene-to-packed"><inline classes="std std-ref">change_scene_to_packed</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-change-scene-to-packed"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-change-scene-to-packed" names="class_scenetree_method_change_scene_to_packed"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>change_scene_to_packed</strong> <strong>(</strong> <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> packed_scene <strong>)</strong></paragraph>
            <paragraph>将正在运行的场景更改为给定 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 的新实例（新实例必须有效）。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，场景无法被实例化时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-create"><inline classes="std std-ref">@GlobalScope.ERR_CANT_CREATE</inline></reference>，场景无效时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-invalid-parameter"><inline classes="std std-ref">@GlobalScope.ERR_INVALID_PARAMETER</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>当 <reference internal="True" refid="class-scenetree-method-change-scene-to-packed"><inline classes="std std-ref">change_scene_to_packed</inline></reference> 被调用时，操作按以下顺序发生：</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>当前场景节点被立即从树中移除。从那时起，在当前（传出）场景上调用的 <reference internal="True" refuri="class_node#class-node-method-get-tree"><inline classes="std std-ref">Node.get_tree</inline></reference> 将返回 <literal>null</literal>。<reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">current_scene</inline></reference> 也将变为 <literal>null</literal>，因为新场景尚不可用。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在帧末尾时，已从树中移除的、之前的当前场景将被删除（从内存中释放），然后新场景将被实例化并添加到树中。<reference internal="True" refuri="class_node#class-node-method-get-tree"><inline classes="std std-ref">Node.get_tree</inline></reference> 和 <reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">current_scene</inline></reference> 将恢复正常工作。</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>这确保了两个场景不会同时运行，并且仍然会以类似于 <reference internal="True" refuri="class_node#class-node-method-queue-free"><inline classes="std std-ref">Node.queue_free</inline></reference> 的安全方式释放之前的场景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-create-timer"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-create-timer" names="class_scenetree_method_create_timer"><reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer"><inline classes="std std-ref">SceneTreeTimer</inline></reference> <strong>create_timer</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time_sec, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> process_always=true, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> process_in_physics=false, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> ignore_time_scale=false <strong>)</strong></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer"><inline classes="std std-ref">SceneTreeTimer</inline></reference>，会在 <strong>SceneTree</strong> 中经过给定秒数后发出 <reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer-signal-timeout"><inline classes="std std-ref">SceneTreeTimer.timeout</inline></reference> 信号。</paragraph>
            <paragraph>如果 <literal>process_always</literal> 为 <literal>false</literal>，则暂停 <strong>SceneTree</strong> 也会暂停计时器。</paragraph>
            <paragraph>如果 <literal>process_in_physics</literal> 为 <literal>true</literal>，则将在物理帧而不是处理帧期间更新 <reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer"><inline classes="std std-ref">SceneTreeTimer</inline></reference>（固定帧率处理）。</paragraph>
            <paragraph>如果 <literal>ignore_time_scale</literal> 为 <literal>true</literal>，则将忽略 <reference internal="True" refuri="class_engine#class-engine-property-time-scale"><inline classes="std std-ref">Engine.time_scale</inline></reference> 并使用实际帧增量来更新 <reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer"><inline classes="std std-ref">SceneTreeTimer</inline></reference>。</paragraph>
            <paragraph>通常用于创建一次性的延迟定时器，如下例所示：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func some_function():
    print("开始")
    await get_tree().create_timer(1.0).timeout
    print("结束")</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public async Task SomeFunction()
{
    GD.Print("开始");
    await ToSignal(GetTree().CreateTimer(1.0f), SceneTreeTimer.SignalName.Timeout);
    GD.Print("结束");
}</literal_block>
                </div>
            </container>
            <paragraph>计时器将在其时间结束后被自动释放。</paragraph>
            <paragraph><strong>注意：</strong>计时器是在当前帧所有节点之后处理的，即节点的 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference> 方法比计时器先调用（<literal>process_in_physics</literal> 为 <literal>true</literal> 时为 <reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-create-tween"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-create-tween" names="class_scenetree_method_create_tween"><reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference> <strong>create_tween</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>创建并返回新的 <reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference>。该 Tween 会在下一个处理帧或物理帧中自动开始（取决于 <reference internal="True" refuri="class_tween#enum-tween-tweenprocessmode"><inline classes="std std-ref">TweenProcessMode</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>使用这个方法创建 <reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference> 时，<reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference> 不会与调用的 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 绑定。即便在该 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 释放后也仍然会继续进行动画，但是在已经没有任何可以动画的东西时会自动结束。如果你想要让 <reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference> 在该 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 释放时自动销毁，请使用 <reference internal="True" refuri="class_node#class-node-method-create-tween"><inline classes="std std-ref">Node.create_tween</inline></reference> 或 <reference internal="True" refuri="class_tween#class-tween-method-bind-node"><inline classes="std std-ref">Tween.bind_node</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-first-node-in-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-first-node-in-group" names="class_scenetree_method_get_first_node_in_group"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>get_first_node_in_group</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group <strong>)</strong></paragraph>
            <paragraph>返回指定组中的第一个节点，如果组为空或不存在，则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-frame"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-frame" names="class_scenetree_method_get_frame"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_frame</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回当前的帧数，即自应用程序启动以来的总帧数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-multiplayer"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-multiplayer" names="class_scenetree_method_get_multiplayer"><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> <strong>get_multiplayer</strong> <strong>(</strong> <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> for_path=NodePath("") <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>搜索为给定路径配置的 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference>，如果不存在，则会搜索父路径，直到找到为止。如果路径为空，或者没有找到，则返回默认路径。参见 <reference internal="True" refid="class-scenetree-method-set-multiplayer"><inline classes="std std-ref">set_multiplayer</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-node-count"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-node-count" names="class_scenetree_method_get_node_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_node_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回此 <strong>SceneTree</strong> 中的节点数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-nodes-in-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-nodes-in-group" names="class_scenetree_method_get_nodes_in_group"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node[]</inline></reference> <strong>get_nodes_in_group</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group <strong>)</strong></paragraph>
            <paragraph>返回一个分配给给定组的所有节点的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-processed-tweens"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-processed-tweens" names="class_scenetree_method_get_processed_tweens"><reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween[]</inline></reference> <strong>get_processed_tweens</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回在 <strong>SceneTree</strong> 中当前存在的 <reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference> 的数组（包括正在运行的和已暂停的）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-has-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-has-group" names="class_scenetree_method_has_group"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_group</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果存在给定的分组，则返回 <literal>true</literal>。</paragraph>
            <paragraph>场景中存在属于某个分组的 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 时，该分组才存在（见 <reference internal="True" refuri="class_node#class-node-method-add-to-group"><inline classes="std std-ref">Node.add_to_group</inline></reference>）。不含任何节点的分组会被自动移除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-notify-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-notify-group" names="class_scenetree_method_notify_group">void <strong>notify_group</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> notification <strong>)</strong></paragraph>
            <paragraph>向 <literal>group</literal> 中的所有成员发送给定的通知。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-scenetree-method-notify-group"><inline classes="std std-ref">notify_group</inline></reference> 会立即通知所有成员，如果向大量成员发送了通知，进而调用了开销很大的方法，则可能导致卡顿。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-notify-group-flags"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-notify-group-flags" names="class_scenetree_method_notify_group_flags">void <strong>notify_group_flags</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> call_flags, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> notification <strong>)</strong></paragraph>
            <paragraph>将给定的通知发送到 <literal>group</literal> 中的所有成员，同时遵循给定的 <reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>分组调用标志用于控制通知发送的行为。默认情况下通知会立即发送，类似于 <reference internal="True" refid="class-scenetree-method-notify-group"><inline classes="std std-ref">notify_group</inline></reference>。但是，如果 <literal>call_flags</literal> 参数中包含 <reference internal="True" refid="class-scenetree-constant-group-call-deferred"><inline classes="std std-ref">GROUP_CALL_DEFERRED</inline></reference> 标志，则通知将在当前帧的末尾发送，类似于使用 <literal>Object.call_deferred("notification", ...)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-queue-delete"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-queue-delete" names="class_scenetree_method_queue_delete">void <strong>queue_delete</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> obj <strong>)</strong></paragraph>
            <paragraph>将给定的对象加入删除队列，将对 <reference internal="True" refuri="class_object#class-object-method-free"><inline classes="std std-ref">Object.free</inline></reference> 的调用推迟到当前帧的末尾。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-quit"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-quit" names="class_scenetree_method_quit">void <strong>quit</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> exit_code=0 <strong>)</strong></paragraph>
            <paragraph>在当前迭代结束时退出应用程序。可以选择给出参数 <literal>exit_code</literal>（默认为 0），以自定义退出状态代码。</paragraph>
            <paragraph>按照惯例，退出代码 <literal>0</literal> 表示成功，而非零的退出代码表示错误。</paragraph>
            <paragraph>出于可移植性的原因，退出代码应设置在 0 到 125（含）之间。</paragraph>
            <paragraph><strong>注意：</strong>这个方法在 iOS 上不起作用。根据《iOS 人机界面指南》中的建议，用户应该通过 Home 键来关闭应用程序。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-reload-current-scene"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-reload-current-scene" names="class_scenetree_method_reload_current_scene"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>reload_current_scene</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>重新加载当前活动的场景。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，如果尚未定义 <reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">current_scene</inline></reference>，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-unconfigured"><inline classes="std std-ref">@GlobalScope.ERR_UNCONFIGURED</inline></reference>，如果 <reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">current_scene</inline></reference> 无法加载到 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 中，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-open"><inline classes="std std-ref">@GlobalScope.ERR_CANT_OPEN</inline></reference>，如果场景无法加载，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-create"><inline classes="std std-ref">@GlobalScope.ERR_CANT_CREATE</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-set-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-set-group" names="class_scenetree_method_set_group">void <strong>set_group</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> property, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>将给定分组中所有成员的 <literal>property</literal> 设置为 <literal>value</literal>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-scenetree-method-set-group"><inline classes="std std-ref">set_group</inline></reference> 会立即在所有成员上设置属性，如果对许多成员设置具有大量耗费的 setter 的属性，则可能会导致卡顿。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-set-group-flags"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-set-group-flags" names="class_scenetree_method_set_group_flags">void <strong>set_group_flags</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> call_flags, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> group, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> property, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>将给定分组中所有成员的 <literal>property</literal> 设置为 <literal>value</literal>，设置时会考虑给定的 <reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>分组调用标志可用于控制属性设置的行为。默认情况下会立即设置属性，类似于 <reference internal="True" refid="class-scenetree-method-set-group"><inline classes="std std-ref">set_group</inline></reference>。但是，如果在 <literal>call_flags</literal> 参数中存在 <reference internal="True" refid="class-scenetree-constant-group-call-deferred"><inline classes="std std-ref">GROUP_CALL_DEFERRED</inline></reference> 标志，则属性将在该帧的末尾再设置，类似于 <reference internal="True" refuri="class_object#class-object-method-call-deferred"><inline classes="std std-ref">Object.call_deferred</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-set-multiplayer"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-set-multiplayer" names="class_scenetree_method_set_multiplayer">void <strong>set_multiplayer</strong> <strong>(</strong> <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> multiplayer, <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> root_path=NodePath("") <strong>)</strong></paragraph>
            <paragraph>用给定的 <literal>root_path</literal> 设置自定义的 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference>（同时控制相对的子路径），如果 <literal>root_path</literal> 为空，则会覆盖默认值。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 不能为包含 <literal>root_path</literal> 的子路径配置，嵌套的自定义多人游戏是不被允许的。例如，如果为 <literal>"/root/Foo"</literal> 配置了一项，则为 <literal>"/root/Foo/Bar"</literal> 设置一项将导致错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-unload-current-scene"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-unload-current-scene" names="class_scenetree_method_unload_current_scene">void <strong>unload_current_scene</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>如果当前场景已加载，调用此方法将进行卸载。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
