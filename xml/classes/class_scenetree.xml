<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_scenetree.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/SceneTree.xml.</comment>
    <target refid="class-scenetree"></target>
    <section ids="scenetree class-scenetree" names="scenetree class_scenetree">
        <title>SceneTree</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_mainloop#class-mainloop"><inline classes="std std-ref">MainLoop</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>通过节点层次结构管理游戏循环。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>作为最重要的类之一，<strong>SceneTree</strong> 管理着场景中节点的层次结构以及场景本身。节点可以被添加、获取和移除。整个场景树可以被暂停，包括当前场景。场景可以被加载、切换和重新加载。</paragraph>
            <paragraph>你也可以使用 <strong>SceneTree</strong> 将你的节点组织成<strong>组</strong>：每个节点都可以被添加到你想要创建的任意多个组中，例如“敌人”组。然后你可以遍历这些组，甚至可以在属于任何给定组的所有节点上调用方法并设置属性。</paragraph>
            <paragraph><strong>SceneTree</strong> 是引擎所使用的默认 <reference internal="True" refuri="class_mainloop#class-mainloop"><inline classes="std std-ref">MainLoop</inline></reference> 实现，因此负责游戏循环。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/scripting/scene_tree"><inline classes="doc">SceneTree</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/rendering/multiple_resolutions"><inline classes="doc">多分辨率</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="78"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-auto-accept-quit"><inline classes="std std-ref">auto_accept_quit</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">current_scene</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-debug-collisions-hint"><inline classes="std std-ref">debug_collisions_hint</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-debug-navigation-hint"><inline classes="std std-ref">debug_navigation_hint</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-debug-paths-hint"><inline classes="std std-ref">debug_paths_hint</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-edited-scene-root"><inline classes="std std-ref">edited_scene_root</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-multiplayer-poll"><inline classes="std std-ref">multiplayer_poll</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-paused"><inline classes="std std-ref">paused</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-physics-interpolation"><inline classes="std std-ref">physics_interpolation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-quit-on-go-back"><inline classes="std std-ref">quit_on_go_back</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-property-root"><inline classes="std std-ref">root</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="56"></colspec>
                    <colspec colwidth="258"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-call-group"><inline classes="std std-ref">call_group</inline></reference>(group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-call-group-flags"><inline classes="std std-ref">call_group_flags</inline></reference>(flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-change-scene-to-file"><inline classes="std std-ref">change_scene_to_file</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-change-scene-to-packed"><inline classes="std std-ref">change_scene_to_packed</inline></reference>(packed_scene: <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer"><inline classes="std std-ref">SceneTreeTimer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-create-timer"><inline classes="std std-ref">create_timer</inline></reference>(time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, process_always: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, process_in_physics: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, ignore_time_scale: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-create-tween"><inline classes="std std-ref">create_tween</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-first-node-in-group"><inline classes="std std-ref">get_first_node_in_group</inline></reference>(group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-frame"><inline classes="std std-ref">get_frame</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-multiplayer"><inline classes="std std-ref">get_multiplayer</inline></reference>(for_path: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> = NodePath("")) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-node-count"><inline classes="std std-ref">get_node_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-node-count-in-group"><inline classes="std std-ref">get_node_count_in_group</inline></reference>(group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-nodes-in-group"><inline classes="std std-ref">get_nodes_in_group</inline></reference>(group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-get-processed-tweens"><inline classes="std std-ref">get_processed_tweens</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-has-group"><inline classes="std std-ref">has_group</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-notify-group"><inline classes="std std-ref">notify_group</inline></reference>(group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, notification: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-notify-group-flags"><inline classes="std std-ref">notify_group_flags</inline></reference>(call_flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, notification: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-queue-delete"><inline classes="std std-ref">queue_delete</inline></reference>(obj: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-quit"><inline classes="std std-ref">quit</inline></reference>(exit_code: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-reload-current-scene"><inline classes="std std-ref">reload_current_scene</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-set-group"><inline classes="std std-ref">set_group</inline></reference>(group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, property: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-set-group-flags"><inline classes="std std-ref">set_group_flags</inline></reference>(call_flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, property: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-set-multiplayer"><inline classes="std std-ref">set_multiplayer</inline></reference>(multiplayer: <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference>, root_path: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> = NodePath(""))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenetree-method-unload-current-scene"><inline classes="std std-ref">unload_current_scene</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-scenetree-signal-node-added"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-node-added" names="class_scenetree_signal_node_added"><strong>node_added</strong>(node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-scenetree-signal-node-added"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <literal>node</literal> 进入该树时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-node-configuration-warning-changed"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-node-configuration-warning-changed" names="class_scenetree_signal_node_configuration_warning_changed"><strong>node_configuration_warning_changed</strong>(node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-scenetree-signal-node-configuration-warning-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <literal>node</literal> 的 <reference internal="True" refuri="class_node#class-node-method-update-configuration-warnings"><inline classes="std std-ref">Node.update_configuration_warnings</inline></reference> 被调用时发出。仅在编辑器中发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-node-removed"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-node-removed" names="class_scenetree_signal_node_removed"><strong>node_removed</strong>(node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-scenetree-signal-node-removed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <literal>node</literal> 退出该树时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-node-renamed"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-node-renamed" names="class_scenetree_signal_node_renamed"><strong>node_renamed</strong>(node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-scenetree-signal-node-renamed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <literal>node</literal> 的 <reference internal="True" refuri="class_node#class-node-property-name"><inline classes="std std-ref">Node.name</inline></reference> 被更改时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-physics-frame"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-physics-frame" names="class_scenetree_signal_physics_frame"><strong>physics_frame</strong>() <reference internal="True" refid="class-scenetree-signal-physics-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在该树中的每个节点上调用 <reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference> 之前立即发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-process-frame"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-process-frame" names="class_scenetree_signal_process_frame"><strong>process_frame</strong>() <reference internal="True" refid="class-scenetree-signal-process-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在该树中的每个节点上调用 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference> 之前立即发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-tree-changed"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-tree-changed" names="class_scenetree_signal_tree_changed"><strong>tree_changed</strong>() <reference internal="True" refid="class-scenetree-signal-tree-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>每当该树的层次结构发生变化（节点被移动、重命名等）时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-signal-tree-process-mode-changed"></target>
            <paragraph classes="classref-signal" ids="class-scenetree-signal-tree-process-mode-changed" names="class_scenetree_signal_tree_process_mode_changed"><strong>tree_process_mode_changed</strong>() <reference internal="True" refid="class-scenetree-signal-tree-process-mode-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当树内任意节点的 <reference internal="True" refuri="class_node#class-node-property-process-mode"><inline classes="std std-ref">Node.process_mode</inline></reference> 更改时触发。仅在编辑器中触发，以更新禁用节点的可见性。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-scenetree-groupcallflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-scenetree-groupcallflags" names="enum_scenetree_groupcallflags">enum <strong>GroupCallFlags</strong>: <reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-scenetree-constant-group-call-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scenetree-constant-group-call-default" names="class_scenetree_constant_group_call_default"><reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference> <strong>GROUP_CALL_DEFAULT</strong> = <literal>0</literal></paragraph>
            <paragraph>没有特殊行为地调用组内的节点（默认）。</paragraph>
            <target refid="class-scenetree-constant-group-call-reverse"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scenetree-constant-group-call-reverse" names="class_scenetree_constant_group_call_reverse"><reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference> <strong>GROUP_CALL_REVERSE</strong> = <literal>1</literal></paragraph>
            <paragraph>按相反的树层次结构顺序调用组内的节点（所有嵌套子节点都在其各自的父节点之前调用）。</paragraph>
            <target refid="class-scenetree-constant-group-call-deferred"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scenetree-constant-group-call-deferred" names="class_scenetree_constant_group_call_deferred"><reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference> <strong>GROUP_CALL_DEFERRED</strong> = <literal>2</literal></paragraph>
            <paragraph>在当前帧（可以是处理帧或物理帧）末尾调用组内的节点，类似于 <reference internal="True" refuri="class_object#class-object-method-call-deferred"><inline classes="std std-ref">Object.call_deferred</inline></reference>。</paragraph>
            <target refid="class-scenetree-constant-group-call-unique"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scenetree-constant-group-call-unique" names="class_scenetree_constant_group_call_unique"><reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference> <strong>GROUP_CALL_UNIQUE</strong> = <literal>4</literal></paragraph>
            <paragraph>即使在同一帧中执行多次，也仅调用组内的节点一次。必须与 <reference internal="True" refid="class-scenetree-constant-group-call-deferred"><inline classes="std std-ref">GROUP_CALL_DEFERRED</inline></reference> 结合使用才能工作。</paragraph>
            <paragraph><strong>注意：</strong>不考虑不同的参数。因此，当使用不同的参数执行相同的调用时，只会执行第一个调用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-scenetree-property-auto-accept-quit"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-auto-accept-quit" names="class_scenetree_property_auto_accept_quit"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>auto_accept_quit</strong> = <literal>true</literal> <reference internal="True" refid="class-scenetree-property-auto-accept-quit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_auto_accept_quit</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_auto_accept_quit</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则应用程序会自动接受退出请求。</paragraph>
            <paragraph>移动平台见 <reference internal="True" refid="class-scenetree-property-quit-on-go-back"><inline classes="std std-ref">quit_on_go_back</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-current-scene"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-current-scene" names="class_scenetree_property_current_scene"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>current_scene</strong> <reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_current_scene</strong>(value: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>get_current_scene</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前加载的主场景的根节点，通常是 <reference internal="True" refid="class-scenetree-property-root"><inline classes="std std-ref">root</inline></reference> 的直接子节点。另见 <reference internal="True" refid="class-scenetree-method-change-scene-to-file"><inline classes="std std-ref">change_scene_to_file</inline></reference>、<reference internal="True" refid="class-scenetree-method-change-scene-to-packed"><inline classes="std std-ref">change_scene_to_packed</inline></reference>、<reference internal="True" refid="class-scenetree-method-reload-current-scene"><inline classes="std std-ref">reload_current_scene</inline></reference>。</paragraph>
            <paragraph><strong>警告：</strong>直接设置该属性可能无法正常工作，因为这样<emphasis>不会</emphasis>在场景树中添加删除节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-debug-collisions-hint"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-debug-collisions-hint" names="class_scenetree_property_debug_collisions_hint"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>debug_collisions_hint</strong> = <literal>false</literal> <reference internal="True" refid="class-scenetree-property-debug-collisions-hint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_debug_collisions_hint</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_debugging_collisions_hint</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，从编辑器中运行游戏时会显示碰撞形状，方便调试。</paragraph>
            <paragraph><strong>注意：</strong>这个属性不应在运行时更改。在运行项目时更改 <reference internal="True" refid="class-scenetree-property-debug-collisions-hint"><inline classes="std std-ref">debug_collisions_hint</inline></reference> 的值不会有想要的效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-debug-navigation-hint"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-debug-navigation-hint" names="class_scenetree_property_debug_navigation_hint"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>debug_navigation_hint</strong> = <literal>false</literal> <reference internal="True" refid="class-scenetree-property-debug-navigation-hint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_debug_navigation_hint</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_debugging_navigation_hint</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，从编辑器中运行游戏时会显示导航多边形，方便调试。</paragraph>
            <paragraph><strong>注意：</strong>这个属性不应在运行时更改。在运行项目时更改 <reference internal="True" refid="class-scenetree-property-debug-navigation-hint"><inline classes="std std-ref">debug_navigation_hint</inline></reference> 的值不会有想要的效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-debug-paths-hint"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-debug-paths-hint" names="class_scenetree_property_debug_paths_hint"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>debug_paths_hint</strong> = <literal>false</literal> <reference internal="True" refid="class-scenetree-property-debug-paths-hint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_debug_paths_hint</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_debugging_paths_hint</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，从编辑器中运行游戏时，来自 <reference internal="True" refuri="class_path2d#class-path2d"><inline classes="std std-ref">Path2D</inline></reference> 和 <reference internal="True" refuri="class_path3d#class-path3d"><inline classes="std std-ref">Path3D</inline></reference> 节点的曲线将可见以进行调试。</paragraph>
            <paragraph><strong>注意：</strong>该属性没有被设计为在运行时更改。在项目运行时更改 <reference internal="True" refid="class-scenetree-property-debug-paths-hint"><inline classes="std std-ref">debug_paths_hint</inline></reference> 的值不会产生预期的效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-edited-scene-root"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-edited-scene-root" names="class_scenetree_property_edited_scene_root"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>edited_scene_root</strong> <reference internal="True" refid="class-scenetree-property-edited-scene-root"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_edited_scene_root</strong>(value: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>get_edited_scene_root</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>编辑器中当前正在编辑场景的根节点。通常是 <reference internal="True" refid="class-scenetree-property-root"><inline classes="std std-ref">root</inline></reference> 的直接子节点。</paragraph>
            <paragraph><strong>注意：</strong>该属性在发布版本中不起任何作用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-multiplayer-poll"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-multiplayer-poll" names="class_scenetree_property_multiplayer_poll"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>multiplayer_poll</strong> = <literal>true</literal> <reference internal="True" refid="class-scenetree-property-multiplayer-poll"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_multiplayer_poll_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_multiplayer_poll_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>（默认值），则在 <reference internal="True" refid="class-scenetree-signal-process-frame"><inline classes="std std-ref">process_frame</inline></reference> 期间为该 SceneTree 启用 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 的自动轮询。</paragraph>
            <paragraph>如果为 <literal>false</literal>，则需要手动调用 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-poll"><inline classes="std std-ref">MultiplayerAPI.poll</inline></reference> 以处理网络数据包并下发 RPC。这允许在一个不同的循环（例如物理、线程、特定时间步长）中运行 RPC，并在从线程访问 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 时进行手动 <reference internal="True" refuri="class_mutex#class-mutex"><inline classes="std std-ref">Mutex</inline></reference> 保护。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-paused"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-paused" names="class_scenetree_property_paused"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>paused</strong> = <literal>false</literal> <reference internal="True" refid="class-scenetree-property-paused"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pause</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_paused</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该场景树被视为暂停。这会导致以下行为：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>2D 和 3D 物理将停止，包括碰撞检测和相关信号。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>根据每个节点的 <reference internal="True" refuri="class_node#class-node-property-process-mode"><inline classes="std std-ref">Node.process_mode</inline></reference>，它们的 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference>、<reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-private-method-input"><inline classes="std std-ref">Node._input</inline></reference> 回调方法可能不再被调用。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-physics-interpolation"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-physics-interpolation" names="class_scenetree_property_physics_interpolation"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>physics_interpolation</strong> = <literal>false</literal> <reference internal="True" refid="class-scenetree-property-physics-interpolation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_physics_interpolation_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_physics_interpolation_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If <literal>true</literal>, the renderer will interpolate the transforms of physics objects between the last two transforms, so that smooth motion is seen even when physics ticks do not coincide with rendered frames.</paragraph>
            <paragraph>The default value of this property is controlled by <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-common-physics-interpolation"><inline classes="std std-ref">ProjectSettings.physics/common/physics_interpolation</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-quit-on-go-back"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-quit-on-go-back" names="class_scenetree_property_quit_on_go_back"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>quit_on_go_back</strong> = <literal>true</literal> <reference internal="True" refid="class-scenetree-property-quit-on-go-back"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_quit_on_go_back</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_quit_on_go_back</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该应用程序会在导航返回时自动退出（例如在 Android 上使用系统“返回”键）。</paragraph>
            <paragraph>禁用这个选项时，如果要处理“返回”按钮，请使用 <reference internal="True" refuri="class_displayserver#class-displayserver-constant-window-event-go-back-request"><inline classes="std std-ref">DisplayServer.WINDOW_EVENT_GO_BACK_REQUEST</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-property-root"></target>
            <paragraph classes="classref-property" ids="class-scenetree-property-root" names="class_scenetree_property_root"><reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> <strong>root</strong> <reference internal="True" refid="class-scenetree-property-root"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> <strong>get_root</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>场景树的根 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference>。这是场景树的最顶层 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>，始终存在。绝对 <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> 始终从这个节点开始。加载的 <reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">current_scene</inline></reference> 以及“项目设置”中配置的<reference internal="True" refuri="../tutorials/scripting/singletons_autoload"><inline classes="doc">自动加载</inline></reference>可能也是根节点的子节点。</paragraph>
            <paragraph><strong>警告：</strong>请勿删除该节点。删除会导致不稳定的行为并引起崩溃。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-scenetree-method-call-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-call-group" names="class_scenetree_method_call_group"><abbreviation explanation="无返回值。">void</abbreviation> <strong>call_group</strong>(group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-scenetree-method-call-group"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在该树内添加到给定 <literal>group</literal>的每个节点上调用 <literal>method</literal>。你可以通过在该方法调用末尾指定参数来将参数传递给 <literal>method</literal>。无法调用 <literal>method</literal> 的节点（因为该方法不存在或参数不匹配）将被忽略。另见 <reference internal="True" refid="class-scenetree-method-set-group"><inline classes="std std-ref">set_group</inline></reference> 和 <reference internal="True" refid="class-scenetree-method-notify-group"><inline classes="std std-ref">notify_group</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法立即作用于所有选定的节点，这可能会在某些性能密集型情况下导致卡顿。</paragraph>
            <paragraph><strong>注意：</strong>在 C# 中，当引用内置的 Godot 方法时，<literal>method</literal> 必须使用 snake_case。最好使用 <literal>MethodName</literal> 类中公开的名称，以避免在每次调用时分配新的 <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-call-group-flags"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-call-group-flags" names="class_scenetree_method_call_group_flags"><abbreviation explanation="无返回值。">void</abbreviation> <strong>call_group_flags</strong>(flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-scenetree-method-call-group-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在树内添加到给定 <literal>group</literal> 的每个节点上调用给定的 <literal>method</literal>。使用 <literal>flags</literal> 自定义该方法的行为（请参阅 <reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference>）。<literal>method</literal> 的附加参数可以在该方法的末尾传递。无法调用 <literal>method</literal> 的节点（因为该方法不存在或参数不匹配）将被忽略。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 在帧末尾以相反的树顺序，在 “enemies” 组的所有节点上调用 “hide”。
get_tree().call_group_flags(
        SceneTree.GROUP_CALL_DEFERRED | SceneTree.GROUP_CALL_REVERSE,
        "enemies", "hide")</literal_block>
            <paragraph><strong>注意：</strong>在 C# 中，当引用内置的 Godot 方法时，<literal>method</literal> 必须使用 snake_case。最好使用 <literal>MethodName</literal> 类中公开的名称，以避免在每次调用时分配新的 <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-change-scene-to-file"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-change-scene-to-file" names="class_scenetree_method_change_scene_to_file"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>change_scene_to_file</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-scenetree-method-change-scene-to-file"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将位于给定路径 <literal>path</literal> 的场景加载进一个 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 并新建其实例，然后将正在运行的场景修改为这个场景。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>；如果 <literal>path</literal> 不能被加载到一个 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 中，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-open"><inline classes="std std-ref">@GlobalScope.ERR_CANT_OPEN</inline></reference>；如果该场景无法被实例化，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-create"><inline classes="std std-ref">@GlobalScope.ERR_CANT_CREATE</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>有关操作顺序的详细信息，请参阅 <reference internal="True" refid="class-scenetree-method-change-scene-to-packed"><inline classes="std std-ref">change_scene_to_packed</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-change-scene-to-packed"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-change-scene-to-packed" names="class_scenetree_method_change_scene_to_packed"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>change_scene_to_packed</strong>(packed_scene: <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference>) <reference internal="True" refid="class-scenetree-method-change-scene-to-packed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将正在运行的场景更改为给定 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 的新实例（新实例必须有效）。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，场景无法被实例化时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-create"><inline classes="std std-ref">@GlobalScope.ERR_CANT_CREATE</inline></reference>，场景无效时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-invalid-parameter"><inline classes="std std-ref">@GlobalScope.ERR_INVALID_PARAMETER</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>当 <reference internal="True" refid="class-scenetree-method-change-scene-to-packed"><inline classes="std std-ref">change_scene_to_packed</inline></reference> 被调用时，操作按以下顺序发生：</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>当前场景节点被立即从树中移除。从那时起，在当前（传出）场景上调用的 <reference internal="True" refuri="class_node#class-node-method-get-tree"><inline classes="std std-ref">Node.get_tree</inline></reference> 将返回 <literal>null</literal>。<reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">current_scene</inline></reference> 也将变为 <literal>null</literal>，因为新场景尚不可用。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在帧末尾时，已从树中移除的、之前的当前场景将被删除（从内存中释放），然后新场景将被实例化并添加到树中。<reference internal="True" refuri="class_node#class-node-method-get-tree"><inline classes="std std-ref">Node.get_tree</inline></reference> 和 <reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">current_scene</inline></reference> 将恢复正常工作。</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>这确保了两个场景不会同时运行，并且仍然会以类似于 <reference internal="True" refuri="class_node#class-node-method-queue-free"><inline classes="std std-ref">Node.queue_free</inline></reference> 的安全方式释放之前的场景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-create-timer"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-create-timer" names="class_scenetree_method_create_timer"><reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer"><inline classes="std std-ref">SceneTreeTimer</inline></reference> <strong>create_timer</strong>(time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, process_always: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, process_in_physics: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, ignore_time_scale: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-scenetree-method-create-timer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个新的 <reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer"><inline classes="std std-ref">SceneTreeTimer</inline></reference>。在以秒为单位的 <literal>time_sec</literal> 过去后，该计时器将发出 <reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer-signal-timeout"><inline classes="std std-ref">SceneTreeTimer.timeout</inline></reference> 并自动释放。</paragraph>
            <paragraph>如果 <literal>process_always</literal> 为 <literal>false</literal>，则当将 <reference internal="True" refid="class-scenetree-property-paused"><inline classes="std std-ref">paused</inline></reference> 设置为 <literal>true</literal> 时，该计时器将被暂停。</paragraph>
            <paragraph>如果 <literal>process_in_physics</literal> 为 <literal>true</literal>，则该计时器将在物理帧结束时，而不是在过程帧结束时更新。</paragraph>
            <paragraph>如果 <literal>ignore_time_scale</literal> 为 <literal>true</literal>，则该计时器将忽略 <reference internal="True" refuri="class_engine#class-engine-property-time-scale"><inline classes="std std-ref">Engine.time_scale</inline></reference> 并使用实际的、经过的时间更新。</paragraph>
            <paragraph>该方法通常用于创建一次性的延迟计时器，如下例所示：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func some_function():
    print("开始")
    await get_tree().create_timer(1.0).timeout
    print("结束")</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public async Task SomeFunction()
{
    GD.Print("开始");
    await ToSignal(GetTree().CreateTimer(1.0f), SceneTreeTimer.SignalName.Timeout);
    GD.Print("结束");
}</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>该计时器总是在树中的所有节点<emphasis>之后</emphasis>更新。在该计时器更新之前，将调用节点的 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference> 方法（如果 <literal>process_in_physics</literal> 被设置为 <literal>true</literal>，则调用 <reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-create-tween"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-create-tween" names="class_scenetree_method_create_tween"><reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference> <strong>create_tween</strong>() <reference internal="True" refid="class-scenetree-method-create-tween"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建并返回在该树中处理的新的 <reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference>。该 Tween 将在下一个处理帧或物理帧中自动开始（取决于其 <reference internal="True" refuri="class_tween#enum-tween-tweenprocessmode"><inline classes="std std-ref">TweenProcessMode</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>使用该方法创建的 <reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference> 不会被绑定到任何 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>。它可能会继续工作，直到没有任何东西可以进行动画。如果希望在 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 被释放时自动终结该 <reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference>，请使用 <reference internal="True" refuri="class_node#class-node-method-create-tween"><inline classes="std std-ref">Node.create_tween</inline></reference> 或 <reference internal="True" refuri="class_tween#class-tween-method-bind-node"><inline classes="std std-ref">Tween.bind_node</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-first-node-in-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-first-node-in-group" names="class_scenetree_method_get_first_node_in_group"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>get_first_node_in_group</strong>(group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-scenetree-method-get-first-node-in-group"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回树中找到的第一个加入了 <literal>group</literal> 分组的 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>，查找时按照场景层次结构顺序。如果没有找到匹配的节点则返回 <literal>null</literal>。另见 <reference internal="True" refid="class-scenetree-method-get-nodes-in-group"><inline classes="std std-ref">get_nodes_in_group</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-frame"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-frame" names="class_scenetree_method_get_frame"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_frame</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenetree-method-get-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回程序开始运行之后已经处理了多少帧。测量的<emphasis>不是</emphasis>经过的时间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-multiplayer"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-multiplayer" names="class_scenetree_method_get_multiplayer"><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> <strong>get_multiplayer</strong>(for_path: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> = NodePath("")) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenetree-method-get-multiplayer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>搜索为给定路径配置的 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference>，如果不存在，则会搜索父路径，直到找到为止。如果路径为空，或者没有找到，则返回默认路径。参见 <reference internal="True" refid="class-scenetree-method-set-multiplayer"><inline classes="std std-ref">set_multiplayer</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-node-count"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-node-count" names="class_scenetree_method_get_node_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_node_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenetree-method-get-node-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该树中的节点数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-node-count-in-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-node-count-in-group" names="class_scenetree_method_get_node_count_in_group"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_node_count_in_group</strong>(group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenetree-method-get-node-count-in-group"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回分配给给定组的节点数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-nodes-in-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-nodes-in-group" names="class_scenetree_method_get_nodes_in_group"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>] <strong>get_nodes_in_group</strong>(group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-scenetree-method-get-nodes-in-group"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，其中包含的是树中所有加入了 <literal>group</literal> 分组的节点，按照场景层次结构排序。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-get-processed-tweens"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-get-processed-tweens" names="class_scenetree_method_get_processed_tweens"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference>] <strong>get_processed_tweens</strong>() <reference internal="True" refid="class-scenetree-method-get-processed-tweens"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回树中当前存在的 <reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference> 的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，包括暂停的补间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-has-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-has-group" names="class_scenetree_method_has_group"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_group</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenetree-method-has-group"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果树中存在添加到给定组 <literal>name</literal> 的节点，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-notify-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-notify-group" names="class_scenetree_method_notify_group"><abbreviation explanation="无返回值。">void</abbreviation> <strong>notify_group</strong>(group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, notification: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-scenetree-method-notify-group"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在树内添加到该 <literal>group</literal> 的所有节点上，使用给定 <literal>notification</literal> 调用 <reference internal="True" refuri="class_object#class-object-method-notification"><inline classes="std std-ref">Object.notification</inline></reference>。另见 <reference internal="True" refid="class-scenetree-method-call-group"><inline classes="std std-ref">call_group</inline></reference> 和 <reference internal="True" refid="class-scenetree-method-set-group"><inline classes="std std-ref">set_group</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法立即作用于所有选定的节点，这可能会在某些性能密集型情况下导致卡顿。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-notify-group-flags"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-notify-group-flags" names="class_scenetree_method_notify_group_flags"><abbreviation explanation="无返回值。">void</abbreviation> <strong>notify_group_flags</strong>(call_flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, notification: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-scenetree-method-notify-group-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的 <literal>notification</literal> 对添加到 <literal>group</literal> 的该树内的所有节点调用 <reference internal="True" refuri="class_object#class-object-method-notification"><inline classes="std std-ref">Object.notification</inline></reference> 。使用 <literal>call_flags</literal> 自定义该方法的行为（请参阅 <reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-queue-delete"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-queue-delete" names="class_scenetree_method_queue_delete"><abbreviation explanation="无返回值。">void</abbreviation> <strong>queue_delete</strong>(obj: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <reference internal="True" refid="class-scenetree-method-queue-delete"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将要删除的给定 <literal>obj</literal> 排队，在当前帧末尾调用其 <reference internal="True" refuri="class_object#class-object-method-free"><inline classes="std std-ref">Object.free</inline></reference>。该方法与 <reference internal="True" refuri="class_node#class-node-method-queue-free"><inline classes="std std-ref">Node.queue_free</inline></reference> 类似。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-quit"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-quit" names="class_scenetree_method_quit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>quit</strong>(exit_code: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-scenetree-method-quit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的 <literal>exit_code</literal> 在当前迭代结束时退出应用程序。</paragraph>
            <paragraph>按照惯例，退出代码 <literal>0</literal> 表示成功，而任何其他退出代码表示错误。出于可移植性的原因，它应该在 <literal>0</literal> 和 <literal>125</literal> （含）之间。</paragraph>
            <paragraph><strong>注意：</strong>这个方法在 iOS 上不起作用。相反，根据 <reference name="《iOS 人机界面指南》" refuri="https://developer.apple.com/library/archive/qa/qa1561/_index.html">《iOS 人机界面指南》</reference> 中的建议，用户应通过 Home 按钮关闭应用程序。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-reload-current-scene"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-reload-current-scene" names="class_scenetree_method_reload_current_scene"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>reload_current_scene</strong>() <reference internal="True" refid="class-scenetree-method-reload-current-scene"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>重新加载当前活动的场景，将 <reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">current_scene</inline></reference> 替换为其原始 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 的新实例。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，如果尚未定义 <reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">current_scene</inline></reference>，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-unconfigured"><inline classes="std std-ref">@GlobalScope.ERR_UNCONFIGURED</inline></reference>，如果 <reference internal="True" refid="class-scenetree-property-current-scene"><inline classes="std std-ref">current_scene</inline></reference> 无法加载到 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 中，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-open"><inline classes="std std-ref">@GlobalScope.ERR_CANT_OPEN</inline></reference>，如果场景无法实例化，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-create"><inline classes="std std-ref">@GlobalScope.ERR_CANT_CREATE</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-set-group"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-set-group" names="class_scenetree_method_set_group"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_group</strong>(group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, property: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-scenetree-method-set-group"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该树内被添加到给定 <literal>group</literal> 的所有节点上的给定 <literal>property</literal> 设置为 <literal>value</literal>。没有 <literal>property</literal> 的节点将被忽略。另见 <reference internal="True" refid="class-scenetree-method-call-group"><inline classes="std std-ref">call_group</inline></reference> 和 <reference internal="True" refid="class-scenetree-method-notify-group"><inline classes="std std-ref">notify_group</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法立即作用于所有选定的节点上，这可能会在某些性能密集型的情况下导致卡顿。</paragraph>
            <paragraph><strong>注意：</strong>在 C# 中，在引用 Godot 内置属性时，<literal>property</literal> 必须是 snake_case。最好使用 <literal>PropertyName</literal> 类中公开的名称，以避免在每次调用时分配一个新的 <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-set-group-flags"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-set-group-flags" names="class_scenetree_method_set_group_flags"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_group_flags</strong>(call_flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, group: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, property: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-scenetree-method-set-group-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该树内被添加到给定 <literal>group</literal> 的所有节点上的给定 <literal>property</literal> 设置为 <literal>value</literal>。没有 <literal>property</literal> 的节点将被忽略。使用 <literal>call_flags</literal> 自定义该方法的行为（请参阅 <reference internal="True" refid="enum-scenetree-groupcallflags"><inline classes="std std-ref">GroupCallFlags</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>在 C# 中，在引用 Godot 内置方法时，<literal>property</literal> 必须是 snake_case。最好使用 <literal>SignalName</literal> 类中公开的名称，以避免在每次调用时分配一个新的 <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-set-multiplayer"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-set-multiplayer" names="class_scenetree_method_set_multiplayer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_multiplayer</strong>(multiplayer: <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference>, root_path: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> = NodePath("")) <reference internal="True" refid="class-scenetree-method-set-multiplayer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用给定的 <literal>root_path</literal> 设置自定义的 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference>（同时控制相对的子路径），如果 <literal>root_path</literal> 为空，则会覆盖默认值。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 不能为包含 <literal>root_path</literal> 的子路径配置，嵌套的自定义多人游戏是不被允许的。例如，如果为 <literal>"/root/Foo"</literal> 配置了一项，则为 <literal>"/root/Foo/Bar"</literal> 设置一项将导致错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenetree-method-unload-current-scene"></target>
            <paragraph classes="classref-method" ids="class-scenetree-method-unload-current-scene" names="class_scenetree_method_unload_current_scene"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unload_current_scene</strong>() <reference internal="True" refid="class-scenetree-method-unload-current-scene"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果当前场景已加载，调用此方法将进行卸载。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
