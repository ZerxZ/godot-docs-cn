<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_collisionobject2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/CollisionObject2D.xml.</comment>
    <target refid="class-collisionobject2d"></target>
    <section ids="collisionobject2d class-collisionobject2d" names="collisionobject2d class_collisionobject2d">
        <title>CollisionObject2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_area2d#class-area2d"><inline classes="std std-ref">Area2D</inline></reference>, <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference></paragraph>
        <paragraph>2D 物理对象的抽象基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>2D 物理对象的抽象基类。<strong>CollisionObject2D</strong> 能够容纳任意数量的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 用作碰撞形状。每个形状必须分配给一个<emphasis>形状所有者</emphasis>。形状所有者不是节点，也不会出现在编辑器中，但可以通过代码使用 <literal>shape_owner_*</literal> 方法访问。</paragraph>
            <paragraph><strong>注意：</strong>仅支持相同画布中不同对象的碰撞（<reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 画布或 <reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference>）。不同画布中的对象之间的碰撞行为是未定义的。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="56"></colspec>
                    <colspec colwidth="80"></colspec>
                    <colspec colwidth="10"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-property-collision-mask"><inline classes="std std-ref">collision_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-property-collision-priority"><inline classes="std std-ref">collision_priority</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-collisionobject2d-disablemode"><inline classes="std std-ref">DisableMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-property-disable-mode"><inline classes="std std-ref">disable_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-property-input-pickable"><inline classes="std std-ref">input_pickable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="214"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-private-method-input-event"><inline classes="std std-ref">_input_event</inline></reference>(viewport: <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference>, event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>, shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-private-method-mouse-enter"><inline classes="std std-ref">_mouse_enter</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-private-method-mouse-exit"><inline classes="std std-ref">_mouse_exit</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-private-method-mouse-shape-enter"><inline classes="std std-ref">_mouse_shape_enter</inline></reference>(shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-private-method-mouse-shape-exit"><inline classes="std std-ref">_mouse_shape_exit</inline></reference>(shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-create-shape-owner"><inline classes="std std-ref">create_shape_owner</inline></reference>(owner: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-get-collision-layer-value"><inline classes="std std-ref">get_collision_layer_value</inline></reference>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-get-collision-mask-value"><inline classes="std std-ref">get_collision_mask_value</inline></reference>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-get-rid"><inline classes="std std-ref">get_rid</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-get-shape-owner-one-way-collision-margin"><inline classes="std std-ref">get_shape_owner_one_way_collision_margin</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-get-shape-owners"><inline classes="std std-ref">get_shape_owners</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-is-shape-owner-disabled"><inline classes="std std-ref">is_shape_owner_disabled</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-is-shape-owner-one-way-collision-enabled"><inline classes="std std-ref">is_shape_owner_one_way_collision_enabled</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-remove-shape-owner"><inline classes="std std-ref">remove_shape_owner</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-set-collision-layer-value"><inline classes="std std-ref">set_collision_layer_value</inline></reference>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-set-collision-mask-value"><inline classes="std std-ref">set_collision_mask_value</inline></reference>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-find-owner"><inline classes="std std-ref">shape_find_owner</inline></reference>(shape_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-owner-add-shape"><inline classes="std std-ref">shape_owner_add_shape</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, shape: <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-owner-clear-shapes"><inline classes="std std-ref">shape_owner_clear_shapes</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-owner-get-owner"><inline classes="std std-ref">shape_owner_get_owner</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-owner-get-shape"><inline classes="std std-ref">shape_owner_get_shape</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, shape_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-owner-get-shape-count"><inline classes="std std-ref">shape_owner_get_shape_count</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-owner-get-shape-index"><inline classes="std std-ref">shape_owner_get_shape_index</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, shape_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-owner-get-transform"><inline classes="std std-ref">shape_owner_get_transform</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-owner-remove-shape"><inline classes="std std-ref">shape_owner_remove_shape</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, shape_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-owner-set-disabled"><inline classes="std std-ref">shape_owner_set_disabled</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-owner-set-one-way-collision"><inline classes="std std-ref">shape_owner_set_one_way_collision</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-owner-set-one-way-collision-margin"><inline classes="std std-ref">shape_owner_set_one_way_collision_margin</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-collisionobject2d-method-shape-owner-set-transform"><inline classes="std std-ref">shape_owner_set_transform</inline></reference>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-collisionobject2d-signal-input-event"></target>
            <paragraph classes="classref-signal" ids="class-collisionobject2d-signal-input-event" names="class_collisionobject2d_signal_input_event"><strong>input_event</strong>(viewport: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>, event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>, shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-collisionobject2d-signal-input-event"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当输入事件发生时发出。要求 <reference internal="True" refid="class-collisionobject2d-property-input-pickable"><inline classes="std std-ref">input_pickable</inline></reference> 为 <literal>true</literal> 并且至少设置了一个 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 位。详见 <reference internal="True" refid="class-collisionobject2d-private-method-input-event"><inline classes="std std-ref">_input_event</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-signal-mouse-entered"></target>
            <paragraph classes="classref-signal" ids="class-collisionobject2d-signal-mouse-entered" names="class_collisionobject2d_signal_mouse_entered"><strong>mouse_entered</strong>() <reference internal="True" refid="class-collisionobject2d-signal-mouse-entered"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标指针进入该对象的任何形状时发出。要求 <reference internal="True" refid="class-collisionobject2d-property-input-pickable"><inline classes="std std-ref">input_pickable</inline></reference> 为 <literal>true</literal> 并且至少设置了一个 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 位。请注意，在单个 <strong>CollisionObject2D</strong> 中的不同形状之间移动，不会导致发出该信号。</paragraph>
            <paragraph><strong>注意：</strong>由于缺少连续的碰撞检测，如果鼠标移动得足够快并且 <strong>CollisionObject2D</strong> 的区域很小，则该信号可能不会按预期的顺序发出。如果另一个 <strong>CollisionObject2D</strong> 与所讨论的 <strong>CollisionObject2D</strong> 重叠，则也可能不会发出该信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-signal-mouse-exited"></target>
            <paragraph classes="classref-signal" ids="class-collisionobject2d-signal-mouse-exited" names="class_collisionobject2d_signal_mouse_exited"><strong>mouse_exited</strong>() <reference internal="True" refid="class-collisionobject2d-signal-mouse-exited"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标指针离开该对象的所有形状时发出。要求 <reference internal="True" refid="class-collisionobject2d-property-input-pickable"><inline classes="std std-ref">input_pickable</inline></reference> 为 <literal>true</literal> 并且至少设置了一个 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 位。请注意，在单个 <strong>CollisionObject2D</strong> 中的不同形状之间移动，不会导致发出该信号。</paragraph>
            <paragraph><strong>注意：</strong>由于缺少连续的碰撞检测，如果鼠标移动得足够快并且 <strong>CollisionObject2D</strong> 的区域很小，则该信号可能不会按预期的顺序发出。如果另一个 <strong>CollisionObject2D</strong> 与所讨论的 <strong>CollisionObject2D</strong> 重叠，则也可能不会发出该信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-signal-mouse-shape-entered"></target>
            <paragraph classes="classref-signal" ids="class-collisionobject2d-signal-mouse-shape-entered" names="class_collisionobject2d_signal_mouse_shape_entered"><strong>mouse_shape_entered</strong>(shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-collisionobject2d-signal-mouse-shape-entered"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标指针进入该实体的任何形状或从一种形状移动到另一种形状时发出。<literal>shape_idx</literal> 是新进入的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 的子索引。要求 <reference internal="True" refid="class-collisionobject2d-property-input-pickable"><inline classes="std std-ref">input_pickable</inline></reference> 为 <literal>true</literal> 并且至少设置一个 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 位。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-signal-mouse-shape-exited"></target>
            <paragraph classes="classref-signal" ids="class-collisionobject2d-signal-mouse-shape-exited" names="class_collisionobject2d_signal_mouse_shape_exited"><strong>mouse_shape_exited</strong>(shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-collisionobject2d-signal-mouse-shape-exited"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标指针离开该实体的任何形状时发出。<literal>shape_idx</literal> 是退出的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 的子索引。要求 <reference internal="True" refid="class-collisionobject2d-property-input-pickable"><inline classes="std std-ref">input_pickable</inline></reference> 为 <literal>true</literal> 并且至少设置一个 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 位。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-collisionobject2d-disablemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-collisionobject2d-disablemode" names="enum_collisionobject2d_disablemode">enum <strong>DisableMode</strong>: <reference internal="True" refid="enum-collisionobject2d-disablemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-collisionobject2d-constant-disable-mode-remove"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-collisionobject2d-constant-disable-mode-remove" names="class_collisionobject2d_constant_disable_mode_remove"><reference internal="True" refid="enum-collisionobject2d-disablemode"><inline classes="std std-ref">DisableMode</inline></reference> <strong>DISABLE_MODE_REMOVE</strong> = <literal>0</literal></paragraph>
            <paragraph>当 <reference internal="True" refuri="class_node#class-node-property-process-mode"><inline classes="std std-ref">Node.process_mode</inline></reference> 被设置为 <reference internal="True" refuri="class_node#class-node-constant-process-mode-disabled"><inline classes="std std-ref">Node.PROCESS_MODE_DISABLED</inline></reference> 时，从物理仿真中移除，停止与此 <strong>CollisionObject2D</strong> 的所有物理交互。</paragraph>
            <paragraph>当该 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 再次被处理时，会自动重新加入到物理仿真中。</paragraph>
            <target refid="class-collisionobject2d-constant-disable-mode-make-static"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-collisionobject2d-constant-disable-mode-make-static" names="class_collisionobject2d_constant_disable_mode_make_static"><reference internal="True" refid="enum-collisionobject2d-disablemode"><inline classes="std std-ref">DisableMode</inline></reference> <strong>DISABLE_MODE_MAKE_STATIC</strong> = <literal>1</literal></paragraph>
            <paragraph>当 <reference internal="True" refuri="class_node#class-node-property-process-mode"><inline classes="std std-ref">Node.process_mode</inline></reference> 被设置为 <reference internal="True" refuri="class_node#class-node-constant-process-mode-disabled"><inline classes="std std-ref">Node.PROCESS_MODE_DISABLED</inline></reference> 时，使物体进入静态模式。不影响 <reference internal="True" refuri="class_area2d#class-area2d"><inline classes="std std-ref">Area2D</inline></reference>。处于静态模式的 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 不会受到力和其他物体的影响。</paragraph>
            <paragraph>当该 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 再次被处理时，会自动将 <reference internal="True" refuri="class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> 设置回其原始模式。</paragraph>
            <target refid="class-collisionobject2d-constant-disable-mode-keep-active"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-collisionobject2d-constant-disable-mode-keep-active" names="class_collisionobject2d_constant_disable_mode_keep_active"><reference internal="True" refid="enum-collisionobject2d-disablemode"><inline classes="std std-ref">DisableMode</inline></reference> <strong>DISABLE_MODE_KEEP_ACTIVE</strong> = <literal>2</literal></paragraph>
            <paragraph>当 <reference internal="True" refuri="class_node#class-node-property-process-mode"><inline classes="std std-ref">Node.process_mode</inline></reference> 被设置为 <reference internal="True" refuri="class_node#class-node-constant-process-mode-disabled"><inline classes="std std-ref">Node.PROCESS_MODE_DISABLED</inline></reference> 时，不影响物理仿真。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-collisionobject2d-property-collision-layer"></target>
            <paragraph classes="classref-property" ids="class-collisionobject2d-property-collision-layer" names="class_collisionobject2d_property_collision_layer"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>collision_layer</strong> = <literal>1</literal> <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collision_layer</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_collision_layer</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>此 CollisionObject2D 所在的物理层。碰撞对象可以存在于 32 个不同层中的一个或多个中。另见 <reference internal="True" refid="class-collisionobject2d-property-collision-mask"><inline classes="std std-ref">collision_mask</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>只有当对象 B 在对象 A 扫描的任何层中时，对象 A 才能检测到与对象 B 的接触。有关更多信息，请参阅文档中的<reference name="《碰撞层与掩码》" refuri="../tutorials/physics/physics_introduction.html#collision-layers-and-masks">《碰撞层与掩码》</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-property-collision-mask"></target>
            <paragraph classes="classref-property" ids="class-collisionobject2d-property-collision-mask" names="class_collisionobject2d_property_collision_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>collision_mask</strong> = <literal>1</literal> <reference internal="True" refid="class-collisionobject2d-property-collision-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collision_mask</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_collision_mask</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>此 CollisionObject2D 扫描的物理层。碰撞对象可以扫描 32 个不同层中的一个或多个。另见 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>只有当对象 B 在对象 A 扫描的任何层中时，对象 A 才能检测到与对象 B 的接触。有关更多信息，请参阅文档中的<reference name="《碰撞层与掩码》" refuri="../tutorials/physics/physics_introduction.html#collision-layers-and-masks">《碰撞层与掩码》</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-property-collision-priority"></target>
            <paragraph classes="classref-property" ids="class-collisionobject2d-property-collision-priority" names="class_collisionobject2d_property_collision_priority"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>collision_priority</strong> = <literal>1.0</literal> <reference internal="True" refid="class-collisionobject2d-property-collision-priority"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collision_priority</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_collision_priority</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>发生穿透时用于解决碰撞的优先级。优先级越高，对物体的穿透度就越低。例如，可以用来防止玩家突破关卡的边界。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-property-disable-mode"></target>
            <paragraph classes="classref-property" ids="class-collisionobject2d-property-disable-mode" names="class_collisionobject2d_property_disable_mode"><reference internal="True" refid="enum-collisionobject2d-disablemode"><inline classes="std std-ref">DisableMode</inline></reference> <strong>disable_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-collisionobject2d-property-disable-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_disable_mode</strong>(value: <reference internal="True" refid="enum-collisionobject2d-disablemode"><inline classes="std std-ref">DisableMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-collisionobject2d-disablemode"><inline classes="std std-ref">DisableMode</inline></reference> <strong>get_disable_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当 <reference internal="True" refuri="class_node#class-node-property-process-mode"><inline classes="std std-ref">Node.process_mode</inline></reference> 被设置为 <reference internal="True" refuri="class_node#class-node-constant-process-mode-disabled"><inline classes="std std-ref">Node.PROCESS_MODE_DISABLED</inline></reference> 时，定义物理行为。有关不同模式的更多详细信息，请参阅 <reference internal="True" refid="enum-collisionobject2d-disablemode"><inline classes="std std-ref">DisableMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-property-input-pickable"></target>
            <paragraph classes="classref-property" ids="class-collisionobject2d-property-input-pickable" names="class_collisionobject2d_property_input_pickable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>input_pickable</strong> = <literal>true</literal> <reference internal="True" refid="class-collisionobject2d-property-input-pickable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pickable</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_pickable</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该对象是可拾取的。可拾取的对象可以检测鼠标指针的进入/离开，鼠标位于其中时，就会报告输入事件。要求至少设置一个 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 位。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-collisionobject2d-private-method-input-event"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-private-method-input-event" names="class_collisionobject2d_private_method__input_event"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_input_event</strong>(viewport: <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference>, event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>, shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-collisionobject2d-private-method-input-event"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>接收未处理的 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>。<literal>shape_idx</literal> 是被点击的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 的子索引。连接到 <reference internal="True" refid="class-collisionobject2d-signal-input-event"><inline classes="std std-ref">input_event</inline></reference> 即可轻松获取这些事件。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-collisionobject2d-private-method-input-event"><inline classes="std std-ref">_input_event</inline></reference> 要求 <reference internal="True" refid="class-collisionobject2d-property-input-pickable"><inline classes="std std-ref">input_pickable</inline></reference> 为 <literal>true</literal>，并且至少要设置一个 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 位。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-private-method-mouse-enter"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-private-method-mouse-enter" names="class_collisionobject2d_private_method__mouse_enter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_mouse_enter</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-collisionobject2d-private-method-mouse-enter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标指针进入该实体的任何形状时调用。要求 <reference internal="True" refid="class-collisionobject2d-property-input-pickable"><inline classes="std std-ref">input_pickable</inline></reference> 为 <literal>true</literal> 并且至少设置了一个 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 位。请注意，在单个 <strong>CollisionObject2D</strong> 中的不同形状之间移动，不会导致该函数被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-private-method-mouse-exit"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-private-method-mouse-exit" names="class_collisionobject2d_private_method__mouse_exit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_mouse_exit</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-collisionobject2d-private-method-mouse-exit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标指针退出该实体的所有形状时调用。要求 <reference internal="True" refid="class-collisionobject2d-property-input-pickable"><inline classes="std std-ref">input_pickable</inline></reference> 为 <literal>true</literal> 并且至少设置了一个 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 位。请注意，在单个 <strong>CollisionObject2D</strong> 中的不同形状之间移动，不会导致该函数被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-private-method-mouse-shape-enter"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-private-method-mouse-shape-enter" names="class_collisionobject2d_private_method__mouse_shape_enter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_mouse_shape_enter</strong>(shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-collisionobject2d-private-method-mouse-shape-enter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标指针进入该实体的任何形状或从一个形状移动到另一个形状时调用。<literal>shape_idx</literal> 是新进入的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 的子索引。要求 <reference internal="True" refid="class-collisionobject2d-property-input-pickable"><inline classes="std std-ref">input_pickable</inline></reference> 为 <literal>true</literal> 并且要至少设置一个 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 位。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-private-method-mouse-shape-exit"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-private-method-mouse-shape-exit" names="class_collisionobject2d_private_method__mouse_shape_exit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_mouse_shape_exit</strong>(shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-collisionobject2d-private-method-mouse-shape-exit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标指针离开该实体的任何形状时调用。<literal>shape_idx</literal> 是退出的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 的子索引。要求 <reference internal="True" refid="class-collisionobject2d-property-input-pickable"><inline classes="std std-ref">input_pickable</inline></reference> 为 <literal>true</literal> 并且至少要设置一个 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 位。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-create-shape-owner"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-create-shape-owner" names="class_collisionobject2d_method_create_shape_owner"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>create_shape_owner</strong>(owner: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <reference internal="True" refid="class-collisionobject2d-method-create-shape-owner"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为给定对象创建一个新的形状所有者。返回 <literal>owner_id</literal>的新所有者，供将来引用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-get-collision-layer-value"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-get-collision-layer-value" names="class_collisionobject2d_method_get_collision_layer_value"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_collision_layer_value</strong>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-collisionobject2d-method-get-collision-layer-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 中是否启用了指定的层，给定的 <literal>layer_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-get-collision-mask-value"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-get-collision-mask-value" names="class_collisionobject2d_method_get_collision_mask_value"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_collision_mask_value</strong>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-collisionobject2d-method-get-collision-mask-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-collisionobject2d-property-collision-mask"><inline classes="std std-ref">collision_mask</inline></reference> 中是否启用了指定的层，给定的 <literal>layer_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-get-rid"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-get-rid" names="class_collisionobject2d_method_get_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_rid</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-collisionobject2d-method-get-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回对象的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-get-shape-owner-one-way-collision-margin"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-get-shape-owner-one-way-collision-margin" names="class_collisionobject2d_method_get_shape_owner_one_way_collision_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_shape_owner_one_way_collision_margin</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-collisionobject2d-method-get-shape-owner-one-way-collision-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由给定 <literal>owner_id</literal> 标识的形状所有者的 <literal>one_way_collision_margin</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-get-shape-owners"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-get-shape-owners" names="class_collisionobject2d_method_get_shape_owners"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_shape_owners</strong>() <reference internal="True" refid="class-collisionobject2d-method-get-shape-owners"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个 <literal>owner_id</literal> 标识符的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>。你可以在其他使用 <literal>owner_id</literal> 作为参数的方法中使用这些 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-is-shape-owner-disabled"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-is-shape-owner-disabled" names="class_collisionobject2d_method_is_shape_owner_disabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_shape_owner_disabled</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-collisionobject2d-method-is-shape-owner-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则禁用形状所有者及其形状。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-is-shape-owner-one-way-collision-enabled"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-is-shape-owner-one-way-collision-enabled" names="class_collisionobject2d_method_is_shape_owner_one_way_collision_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_shape_owner_one_way_collision_enabled</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-collisionobject2d-method-is-shape-owner-one-way-collision-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>true</literal>，如果源于这个 <strong>CollisionObject2D</strong> 的形状所有者的碰撞不会被报告给 <strong>CollisionObject2D</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-remove-shape-owner"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-remove-shape-owner" names="class_collisionobject2d_method_remove_shape_owner"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_shape_owner</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-collisionobject2d-method-remove-shape-owner"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除给定形状的所有者。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-set-collision-layer-value"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-set-collision-layer-value" names="class_collisionobject2d_method_set_collision_layer_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collision_layer_value</strong>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-collisionobject2d-method-set-collision-layer-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据 <literal>value</literal>，启用或禁用 <reference internal="True" refid="class-collisionobject2d-property-collision-layer"><inline classes="std std-ref">collision_layer</inline></reference> 中指定的层，给定的 <literal>layer_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-set-collision-mask-value"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-set-collision-mask-value" names="class_collisionobject2d_method_set_collision_mask_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collision_mask_value</strong>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-collisionobject2d-method-set-collision-mask-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据 <literal>value</literal>，启用或禁用 <reference internal="True" refid="class-collisionobject2d-property-collision-mask"><inline classes="std std-ref">collision_mask</inline></reference> 中指定的层，给定的 <literal>layer_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-find-owner"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-find-owner" names="class_collisionobject2d_method_shape_find_owner"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shape_find_owner</strong>(shape_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-collisionobject2d-method-shape-find-owner"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定形状的 <literal>owner_id</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-owner-add-shape"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-owner-add-shape" names="class_collisionobject2d_method_shape_owner_add_shape"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shape_owner_add_shape</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, shape: <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference>) <reference internal="True" refid="class-collisionobject2d-method-shape-owner-add-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>给形状所有者添加一个 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-owner-clear-shapes"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-owner-clear-shapes" names="class_collisionobject2d_method_shape_owner_clear_shapes"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shape_owner_clear_shapes</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-collisionobject2d-method-shape-owner-clear-shapes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除形状所有者的所有形状。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-owner-get-owner"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-owner-get-owner" names="class_collisionobject2d_method_shape_owner_get_owner"><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <strong>shape_owner_get_owner</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-collisionobject2d-method-shape-owner-get-owner"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定形状所有者的父对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-owner-get-shape"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-owner-get-shape" names="class_collisionobject2d_method_shape_owner_get_shape"><reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> <strong>shape_owner_get_shape</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, shape_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-collisionobject2d-method-shape-owner-get-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从给定形状所有者返回具有给定 ID 的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-owner-get-shape-count"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-owner-get-shape-count" names="class_collisionobject2d_method_shape_owner_get_shape_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shape_owner_get_shape_count</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-collisionobject2d-method-shape-owner-get-shape-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定形状所有者包含的形状数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-owner-get-shape-index"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-owner-get-shape-index" names="class_collisionobject2d_method_shape_owner_get_shape_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shape_owner_get_shape_index</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, shape_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-collisionobject2d-method-shape-owner-get-shape-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从给定形状所有者返回具有给定 ID 的 <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> 的子索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-owner-get-transform"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-owner-get-transform" names="class_collisionobject2d_method_shape_owner_get_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>shape_owner_get_transform</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-collisionobject2d-method-shape-owner-get-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回形状所有者的 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-owner-remove-shape"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-owner-remove-shape" names="class_collisionobject2d_method_shape_owner_remove_shape"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shape_owner_remove_shape</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, shape_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-collisionobject2d-method-shape-owner-remove-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从给定的形状所有者中移除一个形状。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-owner-set-disabled"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-owner-set-disabled" names="class_collisionobject2d_method_shape_owner_set_disabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shape_owner_set_disabled</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-collisionobject2d-method-shape-owner-set-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则禁用给定的形状所有者。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-owner-set-one-way-collision"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-owner-set-one-way-collision" names="class_collisionobject2d_method_shape_owner_set_one_way_collision"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shape_owner_set_one_way_collision</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-collisionobject2d-method-shape-owner-set-one-way-collision"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>enable</literal> 为 <literal>true</literal>，则源自该 <strong>CollisionObject2D</strong> 的形状所有者的碰撞将不会被报告为与 <strong>CollisionObject2D</strong> 发生碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-owner-set-one-way-collision-margin"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-owner-set-one-way-collision-margin" names="class_collisionobject2d_method_shape_owner_set_one_way_collision_margin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shape_owner_set_one_way_collision_margin</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-collisionobject2d-method-shape-owner-set-one-way-collision-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将由给定 <literal>owner_id</literal> 标识的形状所有者的 <literal>one_way_collision_margin</literal> 设置为 <literal>margin</literal> 像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-collisionobject2d-method-shape-owner-set-transform"></target>
            <paragraph classes="classref-method" ids="class-collisionobject2d-method-shape-owner-set-transform" names="class_collisionobject2d_method_shape_owner_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shape_owner_set_transform</strong>(owner_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-collisionobject2d-method-shape-owner-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定形状所有者的 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
