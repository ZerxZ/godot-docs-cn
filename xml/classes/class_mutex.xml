<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_mutex.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Mutex.xml.</comment>
    <target refid="class-mutex"></target>
    <section ids="mutex class-mutex" names="mutex class_mutex">
        <title>Mutex</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>二元 <reference internal="True" refuri="class_semaphore#class-semaphore"><inline classes="std std-ref">Semaphore</inline></reference>，用于在多 <reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference> 间进行同步。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>同步互斥器（mutex 来源于 mutual exclusion，即互斥）。可用于在多 <reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference> 间进行同步，等价于二元 <reference internal="True" refuri="class_semaphore#class-semaphore"><inline classes="std std-ref">Semaphore</inline></reference>。能够确保同时只有一个线程能够访问临界区。</paragraph>
            <paragraph>这是一种可重入的互斥器，也就是说同一个线程能够将其多次上锁，只要也进行相同次数的解锁即可。</paragraph>
            <paragraph><strong>警告：</strong>互斥器必须谨慎使用才能避免死锁。</paragraph>
            <paragraph><strong>警告：</strong>为了能够正确清理，避免崩溃和死锁，必须满足以下条件：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>Mutex</strong> 的引用计数到达零，将被销毁时，必须没有线程将其锁定（包括发生析构的线程）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference> 的引用计数达到零，将被销毁时，必须没有锁定任何互斥器。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/performance/using_multiple_threads"><inline classes="doc">使用多线程</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/performance/thread_safe_apis"><inline classes="doc">线程安全的 API</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="52"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-mutex-method-lock"><inline classes="std std-ref">lock</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-mutex-method-try-lock"><inline classes="std std-ref">try_lock</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-mutex-method-unlock"><inline classes="std std-ref">unlock</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-mutex-method-lock"></target>
            <paragraph classes="classref-method" ids="class-mutex-method-lock" names="class_mutex_method_lock"><abbreviation explanation="无返回值。">void</abbreviation> <strong>lock</strong>() <reference internal="True" refid="class-mutex-method-lock"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>锁定此 <strong>Mutex</strong>，直到被当前所有者解锁为止。</paragraph>
            <paragraph><strong>注意：</strong>如果线程已经拥有互斥锁的所有权，该函数将无阻塞地返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-mutex-method-try-lock"></target>
            <paragraph classes="classref-method" ids="class-mutex-method-try-lock" names="class_mutex_method_try_lock"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>try_lock</strong>() <reference internal="True" refid="class-mutex-method-try-lock"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>尝试锁定该 <strong>Mutex</strong>，但不会阻塞。成功时返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <paragraph><strong>注意：</strong>如果该线程已经拥有了该互斥器的所有权，则函数返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-mutex-method-unlock"></target>
            <paragraph classes="classref-method" ids="class-mutex-method-unlock" names="class_mutex_method_unlock"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unlock</strong>() <reference internal="True" refid="class-mutex-method-unlock"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>解锁该 <strong>Mutex</strong>，将其留给其他线程。</paragraph>
            <paragraph><strong>注意：</strong>如果一个线程在已经拥有互斥器的情况下多次调用 <reference internal="True" refid="class-mutex-method-lock"><inline classes="std std-ref">lock</inline></reference> 或 <reference internal="True" refid="class-mutex-method-try-lock"><inline classes="std std-ref">try_lock</inline></reference>，则也必须调用相同次数的 <reference internal="True" refid="class-mutex-method-unlock"><inline classes="std std-ref">unlock</inline></reference> 才能正确解锁。</paragraph>
            <paragraph><strong>警告：</strong>在给定的线程中调用 <reference internal="True" refid="class-mutex-method-unlock"><inline classes="std std-ref">unlock</inline></reference> 的次数超过调用 <reference internal="True" refid="class-mutex-method-lock"><inline classes="std std-ref">lock</inline></reference> 的次数，导致尝试解锁未加锁的互斥器，是错误的行为，可能引起崩溃和死锁。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
