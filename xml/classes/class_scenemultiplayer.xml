<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_scenemultiplayer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/modules/multiplayer/doc_classes/SceneMultiplayer.xml.</comment>
    <target refid="class-scenemultiplayer"></target>
    <section ids="scenemultiplayer class-scenemultiplayer" names="scenemultiplayer class_scenemultiplayer">
        <title>SceneMultiplayer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>高阶多人游戏 API 实现。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个类是 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 的默认实现，用于在 Godot 引擎中提供多人游戏功能。</paragraph>
            <paragraph>该实现通过 <reference internal="True" refuri="class_node#class-node-method-rpc"><inline classes="std std-ref">Node.rpc</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-method-rpc-id"><inline classes="std std-ref">Node.rpc_id</inline></reference> 来支持 RPC，需要向 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-rpc"><inline classes="std std-ref">MultiplayerAPI.rpc</inline></reference> 传递一个 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>（传入其他对象类型会导致失败）。</paragraph>
            <paragraph>该实现还提供了 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 复制功能，使用的是 <reference internal="True" refuri="class_multiplayerspawner#class-multiplayerspawner"><inline classes="std std-ref">MultiplayerSpawner</inline></reference> 和 <reference internal="True" refuri="class_multiplayersynchronizer#class-multiplayersynchronizer"><inline classes="std std-ref">MultiplayerSynchronizer</inline></reference> 节点，以及 <reference internal="True" refuri="class_scenereplicationconfig#class-scenereplicationconfig"><inline classes="std std-ref">SceneReplicationConfig</inline></reference> 资源，。</paragraph>
            <paragraph><strong>注意：</strong>高阶多人游戏 API 协议属于实现细节，并不打算提供给非 Godot 服务器使用。对协议的更改可能不会进行提前通知。</paragraph>
            <paragraph><strong>注意：</strong>导出到 Android 时，在导出项目或使用一键部署之前，请务必在安卓导出预设中开启 <literal>INTERNET</literal> 权限。否则，任何类型的网络通信都将被 Android 阻止。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="87"></colspec>
                    <colspec colwidth="18"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-property-allow-object-decoding"><inline classes="std std-ref">allow_object_decoding</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-property-auth-callback"><inline classes="std std-ref">auth_callback</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Callable()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-property-auth-timeout"><inline classes="std std-ref">auth_timeout</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-property-max-delta-packet-size"><inline classes="std std-ref">max_delta_packet_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>65535</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-property-max-sync-packet-size"><inline classes="std std-ref">max_sync_packet_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1350</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-property-refuse-new-connections"><inline classes="std std-ref">refuse_new_connections</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-property-root-path"><inline classes="std std-ref">root_path</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("")</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-property-server-relay"><inline classes="std std-ref">server_relay</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="249"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-method-clear"><inline classes="std std-ref">clear</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-method-complete-auth"><inline classes="std std-ref">complete_auth</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-method-disconnect-peer"><inline classes="std std-ref">disconnect_peer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-method-get-authenticating-peers"><inline classes="std std-ref">get_authenticating_peers</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-method-send-auth"><inline classes="std std-ref">send_auth</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenemultiplayer-method-send-bytes"><inline classes="std std-ref">send_bytes</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> bytes, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id=0, <reference internal="True" refuri="class_multiplayerpeer#enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> mode=2, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> channel=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-scenemultiplayer-signal-peer-authenticating"></target>
            <paragraph classes="classref-signal" ids="class-scenemultiplayer-signal-peer-authenticating" names="class_scenemultiplayer_signal_peer_authenticating"><strong>peer_authenticating</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>当此 MultiplayerAPI 的 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">MultiplayerAPI.multiplayer_peer</inline></reference> 连接到一个新对等体并设置有效的 <reference internal="True" refid="class-scenemultiplayer-property-auth-callback"><inline classes="std std-ref">auth_callback</inline></reference> 时，将发出此信号。在这种情况下，只有在调用 <reference internal="True" refid="class-scenemultiplayer-method-complete-auth"><inline classes="std std-ref">complete_auth</inline></reference> 并传递给定的对等体 <literal>id</literal> 时，才会发出 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-signal-peer-connected"><inline classes="std std-ref">MultiplayerAPI.peer_connected</inline></reference>。在此状态下，该对等体不会包含在 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-get-peers"><inline classes="std std-ref">MultiplayerAPI.get_peers</inline></reference> 返回的列表中（但会包含在 <reference internal="True" refid="class-scenemultiplayer-method-get-authenticating-peers"><inline classes="std std-ref">get_authenticating_peers</inline></reference> 返回的列表中），且只会发送和接收身份验证数据。有关发送身份验证数据的信息，请参阅 <reference internal="True" refid="class-scenemultiplayer-method-send-auth"><inline classes="std std-ref">send_auth</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-signal-peer-authentication-failed"></target>
            <paragraph classes="classref-signal" ids="class-scenemultiplayer-signal-peer-authentication-failed" names="class_scenemultiplayer_signal_peer_authentication_failed"><strong>peer_authentication_failed</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>当这个 MultiplayerAPI 的 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">MultiplayerAPI.multiplayer_peer</inline></reference> 与另一个尚未完成授权的对等体断开连接时触发。见 <reference internal="True" refid="class-scenemultiplayer-signal-peer-authenticating"><inline classes="std std-ref">peer_authenticating</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-signal-peer-packet"></target>
            <paragraph classes="classref-signal" ids="class-scenemultiplayer-signal-peer-packet" names="class_scenemultiplayer_signal_peer_packet"><strong>peer_packet</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> packet <strong>)</strong></paragraph>
            <paragraph>当这个 MultiplayerAPI 的 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">MultiplayerAPI.multiplayer_peer</inline></reference> 收到带有自定义数据（见 <reference internal="True" refid="class-scenemultiplayer-method-send-bytes"><inline classes="std std-ref">send_bytes</inline></reference>）的 <literal>packet</literal> 时发出。ID 是发送数据包的对等体的对等体 ID。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-scenemultiplayer-property-allow-object-decoding"></target>
            <paragraph classes="classref-property" ids="class-scenemultiplayer-property-allow-object-decoding" names="class_scenemultiplayer_property_allow_object_decoding"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>allow_object_decoding</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_allow_object_decoding</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_object_decoding_allowed</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 MultiplayerAPI 将允许在远程过程调用期间对对象进行编码和解码。</paragraph>
            <paragraph><strong>警告：</strong>反序列化的对象可能包含要执行的代码。如果序列化的对象来自不受信任的来源，请勿使用此选项，以避免潜在的安全威胁，例如远程代码执行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-property-auth-callback"></target>
            <paragraph classes="classref-property" ids="class-scenemultiplayer-property-auth-callback" names="class_scenemultiplayer_property_auth_callback"><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> <strong>auth_callback</strong> = <literal>Callable()</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_auth_callback</strong> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> <strong>get_auth_callback</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当通过 <reference internal="True" refid="class-scenemultiplayer-method-send-auth"><inline classes="std std-ref">send_auth</inline></reference> 接收身份验证数据时要执行的回调函数。如果 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 为空（默认），对等方将在连接后立即自动接受。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-property-auth-timeout"></target>
            <paragraph classes="classref-property" ids="class-scenemultiplayer-property-auth-timeout" names="class_scenemultiplayer_property_auth_timeout"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>auth_timeout</strong> = <literal>3.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_auth_timeout</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_auth_timeout</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果将其设置为大于 <literal>0.0</literal> 的值，则对等方可以停留在正在验证状态的最长时间，之后身份验证将自动失败。请参阅 <reference internal="True" refid="class-scenemultiplayer-signal-peer-authenticating"><inline classes="std std-ref">peer_authenticating</inline></reference> 和 <reference internal="True" refid="class-scenemultiplayer-signal-peer-authentication-failed"><inline classes="std std-ref">peer_authentication_failed</inline></reference> 信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-property-max-delta-packet-size"></target>
            <paragraph classes="classref-property" ids="class-scenemultiplayer-property-max-delta-packet-size" names="class_scenemultiplayer_property_max_delta_packet_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_delta_packet_size</strong> = <literal>65535</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_max_delta_packet_size</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_delta_packet_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>增量数据包的最大大小。值越大，单帧能够收到完整更新的几率就越大，但造成网络拥堵的几率也越大（网络延迟、断线等）。见 <reference internal="True" refuri="class_multiplayersynchronizer#class-multiplayersynchronizer"><inline classes="std std-ref">MultiplayerSynchronizer</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-property-max-sync-packet-size"></target>
            <paragraph classes="classref-property" ids="class-scenemultiplayer-property-max-sync-packet-size" names="class_scenemultiplayer_property_max_sync_packet_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_sync_packet_size</strong> = <literal>1350</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_max_sync_packet_size</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_sync_packet_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>同步数据包的最大大小。值越大，单帧能够收到完整更新的几率就越大，但丢包的几率也越大。见 <reference internal="True" refuri="class_multiplayersynchronizer#class-multiplayersynchronizer"><inline classes="std std-ref">MultiplayerSynchronizer</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-property-refuse-new-connections"></target>
            <paragraph classes="classref-property" ids="class-scenemultiplayer-property-refuse-new-connections" names="class_scenemultiplayer_property_refuse_new_connections"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>refuse_new_connections</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_refuse_new_connections</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_refusing_new_connections</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 MultiplayerAPI 的 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">MultiplayerAPI.multiplayer_peer</inline></reference> 将拒绝新的传入连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-property-root-path"></target>
            <paragraph classes="classref-property" ids="class-scenemultiplayer-property-root-path" names="class_scenemultiplayer_property_root_path"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>root_path</strong> = <literal>NodePath("")</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_root_path</strong> <strong>(</strong> <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_root_path</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于 RPC 和复制的根路径。将使用相对路径，而不是绝对路径，来查找 RPC 应该在其上被执行的节点。</paragraph>
            <paragraph>这有效地允许场景树的不同分支，由不同的 MultiplayerAPI 管理，例如允许在同一场景中，同时运行客户端和服务器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-property-server-relay"></target>
            <paragraph classes="classref-property" ids="class-scenemultiplayer-property-server-relay" names="class_scenemultiplayer_property_server_relay"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>server_relay</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_server_relay_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_server_relay_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>启用或禁用服务器功能，该功能通知客户端其他对等体的连接/断开，并在它们之间转发消息。当此选项为 <literal>false</literal> 时，客户端将不会自动收到其他对等体的通知，也无法通过服务器向它们发送数据包。</paragraph>
            <paragraph><strong>注意：</strong>在其他对等体连接时更改此选项可能会导致意外行为。</paragraph>
            <paragraph><strong>注意：</strong>对该功能的支持可能取决于当前的 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 配置。请参阅 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-is-server-relay-supported"><inline classes="std std-ref">MultiplayerPeer.is_server_relay_supported</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-scenemultiplayer-method-clear"></target>
            <paragraph classes="classref-method" ids="class-scenemultiplayer-method-clear" names="class_scenemultiplayer_method_clear">void <strong>clear</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>清除当前 SceneMultiplayer 的网络状态（除非你知道你在做什么，否则不应该调用这个函数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-method-complete-auth"></target>
            <paragraph classes="classref-method" ids="class-scenemultiplayer-method-complete-auth" names="class_scenemultiplayer_method_complete_auth"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>complete_auth</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>完成对由 <literal>id</literal> 标识的远程对等体的身份验证步骤。远程端也完成身份验证之后，将会为这个对等体发出 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-signal-peer-connected"><inline classes="std std-ref">MultiplayerAPI.peer_connected</inline></reference> 信号。不会再从此对等体接收到身份验证消息。</paragraph>
            <paragraph>如果对等体在完成身份验证之前断开连接，无论是由于网络问题、<reference internal="True" refid="class-scenemultiplayer-property-auth-timeout"><inline classes="std std-ref">auth_timeout</inline></reference> 过期还是手动调用 <reference internal="True" refid="class-scenemultiplayer-method-disconnect-peer"><inline classes="std std-ref">disconnect_peer</inline></reference>，都会发出 <reference internal="True" refid="class-scenemultiplayer-signal-peer-authentication-failed"><inline classes="std std-ref">peer_authentication_failed</inline></reference> 信号，而不是 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-signal-peer-disconnected"><inline classes="std std-ref">MultiplayerAPI.peer_disconnected</inline></reference> 信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-method-disconnect-peer"></target>
            <paragraph classes="classref-method" ids="class-scenemultiplayer-method-disconnect-peer" names="class_scenemultiplayer_method_disconnect_peer">void <strong>disconnect_peer</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>断开由 <literal>id</literal> 标识的对等体的连接，将其从连接的对等体列表中移除，并关闭与它的底层连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-method-get-authenticating-peers"></target>
            <paragraph classes="classref-method" ids="class-scenemultiplayer-method-get-authenticating-peers" names="class_scenemultiplayer_method_get_authenticating_peers"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_authenticating_peers</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回当前尝试使用此 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 进行身份验证的对等方的 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-method-send-auth"></target>
            <paragraph classes="classref-method" ids="class-scenemultiplayer-method-send-auth" names="class_scenemultiplayer_method_send_auth"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>send_auth</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data <strong>)</strong></paragraph>
            <paragraph>将指定的 <literal>data</literal> 作为身份验证消息的一部分发送到由 <literal>id</literal> 标识的远程对等方。这可用于验证对等方，并控制何时发出 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-signal-peer-connected"><inline classes="std std-ref">MultiplayerAPI.peer_connected</inline></reference>（并接受远程对等方作为连接的对等方之一）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenemultiplayer-method-send-bytes"></target>
            <paragraph classes="classref-method" ids="class-scenemultiplayer-method-send-bytes" names="class_scenemultiplayer_method_send_bytes"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>send_bytes</strong> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> bytes, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id=0, <reference internal="True" refuri="class_multiplayerpeer#enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> mode=2, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> channel=0 <strong>)</strong></paragraph>
            <paragraph>向由 <literal>id</literal> 标识的特定对等体发送给定的原始字节 <literal>bytes</literal>（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-set-target-peer"><inline classes="std std-ref">MultiplayerPeer.set_target_peer</inline></reference>）。默认 ID 为 <literal>0</literal>，即广播到所有对等体。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
