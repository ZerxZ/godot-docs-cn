<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_scripteditor.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/ScriptEditor.xml.</comment>
    <target refid="class-scripteditor"></target>
    <section ids="scripteditor class-scripteditor" names="scripteditor class_scripteditor">
        <title>ScriptEditor</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_panelcontainer#class-panelcontainer"><inline classes="std std-ref">PanelContainer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>Godot 编辑器的脚本编辑器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>Godot 编辑器的脚本编辑器。</paragraph>
            <paragraph><strong>注意：</strong>这个类不应该被直接实例化。请使用 <reference internal="True" refuri="class_editorinterface#class-editorinterface-method-get-script-editor"><inline classes="std std-ref">EditorInterface.get_script_editor</inline></reference> 来访问这个单例。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="78"></colspec>
                    <colspec colwidth="185"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_scripteditorbase#class-scripteditorbase"><inline classes="std std-ref">ScriptEditorBase</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scripteditor-method-get-current-editor"><inline classes="std std-ref">get_current_editor</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scripteditor-method-get-current-script"><inline classes="std std-ref">get_current_script</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_scripteditorbase#class-scripteditorbase"><inline classes="std std-ref">ScriptEditorBase</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scripteditor-method-get-open-script-editors"><inline classes="std std-ref">get_open_script_editors</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scripteditor-method-get-open-scripts"><inline classes="std std-ref">get_open_scripts</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scripteditor-method-goto-help"><inline classes="std std-ref">goto_help</inline></reference>(topic: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scripteditor-method-goto-line"><inline classes="std std-ref">goto_line</inline></reference>(line_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scripteditor-method-open-script-create-dialog"><inline classes="std std-ref">open_script_create_dialog</inline></reference>(base_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, base_path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scripteditor-method-register-syntax-highlighter"><inline classes="std std-ref">register_syntax_highlighter</inline></reference>(syntax_highlighter: <reference internal="True" refuri="class_editorsyntaxhighlighter#class-editorsyntaxhighlighter"><inline classes="std std-ref">EditorSyntaxHighlighter</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scripteditor-method-unregister-syntax-highlighter"><inline classes="std std-ref">unregister_syntax_highlighter</inline></reference>(syntax_highlighter: <reference internal="True" refuri="class_editorsyntaxhighlighter#class-editorsyntaxhighlighter"><inline classes="std std-ref">EditorSyntaxHighlighter</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="信号">
            <title>信号</title>
            <target refid="class-scripteditor-signal-editor-script-changed"></target>
            <paragraph classes="classref-signal" ids="class-scripteditor-signal-editor-script-changed" names="class_scripteditor_signal_editor_script_changed"><strong>editor_script_changed</strong>(script: <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>) <reference internal="True" refid="class-scripteditor-signal-editor-script-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户更改活动脚本时发出。参数是新激活的 <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditor-signal-script-close"></target>
            <paragraph classes="classref-signal" ids="class-scripteditor-signal-script-close" names="class_scripteditor_signal_script_close"><strong>script_close</strong>(script: <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>) <reference internal="True" refid="class-scripteditor-signal-script-close"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当编辑器即将关闭活动脚本时发出。参数是将要关闭的 <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-scripteditor-method-get-current-editor"></target>
            <paragraph classes="classref-method" ids="class-scripteditor-method-get-current-editor" names="class_scripteditor_method_get_current_editor"><reference internal="True" refuri="class_scripteditorbase#class-scripteditorbase"><inline classes="std std-ref">ScriptEditorBase</inline></reference> <strong>get_current_editor</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scripteditor-method-get-current-editor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回用户当前正在编辑的 <reference internal="True" refuri="class_scripteditorbase#class-scripteditorbase"><inline classes="std std-ref">ScriptEditorBase</inline></reference> 对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditor-method-get-current-script"></target>
            <paragraph classes="classref-method" ids="class-scripteditor-method-get-current-script" names="class_scripteditor_method_get_current_script"><reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference> <strong>get_current_script</strong>() <reference internal="True" refid="class-scripteditor-method-get-current-script"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前在编辑器中处于活动状态的 <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditor-method-get-open-script-editors"></target>
            <paragraph classes="classref-method" ids="class-scripteditor-method-get-open-script-editors" names="class_scripteditor_method_get_open_script_editors"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_scripteditorbase#class-scripteditorbase"><inline classes="std std-ref">ScriptEditorBase</inline></reference>] <strong>get_open_script_editors</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scripteditor-method-get-open-script-editors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个数组，其中包含当前在编辑器中打开的所有 <reference internal="True" refuri="class_scripteditorbase#class-scripteditorbase"><inline classes="std std-ref">ScriptEditorBase</inline></reference> 对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditor-method-get-open-scripts"></target>
            <paragraph classes="classref-method" ids="class-scripteditor-method-get-open-scripts" names="class_scripteditor_method_get_open_scripts"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>] <strong>get_open_scripts</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scripteditor-method-get-open-scripts"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个包含当前在编辑器中打开的所有 <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference> 对象的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditor-method-goto-help"></target>
            <paragraph classes="classref-method" ids="class-scripteditor-method-goto-help" names="class_scripteditor_method_goto_help"><abbreviation explanation="无返回值。">void</abbreviation> <strong>goto_help</strong>(topic: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-scripteditor-method-goto-help"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>打开指定主题的帮助。<literal>topic</literal> 是一个编码字符串，用于控制哪个类、方法、常量、信号、注解、属性或主题项应该被关注。</paragraph>
            <paragraph>支持的 <literal>topic</literal> 格式包括 <literal>class_name:class</literal>、<literal>class_method:class:method</literal>、<literal>class_constant:class:constant</literal>、<literal>class_signal:class:signal</literal>、<literal>class_annotation:class:@annotation</literal>、<literal>class_property:class:property</literal> 和 <literal>class_theme_item:class:item</literal>，其中 <literal>class</literal> 为类名，<literal>method</literal> 为方法名，<literal>constant</literal> 为常量名，<literal>signal</literal> 为信号名，<literal>annotation</literal> 为注解名，<literal>property</literal> 为属性名，<literal>item</literal> 为主题项。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 显示 Node 类的帮助。
class_name:Node
# 显示全局 min 函数的帮助。
# 全局对象可在 `@GlobalScope` 命名空间中访问，如下所示。
class_method:@GlobalScope:min
# 显示 Node 类中 get_viewport 的帮助。
class_method:Node:get_viewport
# 显示输入常量 MOUSE_BUTTON_MIDDLE 的帮助。
class_constant:Input:MOUSE_BUTTON_MIDDLE
# 显示 BaseButton 信号 pressed 的帮助。
class_signal:BaseButton:pressed
# 显示 CanvasItem 属性 visible 的帮助。
class_property:CanvasItem:visible
# 显示 GDScript 注解 export 的帮助。
# 注解应在描述符中以 `@` 符号为前缀，如下所示。
class_annotation:@GDScript:@export
# 显示名为 panel_selected 的 GraphNode 主题项的帮助。
class_theme_item:GraphNode:panel_selected</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditor-method-goto-line"></target>
            <paragraph classes="classref-method" ids="class-scripteditor-method-goto-line" names="class_scripteditor_method_goto_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>goto_line</strong>(line_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-scripteditor-method-goto-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>转到当前脚本中的指定行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditor-method-open-script-create-dialog"></target>
            <paragraph classes="classref-method" ids="class-scripteditor-method-open-script-create-dialog" names="class_scripteditor_method_open_script_create_dialog"><abbreviation explanation="无返回值。">void</abbreviation> <strong>open_script_create_dialog</strong>(base_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, base_path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-scripteditor-method-open-script-create-dialog"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>打开创建脚本对话框。脚本将扩展 <literal>base_name</literal>。文件扩展名可以从 <literal>base_path</literal> 中省略，会根据所选择的脚本语言添加。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditor-method-register-syntax-highlighter"></target>
            <paragraph classes="classref-method" ids="class-scripteditor-method-register-syntax-highlighter" names="class_scripteditor_method_register_syntax_highlighter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>register_syntax_highlighter</strong>(syntax_highlighter: <reference internal="True" refuri="class_editorsyntaxhighlighter#class-editorsyntaxhighlighter"><inline classes="std std-ref">EditorSyntaxHighlighter</inline></reference>) <reference internal="True" refid="class-scripteditor-method-register-syntax-highlighter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向编辑器注册该 <reference internal="True" refuri="class_editorsyntaxhighlighter#class-editorsyntaxhighlighter"><inline classes="std std-ref">EditorSyntaxHighlighter</inline></reference>，打开的所有脚本都可以使用这个 <reference internal="True" refuri="class_editorsyntaxhighlighter#class-editorsyntaxhighlighter"><inline classes="std std-ref">EditorSyntaxHighlighter</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>不适用于已经打开的脚本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditor-method-unregister-syntax-highlighter"></target>
            <paragraph classes="classref-method" ids="class-scripteditor-method-unregister-syntax-highlighter" names="class_scripteditor_method_unregister_syntax_highlighter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unregister_syntax_highlighter</strong>(syntax_highlighter: <reference internal="True" refuri="class_editorsyntaxhighlighter#class-editorsyntaxhighlighter"><inline classes="std std-ref">EditorSyntaxHighlighter</inline></reference>) <reference internal="True" refid="class-scripteditor-method-unregister-syntax-highlighter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从编辑器注销该 <reference internal="True" refuri="class_editorsyntaxhighlighter#class-editorsyntaxhighlighter"><inline classes="std std-ref">EditorSyntaxHighlighter</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>已经打开的脚本仍然适用该 <reference internal="True" refuri="class_editorsyntaxhighlighter#class-editorsyntaxhighlighter"><inline classes="std std-ref">EditorSyntaxHighlighter</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
