<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_camera3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Camera3D.xml.</comment>
    <target refid="class-camera3d"></target>
    <section ids="camera3d class-camera3d" names="camera3d class_camera3d">
        <title>Camera3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_xrcamera3d#class-xrcamera3d"><inline classes="std std-ref">XRCamera3D</inline></reference></paragraph>
        <paragraph>相机节点，会从某个角度进行显示。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Camera3D</strong> 是一个特殊节点，用于显示从其当前位置可见的内容。相机在最近的 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 节点中注册自己（当树上行）。每个视口中只能有一个激活的相机。如果在树上没有可用的视口，相机将在全局视口中注册。换句话说，相机只是用来为 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 提供 3D 显示能力的，如果没有，则在该 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference>（或更高层视口）中注册的场景无法显示。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="第三人称射击（TPS）演示" refuri="https://godotengine.org/asset-library/asset/2710">第三人称射击（TPS）演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="55"></colspec>
                    <colspec colwidth="67"></colspec>
                    <colspec colwidth="19"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-attributes"><inline classes="std std-ref">attributes</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_compositor#class-compositor"><inline classes="std std-ref">Compositor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-compositor"><inline classes="std std-ref">compositor</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-cull-mask"><inline classes="std std-ref">cull_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1048575</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-current"><inline classes="std std-ref">current</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-camera3d-dopplertracking"><inline classes="std std-ref">DopplerTracking</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-doppler-tracking"><inline classes="std std-ref">doppler_tracking</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-environment"><inline classes="std std-ref">environment</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-far"><inline classes="std std-ref">far</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4000.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-fov"><inline classes="std std-ref">fov</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>75.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-frustum-offset"><inline classes="std std-ref">frustum_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-h-offset"><inline classes="std std-ref">h_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-camera3d-keepaspect"><inline classes="std std-ref">KeepAspect</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-keep-aspect"><inline classes="std std-ref">keep_aspect</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-near"><inline classes="std std-ref">near</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.05</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-camera3d-projectiontype"><inline classes="std std-ref">ProjectionType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-projection"><inline classes="std std-ref">projection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-size"><inline classes="std std-ref">size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-property-v-offset"><inline classes="std std-ref">v_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="56"></colspec>
                    <colspec colwidth="206"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-clear-current"><inline classes="std std-ref">clear_current</inline></reference>(enable_next: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-get-camera-projection"><inline classes="std std-ref">get_camera_projection</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-get-camera-rid"><inline classes="std std-ref">get_camera_rid</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-get-camera-transform"><inline classes="std std-ref">get_camera_transform</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-get-cull-mask-value"><inline classes="std std-ref">get_cull_mask_value</inline></reference>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-get-frustum"><inline classes="std std-ref">get_frustum</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-get-pyramid-shape-rid"><inline classes="std std-ref">get_pyramid_shape_rid</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-is-position-behind"><inline classes="std std-ref">is_position_behind</inline></reference>(world_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-is-position-in-frustum"><inline classes="std std-ref">is_position_in_frustum</inline></reference>(world_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-make-current"><inline classes="std std-ref">make_current</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-project-local-ray-normal"><inline classes="std std-ref">project_local_ray_normal</inline></reference>(screen_point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-project-position"><inline classes="std std-ref">project_position</inline></reference>(screen_point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, z_depth: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-project-ray-normal"><inline classes="std std-ref">project_ray_normal</inline></reference>(screen_point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-project-ray-origin"><inline classes="std std-ref">project_ray_origin</inline></reference>(screen_point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-set-cull-mask-value"><inline classes="std std-ref">set_cull_mask_value</inline></reference>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-set-frustum"><inline classes="std std-ref">set_frustum</inline></reference>(size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-set-orthogonal"><inline classes="std std-ref">set_orthogonal</inline></reference>(size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-set-perspective"><inline classes="std std-ref">set_perspective</inline></reference>(fov: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera3d-method-unproject-position"><inline classes="std std-ref">unproject_position</inline></reference>(world_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-camera3d-projectiontype"></target>
            <paragraph classes="classref-enumeration" ids="enum-camera3d-projectiontype" names="enum_camera3d_projectiontype">enum <strong>ProjectionType</strong>: <reference internal="True" refid="enum-camera3d-projectiontype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-camera3d-constant-projection-perspective"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-camera3d-constant-projection-perspective" names="class_camera3d_constant_projection_perspective"><reference internal="True" refid="enum-camera3d-projectiontype"><inline classes="std std-ref">ProjectionType</inline></reference> <strong>PROJECTION_PERSPECTIVE</strong> = <literal>0</literal></paragraph>
            <paragraph>透视投影。物体距离相机屏幕越远显示就越小。</paragraph>
            <target refid="class-camera3d-constant-projection-orthogonal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-camera3d-constant-projection-orthogonal" names="class_camera3d_constant_projection_orthogonal"><reference internal="True" refid="enum-camera3d-projectiontype"><inline classes="std std-ref">ProjectionType</inline></reference> <strong>PROJECTION_ORTHOGONAL</strong> = <literal>1</literal></paragraph>
            <paragraph>正交投影，又称正交投影。物体无论距离多远，在屏幕上都保持相同的大小。</paragraph>
            <target refid="class-camera3d-constant-projection-frustum"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-camera3d-constant-projection-frustum" names="class_camera3d_constant_projection_frustum"><reference internal="True" refid="enum-camera3d-projectiontype"><inline classes="std std-ref">ProjectionType</inline></reference> <strong>PROJECTION_FRUSTUM</strong> = <literal>2</literal></paragraph>
            <paragraph>视锥投影。通过该模式可以调整 <reference internal="True" refid="class-camera3d-property-frustum-offset"><inline classes="std std-ref">frustum_offset</inline></reference> 来创建“倾斜的视锥”效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-camera3d-keepaspect"></target>
            <paragraph classes="classref-enumeration" ids="enum-camera3d-keepaspect" names="enum_camera3d_keepaspect">enum <strong>KeepAspect</strong>: <reference internal="True" refid="enum-camera3d-keepaspect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-camera3d-constant-keep-width"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-camera3d-constant-keep-width" names="class_camera3d_constant_keep_width"><reference internal="True" refid="enum-camera3d-keepaspect"><inline classes="std std-ref">KeepAspect</inline></reference> <strong>KEEP_WIDTH</strong> = <literal>0</literal></paragraph>
            <paragraph>保留水平长宽比，也称为 Vert- 缩放。这通常是在纵向模式下运行的项目的最佳选择，因为较高的纵横比将从更宽的垂直视场中受益。</paragraph>
            <target refid="class-camera3d-constant-keep-height"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-camera3d-constant-keep-height" names="class_camera3d_constant_keep_height"><reference internal="True" refid="enum-camera3d-keepaspect"><inline classes="std std-ref">KeepAspect</inline></reference> <strong>KEEP_HEIGHT</strong> = <literal>1</literal></paragraph>
            <paragraph>保留垂直长宽比，也称为 Hor+ 缩放。这通常是在横向模式下运行的项目的最佳选择，因为较宽的纵横比会自动从较宽的水平视场中受益。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-camera3d-dopplertracking"></target>
            <paragraph classes="classref-enumeration" ids="enum-camera3d-dopplertracking" names="enum_camera3d_dopplertracking">enum <strong>DopplerTracking</strong>: <reference internal="True" refid="enum-camera3d-dopplertracking"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-camera3d-constant-doppler-tracking-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-camera3d-constant-doppler-tracking-disabled" names="class_camera3d_constant_doppler_tracking_disabled"><reference internal="True" refid="enum-camera3d-dopplertracking"><inline classes="std std-ref">DopplerTracking</inline></reference> <strong>DOPPLER_TRACKING_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用<reference name="多普勒效应" refuri="https://en.wikipedia.org/wiki/Doppler_effect">多普勒效应</reference>模拟（默认）。</paragraph>
            <target refid="class-camera3d-constant-doppler-tracking-idle-step"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-camera3d-constant-doppler-tracking-idle-step" names="class_camera3d_constant_doppler_tracking_idle_step"><reference internal="True" refid="enum-camera3d-dopplertracking"><inline classes="std std-ref">DopplerTracking</inline></reference> <strong>DOPPLER_TRACKING_IDLE_STEP</strong> = <literal>1</literal></paragraph>
            <paragraph>通过跟踪在 <literal>_process</literal> 中改变的物体位置来模拟<reference name="多普勒效应" refuri="https://zh.wikipedia.org/wiki/%E5%A4%9A%E6%99%AE%E5%8B%92%E6%95%88%E5%BA%94">多普勒效应</reference>。与这些物体相比，该相机的相对速度的变化会影响音频的感知方式（改变音频的 <reference internal="True" refuri="class_audiostreamplayer3d#class-audiostreamplayer3d-property-pitch-scale"><inline classes="std std-ref">AudioStreamPlayer3D.pitch_scale</inline></reference>）。</paragraph>
            <target refid="class-camera3d-constant-doppler-tracking-physics-step"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-camera3d-constant-doppler-tracking-physics-step" names="class_camera3d_constant_doppler_tracking_physics_step"><reference internal="True" refid="enum-camera3d-dopplertracking"><inline classes="std std-ref">DopplerTracking</inline></reference> <strong>DOPPLER_TRACKING_PHYSICS_STEP</strong> = <literal>2</literal></paragraph>
            <paragraph>通过跟踪在 <literal>_process</literal> 中改变的物体位置来模拟<reference name="多普勒效应" refuri="https://zh.wikipedia.org/wiki/%E5%A4%9A%E6%99%AE%E5%8B%92%E6%95%88%E5%BA%94">多普勒效应</reference>。与这些物体相比，该相机的相对速度的变化会影响音频的感知方式（改变音频的 <reference internal="True" refuri="class_audiostreamplayer3d#class-audiostreamplayer3d-property-pitch-scale"><inline classes="std std-ref">AudioStreamPlayer3D.pitch_scale</inline></reference>）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-camera3d-property-attributes"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-attributes" names="class_camera3d_property_attributes"><reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference> <strong>attributes</strong> <reference internal="True" refid="class-camera3d-property-attributes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_attributes</strong>(value: <reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference> <strong>get_attributes</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该相机所使用的 <reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-compositor"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-compositor" names="class_camera3d_property_compositor"><reference internal="True" refuri="class_compositor#class-compositor"><inline classes="std std-ref">Compositor</inline></reference> <strong>compositor</strong> <reference internal="True" refid="class-camera3d-property-compositor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_compositor</strong>(value: <reference internal="True" refuri="class_compositor#class-compositor"><inline classes="std std-ref">Compositor</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_compositor#class-compositor"><inline classes="std std-ref">Compositor</inline></reference> <strong>get_compositor</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该相机所使用的 <reference internal="True" refuri="class_compositor#class-compositor"><inline classes="std std-ref">Compositor</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-cull-mask"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-cull-mask" names="class_camera3d_property_cull_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>cull_mask</strong> = <literal>1048575</literal> <reference internal="True" refid="class-camera3d-property-cull-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cull_mask</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_cull_mask</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>剔除掩码，描述该相机渲染了哪些 <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d-property-layers"><inline classes="std std-ref">VisualInstance3D.layers</inline></reference>。默认情况下，20 个用户可见层全都被渲染。</paragraph>
            <paragraph><strong>注意：</strong>由于 <reference internal="True" refid="class-camera3d-property-cull-mask"><inline classes="std std-ref">cull_mask</inline></reference> 允许总共存储 32 个层，因此另外 12 个层仅供引擎内部使用，不会在编辑器中公开。使用脚本设置 <reference internal="True" refid="class-camera3d-property-cull-mask"><inline classes="std std-ref">cull_mask</inline></reference> 允许你切换那些保留层，这对编辑器插件很有用。</paragraph>
            <paragraph>要使用脚本更轻松地调整 <reference internal="True" refid="class-camera3d-property-cull-mask"><inline classes="std std-ref">cull_mask</inline></reference>，请使用 <reference internal="True" refid="class-camera3d-method-get-cull-mask-value"><inline classes="std std-ref">get_cull_mask_value</inline></reference> 和 <reference internal="True" refid="class-camera3d-method-set-cull-mask-value"><inline classes="std std-ref">set_cull_mask_value</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference>、SDFGI 和 <reference internal="True" refuri="class_lightmapgi#class-lightmapgi"><inline classes="std std-ref">LightmapGI</inline></reference> 将始终考虑所有层以确定对全局光照有贡献的内容。如果这是一个问题，请将网格的 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-gi-mode"><inline classes="std std-ref">GeometryInstance3D.gi_mode</inline></reference> 设置为 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-constant-gi-mode-disabled"><inline classes="std std-ref">GeometryInstance3D.GI_MODE_DISABLED</inline></reference>，并将灯光的 <reference internal="True" refuri="class_light3d#class-light3d-property-light-bake-mode"><inline classes="std std-ref">Light3D.light_bake_mode</inline></reference> 设置为 <reference internal="True" refuri="class_light3d#class-light3d-constant-bake-disabled"><inline classes="std std-ref">Light3D.BAKE_DISABLED</inline></reference>，以将它们从全局光照中排除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-current"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-current" names="class_camera3d_property_current"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>current</strong> = <literal>false</literal> <reference internal="True" refid="class-camera3d-property-current"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_current</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_current</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则祖级 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 正在使用这个相机。</paragraph>
            <paragraph>如果场景中有多个相机，总会有一个被设为当前相机。例如，假设场景中存在两个 <strong>Camera3D</strong> 节点并且只有一个为当前相机，那么如果把某一个相机的 <reference internal="True" refid="class-camera3d-property-current"><inline classes="std std-ref">current</inline></reference> 设为 <literal>false</literal> 就会导致另一个相机被设为当前相机。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-doppler-tracking"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-doppler-tracking" names="class_camera3d_property_doppler_tracking"><reference internal="True" refid="enum-camera3d-dopplertracking"><inline classes="std std-ref">DopplerTracking</inline></reference> <strong>doppler_tracking</strong> = <literal>0</literal> <reference internal="True" refid="class-camera3d-property-doppler-tracking"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_doppler_tracking</strong>(value: <reference internal="True" refid="enum-camera3d-dopplertracking"><inline classes="std std-ref">DopplerTracking</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-camera3d-dopplertracking"><inline classes="std std-ref">DopplerTracking</inline></reference> <strong>get_doppler_tracking</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果不是 <reference internal="True" refid="class-camera3d-constant-doppler-tracking-disabled"><inline classes="std std-ref">DOPPLER_TRACKING_DISABLED</inline></reference>，此相机将为在 <literal>_process</literal> 中变化的对象模拟<reference name="多普勒效应" refuri="https://zh.wikipedia.org/wiki/%E5%A4%9A%E6%99%AE%E5%8B%92%E6%95%88%E5%BA%94">多普勒效应</reference>。可能的值见 <reference internal="True" refid="enum-camera3d-dopplertracking"><inline classes="std std-ref">DopplerTracking</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-environment"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-environment" names="class_camera3d_property_environment"><reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> <strong>environment</strong> <reference internal="True" refid="class-camera3d-property-environment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_environment</strong>(value: <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> <strong>get_environment</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>此相机要使用的 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-far"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-far" names="class_camera3d_property_far"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>far</strong> = <literal>4000.0</literal> <reference internal="True" refid="class-camera3d-property-far"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_far</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_far</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该相机相对于其局部 Z 轴到远剔除边界的距离。较高的值允许相机看得更远，而减少 <reference internal="True" refid="class-camera3d-property-far"><inline classes="std std-ref">far</inline></reference> 如果会导致对象被部分或完全剔除，则可以提高性能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-fov"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-fov" names="class_camera3d_property_fov"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>fov</strong> = <literal>75.0</literal> <reference internal="True" refid="class-camera3d-property-fov"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fov</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_fov</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>相机的视野角度（单位为度）。仅适用于透视模式。由于 <reference internal="True" refid="class-camera3d-property-keep-aspect"><inline classes="std std-ref">keep_aspect</inline></reference> 锁定一个轴，因此 <reference internal="True" refid="class-camera3d-property-fov"><inline classes="std std-ref">fov</inline></reference> 设置另一个轴的视角。</paragraph>
            <paragraph>作为参考，默认的垂直视野值（<literal>70.0</literal>）相当于以下水平 FOV：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>在 4:3 视口中约 91.31 度</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 16:10 视口中约 101.67 度</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 16:9 视口中约 107.51 度</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 21:9 视口中约 121.63 度</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-frustum-offset"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-frustum-offset" names="class_camera3d_property_frustum_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>frustum_offset</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-camera3d-property-frustum-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_frustum_offset</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_frustum_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>相机的视锥偏移。可以更改默认值，以创建如 <reference name="Y-shearing" refuri="https://zdoom.org/wiki/Y-shearing">Y-shearing</reference> 一样的“倾斜的视锥”效果。</paragraph>
            <paragraph><strong>注意：</strong>仅在 <reference internal="True" refid="class-camera3d-property-projection"><inline classes="std std-ref">projection</inline></reference> 为 <reference internal="True" refid="class-camera3d-constant-projection-frustum"><inline classes="std std-ref">PROJECTION_FRUSTUM</inline></reference> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-h-offset"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-h-offset" names="class_camera3d_property_h_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>h_offset</strong> = <literal>0.0</literal> <reference internal="True" refid="class-camera3d-property-h-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_h_offset</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_h_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>相机视口的水平（X）偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-keep-aspect"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-keep-aspect" names="class_camera3d_property_keep_aspect"><reference internal="True" refid="enum-camera3d-keepaspect"><inline classes="std std-ref">KeepAspect</inline></reference> <strong>keep_aspect</strong> = <literal>1</literal> <reference internal="True" refid="class-camera3d-property-keep-aspect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_keep_aspect_mode</strong>(value: <reference internal="True" refid="enum-camera3d-keepaspect"><inline classes="std std-ref">KeepAspect</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-camera3d-keepaspect"><inline classes="std std-ref">KeepAspect</inline></reference> <strong>get_keep_aspect_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在 <reference internal="True" refid="class-camera3d-property-fov"><inline classes="std std-ref">fov</inline></reference>/<reference internal="True" refid="class-camera3d-property-size"><inline classes="std std-ref">size</inline></reference> 调整时要锁定的轴。可以是 <reference internal="True" refid="class-camera3d-constant-keep-width"><inline classes="std std-ref">KEEP_WIDTH</inline></reference> 或 <reference internal="True" refid="class-camera3d-constant-keep-height"><inline classes="std std-ref">KEEP_HEIGHT</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-near"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-near" names="class_camera3d_property_near"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>near</strong> = <literal>0.05</literal> <reference internal="True" refid="class-camera3d-property-near"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_near</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_near</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该相机相对于其局部 Z 轴到近剔除边界的距离。较低的值允许相机看到更靠近其原点的对象，但代价是<emphasis>整个</emphasis>范围内的精度较低。低于默认值的值会导致 Z 冲突增加。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-projection"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-projection" names="class_camera3d_property_projection"><reference internal="True" refid="enum-camera3d-projectiontype"><inline classes="std std-ref">ProjectionType</inline></reference> <strong>projection</strong> = <literal>0</literal> <reference internal="True" refid="class-camera3d-property-projection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_projection</strong>(value: <reference internal="True" refid="enum-camera3d-projectiontype"><inline classes="std std-ref">ProjectionType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-camera3d-projectiontype"><inline classes="std std-ref">ProjectionType</inline></reference> <strong>get_projection</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>相机的投影模式。在 <reference internal="True" refid="class-camera3d-constant-projection-perspective"><inline classes="std std-ref">PROJECTION_PERSPECTIVE</inline></reference> 模式下，物体与相机局部空间的Z距离会影响其感知的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-size"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-size" names="class_camera3d_property_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>size</strong> = <literal>1.0</literal> <reference internal="True" refid="class-camera3d-property-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_size</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该相机的大小，单位为米，描述的是完整的宽度或者高度，取决于 <reference internal="True" refid="class-camera3d-property-keep-aspect"><inline classes="std std-ref">keep_aspect</inline></reference>。仅适用于正交和视锥模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-property-v-offset"></target>
            <paragraph classes="classref-property" ids="class-camera3d-property-v-offset" names="class_camera3d_property_v_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>v_offset</strong> = <literal>0.0</literal> <reference internal="True" refid="class-camera3d-property-v-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_v_offset</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_v_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>相机视口的垂直（Y）偏移量。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-camera3d-method-clear-current"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-clear-current" names="class_camera3d_method_clear_current"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_current</strong>(enable_next: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-camera3d-method-clear-current"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这是当前相机，则将其从当前相机中移除。如果 <literal>enable_next</literal> 为 <literal>true</literal>，则请求使下一个相机（如果有）成为当前相机。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-get-camera-projection"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-get-camera-projection" names="class_camera3d_method_get_camera_projection"><reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference> <strong>get_camera_projection</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera3d-method-get-camera-projection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该相机用于渲染至关联视口的投影矩阵。相机必须是场景树的一部分才能正常工作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-get-camera-rid"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-get-camera-rid" names="class_camera3d_method_get_camera_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_camera_rid</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera3d-method-get-camera-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> 返回该相机的 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-get-camera-transform"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-get-camera-transform" names="class_camera3d_method_get_camera_transform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>get_camera_transform</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera3d-method-get-camera-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该相机的变换，该变换会加上垂直（<reference internal="True" refid="class-camera3d-property-v-offset"><inline classes="std std-ref">v_offset</inline></reference>）和水平（<reference internal="True" refid="class-camera3d-property-h-offset"><inline classes="std std-ref">h_offset</inline></reference>）偏移；以及 <reference internal="True" refuri="class_xrcamera3d#class-xrcamera3d"><inline classes="std std-ref">XRCamera3D</inline></reference> 等子类相机对相机位置和方向所做的任何其他调整。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-get-cull-mask-value"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-get-cull-mask-value" names="class_camera3d_method_get_cull_mask_value"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_cull_mask_value</strong>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera3d-method-get-cull-mask-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回是否启用了 <reference internal="True" refid="class-camera3d-property-cull-mask"><inline classes="std std-ref">cull_mask</inline></reference> 的指定层，该层由一个介于 1 和 20 之间的给定 <literal>layer_number</literal> 指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-get-frustum"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-get-frustum" names="class_camera3d_method_get_frustum"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>] <strong>get_frustum</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera3d-method-get-frustum"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以世界空间单位将相机的视锥平面作为 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> 数组按以下顺序返回：near、far、left、top、right、bottom。不要与 <reference internal="True" refid="class-camera3d-property-frustum-offset"><inline classes="std std-ref">frustum_offset</inline></reference> 混淆。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-get-pyramid-shape-rid"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-get-pyramid-shape-rid" names="class_camera3d_method_get_pyramid_shape_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_pyramid_shape_rid</strong>() <reference internal="True" refid="class-camera3d-method-get-pyramid-shape-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含该相机视锥的锥体形状的 RID，忽略相机的近处平面。锥体的尖端代表该相机的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-is-position-behind"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-is-position-behind" names="class_camera3d_method_is_position_behind"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_position_behind</strong>(world_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera3d-method-is-position-behind"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定位置在相机后面（链接图的蓝色部分），则返回 <literal>true</literal>。<reference name="查看此图" refuri="https://raw.githubusercontent.com/godotengine/godot-docs/master/img/camera3d_position_frustum.png">查看此图</reference>以了解位置查询方法的概述。</paragraph>
            <paragraph><strong>注意：</strong>返回 <literal>false</literal> 的位置可能仍然在相机的视野之外。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-is-position-in-frustum"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-is-position-in-frustum" names="class_camera3d_method_is_position_in_frustum"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_position_in_frustum</strong>(world_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera3d-method-is-position-in-frustum"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定位置在相机的视锥内（位于链接图中的绿色部分），则返回 <literal>true</literal>。<reference name="查看此图" refuri="https://raw.githubusercontent.com/godotengine/godot-docs/master/img/camera3d_position_frustum.png">查看此图</reference>以了解位置查询方法的概述。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-make-current"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-make-current" names="class_camera3d_method_make_current"><abbreviation explanation="无返回值。">void</abbreviation> <strong>make_current</strong>() <reference internal="True" refid="class-camera3d-method-make-current"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使此相机成为 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 的当前相机（见类的说明）。如果相机节点在场景树之外，一旦添加，它将尝试成为当前相机。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-project-local-ray-normal"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-project-local-ray-normal" names="class_camera3d_method_project_local_ray_normal"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>project_local_ray_normal</strong>(screen_point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera3d-method-project-local-ray-normal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从屏幕点位置沿相机方向的法向量。正交相机会被归一化。透视相机考虑到透视、屏幕宽度/高度等因素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-project-position"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-project-position" names="class_camera3d_method_project_position"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>project_position</strong>(screen_point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, z_depth: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera3d-method-project-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回世界空间中的 3D 点，该点映射到平面上 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 矩形中的给定 2D 坐标，该平面是距相机到场景的给定 <literal>z_depth</literal> 距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-project-ray-normal"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-project-ray-normal" names="class_camera3d_method_project_ray_normal"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>project_ray_normal</strong>(screen_point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera3d-method-project-ray-normal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回世界空间中的法线向量，即通过逆相机投影将点投影到 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 矩形上的结果。这对于以（原点，法线）的形式投射光线，以进行对象相交或拾取很有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-project-ray-origin"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-project-ray-origin" names="class_camera3d_method_project_ray_origin"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>project_ray_origin</strong>(screen_point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera3d-method-project-ray-origin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回世界空间中的 3D 位置，即通过逆相机投影将点投影到 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 矩形上的结果。这对于以（原点，法线）的形式投射光线，以进行对象相交或拾取很有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-set-cull-mask-value"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-set-cull-mask-value" names="class_camera3d_method_set_cull_mask_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cull_mask_value</strong>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-camera3d-method-set-cull-mask-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>基于 <literal>value</literal>，启用或禁用 <reference internal="True" refid="class-camera3d-property-cull-mask"><inline classes="std std-ref">cull_mask</inline></reference> 中的指定层，该层由一个介于 1 和 20 之间的给定 <literal>layer_number</literal> 指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-set-frustum"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-set-frustum" names="class_camera3d_method_set_frustum"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_frustum</strong>(size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-camera3d-method-set-frustum"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过指定的以世界空间单位为单位的 <literal>size</literal>、<literal>offset</literal>、以及 <literal>z_near</literal> 和 <literal>z_far</literal> 裁剪平面，将相机投影设置为视锥模式（见 <reference internal="True" refid="class-camera3d-constant-projection-frustum"><inline classes="std std-ref">PROJECTION_FRUSTUM</inline></reference>）。另见 <reference internal="True" refid="class-camera3d-property-frustum-offset"><inline classes="std std-ref">frustum_offset</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-set-orthogonal"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-set-orthogonal" names="class_camera3d_method_set_orthogonal"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_orthogonal</strong>(size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-camera3d-method-set-orthogonal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过指定的以世界空间单位为单位的 <literal>size</literal>、以及 <literal>z_near</literal> 和 <literal>z_far</literal> 裁剪平面，将相机投影设置为正交模式（参见 <reference internal="True" refid="class-camera3d-constant-projection-orthogonal"><inline classes="std std-ref">PROJECTION_ORTHOGONAL</inline></reference>）。（作为提示，2D 游戏经常使用这种投影，其值以像素为单位指定。）</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-set-perspective"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-set-perspective" names="class_camera3d_method_set_perspective"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_perspective</strong>(fov: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-camera3d-method-set-perspective"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过指定的以度为单位的 <literal>fov</literal>（视野）角度，以及以世界空间单位为单位的 <literal>z_near</literal> 和 <literal>z_far</literal> 裁剪平面，将相机投影设置为透视模式（参见 <reference internal="True" refid="class-camera3d-constant-projection-perspective"><inline classes="std std-ref">PROJECTION_PERSPECTIVE</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera3d-method-unproject-position"></target>
            <paragraph classes="classref-method" ids="class-camera3d-method-unproject-position" names="class_camera3d_method_unproject_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>unproject_position</strong>(world_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera3d-method-unproject-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回映射到世界空间中给定 3D 点的 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 矩形中的 2D 坐标。</paragraph>
            <paragraph><strong>注意：</strong>当使用它在 3D 视口上定位 GUI 元素时，如果 3D 点在相机后面，请使用 <reference internal="True" refid="class-camera3d-method-is-position-behind"><inline classes="std std-ref">is_position_behind</inline></reference> 来防止它们出现：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 该代码块是从 Node3D 继承的脚本的一部分。
# `control` 是对从 Control 继承的节点的引用。
control.visible = not get_viewport().get_camera_3d().is_position_behind(global_transform.origin)
control.position = get_viewport().get_camera_3d().unproject_position(global_transform.origin)</literal_block>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
