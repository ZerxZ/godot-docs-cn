<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_navigationagent2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/NavigationAgent2D.xml.</comment>
    <target refid="class-navigationagent2d"></target>
    <section ids="navigationagent2d class-navigationagent2d" names="navigationagent2d class_navigationagent2d">
        <title>NavigationAgent2D</title>
        <paragraph><strong>实验性：</strong> This class may be changed or removed in future versions.</paragraph>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于寻路至某个位置并且能够躲避障碍物的 2D 代理。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于寻路至某个位置并且能够躲避静态和动态障碍物的 2D 代理。父节点能够使用计算结果沿着路径动态前进。需要有导航数据才能正常工作。</paragraph>
            <paragraph>躲避动态障碍物使用的是 RVO 防撞算法。避障的计算发生在物理之前，因此寻路信息能够在物理迭代时安全使用。</paragraph>
            <paragraph><strong>注意：</strong>设置 <reference internal="True" refid="class-navigationagent2d-property-target-position"><inline classes="std std-ref">target_position</inline></reference> 属性之后，必须在每个物理帧使用一次 <reference internal="True" refid="class-navigationagent2d-method-get-next-path-position"><inline classes="std std-ref">get_next_path_position</inline></reference> 函数来更新导航代理的内部路径逻辑。这个函数返回的向量位置应该用作该代理的父节点的下一次移动位置。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/navigation/navigation_using_navigationagents"><inline classes="doc">使用 NavigationAgent</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="96"></colspec>
                    <colspec colwidth="100"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-avoidance-enabled"><inline classes="std std-ref">avoidance_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-avoidance-layers"><inline classes="std std-ref">avoidance_layers</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-avoidance-mask"><inline classes="std std-ref">avoidance_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-avoidance-priority"><inline classes="std std-ref">avoidance_priority</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-debug-enabled"><inline classes="std std-ref">debug_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-debug-path-custom-color"><inline classes="std std-ref">debug_path_custom_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-debug-path-custom-line-width"><inline classes="std std-ref">debug_path_custom_line_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-debug-path-custom-point-size"><inline classes="std std-ref">debug_path_custom_point_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-debug-use-custom"><inline classes="std std-ref">debug_use_custom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-max-neighbors"><inline classes="std std-ref">max_neighbors</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>10</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-max-speed"><inline classes="std std-ref">max_speed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>100.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-navigation-layers"><inline classes="std std-ref">navigation_layers</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-neighbor-distance"><inline classes="std std-ref">neighbor_distance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>500.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-path-desired-distance"><inline classes="std std-ref">path_desired_distance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>20.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-path-max-distance"><inline classes="std std-ref">path_max_distance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>100.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_navigationpathqueryparameters2d#enum-navigationpathqueryparameters2d-pathmetadataflags"><inline classes="std std-ref">PathMetadataFlags</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-path-metadata-flags"><inline classes="std std-ref">path_metadata_flags</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>7</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_navigationpathqueryparameters2d#enum-navigationpathqueryparameters2d-pathpostprocessing"><inline classes="std std-ref">PathPostProcessing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-path-postprocessing"><inline classes="std std-ref">path_postprocessing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_navigationpathqueryparameters2d#enum-navigationpathqueryparameters2d-pathfindingalgorithm"><inline classes="std std-ref">PathfindingAlgorithm</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-pathfinding-algorithm"><inline classes="std std-ref">pathfinding_algorithm</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-radius"><inline classes="std std-ref">radius</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>10.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-simplify-epsilon"><inline classes="std std-ref">simplify_epsilon</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-simplify-path"><inline classes="std std-ref">simplify_path</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-target-desired-distance"><inline classes="std std-ref">target_desired_distance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>10.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-target-position"><inline classes="std std-ref">target_position</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-time-horizon-agents"><inline classes="std std-ref">time_horizon_agents</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-time-horizon-obstacles"><inline classes="std std-ref">time_horizon_obstacles</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-property-velocity"><inline classes="std std-ref">velocity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="71"></colspec>
                    <colspec colwidth="171"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-distance-to-target"><inline classes="std std-ref">distance_to_target</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-get-avoidance-layer-value"><inline classes="std std-ref">get_avoidance_layer_value</inline></reference>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-get-avoidance-mask-value"><inline classes="std std-ref">get_avoidance_mask_value</inline></reference>(mask_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-get-current-navigation-path"><inline classes="std std-ref">get_current_navigation_path</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-get-current-navigation-path-index"><inline classes="std std-ref">get_current_navigation_path_index</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_navigationpathqueryresult2d#class-navigationpathqueryresult2d"><inline classes="std std-ref">NavigationPathQueryResult2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-get-current-navigation-result"><inline classes="std std-ref">get_current_navigation_result</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-get-final-position"><inline classes="std std-ref">get_final_position</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-get-navigation-layer-value"><inline classes="std std-ref">get_navigation_layer_value</inline></reference>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-get-navigation-map"><inline classes="std std-ref">get_navigation_map</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-get-next-path-position"><inline classes="std std-ref">get_next_path_position</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-get-rid"><inline classes="std std-ref">get_rid</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-is-navigation-finished"><inline classes="std std-ref">is_navigation_finished</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-is-target-reachable"><inline classes="std std-ref">is_target_reachable</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-is-target-reached"><inline classes="std std-ref">is_target_reached</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-set-avoidance-layer-value"><inline classes="std std-ref">set_avoidance_layer_value</inline></reference>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-set-avoidance-mask-value"><inline classes="std std-ref">set_avoidance_mask_value</inline></reference>(mask_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-set-navigation-layer-value"><inline classes="std std-ref">set_navigation_layer_value</inline></reference>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-set-navigation-map"><inline classes="std std-ref">set_navigation_map</inline></reference>(navigation_map: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationagent2d-method-set-velocity-forced"><inline classes="std std-ref">set_velocity_forced</inline></reference>(velocity: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-navigationagent2d-signal-link-reached"></target>
            <paragraph classes="classref-signal" ids="class-navigationagent2d-signal-link-reached" names="class_navigationagent2d_signal_link_reached"><strong>link_reached</strong>(details: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <reference internal="True" refid="class-navigationagent2d-signal-link-reached"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>表示代理到达导航链接的信号。当代理移动到路径下一个位置的 <reference internal="True" refid="class-navigationagent2d-property-path-desired-distance"><inline classes="std std-ref">path_desired_distance</inline></reference> 范围内，且该位置是导航链接时发出。</paragraph>
            <paragraph>根据 <reference internal="True" refid="class-navigationagent2d-property-path-metadata-flags"><inline classes="std std-ref">path_metadata_flags</inline></reference> 的值，详细信息字典可能包含以下键：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>position</literal>：到达的链接的起始位置。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>type</literal>：总是 <reference internal="True" refuri="class_navigationpathqueryresult2d#class-navigationpathqueryresult2d-constant-path-segment-type-link"><inline classes="std std-ref">NavigationPathQueryResult2D.PATH_SEGMENT_TYPE_LINK</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>rid</literal>：链接的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>owner</literal>：管理该链接的对象（通常是<reference internal="True" refuri="class_navigationlink2d#class-navigationlink2d"><inline classes="std std-ref">NavigationLink2D</inline></reference>）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>link_entry_position</literal>：如果 <literal>owner</literal> 可用且该所有者是一个 <reference internal="True" refuri="class_navigationlink2d#class-navigationlink2d"><inline classes="std std-ref">NavigationLink2D</inline></reference>，它将包含代理正在进入时的链接点的全局位置。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>link_exit_position</literal>：如果 <literal>owner</literal> 可用且该所有者是一个 <reference internal="True" refuri="class_navigationlink2d#class-navigationlink2d"><inline classes="std std-ref">NavigationLink2D</inline></reference>，它将包含代理正在退出时的链接点的全局位置。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-signal-navigation-finished"></target>
            <paragraph classes="classref-signal" ids="class-navigationagent2d-signal-navigation-finished" names="class_navigationagent2d_signal_navigation_finished"><strong>navigation_finished</strong>() <reference internal="True" refid="class-navigationagent2d-signal-navigation-finished"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>表示代理导航完成的信号。如果目标可达，则导航会在抵达目标位置时停止。如果目标不可达，则导航会在抵达最后一个路径点时停止。每次加载的路径只会发出一次这个信号。</paragraph>
            <paragraph>目标可达时，信号会在 <reference internal="True" refid="class-navigationagent2d-signal-target-reached"><inline classes="std std-ref">target_reached</inline></reference> 后发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-signal-path-changed"></target>
            <paragraph classes="classref-signal" ids="class-navigationagent2d-signal-path-changed" names="class_navigationagent2d_signal_path_changed"><strong>path_changed</strong>() <reference internal="True" refid="class-navigationagent2d-signal-path-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该代理必须更新加载的路径时发出：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>因为路径以前是空的。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>因为导航地图已经改变。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>因为代理从当前路径段推得比 <reference internal="True" refid="class-navigationagent2d-property-path-max-distance"><inline classes="std std-ref">path_max_distance</inline></reference> 更远。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-signal-target-reached"></target>
            <paragraph classes="classref-signal" ids="class-navigationagent2d-signal-target-reached" names="class_navigationagent2d_signal_target_reached"><strong>target_reached</strong>() <reference internal="True" refid="class-navigationagent2d-signal-target-reached"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>表示代理到达目标的信号，即代理移到了与 <reference internal="True" refid="class-navigationagent2d-property-target-position"><inline classes="std std-ref">target_position</inline></reference> 相距 <reference internal="True" refid="class-navigationagent2d-property-target-desired-distance"><inline classes="std std-ref">target_desired_distance</inline></reference> 之内的位置。每次加载路径只会发出一次这个信号。</paragraph>
            <paragraph>目标可达时，信号会在 <reference internal="True" refid="class-navigationagent2d-signal-navigation-finished"><inline classes="std std-ref">navigation_finished</inline></reference> 前发出。</paragraph>
            <paragraph>并不是每次都能够到达目标位置，但是每次都能够到达最终位置。见 <reference internal="True" refid="class-navigationagent2d-method-get-final-position"><inline classes="std std-ref">get_final_position</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-signal-velocity-computed"></target>
            <paragraph classes="classref-signal" ids="class-navigationagent2d-signal-velocity-computed" names="class_navigationagent2d_signal_velocity_computed"><strong>velocity_computed</strong>(safe_velocity: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-navigationagent2d-signal-velocity-computed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>计算出避障速度时发出通知。只要 <reference internal="True" refid="class-navigationagent2d-property-avoidance-enabled"><inline classes="std std-ref">avoidance_enabled</inline></reference> 为 <literal>true</literal> 并且代理存在导航地图，就会在每次更新时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-signal-waypoint-reached"></target>
            <paragraph classes="classref-signal" ids="class-navigationagent2d-signal-waypoint-reached" names="class_navigationagent2d_signal_waypoint_reached"><strong>waypoint_reached</strong>(details: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <reference internal="True" refid="class-navigationagent2d-signal-waypoint-reached"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>表示代理已到达航路点的信号。当代理移动到路径下一个位置的 <reference internal="True" refid="class-navigationagent2d-property-path-desired-distance"><inline classes="std std-ref">path_desired_distance</inline></reference> 范围内时发出。</paragraph>
            <paragraph>根据 <reference internal="True" refid="class-navigationagent2d-property-path-metadata-flags"><inline classes="std std-ref">path_metadata_flags</inline></reference> 的值，详细信息字典可能包含以下键：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>position</literal>：到达的路标点的位置。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>type</literal>：包含该路标的导航基元（区块或链接）的类型。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>rid</literal>：包含的导航基元（区块或链接）的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>owner</literal>：管理包含的导航基元（区块或链接）的对象。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-navigationagent2d-property-avoidance-enabled"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-avoidance-enabled" names="class_navigationagent2d_property_avoidance_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>avoidance_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-navigationagent2d-property-avoidance-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_avoidance_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_avoidance_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，该代理会在 <reference internal="True" refuri="class_navigationserver2d#class-navigationserver2d"><inline classes="std std-ref">NavigationServer2D</inline></reference> 上注册 RVO 避障回调。当使用 <reference internal="True" refid="class-navigationagent2d-property-velocity"><inline classes="std std-ref">velocity</inline></reference> 并且处理完成时，会通过与 <reference internal="True" refid="class-navigationagent2d-signal-velocity-computed"><inline classes="std std-ref">velocity_computed</inline></reference> 的信号连接接收到安全速度 <literal>safe_velocity</literal> Vector2。注册的代理过多会为避障处理带来显著的性能开销，应该仅在需要它的代理上启用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-avoidance-layers"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-avoidance-layers" names="class_navigationagent2d_property_avoidance_layers"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>avoidance_layers</strong> = <literal>1</literal> <reference internal="True" refid="class-navigationagent2d-property-avoidance-layers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_avoidance_layers</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_avoidance_layers</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>决定该 NavigationAgent 避障层的位域。<reference internal="True" refid="class-navigationagent2d-property-avoidance-mask"><inline classes="std std-ref">avoidance_mask</inline></reference> 中该位域存在交集的其他代理会躲避这个代理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-avoidance-mask"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-avoidance-mask" names="class_navigationagent2d_property_avoidance_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>avoidance_mask</strong> = <literal>1</literal> <reference internal="True" refid="class-navigationagent2d-property-avoidance-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_avoidance_mask</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_avoidance_mask</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>决定该 NavigationAgent 会躲避那些代理和障碍物的位域，需要该位域与对方的 <reference internal="True" refid="class-navigationagent2d-property-avoidance-layers"><inline classes="std std-ref">avoidance_layers</inline></reference> 存在至少一个共同的比特位。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-avoidance-priority"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-avoidance-priority" names="class_navigationagent2d_property_avoidance_priority"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>avoidance_priority</strong> = <literal>1.0</literal> <reference internal="True" refid="class-navigationagent2d-property-avoidance-priority"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_avoidance_priority</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_avoidance_priority</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该代理不会针对 <reference internal="True" refid="class-navigationagent2d-property-avoidance-mask"><inline classes="std std-ref">avoidance_mask</inline></reference> 存在匹配但 <reference internal="True" refid="class-navigationagent2d-property-avoidance-priority"><inline classes="std std-ref">avoidance_priority</inline></reference> 更低的代理调整速度。相应地，优先级更低的代理则会对其速度进行更大的调整，从而避免与这个代理发生碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-debug-enabled"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-debug-enabled" names="class_navigationagent2d_property_debug_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>debug_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-navigationagent2d-property-debug-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_debug_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_debug_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则为该代理显示调试内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-debug-path-custom-color"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-debug-path-custom-color" names="class_navigationagent2d_property_debug_path_custom_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>debug_path_custom_color</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-navigationagent2d-property-debug-path-custom-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_debug_path_custom_color</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_debug_path_custom_color</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果 <reference internal="True" refid="class-navigationagent2d-property-debug-use-custom"><inline classes="std std-ref">debug_use_custom</inline></reference> 为 <literal>true</literal>，则该代理使用该颜色，不使用全局颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-debug-path-custom-line-width"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-debug-path-custom-line-width" names="class_navigationagent2d_property_debug_path_custom_line_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>debug_path_custom_line_width</strong> = <literal>-1.0</literal> <reference internal="True" refid="class-navigationagent2d-property-debug-path-custom-line-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_debug_path_custom_line_width</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_debug_path_custom_line_width</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果 <reference internal="True" refid="class-navigationagent2d-property-debug-use-custom"><inline classes="std std-ref">debug_use_custom</inline></reference> 为 <literal>true</literal>，则该代理使用该线宽进行路径的渲染，不使用全局线宽。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-debug-path-custom-point-size"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-debug-path-custom-point-size" names="class_navigationagent2d_property_debug_path_custom_point_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>debug_path_custom_point_size</strong> = <literal>4.0</literal> <reference internal="True" refid="class-navigationagent2d-property-debug-path-custom-point-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_debug_path_custom_point_size</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_debug_path_custom_point_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果 <reference internal="True" refid="class-navigationagent2d-property-debug-use-custom"><inline classes="std std-ref">debug_use_custom</inline></reference> 为 <literal>true</literal>，则该代理使用该栅格化点尺寸进行路径点的渲染，不使用全局点尺寸。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-debug-use-custom"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-debug-use-custom" names="class_navigationagent2d_property_debug_use_custom"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>debug_use_custom</strong> = <literal>false</literal> <reference internal="True" refid="class-navigationagent2d-property-debug-use-custom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_debug_use_custom</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_debug_use_custom</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该代理使用 <reference internal="True" refid="class-navigationagent2d-property-debug-path-custom-color"><inline classes="std std-ref">debug_path_custom_color</inline></reference> 中定义的颜色，不使用全局颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-max-neighbors"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-max-neighbors" names="class_navigationagent2d_property_max_neighbors"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_neighbors</strong> = <literal>10</literal> <reference internal="True" refid="class-navigationagent2d-property-max-neighbors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_neighbors</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_neighbors</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该代理所需考虑的最大邻居数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-max-speed"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-max-speed" names="class_navigationagent2d_property_max_speed"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>max_speed</strong> = <literal>100.0</literal> <reference internal="True" refid="class-navigationagent2d-property-max-speed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_speed</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_max_speed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>代理所能达到的最大移动速度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-navigation-layers"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-navigation-layers" names="class_navigationagent2d_property_navigation_layers"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>navigation_layers</strong> = <literal>1</literal> <reference internal="True" refid="class-navigationagent2d-property-navigation-layers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_navigation_layers</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_navigation_layers</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>决定该代理计算路径所使用的导航地区导航层的位域。运行时进行修改会清空当前的导航路径，并根据新的导航层生成一条新的路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-neighbor-distance"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-neighbor-distance" names="class_navigationagent2d_property_neighbor_distance"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>neighbor_distance</strong> = <literal>500.0</literal> <reference internal="True" refid="class-navigationagent2d-property-neighbor-distance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_neighbor_distance</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_neighbor_distance</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>搜索其他代理的距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-path-desired-distance"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-path-desired-distance" names="class_navigationagent2d_property_path_desired_distance"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>path_desired_distance</strong> = <literal>20.0</literal> <reference internal="True" refid="class-navigationagent2d-property-path-desired-distance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_path_desired_distance</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_path_desired_distance</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>距离阈值，用于确定是否已到达某个路径点。使用这个值，代理就不必精确地到达某个路径点，只需到达该路径点的大致区域内即可。如果这个值设得太大，该 NavigationAgent 会跳过路径上的点，这可能导致它离开该导航网格。如果这个值设得太小，该 NavigationAgent 会陷入重新寻路的死循环，因为它会在每次物理帧更新后都会超过下一个点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-path-max-distance"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-path-max-distance" names="class_navigationagent2d_property_path_max_distance"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>path_max_distance</strong> = <literal>100.0</literal> <reference internal="True" refid="class-navigationagent2d-property-path-max-distance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_path_max_distance</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_path_max_distance</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>允许代理偏离通往最终位置的理想路径的最大距离。可能为了防撞而产生偏离。超出最大距离时，会重新计算理想路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-path-metadata-flags"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-path-metadata-flags" names="class_navigationagent2d_property_path_metadata_flags"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_navigationpathqueryparameters2d#enum-navigationpathqueryparameters2d-pathmetadataflags"><inline classes="std std-ref">PathMetadataFlags</inline></reference>] <strong>path_metadata_flags</strong> = <literal>7</literal> <reference internal="True" refid="class-navigationagent2d-property-path-metadata-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_path_metadata_flags</strong>(value: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_navigationpathqueryparameters2d#enum-navigationpathqueryparameters2d-pathmetadataflags"><inline classes="std std-ref">PathMetadataFlags</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_navigationpathqueryparameters2d#enum-navigationpathqueryparameters2d-pathmetadataflags"><inline classes="std std-ref">PathMetadataFlags</inline></reference>] <strong>get_path_metadata_flags</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>与导航路径一起返回的附加信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-path-postprocessing"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-path-postprocessing" names="class_navigationagent2d_property_path_postprocessing"><reference internal="True" refuri="class_navigationpathqueryparameters2d#enum-navigationpathqueryparameters2d-pathpostprocessing"><inline classes="std std-ref">PathPostProcessing</inline></reference> <strong>path_postprocessing</strong> = <literal>0</literal> <reference internal="True" refid="class-navigationagent2d-property-path-postprocessing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_path_postprocessing</strong>(value: <reference internal="True" refuri="class_navigationpathqueryparameters2d#enum-navigationpathqueryparameters2d-pathpostprocessing"><inline classes="std std-ref">PathPostProcessing</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_navigationpathqueryparameters2d#enum-navigationpathqueryparameters2d-pathpostprocessing"><inline classes="std std-ref">PathPostProcessing</inline></reference> <strong>get_path_postprocessing</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>对 <reference internal="True" refid="class-navigationagent2d-property-pathfinding-algorithm"><inline classes="std std-ref">pathfinding_algorithm</inline></reference> 找到的原始路径走廊应用的路径后期处理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-pathfinding-algorithm"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-pathfinding-algorithm" names="class_navigationagent2d_property_pathfinding_algorithm"><reference internal="True" refuri="class_navigationpathqueryparameters2d#enum-navigationpathqueryparameters2d-pathfindingalgorithm"><inline classes="std std-ref">PathfindingAlgorithm</inline></reference> <strong>pathfinding_algorithm</strong> = <literal>0</literal> <reference internal="True" refid="class-navigationagent2d-property-pathfinding-algorithm"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pathfinding_algorithm</strong>(value: <reference internal="True" refuri="class_navigationpathqueryparameters2d#enum-navigationpathqueryparameters2d-pathfindingalgorithm"><inline classes="std std-ref">PathfindingAlgorithm</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_navigationpathqueryparameters2d#enum-navigationpathqueryparameters2d-pathfindingalgorithm"><inline classes="std std-ref">PathfindingAlgorithm</inline></reference> <strong>get_pathfinding_algorithm</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>路径查询中使用的寻路算法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-radius"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-radius" names="class_navigationagent2d_property_radius"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>radius</strong> = <literal>10.0</literal> <reference internal="True" refid="class-navigationagent2d-property-radius"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_radius</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_radius</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该避障代理的半径。这是该避障代理的“身体”，不是避障机制的起始半径（由 <reference internal="True" refid="class-navigationagent2d-property-neighbor-distance"><inline classes="std std-ref">neighbor_distance</inline></reference> 控制）。</paragraph>
            <paragraph>不会影响正常的寻路。要修改角色的寻路半径，请在烘焙 <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> 资源时使用不同的 <reference internal="True" refuri="class_navigationmesh#class-navigationmesh-property-agent-radius"><inline classes="std std-ref">NavigationMesh.agent_radius</inline></reference> 属性，针对不同的角色大小使用不同的导航地图。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-simplify-epsilon"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-simplify-epsilon" names="class_navigationagent2d_property_simplify_epsilon"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>simplify_epsilon</strong> = <literal>0.0</literal> <reference internal="True" refid="class-navigationagent2d-property-simplify-epsilon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_simplify_epsilon</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_simplify_epsilon</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>以世界单位表示的路径简化量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-simplify-path"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-simplify-path" names="class_navigationagent2d_property_simplify_path"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>simplify_path</strong> = <literal>false</literal> <reference internal="True" refid="class-navigationagent2d-property-simplify-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_simplify_path</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_simplify_path</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，将返回路径的简化版本，其中移除了不太重要的路径点。简化量由 <reference internal="True" refid="class-navigationagent2d-property-simplify-epsilon"><inline classes="std std-ref">simplify_epsilon</inline></reference> 控制。简化使用 Ramer-Douglas-Peucker 算法的变体进行曲线点抽取。</paragraph>
            <paragraph>路径简化有助于缓解使用某些代理类型和脚本行为可能出现的各种路径跟踪问题。例如“开放场”中的“转向”代理或避让。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-target-desired-distance"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-target-desired-distance" names="class_navigationagent2d_property_target_desired_distance"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>target_desired_distance</strong> = <literal>10.0</literal> <reference internal="True" refid="class-navigationagent2d-property-target-desired-distance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_target_desired_distance</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_target_desired_distance</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>与目标的距离阈值，小于该阈值时会认为已抵达目标位置。已抵达目标位置时会发出 <reference internal="True" refid="class-navigationagent2d-signal-target-reached"><inline classes="std std-ref">target_reached</inline></reference> 并结束导航（见 <reference internal="True" refid="class-navigationagent2d-method-is-navigation-finished"><inline classes="std std-ref">is_navigation_finished</inline></reference> 和 <reference internal="True" refid="class-navigationagent2d-signal-navigation-finished"><inline classes="std std-ref">navigation_finished</inline></reference>）。</paragraph>
            <paragraph>将这个属性设置为大于 <reference internal="True" refid="class-navigationagent2d-property-path-desired-distance"><inline classes="std std-ref">path_desired_distance</inline></reference> 的值可以提前结束导航（导航会在到达最后一个路径点之前停止）。</paragraph>
            <paragraph>将这个属性设置为小于 <reference internal="True" refid="class-navigationagent2d-property-path-desired-distance"><inline classes="std std-ref">path_desired_distance</inline></reference> 的值则会让导航在更接近目标位置的地方结束（导航在抵达最后一个路径点后不会立即停止）。不过如果设得太小，代理就会陷入重新移动的循环，因为每次物理帧更新时移动的距离都会超过与目标的实际距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-target-position"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-target-position" names="class_navigationagent2d_property_target_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>target_position</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-navigationagent2d-property-target-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_target_position</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_target_position</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置后，会向 NavigationServer 请求一条新的从当前代理位置到 <reference internal="True" refid="class-navigationagent2d-property-target-position"><inline classes="std std-ref">target_position</inline></reference> 的导航路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-time-horizon-agents"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-time-horizon-agents" names="class_navigationagent2d_property_time_horizon_agents"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>time_horizon_agents</strong> = <literal>1.0</literal> <reference internal="True" refid="class-navigationagent2d-property-time-horizon-agents"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_time_horizon_agents</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_time_horizon_agents</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>考虑其他代理的前提下，该代理的速度的最短安全时间，这个速度是通过碰撞躲避算法计算的。数值越大，代理响应其他代理的速度就越快，但选择速度的自由度也就越小。太高的取值会大大降低代理的移动速度。必须为正数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-time-horizon-obstacles"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-time-horizon-obstacles" names="class_navigationagent2d_property_time_horizon_obstacles"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>time_horizon_obstacles</strong> = <literal>0.0</literal> <reference internal="True" refid="class-navigationagent2d-property-time-horizon-obstacles"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_time_horizon_obstacles</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_time_horizon_obstacles</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>考虑静态避障障碍物的前提下，该代理的速度的最短安全时间，这个速度是通过碰撞躲避算法计算的。数值越大，代理响应静态避障障碍物的速度就越快，但选择速度的自由度也就越小。太高的取值会大大降低代理的移动速度。必须为正数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-property-velocity"></target>
            <paragraph classes="classref-property" ids="class-navigationagent2d-property-velocity" names="class_navigationagent2d_property_velocity"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>velocity</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-navigationagent2d-property-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_velocity</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_velocity</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为代理设置新的需求速度。避障仿真会尽可能尝试满足这个速度，但为了躲避与其他代理和障碍物的碰撞也会对它进行修改。将代理传送至新的位置时，请使用 <reference internal="True" refid="class-navigationagent2d-method-set-velocity-forced"><inline classes="std std-ref">set_velocity_forced</inline></reference> 重置内部仿真速度。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-navigationagent2d-method-distance-to-target"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-distance-to-target" names="class_navigationagent2d_method_distance_to_target"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>distance_to_target</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-navigationagent2d-method-distance-to-target"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与目标位置的距离，使用的是代理的全局位置。用户必须设置 <reference internal="True" refid="class-navigationagent2d-property-target-position"><inline classes="std std-ref">target_position</inline></reference> 才能获得精确结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-get-avoidance-layer-value"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-get-avoidance-layer-value" names="class_navigationagent2d_method_get_avoidance_layer_value"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_avoidance_layer_value</strong>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-navigationagent2d-method-get-avoidance-layer-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-navigationagent2d-property-avoidance-layers"><inline classes="std std-ref">avoidance_layers</inline></reference> 位掩码中指定的层是否启用，给定的 <literal>layer_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-get-avoidance-mask-value"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-get-avoidance-mask-value" names="class_navigationagent2d_method_get_avoidance_mask_value"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_avoidance_mask_value</strong>(mask_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-navigationagent2d-method-get-avoidance-mask-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-navigationagent2d-property-avoidance-mask"><inline classes="std std-ref">avoidance_mask</inline></reference> 位掩码中指定的掩码是否启用，给定的 <literal>mask_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-get-current-navigation-path"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-get-current-navigation-path" names="class_navigationagent2d_method_get_current_navigation_path"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>get_current_navigation_path</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-navigationagent2d-method-get-current-navigation-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个代理从起点到终点的当前路径，使用全局坐标。该路径只会在目标位置发生变化，或者代理要求重新计算路径时更新。路径数组不应用于直接路径移动，因为代理有自己的内部路径逻辑，手动更改路径数组可能会破坏该逻辑。每个物理帧上使用一次预期的 <reference internal="True" refid="class-navigationagent2d-method-get-next-path-position"><inline classes="std std-ref">get_next_path_position</inline></reference>，来接收用于该代理移动的下一个路径点，因为该函数还会更新内部路径逻辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-get-current-navigation-path-index"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-get-current-navigation-path-index" names="class_navigationagent2d_method_get_current_navigation_path_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_current_navigation_path_index</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-navigationagent2d-method-get-current-navigation-path-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该代理当前位于导航路径 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> 中的哪一个索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-get-current-navigation-result"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-get-current-navigation-result" names="class_navigationagent2d_method_get_current_navigation_result"><reference internal="True" refuri="class_navigationpathqueryresult2d#class-navigationpathqueryresult2d"><inline classes="std std-ref">NavigationPathQueryResult2D</inline></reference> <strong>get_current_navigation_result</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-navigationagent2d-method-get-current-navigation-result"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该代理目前正在使用的路径所对应的路径查询结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-get-final-position"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-get-final-position" names="class_navigationagent2d_method_get_final_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_final_position</strong>() <reference internal="True" refid="class-navigationagent2d-method-get-final-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前导航路径上可到达的最终位置的全局坐标。如果该代理需要更新导航路径，从而使该代理发出 <reference internal="True" refid="class-navigationagent2d-signal-path-changed"><inline classes="std std-ref">path_changed</inline></reference> 信号，则该位置可能会发生变化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-get-navigation-layer-value"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-get-navigation-layer-value" names="class_navigationagent2d_method_get_navigation_layer_value"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_navigation_layer_value</strong>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-navigationagent2d-method-get-navigation-layer-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-navigationagent2d-property-navigation-layers"><inline classes="std std-ref">navigation_layers</inline></reference> 位掩码中指定的层是否启用，给定的 <literal>layer_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-get-navigation-map"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-get-navigation-map" names="class_navigationagent2d_method_get_navigation_map"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_navigation_map</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-navigationagent2d-method-get-navigation-map"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个 NavigationAgent 节点的导航地图的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。这个函数返回的始终是在 NavigationAgent 上设置的地图，不是 NavigationServer 上的抽象代理所使用的地图。如果通过 NavigationServer API 修改了代理的地图，该 NavigationAgent 节点是不会感知到地图的变化的。请使用 <reference internal="True" refid="class-navigationagent2d-method-set-navigation-map"><inline classes="std std-ref">set_navigation_map</inline></reference> 修改该 NavigationAgent 的导航地图，能够同时在 NavigationServer 上的代理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-get-next-path-position"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-get-next-path-position" names="class_navigationagent2d_method_get_next_path_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_next_path_position</strong>() <reference internal="True" refid="class-navigationagent2d-method-get-next-path-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回可以移动至的下一个位置，使用全局坐标，确保中途没有静态对象的阻挡。如果该代理没有导航路径，则会返回该代理父节点的位置。这个函数每个物理帧都必须调用一次，更新 NavigationAgent 内部的路径逻辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-get-rid"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-get-rid" names="class_navigationagent2d_method_get_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_rid</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-navigationagent2d-method-get-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个代理在 <reference internal="True" refuri="class_navigationserver2d#class-navigationserver2d"><inline classes="std std-ref">NavigationServer2D</inline></reference> 上的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-is-navigation-finished"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-is-navigation-finished" names="class_navigationagent2d_method_is_navigation_finished"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_navigation_finished</strong>() <reference internal="True" refid="class-navigationagent2d-method-is-navigation-finished"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果代理的导航已完成，则返回 <literal>true</literal>。如果目标可达，则导航将在达到目标时结束。如果目标不可达，则导航将在到达路径的最后一个航路点时结束。</paragraph>
            <paragraph><strong>注意：</strong>虽然 <literal>true</literal> 更喜欢停止调用更新函数，例如 <reference internal="True" refid="class-navigationagent2d-method-get-next-path-position"><inline classes="std std-ref">get_next_path_position</inline></reference>。这避免了由于调用重复的路径更新而使常设代理抖动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-is-target-reachable"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-is-target-reachable" names="class_navigationagent2d_method_is_target_reachable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_target_reachable</strong>() <reference internal="True" refid="class-navigationagent2d-method-is-target-reachable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <reference internal="True" refid="class-navigationagent2d-method-get-final-position"><inline classes="std std-ref">get_final_position</inline></reference> 位于 <reference internal="True" refid="class-navigationagent2d-property-target-position"><inline classes="std std-ref">target_position</inline></reference> 的 <reference internal="True" refid="class-navigationagent2d-property-target-desired-distance"><inline classes="std std-ref">target_desired_distance</inline></reference> 范围内，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-is-target-reached"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-is-target-reached" names="class_navigationagent2d_method_is_target_reached"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_target_reached</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-navigationagent2d-method-is-target-reached"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果代理到达目标，即代理移动到 <reference internal="True" refid="class-navigationagent2d-property-target-position"><inline classes="std std-ref">target_position</inline></reference> 的 <reference internal="True" refid="class-navigationagent2d-property-target-desired-distance"><inline classes="std std-ref">target_desired_distance</inline></reference> 范围内，则返回 <literal>true</literal>。不一定总能到达目标，但应总能到达最终位置。请参阅 <reference internal="True" refid="class-navigationagent2d-method-get-final-position"><inline classes="std std-ref">get_final_position</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-set-avoidance-layer-value"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-set-avoidance-layer-value" names="class_navigationagent2d_method_set_avoidance_layer_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_avoidance_layer_value</strong>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-navigationagent2d-method-set-avoidance-layer-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据 <literal>value</literal> 启用或禁用 <reference internal="True" refid="class-navigationagent2d-property-avoidance-layers"><inline classes="std std-ref">avoidance_layers</inline></reference> 位掩码中指定的层，给定的 <literal>layer_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-set-avoidance-mask-value"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-set-avoidance-mask-value" names="class_navigationagent2d_method_set_avoidance_mask_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_avoidance_mask_value</strong>(mask_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-navigationagent2d-method-set-avoidance-mask-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据 <literal>value</literal> 启用或禁用 <reference internal="True" refid="class-navigationagent2d-property-avoidance-mask"><inline classes="std std-ref">avoidance_mask</inline></reference> 位掩码中指定的掩码，给定的 <literal>mask_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-set-navigation-layer-value"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-set-navigation-layer-value" names="class_navigationagent2d_method_set_navigation_layer_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_navigation_layer_value</strong>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-navigationagent2d-method-set-navigation-layer-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据 <literal>value</literal>，启用或禁用 <reference internal="True" refid="class-navigationagent2d-property-navigation-layers"><inline classes="std std-ref">navigation_layers</inline></reference> 位掩码中指定的层，给定的 <literal>layer_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-set-navigation-map"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-set-navigation-map" names="class_navigationagent2d_method_set_navigation_map"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_navigation_map</strong>(navigation_map: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-navigationagent2d-method-set-navigation-map"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置这个 NavigationAgent 节点所应使用的导航地图的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>，同时还会更新 NavigationServer 上的代理 <literal>agent</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationagent2d-method-set-velocity-forced"></target>
            <paragraph classes="classref-method" ids="class-navigationagent2d-method-set-velocity-forced" names="class_navigationagent2d_method_set_velocity_forced"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_velocity_forced</strong>(velocity: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-navigationagent2d-method-set-velocity-forced"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将防撞仿真的内部速度替换为 <literal>velocity</literal>。代理传送到新的位置之后，应该在同一帧里使用这个函数。如果频繁调用这个函数，可能会让代理卡住。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
