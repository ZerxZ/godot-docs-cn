<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_os.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/OS.xml.</comment>
    <target refid="class-os"></target>
    <section ids="os class-os" names="os class_os">
        <title>OS</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供对常见操作系统功能的访问。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>OS</strong> 类封装了与主机操作系统通信的最常见功能，例如视频驱动、延时、环境变量、二进制文件的执行、命令行等。</paragraph>
            <paragraph><strong>注意：</strong>在 Godot 4 中，与窗口管理、剪贴板和 TTS 相关的 <strong>OS</strong> 函数已被移至 <reference internal="True" refuri="class_displayserver#class-displayserver"><inline classes="std std-ref">DisplayServer</inline></reference> 单例（和 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 类）。与时间相关的函数已被移除，并且仅在 <reference internal="True" refuri="class_time#class-time"><inline classes="std std-ref">Time</inline></reference> 类中可用。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="操作系统测试演示" refuri="https://godotengine.org/asset-library/asset/2789">操作系统测试演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="99"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-property-delta-smoothing"><inline classes="std std-ref">delta_smoothing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-property-low-processor-usage-mode"><inline classes="std std-ref">low_processor_usage_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-property-low-processor-usage-mode-sleep-usec"><inline classes="std std-ref">low_processor_usage_mode_sleep_usec</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>6900</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="381"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-alert"><inline classes="std std-ref">alert</inline></reference>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "Alert!")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-close-midi-inputs"><inline classes="std std-ref">close_midi_inputs</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-crash"><inline classes="std std-ref">crash</inline></reference>(message: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-create-instance"><inline classes="std std-ref">create_instance</inline></reference>(arguments: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-create-process"><inline classes="std std-ref">create_process</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, arguments: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, open_console: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-delay-msec"><inline classes="std std-ref">delay_msec</inline></reference>(msec: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-delay-usec"><inline classes="std std-ref">delay_usec</inline></reference>(usec: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-execute"><inline classes="std std-ref">execute</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, arguments: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, output: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = [], read_stderr: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, open_console: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-execute-with-pipe"><inline classes="std std-ref">execute_with_pipe</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, arguments: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-find-keycode-from-string"><inline classes="std std-ref">find_keycode_from_string</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-cache-dir"><inline classes="std std-ref">get_cache_dir</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-cmdline-args"><inline classes="std std-ref">get_cmdline_args</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-cmdline-user-args"><inline classes="std std-ref">get_cmdline_user_args</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-config-dir"><inline classes="std std-ref">get_config_dir</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-connected-midi-inputs"><inline classes="std std-ref">get_connected_midi_inputs</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-data-dir"><inline classes="std std-ref">get_data_dir</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-distribution-name"><inline classes="std std-ref">get_distribution_name</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-entropy"><inline classes="std std-ref">get_entropy</inline></reference>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-environment"><inline classes="std std-ref">get_environment</inline></reference>(variable: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-executable-path"><inline classes="std std-ref">get_executable_path</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-granted-permissions"><inline classes="std std-ref">get_granted_permissions</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-keycode-string"><inline classes="std std-ref">get_keycode_string</inline></reference>(code: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-locale"><inline classes="std std-ref">get_locale</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-locale-language"><inline classes="std std-ref">get_locale_language</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-main-thread-id"><inline classes="std std-ref">get_main_thread_id</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-memory-info"><inline classes="std std-ref">get_memory_info</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-model-name"><inline classes="std std-ref">get_model_name</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-name"><inline classes="std std-ref">get_name</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-process-exit-code"><inline classes="std std-ref">get_process_exit_code</inline></reference>(pid: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-process-id"><inline classes="std std-ref">get_process_id</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-processor-count"><inline classes="std std-ref">get_processor_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-processor-name"><inline classes="std std-ref">get_processor_name</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-restart-on-exit-arguments"><inline classes="std std-ref">get_restart_on_exit_arguments</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-static-memory-peak-usage"><inline classes="std std-ref">get_static_memory_peak_usage</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-static-memory-usage"><inline classes="std std-ref">get_static_memory_usage</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-system-ca-certificates"><inline classes="std std-ref">get_system_ca_certificates</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-system-dir"><inline classes="std std-ref">get_system_dir</inline></reference>(dir: <reference internal="True" refid="enum-os-systemdir"><inline classes="std std-ref">SystemDir</inline></reference>, shared_storage: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-system-font-path"><inline classes="std std-ref">get_system_font_path</inline></reference>(font_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, weight: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 400, stretch: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 100, italic: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-system-font-path-for-text"><inline classes="std std-ref">get_system_font_path_for_text</inline></reference>(font_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", weight: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 400, stretch: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 100, italic: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-system-fonts"><inline classes="std std-ref">get_system_fonts</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-thread-caller-id"><inline classes="std std-ref">get_thread_caller_id</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-unique-id"><inline classes="std std-ref">get_unique_id</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-user-data-dir"><inline classes="std std-ref">get_user_data_dir</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-version"><inline classes="std std-ref">get_version</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-get-video-adapter-driver-info"><inline classes="std std-ref">get_video_adapter_driver_info</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-has-environment"><inline classes="std std-ref">has_environment</inline></reference>(variable: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-has-feature"><inline classes="std std-ref">has_feature</inline></reference>(tag_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-is-debug-build"><inline classes="std std-ref">is_debug_build</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-is-keycode-unicode"><inline classes="std std-ref">is_keycode_unicode</inline></reference>(code: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-is-process-running"><inline classes="std std-ref">is_process_running</inline></reference>(pid: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-is-restart-on-exit-set"><inline classes="std std-ref">is_restart_on_exit_set</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-is-sandboxed"><inline classes="std std-ref">is_sandboxed</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-is-stdout-verbose"><inline classes="std std-ref">is_stdout_verbose</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-is-userfs-persistent"><inline classes="std std-ref">is_userfs_persistent</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-kill"><inline classes="std std-ref">kill</inline></reference>(pid: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-move-to-trash"><inline classes="std std-ref">move_to_trash</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-open-midi-inputs"><inline classes="std std-ref">open_midi_inputs</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-read-string-from-stdin"><inline classes="std std-ref">read_string_from_stdin</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-request-permission"><inline classes="std std-ref">request_permission</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-request-permissions"><inline classes="std std-ref">request_permissions</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-revoke-granted-permissions"><inline classes="std std-ref">revoke_granted_permissions</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-set-environment"><inline classes="std std-ref">set_environment</inline></reference>(variable: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-set-restart-on-exit"><inline classes="std std-ref">set_restart_on_exit</inline></reference>(restart: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, arguments: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> = PackedStringArray())</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-set-thread-name"><inline classes="std std-ref">set_thread_name</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-set-use-file-access-save-and-swap"><inline classes="std std-ref">set_use_file_access_save_and_swap</inline></reference>(enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-shell-open"><inline classes="std std-ref">shell_open</inline></reference>(uri: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-shell-show-in-file-manager"><inline classes="std std-ref">shell_show_in_file_manager</inline></reference>(file_or_dir_path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, open_folder: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-os-method-unset-environment"><inline classes="std std-ref">unset_environment</inline></reference>(variable: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-os-renderingdriver"></target>
            <paragraph classes="classref-enumeration" ids="enum-os-renderingdriver" names="enum_os_renderingdriver">enum <strong>RenderingDriver</strong>: <reference internal="True" refid="enum-os-renderingdriver"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-os-constant-rendering-driver-vulkan"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-os-constant-rendering-driver-vulkan" names="class_os_constant_rendering_driver_vulkan"><reference internal="True" refid="enum-os-renderingdriver"><inline classes="std std-ref">RenderingDriver</inline></reference> <strong>RENDERING_DRIVER_VULKAN</strong> = <literal>0</literal></paragraph>
            <paragraph>Vulkan 渲染驱动。需要支持 Vulkan 1.0，而 Vulkan 1.1 和 1.2 的功能则会在支持时自动使用。</paragraph>
            <target refid="class-os-constant-rendering-driver-opengl3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-os-constant-rendering-driver-opengl3" names="class_os_constant_rendering_driver_opengl3"><reference internal="True" refid="enum-os-renderingdriver"><inline classes="std std-ref">RenderingDriver</inline></reference> <strong>RENDERING_DRIVER_OPENGL3</strong> = <literal>1</literal></paragraph>
            <paragraph>OpenGL 3 渲染驱动。在桌面平台上使用 OpenGL 3.3 核心配置，在移动设备上使用 OpenGL ES 3.0，在 Web 上使用 WebGL 2.0。</paragraph>
            <target refid="class-os-constant-rendering-driver-d3d12"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-os-constant-rendering-driver-d3d12" names="class_os_constant_rendering_driver_d3d12"><reference internal="True" refid="enum-os-renderingdriver"><inline classes="std std-ref">RenderingDriver</inline></reference> <strong>RENDERING_DRIVER_D3D12</strong> = <literal>2</literal></paragraph>
            <paragraph>Direct3D 12 渲染驱动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-os-systemdir"></target>
            <paragraph classes="classref-enumeration" ids="enum-os-systemdir" names="enum_os_systemdir">enum <strong>SystemDir</strong>: <reference internal="True" refid="enum-os-systemdir"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-os-constant-system-dir-desktop"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-os-constant-system-dir-desktop" names="class_os_constant_system_dir_desktop"><reference internal="True" refid="enum-os-systemdir"><inline classes="std std-ref">SystemDir</inline></reference> <strong>SYSTEM_DIR_DESKTOP</strong> = <literal>0</literal></paragraph>
            <paragraph>指桌面目录路径。</paragraph>
            <target refid="class-os-constant-system-dir-dcim"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-os-constant-system-dir-dcim" names="class_os_constant_system_dir_dcim"><reference internal="True" refid="enum-os-systemdir"><inline classes="std std-ref">SystemDir</inline></reference> <strong>SYSTEM_DIR_DCIM</strong> = <literal>1</literal></paragraph>
            <paragraph>指 DCIM（数码相机图像）目录路径。</paragraph>
            <target refid="class-os-constant-system-dir-documents"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-os-constant-system-dir-documents" names="class_os_constant_system_dir_documents"><reference internal="True" refid="enum-os-systemdir"><inline classes="std std-ref">SystemDir</inline></reference> <strong>SYSTEM_DIR_DOCUMENTS</strong> = <literal>2</literal></paragraph>
            <paragraph>指文档目录路径。</paragraph>
            <target refid="class-os-constant-system-dir-downloads"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-os-constant-system-dir-downloads" names="class_os_constant_system_dir_downloads"><reference internal="True" refid="enum-os-systemdir"><inline classes="std std-ref">SystemDir</inline></reference> <strong>SYSTEM_DIR_DOWNLOADS</strong> = <literal>3</literal></paragraph>
            <paragraph>指下载目录路径。</paragraph>
            <target refid="class-os-constant-system-dir-movies"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-os-constant-system-dir-movies" names="class_os_constant_system_dir_movies"><reference internal="True" refid="enum-os-systemdir"><inline classes="std std-ref">SystemDir</inline></reference> <strong>SYSTEM_DIR_MOVIES</strong> = <literal>4</literal></paragraph>
            <paragraph>指电影（或视频）目录路径。</paragraph>
            <target refid="class-os-constant-system-dir-music"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-os-constant-system-dir-music" names="class_os_constant_system_dir_music"><reference internal="True" refid="enum-os-systemdir"><inline classes="std std-ref">SystemDir</inline></reference> <strong>SYSTEM_DIR_MUSIC</strong> = <literal>5</literal></paragraph>
            <paragraph>指音乐目录路径。</paragraph>
            <target refid="class-os-constant-system-dir-pictures"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-os-constant-system-dir-pictures" names="class_os_constant_system_dir_pictures"><reference internal="True" refid="enum-os-systemdir"><inline classes="std std-ref">SystemDir</inline></reference> <strong>SYSTEM_DIR_PICTURES</strong> = <literal>6</literal></paragraph>
            <paragraph>指图片目录路径。</paragraph>
            <target refid="class-os-constant-system-dir-ringtones"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-os-constant-system-dir-ringtones" names="class_os_constant_system_dir_ringtones"><reference internal="True" refid="enum-os-systemdir"><inline classes="std std-ref">SystemDir</inline></reference> <strong>SYSTEM_DIR_RINGTONES</strong> = <literal>7</literal></paragraph>
            <paragraph>指铃声目录路径。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-os-property-delta-smoothing"></target>
            <paragraph classes="classref-property" ids="class-os-property-delta-smoothing" names="class_os_property_delta_smoothing"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>delta_smoothing</strong> = <literal>true</literal> <reference internal="True" refid="class-os-property-delta-smoothing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_delta_smoothing</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_delta_smoothing_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则引擎会在每帧之间过滤测量得到的时间增量，并尝试补偿随机变化。这仅适用于垂直同步处于活动状态的系统。</paragraph>
            <paragraph><strong>注意：</strong>启动时，这与 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-application-run-delta-smoothing"><inline classes="std std-ref">ProjectSettings.application/run/delta_smoothing</inline></reference> 相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-property-low-processor-usage-mode"></target>
            <paragraph classes="classref-property" ids="class-os-property-low-processor-usage-mode" names="class_os_property_low_processor_usage_mode"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>low_processor_usage_mode</strong> = <literal>false</literal> <reference internal="True" refid="class-os-property-low-processor-usage-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_low_processor_usage_mode</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_in_low_processor_usage_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则引擎会通过只在需要时刷新屏幕来优化处理器的使用。可以改善移动设备上的电池消耗。</paragraph>
            <paragraph><strong>注意：</strong>启动时，这与 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-application-run-low-processor-mode"><inline classes="std std-ref">ProjectSettings.application/run/low_processor_mode</inline></reference> 相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-property-low-processor-usage-mode-sleep-usec"></target>
            <paragraph classes="classref-property" ids="class-os-property-low-processor-usage-mode-sleep-usec" names="class_os_property_low_processor_usage_mode_sleep_usec"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>low_processor_usage_mode_sleep_usec</strong> = <literal>6900</literal> <reference internal="True" refid="class-os-property-low-processor-usage-mode-sleep-usec"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_low_processor_usage_mode_sleep_usec</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_low_processor_usage_mode_sleep_usec</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>启用低处理器使用模式时帧之间的睡眠时间，以微秒为单位。更高的值将导致更低的 CPU 使用率。另请参阅 <reference internal="True" refid="class-os-property-low-processor-usage-mode"><inline classes="std std-ref">low_processor_usage_mode</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>启动时，这与 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-application-run-low-processor-mode-sleep-usec"><inline classes="std std-ref">ProjectSettings.application/run/low_processor_mode_sleep_usec</inline></reference> 相同。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-os-method-alert"></target>
            <paragraph classes="classref-method" ids="class-os-method-alert" names="class_os_method_alert"><abbreviation explanation="无返回值。">void</abbreviation> <strong>alert</strong>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "Alert!") <reference internal="True" refid="class-os-method-alert"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用主机平台的实现显示一个模式对话框。引擎执行将被阻塞，直到该对话框被关闭。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-close-midi-inputs"></target>
            <paragraph classes="classref-method" ids="class-os-method-close-midi-inputs" names="class_os_method_close_midi_inputs"><abbreviation explanation="无返回值。">void</abbreviation> <strong>close_midi_inputs</strong>() <reference internal="True" refid="class-os-method-close-midi-inputs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>关闭系统 MIDI 驱动程序。Godot 将不再接收 <reference internal="True" refuri="class_inputeventmidi#class-inputeventmidi"><inline classes="std std-ref">InputEventMIDI</inline></reference>。另请参阅 <reference internal="True" refid="class-os-method-open-midi-inputs"><inline classes="std std-ref">open_midi_inputs</inline></reference> 和 <reference internal="True" refid="class-os-method-get-connected-midi-inputs"><inline classes="std std-ref">get_connected_midi_inputs</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Linux、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-crash"></target>
            <paragraph classes="classref-method" ids="class-os-method-crash" names="class_os_method_crash"><abbreviation explanation="无返回值。">void</abbreviation> <strong>crash</strong>(message: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-os-method-crash"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使引擎崩溃（如果在 <literal>@tool</literal> 脚本中调用，则使编辑器崩溃）。另请参阅 <reference internal="True" refid="class-os-method-kill"><inline classes="std std-ref">kill</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法应该<emphasis>仅</emphasis>用于测试系统的崩溃处理器，而不用于任何其他目的。对于一般错误报告，请使用（按优先顺序）<reference internal="True" refuri="class_@gdscript#class-gdscript-method-assert"><inline classes="std std-ref">@GDScript.assert</inline></reference>、<reference internal="True" refuri="class_@globalscope#class-globalscope-method-push-error"><inline classes="std std-ref">@GlobalScope.push_error</inline></reference>、<reference internal="True" refid="class-os-method-alert"><inline classes="std std-ref">alert</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-create-instance"></target>
            <paragraph classes="classref-method" ids="class-os-method-create-instance" names="class_os_method_create_instance"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>create_instance</strong>(arguments: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <reference internal="True" refid="class-os-method-create-instance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个独立运行的 Godot 新实例。<literal>arguments</literal> 按给定顺序使用，并以空格分隔。</paragraph>
            <paragraph>如果进程创建成功，则该方法将返回新的进程 ID，可以使用它来监视该进程（并可能使用 <reference internal="True" refid="class-os-method-kill"><inline classes="std std-ref">kill</inline></reference> 终止它）。如果进程无法创建，则该方法将返回 <literal>-1</literal>。</paragraph>
            <paragraph>如果你希望运行不同的进程，请参阅 <reference internal="True" refid="class-os-method-create-process"><inline classes="std std-ref">create_process</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、Linux、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-create-process"></target>
            <paragraph classes="classref-method" ids="class-os-method-create-process" names="class_os_method_create_process"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>create_process</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, arguments: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, open_console: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-os-method-create-process"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个独立于 Godot 运行的新进程。Godot 终止时它也不会终止。<literal>path</literal> 中指定的路径必须存在，并且是可执行文件或 macOS 的 <literal>.app</literal> 捆绑包。将使用平台路径解析。<literal>arguments</literal> 按给定顺序使用，并以空格分隔。</paragraph>
            <paragraph>在 Windows 上，如果 <literal>open_console</literal> 为 <literal>true</literal> 并且该进程是一个控制台应用程序，则会打开新的终端窗口。</paragraph>
            <paragraph>如果进程创建成功，则该方法将返回新的进程 ID，可以用来监视进程（也可以通过 <reference internal="True" refid="class-os-method-kill"><inline classes="std std-ref">kill</inline></reference> 来终止进程）。否则该方法返回 <literal>-1</literal>。</paragraph>
            <paragraph>例如运行当前项目的另一个实例：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var pid = OS.create_process(OS.get_executable_path(), [])</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var pid = OS.CreateProcess(OS.GetExecutablePath(), new string[] {});</literal_block>
                </div>
            </container>
            <paragraph>如果希望运行外部命令并获取结果，请参阅 <reference internal="True" refid="class-os-method-execute"><inline classes="std std-ref">execute</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、Linux、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，沙盒应用程序被限制为只能运行嵌入式辅助可执行文件，在导出或系统 .app 捆绑包期间指定，系统 .app 捆绑包将忽略参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-delay-msec"></target>
            <paragraph classes="classref-method" ids="class-os-method-delay-msec" names="class_os_method_delay_msec"><abbreviation explanation="无返回值。">void</abbreviation> <strong>delay_msec</strong>(msec: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-delay-msec"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将当前线程的执行延迟 <literal>msec</literal> 毫秒。<literal>msec</literal> 必须大于或等于 <literal>0</literal>。否则，<reference internal="True" refid="class-os-method-delay-msec"><inline classes="std std-ref">delay_msec</inline></reference> 不执行任何操作并打印一条错误消息。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-os-method-delay-msec"><inline classes="std std-ref">delay_msec</inline></reference> 是一种<emphasis>阻塞</emphasis>延迟代码执行的方式。要以非阻塞的方式延迟代码执行，请参阅 <reference internal="True" refuri="class_scenetree#class-scenetree-method-create-timer"><inline classes="std std-ref">SceneTree.create_timer</inline></reference>。使用 <reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer"><inline classes="std std-ref">SceneTreeTimer</inline></reference> 等待会延迟位于 <literal>await</literal> 下方的代码的执行，而不会影响该项目（或编辑器，对于 <reference internal="True" refuri="class_editorplugin#class-editorplugin"><inline classes="std std-ref">EditorPlugin</inline></reference> 和 <reference internal="True" refuri="class_editorscript#class-editorscript"><inline classes="std std-ref">EditorScript</inline></reference>）的其余部分。</paragraph>
            <paragraph><strong>注意：</strong>当在主线程上调用 <reference internal="True" refid="class-os-method-delay-msec"><inline classes="std std-ref">delay_msec</inline></reference> 时，它将冻结项目并阻止它重新绘制和注册输入，直到延迟结束。当使用 <reference internal="True" refid="class-os-method-delay-msec"><inline classes="std std-ref">delay_msec</inline></reference> 作为 <reference internal="True" refuri="class_editorplugin#class-editorplugin"><inline classes="std std-ref">EditorPlugin</inline></reference> 或 <reference internal="True" refuri="class_editorscript#class-editorscript"><inline classes="std std-ref">EditorScript</inline></reference> 的一部分时，它会冻结编辑器但不会冻结当前正在运行的项目（因为项目是一个独立的子进程）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-delay-usec"></target>
            <paragraph classes="classref-method" ids="class-os-method-delay-usec" names="class_os_method_delay_usec"><abbreviation explanation="无返回值。">void</abbreviation> <strong>delay_usec</strong>(usec: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-delay-usec"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将当前线程的执行延迟 <literal>usec</literal> 微秒。<literal>usec</literal> 必须大于或等于 <literal>0</literal>。否则，<reference internal="True" refid="class-os-method-delay-usec"><inline classes="std std-ref">delay_usec</inline></reference> 不执行任何操作并打印一条错误消息。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-os-method-delay-usec"><inline classes="std std-ref">delay_usec</inline></reference> 是一种<emphasis>阻塞</emphasis>延迟代码执行的方式。要以非阻塞的方式延迟代码执行，请参阅 <reference internal="True" refuri="class_scenetree#class-scenetree-method-create-timer"><inline classes="std std-ref">SceneTree.create_timer</inline></reference>。使用 <reference internal="True" refuri="class_scenetreetimer#class-scenetreetimer"><inline classes="std std-ref">SceneTreeTimer</inline></reference> 等待会延迟放置在 <literal>await</literal> 下方的代码的执行，而不会影响该项目（或编辑器，对于 <reference internal="True" refuri="class_editorplugin#class-editorplugin"><inline classes="std std-ref">EditorPlugin</inline></reference> 和 <reference internal="True" refuri="class_editorscript#class-editorscript"><inline classes="std std-ref">EditorScript</inline></reference>）的其余部分。</paragraph>
            <paragraph><strong>注意：</strong>当在主线程上调用 <reference internal="True" refid="class-os-method-delay-usec"><inline classes="std std-ref">delay_usec</inline></reference> 时，它将冻结项目并阻止它重新绘制和注册输入，直到延迟结束。当使用 <reference internal="True" refid="class-os-method-delay-usec"><inline classes="std std-ref">delay_usec</inline></reference> 作为 <reference internal="True" refuri="class_editorplugin#class-editorplugin"><inline classes="std std-ref">EditorPlugin</inline></reference> 或 <reference internal="True" refuri="class_editorscript#class-editorscript"><inline classes="std std-ref">EditorScript</inline></reference> 的一部分时，它会冻结编辑器但不会冻结当前正在运行的项目（因为项目是一个独立的子进程）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-execute"></target>
            <paragraph classes="classref-method" ids="class-os-method-execute" names="class_os_method_execute"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>execute</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, arguments: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, output: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = [], read_stderr: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, open_console: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-os-method-execute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以<emphasis>阻塞</emphasis>方式执行给定进程。<literal>path</literal> 中指定的文件必须存在且可执行。将使用系统路径解析。<literal>arguments</literal> 按给定顺序使用，用空格分隔，并用引号包裹。</paragraph>
            <paragraph>如果提供了 <literal>output</literal> 数组，则进程的完整 shell 输出，将作为单个 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 元素被追加到 <literal>output</literal>。如果 <literal>read_stderr</literal> 为 <literal>true</literal>，则标准错误流的输出也会被追加到数组中。</paragraph>
            <paragraph>在 Windows 上，如果 <literal>open_console</literal> 为 <literal>true</literal> 并且进程是控制台应用程序，则会打开一个新的终端窗口。</paragraph>
            <paragraph>该方法返回命令的退出代码，如果进程执行失败，则返回 <literal>-1</literal>。</paragraph>
            <paragraph><strong>注意：</strong>主线程将被阻塞，直到执行的命令终止。使用 <reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference> 创建一个不会阻塞主线程的独立线程，或者使用 <reference internal="True" refid="class-os-method-create-process"><inline classes="std std-ref">create_process</inline></reference> 创建一个完全独立的进程。</paragraph>
            <paragraph>例如，要检索工作目录内容的列表：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var output = []
var exit_code = OS.execute("ls", ["-l", "/tmp"], output)</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var output = new Godot.Collections.Array();
int exitCode = OS.Execute("ls", new string[] {"-l", "/tmp"}, output);</literal_block>
                </div>
            </container>
            <paragraph>如果希望访问内置的 shell 或执行复合命令，则可以调用特定于平台的 shell。例如：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var output = []
OS.execute("CMD.exe", ["/C", "cd %TEMP% &amp;&amp; dir"], output)</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var output = new Godot.Collections.Array();
OS.Execute("CMD.exe", new string[] {"/C", "cd %TEMP% &amp;&amp; dir"}, output);</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>该方法在 Android、Linux、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>要执行 Windows 命令解释器的内置命令，在 <literal>path</literal> 中指定 <literal>cmd.exe</literal>，将 <literal>/c</literal> 作为第一个参数，并将所需的命令作为第二个参数。</paragraph>
            <paragraph><strong>注意：</strong>要执行 PowerShell 的内置命令，在 <literal>path</literal> 中指定 <literal>powershell.exe</literal>，将 <literal>-Command</literal> 作为第一个参数，然后将所需的命令作为第二个参数。</paragraph>
            <paragraph><strong>注意：</strong>要执行 Unix shell 内置命令，请在 <literal>path</literal> 中指定 shell 可执行文件名称，将 <literal>-c</literal> 作为第一个参数，并将所需的命令作为第二个参数。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，沙盒应用程序仅限于运行在导出期间指定的嵌入的辅助可执行文件。</paragraph>
            <paragraph><strong>注意：</strong>在 Android 上，<literal>dumpsys</literal> 等系统命令只能在 root 设备上运行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-execute-with-pipe"></target>
            <paragraph classes="classref-method" ids="class-os-method-execute-with-pipe" names="class_os_method_execute_with_pipe"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>execute_with_pipe</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, arguments: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <reference internal="True" refid="class-os-method-execute-with-pipe"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个独立于 Godot 运行的新进程并重定向 IO。Godot 终止时它也不会终止。<literal>path</literal> 中指定的路径必须存在，并且是可执行文件或 macOS 的 <literal>.app</literal> 捆绑包。将使用平台路径解析。<literal>arguments</literal> 按给定顺序使用，并以空格分隔。</paragraph>
            <paragraph>如果无法创建进程，则该方法返回空的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>。否则该方法会返回一个 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>，包含以下字段：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>"stdio"</literal> - 用于访问进程 stdin 和 stdout 管道的 <reference internal="True" refuri="class_fileaccess#class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference>（读写）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>"stderr"</literal> - 用于访问进程 stderr 管道的 <reference internal="True" refuri="class_fileaccess#class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference>（只读）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>"pid"</literal> - <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 形式的进程 ID，可以用来监视进程（也可以通过 <reference internal="True" refid="class-os-method-kill"><inline classes="std std-ref">kill</inline></reference> 来终止进程）。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>注意：</strong>该方法在 Android、Linux、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>如果要执行 Windows 命令解释器的内置命令，请在 <literal>path</literal> 中指定 <literal>cmd.exe</literal>，使用 <literal>/c</literal> 作为第一个参数并将所需的命令作为第二个参数。</paragraph>
            <paragraph><strong>注意：</strong>如果要执行 PowerShell 的内置命令，请在 <literal>path</literal> 中指定 <literal>powershell.exe</literal>，使用 <literal>-Command</literal> 作为第一个参数并将所需的命令作为第二个参数。</paragraph>
            <paragraph><strong>注意：</strong>如果要执行 Unix Shell 的内置命令，请在 <literal>path</literal> 中指定 shell 可执行文件的名称，使用 <literal>-c</literal> 作为第一个参数并将所需的命令作为第二个参数。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，沙盒应用程序被限制为只能运行嵌入式辅助可执行文件，在导出或系统 .app 捆绑包期间指定，系统 .app 捆绑包将忽略参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-find-keycode-from-string"></target>
            <paragraph classes="classref-method" ids="class-os-method-find-keycode-from-string" names="class_os_method_find_keycode_from_string"><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>find_keycode_from_string</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-find-keycode-from-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查找给定字符串对应的键码。返回值等价于 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 常量。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">print(OS.find_keycode_from_string("C"))         # 输出 67 (KEY_C)
print(OS.find_keycode_from_string("Escape"))    # 输出 4194305 (KEY_ESCAPE)
print(OS.find_keycode_from_string("Shift+Tab")) # 输出 37748738 (KEY_MASK_SHIFT | KEY_TAB)
print(OS.find_keycode_from_string("Unknown"))   # 输出 0 (KEY_NONE)</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.Print(OS.FindKeycodeFromString("C"));         // 输出 C (Key.C)
GD.Print(OS.FindKeycodeFromString("Escape"));    // 输出 Escape (Key.Escape)
GD.Print(OS.FindKeycodeFromString("Shift+Tab")); // 输出 37748738 (KeyModifierMask.MaskShift | Key.Tab)
GD.Print(OS.FindKeycodeFromString("Unknown"));   // 输出 None (Key.None)</literal_block>
                </div>
            </container>
            <paragraph>另见 <reference internal="True" refid="class-os-method-get-keycode-string"><inline classes="std std-ref">get_keycode_string</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-cache-dir"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-cache-dir" names="class_os_method_get_cache_dir"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_cache_dir</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-cache-dir"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据操作系统的标准返回<emphasis>全局</emphasis>缓存数据目录。</paragraph>
            <paragraph>在 Linux/BSD 平台上，可以通过在启动项目之前设置 <literal>XDG_CACHE_HOME</literal> 环境变量来覆盖该路径。有关详细信息，请参阅文档中的<reference internal="True" refuri="../tutorials/io/data_paths"><inline classes="doc">《Godot 项目中的文件路径》</inline></reference>。另请参阅 <reference internal="True" refid="class-os-method-get-config-dir"><inline classes="std std-ref">get_config_dir</inline></reference> 和 <reference internal="True" refid="class-os-method-get-data-dir"><inline classes="std std-ref">get_data_dir</inline></reference>。</paragraph>
            <paragraph>不要与 <reference internal="True" refid="class-os-method-get-user-data-dir"><inline classes="std std-ref">get_user_data_dir</inline></reference> 混淆，后者返回<emphasis>项目特定的</emphasis>用户数据路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-cmdline-args"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-cmdline-args" names="class_os_method_get_cmdline_args"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_cmdline_args</strong>() <reference internal="True" refid="class-os-method-get-cmdline-args"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回传递给引擎的命令行参数。</paragraph>
            <paragraph>命令行参数可以写成任何形式，包括 <literal>--key value</literal> 和 <literal>--key=value</literal> 两种形式，这样它们就可以被正确解析，只要自定义命令行参数不与引擎参数冲突。</paragraph>
            <paragraph>还可以使用 <reference internal="True" refid="class-os-method-get-environment"><inline classes="std std-ref">get_environment</inline></reference> 方法合并环境变量。</paragraph>
            <paragraph>可以设置 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-editor-run-main-run-args"><inline classes="std std-ref">ProjectSettings.editor/run/main_run_args</inline></reference> 来定义编辑器在运行项目时传递的命令行参数。</paragraph>
            <paragraph>下面是一个关于如何使用参数的 <literal>--key=value</literal> 形式，将命令行参数解析为一个 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 的最小示例：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var arguments = {}
for argument in OS.get_cmdline_args():
    if argument.contains("="):
        var key_value = argument.split("=")
        arguments[key_value[0].trim_prefix("--")] = key_value[1]
    else:
        # 没有参数的选项将出现在字典中，
        # 其值被设置为空字符串。
        arguments[argument.trim_prefix("--")] = ""</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var arguments = new Dictionary&lt;string, string&gt;();
foreach (var argument in OS.GetCmdlineArgs())
{
    if (argument.Contains('='))
    {
        string[] keyValue = argument.Split("=");
        arguments[keyValue[0].TrimPrefix("--")] = keyValue[1];
    }
    else
    {
        // 没有参数的选项将出现在字典中，
        // 其值被设置为空字符串。
        arguments[argument.TrimPrefix("--")] = "";
    }
}</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>不建议直接传递自定义用户参数，因为引擎可能会丢弃或修改它们。相反，传递标准的 UNIX 双破折号（<literal>--</literal>），然后传递自定义参数，引擎将根据设计忽略这些参数。这些可以通过 <reference internal="True" refid="class-os-method-get-cmdline-user-args"><inline classes="std std-ref">get_cmdline_user_args</inline></reference> 读取。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-cmdline-user-args"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-cmdline-user-args" names="class_os_method_get_cmdline_user_args"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_cmdline_user_args</strong>() <reference internal="True" refid="class-os-method-get-cmdline-user-args"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回传递给引擎的命令行用户参数。引擎不会使用用户参数，用户可以自由指定。用户参数在双横杠 <literal>--</literal> 之后指定。如果其他程序会拦截 <literal>--</literal>（例如 <literal>startx</literal>），那么也可以使用 <literal>++</literal>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># Godot 使用以下命令执行：
# godot --fullscreen -- --level=2 --hardcore

OS.get_cmdline_args()      # 返回 ["--fullscreen", "--level=2", "--hardcore"]
OS.get_cmdline_user_args() # 返回 ["--level=2", "--hardcore"]</literal_block>
            <paragraph>要获取传递的所有参数，请使用 <reference internal="True" refid="class-os-method-get-cmdline-args"><inline classes="std std-ref">get_cmdline_args</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-config-dir"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-config-dir" names="class_os_method_get_config_dir"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_config_dir</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-config-dir"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据操作系统的标准，返回<emphasis>全局</emphasis>用户配置目录。</paragraph>
            <paragraph>在 Linux/BSD 平台上，可以通过在启动项目之前设置 <literal>XDG_CONFIG_HOME</literal> 环境变量来覆盖该路径。有关详细信息，请参阅文档中的<reference internal="True" refuri="../tutorials/io/data_paths"><inline classes="doc">《Godot 项目中的文件路径》</inline></reference>。另请参阅 <reference internal="True" refid="class-os-method-get-cache-dir"><inline classes="std std-ref">get_cache_dir</inline></reference> 和 <reference internal="True" refid="class-os-method-get-data-dir"><inline classes="std std-ref">get_data_dir</inline></reference>。</paragraph>
            <paragraph>不要与 <reference internal="True" refid="class-os-method-get-user-data-dir"><inline classes="std std-ref">get_user_data_dir</inline></reference> 混淆，后者返回<emphasis>项目专用的</emphasis>用户数据路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-connected-midi-inputs"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-connected-midi-inputs" names="class_os_method_get_connected_midi_inputs"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_connected_midi_inputs</strong>() <reference internal="True" refid="class-os-method-get-connected-midi-inputs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果连接的 MIDI 设备名称存在，则返回它们的数组。如果系统 MIDI 驱动程序之前尚未使用 <reference internal="True" refid="class-os-method-open-midi-inputs"><inline classes="std std-ref">open_midi_inputs</inline></reference> 进行初始化，则返回一个空数组。另请参阅 <reference internal="True" refid="class-os-method-close-midi-inputs"><inline classes="std std-ref">close_midi_inputs</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Linux、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-data-dir"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-data-dir" names="class_os_method_get_data_dir"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_data_dir</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-data-dir"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据操作系统的标准返回<emphasis>全局</emphasis>用户数据目录。</paragraph>
            <paragraph>在 Linux/BSD 平台上，可以通过在启动项目之前设置 <literal>XDG_DATA_HOME</literal> 环境变量来覆盖该路径。有关详细信息，请参阅文档中的<reference internal="True" refuri="../tutorials/io/data_paths"><inline classes="doc">《Godot 项目中的文件路径》</inline></reference>。另请参阅 <reference internal="True" refid="class-os-method-get-cache-dir"><inline classes="std std-ref">get_cache_dir</inline></reference> 和 <reference internal="True" refid="class-os-method-get-config-dir"><inline classes="std std-ref">get_config_dir</inline></reference>。</paragraph>
            <paragraph>不要与 <reference internal="True" refid="class-os-method-get-user-data-dir"><inline classes="std std-ref">get_user_data_dir</inline></reference> 混淆，后者返回<emphasis>项目专用的</emphasis>用户数据路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-distribution-name"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-distribution-name" names="class_os_method_get_distribution_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_distribution_name</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-distribution-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 Linux 和 BSD 平台的发行版名称（例如 “Ubuntu”、“Manjaro”、“OpenBSD” 等）。</paragraph>
            <paragraph>对于原生 Android 系统，返回与 <reference internal="True" refid="class-os-method-get-name"><inline classes="std std-ref">get_name</inline></reference> 相同的值，但对于 “LineageOS” 等流行的 Android 派生系统，尝试返回自定义 ROM 名称。</paragraph>
            <paragraph>对于其他平台，返回与 <reference internal="True" refid="class-os-method-get-name"><inline classes="std std-ref">get_name</inline></reference> 相同的值。</paragraph>
            <paragraph><strong>注意：</strong>Web 平台上不支持这个方法。返回的是空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-entropy"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-entropy" names="class_os_method_get_entropy"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_entropy</strong>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-os-method-get-entropy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Generates a <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> of cryptographically secure random bytes with given <literal>size</literal>.</paragraph>
            <paragraph><strong>Note:</strong> Generating large quantities of bytes using this method can result in locking and entropy of lower quality on most platforms. Using <reference internal="True" refuri="class_crypto#class-crypto-method-generate-random-bytes"><inline classes="std std-ref">Crypto.generate_random_bytes</inline></reference> is preferred in most cases.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-environment"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-environment" names="class_os_method_get_environment"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_environment</strong>(variable: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-environment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定环境变量的值，如果 <literal>variable</literal> 不存在，则返回一串空字符串。</paragraph>
            <paragraph><strong>注意：</strong>请仔细检查 <literal>variable</literal> 的大小写。环境变量名称在除 Windows 之外的所有平台上都区分大小写。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，应用程序无权访问 shell 环境变量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-executable-path"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-executable-path" names="class_os_method_get_executable_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_executable_path</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-executable-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the file path to the current engine executable.</paragraph>
            <paragraph><strong>Note:</strong> On macOS, if you want to launch another instance of Godot, always use <reference internal="True" refid="class-os-method-create-instance"><inline classes="std std-ref">create_instance</inline></reference> instead of relying on the executable path.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-granted-permissions"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-granted-permissions" names="class_os_method_get_granted_permissions"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_granted_permissions</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-granted-permissions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 Android 设备上：返回已授予的危险权限列表。</paragraph>
            <paragraph>在 macOS 上：返回应用程序可访问的用户选择的文件夹列表（仅限沙盒应用程序）。使用原生文件对话框请求文件夹访问权限。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-keycode-string"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-keycode-string" names="class_os_method_get_keycode_string"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_keycode_string</strong>(code: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-keycode-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 的形式返回给定的键码。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">print(OS.get_keycode_string(KEY_C))                    # 输出 "C"
print(OS.get_keycode_string(KEY_ESCAPE))               # 输出 "Escape"
print(OS.get_keycode_string(KEY_MASK_SHIFT | KEY_TAB)) # 输出 "Shift+Tab"</literal_block>
                </div>
                <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.Print(OS.GetKeycodeString(Key.C));                                    // 输出 "C"
GD.Print(OS.GetKeycodeString(Key.Escape));                               // 输出 "Escape"
GD.Print(OS.GetKeycodeString((Key)KeyModifierMask.MaskShift | Key.Tab)); // 输出 "Shift+Tab"</literal_block>
                </div>
            </container>
            <paragraph>另见 <reference internal="True" refid="class-os-method-find-keycode-from-string"><inline classes="std std-ref">find_keycode_from_string</inline></reference>、<reference internal="True" refuri="class_inputeventkey#class-inputeventkey-property-keycode"><inline classes="std std-ref">InputEventKey.keycode</inline></reference>、<reference internal="True" refuri="class_inputeventkey#class-inputeventkey-method-get-keycode-with-modifiers"><inline classes="std std-ref">InputEventKey.get_keycode_with_modifiers</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-locale"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-locale" names="class_os_method_get_locale"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_locale</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-locale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 <literal>language_Script_COUNTRY_VARIANT@extra</literal> 形式的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 返回主机操作系统区域设置。<literal>language</literal> 之后的每个子字符串都是可选的，并且可能不存在。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>language</literal> - 2 个或 3 个字母的<reference name="语言代码" refuri="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">语言代码</reference>，小写。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>Script</literal> - 4 个字母的<reference name="文字代码" refuri="https://en.wikipedia.org/wiki/ISO_15924">文字代码</reference>，首字母大写。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>COUNTRY</literal> - 2 个或 3 个字母的<reference name="国家地区代码" refuri="https://en.wikipedia.org/wiki/ISO_3166-1">国家地区代码</reference>，大写。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>VARIANT</literal> - 语言变体，地区和排序顺序。变体可以有任意数量的带下划线的关键字。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>extra</literal> - 分号分隔的附加关键字列表。这可能包含货币、日历、排序顺序和编号系统信息。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果你只需要语言代码而不是操作系统中完全指定的区域设置，则可以使用 <reference internal="True" refid="class-os-method-get-locale-language"><inline classes="std std-ref">get_locale_language</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-locale-language"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-locale-language" names="class_os_method_get_locale_language"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_locale_language</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-locale-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将主机操作系统区域设置的 2 或 3 个字母的<reference name="语言代码" refuri="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">语言代码</reference>作为字符串返回，该字符串应在所有平台上保持一致。这相当于提取 <reference internal="True" refid="class-os-method-get-locale"><inline classes="std std-ref">get_locale</inline></reference> 字符串的 <literal>language</literal> 部分。</paragraph>
            <paragraph>当你不需要有关国家/地区代码或变体的附加信息时，这可用于将完全指定的区域设置字符串缩小为“通用”语言代码。例如，对于使用 <literal>fr_CA</literal> 语言环境的加拿大法语用户，这将返回 <literal>fr</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-main-thread-id"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-main-thread-id" names="class_os_method_get_main_thread_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_main_thread_id</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-main-thread-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回主线程的 ID。请参阅 <reference internal="True" refid="class-os-method-get-thread-caller-id"><inline classes="std std-ref">get_thread_caller_id</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>线程 ID 不是确定的，也许会在应用程序重新启动时被重复使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-memory-info"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-memory-info" names="class_os_method_get_memory_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_memory_info</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-memory-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个包含有关当前内存的信息的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>，其中包含以下条目：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>"physical"</literal> - 可用物理内存的总大小，单位为字节。这个值可能比实际的物理内存略小，因为计算时不含由内核以及各种设备所保留的内存。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>"free"</literal> - 无需磁盘访问或其他昂贵操作即可立即分配的物理内存大小，单位为字节。进程也许能够分配更多的物理内存，但是这种操作需要将不活跃的内存页移动至磁盘，这可能会很昂贵。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>"available"</literal> - 无需扩展交换文件即可分配的内存大小，单位为字节。该值包括物理内存和交换空间。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>"stack"</literal> - 当前线程的栈大小，单位为字节。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>注意：</strong>每个条目的值在其未知时可能是 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-model-name"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-model-name" names="class_os_method_get_model_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_model_name</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-model-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前设备的模型名称。</paragraph>
            <paragraph><strong>注意：</strong>此方法仅在Android和iOS上实现。在不支持的平台上返回 <literal>"GenericDevice"</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-name"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-name" names="class_os_method_get_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_name</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回主机平台的名称。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>在 Windows 上为 <literal>"Windows"</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 macOS 上为 <literal>"macOS"</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在基于 Linux 的操作系统上为 <literal>"Linux"</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在基于 BSD 的操作系统上为 <literal>"FreeBSD"</literal>、<literal>"NetBSD"</literal>、<literal>"OpenBSD"</literal>, 会使用 <literal>"BSD"</literal> 作为回退方案。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 Android 上为 <literal>"Android"</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 iOS 上为 <literal>"iOS"</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 Web 上为 <literal>"Web"</literal>。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>注意：</strong>自定义构建的引擎可能支持其他平台，例如游戏主机，可能返回其他值。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">match OS.get_name():
    "Windows":
        print("Welcome to Windows!")
    "macOS":
        print("Welcome to macOS!")
    "Linux", "FreeBSD", "NetBSD", "OpenBSD", "BSD":
        print("Welcome to Linux/BSD!")
    "Android":
        print("Welcome to Android!")
    "iOS":
        print("Welcome to iOS!")
    "Web":
        print("Welcome to the Web!")</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">switch (OS.GetName())
{
    case "Windows":
        GD.Print("Welcome to Windows");
        break;
    case "macOS":
        GD.Print("Welcome to macOS!");
        break;
    case "Linux":
    case "FreeBSD":
    case "NetBSD":
    case "OpenBSD":
    case "BSD":
        GD.Print("Welcome to Linux/BSD!");
        break;
    case "Android":
        GD.Print("Welcome to Android!");
        break;
    case "iOS":
        GD.Print("Welcome to iOS!");
        break;
    case "Web":
        GD.Print("Welcome to the Web!");
        break;
}</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>在 Web 平台上，仍然可以通过功能标签确定主机平台的操作系统。请参阅 <reference internal="True" refid="class-os-method-has-feature"><inline classes="std std-ref">has_feature</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-process-exit-code"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-process-exit-code" names="class_os_method_get_process_exit_code"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_process_exit_code</strong>(pid: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-process-exit-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在已启动进程运行结束后返回其退出码（见 <reference internal="True" refid="class-os-method-is-process-running"><inline classes="std std-ref">is_process_running</inline></reference>）。</paragraph>
            <paragraph>如果 <literal>pid</literal> 不是已启动子进程的 PID 或者该进程仍在运行，亦或当前平台未实现该方法，则返回 <literal>-1</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、Linux、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-process-id"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-process-id" names="class_os_method_get_process_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_process_id</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-process-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回主机用来唯一标识该应用程序的编号。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Linux、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-processor-count"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-processor-count" names="class_os_method_get_processor_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_processor_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-processor-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回主机的<emphasis>逻辑</emphasis> CPU 核心数。对于启用了超线程的 CPU，这个数会比<emphasis>物理</emphasis> CPU 核心数大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-processor-name"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-processor-name" names="class_os_method_get_processor_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_processor_name</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-processor-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回主机上 CPU 型号的全名（例如 <literal>"Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz"</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 Windows、macOS、Linux 和 iOS 上实现。在 Android 和 Web 上，<reference internal="True" refid="class-os-method-get-processor-name"><inline classes="std std-ref">get_processor_name</inline></reference> 返回空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-restart-on-exit-arguments"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-restart-on-exit-arguments" names="class_os_method_get_restart_on_exit_arguments"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_restart_on_exit_arguments</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-restart-on-exit-arguments"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当项目使用 <reference internal="True" refid="class-os-method-set-restart-on-exit"><inline classes="std std-ref">set_restart_on_exit</inline></reference> 自动重新启动时，将使用的命令行参数列表。另请参阅 <reference internal="True" refid="class-os-method-is-restart-on-exit-set"><inline classes="std std-ref">is_restart_on_exit_set</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-static-memory-peak-usage"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-static-memory-peak-usage" names="class_os_method_get_static_memory_peak_usage"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_static_memory_peak_usage</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-static-memory-peak-usage"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回使用的静态内存的最大数量。仅适用于调试版本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-static-memory-usage"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-static-memory-usage" names="class_os_method_get_static_memory_usage"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_static_memory_usage</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-static-memory-usage"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回程序正在使用的静态内存量，以字节为单位。仅适用于调试版本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-system-ca-certificates"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-system-ca-certificates" names="class_os_method_get_system_ca_certificates"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_system_ca_certificates</strong>() <reference internal="True" refid="class-os-method-get-system-ca-certificates"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the list of certification authorities trusted by the operating system as a string of concatenated certificates in PEM format.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-system-dir"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-system-dir" names="class_os_method_get_system_dir"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_system_dir</strong>(dir: <reference internal="True" refid="enum-os-systemdir"><inline classes="std std-ref">SystemDir</inline></reference>, shared_storage: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-system-dir"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回不同平台上常用文件夹的路径，如 <literal>dir</literal> 所定义。有关可用位置，请参阅 <reference internal="True" refid="enum-os-systemdir"><inline classes="std std-ref">SystemDir</inline></reference> 常量。</paragraph>
            <paragraph><strong>注意：</strong>这个方法在 Android、Linux、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>共享存储在 Android 上实现，如果 <literal>shared_storage</literal> 为 <literal>true</literal>，则允许区分应用程序特定目录和共享目录。共享目录在 Android 上有额外的限制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-system-font-path"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-system-font-path" names="class_os_method_get_system_font_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_system_font_path</strong>(font_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, weight: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 400, stretch: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 100, italic: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-system-font-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回带有 <literal>font_name</literal> 和样式的系统字体文件的路径。如果未找到匹配的字体，则返回空字符串。</paragraph>
            <paragraph>下列别名可用于请求默认字体：无衬线“sans-serif”、有衬线“serif”、等宽“monospace”、手写体“cursive”、花体“fantasy”。</paragraph>
            <paragraph><strong>注意：</strong>如果请求的样式不可用，则返回的字体可能具有不同的样式。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Linux、macOS、Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-system-font-path-for-text"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-system-font-path-for-text" names="class_os_method_get_system_font_path_for_text"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_system_font_path_for_text</strong>(font_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", weight: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 400, stretch: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 100, italic: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-system-font-path-for-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回系统替换字体文件路径的数组，这些字体与名称为 <literal>font_name</literal> 并且其他风格也相符的字体相近，可用于指定的文本、区域设置以及文字。如果没有相匹配的字体，则返回空数组。</paragraph>
            <paragraph>下列别名可用于请求默认字体：无衬线“sans-serif”、有衬线“serif”、等宽“monospace”、手写体“cursive”、花体“fantasy”。</paragraph>
            <paragraph><strong>注意：</strong>根据操作系统的不同，无法保证任何返回的字体都适合渲染指定的文本。应该按照返回的顺序加载并检查字体，选用第一个合适的字体。</paragraph>
            <paragraph><strong>注意：</strong>如果没有请求的风格，或者属于不同的字体家族，则可能返回不同风格的字体。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Linux、macOS、Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-system-fonts"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-system-fonts" names="class_os_method_get_system_fonts"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_system_fonts</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-system-fonts"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回可用的字体家族名称列表。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Linux、macOS、Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-thread-caller-id"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-thread-caller-id" names="class_os_method_get_thread_caller_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_thread_caller_id</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-thread-caller-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前线程的 ID。这可用于日志，以简化多线程应用程序的调试。</paragraph>
            <paragraph><strong>注意：</strong>线程 ID 不是确定的，也许会在应用程序重新启动时被重复使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-unique-id"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-unique-id" names="class_os_method_get_unique_id"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_unique_id</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-unique-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回特定于该设备的一个字符串。</paragraph>
            <paragraph><strong>注意：</strong>如果用户重新安装操作系统、升级操作系统或修改硬件，则该字符串可能会更改，恕不另行通知。这意味着它通常不应用于加密持久数据，因为在意外的 ID 更改会使之前保存的数据变得无法访问。返回的字符串也可能会被外部程序伪造，因此出于安全目的，请勿依赖该方法返回的字符串。</paragraph>
            <paragraph><strong>注意：</strong>在 Web 上，返回空字符串并生成错误，因为出于安全考虑无法实现该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-user-data-dir"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-user-data-dir" names="class_os_method_get_user_data_dir"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_user_data_dir</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-user-data-dir"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回写入用户数据的绝对目录路径（Godot 中的 <literal>user://</literal> 目录）。该路径取决于项目名称和 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-application-config-use-custom-user-dir"><inline classes="std std-ref">ProjectSettings.application/config/use_custom_user_dir</inline></reference>。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>在 Windows 上，这是 <literal>%AppData%\Godot\app_userdata\[project_name]</literal>；如果已设置 <literal>use_custom_user_dir</literal>，则为 <literal>%AppData%\[custom_name]</literal>。<literal>%AppData%</literal> 扩展为 <literal>%UserProfile%\AppData\Roaming</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 macOS 上，这是 <literal>~/Library/Application Support/Godot/app_userdata/[project_name]</literal>；如果已设置 <literal>use_custom_user_dir</literal>，则为 <literal>~/Library/Application Support/[custom_name]</literal> 。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 Linux 和 BSD 上，这是 <literal>~/.local/share/godot/app_userdata/[project_name]</literal>；如果已设置 <literal>use_custom_user_dir</literal>，则为 <literal>~/.local/share/[custom_name]</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 Android 和 iOS 上，这是内部存储或外部存储中的沙盒目录，具体取决于用户的配置。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 Web 上，这是由浏览器管理的虚拟目录。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果项目名称为空，则 <literal>[project_name]</literal> 将回退为 <literal>[unnamed project]</literal>。</paragraph>
            <paragraph>请勿与 <reference internal="True" refid="class-os-method-get-data-dir"><inline classes="std std-ref">get_data_dir</inline></reference> 混淆，后者返回的是<emphasis>全局</emphasis>（非项目特定的）用户主目录。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-version"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-version" names="class_os_method_get_version"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_version</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-version"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回操作系统的确切生产和构建版本。这与营销中使用的品牌版本不同。这有助于区分操作系统的不同版本，包括次要版本、内部版本和自定义版本。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>对于 Windows，返回主要和次要版本，以及构建号。例如，对于 Windows 10 版本，返回的字符串可能看起来像 <literal>10.0.9926</literal>，对于 Windows 7 SP1 版本，它可能看起来像 <literal>6.1.7601</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>对于滚动发行版，例如 Arch Linux，会返回一个空字符串。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>对于 macOS 和 iOS，会返回主要和次要版本，以及补丁号。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>对于 Android，会返回 SDK 版本和增量构建号。如果是自定义的 ROM，将会尝试返回其版本。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>注意：</strong>该方法在 web 平台上不被支持。它将返回一个空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-get-video-adapter-driver-info"></target>
            <paragraph classes="classref-method" ids="class-os-method-get-video-adapter-driver-info" names="class_os_method_get_video_adapter_driver_info"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_video_adapter_driver_info</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-get-video-adapter-driver-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回用户当前激活的显卡的视频适配器驱动程序名称和版本，返回为一个 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>。另见 <reference internal="True" refuri="class_renderingserver#class-renderingserver-method-get-video-adapter-api-version"><inline classes="std std-ref">RenderingServer.get_video_adapter_api_version</inline></reference>。</paragraph>
            <paragraph>第一个元素保存驱动程序的名称，如 <literal>nvidia</literal>、<literal>amdgpu</literal> 等。</paragraph>
            <paragraph>第二个元素保存驱动程序的版本。例如 Linux/BSD 平台上的 <literal>nvidia</literal> 驱动程序，其版本格式为 <literal>510.85.02</literal>。对于 Windows，其驱动程序的格式是 <literal>31.0.15.1659</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 Linux/BSD 和 Windows 上不以无头模式运行时才受支持。在其他平台上，它返回一个空数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-has-environment"></target>
            <paragraph classes="classref-method" ids="class-os-method-has-environment" names="class_os_method_has_environment"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_environment</strong>(variable: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-has-environment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果名称为 <literal>variable</literal> 的环境变量存在，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>请仔细检查 <literal>variable</literal> 的大小写。环境变量名称在除 Windows 之外的所有平台上都区分大小写。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-has-feature"></target>
            <paragraph classes="classref-method" ids="class-os-method-has-feature" names="class_os_method_has_feature"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_feature</strong>(tag_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-has-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果当前运行的实例支持给定功能标签的功能，则返回 <literal>true</literal>，具体取决于平台、构建等。可用于检查当前是否正在运行调试构建，是否在某个平台或架构上，等等。详情见<reference internal="True" refuri="../tutorials/export/feature_tags"><inline classes="doc">《功能标签》</inline></reference>文档。</paragraph>
            <paragraph><strong>注意：</strong>标签名称区分大小写。</paragraph>
            <paragraph><strong>注意：</strong>在 Web 平台上，会定义 <literal>web_android</literal>、<literal>web_ios</literal>、<literal>web_linuxbsd</literal>、<literal>web_macos</literal>、<literal>web_windows</literal> 的其中之一，表示宿主平台。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-is-debug-build"></target>
            <paragraph classes="classref-method" ids="class-os-method-is-debug-build" names="class_os_method_is_debug_build"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_debug_build</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-is-debug-build"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果用于运行项目的 Godot 二进制文件是<emphasis>调试</emphasis>导出模板，或是在编辑器中运行时，则返回 <literal>true</literal>。</paragraph>
            <paragraph>如果用于运行项目的 Godot 二进制文件是<emphasis>发布</emphasis>导出模板，则返回 <literal>false</literal>。</paragraph>
            <paragraph><strong>注意：</strong>要检查用于运行项目的 Godot 二进制文件是否是导出模板（调试或发布），请改用 <literal>OS.has_feature("template")</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-is-keycode-unicode"></target>
            <paragraph classes="classref-method" ids="class-os-method-is-keycode-unicode" names="class_os_method_is_keycode_unicode"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_keycode_unicode</strong>(code: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-is-keycode-unicode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果输入的键码对应 Unicode 字符，则返回 <literal>true</literal>。键码列表见 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 常量。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-7-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-7-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-7-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">print(OS.is_keycode_unicode(KEY_G))      # 输出 true
print(OS.is_keycode_unicode(KEY_KP_4))   # 输出 true
print(OS.is_keycode_unicode(KEY_TAB))    # 输出 false
print(OS.is_keycode_unicode(KEY_ESCAPE)) # 输出 false</literal_block>
                </div>
                <div aria-labelledby="tab-7-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-7-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.Print(OS.IsKeycodeUnicode((long)Key.G));      // 输出 true
GD.Print(OS.IsKeycodeUnicode((long)Key.Kp4));    // 输出 true
GD.Print(OS.IsKeycodeUnicode((long)Key.Tab));    // 输出 false
GD.Print(OS.IsKeycodeUnicode((long)Key.Escape)); // 输出 false</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-is-process-running"></target>
            <paragraph classes="classref-method" ids="class-os-method-is-process-running" names="class_os_method_is_process_running"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_process_running</strong>(pid: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-is-process-running"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该子进程 ID（<literal>pid</literal>）仍在运行，则返回 <literal>true</literal>；如果它已终止，则返回 <literal>false</literal>。<literal>pid</literal> 必须是从 <reference internal="True" refid="class-os-method-create-process"><inline classes="std std-ref">create_process</inline></reference> 生成的有效 ID。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Linux、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-is-restart-on-exit-set"></target>
            <paragraph classes="classref-method" ids="class-os-method-is-restart-on-exit-set" names="class_os_method_is_restart_on_exit_set"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_restart_on_exit_set</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-is-restart-on-exit-set"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果项目因任何原因退出时将自动重新启动，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。另请参阅 <reference internal="True" refid="class-os-method-set-restart-on-exit"><inline classes="std std-ref">set_restart_on_exit</inline></reference> 和 <reference internal="True" refid="class-os-method-get-restart-on-exit-arguments"><inline classes="std std-ref">get_restart_on_exit_arguments</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-is-sandboxed"></target>
            <paragraph classes="classref-method" ids="class-os-method-is-sandboxed" names="class_os_method_is_sandboxed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_sandboxed</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-is-sandboxed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该应用程序在沙箱中运行，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 和 Linux 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-is-stdout-verbose"></target>
            <paragraph classes="classref-method" ids="class-os-method-is-stdout-verbose" names="class_os_method_is_stdout_verbose"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_stdout_verbose</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-is-stdout-verbose"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果引擎是使用 <literal>--verbose</literal> 或 <literal>-v</literal> 命令行参数执行的，或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-debug-settings-stdout-verbose-stdout"><inline classes="std std-ref">ProjectSettings.debug/settings/stdout/verbose_stdout</inline></reference> 为 <literal>true</literal>，则返回 <literal>true</literal>。另请参阅 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-print-verbose"><inline classes="std std-ref">@GlobalScope.print_verbose</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-is-userfs-persistent"></target>
            <paragraph classes="classref-method" ids="class-os-method-is-userfs-persistent" names="class_os_method_is_userfs_persistent"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_userfs_persistent</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-is-userfs-persistent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>user://</literal> 文件系统是持久的，即玩家退出并再次开始游戏后其状态相同，则返回 <literal>true</literal>。与 Web 平台相关，这种持久性可能不可用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-kill"></target>
            <paragraph classes="classref-method" ids="class-os-method-kill" names="class_os_method_kill"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>kill</strong>(pid: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-os-method-kill"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>杀死（终止）由给定进程 ID（<literal>pid</literal>）标识的进程，例如由 <reference internal="True" refid="class-os-method-execute"><inline classes="std std-ref">execute</inline></reference> 在非阻塞模式下返回的那个进程 ID。另请参阅 <reference internal="True" refid="class-os-method-crash"><inline classes="std std-ref">crash</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法也可用于杀死不是由引擎产生的进程。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Linux、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-move-to-trash"></target>
            <paragraph classes="classref-method" ids="class-os-method-move-to-trash" names="class_os_method_move_to_trash"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>move_to_trash</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-move-to-trash"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定 <literal>path</literal> 处的文件或目录移动到系统的回收站。另请参阅 <reference internal="True" refuri="class_diraccess#class-diraccess-method-remove"><inline classes="std std-ref">DirAccess.remove</inline></reference>。</paragraph>
            <paragraph>该方法仅支持全局路径，所以可能需要使用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-method-globalize-path"><inline classes="std std-ref">ProjectSettings.globalize_path</inline></reference>。请勿将其用于 <literal>res://</literal> 中的文件，因为它在导出后的项目中是无法正常工作的。</paragraph>
            <paragraph>如果找不到文件或目录，或者系统不支持该方法，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-failed"><inline classes="std std-ref">@GlobalScope.FAILED</inline></reference>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-8-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-8-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-8-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var file_to_remove = "user://slot1.save"
OS.move_to_trash(ProjectSettings.globalize_path(file_to_remove))</literal_block>
                </div>
                <div aria-labelledby="tab-8-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-8-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var fileToRemove = "user://slot1.save";
OS.MoveToTrash(ProjectSettings.GlobalizePath(fileToRemove));</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>该方法在 Android、Linux、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>如果用户在其系统上禁用了回收站，则该文件将被永久删除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-open-midi-inputs"></target>
            <paragraph classes="classref-method" ids="class-os-method-open-midi-inputs" names="class_os_method_open_midi_inputs"><abbreviation explanation="无返回值。">void</abbreviation> <strong>open_midi_inputs</strong>() <reference internal="True" refid="class-os-method-open-midi-inputs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>初始化系统 MIDI 驱动的单例，允许 Godot 接收 <reference internal="True" refuri="class_inputeventmidi#class-inputeventmidi"><inline classes="std std-ref">InputEventMIDI</inline></reference>。另请参阅 <reference internal="True" refid="class-os-method-get-connected-midi-inputs"><inline classes="std std-ref">get_connected_midi_inputs</inline></reference> and <reference internal="True" refid="class-os-method-close-midi-inputs"><inline classes="std std-ref">close_midi_inputs</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Linux、macOS、Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-read-string-from-stdin"></target>
            <paragraph classes="classref-method" ids="class-os-method-read-string-from-stdin" names="class_os_method_read_string_from_stdin"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>read_string_from_stdin</strong>() <reference internal="True" refid="class-os-method-read-string-from-stdin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从标准输入（通常是终端）读取一个用户输入字符串。这个操作是<emphasis>阻塞的</emphasis> ，如果在主线程上调用 <reference internal="True" refid="class-os-method-read-string-from-stdin"><inline classes="std std-ref">read_string_from_stdin</inline></reference>，就会导致窗口冻结。调用 <reference internal="True" refid="class-os-method-read-string-from-stdin"><inline classes="std std-ref">read_string_from_stdin</inline></reference> 的线程将被阻塞，直到程序在标准输入中接收到一个断行（通常由用户按下 <literal classes="kbd">Enter</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Linux、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>在导出的 Windows 版本中，运行控制台包装器可执行文件来访问终端。否则，标准输入将无法正常工作。如果你需要具有控制台支持的单个可执行文件，请使用启用 <literal>windows_subsystem=console</literal> 标志编译的自定义构建。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-request-permission"></target>
            <paragraph classes="classref-method" ids="class-os-method-request-permission" names="class_os_method_request_permission"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>request_permission</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-os-method-request-permission"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向操作系统请求名为 <literal>name</literal> 的权限。如果顺利取得权限则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>这个方法目前只在 Android 上实现，<literal>AudioDriverOpenSL</literal> 会用它来请求 <literal>"RECORD_AUDIO"</literal> 权限。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-request-permissions"></target>
            <paragraph classes="classref-method" ids="class-os-method-request-permissions" names="class_os_method_request_permissions"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>request_permissions</strong>() <reference internal="True" refid="class-os-method-request-permissions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向操作系统请求<emphasis>危险的</emphasis>权限。如果成功授予权限则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>这个方法仅在 Android 上实现。普通权限是在 Android 应用安装时自动授予的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-revoke-granted-permissions"></target>
            <paragraph classes="classref-method" ids="class-os-method-revoke-granted-permissions" names="class_os_method_revoke_granted_permissions"><abbreviation explanation="无返回值。">void</abbreviation> <strong>revoke_granted_permissions</strong>() <reference internal="True" refid="class-os-method-revoke-granted-permissions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 macOS（仅限沙盒应用程序）上，该功能会清除应用程序可访问的用户选择的文件夹列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-set-environment"></target>
            <paragraph classes="classref-method" ids="class-os-method-set-environment" names="class_os_method_set_environment"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_environment</strong>(variable: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-set-environment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将环境变量 <literal>variable</literal> 的值设置为 <literal>value</literal>。运行 <reference internal="True" refid="class-os-method-set-environment"><inline classes="std std-ref">set_environment</inline></reference> 后，会为 Godot 进程和任何用 <reference internal="True" refid="class-os-method-execute"><inline classes="std std-ref">execute</inline></reference> 执行的进程设置该环境变量。该环境变量<emphasis>不会</emphasis>持续存在于 Godot 进程终止后运行的进程中。</paragraph>
            <paragraph><strong>注意：</strong>环境变量的名称在除 Windows 外的所有平台上都是区分大小写的。名称 <literal>variable</literal> 不能为空，也不能包含 <literal>=</literal> 字符。在 Windows 上，在环境块中注册的 <literal>variable</literal>、<literal>value</literal>、<literal>=</literal> 以及 null 终止符的总长度有 32767 个字符的限制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-set-restart-on-exit"></target>
            <paragraph classes="classref-method" ids="class-os-method-set-restart-on-exit" names="class_os_method_set_restart_on_exit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_restart_on_exit</strong>(restart: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, arguments: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> = PackedStringArray()) <reference internal="True" refid="class-os-method-set-restart-on-exit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>restart</literal> 为 <literal>true</literal>，则项目在使用 <reference internal="True" refuri="class_scenetree#class-scenetree-method-quit"><inline classes="std std-ref">SceneTree.quit</inline></reference> 或 <reference internal="True" refuri="class_node#class-node-constant-notification-wm-close-request"><inline classes="std std-ref">Node.NOTIFICATION_WM_CLOSE_REQUEST</inline></reference> 退出时，会自动重新启动。可以提供命令行 <literal>arguments</literal>。要使用最初用于运行项目的命令行参数重新启动项目，请将 <reference internal="True" refid="class-os-method-get-cmdline-args"><inline classes="std std-ref">get_cmdline_args</inline></reference> 作为 <literal>arguments</literal> 的值传递。</paragraph>
            <paragraph>该方法可用于应用需要重新启动的设置更改。另见 <reference internal="True" refid="class-os-method-is-restart-on-exit-set"><inline classes="std std-ref">is_restart_on_exit_set</inline></reference> 和 <reference internal="True" refid="class-os-method-get-restart-on-exit-arguments"><inline classes="std std-ref">get_restart_on_exit_arguments</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法只在桌面平台上有效，并且只在项目不是从编辑器启动时有效。不会影响移动和 Web 平台，或者当项目从编辑器启动时。</paragraph>
            <paragraph><strong>注意：</strong>如果项目进程崩溃或被用户<emphasis>杀死</emphasis>（通过发送 <literal>SIGKILL</literal> 而不是通常的 <literal>SIGTERM</literal>），项目不会自动重新启动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-set-thread-name"></target>
            <paragraph classes="classref-method" ids="class-os-method-set-thread-name" names="class_os_method_set_thread_name"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>set_thread_name</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-os-method-set-thread-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为当前线程分配指定的名称。如果在当前平台不可使用，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-unavailable"><inline classes="std std-ref">@GlobalScope.ERR_UNAVAILABLE</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-set-use-file-access-save-and-swap"></target>
            <paragraph classes="classref-method" ids="class-os-method-set-use-file-access-save-and-swap" names="class_os_method_set_use_file_access_save_and_swap"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_file_access_save_and_swap</strong>(enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-os-method-set-use-file-access-save-and-swap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>enabled</literal> 为 <literal>true</literal>，那么在以写模式打开文件时，会使用在同一位置打开的临时文件。关闭时会自动将其应用至目标文件。</paragraph>
            <paragraph>适用于文件可能被杀毒软件、文本编辑器、甚至 Godot 编辑器自己等其他程序打开的场景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-shell-open"></target>
            <paragraph classes="classref-method" ids="class-os-method-shell-open" names="class_os_method_shell_open"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>shell_open</strong>(uri: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-os-method-shell-open"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请求操作系统使用最合适的程序打开由 <literal>uri</literal> 标识的资源。例如：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>OS.shell_open("C:\\Users\name\Downloads")</literal> 在 Windows 上会用资源管理器打开用户的 Downloads 文件夹。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>OS.shell_open("https://godotengine.org")</literal> 会使用默认网页浏览器打开 Godot 官方网站。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>OS.shell_open("mailto:example@example.com")</literal> 会打开默认电子邮件客户端并将“收件人”字段设置为 <literal>example@example.com</literal>。其他支持自定义的字段见 <reference name="RFC 2368 - [code]mailto[/code] URL 方案" refuri="https://datatracker.ietf.org/doc/html/rfc2368">RFC 2368 - [code]mailto[/code] URL 方案</reference>。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>可以使用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-method-globalize-path"><inline classes="std std-ref">ProjectSettings.globalize_path</inline></reference> 将 <literal>res://</literal> 和 <literal>user://</literal> 项目路径转换为系统路径，以便与该方法一起使用。</paragraph>
            <paragraph><strong>注意：</strong>请使用 <reference internal="True" refuri="class_string#class-string-method-uri-encode"><inline classes="std std-ref">String.uri_encode</inline></reference> 对 URL 中的字符进行编码，得到的 URL 才能安全使用、可移植。尤其是在包含换行的情况下。否则项目导出至 Web 平台后 <reference internal="True" refid="class-os-method-shell-open"><inline classes="std std-ref">shell_open</inline></reference> 可能无法正常工作。</paragraph>
            <paragraph><strong>注意：</strong>这个方法在 Android、iOS、HTML5、Linux、macOS、以及 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-shell-show-in-file-manager"></target>
            <paragraph classes="classref-method" ids="class-os-method-shell-show-in-file-manager" names="class_os_method_shell_show_in_file_manager"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>shell_show_in_file_manager</strong>(file_or_dir_path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, open_folder: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-os-method-shell-show-in-file-manager"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请求操作系统打开文件管理器，导航至给定的文件或目录路径 <literal>file_or_dir_path</literal> 并选中目标文件或文件夹。</paragraph>
            <paragraph>如果 <literal>open_folder</literal> 为 <literal>true</literal> 并且 <literal>file_or_dir_path</literal> 是有效的目录路径，则操作系统将打开文件管理器并导航到目标文件夹，而不选择任何内容。</paragraph>
            <paragraph>请使用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-method-globalize-path"><inline classes="std std-ref">ProjectSettings.globalize_path</inline></reference> 将 <literal>res://</literal> 和 <literal>user://</literal> 项目路径转换为系统路径以与该方法一起使用。</paragraph>
            <paragraph><strong>注意：</strong>目前该方法仅在 Windows 和 macOS 上实现。在其他平台上，它会回退至使用前缀为 <literal>file://</literal> 的 <literal>file_or_dir_path</literal> 目录路径调用 <reference internal="True" refid="class-os-method-shell-open"><inline classes="std std-ref">shell_open</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-os-method-unset-environment"></target>
            <paragraph classes="classref-method" ids="class-os-method-unset-environment" names="class_os_method_unset_environment"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unset_environment</strong>(variable: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-os-method-unset-environment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的环境变量存在，则从当前环境中移除。<literal>variable</literal> 名称不能为空或包含 <literal>=</literal> 字符。在运行 <reference internal="True" refid="class-os-method-unset-environment"><inline classes="std std-ref">unset_environment</inline></reference> 后，将为 Godot 进程和使用 <reference internal="True" refid="class-os-method-execute"><inline classes="std std-ref">execute</inline></reference> 执行的任何进程移除环境变量。环境变量的移除并<emphasis>不会</emphasis>持续到 Godot 进程终止后运行的进程。</paragraph>
            <paragraph><strong>注意：</strong>环境变量名称在除 Windows 以外的所有平台上都区分大小写。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
