<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_signal.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Signal.xml.</comment>
    <target refid="class-signal"></target>
    <section ids="signal class-signal" names="signal class_signal">
        <title>Signal</title>
        <paragraph>代表 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 中某个信号的内置类型。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>信号 <strong>Signal</strong> 是内置的 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 类型，代表 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 实例的某个信息。信号和所有 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 类型一样，可以在变量中存储、传递给函数。信号能够让所有连接的 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>（及相应扩展对象）监听事件并作出反应，不必直接互相引用。这样就能让代码更灵活、更易于管理。</paragraph>
            <paragraph>在 GDScript 中，信号可以使用 <literal>signal</literal> 关键字声明。在 C# 中，你可以在代理上使用 <literal>[Signal]</literal> 属性。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">signal attacked

# 可以声明额外的参数。
# 这些参数必须在发出信号时传递。
signal item_dropped(item_name, amount)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">[Signal]
delegate void AttackedEventHandler();

// 可以声明额外的参数。
// 这些参数必须在发出信号时传递。
[Signal]
delegate void ItemDroppedEventHandler(string itemName, int amount);</literal_block>
                </div>
            </container>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../getting_started/step_by_step/signals"><inline classes="doc">使用信号</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="GDScript 基础" refuri="../tutorials/scripting/gdscript/gdscript_basics.html#signals">GDScript 基础</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="139"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal"><inline classes="std std-ref">Signal</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-constructor-signal"><inline classes="std std-ref">Signal</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal"><inline classes="std std-ref">Signal</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-constructor-signal"><inline classes="std std-ref">Signal</inline></reference> <strong>(</strong> <reference internal="True" refid="class-signal"><inline classes="std std-ref">Signal</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal"><inline classes="std std-ref">Signal</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-constructor-signal"><inline classes="std std-ref">Signal</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> signal <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="129"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-method-connect"><inline classes="std std-ref">connect</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> flags=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-method-disconnect"><inline classes="std std-ref">disconnect</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-method-emit"><inline classes="std std-ref">emit</inline></reference> <strong>(</strong> ... <strong>)</strong> <abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-method-get-connections"><inline classes="std std-ref">get_connections</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-method-get-name"><inline classes="std std-ref">get_name</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-method-get-object"><inline classes="std std-ref">get_object</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-method-get-object-id"><inline classes="std std-ref">get_object_id</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-method-is-connected"><inline classes="std std-ref">is_connected</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-method-is-null"><inline classes="std std-ref">is_null</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="100"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-operator-neq-signal"><inline classes="std std-ref">operator !=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-signal"><inline classes="std std-ref">Signal</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-signal-operator-eq-signal"><inline classes="std std-ref">operator ==</inline></reference> <strong>(</strong> <reference internal="True" refid="class-signal"><inline classes="std std-ref">Signal</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-signal-constructor-signal"></target>
            <paragraph classes="classref-constructor" ids="class-signal-constructor-signal" names="class_signal_constructor_signal"><reference internal="True" refid="class-signal"><inline classes="std std-ref">Signal</inline></reference> <strong>Signal</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>构造空的 <strong>Signal</strong>，没有绑定对象和信号名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-signal"><inline classes="std std-ref">Signal</inline></reference> <strong>Signal</strong> <strong>(</strong> <reference internal="True" refid="class-signal"><inline classes="std std-ref">Signal</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>构造给定 <strong>Signal</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-signal"><inline classes="std std-ref">Signal</inline></reference> <strong>Signal</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> signal <strong>)</strong></paragraph>
            <paragraph>在指定对象 <literal>object</literal> 中新建名称 <literal>signal</literal> 的 <strong>Signal</strong>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-signal-method-connect"></target>
            <paragraph classes="classref-method" ids="class-signal-method-connect" names="class_signal_method_connect"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>connect</strong> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> flags=0 <strong>)</strong></paragraph>
            <paragraph>将此信号连接到指定的 <literal>callable</literal>。还可以添加 <literal>flags</literal> 对连接的行为进行配置（见 <reference internal="True" refuri="class_object#enum-object-connectflags"><inline classes="std std-ref">ConnectFlags</inline></reference> 常量）。可以使用 <reference internal="True" refuri="class_callable#class-callable-method-bind"><inline classes="std std-ref">Callable.bind</inline></reference> 为连接的 <literal>callable</literal> 提供额外的参数。</paragraph>
            <paragraph>一个信号只能和同一个 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 连接一次。如果该信号已连接，则会返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-invalid-parameter"><inline classes="std std-ref">@GlobalScope.ERR_INVALID_PARAMETER</inline></reference> 并推入错误消息，除非信号是用 <reference internal="True" refuri="class_object#class-object-constant-connect-reference-counted"><inline classes="std std-ref">Object.CONNECT_REFERENCE_COUNTED</inline></reference> 连接的。要防止这个问题，请先使用 <reference internal="True" refid="class-signal-method-is-connected"><inline classes="std std-ref">is_connected</inline></reference> 检查已有连接。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">for button in $Buttons.get_children():
    button.pressed.connect(_on_pressed.bind(button))

func _on_pressed(button):
    print(button.name, " 被按下了")</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-signal-method-disconnect"></target>
            <paragraph classes="classref-method" ids="class-signal-method-disconnect" names="class_signal_method_disconnect">void <strong>disconnect</strong> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable <strong>)</strong></paragraph>
            <paragraph>将该信号与给定的 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 断开连接。如果该连接不存在，则会生成错误。请使用 <reference internal="True" refid="class-signal-method-is-connected"><inline classes="std std-ref">is_connected</inline></reference> 来确保连接存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-signal-method-emit"></target>
            <paragraph classes="classref-method" ids="class-signal-method-emit" names="class_signal_method_emit">void <strong>emit</strong> <strong>(</strong> ... <strong>)</strong> <abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>发出该信号。与该信号相连的所有 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 都将被触发。此方法支持可变数量的参数，所以参数可以用逗号分隔列表的形式传递。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-signal-method-get-connections"></target>
            <paragraph classes="classref-method" ids="class-signal-method-get-connections" names="class_signal_method_get_connections"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_connections</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该信号的连接 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>。连接用 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 表示，包含三个条目：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>signal</literal> 是对此信号的引用。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>callable</literal> 是对连接的 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 的引用。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>flags</literal> 是 <reference internal="True" refuri="class_object#enum-object-connectflags"><inline classes="std std-ref">ConnectFlags</inline></reference> 的组合。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-signal-method-get-name"></target>
            <paragraph classes="classref-method" ids="class-signal-method-get-name" names="class_signal_method_get_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_name</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该信号的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-signal-method-get-object"></target>
            <paragraph classes="classref-method" ids="class-signal-method-get-object" names="class_signal_method_get_object"><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <strong>get_object</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回发出该信号的对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-signal-method-get-object-id"></target>
            <paragraph classes="classref-method" ids="class-signal-method-get-object-id" names="class_signal_method_get_object_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_object_id</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回发出该信号的对象的 ID（见 <reference internal="True" refuri="class_object#class-object-method-get-instance-id"><inline classes="std std-ref">Object.get_instance_id</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-signal-method-is-connected"></target>
            <paragraph classes="classref-method" ids="class-signal-method-is-connected" names="class_signal_method_is_connected"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_connected</strong> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果指定的 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 已连接到此信号，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-signal-method-is-null"></target>
            <paragraph classes="classref-method" ids="class-signal-method-is-null" names="class_signal_method_is_null"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_null</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该信号的名称并不存在于其对象中，或者对象无效，则返回 <literal>true</literal>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-signal-operator-neq-signal"></target>
            <paragraph classes="classref-operator" ids="class-signal-operator-neq-signal" names="class_signal_operator_neq_signal"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong> <strong>(</strong> <reference internal="True" refid="class-signal"><inline classes="std std-ref">Signal</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果信号的对象或名称不同，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-signal-operator-eq-signal"></target>
            <paragraph classes="classref-operator" ids="class-signal-operator-eq-signal" names="class_signal_operator_eq_signal"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong> <strong>(</strong> <reference internal="True" refid="class-signal"><inline classes="std std-ref">Signal</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果信号的对象和名称相同，则返回 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
