<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_skeletonmodification2dlookat.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/SkeletonModification2DLookAt.xml.</comment>
    <target refid="class-skeletonmodification2dlookat"></target>
    <section ids="skeletonmodification2dlookat class-skeletonmodification2dlookat" names="skeletonmodification2dlookat class_skeletonmodification2dlookat">
        <title>SkeletonModification2DLookAt</title>
        <paragraph><strong>实验性：</strong> This class may be changed or removed in future versions.</paragraph>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_skeletonmodification2d#class-skeletonmodification2d"><inline classes="std std-ref">SkeletonModification2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>对 <reference internal="True" refuri="class_bone2d#class-bone2d"><inline classes="std std-ref">Bone2D</inline></reference> 节点进行旋转，让它看向某个目标的修改器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这种 <reference internal="True" refuri="class_skeletonmodification2d#class-skeletonmodification2d"><inline classes="std std-ref">SkeletonModification2D</inline></reference> 会对骨骼进行旋转，让它看向某个目标。适合让角色的头部看向玩家、让炮塔看向目标以及其他需要让骨骼朝某个东西快速旋转的情况。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="85"></colspec>
                    <colspec colwidth="18"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-property-bone2d-node"><inline classes="std std-ref">bone2d_node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("")</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-property-bone-index"><inline classes="std std-ref">bone_index</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-property-target-nodepath"><inline classes="std std-ref">target_nodepath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("")</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="147"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-method-get-additional-rotation"><inline classes="std std-ref">get_additional_rotation</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-method-get-constraint-angle-invert"><inline classes="std std-ref">get_constraint_angle_invert</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-method-get-constraint-angle-max"><inline classes="std std-ref">get_constraint_angle_max</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-method-get-constraint-angle-min"><inline classes="std std-ref">get_constraint_angle_min</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-method-get-enable-constraint"><inline classes="std std-ref">get_enable_constraint</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-method-set-additional-rotation"><inline classes="std std-ref">set_additional_rotation</inline></reference>(rotation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-method-set-constraint-angle-invert"><inline classes="std std-ref">set_constraint_angle_invert</inline></reference>(invert: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-method-set-constraint-angle-max"><inline classes="std std-ref">set_constraint_angle_max</inline></reference>(angle_max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-method-set-constraint-angle-min"><inline classes="std std-ref">set_constraint_angle_min</inline></reference>(angle_min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2dlookat-method-set-enable-constraint"><inline classes="std std-ref">set_enable_constraint</inline></reference>(enable_constraint: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-skeletonmodification2dlookat-property-bone2d-node"></target>
            <paragraph classes="classref-property" ids="class-skeletonmodification2dlookat-property-bone2d-node" names="class_skeletonmodification2dlookat_property_bone2d_node"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>bone2d_node</strong> = <literal>NodePath("")</literal> <reference internal="True" refid="class-skeletonmodification2dlookat-property-bone2d-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bone2d_node</strong>(value: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_bone2d_node</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要修改的 <reference internal="True" refuri="class_bone2d#class-bone2d"><inline classes="std std-ref">Bone2D</inline></reference> 节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2dlookat-property-bone-index"></target>
            <paragraph classes="classref-property" ids="class-skeletonmodification2dlookat-property-bone-index" names="class_skeletonmodification2dlookat_property_bone_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>bone_index</strong> = <literal>-1</literal> <reference internal="True" refid="class-skeletonmodification2dlookat-property-bone-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bone_index</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_bone_index</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要执行修改的 <reference internal="True" refuri="class_bone2d#class-bone2d"><inline classes="std std-ref">Bone2D</inline></reference> 节点的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2dlookat-property-target-nodepath"></target>
            <paragraph classes="classref-property" ids="class-skeletonmodification2dlookat-property-target-nodepath" names="class_skeletonmodification2dlookat_property_target_nodepath"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>target_nodepath</strong> = <literal>NodePath("")</literal> <reference internal="True" refid="class-skeletonmodification2dlookat-property-target-nodepath"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_target_node</strong>(value: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_target_node</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>作为 LookAt 修改目标的节点的 NodePath。该节点是该修改将 <reference internal="True" refuri="class_bone2d#class-bone2d"><inline classes="std std-ref">Bone2D</inline></reference> 旋转到的节点。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-skeletonmodification2dlookat-method-get-additional-rotation"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2dlookat-method-get-additional-rotation" names="class_skeletonmodification2dlookat_method_get_additional_rotation"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_additional_rotation</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-skeletonmodification2dlookat-method-get-additional-rotation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回执行 LookAt 修改后被应用的额外旋转的量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2dlookat-method-get-constraint-angle-invert"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2dlookat-method-get-constraint-angle-invert" names="class_skeletonmodification2dlookat_method_get_constraint_angle_invert"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_constraint_angle_invert</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-skeletonmodification2dlookat-method-get-constraint-angle-invert"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该修改的约束是否反转。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2dlookat-method-get-constraint-angle-max"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2dlookat-method-get-constraint-angle-max" names="class_skeletonmodification2dlookat_method_get_constraint_angle_max"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_constraint_angle_max</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-skeletonmodification2dlookat-method-get-constraint-angle-max"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该约束允许的最大角度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2dlookat-method-get-constraint-angle-min"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2dlookat-method-get-constraint-angle-min" names="class_skeletonmodification2dlookat_method_get_constraint_angle_min"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_constraint_angle_min</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-skeletonmodification2dlookat-method-get-constraint-angle-min"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该约束允许的最小角度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2dlookat-method-get-enable-constraint"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2dlookat-method-get-enable-constraint" names="class_skeletonmodification2dlookat_method_get_enable_constraint"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_enable_constraint</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-skeletonmodification2dlookat-method-get-enable-constraint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 LookAt 修改器正在使用约束，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2dlookat-method-set-additional-rotation"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2dlookat-method-set-additional-rotation" names="class_skeletonmodification2dlookat_method_set_additional_rotation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_additional_rotation</strong>(rotation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-skeletonmodification2dlookat-method-set-additional-rotation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置执行该修改后要被应用的额外旋转的量。这允许将结果偏移输入的旋转量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2dlookat-method-set-constraint-angle-invert"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2dlookat-method-set-constraint-angle-invert" names="class_skeletonmodification2dlookat_method_set_constraint_angle_invert"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_constraint_angle_invert</strong>(invert: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-skeletonmodification2dlookat-method-set-constraint-angle-invert"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当为 <literal>true</literal> 时，修改将使用一个反转的关节约束。</paragraph>
            <paragraph>反转的关节约束仅将该 <reference internal="True" refuri="class_bone2d#class-bone2d"><inline classes="std std-ref">Bone2D</inline></reference> 约束到输入的最小角度和最大角度<emphasis>之外</emphasis>的角度。出于这个原因，它被称为反向关节约束，因为它将关节约束在输入值的外部。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2dlookat-method-set-constraint-angle-max"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2dlookat-method-set-constraint-angle-max" names="class_skeletonmodification2dlookat_method_set_constraint_angle_max"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_constraint_angle_max</strong>(angle_max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-skeletonmodification2dlookat-method-set-constraint-angle-max"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该约束允许的最大角度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2dlookat-method-set-constraint-angle-min"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2dlookat-method-set-constraint-angle-min" names="class_skeletonmodification2dlookat_method_set_constraint_angle_min"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_constraint_angle_min</strong>(angle_min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-skeletonmodification2dlookat-method-set-constraint-angle-min"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该约束允许的最小角度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2dlookat-method-set-enable-constraint"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2dlookat-method-set-enable-constraint" names="class_skeletonmodification2dlookat_method_set_enable_constraint"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_enable_constraint</strong>(enable_constraint: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-skeletonmodification2dlookat-method-set-enable-constraint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置此修改器是否使用约束。为 <literal>true</literal> 时，会在求解 LookAt 修改器时应用约束。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
