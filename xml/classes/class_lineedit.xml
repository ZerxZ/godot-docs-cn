<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_lineedit.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <meta content="text, input" name="keywords">
    </meta>
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/LineEdit.xml.</comment>
    <target refid="class-lineedit"></target>
    <section ids="lineedit class-lineedit" names="lineedit class_lineedit">
        <title>LineEdit</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>单行文本的输入字段。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>LineEdit</strong> 提供了一个单行文本的输入字段，提供了许多始终可用的内置快捷键（此处的 <literal classes="kbd">Ctrl</literal> 在 macOS 上会映射到 <literal classes="kbd">Cmd</literal>）：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + C</literal>：复制</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + X</literal>：剪切</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + V</literal> 或 <literal classes="kbd">Ctrl + Y</literal>：粘贴/“拉扯”n</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + Z</literal>：撤销</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + ~</literal>：交换输入方向</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + Shift + Z</literal>：重做</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + U</literal>：删除从文本光标位置到行首的文本</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + K</literal>：删除从文本光标位置到行尾的文本</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + A</literal>：选择所有文本</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Up Arrow</literal>/<literal classes="kbd">Down Arrow</literal>：将文本光标移动到行首/行尾</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在 macOS 上，有一些额外的键盘快捷键可用：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + F</literal>：同 <literal classes="kbd">Right Arrow</literal>，将文本光标向右移动一个字符</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + B</literal>：同 <literal classes="kbd">Left Arrow</literal>，将文本光标向左移动一个字符</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + P</literal>：同 <literal classes="kbd">Up Arrow</literal>，将文本光标移动到上一行</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + N</literal>：同 <literal classes="kbd">Down Arrow</literal>，将文本光标移动到下一行</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + D</literal>：同 <literal classes="kbd">Delete</literal>，删除文本光标右侧的字符</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + H</literal>：同 <literal classes="kbd">Backspace</literal>，删除文本光标左侧的字符</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + A</literal>：同 <literal classes="kbd">Home</literal>，将文本光标移动到行首</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Ctrl + E</literal>：同 <literal classes="kbd">End</literal>，将文本光标移动到行首尾</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Cmd + Left Arrow</literal>：同 <literal classes="kbd">Home</literal>，将文本光标移动到行首</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="kbd">Cmd + Right Arrow</literal>：同 <literal classes="kbd">End</literal>，将文本光标移动到行尾</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="67"></colspec>
                    <colspec colwidth="109"></colspec>
                    <colspec colwidth="85"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-alignment"><inline classes="std std-ref">alignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-caret-blink"><inline classes="std std-ref">caret_blink</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-caret-blink-interval"><inline classes="std std-ref">caret_blink_interval</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.65</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-caret-column"><inline classes="std std-ref">caret_column</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-caret-force-displayed"><inline classes="std std-ref">caret_force_displayed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-caret-mid-grapheme"><inline classes="std std-ref">caret_mid_grapheme</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-clear-button-enabled"><inline classes="std std-ref">clear_button_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-context-menu-enabled"><inline classes="std std-ref">context_menu_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-deselect-on-focus-loss-enabled"><inline classes="std std-ref">deselect_on_focus_loss_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-drag-and-drop-selection-enabled"><inline classes="std std-ref">drag_and_drop_selection_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-draw-control-chars"><inline classes="std std-ref">draw_control_chars</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-editable"><inline classes="std std-ref">editable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-expand-to-text-length"><inline classes="std std-ref">expand_to_text_length</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-flat"><inline classes="std std-ref">flat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-focusmode"><inline classes="std std-ref">FocusMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>focus_mode</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-focus-mode"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-language"><inline classes="std std-ref">language</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-max-length"><inline classes="std std-ref">max_length</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-middle-mouse-paste-enabled"><inline classes="std std-ref">middle_mouse_paste_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>mouse_default_cursor_shape</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-mouse-default-cursor-shape"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-placeholder-text"><inline classes="std std-ref">placeholder_text</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-right-icon"><inline classes="std std-ref">right_icon</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-secret"><inline classes="std std-ref">secret</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-secret-character"><inline classes="std std-ref">secret_character</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>"•"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-select-all-on-focus"><inline classes="std std-ref">select_all_on_focus</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-selecting-enabled"><inline classes="std std-ref">selecting_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-shortcut-keys-enabled"><inline classes="std std-ref">shortcut_keys_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-structured-text-bidi-override"><inline classes="std std-ref">structured_text_bidi_override</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-structured-text-bidi-override-options"><inline classes="std std-ref">structured_text_bidi_override_options</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-text"><inline classes="std std-ref">text</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-text-direction"><inline classes="std std-ref">text_direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-virtual-keyboard-enabled"><inline classes="std std-ref">virtual_keyboard_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-property-virtual-keyboard-type"><inline classes="std std-ref">virtual_keyboard_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="133"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-delete-char-at-caret"><inline classes="std std-ref">delete_char_at_caret</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-delete-text"><inline classes="std std-ref">delete_text</inline></reference>(from_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-deselect"><inline classes="std std-ref">deselect</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-get-menu"><inline classes="std std-ref">get_menu</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-get-scroll-offset"><inline classes="std std-ref">get_scroll_offset</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-get-selected-text"><inline classes="std std-ref">get_selected_text</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-get-selection-from-column"><inline classes="std std-ref">get_selection_from_column</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-get-selection-to-column"><inline classes="std std-ref">get_selection_to_column</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-has-selection"><inline classes="std std-ref">has_selection</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-insert-text-at-caret"><inline classes="std std-ref">insert_text_at_caret</inline></reference>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-is-menu-visible"><inline classes="std std-ref">is_menu_visible</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-menu-option"><inline classes="std std-ref">menu_option</inline></reference>(option: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-select"><inline classes="std std-ref">select</inline></reference>(from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, to: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-method-select-all"><inline classes="std std-ref">select_all</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="主题属性">
            <title>主题属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="90"></colspec>
                    <colspec colwidth="37"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-color-caret-color"><inline classes="std std-ref">caret_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.95, 0.95, 0.95, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-color-clear-button-color"><inline classes="std std-ref">clear_button_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-color-clear-button-color-pressed"><inline classes="std std-ref">clear_button_color_pressed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-color-font-color"><inline classes="std std-ref">font_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-color-font-outline-color"><inline classes="std std-ref">font_outline_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-color-font-placeholder-color"><inline classes="std std-ref">font_placeholder_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 0.6)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-color-font-selected-color"><inline classes="std std-ref">font_selected_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-color-font-uneditable-color"><inline classes="std std-ref">font_uneditable_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 0.5)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-color-selection-color"><inline classes="std std-ref">selection_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.5, 0.5, 0.5, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-constant-caret-width"><inline classes="std std-ref">caret_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-constant-minimum-character-width"><inline classes="std std-ref">minimum_character_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-font-font"><inline classes="std std-ref">font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-font-size-font-size"><inline classes="std std-ref">font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-icon-clear"><inline classes="std std-ref">clear</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-style-focus"><inline classes="std std-ref">focus</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-style-normal"><inline classes="std std-ref">normal</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-lineedit-theme-style-read-only"><inline classes="std std-ref">read_only</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-lineedit-signal-text-change-rejected"></target>
            <paragraph classes="classref-signal" ids="class-lineedit-signal-text-change-rejected" names="class_lineedit_signal_text_change_rejected"><strong>text_change_rejected</strong>(rejected_substring: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-lineedit-signal-text-change-rejected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当追加的文本超过了 <reference internal="True" refid="class-lineedit-property-max-length"><inline classes="std std-ref">max_length</inline></reference> 时触发。追加后的文本会被截断以适应 <reference internal="True" refid="class-lineedit-property-max-length"><inline classes="std std-ref">max_length</inline></reference>，超出的部分会被作为 <literal>rejected_substring</literal> 参数传递。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-signal-text-changed"></target>
            <paragraph classes="classref-signal" ids="class-lineedit-signal-text-changed" names="class_lineedit_signal_text_changed"><strong>text_changed</strong>(new_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-lineedit-signal-text-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当文本更改时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-signal-text-submitted"></target>
            <paragraph classes="classref-signal" ids="class-lineedit-signal-text-submitted" names="class_lineedit_signal_text_submitted"><strong>text_submitted</strong>(new_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-lineedit-signal-text-submitted"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户在 <strong>LineEdit</strong> 上按 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-key-enter"><inline classes="std std-ref">@GlobalScope.KEY_ENTER</inline></reference> 时触发。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-lineedit-menuitems"></target>
            <paragraph classes="classref-enumeration" ids="enum-lineedit-menuitems" names="enum_lineedit_menuitems">enum <strong>MenuItems</strong>: <reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-lineedit-constant-menu-cut"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-cut" names="class_lineedit_constant_menu_cut"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_CUT</strong> = <literal>0</literal></paragraph>
            <paragraph>剪切（复制并删除）选中的文本。</paragraph>
            <target refid="class-lineedit-constant-menu-copy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-copy" names="class_lineedit_constant_menu_copy"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_COPY</strong> = <literal>1</literal></paragraph>
            <paragraph>复制选中的文本。</paragraph>
            <target refid="class-lineedit-constant-menu-paste"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-paste" names="class_lineedit_constant_menu_paste"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_PASTE</strong> = <literal>2</literal></paragraph>
            <paragraph>将剪贴板中的文本粘贴到选中文本之上（或者文本光标位置）。</paragraph>
            <paragraph>会使用 <reference internal="True" refuri="class_string#class-string-method-strip-escapes"><inline classes="std std-ref">String.strip_escapes</inline></reference> 自动剥离操作系统剪贴板中不可打印的转义字符。</paragraph>
            <target refid="class-lineedit-constant-menu-clear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-clear" names="class_lineedit_constant_menu_clear"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_CLEAR</strong> = <literal>3</literal></paragraph>
            <paragraph>删除 <strong>LineEdit</strong> 中的全部文本。</paragraph>
            <target refid="class-lineedit-constant-menu-select-all"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-select-all" names="class_lineedit_constant_menu_select_all"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_SELECT_ALL</strong> = <literal>4</literal></paragraph>
            <paragraph>选中 <strong>LineEdit</strong> 中的全部文本。</paragraph>
            <target refid="class-lineedit-constant-menu-undo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-undo" names="class_lineedit_constant_menu_undo"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_UNDO</strong> = <literal>5</literal></paragraph>
            <paragraph>撤销之前的操作。</paragraph>
            <target refid="class-lineedit-constant-menu-redo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-redo" names="class_lineedit_constant_menu_redo"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_REDO</strong> = <literal>6</literal></paragraph>
            <paragraph>反转最后一个撤销动作。</paragraph>
            <target refid="class-lineedit-constant-menu-submenu-text-dir"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-submenu-text-dir" names="class_lineedit_constant_menu_submenu_text_dir"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_SUBMENU_TEXT_DIR</strong> = <literal>7</literal></paragraph>
            <paragraph>“文本书写方向”子菜单的 ID。</paragraph>
            <target refid="class-lineedit-constant-menu-dir-inherited"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-dir-inherited" names="class_lineedit_constant_menu_dir_inherited"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_DIR_INHERITED</strong> = <literal>8</literal></paragraph>
            <paragraph>将文本方向设置为继承。</paragraph>
            <target refid="class-lineedit-constant-menu-dir-auto"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-dir-auto" names="class_lineedit_constant_menu_dir_auto"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_DIR_AUTO</strong> = <literal>9</literal></paragraph>
            <paragraph>将文本方向设置为自动。</paragraph>
            <target refid="class-lineedit-constant-menu-dir-ltr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-dir-ltr" names="class_lineedit_constant_menu_dir_ltr"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_DIR_LTR</strong> = <literal>10</literal></paragraph>
            <paragraph>将文本方向设置为从左至右。</paragraph>
            <target refid="class-lineedit-constant-menu-dir-rtl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-dir-rtl" names="class_lineedit_constant_menu_dir_rtl"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_DIR_RTL</strong> = <literal>11</literal></paragraph>
            <paragraph>将文本方向设置为从右至左。</paragraph>
            <target refid="class-lineedit-constant-menu-display-ucc"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-display-ucc" names="class_lineedit_constant_menu_display_ucc"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_DISPLAY_UCC</strong> = <literal>12</literal></paragraph>
            <paragraph>切换控制字符的显示。</paragraph>
            <target refid="class-lineedit-constant-menu-submenu-insert-ucc"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-submenu-insert-ucc" names="class_lineedit_constant_menu_submenu_insert_ucc"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_SUBMENU_INSERT_UCC</strong> = <literal>13</literal></paragraph>
            <paragraph>“插入控制字符”子菜单的 ID。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-lrm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-lrm" names="class_lineedit_constant_menu_insert_lrm"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_LRM</strong> = <literal>14</literal></paragraph>
            <paragraph>插入从左至右标志（LRM）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-rlm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-rlm" names="class_lineedit_constant_menu_insert_rlm"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_RLM</strong> = <literal>15</literal></paragraph>
            <paragraph>插入从右至左标志（LRM）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-lre"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-lre" names="class_lineedit_constant_menu_insert_lre"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_LRE</strong> = <literal>16</literal></paragraph>
            <paragraph>插入开始从左至右嵌入（LRE）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-rle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-rle" names="class_lineedit_constant_menu_insert_rle"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_RLE</strong> = <literal>17</literal></paragraph>
            <paragraph>插入开始从右至左嵌入（RLE）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-lro"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-lro" names="class_lineedit_constant_menu_insert_lro"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_LRO</strong> = <literal>18</literal></paragraph>
            <paragraph>插入开始从左至右强制（LRO）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-rlo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-rlo" names="class_lineedit_constant_menu_insert_rlo"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_RLO</strong> = <literal>19</literal></paragraph>
            <paragraph>插入开始从右至左嵌入（RLE）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-pdf"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-pdf" names="class_lineedit_constant_menu_insert_pdf"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_PDF</strong> = <literal>20</literal></paragraph>
            <paragraph>插入退出方向格式化（PDF）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-alm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-alm" names="class_lineedit_constant_menu_insert_alm"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_ALM</strong> = <literal>21</literal></paragraph>
            <paragraph>插入阿拉伯字母标记（ALM）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-lri"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-lri" names="class_lineedit_constant_menu_insert_lri"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_LRI</strong> = <literal>22</literal></paragraph>
            <paragraph>插入从左至右隔离（LRI）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-rli"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-rli" names="class_lineedit_constant_menu_insert_rli"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_RLI</strong> = <literal>23</literal></paragraph>
            <paragraph>插入从右至左隔离（RLI）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-fsi"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-fsi" names="class_lineedit_constant_menu_insert_fsi"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_FSI</strong> = <literal>24</literal></paragraph>
            <paragraph>插入第一个强隔离（FSI）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-pdi"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-pdi" names="class_lineedit_constant_menu_insert_pdi"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_PDI</strong> = <literal>25</literal></paragraph>
            <paragraph>插入退出方向隔离（PDI）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-zwj"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-zwj" names="class_lineedit_constant_menu_insert_zwj"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_ZWJ</strong> = <literal>26</literal></paragraph>
            <paragraph>插入零宽连接符（ZWJ）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-zwnj"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-zwnj" names="class_lineedit_constant_menu_insert_zwnj"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_ZWNJ</strong> = <literal>27</literal></paragraph>
            <paragraph>插入零宽非连接符（ZWNJ）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-wj"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-wj" names="class_lineedit_constant_menu_insert_wj"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_WJ</strong> = <literal>28</literal></paragraph>
            <paragraph>插入文字连接符（WJ）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-insert-shy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-insert-shy" names="class_lineedit_constant_menu_insert_shy"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_INSERT_SHY</strong> = <literal>29</literal></paragraph>
            <paragraph>插入软连字符（SHY）字符。</paragraph>
            <target refid="class-lineedit-constant-menu-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-menu-max" names="class_lineedit_constant_menu_max"><reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_MAX</strong> = <literal>30</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-lineedit-virtualkeyboardtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-lineedit-virtualkeyboardtype" names="enum_lineedit_virtualkeyboardtype">enum <strong>VirtualKeyboardType</strong>: <reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-lineedit-constant-keyboard-type-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-keyboard-type-default" names="class_lineedit_constant_keyboard_type_default"><reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_DEFAULT</strong> = <literal>0</literal></paragraph>
            <paragraph>默认文本虚拟键盘。</paragraph>
            <target refid="class-lineedit-constant-keyboard-type-multiline"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-keyboard-type-multiline" names="class_lineedit_constant_keyboard_type_multiline"><reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_MULTILINE</strong> = <literal>1</literal></paragraph>
            <paragraph>多行虚拟键盘。</paragraph>
            <target refid="class-lineedit-constant-keyboard-type-number"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-keyboard-type-number" names="class_lineedit_constant_keyboard_type_number"><reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_NUMBER</strong> = <literal>2</literal></paragraph>
            <paragraph>虚拟数字键盘，可用于 PIN 输入。</paragraph>
            <target refid="class-lineedit-constant-keyboard-type-number-decimal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-keyboard-type-number-decimal" names="class_lineedit_constant_keyboard_type_number_decimal"><reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_NUMBER_DECIMAL</strong> = <literal>3</literal></paragraph>
            <paragraph>虚拟数字键盘，可用于输入小数。</paragraph>
            <target refid="class-lineedit-constant-keyboard-type-phone"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-keyboard-type-phone" names="class_lineedit_constant_keyboard_type_phone"><reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_PHONE</strong> = <literal>4</literal></paragraph>
            <paragraph>虚拟手机号码键盘。</paragraph>
            <target refid="class-lineedit-constant-keyboard-type-email-address"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-keyboard-type-email-address" names="class_lineedit_constant_keyboard_type_email_address"><reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_EMAIL_ADDRESS</strong> = <literal>5</literal></paragraph>
            <paragraph>带有附加键的虚拟键盘，可帮助输入电子邮件地址。</paragraph>
            <target refid="class-lineedit-constant-keyboard-type-password"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-keyboard-type-password" names="class_lineedit_constant_keyboard_type_password"><reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_PASSWORD</strong> = <literal>6</literal></paragraph>
            <paragraph>用于输入密码的虚拟键盘。在大多数平台上，这应该会禁用自动完成和自动首字母大写功能。</paragraph>
            <paragraph><strong>注意：</strong>Web 平台不支持。与 <reference internal="True" refid="class-lineedit-constant-keyboard-type-default"><inline classes="std std-ref">KEYBOARD_TYPE_DEFAULT</inline></reference> 的行为相同。</paragraph>
            <target refid="class-lineedit-constant-keyboard-type-url"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-lineedit-constant-keyboard-type-url" names="class_lineedit_constant_keyboard_type_url"><reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_URL</strong> = <literal>7</literal></paragraph>
            <paragraph>带有附加键的虚拟键盘，可帮助输入 URL。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-lineedit-property-alignment"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-alignment" names="class_lineedit_property_alignment"><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>alignment</strong> = <literal>0</literal> <reference internal="True" refid="class-lineedit-property-alignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_horizontal_alignment</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>get_horizontal_alignment</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本对齐方式，由 <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> 枚举定义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-caret-blink"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-caret-blink" names="class_lineedit_property_caret_blink"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>caret_blink</strong> = <literal>false</literal> <reference internal="True" refid="class-lineedit-property-caret-blink"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_caret_blink_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_caret_blink_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则文本光标会闪烁。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-caret-blink-interval"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-caret-blink-interval" names="class_lineedit_property_caret_blink_interval"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>caret_blink_interval</strong> = <literal>0.65</literal> <reference internal="True" refid="class-lineedit-property-caret-blink-interval"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_caret_blink_interval</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_caret_blink_interval</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本光标的闪烁间隔（单位为秒）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-caret-column"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-caret-column" names="class_lineedit_property_caret_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>caret_column</strong> = <literal>0</literal> <reference internal="True" refid="class-lineedit-property-caret-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_caret_column</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_caret_column</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>LineEdit</strong> 中光标的列位置。设置后文本可能会滚动以适应它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-caret-force-displayed"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-caret-force-displayed" names="class_lineedit_property_caret_force_displayed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>caret_force_displayed</strong> = <literal>false</literal> <reference internal="True" refid="class-lineedit-property-caret-force-displayed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_caret_force_displayed</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_caret_force_displayed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 <strong>LineEdit</strong> 会始终显示光标，即使焦点丢失。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-caret-mid-grapheme"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-caret-mid-grapheme" names="class_lineedit_property_caret_mid_grapheme"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>caret_mid_grapheme</strong> = <literal>false</literal> <reference internal="True" refid="class-lineedit-property-caret-mid-grapheme"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_caret_mid_grapheme_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_caret_mid_grapheme_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>允许在单个复合字符的组件中进行移动光标、选中、删除的操作。</paragraph>
            <paragraph><strong>注意：</strong>退格键 <literal classes="kbd">Backspace</literal> 始终按复合字符的组件删除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-clear-button-enabled"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-clear-button-enabled" names="class_lineedit_property_clear_button_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>clear_button_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-lineedit-property-clear-button-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clear_button_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_clear_button_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，<strong>LineEdit</strong> 将在 <reference internal="True" refid="class-lineedit-property-text"><inline classes="std std-ref">text</inline></reference> 非空时显示清空按钮，可以用来快速清除文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-context-menu-enabled"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-context-menu-enabled" names="class_lineedit_property_context_menu_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>context_menu_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-lineedit-property-context-menu-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_context_menu_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_context_menu_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，右键单击将出现上下文菜单。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-deselect-on-focus-loss-enabled"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-deselect-on-focus-loss-enabled" names="class_lineedit_property_deselect_on_focus_loss_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>deselect_on_focus_loss_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-lineedit-property-deselect-on-focus-loss-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_deselect_on_focus_loss_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_deselect_on_focus_loss_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在丢失焦点时会取消选中文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-drag-and-drop-selection-enabled"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-drag-and-drop-selection-enabled" names="class_lineedit_property_drag_and_drop_selection_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>drag_and_drop_selection_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-lineedit-property-drag-and-drop-selection-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_and_drop_selection_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drag_and_drop_selection_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则允许拖放选中的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-draw-control-chars"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-draw-control-chars" names="class_lineedit_property_draw_control_chars"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>draw_control_chars</strong> = <literal>false</literal> <reference internal="True" refid="class-lineedit-property-draw-control-chars"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_control_chars</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_control_chars</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会显示控制字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-editable"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-editable" names="class_lineedit_property_editable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>editable</strong> = <literal>true</literal> <reference internal="True" refid="class-lineedit-property-editable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_editable</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_editable</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>false</literal>，则不能修改现在的文本，也不能添加新文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-expand-to-text-length"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-expand-to-text-length" names="class_lineedit_property_expand_to_text_length"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>expand_to_text_length</strong> = <literal>false</literal> <reference internal="True" refid="class-lineedit-property-expand-to-text-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_expand_to_text_length_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_expand_to_text_length_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 <strong>LineEdit</strong> 宽度将增加到比 <reference internal="True" refid="class-lineedit-property-text"><inline classes="std std-ref">text</inline></reference> 长。如果 <reference internal="True" refid="class-lineedit-property-text"><inline classes="std std-ref">text</inline></reference> 被缩短，它将<strong>不</strong>压缩。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-flat"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-flat" names="class_lineedit_property_flat"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>flat</strong> = <literal>false</literal> <reference internal="True" refid="class-lineedit-property-flat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flat</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_flat</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 <strong>LineEdit</strong> 不显示装饰。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-language"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-language" names="class_lineedit_property_language"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>language</strong> = <literal>""</literal> <reference internal="True" refid="class-lineedit-property-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_language</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_language</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>语言代码，用于断行和文本塑形算法。如果留空则使用当前区域设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-max-length"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-max-length" names="class_lineedit_property_max_length"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_length</strong> = <literal>0</literal> <reference internal="True" refid="class-lineedit-property-max-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_length</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_length</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>LineEdit</strong> 中可以输入的最大字符数。如果为 <literal>0</literal>，则没有限制。</paragraph>
            <paragraph>定义限制后，将截断超过 <reference internal="True" refid="class-lineedit-property-max-length"><inline classes="std std-ref">max_length</inline></reference> 的字符。在设置最大长度时，将适用于现有的 <reference internal="True" refid="class-lineedit-property-text"><inline classes="std std-ref">text</inline></reference> 内容，以及在 <strong>LineEdit</strong> 中插入、包括粘贴进来的新文本。如果任何输入文本被截断，<reference internal="True" refid="class-lineedit-signal-text-change-rejected"><inline classes="std std-ref">text_change_rejected</inline></reference> 信号将以截断的子字符串作为参数发出。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">text = "Hello world"
max_length = 5
# `text` 变为 "Hello"。
max_length = 10
text += " goodbye"
# `text` 变为 "Hello good"。
# `text_change_rejected` 以 "bye" 作为参数发出。</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Text = "Hello world";
MaxLength = 5;
// `Text` 变为 "Hello"。
MaxLength = 10;
Text += " goodbye";
// `text` 变为 "Hello good"。
// `text_change_rejected` 以 "bye" 作为参数发出。</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-middle-mouse-paste-enabled"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-middle-mouse-paste-enabled" names="class_lineedit_property_middle_mouse_paste_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>middle_mouse_paste_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-lineedit-property-middle-mouse-paste-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_middle_mouse_paste_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_middle_mouse_paste_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>false</literal>，将禁用鼠标中键粘贴剪贴板。</paragraph>
            <paragraph><strong>注意：</strong>这个方法只在 Linux 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-placeholder-text"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-placeholder-text" names="class_lineedit_property_placeholder_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>placeholder_text</strong> = <literal>""</literal> <reference internal="True" refid="class-lineedit-property-placeholder-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_placeholder</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_placeholder</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当 <strong>LineEdit</strong> 为空时显示的文本。它<strong>不是</strong> <strong>LineEdit</strong> 的默认值（见 <reference internal="True" refid="class-lineedit-property-text"><inline classes="std std-ref">text</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-right-icon"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-right-icon" names="class_lineedit_property_right_icon"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>right_icon</strong> <reference internal="True" refid="class-lineedit-property-right-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_right_icon</strong>(value: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_right_icon</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置 <strong>LineEdit</strong> 右端的图标，这个图标会在没有 <reference internal="True" refid="class-lineedit-property-text"><inline classes="std std-ref">text</inline></reference> 时出现，如果 <reference internal="True" refid="class-lineedit-property-clear-button-enabled"><inline classes="std std-ref">clear_button_enabled</inline></reference> 为 <literal>false</literal> 则始终可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-secret"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-secret" names="class_lineedit_property_secret"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>secret</strong> = <literal>false</literal> <reference internal="True" refid="class-lineedit-property-secret"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_secret</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_secret</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则每个字符都会被替换成密码字符（见 <reference internal="True" refid="class-lineedit-property-secret-character"><inline classes="std std-ref">secret_character</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-secret-character"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-secret-character" names="class_lineedit_property_secret_character"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>secret_character</strong> = <literal>"•"</literal> <reference internal="True" refid="class-lineedit-property-secret-character"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_secret_character</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_secret_character</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于掩盖秘密输入的字符。只能用单个字符作为秘密字符。如果长度超过一个字符，则仅使用第一个字符。如果为空，则使用空格代替。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-select-all-on-focus"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-select-all-on-focus" names="class_lineedit_property_select_all_on_focus"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>select_all_on_focus</strong> = <literal>false</literal> <reference internal="True" refid="class-lineedit-property-select-all-on-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_select_all_on_focus</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_select_all_on_focus</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在获得焦点时会全选文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-selecting-enabled"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-selecting-enabled" names="class_lineedit_property_selecting_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>selecting_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-lineedit-property-selecting-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_selecting_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_selecting_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>false</literal>，则无法用鼠标或键盘选择文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-shortcut-keys-enabled"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-shortcut-keys-enabled" names="class_lineedit_property_shortcut_keys_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shortcut_keys_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-lineedit-property-shortcut-keys-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_shortcut_keys_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_shortcut_keys_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>false</literal>，快捷键将被禁用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-structured-text-bidi-override"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-structured-text-bidi-override" names="class_lineedit_property_structured_text_bidi_override"><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>structured_text_bidi_override</strong> = <literal>0</literal> <reference internal="True" refid="class-lineedit-property-structured-text-bidi-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_structured_text_bidi_override</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>get_structured_text_bidi_override</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为结构化文本设置 BiDi 算法覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-structured-text-bidi-override-options"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-structured-text-bidi-override-options" names="class_lineedit_property_structured_text_bidi_override_options"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>structured_text_bidi_override_options</strong> = <literal>[]</literal> <reference internal="True" refid="class-lineedit-property-structured-text-bidi-override-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_structured_text_bidi_override_options</strong>(value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_structured_text_bidi_override_options</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置 BiDi 覆盖的附加选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-text"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-text" names="class_lineedit_property_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>text</strong> = <literal>""</literal> <reference internal="True" refid="class-lineedit-property-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_text</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>LineEdit</strong> 的字符串值。</paragraph>
            <paragraph><strong>注意：</strong>使用这个属性更改文本不会触发 <reference internal="True" refid="class-lineedit-signal-text-changed"><inline classes="std std-ref">text_changed</inline></reference> 信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-text-direction"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-text-direction" names="class_lineedit_property_text_direction"><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>text_direction</strong> = <literal>0</literal> <reference internal="True" refid="class-lineedit-property-text-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_direction</strong>(value: <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>get_text_direction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>基础文本书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-virtual-keyboard-enabled"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-virtual-keyboard-enabled" names="class_lineedit_property_virtual_keyboard_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>virtual_keyboard_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-lineedit-property-virtual-keyboard-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_virtual_keyboard_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_virtual_keyboard_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在获得焦点时会在支持的平台上显示原生虚拟键盘。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-property-virtual-keyboard-type"></target>
            <paragraph classes="classref-property" ids="class-lineedit-property-virtual-keyboard-type" names="class_lineedit_property_virtual_keyboard_type"><reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>virtual_keyboard_type</strong> = <literal>0</literal> <reference internal="True" refid="class-lineedit-property-virtual-keyboard-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_virtual_keyboard_type</strong>(value: <reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-lineedit-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>get_virtual_keyboard_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定要显示的虚拟键盘的类型。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-lineedit-method-clear"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-clear" names="class_lineedit_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-lineedit-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>擦除 <strong>LineEdit</strong> 的 <reference internal="True" refid="class-lineedit-property-text"><inline classes="std std-ref">text</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-delete-char-at-caret"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-delete-char-at-caret" names="class_lineedit_method_delete_char_at_caret"><abbreviation explanation="无返回值。">void</abbreviation> <strong>delete_char_at_caret</strong>() <reference internal="True" refid="class-lineedit-method-delete-char-at-caret"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除光标当前位置处的一个字符（相当于按 <literal classes="kbd">Delete</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-delete-text"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-delete-text" names="class_lineedit_method_delete_text"><abbreviation explanation="无返回值。">void</abbreviation> <strong>delete_text</strong>(from_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-lineedit-method-delete-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除 <reference internal="True" refid="class-lineedit-property-text"><inline classes="std std-ref">text</inline></reference> 中从起始列 <literal>from_column</literal> 到结束列 <literal>to_column</literal> 的部分。两个参数都应该在文本的长度之内。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-deselect"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-deselect" names="class_lineedit_method_deselect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>deselect</strong>() <reference internal="True" refid="class-lineedit-method-deselect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除当前选择。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-get-menu"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-get-menu" names="class_lineedit_method_get_menu"><reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> <strong>get_menu</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-lineedit-method-get-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>LineEdit</strong> 的 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference>。默认情况下，右键点击 <strong>LineEdit</strong> 会显示该菜单。</paragraph>
            <paragraph>可以添加自定义菜单项或移除标准菜单项。确保你的 ID 不与标准 ID 冲突（请参阅 <reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference>）。例如：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    var menu = get_menu()
    # 在“重做”之后移除所有项目。
    menu.item_count = menu.get_item_index(MENU_REDO) + 1
    # 添加自定义项目。
    menu.add_separator()
    menu.add_item("Insert Date", MENU_MAX + 1)
    # 连接回调。
    menu.id_pressed.connect(_on_item_pressed)

func _on_item_pressed(id):
    if id == MENU_MAX + 1:
        insert_text_at_caret(Time.get_date_string_from_system())</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    var menu = GetMenu();
    // 在“重做”之后移除所有项目。
    menu.ItemCount = menu.GetItemIndex(LineEdit.MenuItems.Redo) + 1;
    // 添加自定义项目。
    menu.AddSeparator();
    menu.AddItem("Insert Date", LineEdit.MenuItems.Max + 1);
    // 添加事件处理器。
    menu.IdPressed += OnItemPressed;
}

public void OnItemPressed(int id)
{
    if (id == LineEdit.MenuItems.Max + 1)
    {
        InsertTextAtCaret(Time.GetDateStringFromSystem());
    }
}</literal_block>
                </div>
            </container>
            <paragraph><strong>警告：</strong>这是一个必需的内部节点，移除和释放它可能会导致崩溃。如果希望隐藏它或它的任何子节点，请使用它们的 <reference internal="True" refuri="class_window#class-window-property-visible"><inline classes="std std-ref">Window.visible</inline></reference> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-get-scroll-offset"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-get-scroll-offset" names="class_lineedit_method_get_scroll_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_scroll_offset</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-lineedit-method-get-scroll-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-lineedit-property-caret-column"><inline classes="std std-ref">caret_column</inline></reference> 引起的滚动偏移量，单位为字符数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-get-selected-text"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-get-selected-text" names="class_lineedit_method_get_selected_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_selected_text</strong>() <reference internal="True" refid="class-lineedit-method-get-selected-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回选择内的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-get-selection-from-column"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-get-selection-from-column" names="class_lineedit_method_get_selection_from_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_from_column</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-lineedit-method-get-selection-from-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回选择的开始列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-get-selection-to-column"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-get-selection-to-column" names="class_lineedit_method_get_selection_to_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_to_column</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-lineedit-method-get-selection-to-column"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回选择结束列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-has-selection"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-has-selection" names="class_lineedit_method_has_selection"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_selection</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-lineedit-method-has-selection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果用户选中了文本，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-insert-text-at-caret"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-insert-text-at-caret" names="class_lineedit_method_insert_text_at_caret"><abbreviation explanation="无返回值。">void</abbreviation> <strong>insert_text_at_caret</strong>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-lineedit-method-insert-text-at-caret"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在光标处插入文本 <literal>text</literal>。如果最终值比 <reference internal="True" refid="class-lineedit-property-max-length"><inline classes="std std-ref">max_length</inline></reference> 长，则不会发生任何事情。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-is-menu-visible"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-is-menu-visible" names="class_lineedit_method_is_menu_visible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_menu_visible</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-lineedit-method-is-menu-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回菜单是否可见。请使用这个方法来代替 <literal>get_menu().visible</literal>，可以提高性能（因为避免了菜单的创建）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-menu-option"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-menu-option" names="class_lineedit_method_menu_option"><abbreviation explanation="无返回值。">void</abbreviation> <strong>menu_option</strong>(option: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-lineedit-method-menu-option"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>执行 <reference internal="True" refid="enum-lineedit-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> 枚举中定义的给定操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-select"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-select" names="class_lineedit_method_select"><abbreviation explanation="无返回值。">void</abbreviation> <strong>select</strong>(from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, to: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-lineedit-method-select"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选择 <strong>LineEdit</strong> 内介于 <literal>from</literal> 和 <literal>to</literal> 之间的字符。默认情况下，<literal>from</literal> 位于开头，<literal>to</literal> 位于结尾。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">text = "Welcome"
select() # 将选择“Welcome”。
select(4) # 将选择“ome”。
select(2, 5) # 将选择“lco”。</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Text = "Welcome";
Select(); // 将选择“Welcome”。
Select(4); // 将选择“ome”。
Select(2, 5); // 将选择“lco”。</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-method-select-all"></target>
            <paragraph classes="classref-method" ids="class-lineedit-method-select-all" names="class_lineedit_method_select_all"><abbreviation explanation="无返回值。">void</abbreviation> <strong>select_all</strong>() <reference internal="True" refid="class-lineedit-method-select-all"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选中整个 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="主题属性说明">
            <title>主题属性说明</title>
            <target refid="class-lineedit-theme-color-caret-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-color-caret-color" names="class_lineedit_theme_color_caret_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>caret_color</strong> = <literal>Color(0.95, 0.95, 0.95, 1)</literal> <reference internal="True" refid="class-lineedit-theme-color-caret-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>LineEdit</strong> 的插入符号（文本光标）的颜色。可以设置为完全透明的颜色，从而完全隐藏光标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-color-clear-button-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-color-clear-button-color" names="class_lineedit_theme_color_clear_button_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>clear_button_color</strong> = <literal>Color(0.875, 0.875, 0.875, 1)</literal> <reference internal="True" refid="class-lineedit-theme-color-clear-button-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用作清除按钮默认色调的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-color-clear-button-color-pressed"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-color-clear-button-color-pressed" names="class_lineedit_theme_color_clear_button_color_pressed"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>clear_button_color_pressed</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-lineedit-theme-color-clear-button-color-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>按下清除按钮时使用的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-color-font-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-color-font-color" names="class_lineedit_theme_color_font_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_color</strong> = <literal>Color(0.875, 0.875, 0.875, 1)</literal> <reference internal="True" refid="class-lineedit-theme-color-font-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>默认字体颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-color-font-outline-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-color-font-outline-color" names="class_lineedit_theme_color_font_outline_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_outline_color</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-lineedit-theme-color-font-outline-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>LineEdit</strong> 文本轮廓的色调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-color-font-placeholder-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-color-font-placeholder-color" names="class_lineedit_theme_color_font_placeholder_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_placeholder_color</strong> = <literal>Color(0.875, 0.875, 0.875, 0.6)</literal> <reference internal="True" refid="class-lineedit-theme-color-font-placeholder-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refid="class-lineedit-property-placeholder-text"><inline classes="std std-ref">placeholder_text</inline></reference> 的字体颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-color-font-selected-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-color-font-selected-color" names="class_lineedit_theme_color_font_selected_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_selected_color</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-lineedit-theme-color-font-selected-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选定文本的字体颜色（在选择矩形内）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-color-font-uneditable-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-color-font-uneditable-color" names="class_lineedit_theme_color_font_uneditable_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_uneditable_color</strong> = <literal>Color(0.875, 0.875, 0.875, 0.5)</literal> <reference internal="True" refid="class-lineedit-theme-color-font-uneditable-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>禁用编辑时的字体颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-color-selection-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-color-selection-color" names="class_lineedit_theme_color_selection_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>selection_color</strong> = <literal>Color(0.5, 0.5, 0.5, 1)</literal> <reference internal="True" refid="class-lineedit-theme-color-selection-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选择矩形的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-constant-caret-width"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-constant-caret-width" names="class_lineedit_theme_constant_caret_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>caret_width</strong> = <literal>1</literal> <reference internal="True" refid="class-lineedit-theme-constant-caret-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文本光标的像素宽度。使用较大的数值可以提高可访问性，使文本光标更加显眼，或者确保文本与较大字体尺寸的一致性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-constant-minimum-character-width"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-constant-minimum-character-width" names="class_lineedit_theme_constant_minimum_character_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>minimum_character_width</strong> = <literal>4</literal> <reference internal="True" refid="class-lineedit-theme-constant-minimum-character-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文本的最小水平空间（不包括清除按钮和内容边距）。这个值以“M”字符的数量来衡量（即能够在不滚动的情况下显示这么多个“M”字符）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-constant-outline-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-constant-outline-size" names="class_lineedit_theme_constant_outline_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>outline_size</strong> = <literal>0</literal> <reference internal="True" refid="class-lineedit-theme-constant-outline-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文字轮廓的大小。</paragraph>
            <paragraph><strong>注意：</strong>如果使用启用了 <reference internal="True" refuri="class_fontfile#class-fontfile-property-multichannel-signed-distance-field"><inline classes="std std-ref">FontFile.multichannel_signed_distance_field</inline></reference> 的字体，其 <reference internal="True" refuri="class_fontfile#class-fontfile-property-msdf-pixel-range"><inline classes="std std-ref">FontFile.msdf_pixel_range</inline></reference> 必须至少设置为 <reference internal="True" refid="class-lineedit-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference> 的<emphasis>两倍</emphasis>，轮廓渲染才能看起来正确。否则，轮廓可能会比预期的更早被切断。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-font-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-font-font" names="class_lineedit_theme_font_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>font</strong> <reference internal="True" refid="class-lineedit-theme-font-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文本使用的字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-font-size-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-font-size-font-size" names="class_lineedit_theme_font_size_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_size</strong> <reference internal="True" refid="class-lineedit-theme-font-size-font-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>LineEdit</strong> 文本的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-icon-clear"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-icon-clear" names="class_lineedit_theme_icon_clear"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>clear</strong> <reference internal="True" refid="class-lineedit-theme-icon-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>“清除”按钮的纹理。见 <reference internal="True" refid="class-lineedit-property-clear-button-enabled"><inline classes="std std-ref">clear_button_enabled</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-style-focus"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-style-focus" names="class_lineedit_theme_style_focus"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>focus</strong> <reference internal="True" refid="class-lineedit-theme-style-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>LineEdit</strong> 拥有 GUI 焦点时使用的背景。<reference internal="True" refid="class-lineedit-theme-style-focus"><inline classes="std std-ref">focus</inline></reference> <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 显示在基础 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <emphasis>之上</emphasis>，所以应该使用部分透明的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>，确保基础 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 仍然可见。代表轮廓或下划线的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 可以很好地实现这个目的。要禁用聚焦的视觉效果，请指定 <reference internal="True" refuri="class_styleboxempty#class-styleboxempty"><inline classes="std std-ref">StyleBoxEmpty</inline></reference> 资源。请注意，禁用聚焦的视觉效果会影响使用键盘/手柄进行导航的可用性，所以出于可访问性的原因，不建议这样做。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-style-normal"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-style-normal" names="class_lineedit_theme_style_normal"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>normal</strong> <reference internal="True" refid="class-lineedit-theme-style-normal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>LineEdit</strong> 的默认背景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-lineedit-theme-style-read-only"></target>
            <paragraph classes="classref-themeproperty" ids="class-lineedit-theme-style-read-only" names="class_lineedit_theme_style_read_only"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>read_only</strong> <reference internal="True" refid="class-lineedit-theme-style-read-only"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>LineEdit</strong> 处于只读模式时使用的背景（<reference internal="True" refid="class-lineedit-property-editable"><inline classes="std std-ref">editable</inline></reference> 为 <literal>false</literal>）。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
