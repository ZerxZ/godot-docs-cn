<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_backbuffercopy.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/BackBufferCopy.xml.</comment>
    <target refid="class-backbuffercopy"></target>
    <section ids="backbuffercopy class-backbuffercopy" names="backbuffercopy class_backbuffercopy">
        <title>BackBufferCopy</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>这种节点能够将屏幕中的某个区域复制到缓冲中，方便从着色器代码中访问。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于后台缓冲当前显示屏幕的节点。会根据 <reference internal="True" refid="class-backbuffercopy-property-copy-mode"><inline classes="std std-ref">copy_mode</inline></reference> 对 <strong>BackBufferCopy</strong> 节点中定义的区域所覆盖的屏幕内容或整个屏幕进行缓冲。可以在着色器脚本中使用屏幕纹理来访问（即带有 <literal>hint_screen_texture</literal> 的 uniform 采样器）。</paragraph>
            <paragraph><strong>注意：</strong>由于该节点继承自 <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference>（而非 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>），因此锚点和边距不适用于子 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 派生节点。这在调整窗口大小时可能会出现问题。为避免这种情况，请将 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 派生节点添加为 <strong>BackBufferCopy</strong> 节点的<emphasis>同级</emphasis>节点，而不是将它们添加为子节点。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="59"></colspec>
                    <colspec colwidth="33"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-backbuffercopy-copymode"><inline classes="std std-ref">CopyMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-backbuffercopy-property-copy-mode"><inline classes="std std-ref">copy_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-backbuffercopy-property-rect"><inline classes="std std-ref">rect</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Rect2(-100, -100, 200, 200)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-backbuffercopy-copymode"></target>
            <paragraph classes="classref-enumeration" ids="enum-backbuffercopy-copymode" names="enum_backbuffercopy_copymode">enum <strong>CopyMode</strong>: <reference internal="True" refid="enum-backbuffercopy-copymode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-backbuffercopy-constant-copy-mode-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-backbuffercopy-constant-copy-mode-disabled" names="class_backbuffercopy_constant_copy_mode_disabled"><reference internal="True" refid="enum-backbuffercopy-copymode"><inline classes="std std-ref">CopyMode</inline></reference> <strong>COPY_MODE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用缓冲模式。这意味着该 <strong>BackBufferCopy</strong> 节点将直接使用它所覆盖的屏幕部分。</paragraph>
            <target refid="class-backbuffercopy-constant-copy-mode-rect"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-backbuffercopy-constant-copy-mode-rect" names="class_backbuffercopy_constant_copy_mode_rect"><reference internal="True" refid="enum-backbuffercopy-copymode"><inline classes="std std-ref">CopyMode</inline></reference> <strong>COPY_MODE_RECT</strong> = <literal>1</literal></paragraph>
            <paragraph><strong>BackBufferCopy</strong> 缓冲一个矩形区域。</paragraph>
            <target refid="class-backbuffercopy-constant-copy-mode-viewport"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-backbuffercopy-constant-copy-mode-viewport" names="class_backbuffercopy_constant_copy_mode_viewport"><reference internal="True" refid="enum-backbuffercopy-copymode"><inline classes="std std-ref">CopyMode</inline></reference> <strong>COPY_MODE_VIEWPORT</strong> = <literal>2</literal></paragraph>
            <paragraph><strong>BackBufferCopy</strong> 缓冲整个屏幕。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-backbuffercopy-property-copy-mode"></target>
            <paragraph classes="classref-property" ids="class-backbuffercopy-property-copy-mode" names="class_backbuffercopy_property_copy_mode"><reference internal="True" refid="enum-backbuffercopy-copymode"><inline classes="std std-ref">CopyMode</inline></reference> <strong>copy_mode</strong> = <literal>1</literal> <reference internal="True" refid="class-backbuffercopy-property-copy-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_copy_mode</strong>(value: <reference internal="True" refid="enum-backbuffercopy-copymode"><inline classes="std std-ref">CopyMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-backbuffercopy-copymode"><inline classes="std std-ref">CopyMode</inline></reference> <strong>get_copy_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>缓冲区模式。见 <reference internal="True" refid="enum-backbuffercopy-copymode"><inline classes="std std-ref">CopyMode</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-backbuffercopy-property-rect"></target>
            <paragraph classes="classref-property" ids="class-backbuffercopy-property-rect" names="class_backbuffercopy_property_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>rect</strong> = <literal>Rect2(-100, -100, 200, 200)</literal> <reference internal="True" refid="class-backbuffercopy-property-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rect</strong>(value: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_rect</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 <strong>BackBufferCopy</strong> 所覆盖的区域。只有当 <reference internal="True" refid="class-backbuffercopy-property-copy-mode"><inline classes="std std-ref">copy_mode</inline></reference> 为 <reference internal="True" refid="class-backbuffercopy-constant-copy-mode-rect"><inline classes="std std-ref">COPY_MODE_RECT</inline></reference> 时才使用。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
