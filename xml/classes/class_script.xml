<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_script.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Script.xml.</comment>
    <target refid="class-script"></target>
    <section ids="script class-script" names="script class_script">
        <title>Script</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_csharpscript#class-csharpscript"><inline classes="std std-ref">CSharpScript</inline></reference>, <reference internal="True" refuri="class_gdscript#class-gdscript"><inline classes="std std-ref">GDScript</inline></reference>, <reference internal="True" refuri="class_scriptextension#class-scriptextension"><inline classes="std std-ref">ScriptExtension</inline></reference></paragraph>
        <paragraph>作为资源存储的类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>作为资源存储的类。脚本可以扩展所有以它为实例的对象的功能。</paragraph>
            <paragraph>这是所有脚本的基类，不应直接使用。尝试使用此类创建新脚本将导致错误。</paragraph>
            <paragraph>脚本子类的 <literal>new</literal> 方法会创建新的实例。如果一个现有的对象的类与脚本的基类之一相匹配，<reference internal="True" refuri="class_object#class-object-method-set-script"><inline classes="std std-ref">Object.set_script</inline></reference> 会扩展该对象。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/scripting/index"><inline classes="doc">脚本文档索引</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="55"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-property-source-code"><inline classes="std std-ref">source_code</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="140"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-can-instantiate"><inline classes="std std-ref">can_instantiate</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script"><inline classes="std std-ref">Script</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-get-base-script"><inline classes="std std-ref">get_base_script</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-get-instance-base-type"><inline classes="std std-ref">get_instance_base_type</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-get-property-default-value"><inline classes="std std-ref">get_property_default_value</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> property <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-get-script-constant-map"><inline classes="std std-ref">get_script_constant_map</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-get-script-method-list"><inline classes="std std-ref">get_script_method_list</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-get-script-property-list"><inline classes="std std-ref">get_script_property_list</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-get-script-signal-list"><inline classes="std std-ref">get_script_signal_list</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-has-script-signal"><inline classes="std std-ref">has_script_signal</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> signal_name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-has-source-code"><inline classes="std std-ref">has_source_code</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-instance-has"><inline classes="std std-ref">instance_has</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> base_object <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-is-abstract"><inline classes="std std-ref">is_abstract</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-is-tool"><inline classes="std std-ref">is_tool</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-script-method-reload"><inline classes="std std-ref">reload</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> keep_state=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-script-property-source-code"></target>
            <paragraph classes="classref-property" ids="class-script-property-source-code" names="class_script_property_source_code"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>source_code</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_source_code</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_source_code</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>脚本的源代码，如果源代码不可用，则为空字符串。当设置时，不会自动重新加载类的实现。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-script-method-can-instantiate"></target>
            <paragraph classes="classref-method" ids="class-script-method-can-instantiate" names="class_script_method_can_instantiate"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>can_instantiate</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该脚本可以被实例化，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-get-base-script"></target>
            <paragraph classes="classref-method" ids="class-script-method-get-base-script" names="class_script_method_get_base_script"><reference internal="True" refid="class-script"><inline classes="std std-ref">Script</inline></reference> <strong>get_base_script</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回由该脚本直接继承的脚本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-get-instance-base-type"></target>
            <paragraph classes="classref-method" ids="class-script-method-get-instance-base-type" names="class_script_method_get_instance_base_type"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_instance_base_type</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回脚本的基类类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-get-property-default-value"></target>
            <paragraph classes="classref-method" ids="class-script-method-get-property-default-value" names="class_script_method_get_property_default_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_property_default_value</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> property <strong>)</strong></paragraph>
            <paragraph>返回指定属性的默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-get-script-constant-map"></target>
            <paragraph classes="classref-method" ids="class-script-method-get-script-constant-map" names="class_script_method_get_script_constant_map"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_script_constant_map</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回一个包含常量名称及其值的字典。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-get-script-method-list"></target>
            <paragraph classes="classref-method" ids="class-script-method-get-script-method-list" names="class_script_method_get_script_method_list"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference> <strong>get_script_method_list</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回此 <strong>Script</strong> 中的方法列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-get-script-property-list"></target>
            <paragraph classes="classref-method" ids="class-script-method-get-script-property-list" names="class_script_method_get_script_property_list"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference> <strong>get_script_property_list</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回此 <strong>Script</strong> 中的属性列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-get-script-signal-list"></target>
            <paragraph classes="classref-method" ids="class-script-method-get-script-signal-list" names="class_script_method_get_script_signal_list"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference> <strong>get_script_signal_list</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回在此 <strong>Script</strong> 中定义的用户信号列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-has-script-signal"></target>
            <paragraph classes="classref-method" ids="class-script-method-has-script-signal" names="class_script_method_has_script_signal"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_script_signal</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> signal_name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果脚本或基类定义了具有给定名称的信号，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-has-source-code"></target>
            <paragraph classes="classref-method" ids="class-script-method-has-source-code" names="class_script_method_has_source_code"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_source_code</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果脚本包含非空源代码，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-instance-has"></target>
            <paragraph classes="classref-method" ids="class-script-method-instance-has" names="class_script_method_instance_has"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>instance_has</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> base_object <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果 <literal>base_object</literal> 是该脚本的实例，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-is-abstract"></target>
            <paragraph classes="classref-method" ids="class-script-method-is-abstract" names="class_script_method_is_abstract"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_abstract</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果脚本是抽象脚本，则返回 <literal>true</literal>。抽象脚本没有构造函数，无法被实例化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-is-tool"></target>
            <paragraph classes="classref-method" ids="class-script-method-is-tool" names="class_script_method_is_tool"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_tool</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果脚本是工具脚本，则返回 <literal>true</literal>。工具脚本可以在编辑器中运行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-script-method-reload"></target>
            <paragraph classes="classref-method" ids="class-script-method-reload" names="class_script_method_reload"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>reload</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> keep_state=false <strong>)</strong></paragraph>
            <paragraph>重新加载脚本的类的实现。返回一个错误代码。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
