<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editorexportplugin.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/EditorExportPlugin.xml.</comment>
    <target refid="class-editorexportplugin"></target>
    <section ids="editorexportplugin class-editorexportplugin" names="editorexportplugin class_editorexportplugin">
        <title>EditorExportPlugin</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>在导出项目时执行的脚本。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>EditorExportPlugin</strong> 会在用户导出项目时自动调用。它们最常见的用途是确定哪些文件应该包含在导出的项目中。对于每个插件，导出过程开始时都会调用 <reference internal="True" refid="class-editorexportplugin-private-method-export-begin"><inline classes="std std-ref">_export_begin</inline></reference>，然后会为每一个导出的文件调用 <reference internal="True" refid="class-editorexportplugin-private-method-export-file"><inline classes="std std-ref">_export_file</inline></reference>。</paragraph>
            <paragraph>要使用 <strong>EditorExportPlugin</strong>，请先用 <reference internal="True" refuri="class_editorplugin#class-editorplugin-method-add-export-plugin"><inline classes="std std-ref">EditorPlugin.add_export_plugin</inline></reference> 注册。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/platform/android/android_plugin"><inline classes="doc">导出 Android 插件</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="276"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-begin-customize-resources"><inline classes="std std-ref">_begin_customize_resources</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, features: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-begin-customize-scenes"><inline classes="std std-ref">_begin_customize_scenes</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, features: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-customize-resource"><inline classes="std std-ref">_customize_resource</inline></reference>(resource: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-customize-scene"><inline classes="std std-ref">_customize_scene</inline></reference>(scene: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-end-customize-resources"><inline classes="std std-ref">_end_customize_resources</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-end-customize-scenes"><inline classes="std std-ref">_end_customize_scenes</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-export-begin"><inline classes="std std-ref">_export_begin</inline></reference>(features: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, is_debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-export-end"><inline classes="std std-ref">_export_end</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-export-file"><inline classes="std std-ref">_export_file</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, features: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-get-android-dependencies"><inline classes="std std-ref">_get_android_dependencies</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-get-android-dependencies-maven-repos"><inline classes="std std-ref">_get_android_dependencies_maven_repos</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-get-android-libraries"><inline classes="std std-ref">_get_android_libraries</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-get-android-manifest-activity-element-contents"><inline classes="std std-ref">_get_android_manifest_activity_element_contents</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-get-android-manifest-application-element-contents"><inline classes="std std-ref">_get_android_manifest_application_element_contents</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-get-android-manifest-element-contents"><inline classes="std std-ref">_get_android_manifest_element_contents</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-get-customization-configuration-hash"><inline classes="std std-ref">_get_customization_configuration_hash</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-get-export-features"><inline classes="std std-ref">_get_export_features</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-get-export-option-warning"><inline classes="std std-ref">_get_export_option_warning</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, option: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-get-export-options"><inline classes="std std-ref">_get_export_options</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-get-export-options-overrides"><inline classes="std std-ref">_get_export_options_overrides</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-get-name"><inline classes="std std-ref">_get_name</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-should-update-export-options"><inline classes="std std-ref">_should_update_export_options</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-private-method-supports-platform"><inline classes="std std-ref">_supports_platform</inline></reference>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-method-add-file"><inline classes="std std-ref">add_file</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, file: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, remap: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-method-add-ios-bundle-file"><inline classes="std std-ref">add_ios_bundle_file</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-method-add-ios-cpp-code"><inline classes="std std-ref">add_ios_cpp_code</inline></reference>(code: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-method-add-ios-embedded-framework"><inline classes="std std-ref">add_ios_embedded_framework</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-method-add-ios-framework"><inline classes="std std-ref">add_ios_framework</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-method-add-ios-linker-flags"><inline classes="std std-ref">add_ios_linker_flags</inline></reference>(flags: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-method-add-ios-plist-content"><inline classes="std std-ref">add_ios_plist_content</inline></reference>(plist_content: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-method-add-ios-project-static-lib"><inline classes="std std-ref">add_ios_project_static_lib</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-method-add-macos-plugin-file"><inline classes="std std-ref">add_macos_plugin_file</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-method-add-shared-object"><inline classes="std std-ref">add_shared_object</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, tags: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, target: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-method-get-option"><inline classes="std std-ref">get_option</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorexportplugin-method-skip"><inline classes="std std-ref">skip</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editorexportplugin-private-method-begin-customize-resources"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-begin-customize-resources" names="class_editorexportplugin_private_method__begin_customize_resources"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_begin_customize_resources</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, features: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-begin-customize-resources"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该插件将根据所使用的平台和功能自定义资源，则返回 <literal>true</literal>。</paragraph>
            <paragraph>启用后，<reference internal="True" refid="class-editorexportplugin-private-method-get-customization-configuration-hash"><inline classes="std std-ref">_get_customization_configuration_hash</inline></reference>、<reference internal="True" refid="class-editorexportplugin-private-method-customize-resource"><inline classes="std std-ref">_customize_resource</inline></reference> 和 <reference internal="True" refid="class-editorexportplugin-private-method-customize-scene"><inline classes="std std-ref">_customize_scene</inline></reference> 将被调用并且必须被实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-begin-customize-scenes"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-begin-customize-scenes" names="class_editorexportplugin_private_method__begin_customize_scenes"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_begin_customize_scenes</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, features: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-begin-customize-scenes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这个插件会根据所使用的平台和功能来定制场景，则返回 true。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-customize-resource"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-customize-resource" names="class_editorexportplugin_private_method__customize_resource"><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>_customize_resource</strong>(resource: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-customize-resource"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>定制一个资源。如果对其进行了修改，则返回相同的或新的资源。否则，返回 <literal>null</literal> 。</paragraph>
            <paragraph><emphasis>path</emphasis> 参数只在定制一个实际文件时使用，否则这意味着这个资源是另一个资源的一部分，并且它将是空的。</paragraph>
            <paragraph>如果 <reference internal="True" refid="class-editorexportplugin-private-method-begin-customize-resources"><inline classes="std std-ref">_begin_customize_resources</inline></reference> 返回 <literal>true</literal>，则需要实现该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-customize-scene"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-customize-scene" names="class_editorexportplugin_private_method__customize_scene"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>_customize_scene</strong>(scene: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-customize-scene"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>定制一个场景。如果对其进行了修改，则返回相同的或新的场景。否则，返回 <literal>null</literal> 。如果返回一个新的场景，则由你来处理旧的场景。</paragraph>
            <paragraph>如果 <reference internal="True" refid="class-editorexportplugin-private-method-begin-customize-scenes"><inline classes="std std-ref">_begin_customize_scenes</inline></reference> 返回 <literal>true</literal>，则需要实现该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-end-customize-resources"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-end-customize-resources" names="class_editorexportplugin_private_method__end_customize_resources"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_end_customize_resources</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-end-customize-resources"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>资源的自定义处理完成时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-end-customize-scenes"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-end-customize-scenes" names="class_editorexportplugin_private_method__end_customize_scenes"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_end_customize_scenes</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-end-customize-scenes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>场景的自定义处理完成时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-export-begin"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-export-begin" names="class_editorexportplugin_private_method__export_begin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_export_begin</strong>(features: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, is_debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-export-begin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由用户重写的虚方法。它在导出开始时调用，并提供有关导出的所有信息。<literal>features</literal> 是导出的特性列表，<literal>is_debug</literal> 是 <literal>true</literal> 时用于调试构建，<literal>path</literal> 是导出项目的目标路径。<literal>flags</literal> 仅在运行可运行配置文件时使用，例如在 Android 上使用本机运行时。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-export-end"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-export-end" names="class_editorexportplugin_private_method__export_end"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_export_end</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-export-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>可以被用户重写的虚方法。在导出完成后被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-export-file"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-export-file" names="class_editorexportplugin_private_method__export_file"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_export_file</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, features: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-export-file"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>虚方法，需要用户重写。对于每个导出的文件调用，提供可用于标识文件的参数。<literal>path</literal>是文件的路径，<literal>type</literal>是文件所表示的<reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>（例如<reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference>），<literal>features</literal>是导出的特性列表。</paragraph>
            <paragraph>在此回调中调用<reference internal="True" refid="class-editorexportplugin-method-skip"><inline classes="std std-ref">skip</inline></reference>将使文件不包含在导出中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-get-android-dependencies"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-get-android-dependencies" names="class_editorexportplugin_private_method__get_android_dependencies"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_android_dependencies</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-get-android-dependencies"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由用户覆盖的虚方法。调用该函数是为了检索该插件提供的 Android 依赖项集。每个返回的 Android 依赖项应具有 Android 远程二进制依赖项的格式：<literal>org.godot.example:my-plugin:0.0.0</literal></paragraph>
            <paragraph>有关详细信息，请参阅 <reference name="有关依赖项的 Android 文档" refuri="https://developer.android.com/build/dependencies?agpversion=4.1#dependency-types">有关依赖项的 Android 文档</reference>。</paragraph>
            <paragraph><strong>注意：</strong>仅在 Android 上受支持，并且需要启用 <reference internal="True" refuri="class_editorexportplatformandroid#class-editorexportplatformandroid-property-gradle-build-use-gradle-build"><inline classes="std std-ref">EditorExportPlatformAndroid.gradle_build/use_gradle_build</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-get-android-dependencies-maven-repos"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-get-android-dependencies-maven-repos" names="class_editorexportplugin_private_method__get_android_dependencies_maven_repos"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_android_dependencies_maven_repos</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-get-android-dependencies-maven-repos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由用户覆盖的虚方法。调用该函数是为了检索该插件提供的 Android 依赖项集的 Maven 存储库的 URL。</paragraph>
            <paragraph>有关更多信息，请参阅 <reference name="有关依赖管理的 Gradle 文档" refuri="https://docs.gradle.org/current/userguide/dependency_management.html#sec:maven_repo">有关依赖管理的 Gradle 文档</reference>。</paragraph>
            <paragraph><strong>注意：</strong>Google 的 Maven 存储库和 Maven Central 存储库默认已包含在内。</paragraph>
            <paragraph><strong>注意：</strong>仅在 Android 上受支持，并且需要启用 <reference internal="True" refuri="class_editorexportplatformandroid#class-editorexportplatformandroid-property-gradle-build-use-gradle-build"><inline classes="std std-ref">EditorExportPlatformAndroid.gradle_build/use_gradle_build</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-get-android-libraries"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-get-android-libraries" names="class_editorexportplugin_private_method__get_android_libraries"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_android_libraries</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-get-android-libraries"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由用户覆盖的虚方法。调用该函数是为了检索该插件提供的 Android 库存档（AAR）文件的本地路径。</paragraph>
            <paragraph><strong>注意：</strong>相对路径<strong>必须</strong>相对于 Godot 的 <literal>res://addons/</literal> 目录。例如，位于 <literal>res://addons/hello_world_plugin/HelloWorld.release.aar</literal> 下的 AAR 文件，可以使用 <literal>res://addons/hello_world_plugin/HelloWorld.release.aar</literal> 作为绝对路径，或使用 <literal>hello_world_plugin/HelloWorld.release.aar</literal> 作为相对路径返回。</paragraph>
            <paragraph><strong>注意：</strong>仅在 Android 上受支持，并且需要启用 <reference internal="True" refuri="class_editorexportplatformandroid#class-editorexportplatformandroid-property-gradle-build-use-gradle-build"><inline classes="std std-ref">EditorExportPlatformAndroid.gradle_build/use_gradle_build</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-get-android-manifest-activity-element-contents"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-get-android-manifest-activity-element-contents" names="class_editorexportplugin_private_method__get_android_manifest_activity_element_contents"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_android_manifest_activity_element_contents</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-get-android-manifest-activity-element-contents"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由用户覆盖的虚方法。这在导出时用于更新生成的 Android 清单中的 <literal>activity</literal> 元素的内容。</paragraph>
            <paragraph><strong>注意：</strong>仅在 Android 上受支持，并且需要启用 <reference internal="True" refuri="class_editorexportplatformandroid#class-editorexportplatformandroid-property-gradle-build-use-gradle-build"><inline classes="std std-ref">EditorExportPlatformAndroid.gradle_build/use_gradle_build</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-get-android-manifest-application-element-contents"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-get-android-manifest-application-element-contents" names="class_editorexportplugin_private_method__get_android_manifest_application_element_contents"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_android_manifest_application_element_contents</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-get-android-manifest-application-element-contents"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由用户覆盖的虚方法。这在导出时用于更新生成的 Android 清单中的 <literal>application</literal> 元素的内容。</paragraph>
            <paragraph><strong>注意：</strong>仅在 Android 上受支持，并且需要启用 <reference internal="True" refuri="class_editorexportplatformandroid#class-editorexportplatformandroid-property-gradle-build-use-gradle-build"><inline classes="std std-ref">EditorExportPlatformAndroid.gradle_build/use_gradle_build</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-get-android-manifest-element-contents"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-get-android-manifest-element-contents" names="class_editorexportplugin_private_method__get_android_manifest_element_contents"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_android_manifest_element_contents</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-get-android-manifest-element-contents"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由用户覆盖的虚方法。这在导出时用于更新生成的 Android 清单中的 <literal>manifest</literal> 元素的内容。</paragraph>
            <paragraph><strong>注意：</strong>仅在 Android 上受支持，并且需要启用 <reference internal="True" refuri="class_editorexportplatformandroid#class-editorexportplatformandroid-property-gradle-build-use-gradle-build"><inline classes="std std-ref">EditorExportPlatformAndroid.gradle_build/use_gradle_build</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-get-customization-configuration-hash"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-get-customization-configuration-hash" names="class_editorexportplugin_private_method__get_customization_configuration_hash"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_customization_configuration_hash</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-get-customization-configuration-hash"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据传入的配置返回一个哈希值（对于场景和资源）。这有助于为单独的导出配置保留单独的缓存。</paragraph>
            <paragraph>如果 <reference internal="True" refid="class-editorexportplugin-private-method-begin-customize-resources"><inline classes="std std-ref">_begin_customize_resources</inline></reference> 返回 <literal>true</literal>，则需要实现该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-get-export-features"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-get-export-features" names="class_editorexportplugin_private_method__get_export_features"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_export_features</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-get-export-features"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该预设对于给定的 <literal>platform</literal>，应该具有的附加功能的 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-get-export-option-warning"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-get-export-option-warning" names="class_editorexportplugin_private_method__get_export_option_warning"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_export_option_warning</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>, option: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-get-export-option-warning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>检查给定 <literal>option</literal> 的要求，如果不满足则返回非空警告字符串。</paragraph>
            <paragraph><strong>注意：</strong>使用 <reference internal="True" refid="class-editorexportplugin-method-get-option"><inline classes="std std-ref">get_option</inline></reference> 检查导出选项的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-get-export-options"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-get-export-options" names="class_editorexportplugin_private_method__get_export_options"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>_get_export_options</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-get-export-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回导出选项列表，能够用来配置这个导出插件。</paragraph>
            <paragraph>返回值中的每个元素都是一个 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>，包含如下字段：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>option</literal>：字典，结构与 <reference internal="True" refuri="class_object#class-object-method-get-property-list"><inline classes="std std-ref">Object.get_property_list</inline></reference> 文档中的相同，但所有字段都是可选的。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>default_value</literal>：该选项的默认值。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>update_visibility</literal>：可选的布尔值。如果设为 <literal>true</literal>，则该选项发生变化时，预设会发出 <reference internal="True" refuri="class_object#class-object-signal-property-list-changed"><inline classes="std std-ref">Object.property_list_changed</inline></reference>。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-get-export-options-overrides"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-get-export-options-overrides" names="class_editorexportplugin_private_method__get_export_options_overrides"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_get_export_options_overrides</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-get-export-options-overrides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回导出选项的覆盖值的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>，将使用该值代替用户提供的值。覆盖的选项将从用户界面中隐藏。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">class MyExportPlugin extends EditorExportPlugin:
    func _get_name() -&gt; String:
        return "MyExportPlugin"

    func _supports_platform(platform) -&gt; bool:
        if platform is EditorExportPlatformPC:
            # 可在所有桌面平台上运行，包括 Windows、MacOS 和 Linux。
            return true
        return false

    func _get_export_options_overrides(platform) -&gt; Dictionary:
        # 覆盖“嵌入 PCK”以始终启用。
        return {
            "binary_format/embed_pck": true,
        }</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-get-name"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-get-name" names="class_editorexportplugin_private_method__get_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_name</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-get-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该插件的名称标识符（供导出器将来识别）。插件在导出前按名称排序。</paragraph>
            <paragraph>需要实现该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-should-update-export-options"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-should-update-export-options" names="class_editorexportplugin_private_method__should_update_export_options"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_should_update_export_options</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-should-update-export-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <reference internal="True" refid="class-editorexportplugin-private-method-get-export-options"><inline classes="std std-ref">_get_export_options</inline></reference> 的结果发生了改变，与 <literal>platform</literal> 对应的导出预设的选项需要更新，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-private-method-supports-platform"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-private-method-supports-platform" names="class_editorexportplugin_private_method__supports_platform"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_supports_platform</strong>(platform: <reference internal="True" refuri="class_editorexportplatform#class-editorexportplatform"><inline classes="std std-ref">EditorExportPlatform</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-private-method-supports-platform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果插件支持给定的 <literal>platform</literal>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-method-add-file"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-method-add-file" names="class_editorexportplugin_method_add_file"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_file</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, file: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, remap: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-editorexportplugin-method-add-file"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加一个要导出的自定义文件。<literal>path</literal> 是可以用来加载该文件的虚拟路径，<literal>file</literal> 是该文件的二进制数据。</paragraph>
            <paragraph>在 <reference internal="True" refid="class-editorexportplugin-private-method-export-file"><inline classes="std std-ref">_export_file</inline></reference> 中调用时，如果 <literal>remap</literal> 为 <literal>true</literal>，则当前文件将不会被导出，而是被重新映射到这个自定义文件。在其他地方调用时会忽略 <literal>remap</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-method-add-ios-bundle-file"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-method-add-ios-bundle-file" names="class_editorexportplugin_method_add_ios_bundle_file"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_ios_bundle_file</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorexportplugin-method-add-ios-bundle-file"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的<literal>path</literal>中的iOS bundle文件添加到导出的项目中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-method-add-ios-cpp-code"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-method-add-ios-cpp-code" names="class_editorexportplugin_method_add_ios_cpp_code"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_ios_cpp_code</strong>(code: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorexportplugin-method-add-ios-cpp-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 C++ 代码添加到 iOS 导出中。最终的代码是由每个激活的导出插件附加的代码创建的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-method-add-ios-embedded-framework"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-method-add-ios-embedded-framework" names="class_editorexportplugin_method_add_ios_embedded_framework"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_ios_embedded_framework</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorexportplugin-method-add-ios-embedded-framework"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将动态库（*.dylib、*.framework）添加到 iOS 的 Xcode 项目的链接阶段，并将其嵌入到生成的二进制文件中。</paragraph>
            <paragraph><strong>注意：</strong>对于静态库（*.a），该方法的工作方式与 <reference internal="True" refid="class-editorexportplugin-method-add-ios-framework"><inline classes="std std-ref">add_ios_framework</inline></reference> 相同。</paragraph>
            <paragraph><strong>注意：</strong>此方法不该用于系统库，因为它们已经存在于设备上。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-method-add-ios-framework"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-method-add-ios-framework" names="class_editorexportplugin_method_add_ios_framework"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_ios_framework</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorexportplugin-method-add-ios-framework"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 iOS 的 Xcode 项目中链接阶段添加静态库（*.a）或动态库（*.dylib、*.framework）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-method-add-ios-linker-flags"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-method-add-ios-linker-flags" names="class_editorexportplugin_method_add_ios_linker_flags"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_ios_linker_flags</strong>(flags: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorexportplugin-method-add-ios-linker-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 iOS 导出添加链接器标志。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-method-add-ios-plist-content"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-method-add-ios-plist-content" names="class_editorexportplugin_method_add_ios_plist_content"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_ios_plist_content</strong>(plist_content: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorexportplugin-method-add-ios-plist-content"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 iOS 属性列表文件添加内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-method-add-ios-project-static-lib"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-method-add-ios-project-static-lib" names="class_editorexportplugin_method_add_ios_project_static_lib"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_ios_project_static_lib</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorexportplugin-method-add-ios-project-static-lib"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向 iOS 项目中添加位于给定路径 <literal>path</literal> 的静态库。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-method-add-macos-plugin-file"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-method-add-macos-plugin-file" names="class_editorexportplugin_method_add_macos_plugin_file"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_macos_plugin_file</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorexportplugin-method-add-macos-plugin-file"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将匹配 <literal>path</literal> 的文件或目录，添加到 macOS 应用程序包的 <literal>PlugIns</literal> 目录中。</paragraph>
            <paragraph><strong>注意：</strong>仅适用于 macOS 导出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-method-add-shared-object"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-method-add-shared-object" names="class_editorexportplugin_method_add_shared_object"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_shared_object</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, tags: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, target: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorexportplugin-method-add-shared-object"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加一个共享对象或仅包含具有给定 <literal>tags</literal> 和目标 <literal>path</literal> 的共享对象的目录。</paragraph>
            <paragraph><strong>注意：</strong>使用 macOS 导出时，这些共享对象将被添加到应用程序包的 <literal>Frameworks</literal> 目录中。</paragraph>
            <paragraph>如果使用的是目录，如果将非代码对象放在该目录中，则代码签名时会报错。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-method-get-option"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-method-get-option" names="class_editorexportplugin_method_get_option"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_option</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorexportplugin-method-get-option"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-editorexportplugin-private-method-get-export-options"><inline classes="std std-ref">_get_export_options</inline></reference> 提供的导出选项的当前值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorexportplugin-method-skip"></target>
            <paragraph classes="classref-method" ids="class-editorexportplugin-method-skip" names="class_editorexportplugin_method_skip"><abbreviation explanation="无返回值。">void</abbreviation> <strong>skip</strong>() <reference internal="True" refid="class-editorexportplugin-method-skip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>To be called inside <reference internal="True" refid="class-editorexportplugin-private-method-export-file"><inline classes="std std-ref">_export_file</inline></reference>, <reference internal="True" refid="class-editorexportplugin-private-method-customize-resource"><inline classes="std std-ref">_customize_resource</inline></reference>, or <reference internal="True" refid="class-editorexportplugin-private-method-customize-scene"><inline classes="std std-ref">_customize_scene</inline></reference>. Skips the current file, so it's not included in the export.</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
