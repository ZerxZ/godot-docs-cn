<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_renderscenebuffersrd.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/RenderSceneBuffersRD.xml.</comment>
    <target refid="class-renderscenebuffersrd"></target>
    <section ids="renderscenebuffersrd class-renderscenebuffersrd" names="renderscenebuffersrd class_renderscenebuffersrd">
        <title>RenderSceneBuffersRD</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_renderscenebuffers#class-renderscenebuffers"><inline classes="std std-ref">RenderSceneBuffers</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>RenderingDevice 基于的渲染器的抽象渲染场景缓冲区实现。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该对象管理基于渲染设备的渲染器的所有 3D 渲染缓冲区。为每个启用 3D 渲染的视口创建该对象的实例。</paragraph>
            <paragraph>所有缓冲区都被组织在<strong>上下文</strong>中。默认上下文被称为 <strong>render_buffers</strong>，可以包含颜色缓冲区、深度缓冲区、速度缓冲区、VRS 密度图和这些缓冲区的 MSAA 变体等。</paragraph>
            <paragraph>缓冲区仅保证在视口渲染期间存在。</paragraph>
            <paragraph><strong>注意：</strong>这是一个仅为 GDExtension 插件公开的内部渲染服务器对象。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="476"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-clear-context"><inline classes="std std-ref">clear_context</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-create-texture"><inline classes="std std-ref">create_texture</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> data_format, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> usage_bits, <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> texture_samples, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layers, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmaps, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> unique <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-create-texture-from-format"><inline classes="std std-ref">create_texture_from_format</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_rdtextureformat#class-rdtextureformat"><inline classes="std std-ref">RDTextureFormat</inline></reference> format, <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference> view, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> unique <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-create-texture-view"><inline classes="std std-ref">create_texture_view</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> view_name, <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference> view <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-color-layer"><inline classes="std std-ref">get_color_layer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-color-texture"><inline classes="std std-ref">get_color_texture</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-depth-layer"><inline classes="std std-ref">get_depth_layer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-depth-texture"><inline classes="std std-ref">get_depth_texture</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-internal-size"><inline classes="std std-ref">get_internal_size</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-render-target"><inline classes="std std-ref">get_render_target</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-texture"><inline classes="std std-ref">get_texture</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rdtextureformat#class-rdtextureformat"><inline classes="std std-ref">RDTextureFormat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-texture-format"><inline classes="std std-ref">get_texture_format</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-texture-slice"><inline classes="std std-ref">get_texture_slice</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmap, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layers, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmaps <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-texture-slice-size"><inline classes="std std-ref">get_texture_slice_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmap <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-texture-slice-view"><inline classes="std std-ref">get_texture_slice_view</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmap, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layers, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmaps, <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference> view <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-use-taa"><inline classes="std std-ref">get_use_taa</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-velocity-layer"><inline classes="std std-ref">get_velocity_layer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-velocity-texture"><inline classes="std std-ref">get_velocity_texture</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-get-view-count"><inline classes="std std-ref">get_view_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderscenebuffersrd-method-has-texture"><inline classes="std std-ref">has_texture</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-renderscenebuffersrd-method-clear-context"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-clear-context" names="class_renderscenebuffersrd_method_clear_context">void <strong>clear_context</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context <strong>)</strong></paragraph>
            <paragraph>释放与这个上下文相关的所有缓冲。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-create-texture"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-create-texture" names="class_renderscenebuffersrd_method_create_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>create_texture</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> data_format, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> usage_bits, <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> texture_samples, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layers, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmaps, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> unique <strong>)</strong></paragraph>
            <paragraph>使用给定的定义创建一个新纹理，并将其缓存在给定的名称下。如果已有纹理已经存在，则返回该已有纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-create-texture-from-format"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-create-texture-from-format" names="class_renderscenebuffersrd_method_create_texture_from_format"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>create_texture_from_format</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_rdtextureformat#class-rdtextureformat"><inline classes="std std-ref">RDTextureFormat</inline></reference> format, <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference> view, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> unique <strong>)</strong></paragraph>
            <paragraph>使用给定的格式创建一个新纹理，并在给定的名称下查看和缓存它。如果已有纹理已经存在，则返回该已有纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-create-texture-view"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-create-texture-view" names="class_renderscenebuffersrd_method_create_texture_view"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>create_texture_view</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> view_name, <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference> view <strong>)</strong></paragraph>
            <paragraph>为已有纹理创建一个新的纹理视图，并将其缓存在给定的 view_name 下。如果已有的纹理视图已经存在，则返回该视图。如果源纹理不存在，将会出错。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-color-layer"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-color-layer" names="class_renderscenebuffersrd_method_get_color_layer"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_color_layer</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer <strong>)</strong></paragraph>
            <paragraph>从渲染 3D 内容的颜色纹理返回指定的图层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-color-texture"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-color-texture" names="class_renderscenebuffersrd_method_get_color_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_color_texture</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回渲染 3D 内容的颜色纹理。如果使用多视图，这将是一个包含所有视图的纹理数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-depth-layer"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-depth-layer" names="class_renderscenebuffersrd_method_get_depth_layer"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_depth_layer</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer <strong>)</strong></paragraph>
            <paragraph>从渲染 3D 内容的深度纹理返回指定的图层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-depth-texture"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-depth-texture" names="class_renderscenebuffersrd_method_get_depth_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_depth_texture</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回渲染 3D 内容的深度纹理。如果使用多视图，这将是一个包含所有视图的纹理数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-internal-size"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-internal-size" names="class_renderscenebuffersrd_method_get_internal_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_internal_size</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回默认情况下创建纹理的渲染缓冲区的内部大小（放大之前的大小）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-render-target"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-render-target" names="class_renderscenebuffersrd_method_get_render_target"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_render_target</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回与该缓冲区对象关联的渲染目标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-texture"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-texture" names="class_renderscenebuffersrd_method_get_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_texture</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回具有该名称的缓存纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-texture-format"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-texture-format" names="class_renderscenebuffersrd_method_get_texture_format"><reference internal="True" refuri="class_rdtextureformat#class-rdtextureformat"><inline classes="std std-ref">RDTextureFormat</inline></reference> <strong>get_texture_format</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回用于创建缓存纹理的纹理格式信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-texture-slice"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-texture-slice" names="class_renderscenebuffersrd_method_get_texture_slice"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_texture_slice</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmap, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layers, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmaps <strong>)</strong></paragraph>
            <paragraph>返回缓存纹理的指定切片（层或 mipmap）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-texture-slice-size"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-texture-slice-size" names="class_renderscenebuffersrd_method_get_texture_slice_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_texture_slice_size</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmap <strong>)</strong></paragraph>
            <paragraph>返回缓存纹理给定切片的纹理大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-texture-slice-view"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-texture-slice-view" names="class_renderscenebuffersrd_method_get_texture_slice_view"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_texture_slice_view</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmap, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layers, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmaps, <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference> view <strong>)</strong></paragraph>
            <paragraph>返回缓存纹理的指定切片视图（层或 mipmap）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-use-taa"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-use-taa" names="class_renderscenebuffersrd_method_get_use_taa"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_use_taa</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果启用 TAA，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-velocity-layer"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-velocity-layer" names="class_renderscenebuffersrd_method_get_velocity_layer"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_velocity_layer</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer <strong>)</strong></paragraph>
            <paragraph>从渲染 3D 内容的速度纹理返回指定的图层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-velocity-texture"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-velocity-texture" names="class_renderscenebuffersrd_method_get_velocity_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_velocity_texture</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回渲染 3D 内容的速度纹理。如果使用多视图，这将是一个包含所有视图的纹理数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-get-view-count"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-get-view-count" names="class_renderscenebuffersrd_method_get_view_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_view_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回关联视口的视图数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderscenebuffersrd-method-has-texture"></target>
            <paragraph classes="classref-method" ids="class-renderscenebuffersrd-method-has-texture" names="class_renderscenebuffersrd_method_has_texture"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_texture</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> context, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果存在使用该名称的缓冲纹理，则返回 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
