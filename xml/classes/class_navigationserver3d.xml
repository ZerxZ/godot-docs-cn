<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_navigationserver3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/NavigationServer3D.xml.</comment>
    <target refid="class-navigationserver3d"></target>
    <section ids="navigationserver3d class-navigationserver3d" names="navigationserver3d class_navigationserver3d">
        <title>NavigationServer3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于访问低阶 3D 导航的服务器接口。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>NavigationServer3D 是处理导航地图、区块、代理的服务器。它不处理来自 <reference internal="True" refuri="class_astar3d#class-astar3d"><inline classes="std std-ref">AStar3D</inline></reference> 的 A* 导航。</paragraph>
            <paragraph>地图由区块组成，区块由导航网格组成。它们共同定义了 3D 空间中的可达区域。</paragraph>
            <paragraph><strong>注意：</strong>大多数 <strong>NavigationServer3D</strong> 的更改都是在下一个物理帧进行的，不会立即生效。包括所有对地图、区块、代理的更改，无论是通过场景树中导航相关的节点作出的更改，还是通过脚本作出的更改。</paragraph>
            <paragraph>两个区块必须共享一条相似的边才能相连。如果一条边的两个顶点与另一条边上相应顶点的距离都小于 <literal>edge_connection_margin</literal>，那么就会认为这两条边是相连的。</paragraph>
            <paragraph>可以使用 <reference internal="True" refid="class-navigationserver3d-method-region-set-navigation-layers"><inline classes="std std-ref">region_set_navigation_layers</inline></reference> 为区块分配导航层，使用 <reference internal="True" refid="class-navigationserver3d-method-map-get-path"><inline classes="std std-ref">map_get_path</inline></reference> 请求路径时会对导航层进行检查。可用于针对某些对象允许或禁止特定的区域。</paragraph>
            <paragraph>使用碰撞躲避系统就需要使用代理。你可以为代理设置目标速度，然后服务器就会发出回调，提供修改后的速度。</paragraph>
            <paragraph><strong>注意：</strong>碰撞躲避系统会忽略区块。直接使用修改后的速度可能会将代理移动到可达区域之外。这是碰撞躲避系统的缺陷，更复杂的场合可能需要使用物理引擎。</paragraph>
            <paragraph>服务器会对所有调用进行跟踪，并在同步阶段执行。这意味着你可以放心地从任何线程请求对地图作出任何修改。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="3D 导航网格演示" refuri="https://godotengine.org/asset-library/asset/124">3D 导航网格演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/navigation/navigation_using_navigationservers"><inline classes="doc">使用 NavigationServer</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="361"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-create"><inline classes="std std-ref">agent_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-get-avoidance-enabled"><inline classes="std std-ref">agent_get_avoidance_enabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-get-map"><inline classes="std std-ref">agent_get_map</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-get-paused"><inline classes="std std-ref">agent_get_paused</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-get-use-3d-avoidance"><inline classes="std std-ref">agent_get_use_3d_avoidance</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-is-map-changed"><inline classes="std std-ref">agent_is_map_changed</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-avoidance-callback"><inline classes="std std-ref">agent_set_avoidance_callback</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callback <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-avoidance-enabled"><inline classes="std std-ref">agent_set_avoidance_enabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-avoidance-layers"><inline classes="std std-ref">agent_set_avoidance_layers</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layers <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-avoidance-mask"><inline classes="std std-ref">agent_set_avoidance_mask</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mask <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-avoidance-priority"><inline classes="std std-ref">agent_set_avoidance_priority</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> priority <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-height"><inline classes="std std-ref">agent_set_height</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> height <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-map"><inline classes="std std-ref">agent_set_map</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-max-neighbors"><inline classes="std std-ref">agent_set_max_neighbors</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> count <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-max-speed"><inline classes="std std-ref">agent_set_max_speed</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> max_speed <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-neighbor-distance"><inline classes="std std-ref">agent_set_neighbor_distance</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> distance <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-paused"><inline classes="std std-ref">agent_set_paused</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> paused <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-position"><inline classes="std std-ref">agent_set_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> position <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-radius"><inline classes="std std-ref">agent_set_radius</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> radius <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-time-horizon-agents"><inline classes="std std-ref">agent_set_time_horizon_agents</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time_horizon <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-time-horizon-obstacles"><inline classes="std std-ref">agent_set_time_horizon_obstacles</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time_horizon <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-use-3d-avoidance"><inline classes="std std-ref">agent_set_use_3d_avoidance</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-velocity"><inline classes="std std-ref">agent_set_velocity</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> velocity <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-agent-set-velocity-forced"><inline classes="std std-ref">agent_set_velocity_forced</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> velocity <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-bake-from-source-geometry-data"><inline classes="std std-ref">bake_from_source_geometry_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> navigation_mesh, <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference> source_geometry_data, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callback=Callable() <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-bake-from-source-geometry-data-async"><inline classes="std std-ref">bake_from_source_geometry_data_async</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> navigation_mesh, <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference> source_geometry_data, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callback=Callable() <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> rid <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-get-debug-enabled"><inline classes="std std-ref">get_debug_enabled</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-get-maps"><inline classes="std std-ref">get_maps</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-get-process-info"><inline classes="std std-ref">get_process_info</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-navigationserver3d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> process_info <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-create"><inline classes="std std-ref">link_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-get-enabled"><inline classes="std std-ref">link_get_enabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-get-end-position"><inline classes="std std-ref">link_get_end_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-get-enter-cost"><inline classes="std std-ref">link_get_enter_cost</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-get-map"><inline classes="std std-ref">link_get_map</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-get-navigation-layers"><inline classes="std std-ref">link_get_navigation_layers</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-get-owner-id"><inline classes="std std-ref">link_get_owner_id</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-get-start-position"><inline classes="std std-ref">link_get_start_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-get-travel-cost"><inline classes="std std-ref">link_get_travel_cost</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-is-bidirectional"><inline classes="std std-ref">link_is_bidirectional</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-set-bidirectional"><inline classes="std std-ref">link_set_bidirectional</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> bidirectional <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-set-enabled"><inline classes="std std-ref">link_set_enabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-set-end-position"><inline classes="std std-ref">link_set_end_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> position <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-set-enter-cost"><inline classes="std std-ref">link_set_enter_cost</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> enter_cost <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-set-map"><inline classes="std std-ref">link_set_map</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-set-navigation-layers"><inline classes="std std-ref">link_set_navigation_layers</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> navigation_layers <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-set-owner-id"><inline classes="std std-ref">link_set_owner_id</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> owner_id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-set-start-position"><inline classes="std std-ref">link_set_start_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> position <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-link-set-travel-cost"><inline classes="std std-ref">link_set_travel_cost</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> travel_cost <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-create"><inline classes="std std-ref">map_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-force-update"><inline classes="std std-ref">map_force_update</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-agents"><inline classes="std std-ref">map_get_agents</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-cell-height"><inline classes="std std-ref">map_get_cell_height</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-cell-size"><inline classes="std std-ref">map_get_cell_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-closest-point"><inline classes="std std-ref">map_get_closest_point</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to_point <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-closest-point-normal"><inline classes="std std-ref">map_get_closest_point_normal</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to_point <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-closest-point-owner"><inline classes="std std-ref">map_get_closest_point_owner</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to_point <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-closest-point-to-segment"><inline classes="std std-ref">map_get_closest_point_to_segment</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> start, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> end, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_collision=false <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-edge-connection-margin"><inline classes="std std-ref">map_get_edge_connection_margin</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-link-connection-radius"><inline classes="std std-ref">map_get_link_connection_radius</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-links"><inline classes="std std-ref">map_get_links</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-obstacles"><inline classes="std std-ref">map_get_obstacles</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-path"><inline classes="std std-ref">map_get_path</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> origin, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> destination, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> optimize, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> navigation_layers=1 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-regions"><inline classes="std std-ref">map_get_regions</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-up"><inline classes="std std-ref">map_get_up</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-get-use-edge-connections"><inline classes="std std-ref">map_get_use_edge_connections</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-is-active"><inline classes="std std-ref">map_is_active</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-set-active"><inline classes="std std-ref">map_set_active</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> active <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-set-cell-height"><inline classes="std std-ref">map_set_cell_height</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> cell_height <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-set-cell-size"><inline classes="std std-ref">map_set_cell_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> cell_size <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-set-edge-connection-margin"><inline classes="std std-ref">map_set_edge_connection_margin</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> margin <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-set-link-connection-radius"><inline classes="std std-ref">map_set_link_connection_radius</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> radius <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-set-up"><inline classes="std std-ref">map_set_up</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> up <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-map-set-use-edge-connections"><inline classes="std std-ref">map_set_use_edge_connections</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-create"><inline classes="std std-ref">obstacle_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-get-avoidance-enabled"><inline classes="std std-ref">obstacle_get_avoidance_enabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-get-map"><inline classes="std std-ref">obstacle_get_map</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-get-paused"><inline classes="std std-ref">obstacle_get_paused</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-get-use-3d-avoidance"><inline classes="std std-ref">obstacle_get_use_3d_avoidance</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-set-avoidance-enabled"><inline classes="std std-ref">obstacle_set_avoidance_enabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-set-avoidance-layers"><inline classes="std std-ref">obstacle_set_avoidance_layers</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layers <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-set-height"><inline classes="std std-ref">obstacle_set_height</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> height <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-set-map"><inline classes="std std-ref">obstacle_set_map</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-set-paused"><inline classes="std std-ref">obstacle_set_paused</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> paused <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-set-position"><inline classes="std std-ref">obstacle_set_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> position <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-set-radius"><inline classes="std std-ref">obstacle_set_radius</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> radius <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-set-use-3d-avoidance"><inline classes="std std-ref">obstacle_set_use_3d_avoidance</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-set-velocity"><inline classes="std std-ref">obstacle_set_velocity</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> velocity <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-obstacle-set-vertices"><inline classes="std std-ref">obstacle_set_vertices</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> vertices <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-parse-source-geometry-data"><inline classes="std std-ref">parse_source_geometry_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> navigation_mesh, <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference> source_geometry_data, <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> root_node, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callback=Callable() <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-query-path"><inline classes="std std-ref">query_path</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_navigationpathqueryparameters3d#class-navigationpathqueryparameters3d"><inline classes="std std-ref">NavigationPathQueryParameters3D</inline></reference> parameters, <reference internal="True" refuri="class_navigationpathqueryresult3d#class-navigationpathqueryresult3d"><inline classes="std std-ref">NavigationPathQueryResult3D</inline></reference> result <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-bake-navigation-mesh"><inline classes="std std-ref">region_bake_navigation_mesh</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> navigation_mesh, <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> root_node <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-create"><inline classes="std std-ref">region_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-get-connection-pathway-end"><inline classes="std std-ref">region_get_connection_pathway_end</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> connection <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-get-connection-pathway-start"><inline classes="std std-ref">region_get_connection_pathway_start</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> connection <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-get-connections-count"><inline classes="std std-ref">region_get_connections_count</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-get-enabled"><inline classes="std std-ref">region_get_enabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-get-enter-cost"><inline classes="std std-ref">region_get_enter_cost</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-get-map"><inline classes="std std-ref">region_get_map</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-get-navigation-layers"><inline classes="std std-ref">region_get_navigation_layers</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-get-owner-id"><inline classes="std std-ref">region_get_owner_id</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-get-travel-cost"><inline classes="std std-ref">region_get_travel_cost</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-get-use-edge-connections"><inline classes="std std-ref">region_get_use_edge_connections</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-owns-point"><inline classes="std std-ref">region_owns_point</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> point <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-set-enabled"><inline classes="std std-ref">region_set_enabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-set-enter-cost"><inline classes="std std-ref">region_set_enter_cost</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> enter_cost <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-set-map"><inline classes="std std-ref">region_set_map</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-set-navigation-layers"><inline classes="std std-ref">region_set_navigation_layers</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> navigation_layers <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-set-navigation-mesh"><inline classes="std std-ref">region_set_navigation_mesh</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> navigation_mesh <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-set-owner-id"><inline classes="std std-ref">region_set_owner_id</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> owner_id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-set-transform"><inline classes="std std-ref">region_set_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> transform <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-set-travel-cost"><inline classes="std std-ref">region_set_travel_cost</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> travel_cost <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-region-set-use-edge-connections"><inline classes="std std-ref">region_set_use_edge_connections</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-set-active"><inline classes="std std-ref">set_active</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> active <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationserver3d-method-set-debug-enabled"><inline classes="std std-ref">set_debug_enabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-navigationserver3d-signal-avoidance-debug-changed"></target>
            <paragraph classes="classref-signal" ids="class-navigationserver3d-signal-avoidance-debug-changed" names="class_navigationserver3d_signal_avoidance_debug_changed"><strong>avoidance_debug_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>当避障调试设置更改时发出。仅在调试版本中可用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-signal-map-changed"></target>
            <paragraph classes="classref-signal" ids="class-navigationserver3d-signal-map-changed" names="class_navigationserver3d_signal_map_changed"><strong>map_changed</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong></paragraph>
            <paragraph>当导航地图更新时、地区移动或被修改时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-signal-navigation-debug-changed"></target>
            <paragraph classes="classref-signal" ids="class-navigationserver3d-signal-navigation-debug-changed" names="class_navigationserver3d_signal_navigation_debug_changed"><strong>navigation_debug_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>当导航调试设置更改时发出。仅在调试版本中可用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-navigationserver3d-processinfo"></target>
            <paragraph classes="classref-enumeration" ids="enum-navigationserver3d-processinfo" names="enum_navigationserver3d_processinfo">enum <strong>ProcessInfo</strong>:</paragraph>
            <target refid="class-navigationserver3d-constant-info-active-maps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationserver3d-constant-info-active-maps" names="class_navigationserver3d_constant_info_active_maps"><reference internal="True" refid="enum-navigationserver3d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> <strong>INFO_ACTIVE_MAPS</strong> = <literal>0</literal></paragraph>
            <paragraph>常量，用于获取活动导航地图的数量。</paragraph>
            <target refid="class-navigationserver3d-constant-info-region-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationserver3d-constant-info-region-count" names="class_navigationserver3d_constant_info_region_count"><reference internal="True" refid="enum-navigationserver3d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> <strong>INFO_REGION_COUNT</strong> = <literal>1</literal></paragraph>
            <paragraph>常量，用于获取活动导航地区的数量。</paragraph>
            <target refid="class-navigationserver3d-constant-info-agent-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationserver3d-constant-info-agent-count" names="class_navigationserver3d_constant_info_agent_count"><reference internal="True" refid="enum-navigationserver3d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> <strong>INFO_AGENT_COUNT</strong> = <literal>2</literal></paragraph>
            <paragraph>常量，用于获取正在进行避障的活动导航代理的数量。</paragraph>
            <target refid="class-navigationserver3d-constant-info-link-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationserver3d-constant-info-link-count" names="class_navigationserver3d_constant_info_link_count"><reference internal="True" refid="enum-navigationserver3d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> <strong>INFO_LINK_COUNT</strong> = <literal>3</literal></paragraph>
            <paragraph>常量，用于获取活动导航链接的数量。</paragraph>
            <target refid="class-navigationserver3d-constant-info-polygon-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationserver3d-constant-info-polygon-count" names="class_navigationserver3d_constant_info_polygon_count"><reference internal="True" refid="enum-navigationserver3d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> <strong>INFO_POLYGON_COUNT</strong> = <literal>4</literal></paragraph>
            <paragraph>常量，用于获取导航网格多边形的数量。</paragraph>
            <target refid="class-navigationserver3d-constant-info-edge-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationserver3d-constant-info-edge-count" names="class_navigationserver3d_constant_info_edge_count"><reference internal="True" refid="enum-navigationserver3d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> <strong>INFO_EDGE_COUNT</strong> = <literal>5</literal></paragraph>
            <paragraph>常量，用于获取导航网格多边形的边的数量。</paragraph>
            <target refid="class-navigationserver3d-constant-info-edge-merge-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationserver3d-constant-info-edge-merge-count" names="class_navigationserver3d_constant_info_edge_merge_count"><reference internal="True" refid="enum-navigationserver3d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> <strong>INFO_EDGE_MERGE_COUNT</strong> = <literal>6</literal></paragraph>
            <paragraph>常量，用于获取由于边键重叠而被合并的导航网格多边形的边的数量。</paragraph>
            <target refid="class-navigationserver3d-constant-info-edge-connection-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationserver3d-constant-info-edge-connection-count" names="class_navigationserver3d_constant_info_edge_connection_count"><reference internal="True" refid="enum-navigationserver3d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> <strong>INFO_EDGE_CONNECTION_COUNT</strong> = <literal>7</literal></paragraph>
            <paragraph>常量，用以获取被认为由于边接近而连接的导航网格多边形的边的数量。</paragraph>
            <target refid="class-navigationserver3d-constant-info-edge-free-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationserver3d-constant-info-edge-free-count" names="class_navigationserver3d_constant_info_edge_free_count"><reference internal="True" refid="enum-navigationserver3d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> <strong>INFO_EDGE_FREE_COUNT</strong> = <literal>8</literal></paragraph>
            <paragraph>常量，用于获取无法合并但仍可通过边接近或链接连接的导航网格多边形的边的数量。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-navigationserver3d-method-agent-create"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-create" names="class_navigationserver3d_method_agent_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>agent_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>创建代理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-get-avoidance-enabled"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-get-avoidance-enabled" names="class_navigationserver3d_method_agent_get_avoidance_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>agent_get_avoidance_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果指定代理 <literal>agent</literal> 启用了避障，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-get-map"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-get-map" names="class_navigationserver3d_method_agent_get_map"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>agent_get_map</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回请求 <literal>agent</literal> 目前分配到的导航地图 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-get-paused"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-get-paused" names="class_navigationserver3d_method_agent_get_paused"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>agent_get_paused</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果指定的 <literal>agent</literal> 处于暂停状态，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-get-use-3d-avoidance"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-get-use-3d-avoidance" names="class_navigationserver3d_method_agent_get_use_3d_avoidance"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>agent_get_use_3d_avoidance</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果指定代理 <literal>agent</literal> 使用 3D 空间 Vector3(x,y,z) 的避障而不是水平 2D Vector2(x,y) / Vector3(x,0.0,z) 避障，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-is-map-changed"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-is-map-changed" names="class_navigationserver3d_method_agent_is_map_changed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>agent_is_map_changed</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该地图在上一帧发生了改变，则返回 true。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-avoidance-callback"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-avoidance-callback" names="class_navigationserver3d_method_agent_set_avoidance_callback">void <strong>agent_set_avoidance_callback</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callback <strong>)</strong></paragraph>
            <paragraph>设置在 <literal>agent</literal> 的每个避障处理步骤之后调用的回调 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>。计算出的 <literal>safe_velocity</literal> 将在物理计算之前通过信号发送。</paragraph>
            <paragraph><strong>注意：</strong>只要代理还在导航地图上且未被释放，创建的回调就会始终独立于 SceneTree 状态进行处理。要为某个代理禁用回调的发送，请再次使用一个空的 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 来调用 <reference internal="True" refid="class-navigationserver3d-method-agent-set-avoidance-callback"><inline classes="std std-ref">agent_set_avoidance_callback</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-avoidance-enabled"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-avoidance-enabled" names="class_navigationserver3d_method_agent_set_avoidance_enabled">void <strong>agent_set_avoidance_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>如果 <literal>enabled</literal> 为 <literal>true</literal>，则提供的 <literal>agent</literal> 会计算避障。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-avoidance-layers"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-avoidance-layers" names="class_navigationserver3d_method_agent_set_avoidance_layers">void <strong>agent_set_avoidance_layers</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layers <strong>)</strong></paragraph>
            <paragraph>设置该代理的 <literal>avoidance_layers</literal> 位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-avoidance-mask"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-avoidance-mask" names="class_navigationserver3d_method_agent_set_avoidance_mask">void <strong>agent_set_avoidance_mask</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mask <strong>)</strong></paragraph>
            <paragraph>设置该代理的 <literal>avoidance_mask</literal> 位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-avoidance-priority"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-avoidance-priority" names="class_navigationserver3d_method_agent_set_avoidance_priority">void <strong>agent_set_avoidance_priority</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> priority <strong>)</strong></paragraph>
            <paragraph>设置该代理的 <literal>avoidance_priority</literal>，优先级 <literal>priority</literal> 在 0.0（最低优先级）到 1.0（最高优先级）之间。</paragraph>
            <paragraph><literal>agent</literal> 指定的代理不会针对 <literal>avoidance_mask</literal> 存在匹配但 `` avoidance_priority`` 更低的代理调整速度。相应地，优先级更低的代理则会对其速度进行更大的调整，从而避免与这个代理发生碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-height"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-height" names="class_navigationserver3d_method_agent_set_height">void <strong>agent_set_height</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> height <strong>)</strong></paragraph>
            <paragraph>更新指定代理 <literal>agent</literal> 的高度 <literal>height</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-map"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-map" names="class_navigationserver3d_method_agent_set_map">void <strong>agent_set_map</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong></paragraph>
            <paragraph>将代理放入地图中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-max-neighbors"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-max-neighbors" names="class_navigationserver3d_method_agent_set_max_neighbors">void <strong>agent_set_max_neighbors</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> count <strong>)</strong></paragraph>
            <paragraph>设置在导航中，该代理所考虑的其他代理的最大数量。这个数越大，模拟的运行时间越长。如果这个数太小，则模拟会不安全。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-max-speed"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-max-speed" names="class_navigationserver3d_method_agent_set_max_speed">void <strong>agent_set_max_speed</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> max_speed <strong>)</strong></paragraph>
            <paragraph>设置该代理的最大速度。必须为正数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-neighbor-distance"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-neighbor-distance" names="class_navigationserver3d_method_agent_set_neighbor_distance">void <strong>agent_set_neighbor_distance</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> distance <strong>)</strong></paragraph>
            <paragraph>设置在导航中，该代理所考虑的其他代理的最大距离。这个数越大，模拟的运行时间越长。如果这个数太小，则模拟会不安全。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-paused"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-paused" names="class_navigationserver3d_method_agent_set_paused">void <strong>agent_set_paused</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> paused <strong>)</strong></paragraph>
            <paragraph>如果 <literal>paused</literal> 为 true，则不会对指定的 <literal>agent</literal> 进行处理，例如计算避障速度以及收到避障回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-position"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-position" names="class_navigationserver3d_method_agent_set_position">void <strong>agent_set_position</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> position <strong>)</strong></paragraph>
            <paragraph>设置该代理在世界空间中的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-radius"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-radius" names="class_navigationserver3d_method_agent_set_radius">void <strong>agent_set_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> radius <strong>)</strong></paragraph>
            <paragraph>设置该代理的半径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-time-horizon-agents"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-time-horizon-agents" names="class_navigationserver3d_method_agent_set_time_horizon_agents">void <strong>agent_set_time_horizon_agents</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time_horizon <strong>)</strong></paragraph>
            <paragraph>考虑其他代理的前提下，该代理的速度的最短安全时间，这个速度是通过仿真得到的。数值越大，代理响应其他代理的速度就越快，但该代理选择速度的自由度也就越小。太高的取值会大大降低代理的移动速度。必须为正数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-time-horizon-obstacles"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-time-horizon-obstacles" names="class_navigationserver3d_method_agent_set_time_horizon_obstacles">void <strong>agent_set_time_horizon_obstacles</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time_horizon <strong>)</strong></paragraph>
            <paragraph>考虑其他静态避障障碍物的前提下，该代理的速度的最短安全时间，这个速度是通过仿真得到的。数值越大，代理响应存在的静态避障障碍物的速度就越快，但该代理选择速度的自由度也就越小。太高的取值会大大降低代理的移动速度。必须为正数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-use-3d-avoidance"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-use-3d-avoidance" names="class_navigationserver3d_method_agent_set_use_3d_avoidance">void <strong>agent_set_use_3d_avoidance</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>设置该代理在启用避障时使用 2D 避障还是 3D 避障。</paragraph>
            <paragraph>如果为 <literal>true</literal>，则代理会为 XYZ 轴计算 3D 避障速度，例如在空中、水下、太空中进行的游戏。使用 3D 的代理只会躲避其他使用 3D 避障的代理。使用 3D 的代理只会响应基于半径的避障障碍物。使用 3D 的代理会忽略基于顶点的障碍物。使用 3D 的代理只会躲避其他使用 3D 的代理。</paragraph>
            <paragraph>如果为 <literal>false</literal>，则代理会沿 XZ 轴计算 2D 避障速度，忽略 Y 轴。使用 2D 的代理只会躲避其他使用 2D 避障的代理。使用 2D 的代理会响应基于半径的避障障碍物。使用 2D 的代理会响应基于顶点的避障障碍物。使用 2D 的代理只会躲避其他使用 2D 的代理。在 2D 避障时，使用 2D 的代理会忽略它们位于当前位置之下或者位于当前位置与代理高度之和之上的其他使用 2D 的代理和障碍物。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-velocity"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-velocity" names="class_navigationserver3d_method_agent_set_velocity">void <strong>agent_set_velocity</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> velocity <strong>)</strong></paragraph>
            <paragraph>将 <literal>velocity</literal> 设置为指定代理 <literal>agent</literal> 的新的需求速度。避障仿真会尽可能尝试满足这个速度，但为了躲避与其他代理和障碍物的碰撞也会对它进行修改。将代理传送至新的位置时，请使用 <reference internal="True" refid="class-navigationserver3d-method-agent-set-velocity-forced"><inline classes="std std-ref">agent_set_velocity_forced</inline></reference> 重置内部仿真速度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-agent-set-velocity-forced"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-agent-set-velocity-forced" names="class_navigationserver3d_method_agent_set_velocity_forced">void <strong>agent_set_velocity_forced</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> agent, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> velocity <strong>)</strong></paragraph>
            <paragraph>将指定代理 <literal>agent</literal> 的避障仿真内部速度替换为 <literal>velocity</literal>。将代理传送至新的位置时，应该在同一帧里使用这个函数。频繁调用这个函数可能让代理卡住。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-bake-from-source-geometry-data"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-bake-from-source-geometry-data" names="class_navigationserver3d_method_bake_from_source_geometry_data">void <strong>bake_from_source_geometry_data</strong> <strong>(</strong> <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> navigation_mesh, <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference> source_geometry_data, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callback=Callable() <strong>)</strong></paragraph>
            <paragraph>使用 <literal>source_geometry_data</literal> 中提供的数据对 <literal>navigation_mesh</literal> 进行烘焙。烘焙过程结束后，会调用可选的 <literal>callback</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-bake-from-source-geometry-data-async"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-bake-from-source-geometry-data-async" names="class_navigationserver3d_method_bake_from_source_geometry_data_async">void <strong>bake_from_source_geometry_data_async</strong> <strong>(</strong> <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> navigation_mesh, <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference> source_geometry_data, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callback=Callable() <strong>)</strong></paragraph>
            <paragraph>使用提供的 <literal>source_geometry_data</literal> 中的数据烘焙提供的 <literal>navigation_mesh</literal>，并作为在后台线程上运行的异步任务。该过程完成后，将调用可选的 <literal>callback</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-free-rid"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-free-rid" names="class_navigationserver3d_method_free_rid">void <strong>free_rid</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> rid <strong>)</strong></paragraph>
            <paragraph>销毁给定的 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-get-debug-enabled"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-get-debug-enabled" names="class_navigationserver3d_method_get_debug_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_debug_enabled</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该 NavigationServer 启用了调试，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-get-maps"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-get-maps" names="class_navigationserver3d_method_get_maps"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> <strong>get_maps</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该 NavigationServer 上所有已创建的导航地图的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。会同时返回已创建的 2D 和 3D 导航地图，因为理论上它们之间是没有区别的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-get-process-info"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-get-process-info" names="class_navigationserver3d_method_get_process_info"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_process_info</strong> <strong>(</strong> <reference internal="True" refid="enum-navigationserver3d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> process_info <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回有关 NavigationServer 当前状态的信息。有关可用状态的列表，请参阅 <reference internal="True" refid="enum-navigationserver3d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-create"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-create" names="class_navigationserver3d_method_link_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>link_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在地图上新建两个地点之间的链接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-get-enabled"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-get-enabled" names="class_navigationserver3d_method_link_get_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>link_get_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果指定的 <literal>link</literal> 已启用，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-get-end-position"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-get-end-position" names="class_navigationserver3d_method_link_get_end_position"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>link_get_end_position</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回链接 <literal>link</literal> 的结束位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-get-enter-cost"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-get-enter-cost" names="class_navigationserver3d_method_link_get_enter_cost"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>link_get_enter_cost</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>link</literal> 链接的进入消耗。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-get-map"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-get-map" names="class_navigationserver3d_method_link_get_map"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>link_get_map</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回请求的导航链接 <literal>link</literal> 当前分配的导航地图的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-get-navigation-layers"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-get-navigation-layers" names="class_navigationserver3d_method_link_get_navigation_layers"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>link_get_navigation_layers</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>link</literal> 的导航层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-get-owner-id"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-get-owner-id" names="class_navigationserver3d_method_link_get_owner_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>link_get_owner_id</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回管理该链接的对象的 <literal>ObjectID</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-get-start-position"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-get-start-position" names="class_navigationserver3d_method_link_get_start_position"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>link_get_start_position</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>link</literal> 链接的入口位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-get-travel-cost"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-get-travel-cost" names="class_navigationserver3d_method_link_get_travel_cost"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>link_get_travel_cost</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>link</literal> 链接的移动消耗。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-is-bidirectional"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-is-bidirectional" names="class_navigationserver3d_method_link_is_bidirectional"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>link_is_bidirectional</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该 <literal>link</literal> 是否能够双向通行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-set-bidirectional"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-set-bidirectional" names="class_navigationserver3d_method_link_set_bidirectional">void <strong>link_set_bidirectional</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> bidirectional <strong>)</strong></paragraph>
            <paragraph>设置该 <literal>link</literal> 是否能够双向通行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-set-enabled"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-set-enabled" names="class_navigationserver3d_method_link_set_enabled">void <strong>link_set_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>如果 <literal>enabled</literal> 为 <literal>true</literal>，则指定的 <literal>link</literal> 会在它的当前导航地图中生效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-set-end-position"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-set-end-position" names="class_navigationserver3d_method_link_set_end_position">void <strong>link_set_end_position</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> position <strong>)</strong></paragraph>
            <paragraph>设置 <literal>link</literal> 的出口位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-set-enter-cost"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-set-enter-cost" names="class_navigationserver3d_method_link_set_enter_cost">void <strong>link_set_enter_cost</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> enter_cost <strong>)</strong></paragraph>
            <paragraph>设置 <literal>link</literal> 的进入消耗 <literal>enter_cost</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-set-map"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-set-map" names="class_navigationserver3d_method_link_set_map">void <strong>link_set_map</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong></paragraph>
            <paragraph>设置该链接的导航地图 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-set-navigation-layers"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-set-navigation-layers" names="class_navigationserver3d_method_link_set_navigation_layers">void <strong>link_set_navigation_layers</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> navigation_layers <strong>)</strong></paragraph>
            <paragraph>设置该链接的导航层。这允许从路径请求中选择链接（当使用 <reference internal="True" refid="class-navigationserver3d-method-map-get-path"><inline classes="std std-ref">map_get_path</inline></reference> 时）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-set-owner-id"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-set-owner-id" names="class_navigationserver3d_method_link_set_owner_id">void <strong>link_set_owner_id</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> owner_id <strong>)</strong></paragraph>
            <paragraph>设置管理该链接的对象的 <literal>ObjectID</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-set-start-position"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-set-start-position" names="class_navigationserver3d_method_link_set_start_position">void <strong>link_set_start_position</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> position <strong>)</strong></paragraph>
            <paragraph>设置 <literal>link</literal> 的入口位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-link-set-travel-cost"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-link-set-travel-cost" names="class_navigationserver3d_method_link_set_travel_cost">void <strong>link_set_travel_cost</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> link, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> travel_cost <strong>)</strong></paragraph>
            <paragraph>设置 <literal>link</literal> 的移动消耗 <literal>travel_cost</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-create"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-create" names="class_navigationserver3d_method_map_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>map_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>创建一张新地图。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-force-update"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-force-update" names="class_navigationserver3d_method_map_force_update">void <strong>map_force_update</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong></paragraph>
            <paragraph>该函数将立即强制指定的导航 <literal>map</literal> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 的同步。默认情况下，导航地图仅在每个物理帧结束时同步。该函数可用于立即（重新）计算该导航地图的所有导航网格和区块连接。这使得可以在同一帧中对修改后的地图的导航路径立即执行查询（如果需要，可以执行多次）。</paragraph>
            <paragraph>由于技术上的限制，当前的 NavigationServer 命令队列将被冲刷。这意味着所有已在当前物理帧中入队的更新命令都会被执行，即使是那些用于其他地图、不属于指定地图的区块和代理的更新命令。 昂贵计算的导航网格和地图的区块连接将仅针对指定地图进行。其他地图将在物理帧结束时接收正常同步。如果指定的地图在强制更新后又收到了修改，则它将在其他地图收到更新时再次更新。</paragraph>
            <paragraph>避障处理和 <literal>safe_velocity</literal> 信号的分发不受该函数影响，仍继续发生在物理帧结束时的所有地图和代理上。</paragraph>
            <paragraph><strong>注意：</strong>能力越大，责任越大。该函数仅该用于用户真正知道自己在做什么并且有充分理由的情况。强制立即更新导航地图需要锁定 NavigationServer 并冲刷整个 NavigationServer 命令队列。这不仅会严重影响游戏的性能，而且如果缺乏远见且使用不当，还会引入 bug。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-agents"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-agents" names="class_navigationserver3d_method_map_get_agents"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> <strong>map_get_agents</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回所有与请求的导航地图 <literal>map</literal> 关联的导航代理的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-cell-height"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-cell-height" names="class_navigationserver3d_method_map_get_cell_height"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>map_get_cell_height</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回在 Y 轴上栅格化导航网格顶点所使用的地图单元格高度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-cell-size"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-cell-size" names="class_navigationserver3d_method_map_get_cell_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>map_get_cell_size</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回在 XZ 平面上栅格化导航网格顶点所使用的地图单元格大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-closest-point"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-closest-point" names="class_navigationserver3d_method_map_get_closest_point"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>map_get_closest_point</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to_point <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回导航网格表面上与提供的 <literal>to_point</literal> 距离最近的点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-closest-point-normal"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-closest-point-normal" names="class_navigationserver3d_method_map_get_closest_point_normal"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>map_get_closest_point_normal</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to_point <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-navigationserver3d-method-map-get-closest-point"><inline classes="std std-ref">map_get_closest_point</inline></reference> 所返回的点的法线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-closest-point-owner"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-closest-point-owner" names="class_navigationserver3d_method_map_get_closest_point_owner"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>map_get_closest_point_owner</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to_point <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回由 <reference internal="True" refid="class-navigationserver3d-method-map-get-closest-point"><inline classes="std std-ref">map_get_closest_point</inline></reference> 返回的点的所有者地区的 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-closest-point-to-segment"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-closest-point-to-segment" names="class_navigationserver3d_method_map_get_closest_point_to_segment"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>map_get_closest_point_to_segment</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> start, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> end, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_collision=false <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回导航表面与该线段之间最接近的点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-edge-connection-margin"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-edge-connection-margin" names="class_navigationserver3d_method_map_get_edge_connection_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>map_get_edge_connection_margin</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回地图的边界连接边距。这是让两个不同地区的边界相连所需的最小顶点距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-link-connection-radius"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-link-connection-radius" names="class_navigationserver3d_method_map_get_link_connection_radius"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>map_get_link_connection_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该地图的链接连接半径。该距离是任何链接将搜索要连接的导航网格多边形的最大范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-links"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-links" names="class_navigationserver3d_method_map_get_links"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> <strong>map_get_links</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回当前分配给请求的导航地图 <literal>map</literal> 的所有导航链接的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-obstacles"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-obstacles" names="class_navigationserver3d_method_map_get_obstacles"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> <strong>map_get_obstacles</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回当前分配给请求的导航地图 <literal>map</literal> 的所有导航障碍物的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-path"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-path" names="class_navigationserver3d_method_map_get_path"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>map_get_path</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> origin, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> destination, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> optimize, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> navigation_layers=1 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回从原点到达目的地的导航路径。<literal>navigation_layers</literal> 是被允许在路径中的所有区块导航层的位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-regions"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-regions" names="class_navigationserver3d_method_map_get_regions"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> <strong>map_get_regions</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回当前分配给所请求的导航 <literal>map</literal> 的所有导航区块的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-up"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-up" names="class_navigationserver3d_method_map_get_up"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>map_get_up</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回地图的上方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-get-use-edge-connections"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-get-use-edge-connections" names="class_navigationserver3d_method_map_get_use_edge_connections"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>map_get_use_edge_connections</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果导航地图 <literal>map</literal> 允许导航区块使用边缘连接与位于导航地图边缘连接边距范围内的其他导航区块相连接，则返回 true。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-is-active"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-is-active" names="class_navigationserver3d_method_map_is_active"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>map_is_active</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果地图处于活动状态，则返回 true。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-set-active"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-set-active" names="class_navigationserver3d_method_map_set_active">void <strong>map_set_active</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> active <strong>)</strong></paragraph>
            <paragraph>设置地图的激活态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-set-cell-height"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-set-cell-height" names="class_navigationserver3d_method_map_set_cell_height">void <strong>map_set_cell_height</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> cell_height <strong>)</strong></paragraph>
            <paragraph>设置在 Y 轴上栅格化导航网格顶点所使用的地图单元格高度。必须与所使用的导航网格的单元格高度相匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-set-cell-size"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-set-cell-size" names="class_navigationserver3d_method_map_set_cell_size">void <strong>map_set_cell_size</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> cell_size <strong>)</strong></paragraph>
            <paragraph>设置在 XZ 平面上栅格化导航网格顶点所使用的地图单元格大小。必须与所使用的导航网格的单元格大小相匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-set-edge-connection-margin"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-set-edge-connection-margin" names="class_navigationserver3d_method_map_set_edge_connection_margin">void <strong>map_set_edge_connection_margin</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> margin <strong>)</strong></paragraph>
            <paragraph>设置用于焊接兼容地区边界的地图边界连接边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-set-link-connection-radius"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-set-link-connection-radius" names="class_navigationserver3d_method_map_set_link_connection_radius">void <strong>map_set_link_connection_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> radius <strong>)</strong></paragraph>
            <paragraph>设置该地图用于连接链接和导航多边形的链接连接半径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-set-up"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-set-up" names="class_navigationserver3d_method_map_set_up">void <strong>map_set_up</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> up <strong>)</strong></paragraph>
            <paragraph>设置地图的上方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-map-set-use-edge-connections"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-map-set-use-edge-connections" names="class_navigationserver3d_method_map_set_use_edge_connections">void <strong>map_set_use_edge_connections</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>设置导航地图 <literal>map</literal> 的边缘连接使用情况。如果 <literal>enabled</literal> 为 <literal>true</literal>，则导航地图允许导航区块使用边缘连接与位于导航地图边缘连接边距范围内的其他导航区块相连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-create"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-create" names="class_navigationserver3d_method_obstacle_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>obstacle_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>新建障碍物。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-get-avoidance-enabled"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-get-avoidance-enabled" names="class_navigationserver3d_method_obstacle_get_avoidance_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>obstacle_get_avoidance_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果给定的 <literal>obstacle</literal> 启用了避障，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-get-map"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-get-map" names="class_navigationserver3d_method_obstacle_get_map"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>obstacle_get_map</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回请求的障碍物 <literal>obstacle</literal> 当前分配的导航地图 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-get-paused"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-get-paused" names="class_navigationserver3d_method_obstacle_get_paused"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>obstacle_get_paused</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果指定的 <literal>obstacle</literal> 被暂停，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-get-use-3d-avoidance"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-get-use-3d-avoidance" names="class_navigationserver3d_method_obstacle_get_use_3d_avoidance"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>obstacle_get_use_3d_avoidance</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果提供的 <literal>obstacle</literal> 使用 3D 空间的 Vector3(x,y,z)，不使用水平 2D Vector2(x,y) / Vector3(x,0.0,z)，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-set-avoidance-enabled"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-set-avoidance-enabled" names="class_navigationserver3d_method_obstacle_set_avoidance_enabled">void <strong>obstacle_set_avoidance_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>如果 <literal>enabled</literal> 为 <literal>true</literal>，则提供的障碍物 <literal>obstacle</literal> 会影响使用代理的避障。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-set-avoidance-layers"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-set-avoidance-layers" names="class_navigationserver3d_method_obstacle_set_avoidance_layers">void <strong>obstacle_set_avoidance_layers</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layers <strong>)</strong></paragraph>
            <paragraph>设置障碍物的避障层 <literal>avoidance_layers</literal> 位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-set-height"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-set-height" names="class_navigationserver3d_method_obstacle_set_height">void <strong>obstacle_set_height</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> height <strong>)</strong></paragraph>
            <paragraph>设置 <literal>obstacle</literal> 的高度 <literal>height</literal>。3D 代理会忽略位于其上方和下方的障碍物，使用 2D 避障。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-set-map"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-set-map" names="class_navigationserver3d_method_obstacle_set_map">void <strong>obstacle_set_map</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong></paragraph>
            <paragraph>将 <literal>obstacle</literal> 分配给导航地图。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-set-paused"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-set-paused" names="class_navigationserver3d_method_obstacle_set_paused">void <strong>obstacle_set_paused</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> paused <strong>)</strong></paragraph>
            <paragraph>如果 <literal>paused</literal> 为 true，则不会处理指定的障碍物 <literal>obstacle</literal>，例如不会影响避障速度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-set-position"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-set-position" names="class_navigationserver3d_method_obstacle_set_position">void <strong>obstacle_set_position</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> position <strong>)</strong></paragraph>
            <paragraph>为 <literal>obstacle</literal> 更新世界空间中的位置 <literal>position</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-set-radius"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-set-radius" names="class_navigationserver3d_method_obstacle_set_radius">void <strong>obstacle_set_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> radius <strong>)</strong></paragraph>
            <paragraph>设置动态障碍物的半径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-set-use-3d-avoidance"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-set-use-3d-avoidance" names="class_navigationserver3d_method_obstacle_set_use_3d_avoidance">void <strong>obstacle_set_use_3d_avoidance</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>设置 <literal>obstacle</literal> 在启用避障时使用 2D 避障还是 3D 避障。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-set-velocity"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-set-velocity" names="class_navigationserver3d_method_obstacle_set_velocity">void <strong>obstacle_set_velocity</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> velocity <strong>)</strong></paragraph>
            <paragraph>将动态障碍物 <literal>obstacle</literal> 的速度设置为 <literal>velocity</literal>。能够让其他代理更好地预测该动态障碍物的移动。仅在与障碍物半径一同使用时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-obstacle-set-vertices"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-obstacle-set-vertices" names="class_navigationserver3d_method_obstacle_set_vertices">void <strong>obstacle_set_vertices</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> obstacle, <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> vertices <strong>)</strong></paragraph>
            <paragraph>设置障碍物的轮廓顶点。如果顶点顺时针缠绕，则障碍物会将代理向内部推挤，否则向外推挤。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-parse-source-geometry-data"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-parse-source-geometry-data" names="class_navigationserver3d_method_parse_source_geometry_data">void <strong>parse_source_geometry_data</strong> <strong>(</strong> <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> navigation_mesh, <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference> source_geometry_data, <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> root_node, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callback=Callable() <strong>)</strong></paragraph>
            <paragraph>根据 <literal>navigation_mesh</literal> 的属性解析 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 中的源几何体。会使用解析的结果对提供的 <literal>source_geometry_data</literal> 资源进行更新。后续可以在使用 <reference internal="True" refid="class-navigationserver3d-method-bake-from-source-geometry-data"><inline classes="std std-ref">bake_from_source_geometry_data</inline></reference> 烘焙导航网格时使用该资源。解析过程完成后，会调用可选的 <literal>callback</literal>。</paragraph>
            <paragraph><strong>注意：</strong>因为 SceneTree 并不是线程安全的，所以这个函数需要在主线程执行或使用延迟调用。</paragraph>
            <paragraph><strong>注意：</strong>从 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源读取数据数组虽然很方便，但会对帧率造成负面影响。这些数据需要从 GPU 获取，卡住正在处理的 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference>。出于性能考量，请优先使用碰撞形状或在代码中创建完整的数据数组等方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-query-path"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-query-path" names="class_navigationserver3d_method_query_path">void <strong>query_path</strong> <strong>(</strong> <reference internal="True" refuri="class_navigationpathqueryparameters3d#class-navigationpathqueryparameters3d"><inline classes="std std-ref">NavigationPathQueryParameters3D</inline></reference> parameters, <reference internal="True" refuri="class_navigationpathqueryresult3d#class-navigationpathqueryresult3d"><inline classes="std std-ref">NavigationPathQueryResult3D</inline></reference> result <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>在给定导航地图中查询路径。起点、目标点以及其他参数通过 <reference internal="True" refuri="class_navigationpathqueryparameters3d#class-navigationpathqueryparameters3d"><inline classes="std std-ref">NavigationPathQueryParameters3D</inline></reference> 定义。会使用路径和其他查询中请求的信息更新提供的 <reference internal="True" refuri="class_navigationpathqueryresult3d#class-navigationpathqueryresult3d"><inline classes="std std-ref">NavigationPathQueryResult3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-bake-navigation-mesh"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-bake-navigation-mesh" names="class_navigationserver3d_method_region_bake_navigation_mesh">void <strong>region_bake_navigation_mesh</strong> <strong>(</strong> <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> navigation_mesh, <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> root_node <strong>)</strong></paragraph>
            <paragraph>使用从 <literal>root_node</literal> 开始收集的烘焙源几何体来烘焙 <literal>navigation_mesh</literal>。</paragraph>
            <paragraph><emphasis>已弃用。</emphasis> 由于核心线程更改，该函数已弃用。要更新现有代码，请先创建一个 <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference> 资源。将该资源与 <reference internal="True" refid="class-navigationserver3d-method-parse-source-geometry-data"><inline classes="std std-ref">parse_source_geometry_data</inline></reference> 结合使用来解析 SceneTree 以查找有助于导航网格烘焙的节点。SceneTree 解析需要在主线程上进行。解析完成后，请在调用 <reference internal="True" refid="class-navigationserver3d-method-bake-from-source-geometry-data"><inline classes="std std-ref">bake_from_source_geometry_data</inline></reference> 时使用该资源对导航网格进行烘焙。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-create"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-create" names="class_navigationserver3d_method_region_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>region_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>创建一个新的地区。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-get-connection-pathway-end"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-get-connection-pathway-end" names="class_navigationserver3d_method_region_get_connection_pathway_end"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>region_get_connection_pathway_end</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> connection <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回连接门的终点。<literal>connection</literal> 是一个索引，介于 0 和 <reference internal="True" refid="class-navigationserver3d-method-region-get-connections-count"><inline classes="std std-ref">region_get_connections_count</inline></reference> 的返回值之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-get-connection-pathway-start"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-get-connection-pathway-start" names="class_navigationserver3d_method_region_get_connection_pathway_start"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>region_get_connection_pathway_start</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> connection <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回连接门的起点。<literal>connection</literal> 是一个索引，介于 0 和 <reference internal="True" refid="class-navigationserver3d-method-region-get-connections-count"><inline classes="std std-ref">region_get_connections_count</inline></reference> 的返回值之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-get-connections-count"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-get-connections-count" names="class_navigationserver3d_method_region_get_connections_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>region_get_connections_count</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>region</literal> 地区与其他地区在地图上有多少连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-get-enabled"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-get-enabled" names="class_navigationserver3d_method_region_get_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>region_get_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果指定的 <literal>region</literal> 已启用，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-get-enter-cost"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-get-enter-cost" names="class_navigationserver3d_method_region_get_enter_cost"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>region_get_enter_cost</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>region</literal> 地区的进入消耗。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-get-map"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-get-map" names="class_navigationserver3d_method_region_get_map"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>region_get_map</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回请求的 <literal>region</literal> 地区所关联的导航地图的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-get-navigation-layers"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-get-navigation-layers" names="class_navigationserver3d_method_region_get_navigation_layers"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>region_get_navigation_layers</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该地区的导航层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-get-owner-id"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-get-owner-id" names="class_navigationserver3d_method_region_get_owner_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>region_get_owner_id</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回管理该地区对象的 <literal>ObjectID</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-get-travel-cost"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-get-travel-cost" names="class_navigationserver3d_method_region_get_travel_cost"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>region_get_travel_cost</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>region</literal> 地区的移动消耗。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-get-use-edge-connections"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-get-use-edge-connections" names="class_navigationserver3d_method_region_get_use_edge_connections"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>region_get_use_edge_connections</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果导航区块 <literal>region</literal> 被设置为使用边缘连接与位于导航地图边缘连接边距范围内的其他导航区块相连接，则返回 true。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-owns-point"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-owns-point" names="class_navigationserver3d_method_region_owns_point"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>region_owns_point</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> point <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果提供的世界空间中的 <literal>point</literal> 当前由提供的导航区块 <literal>region</literal> 拥有，则返回 <literal>true</literal>。在这里的上下文中，“拥有”意味着与来自其他导航区块的所有其他导航网格相比，该区块的导航网格多边形面中有一个距离该点最近的可能位置，这些其他导航区块也已在提供的区块的导航地图上注册。</paragraph>
            <paragraph>如果有多个导航网格存在符合条件的位置并且距离相等，那么其多边形先被处理的导航区块将赢得所有权。多边形的处理顺序与导航区块在 NavigationServer 上的注册顺序一致。</paragraph>
            <paragraph><strong>注意：</strong>如果来自不同导航区块的导航网格存在重叠（通常应当避免），可能会得到预料之外的结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-set-enabled"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-set-enabled" names="class_navigationserver3d_method_region_set_enabled">void <strong>region_set_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>如果 <literal>enabled</literal> 为 <literal>true</literal>，则指定的 <literal>region</literal> 会在它的当前导航地图中生效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-set-enter-cost"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-set-enter-cost" names="class_navigationserver3d_method_region_set_enter_cost">void <strong>region_set_enter_cost</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> enter_cost <strong>)</strong></paragraph>
            <paragraph>设置 <literal>region</literal> 地区的进入消耗 <literal>enter_cost</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-set-map"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-set-map" names="class_navigationserver3d_method_region_set_map">void <strong>region_set_map</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> map <strong>)</strong></paragraph>
            <paragraph>设置该地区的地图。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-set-navigation-layers"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-set-navigation-layers" names="class_navigationserver3d_method_region_set_navigation_layers">void <strong>region_set_navigation_layers</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> navigation_layers <strong>)</strong></paragraph>
            <paragraph>设置地区的导航层。能够在路径请求中选择地区（使用 <reference internal="True" refid="class-navigationserver3d-method-map-get-path"><inline classes="std std-ref">map_get_path</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-set-navigation-mesh"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-set-navigation-mesh" names="class_navigationserver3d_method_region_set_navigation_mesh">void <strong>region_set_navigation_mesh</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> navigation_mesh <strong>)</strong></paragraph>
            <paragraph>设置该地图的导航网格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-set-owner-id"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-set-owner-id" names="class_navigationserver3d_method_region_set_owner_id">void <strong>region_set_owner_id</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> owner_id <strong>)</strong></paragraph>
            <paragraph>设置管理该地区对象的 <literal>ObjectID</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-set-transform"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-set-transform" names="class_navigationserver3d_method_region_set_transform">void <strong>region_set_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> transform <strong>)</strong></paragraph>
            <paragraph>设置该地区的全局变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-set-travel-cost"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-set-travel-cost" names="class_navigationserver3d_method_region_set_travel_cost">void <strong>region_set_travel_cost</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> travel_cost <strong>)</strong></paragraph>
            <paragraph>设置 <literal>region</literal> 地区的移动消耗 <literal>travel_cost</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-region-set-use-edge-connections"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-region-set-use-edge-connections" names="class_navigationserver3d_method_region_set_use_edge_connections">void <strong>region_set_use_edge_connections</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> region, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>如果 <literal>enabled</literal> 为 <literal>true</literal>，则导航区块 <literal>region</literal> 将使用边缘连接来与位于导航地图边缘连接边距范围内的其他导航区块相连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-set-active"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-set-active" names="class_navigationserver3d_method_set_active">void <strong>set_active</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> active <strong>)</strong></paragraph>
            <paragraph>控制这个服务器是否激活。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationserver3d-method-set-debug-enabled"></target>
            <paragraph classes="classref-method" ids="class-navigationserver3d-method-set-debug-enabled" names="class_navigationserver3d_method_set_debug_enabled">void <strong>set_debug_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>如果为 <literal>true</literal>，则该 NavigationServer 启用了调试模式。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
