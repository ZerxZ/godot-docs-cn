<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_tilemap.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <meta content="gridmap" name="keywords">
    </meta>
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TileMap.xml.</comment>
    <target refid="class-tilemap"></target>
    <section ids="tilemap class-tilemap" names="tilemap class_tilemap">
        <title>TileMap</title>
        <paragraph><strong>已弃用：</strong> Use multiple <reference internal="True" refuri="class_tilemaplayer#class-tilemaplayer"><inline classes="std std-ref">TileMapLayer</inline></reference> nodes instead.</paragraph>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>基于 2D 图块的地图节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>基于 2D 图块的地图节点。Tilemap（图块地图）使用 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference>，其中包含了图块的列表，用于创建基于栅格的地图。TileMap 可以有若干图层，可以将图块布局在彼此之上。</paragraph>
            <paragraph>出于性能原因，所有 TileMap 更新都会在一帧结束时进行批处理。值得注意的是，这意味着 <reference internal="True" refuri="class_tilesetscenescollectionsource#class-tilesetscenescollectionsource"><inline classes="std std-ref">TileSetScenesCollectionSource</inline></reference> 中的场景图块可能会在其父级之后初始化。仅当在场景树内时才会排队。</paragraph>
            <paragraph>要提前强制更新，请调用 <reference internal="True" refid="class-tilemap-method-update-internals"><inline classes="std std-ref">update_internals</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/using_tilemaps"><inline classes="doc">使用 Tilemap</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2D 平台跳跃演示" refuri="https://godotengine.org/asset-library/asset/2727">2D 平台跳跃演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2D 等轴演示" refuri="https://godotengine.org/asset-library/asset/2718">2D 等轴演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2D 六边形演示" refuri="https://godotengine.org/asset-library/asset/2717">2D 六边形演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="AStarGrid2D 的 2D 网格导航演示" refuri="https://godotengine.org/asset-library/asset/2723">AStarGrid2D 的 2D 网格导航演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2D 角色扮演游戏（RPG）演示" refuri="https://godotengine.org/asset-library/asset/2729">2D 角色扮演游戏（RPG）演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2D 运动学角色演示" refuri="https://godotengine.org/asset-library/asset/2719">2D 运动学角色演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="52"></colspec>
                    <colspec colwidth="86"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-property-collision-animatable"><inline classes="std std-ref">collision_animatable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-tilemap-visibilitymode"><inline classes="std std-ref">VisibilityMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-property-collision-visibility-mode"><inline classes="std std-ref">collision_visibility_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-tilemap-visibilitymode"><inline classes="std std-ref">VisibilityMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-property-navigation-visibility-mode"><inline classes="std std-ref">navigation_visibility_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-property-rendering-quadrant-size"><inline classes="std std-ref">rendering_quadrant_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>16</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-property-tile-set"><inline classes="std std-ref">tile_set</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="62"></colspec>
                    <colspec colwidth="315"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-private-method-tile-data-runtime-update"><inline classes="std std-ref">_tile_data_runtime_update</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, tile_data: <reference internal="True" refuri="class_tiledata#class-tiledata"><inline classes="std std-ref">TileData</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-private-method-use-tile-data-runtime-update"><inline classes="std std-ref">_use_tile_data_runtime_update</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-add-layer"><inline classes="std std-ref">add_layer</inline></reference>(to_position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-clear-layer"><inline classes="std std-ref">clear_layer</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-erase-cell"><inline classes="std std-ref">erase_cell</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-fix-invalid-tiles"><inline classes="std std-ref">fix_invalid_tiles</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-force-update"><inline classes="std std-ref">force_update</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-cell-alternative-tile"><inline classes="std std-ref">get_cell_alternative_tile</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, use_proxies: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-cell-atlas-coords"><inline classes="std std-ref">get_cell_atlas_coords</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, use_proxies: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-cell-source-id"><inline classes="std std-ref">get_cell_source_id</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, use_proxies: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_tiledata#class-tiledata"><inline classes="std std-ref">TileData</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-cell-tile-data"><inline classes="std std-ref">get_cell_tile_data</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, use_proxies: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-coords-for-body-rid"><inline classes="std std-ref">get_coords_for_body_rid</inline></reference>(body: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-layer-for-body-rid"><inline classes="std std-ref">get_layer_for_body_rid</inline></reference>(body: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-layer-modulate"><inline classes="std std-ref">get_layer_modulate</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-layer-name"><inline classes="std std-ref">get_layer_name</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-layer-navigation-map"><inline classes="std std-ref">get_layer_navigation_map</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-layer-y-sort-origin"><inline classes="std std-ref">get_layer_y_sort_origin</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-layer-z-index"><inline classes="std std-ref">get_layer_z_index</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-layers-count"><inline classes="std std-ref">get_layers_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-navigation-map"><inline classes="std std-ref">get_navigation_map</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-neighbor-cell"><inline classes="std std-ref">get_neighbor_cell</inline></reference>(coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, neighbor: <reference internal="True" refuri="class_tileset#enum-tileset-cellneighbor"><inline classes="std std-ref">CellNeighbor</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_tilemappattern#class-tilemappattern"><inline classes="std std-ref">TileMapPattern</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-pattern"><inline classes="std std-ref">get_pattern</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords_array: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-surrounding-cells"><inline classes="std std-ref">get_surrounding_cells</inline></reference>(coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-used-cells"><inline classes="std std-ref">get_used_cells</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-used-cells-by-id"><inline classes="std std-ref">get_used_cells_by_id</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, atlas_coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> = Vector2i(-1, -1), alternative_tile: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-get-used-rect"><inline classes="std std-ref">get_used_rect</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-is-layer-enabled"><inline classes="std std-ref">is_layer_enabled</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-is-layer-navigation-enabled"><inline classes="std std-ref">is_layer_navigation_enabled</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-is-layer-y-sort-enabled"><inline classes="std std-ref">is_layer_y_sort_enabled</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-local-to-map"><inline classes="std std-ref">local_to_map</inline></reference>(local_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-map-pattern"><inline classes="std std-ref">map_pattern</inline></reference>(position_in_tilemap: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, coords_in_pattern: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, pattern: <reference internal="True" refuri="class_tilemappattern#class-tilemappattern"><inline classes="std std-ref">TileMapPattern</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-map-to-local"><inline classes="std std-ref">map_to_local</inline></reference>(map_position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-move-layer"><inline classes="std std-ref">move_layer</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-notify-runtime-tile-data-update"><inline classes="std std-ref">notify_runtime_tile_data_update</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-remove-layer"><inline classes="std std-ref">remove_layer</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-cell"><inline classes="std std-ref">set_cell</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, atlas_coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> = Vector2i(-1, -1), alternative_tile: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-cells-terrain-connect"><inline classes="std std-ref">set_cells_terrain_connect</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, cells: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>], terrain_set: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, terrain: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, ignore_empty_terrains: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-cells-terrain-path"><inline classes="std std-ref">set_cells_terrain_path</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, path: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>], terrain_set: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, terrain: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, ignore_empty_terrains: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-layer-enabled"><inline classes="std std-ref">set_layer_enabled</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-layer-modulate"><inline classes="std std-ref">set_layer_modulate</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-layer-name"><inline classes="std std-ref">set_layer_name</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-layer-navigation-enabled"><inline classes="std std-ref">set_layer_navigation_enabled</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-layer-navigation-map"><inline classes="std std-ref">set_layer_navigation_map</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, map: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-layer-y-sort-enabled"><inline classes="std std-ref">set_layer_y_sort_enabled</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y_sort_enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-layer-y-sort-origin"><inline classes="std std-ref">set_layer_y_sort_origin</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y_sort_origin: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-layer-z-index"><inline classes="std std-ref">set_layer_z_index</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, z_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-navigation-map"><inline classes="std std-ref">set_navigation_map</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, map: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-set-pattern"><inline classes="std std-ref">set_pattern</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, pattern: <reference internal="True" refuri="class_tilemappattern#class-tilemappattern"><inline classes="std std-ref">TileMapPattern</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tilemap-method-update-internals"><inline classes="std std-ref">update_internals</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-tilemap-signal-changed"></target>
            <paragraph classes="classref-signal" ids="class-tilemap-signal-changed" names="class_tilemap_signal_changed"><strong>changed</strong>() <reference internal="True" refid="class-tilemap-signal-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 TileMap 的 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> 发生改变时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-tilemap-visibilitymode"></target>
            <paragraph classes="classref-enumeration" ids="enum-tilemap-visibilitymode" names="enum_tilemap_visibilitymode">enum <strong>VisibilityMode</strong>: <reference internal="True" refid="enum-tilemap-visibilitymode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-tilemap-constant-visibility-mode-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tilemap-constant-visibility-mode-default" names="class_tilemap_constant_visibility_mode_default"><reference internal="True" refid="enum-tilemap-visibilitymode"><inline classes="std std-ref">VisibilityMode</inline></reference> <strong>VISIBILITY_MODE_DEFAULT</strong> = <literal>0</literal></paragraph>
            <paragraph>使用调试设置确定可见性。</paragraph>
            <target refid="class-tilemap-constant-visibility-mode-force-hide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tilemap-constant-visibility-mode-force-hide" names="class_tilemap_constant_visibility_mode_force_hide"><reference internal="True" refid="enum-tilemap-visibilitymode"><inline classes="std std-ref">VisibilityMode</inline></reference> <strong>VISIBILITY_MODE_FORCE_HIDE</strong> = <literal>2</literal></paragraph>
            <paragraph>始终隐藏。</paragraph>
            <target refid="class-tilemap-constant-visibility-mode-force-show"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tilemap-constant-visibility-mode-force-show" names="class_tilemap_constant_visibility_mode_force_show"><reference internal="True" refid="enum-tilemap-visibilitymode"><inline classes="std std-ref">VisibilityMode</inline></reference> <strong>VISIBILITY_MODE_FORCE_SHOW</strong> = <literal>1</literal></paragraph>
            <paragraph>始终显示。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-tilemap-property-collision-animatable"></target>
            <paragraph classes="classref-property" ids="class-tilemap-property-collision-animatable" names="class_tilemap_property_collision_animatable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>collision_animatable</strong> = <literal>false</literal> <reference internal="True" refid="class-tilemap-property-collision-animatable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collision_animatable</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_collision_animatable</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果启用，TileMap 将看到它的碰撞同步到物理周期并将其碰撞类型从静态更改为运动学。这是创建基于 TileMap 的移动的平台所必需的。</paragraph>
            <paragraph><strong>注意：</strong>启用 <reference internal="True" refid="class-tilemap-property-collision-animatable"><inline classes="std std-ref">collision_animatable</inline></reference> 可能会对性能产生一个很小的影响，只有在该 TileMap 正在移动并且有碰撞的图块时才这样做。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-property-collision-visibility-mode"></target>
            <paragraph classes="classref-property" ids="class-tilemap-property-collision-visibility-mode" names="class_tilemap_property_collision_visibility_mode"><reference internal="True" refid="enum-tilemap-visibilitymode"><inline classes="std std-ref">VisibilityMode</inline></reference> <strong>collision_visibility_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-tilemap-property-collision-visibility-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collision_visibility_mode</strong>(value: <reference internal="True" refid="enum-tilemap-visibilitymode"><inline classes="std std-ref">VisibilityMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-tilemap-visibilitymode"><inline classes="std std-ref">VisibilityMode</inline></reference> <strong>get_collision_visibility_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>显示或隐藏该 TileMap 的碰撞形状。如果设置为 <reference internal="True" refid="class-tilemap-constant-visibility-mode-default"><inline classes="std std-ref">VISIBILITY_MODE_DEFAULT</inline></reference>，则取决于调试设置“显示碰撞”。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-property-navigation-visibility-mode"></target>
            <paragraph classes="classref-property" ids="class-tilemap-property-navigation-visibility-mode" names="class_tilemap_property_navigation_visibility_mode"><reference internal="True" refid="enum-tilemap-visibilitymode"><inline classes="std std-ref">VisibilityMode</inline></reference> <strong>navigation_visibility_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-tilemap-property-navigation-visibility-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_navigation_visibility_mode</strong>(value: <reference internal="True" refid="enum-tilemap-visibilitymode"><inline classes="std std-ref">VisibilityMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-tilemap-visibilitymode"><inline classes="std std-ref">VisibilityMode</inline></reference> <strong>get_navigation_visibility_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>显示或隐藏该 TileMap 的导航网格。如果设置为 <reference internal="True" refid="class-tilemap-constant-visibility-mode-default"><inline classes="std std-ref">VISIBILITY_MODE_DEFAULT</inline></reference>，则取决于调试设置“显示导航”。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-property-rendering-quadrant-size"></target>
            <paragraph classes="classref-property" ids="class-tilemap-property-rendering-quadrant-size" names="class_tilemap_property_rendering_quadrant_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>rendering_quadrant_size</strong> = <literal>16</literal> <reference internal="True" refid="class-tilemap-property-rendering-quadrant-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rendering_quadrant_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_rendering_quadrant_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>TileMap 的象限大小。象限是在单个画布项上一起绘制的一组图块，用于优化。<reference internal="True" refid="class-tilemap-property-rendering-quadrant-size"><inline classes="std std-ref">rendering_quadrant_size</inline></reference> 定义的是形成象限的正方形的边长，使用地图坐标系。因此，默认象限大小将 <literal>16 * 16 = 256</literal> 个图块组合到了一起。</paragraph>
            <paragraph>Y 排序的图层不使用象限大小，这种图层中的图块会按 Y 位置分组。</paragraph>
            <paragraph><strong>注意：</strong>象限是根据地图坐标系创建的，“正方形”的象限在 TileMap 的局部坐标系中可能并不是正方形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-property-tile-set"></target>
            <paragraph classes="classref-property" ids="class-tilemap-property-tile-set" names="class_tilemap_property_tile_set"><reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> <strong>tile_set</strong> <reference internal="True" refid="class-tilemap-property-tile-set"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tileset</strong>(value: <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> <strong>get_tileset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 <strong>TileMap</strong> 所使用的 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference>。所有可用图块的纹理、碰撞以及其他额外行为都存储在这里。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-tilemap-private-method-tile-data-runtime-update"></target>
            <paragraph classes="classref-method" ids="class-tilemap-private-method-tile-data-runtime-update" names="class_tilemap_private_method__tile_data_runtime_update"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_tile_data_runtime_update</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, tile_data: <reference internal="True" refuri="class_tiledata#class-tiledata"><inline classes="std std-ref">TileData</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-tilemap-private-method-tile-data-runtime-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>会使用 TileMap 内部即将使用的 TileData 对象来调用，从而实现运行时修改。</paragraph>
            <paragraph>这个方法被调用的前提是：实现了 <reference internal="True" refid="class-tilemap-private-method-use-tile-data-runtime-update"><inline classes="std std-ref">_use_tile_data_runtime_update</inline></reference>，并且对给定的图块坐标 <literal>coords</literal> 和层 <literal>layer</literal> 返回 <literal>true</literal> 。</paragraph>
            <paragraph><strong>警告：</strong>该 <literal>tile_data</literal> 对象的子资源和 TileSet 中的子资源是一样的。对它们进行修改可能会影响整个 TileSet。请确保制作这些资源的副本再进行修改。</paragraph>
            <paragraph><strong>注意：</strong>如果 <literal>tile_data</literal> 对象的属性要随时间变化，请使用 <reference internal="True" refid="class-tilemap-method-notify-runtime-tile-data-update"><inline classes="std std-ref">notify_runtime_tile_data_update</inline></reference> 来通知该 TileMap 它需要更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-private-method-use-tile-data-runtime-update"></target>
            <paragraph classes="classref-method" ids="class-tilemap-private-method-use-tile-data-runtime-update" names="class_tilemap_private_method__use_tile_data_runtime_update"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_use_tile_data_runtime_update</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-tilemap-private-method-use-tile-data-runtime-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果位于层 <literal>layer</literal> 坐标 <literal>coords</literal> 的图块需要运行时更新，则应返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>警告：</strong>请确保这个函数只在需要时返回 <literal>true</literal>。任何在没有需要的情况下在运行时处理的图块都将导致显著的性能损失。</paragraph>
            <paragraph><strong>注意：</strong>如果该函数的结果发生变化，请使用 <reference internal="True" refid="class-tilemap-method-notify-runtime-tile-data-update"><inline classes="std std-ref">notify_runtime_tile_data_update</inline></reference> 通知 TileMap 它需要更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-add-layer"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-add-layer" names="class_tilemap_method_add_layer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_layer</strong>(to_position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-tilemap-method-add-layer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在数组中的给定位置 <literal>to_position</literal> 添加层。如果 <literal>to_position</literal> 为负数，则位置从结尾处开始计数，<literal>-1</literal> 会把层添加在数组的末尾。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-clear"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-clear" names="class_tilemap_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-tilemap-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除所有单元格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-clear-layer"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-clear-layer" names="class_tilemap_method_clear_layer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_layer</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-tilemap-method-clear-layer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除给定图层上的所有单元格。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-erase-cell"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-erase-cell" names="class_tilemap_method_erase_cell"><abbreviation explanation="无返回值。">void</abbreviation> <strong>erase_cell</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-tilemap-method-erase-cell"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>擦除图层 <literal>layer</literal> 上位于 <literal>coords</literal> 坐标的单元格。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-fix-invalid-tiles"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-fix-invalid-tiles" names="class_tilemap_method_fix_invalid_tiles"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fix_invalid_tiles</strong>() <reference internal="True" refid="class-tilemap-method-fix-invalid-tiles"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除图块集中不存在的单元格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-force-update"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-force-update" names="class_tilemap_method_force_update"><abbreviation explanation="无返回值。">void</abbreviation> <strong>force_update</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-tilemap-method-force-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refid="class-tilemap-method-notify-runtime-tile-data-update"><inline classes="std std-ref">notify_runtime_tile_data_update</inline></reference> and/or <reference internal="True" refid="class-tilemap-method-update-internals"><inline classes="std std-ref">update_internals</inline></reference> instead.</paragraph>
            <paragraph>强制更新 TileMap 和图层 <literal>layer</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-cell-alternative-tile"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-cell-alternative-tile" names="class_tilemap_method_get_cell_alternative_tile"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_cell_alternative_tile</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, use_proxies: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-cell-alternative-tile"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>layer</literal> 层中位于坐标 <literal>coords</literal> 单元格的图块备选 ID。</paragraph>
            <paragraph>如果 <literal>use_proxies</literal> 为 <literal>false</literal>，则会忽略该 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> 的图块代理，返回原始的备选标识符。见 <reference internal="True" refuri="class_tileset#class-tileset-method-map-tile-proxy"><inline classes="std std-ref">TileSet.map_tile_proxy</inline></reference>。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-cell-atlas-coords"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-cell-atlas-coords" names="class_tilemap_method_get_cell_atlas_coords"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_cell_atlas_coords</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, use_proxies: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-cell-atlas-coords"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回图层 <literal>layer</literal> 上坐标 <literal>coords</literal> 处单元格的图块地图集坐标 ID。如果单元格不存在，则返回 <literal>Vector2i(-1, -1)</literal>。</paragraph>
            <paragraph>如果 <literal>use_proxies</literal> 为 <literal>false</literal>，则忽略 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> 的图块代理，返回原始图集坐标标识符。请参阅 <reference internal="True" refuri="class_tileset#class-tileset-method-map-tile-proxy"><inline classes="std std-ref">TileSet.map_tile_proxy</inline></reference>。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-cell-source-id"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-cell-source-id" names="class_tilemap_method_get_cell_source_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_cell_source_id</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, use_proxies: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-cell-source-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回坐标 <literal>coords</literal> 处图层 <literal>layer</literal> 上单元格的图块源 ID。如果单元格不存在，则返回 <literal>-1</literal>。</paragraph>
            <paragraph>如果 <literal>use_proxies</literal> 为 <literal>false</literal>，则忽略 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> 的图块代理，返回原始源标识符。请参阅 <reference internal="True" refuri="class_tileset#class-tileset-method-map-tile-proxy"><inline classes="std std-ref">TileSet.map_tile_proxy</inline></reference>。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-cell-tile-data"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-cell-tile-data" names="class_tilemap_method_get_cell_tile_data"><reference internal="True" refuri="class_tiledata#class-tiledata"><inline classes="std std-ref">TileData</inline></reference> <strong>get_cell_tile_data</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, use_proxies: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-cell-tile-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与给定单元格关联的 <reference internal="True" refuri="class_tiledata#class-tiledata"><inline classes="std std-ref">TileData</inline></reference> 对象，如果单元格不存在或者不是 <reference internal="True" refuri="class_tilesetatlassource#class-tilesetatlassource"><inline classes="std std-ref">TileSetAtlasSource</inline></reference> 则返回 <literal>null</literal>。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func get_clicked_tile_power():
    var clicked_cell = tile_map.local_to_map(tile_map.get_local_mouse_position())
    var data = tile_map.get_cell_tile_data(0, clicked_cell)
    if data:
        return data.get_custom_data("power")
    else:
        return 0</literal_block>
            <paragraph>如果 <literal>use_proxies</literal> 为 <literal>false</literal>，则会忽略 <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> 的图块代理。见 <reference internal="True" refuri="class_tileset#class-tileset-method-map-tile-proxy"><inline classes="std std-ref">TileSet.map_tile_proxy</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-coords-for-body-rid"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-coords-for-body-rid" names="class_tilemap_method_get_coords_for_body_rid"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_coords_for_body_rid</strong>(body: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-tilemap-method-get-coords-for-body-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定物理物体 RID 对应图块的坐标。与图块发生碰撞时，可以通过 <reference internal="True" refuri="class_kinematiccollision2d#class-kinematiccollision2d-method-get-collider-rid"><inline classes="std std-ref">KinematicCollision2D.get_collider_rid</inline></reference> 获取该 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-layer-for-body-rid"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-layer-for-body-rid" names="class_tilemap_method_get_layer_for_body_rid"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_layer_for_body_rid</strong>(body: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-tilemap-method-get-layer-for-body-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定物理物体 RID 对应图块的 TileMap 图层。与图块发生碰撞时，可以通过 <reference internal="True" refuri="class_kinematiccollision2d#class-kinematiccollision2d-method-get-collider-rid"><inline classes="std std-ref">KinematicCollision2D.get_collider_rid</inline></reference> 获取该 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-layer-modulate"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-layer-modulate" names="class_tilemap_method_get_layer_modulate"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_layer_modulate</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-layer-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 TileMap 图层的调制颜色。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-layer-name"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-layer-name" names="class_tilemap_method_get_layer_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_layer_name</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-layer-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 TileMap 图层的名称。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-layer-navigation-map"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-layer-navigation-map" names="class_tilemap_method_get_layer_navigation_map"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_layer_navigation_map</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-layer-navigation-map"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回分配给指定 TileMap 图层 <literal>layer</literal> 的 <reference internal="True" refuri="class_navigationserver2d#class-navigationserver2d"><inline classes="std std-ref">NavigationServer2D</inline></reference> 导航地图的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <paragraph>默认情况下，TileMap 为第一个 TileMap 层，使用默认的 <reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference> 导航地图。对于每个附加的 TileMap 层，都会为附加层创建一个新的导航地图。</paragraph>
            <paragraph>为了使 <reference internal="True" refuri="class_navigationagent2d#class-navigationagent2d"><inline classes="std std-ref">NavigationAgent2D</inline></reference> 在 TileMap 层导航地图之间切换，使用 <reference internal="True" refuri="class_navigationagent2d#class-navigationagent2d-method-set-navigation-map"><inline classes="std std-ref">NavigationAgent2D.set_navigation_map</inline></reference> 和从 <reference internal="True" refid="class-tilemap-method-get-navigation-map"><inline classes="std std-ref">get_navigation_map</inline></reference> 接收的导航地图。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-layer-y-sort-origin"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-layer-y-sort-origin" names="class_tilemap_method_get_layer_y_sort_origin"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_layer_y_sort_origin</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-layer-y-sort-origin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 TileMap 图层的 Y 排序原点。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-layer-z-index"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-layer-z-index" names="class_tilemap_method_get_layer_z_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_layer_z_index</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-layer-z-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 TileMap 图层的 Z 索引值。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-layers-count"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-layers-count" names="class_tilemap_method_get_layers_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_layers_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-layers-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 TileMap 图层的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-navigation-map"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-navigation-map" names="class_tilemap_method_get_navigation_map"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_navigation_map</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-navigation-map"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refid="class-tilemap-method-get-layer-navigation-map"><inline classes="std std-ref">get_layer_navigation_map</inline></reference> instead.</paragraph>
            <paragraph>返回分配给指定 TileMap 图层 <literal>layer</literal> 的 <reference internal="True" refuri="class_navigationserver2d#class-navigationserver2d"><inline classes="std std-ref">NavigationServer2D</inline></reference> 导航地图的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-neighbor-cell"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-neighbor-cell" names="class_tilemap_method_get_neighbor_cell"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_neighbor_cell</strong>(coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, neighbor: <reference internal="True" refuri="class_tileset#enum-tileset-cellneighbor"><inline classes="std std-ref">CellNeighbor</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-neighbor-cell"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与位于坐标 <literal>coords</literal> 的单元格相邻的单元格，方向由 <literal>neighbor</literal> 表示。这个方法会考虑 TileMap 的不同布局。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-pattern"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-pattern" names="class_tilemap_method_get_pattern"><reference internal="True" refuri="class_tilemappattern#class-tilemappattern"><inline classes="std std-ref">TileMapPattern</inline></reference> <strong>get_pattern</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords_array: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>]) <reference internal="True" refid="class-tilemap-method-get-pattern"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据给定的图层和单元格新建 <reference internal="True" refuri="class_tilemappattern#class-tilemappattern"><inline classes="std std-ref">TileMapPattern</inline></reference>。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-surrounding-cells"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-surrounding-cells" names="class_tilemap_method_get_surrounding_cells"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>] <strong>get_surrounding_cells</strong>(coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-tilemap-method-get-surrounding-cells"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与 <literal>coords</literal> 处的单元格相邻的所有单元格的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-used-cells"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-used-cells" names="class_tilemap_method_get_used_cells"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>] <strong>get_used_cells</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-used-cells"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> 数组，其中存放的是给定图层中所有包含图块的单元格的位置。空单元格的源标识符等于 -1、图集坐标标识符为 <literal>Vector2(-1, -1)</literal>、备选标识符为 -1。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-used-cells-by-id"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-used-cells-by-id" names="class_tilemap_method_get_used_cells_by_id"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>] <strong>get_used_cells_by_id</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, atlas_coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> = Vector2i(-1, -1), alternative_tile: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-used-cells-by-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> 数组，其中存放的是给定图层中所有包含图块的单元格的位置。可以根据源（<literal>source_id</literal>）、图集坐标（<literal>atlas_coords</literal>）、备选 ID（<literal>alternative_tile</literal>）进行过滤。</paragraph>
            <paragraph>如果某个参数为默认值，则该参数不会用于单元格的过滤。因此，如果所有参数都使用默认值，则返回的结果与 <reference internal="True" refid="class-tilemap-method-get-used-cells"><inline classes="std std-ref">get_used_cells</inline></reference> 相同。</paragraph>
            <paragraph>空单元格的源标识符等于 -1、图集坐标标识符为 <literal>Vector2(-1, -1)</literal>、备选标识符为 -1。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-get-used-rect"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-get-used-rect" names="class_tilemap_method_get_used_rect"><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> <strong>get_used_rect</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-get-used-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该地图的包围矩形，包围所有图层中的已使用（非空）的图块。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-is-layer-enabled"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-is-layer-enabled" names="class_tilemap_method_is_layer_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_layer_enabled</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-is-layer-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回某个图层是否已启用。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-is-layer-navigation-enabled"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-is-layer-navigation-enabled" names="class_tilemap_method_is_layer_navigation_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_layer_navigation_enabled</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-is-layer-navigation-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回是否启用图层的内置导航区块生成。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-is-layer-y-sort-enabled"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-is-layer-y-sort-enabled" names="class_tilemap_method_is_layer_y_sort_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_layer_y_sort_enabled</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-is-layer-y-sort-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回某个图层是否会对图块进行 Y 排序。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-local-to-map"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-local-to-map" names="class_tilemap_method_local_to_map"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>local_to_map</strong>(local_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-local-to-map"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含给定 <literal>local_position</literal> 的单元格地图坐标。如果 <literal>local_position</literal> 使用全局坐标，请考虑在传入这个方法前使用 <reference internal="True" refuri="class_node2d#class-node2d-method-to-local"><inline classes="std std-ref">Node2D.to_local</inline></reference>。另见 <reference internal="True" refid="class-tilemap-method-map-to-local"><inline classes="std std-ref">map_to_local</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-map-pattern"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-map-pattern" names="class_tilemap_method_map_pattern"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>map_pattern</strong>(position_in_tilemap: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, coords_in_pattern: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, pattern: <reference internal="True" refuri="class_tilemappattern#class-tilemappattern"><inline classes="std std-ref">TileMapPattern</inline></reference>) <reference internal="True" refid="class-tilemap-method-map-pattern"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果图案粘贴在 <literal>position_in_tilemap</literal> 坐标处（请参阅 <reference internal="True" refid="class-tilemap-method-set-pattern"><inline classes="std std-ref">set_pattern</inline></reference>），则返回 <reference internal="True" refuri="class_tilemappattern#class-tilemappattern"><inline classes="std std-ref">TileMapPattern</inline></reference> 中给定坐标 <literal>coords_in_pattern</literal> 对应的单元格坐标。该映射是必需的，因为在半偏移图块形状中，映射可能无法通过计算 <literal>position_in_tile_map + coords_in_pattern</literal> 工作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-map-to-local"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-map-to-local" names="class_tilemap_method_map_to_local"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>map_to_local</strong>(map_position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tilemap-method-map-to-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回单元格的中心位置，使用 TileMap 的局部坐标。要将返回值转换为全局坐标，请使用 <reference internal="True" refuri="class_node2d#class-node2d-method-to-global"><inline classes="std std-ref">Node2D.to_global</inline></reference>。另见 <reference internal="True" refid="class-tilemap-method-local-to-map"><inline classes="std std-ref">local_to_map</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>可能与图块的可视位置没有对应关系，即忽略各个图块的 <reference internal="True" refuri="class_tiledata#class-tiledata-property-texture-origin"><inline classes="std std-ref">TileData.texture_origin</inline></reference> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-move-layer"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-move-layer" names="class_tilemap_method_move_layer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>move_layer</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-tilemap-method-move-layer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将索引 <literal>layer</literal> 处的图层移动到数组中给定的位置 <literal>to_position</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-notify-runtime-tile-data-update"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-notify-runtime-tile-data-update" names="class_tilemap_method_notify_runtime_tile_data_update"><abbreviation explanation="无返回值。">void</abbreviation> <strong>notify_runtime_tile_data_update</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-tilemap-method-notify-runtime-tile-data-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通知 TileMap 节点调用 <reference internal="True" refid="class-tilemap-private-method-use-tile-data-runtime-update"><inline classes="std std-ref">_use_tile_data_runtime_update</inline></reference> 或 <reference internal="True" refid="class-tilemap-private-method-tile-data-runtime-update"><inline classes="std std-ref">_tile_data_runtime_update</inline></reference> 将导致不同的结果。这将因此触发 TileMap 更新。</paragraph>
            <paragraph>如果提供了 <literal>layer</literal>，则仅通知给定层的更改。出于性能原因，通常首选提供 <literal>layer</literal> 参数（如果适用）。</paragraph>
            <paragraph><strong>警告：</strong>更新 TileMap 的计算成本很高，并且可能会影响性能。尝试限制该函数的调用次数，以避免不必要的更新。</paragraph>
            <paragraph><strong>注意：</strong>这不会触发 TileMap 的直接更新，该更新将照常在帧结束时完成（除非你调用 <reference internal="True" refid="class-tilemap-method-update-internals"><inline classes="std std-ref">update_internals</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-remove-layer"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-remove-layer" names="class_tilemap_method_remove_layer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_layer</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-tilemap-method-remove-layer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除索引为 <literal>layer</literal> 的层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-cell"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-cell" names="class_tilemap_method_set_cell"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cell</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, source_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, atlas_coords: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> = Vector2i(-1, -1), alternative_tile: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-tilemap-method-set-cell"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置位于层 <literal>layer</literal> 坐标为 <literal>coords</literal> 的单元格的图块标识符。<reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference> 中的每个图块都由三部分进行标识：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>源标识符 <literal>source_id</literal> 标识的是 <reference internal="True" refuri="class_tilesetsource#class-tilesetsource"><inline classes="std std-ref">TileSetSource</inline></reference> 标识符。见 <reference internal="True" refuri="class_tileset#class-tileset-method-set-source-id"><inline classes="std std-ref">TileSet.set_source_id</inline></reference>，</paragraph>
                </list_item>
                <list_item>
                    <paragraph>图集坐标标识符 <literal>atlas_coords</literal> 标识的是图集中的图块坐标（如果使用的是 <reference internal="True" refuri="class_tilesetatlassource#class-tilesetatlassource"><inline classes="std std-ref">TileSetAtlasSource</inline></reference> 源）。如果使用的是 <reference internal="True" refuri="class_tilesetscenescollectionsource#class-tilesetscenescollectionsource"><inline classes="std std-ref">TileSetScenesCollectionSource</inline></reference>，应该始终为 <literal>Vector2i(0, 0)</literal>，</paragraph>
                </list_item>
                <list_item>
                    <paragraph>备选图块标识符 <literal>alternative_tile</literal> 标识的是图集中的图块备选项（如果使用的是 <reference internal="True" refuri="class_tilesetatlassource#class-tilesetatlassource"><inline classes="std std-ref">TileSetAtlasSource</inline></reference> 源），如果使用的是 <reference internal="True" refuri="class_tilesetscenescollectionsource#class-tilesetscenescollectionsource"><inline classes="std std-ref">TileSetScenesCollectionSource</inline></reference> 则标识的是场景。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果 <literal>source_id</literal> 为 <literal>-1</literal>、<literal>atlas_coords</literal> 为 <literal>Vector2i(-1, -1)</literal> 或 <literal>alternative_tile</literal> 为 <literal>-1</literal>，则会擦除该单元格。擦除后的单元格中，<strong>所有</strong>标识符都会自动设为对应的无效值，即 <literal>-1</literal>、<literal>Vector2i(-1, -1)</literal> 和 <literal>-1</literal>。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负数，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-cells-terrain-connect"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-cells-terrain-connect" names="class_tilemap_method_set_cells_terrain_connect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cells_terrain_connect</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, cells: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>], terrain_set: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, terrain: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, ignore_empty_terrains: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-tilemap-method-set-cells-terrain-connect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>更新 <literal>cells</literal> 坐标数组中的所有单元格，以便它们将给定的 <literal>terrain</literal> 用于给定的 <literal>terrain_set</literal>。如果一个更新的单元格与其相邻单元格之一具有相同的地形，则该函数会尝试将两者连接起来。如果需要创建正确的地形过渡，该函数可能会更新相邻的图块。</paragraph>
            <paragraph>如果 <literal>ignore_empty_terrains</literal> 为真，则在尝试为给定地形约束找到最合适的图块时，空地形将被忽略。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <paragraph><strong>注意：</strong>要正常工作，这个方法需要 TileMap 的 TileSet 设置了具有所有必需地形组合的地形。否则，可能会产生意想不到的结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-cells-terrain-path"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-cells-terrain-path" names="class_tilemap_method_set_cells_terrain_path"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cells_terrain_path</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, path: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>], terrain_set: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, terrain: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, ignore_empty_terrains: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-tilemap-method-set-cells-terrain-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>更新 <literal>path</literal> 坐标数组中的所有单元格，以便它们将给定的 <literal>terrain</literal> 用于给定的 <literal>terrain_set</literal>。该函数还将连接路径中具有相同地形的两个连续单元格。如果需要创建正确的地形过渡，该函数可能会更新相邻的图块。</paragraph>
            <paragraph>如果 <literal>ignore_empty_terrains</literal> 为真，则在尝试为给定地形约束找到最合适的图块时将忽略空地形。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <paragraph><strong>注意：</strong>要正常工作，这个方法需要 TileMap 的 TileSet 设置了具有所有必需地形组合的地形。否则，可能会产生意想不到的结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-layer-enabled"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-layer-enabled" names="class_tilemap_method_set_layer_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_layer_enabled</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-tilemap-method-set-layer-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启用或禁用图层 <literal>layer</literal>。被禁用的图层根本不会被处理（没有渲染、物理等）。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负数，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-layer-modulate"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-layer-modulate" names="class_tilemap_method_set_layer_modulate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_layer_modulate</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-tilemap-method-set-layer-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置图层的颜色。该颜色会与图块的颜色以及 TileMap 的调制色相乘。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则逆序访问图层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-layer-name"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-layer-name" names="class_tilemap_method_set_layer_name"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_layer_name</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-tilemap-method-set-layer-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置图层的名称。主要在编辑器中使用。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则逆序访问图层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-layer-navigation-enabled"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-layer-navigation-enabled" names="class_tilemap_method_set_layer_navigation_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_layer_navigation_enabled</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-tilemap-method-set-layer-navigation-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启用或禁用图层的内置导航区块生成。如果你需要使用 <reference internal="True" refuri="class_navigationregion2d#class-navigationregion2d"><inline classes="std std-ref">NavigationRegion2D</inline></reference> 节点根据 TileMap 烘焙导航区块，请禁用此项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-layer-navigation-map"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-layer-navigation-map" names="class_tilemap_method_set_layer_navigation_map"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_layer_navigation_map</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, map: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-tilemap-method-set-layer-navigation-map"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>map</literal> 分配给指定 TileMap 图层 <literal>layer</literal> 的 <reference internal="True" refuri="class_navigationserver2d#class-navigationserver2d"><inline classes="std std-ref">NavigationServer2D</inline></reference> 导航地图。</paragraph>
            <paragraph>默认情况下，TileMap 为第一个 TileMap 层使用默认的 <reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference> 导航地图。对于每个附加的 TileMap 层，都会为附加层创建一个新的导航地图。</paragraph>
            <paragraph>为了使 <reference internal="True" refuri="class_navigationagent2d#class-navigationagent2d"><inline classes="std std-ref">NavigationAgent2D</inline></reference> 在 TileMap 层导航地图之间切换，使用 <reference internal="True" refuri="class_navigationagent2d#class-navigationagent2d-method-set-navigation-map"><inline classes="std std-ref">NavigationAgent2D.set_navigation_map</inline></reference> 和从 <reference internal="True" refid="class-tilemap-method-get-navigation-map"><inline classes="std std-ref">get_navigation_map</inline></reference> 接收的导航地图。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一个图层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-layer-y-sort-enabled"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-layer-y-sort-enabled" names="class_tilemap_method_set_layer_y_sort_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_layer_y_sort_enabled</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y_sort_enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-tilemap-method-set-layer-y-sort-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启用或禁用图层的 Y 排序。如果进行了 Y 排序，则该图层和 CanvasItem 节点的行为一致，会将其中的每个图块都进行 Y 排序。</paragraph>
            <paragraph>Y 排序图层的 Z 索引一般应该和未 Y 排序的图层不同，否则未 Y 排序的图层会作为一个整体，和 Y 排序图层一起进行 Y 排序。通常不希望发生这样的行为。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则逆序访问图层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-layer-y-sort-origin"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-layer-y-sort-origin" names="class_tilemap_method_set_layer_y_sort_origin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_layer_y_sort_origin</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y_sort_origin: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-tilemap-method-set-layer-y-sort-origin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置图层的 Y 排序原点。各个图块的 Y 排序原点值都会加上这个 Y 排序原点值。</paragraph>
            <paragraph>用例是为图层冒充不同的高度级别。俯视角游戏比较有用。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则逆序访问图层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-layer-z-index"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-layer-z-index" names="class_tilemap_method_set_layer_z_index"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_layer_z_index</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, z_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-tilemap-method-set-layer-z-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置图层的 Z 索引值。各个图块的 Z 索引值都会加上这个 Z 索引。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则逆序访问图层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-navigation-map"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-navigation-map" names="class_tilemap_method_set_navigation_map"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_navigation_map</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, map: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-tilemap-method-set-navigation-map"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refid="class-tilemap-method-set-layer-navigation-map"><inline classes="std std-ref">set_layer_navigation_map</inline></reference> instead.</paragraph>
            <paragraph>将 <literal>map</literal> 分配为指定 TileMap 层 <literal>layer</literal> 的 <reference internal="True" refuri="class_navigationserver2d#class-navigationserver2d"><inline classes="std std-ref">NavigationServer2D</inline></reference> 导航地图。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-set-pattern"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-set-pattern" names="class_tilemap_method_set_pattern"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pattern</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, pattern: <reference internal="True" refuri="class_tilemappattern#class-tilemappattern"><inline classes="std std-ref">TileMapPattern</inline></reference>) <reference internal="True" refid="class-tilemap-method-set-pattern"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 <reference internal="True" refuri="class_tilemappattern#class-tilemappattern"><inline classes="std std-ref">TileMapPattern</inline></reference> 粘贴到图块地图中的 <literal>position</literal> 位置和 <literal>layer</literal> 层。</paragraph>
            <paragraph>如果 <literal>layer</literal> 为负，则从最后一层开始访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tilemap-method-update-internals"></target>
            <paragraph classes="classref-method" ids="class-tilemap-method-update-internals" names="class_tilemap_method_update_internals"><abbreviation explanation="无返回值。">void</abbreviation> <strong>update_internals</strong>() <reference internal="True" refid="class-tilemap-method-update-internals"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>触发 TileMap 的更新。通常不需要调用这个函数，因为 TileMap 节点的属性发生修改后会自动更新。</paragraph>
            <paragraph>但是出于性能原因，会对这些更新进行分批，延迟到该帧的末尾执行。调用这个函数会强制 TileMap 立即进行更新。</paragraph>
            <paragraph><strong>警告：</strong>更新 TileMap 的计算量很大，可能会影响性能。请尽量限制更新的次数和受影响的图块。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
