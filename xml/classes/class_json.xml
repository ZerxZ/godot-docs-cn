<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_json.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/JSON.xml.</comment>
    <target refid="class-json"></target>
    <section ids="json class-json" names="json class_json">
        <title>JSON</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于创建和解析 JSON 数据的辅助类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>JSON</strong> 允许所有数据类型与 JSON 字符串相互转换。 这对于序列化数据以保存到文件或通过网络发送很有用。</paragraph>
            <paragraph><reference internal="True" refid="class-json-method-stringify"><inline classes="std std-ref">stringify</inline></reference> 用于将任何数据类型转换为 JSON 字符串。</paragraph>
            <paragraph><reference internal="True" refid="class-json-method-parse"><inline classes="std std-ref">parse</inline></reference> 用于将任何现有的 JSON 数据转换为可以在 Godot 中使用的 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>。如果解析成功，使用 <reference internal="True" refid="class-json-property-data"><inline classes="std std-ref">data</inline></reference> 检索 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>，并使用 <literal>typeof</literal> 检查 Variant 的类型是否符合你的预期。JSON 对象被转换为 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>，但 JSON 数据可用于存储 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>、数字、<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>，甚至只是一个布尔值。</paragraph>
            <paragraph><strong>示例</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var data_to_send = ["a", "b", "c"]
var json_string = JSON.stringify(data_to_send)
# 保存数据
# ...
# 检索数据
var json = JSON.new()
var error = json.parse(json_string)
if error == OK:
    var data_received = json.data
    if typeof(data_received) == TYPE_ARRAY:
        print(data_received) # 输出 array
    else:
        print("Unexpected data")
else:
    print("JSON Parse Error: ", json.get_error_message(), " in ", json_string, " at line ", json.get_error_line())</literal_block>
            <paragraph>或者，你可以使用静态 <reference internal="True" refid="class-json-method-parse-string"><inline classes="std std-ref">parse_string</inline></reference> 方法解析字符串，但它不允许处理错误。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var data = JSON.parse_string(json_string) # 如果解析失败则返回 null。</literal_block>
            <paragraph><strong>注意：</strong>两种解析方式都不完全符合 JSON 规范：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>数组或对象中的尾随逗号将被忽略，而不是引起解析器错误。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>换行符和制表符在字符串文字中被接受，并被视为它们相应的转义序列 <literal>\n</literal> 和 <literal>\t</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="class_string#class-string-method-to-float"><inline classes="std std-ref">String.to_float</inline></reference> 解析数字，这通常比 JSON 规范更宽松。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>某些错误，例如无效的 Unicode 序列，不会导致解析器错误。相反，该字符串会被清理并将错误记录到控制台。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="10"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-json-property-data"><inline classes="std std-ref">data</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>null</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="237"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-json-method-get-error-line"><inline classes="std std-ref">get_error_line</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-json-method-get-error-message"><inline classes="std std-ref">get_error_message</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-json-method-get-parsed-text"><inline classes="std std-ref">get_parsed_text</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-json-method-parse"><inline classes="std std-ref">parse</inline></reference>(json_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, keep_text: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-json-method-parse-string"><inline classes="std std-ref">parse_string</inline></reference>(json_string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-json-method-stringify"><inline classes="std std-ref">stringify</inline></reference>(data: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, indent: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", sort_keys: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, full_precision: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-json-property-data"></target>
            <paragraph classes="classref-property" ids="class-json-property-data" names="class_json_property_data"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>data</strong> = <literal>null</literal> <reference internal="True" refid="class-json-property-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_data</strong>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_data</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>包含解析到的 JSON 数据，类型为 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-json-method-get-error-line"></target>
            <paragraph classes="classref-method" ids="class-json-method-get-error-line" names="class_json_method_get_error_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_error_line</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-json-method-get-error-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果上一次调用 <reference internal="True" refid="class-json-method-parse"><inline classes="std std-ref">parse</inline></reference> 成功，则返回 <literal>0</literal>，否则返回解析失败的行号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-json-method-get-error-message"></target>
            <paragraph classes="classref-method" ids="class-json-method-get-error-message" names="class_json_method_get_error_message"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_error_message</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-json-method-get-error-message"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果上一次调用 <reference internal="True" refid="class-json-method-parse"><inline classes="std std-ref">parse</inline></reference> 成功，则返回空字符串，否则返回失败时的错误消息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-json-method-get-parsed-text"></target>
            <paragraph classes="classref-method" ids="class-json-method-get-parsed-text" names="class_json_method_get_parsed_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_parsed_text</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-json-method-get-parsed-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>只要该函数被指示以保留该文本，就返回由 <reference internal="True" refid="class-json-method-parse"><inline classes="std std-ref">parse</inline></reference> 解析的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-json-method-parse"></target>
            <paragraph classes="classref-method" ids="class-json-method-parse" names="class_json_method_parse"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>parse</strong>(json_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, keep_text: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-json-method-parse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>尝试解析提供的 <literal>json_text</literal>。</paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference>。如果解析成功，则它返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，并且可以使用 <reference internal="True" refid="class-json-property-data"><inline classes="std std-ref">data</inline></reference> 检索该结果。如果不成功，请使用 <reference internal="True" refid="class-json-method-get-error-line"><inline classes="std std-ref">get_error_line</inline></reference> 和 <reference internal="True" refid="class-json-method-get-error-message"><inline classes="std std-ref">get_error_message</inline></reference> 来识别失败的原因。</paragraph>
            <paragraph>如果想要自定义错误处理，可以使用的 <reference internal="True" refid="class-json-method-parse-string"><inline classes="std std-ref">parse_string</inline></reference> 的非静态变体。</paragraph>
            <paragraph>可选的 <literal>keep_text</literal> 参数指示该解析器保留一份原始文本的副本。该文本稍后可以使用 <reference internal="True" refid="class-json-method-get-parsed-text"><inline classes="std std-ref">get_parsed_text</inline></reference> 函数获取，并在保存资源时使用（而不是从 <reference internal="True" refid="class-json-property-data"><inline classes="std std-ref">data</inline></reference> 生成新文本）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-json-method-parse-string"></target>
            <paragraph classes="classref-method" ids="class-json-method-parse-string" names="class_json_method_parse_string"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>parse_string</strong>(json_string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-json-method-parse-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>试图解析提供的 <literal>json_string</literal>，并返回解析后的数据。如果解析失败，返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-json-method-stringify"></target>
            <paragraph classes="classref-method" ids="class-json-method-stringify" names="class_json_method_stringify"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>stringify</strong>(data: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, indent: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", sort_keys: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, full_precision: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-json-method-stringify"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 变量转换为 JSON 文本并返回结果。可用于将数据进行序列化保存或通过网络发送。</paragraph>
            <paragraph><strong>注意：</strong>JSON 规范没有定义整数和浮点数类型，只有一个<emphasis>数字</emphasis>类型。因此，将 Variant 转换为 JSON 文本会将所有数字值转换为 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 类型。</paragraph>
            <paragraph><strong>注意：</strong>如果 <literal>full_precision</literal> 为 <literal>true</literal>，则在字符串化浮点数时，除可靠数字外，还将对不可靠数字进行字符串化，以保证准确解码。</paragraph>
            <paragraph><literal>indent</literal> 参数控制是否缩进以及如何缩进，用于输出该参数的字符串时应该有缩进的地方，甚至可以使用空格 <literal>" "</literal>。<literal>\t</literal> 和 <literal>\n</literal> 可用于制表符缩进，或分别为每个缩进换行。</paragraph>
            <paragraph><strong>示例输出：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">## JSON.stringify(my_dictionary)
{"name":"my_dictionary","version":"1.0.0","entities":[{"name":"entity_0","value":"value_0"},{"name":"entity_1","value":"value_1"}]}

## JSON.stringify(my_dictionary, "\t")
{
    "name": "my_dictionary",
    "version": "1.0.0",
    "entities": [
        {
            "name": "entity_0",
            "value": "value_0"
        },
        {
            "name": "entity_1",
            "value": "value_1"
        }
    ]
}

## JSON.stringify(my_dictionary, "...")
{
..."name": "my_dictionary",
..."version": "1.0.0",
..."entities": [
......{
........."name": "entity_0",
........."value": "value_0"
......},
......{
........."name": "entity_1",
........."value": "value_1"
......}
...]
}</literal_block>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
