<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_tween.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Tween.xml.</comment>
    <target refid="class-tween"></target>
    <section ids="tween class-tween" names="tween class_tween">
        <title>Tween</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>通过脚本进行通用动画的轻量级对象，使用 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference>。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>Tween 主要用于需要将一个数值属性插值到一系列值的动画。<emphasis>tween</emphasis> 这个名字来自 <emphasis>in-betweening</emphasis>，这是一种动画技术，可以在其中指定 <emphasis>关键帧</emphasis>，然后计算机会插入出现在它们之间的帧。使用 <strong>Tween</strong> 制作动画被称为补间动画。</paragraph>
            <paragraph><strong>Tween</strong> 比 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 更适合事先不知道最终值的动画。例如，插入动态选择的相机缩放值最好使用 <strong>Tween</strong> 完成；很难使用 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点做同样的事情。Tween 也比 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 更轻量级，因此它们非常适合简单的动画，或不需要编辑器提供的视觉调整的通用任务。对于通常由代码完成的某些逻辑，它们可以以“即用即弃”的方式使用。例如，可以使用带延迟的循环 <reference internal="True" refuri="class_callbacktweener#class-callbacktweener"><inline classes="std std-ref">CallbackTweener</inline></reference> 定期射击。</paragraph>
            <paragraph>可以使用 <reference internal="True" refuri="class_scenetree#class-scenetree-method-create-tween"><inline classes="std std-ref">SceneTree.create_tween</inline></reference> 或 <reference internal="True" refuri="class_node#class-node-method-create-tween"><inline classes="std std-ref">Node.create_tween</inline></reference> 创建 <strong>Tween</strong>。手动创建的 <strong>Tween</strong>（即使用 <literal>Tween.new()</literal>）无效，不能用于对值进行补间。</paragraph>
            <paragraph>通过使用 <reference internal="True" refid="class-tween-method-tween-property"><inline classes="std std-ref">tween_property</inline></reference>、<reference internal="True" refid="class-tween-method-tween-interval"><inline classes="std std-ref">tween_interval</inline></reference>、<reference internal="True" refid="class-tween-method-tween-callback"><inline classes="std std-ref">tween_callback</inline></reference> 或 <reference internal="True" refid="class-tween-method-tween-method"><inline classes="std std-ref">tween_method</inline></reference>，可将 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 添加到 <strong>Tween</strong> 对象来创建一个补间动画：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween = get_tree().create_tween()
tween.tween_property($Sprite, "modulate", Color.RED, 1)
tween.tween_property($Sprite, "scale", Vector2(), 1)
tween.tween_callback($Sprite.queue_free)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Tween tween = GetTree().CreateTween();
tween.TweenProperty(GetNode("Sprite"), "modulate", Colors.Red, 1.0f);
tween.TweenProperty(GetNode("Sprite"), "scale", Vector2.Zero, 1.0f);
tween.TweenCallback(Callable.From(GetNode("Sprite").QueueFree));</literal_block>
                </div>
            </container>
            <paragraph>该序列将使 <literal>$Sprite</literal> 节点变红，然后缩小，最后调用 <reference internal="True" refuri="class_node#class-node-method-queue-free"><inline classes="std std-ref">Node.queue_free</inline></reference> 来释放该精灵。默认情况下，<reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 一个接一个地执行。这种行为可以使用 <reference internal="True" refid="class-tween-method-parallel"><inline classes="std std-ref">parallel</inline></reference> 和 <reference internal="True" refid="class-tween-method-set-parallel"><inline classes="std std-ref">set_parallel</inline></reference> 来更改。</paragraph>
            <paragraph>当使用 <literal>tween_*</literal> 方法之一创建 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 时，可以使用链式方法调用来调整该 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 的属性。例如，如果想在上面的例子中设置一个不同的过渡类型，可以使用 <reference internal="True" refid="class-tween-method-set-trans"><inline classes="std std-ref">set_trans</inline></reference>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween = get_tree().create_tween()
tween.tween_property($Sprite, "modulate", Color.RED, 1).set_trans(Tween.TRANS_SINE)
tween.tween_property($Sprite, "scale", Vector2(), 1).set_trans(Tween.TRANS_BOUNCE)
tween.tween_callback($Sprite.queue_free)</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Tween tween = GetTree().CreateTween();
tween.TweenProperty(GetNode("Sprite"), "modulate", Colors.Red, 1.0f).SetTrans(Tween.TransitionType.Sine);
tween.TweenProperty(GetNode("Sprite"), "scale", Vector2.Zero, 1.0f).SetTrans(Tween.TransitionType.Bounce);
tween.TweenCallback(Callable.From(GetNode("Sprite").QueueFree));</literal_block>
                </div>
            </container>
            <paragraph>大多数 <strong>Tween</strong> 方法也可以这样链式调用。在下面的示例中，<strong>Tween</strong> 被绑定到运行脚本的节点，并为其 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 设置了默认过渡：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween = get_tree().create_tween().bind_node(self).set_trans(Tween.TRANS_ELASTIC)
tween.tween_property($Sprite, "modulate", Color.RED, 1)
tween.tween_property($Sprite, "scale", Vector2(), 1)
tween.tween_callback($Sprite.queue_free)</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var tween = GetTree().CreateTween().BindNode(this).SetTrans(Tween.TransitionType.Elastic);
tween.TweenProperty(GetNode("Sprite"), "modulate", Colors.Red, 1.0f);
tween.TweenProperty(GetNode("Sprite"), "scale", Vector2.Zero, 1.0f);
tween.TweenCallback(Callable.From(GetNode("Sprite").QueueFree));</literal_block>
                </div>
            </container>
            <paragraph><strong>Tween</strong> 的另一个有趣用途是动画化任意对象集：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween = create_tween()
for sprite in get_children():
    tween.tween_property(sprite, "position", Vector2(0, 0), 1)</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Tween tween = CreateTween();
foreach (Node sprite in GetChildren())
    tween.TweenProperty(sprite, "position", Vector2.Zero, 1.0f);</literal_block>
                </div>
            </container>
            <paragraph>在上面的示例中，一个节点的所有子节点都被依次移动到位置 (0, 0)。</paragraph>
            <paragraph>应该避免为对象的同一属性使用多个 <strong>Tween</strong>。如果两个或多个补间同时为同一个属性设置动画，则最后创建的补间将优先使用，并分配最终值。如果要中断并重新启动动画，请考虑将 <strong>Tween</strong> 赋给变量：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween
func animate():
    if tween:
        tween.kill() # 终止之前的补间动画。
    tween = create_tween()</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private Tween _tween;

public void Animate()
{
    if (_tween != null)
        _tween.Kill(); // 终止之前的补间动画。
    _tween = CreateTween();
}</literal_block>
                </div>
            </container>
            <paragraph>一些 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 会使用过渡和缓动。第一个接受一个 <reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> 常量，指的是处理动画时间的方式（相关示例见 <reference name="easings.net" refuri="https://easings.net/">easings.net</reference>）。第二个接受一个 <reference internal="True" refid="enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference> 常量，并控制 <literal>trans_type</literal> 应用于插值的位置（在开头、结尾或两者均有）。如果不知道该选择哪种过渡和缓动，可以尝试使用 <reference internal="True" refid="class-tween-constant-ease-in-out"><inline classes="std std-ref">EASE_IN_OUT</inline></reference> 并配合不同 <reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> 常量，并使用看起来最好的那个。</paragraph>
            <paragraph><reference name="补间缓动与过渡类型速查表" refuri="https://raw.githubusercontent.com/godotengine/godot-docs/master/img/tween_cheatsheet.webp">补间缓动与过渡类型速查表</reference></paragraph>
            <paragraph><strong>注意：</strong>Tween 并不是针对重用设计的，尝试重用会造成未定义行为。每次从头开始重新播放每个动画都请新建一个 Tween。请记住，Tween 是会立即开始的，所以请只在需要开始动画时创建 Tween。</paragraph>
            <paragraph><strong>注意：</strong>该补间在当前帧中的所有节点之后进行处理，即节点的 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference> 方法（或 <reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference>，具体取决于传递给 <reference internal="True" refid="class-tween-method-set-process-mode"><inline classes="std std-ref">set_process_mode</inline></reference> 的值）会在补间之前被调用。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="364"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-bind-node"><inline classes="std std-ref">bind_node</inline></reference>(node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-chain"><inline classes="std std-ref">chain</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-custom-step"><inline classes="std std-ref">custom_step</inline></reference>(delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-get-loops-left"><inline classes="std std-ref">get_loops_left</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-get-total-elapsed-time"><inline classes="std std-ref">get_total_elapsed_time</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-interpolate-value"><inline classes="std std-ref">interpolate_value</inline></reference>(initial_value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, delta_value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, elapsed_time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, duration: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, trans_type: <reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference>, ease_type: <reference internal="True" refid="enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-is-running"><inline classes="std std-ref">is_running</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-is-valid"><inline classes="std std-ref">is_valid</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-kill"><inline classes="std std-ref">kill</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-parallel"><inline classes="std std-ref">parallel</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-pause"><inline classes="std std-ref">pause</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-play"><inline classes="std std-ref">play</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-set-ease"><inline classes="std std-ref">set_ease</inline></reference>(ease: <reference internal="True" refid="enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-set-loops"><inline classes="std std-ref">set_loops</inline></reference>(loops: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-set-parallel"><inline classes="std std-ref">set_parallel</inline></reference>(parallel: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-set-pause-mode"><inline classes="std std-ref">set_pause_mode</inline></reference>(mode: <reference internal="True" refid="enum-tween-tweenpausemode"><inline classes="std std-ref">TweenPauseMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-set-process-mode"><inline classes="std std-ref">set_process_mode</inline></reference>(mode: <reference internal="True" refid="enum-tween-tweenprocessmode"><inline classes="std std-ref">TweenProcessMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-set-speed-scale"><inline classes="std std-ref">set_speed_scale</inline></reference>(speed: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-set-trans"><inline classes="std std-ref">set_trans</inline></reference>(trans: <reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-stop"><inline classes="std std-ref">stop</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_callbacktweener#class-callbacktweener"><inline classes="std std-ref">CallbackTweener</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-tween-callback"><inline classes="std std-ref">tween_callback</inline></reference>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_intervaltweener#class-intervaltweener"><inline classes="std std-ref">IntervalTweener</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-tween-interval"><inline classes="std std-ref">tween_interval</inline></reference>(time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_methodtweener#class-methodtweener"><inline classes="std std-ref">MethodTweener</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-tween-method"><inline classes="std std-ref">tween_method</inline></reference>(method: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, from: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, to: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, duration: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_propertytweener#class-propertytweener"><inline classes="std std-ref">PropertyTweener</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tween-method-tween-property"><inline classes="std std-ref">tween_property</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, property: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>, final_val: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, duration: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="信号">
            <title>信号</title>
            <target refid="class-tween-signal-finished"></target>
            <paragraph classes="classref-signal" ids="class-tween-signal-finished" names="class_tween_signal_finished"><strong>finished</strong>() <reference internal="True" refid="class-tween-signal-finished"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>Tween</strong> 完成所有补间时发出。该 <strong>Tween</strong> 设为无限循环时不会发出（见 <reference internal="True" refid="class-tween-method-set-loops"><inline classes="std std-ref">set_loops</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-signal-loop-finished"></target>
            <paragraph classes="classref-signal" ids="class-tween-signal-loop-finished" names="class_tween_signal_loop_finished"><strong>loop_finished</strong>(loop_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-tween-signal-loop-finished"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>完成一次循环时触发（见 <reference internal="True" refid="class-tween-method-set-loops"><inline classes="std std-ref">set_loops</inline></reference>），会提供该循环的索引号。这个信号不会在最后一次循环后触发，这种情况请使用 <reference internal="True" refid="class-tween-signal-finished"><inline classes="std std-ref">finished</inline></reference> 代替。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-signal-step-finished"></target>
            <paragraph classes="classref-signal" ids="class-tween-signal-step-finished" names="class_tween_signal_step_finished"><strong>step_finished</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-tween-signal-step-finished"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>完成该 <strong>Tween</strong> 的一步完成后触发，会提供这一步的索引号。一步指的是单个 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 或一组并行执行的 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-tween-tweenprocessmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-tween-tweenprocessmode" names="enum_tween_tweenprocessmode">enum <strong>TweenProcessMode</strong>: <reference internal="True" refid="enum-tween-tweenprocessmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-tween-constant-tween-process-physics"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-tween-process-physics" names="class_tween_constant_tween_process_physics"><reference internal="True" refid="enum-tween-tweenprocessmode"><inline classes="std std-ref">TweenProcessMode</inline></reference> <strong>TWEEN_PROCESS_PHYSICS</strong> = <literal>0</literal></paragraph>
            <paragraph>该 <strong>Tween</strong> 在每个物理帧之后进行更新（见 <reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference>）。</paragraph>
            <target refid="class-tween-constant-tween-process-idle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-tween-process-idle" names="class_tween_constant_tween_process_idle"><reference internal="True" refid="enum-tween-tweenprocessmode"><inline classes="std std-ref">TweenProcessMode</inline></reference> <strong>TWEEN_PROCESS_IDLE</strong> = <literal>1</literal></paragraph>
            <paragraph>该 <strong>Tween</strong> 在每个处理帧之后进行更新（见 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-tween-tweenpausemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-tween-tweenpausemode" names="enum_tween_tweenpausemode">enum <strong>TweenPauseMode</strong>: <reference internal="True" refid="enum-tween-tweenpausemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-tween-constant-tween-pause-bound"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-tween-pause-bound" names="class_tween_constant_tween_pause_bound"><reference internal="True" refid="enum-tween-tweenpausemode"><inline classes="std std-ref">TweenPauseMode</inline></reference> <strong>TWEEN_PAUSE_BOUND</strong> = <literal>0</literal></paragraph>
            <paragraph>如果该 <strong>Tween</strong> 绑定了节点，它将在该节点可以处理时进行处理（见 <reference internal="True" refuri="class_node#class-node-property-process-mode"><inline classes="std std-ref">Node.process_mode</inline></reference>）。否则与 <reference internal="True" refid="class-tween-constant-tween-pause-stop"><inline classes="std std-ref">TWEEN_PAUSE_STOP</inline></reference> 相同。</paragraph>
            <target refid="class-tween-constant-tween-pause-stop"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-tween-pause-stop" names="class_tween_constant_tween_pause_stop"><reference internal="True" refid="enum-tween-tweenpausemode"><inline classes="std std-ref">TweenPauseMode</inline></reference> <strong>TWEEN_PAUSE_STOP</strong> = <literal>1</literal></paragraph>
            <paragraph>如果 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 被暂停，则该 <strong>Tween</strong> 也会暂停。</paragraph>
            <target refid="class-tween-constant-tween-pause-process"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-tween-pause-process" names="class_tween_constant_tween_pause_process"><reference internal="True" refid="enum-tween-tweenpausemode"><inline classes="std std-ref">TweenPauseMode</inline></reference> <strong>TWEEN_PAUSE_PROCESS</strong> = <literal>2</literal></paragraph>
            <paragraph>无论 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 是否被暂停，该 <strong>Tween</strong> 都会处理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-tween-transitiontype"></target>
            <paragraph classes="classref-enumeration" ids="enum-tween-transitiontype" names="enum_tween_transitiontype">enum <strong>TransitionType</strong>: <reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-tween-constant-trans-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-trans-linear" names="class_tween_constant_trans_linear"><reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>TRANS_LINEAR</strong> = <literal>0</literal></paragraph>
            <paragraph>动画是线性插值的。</paragraph>
            <target refid="class-tween-constant-trans-sine"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-trans-sine" names="class_tween_constant_trans_sine"><reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>TRANS_SINE</strong> = <literal>1</literal></paragraph>
            <paragraph>动画使用正弦函数进行插值。</paragraph>
            <target refid="class-tween-constant-trans-quint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-trans-quint" names="class_tween_constant_trans_quint"><reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>TRANS_QUINT</strong> = <literal>2</literal></paragraph>
            <paragraph>动画使用五次（5 次方）函数进行插值。</paragraph>
            <target refid="class-tween-constant-trans-quart"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-trans-quart" names="class_tween_constant_trans_quart"><reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>TRANS_QUART</strong> = <literal>3</literal></paragraph>
            <paragraph>动画使用四次（4 次方）函数进行插值。</paragraph>
            <target refid="class-tween-constant-trans-quad"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-trans-quad" names="class_tween_constant_trans_quad"><reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>TRANS_QUAD</strong> = <literal>4</literal></paragraph>
            <paragraph>动画使用二次（2 次方）函数进行插值。</paragraph>
            <target refid="class-tween-constant-trans-expo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-trans-expo" names="class_tween_constant_trans_expo"><reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>TRANS_EXPO</strong> = <literal>5</literal></paragraph>
            <paragraph>动画使用指数（x 次方）函数进行插值。</paragraph>
            <target refid="class-tween-constant-trans-elastic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-trans-elastic" names="class_tween_constant_trans_elastic"><reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>TRANS_ELASTIC</strong> = <literal>6</literal></paragraph>
            <paragraph>动画弹性插值，在边缘摆动。</paragraph>
            <target refid="class-tween-constant-trans-cubic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-trans-cubic" names="class_tween_constant_trans_cubic"><reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>TRANS_CUBIC</strong> = <literal>7</literal></paragraph>
            <paragraph>动画使用三次（3 次方）函数进行插值。</paragraph>
            <target refid="class-tween-constant-trans-circ"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-trans-circ" names="class_tween_constant_trans_circ"><reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>TRANS_CIRC</strong> = <literal>8</literal></paragraph>
            <paragraph>动画使用平方根的函数进行插值。</paragraph>
            <target refid="class-tween-constant-trans-bounce"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-trans-bounce" names="class_tween_constant_trans_bounce"><reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>TRANS_BOUNCE</strong> = <literal>9</literal></paragraph>
            <paragraph>动画通过在末尾弹跳插值。</paragraph>
            <target refid="class-tween-constant-trans-back"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-trans-back" names="class_tween_constant_trans_back"><reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>TRANS_BACK</strong> = <literal>10</literal></paragraph>
            <paragraph>动画在末端回放插值。</paragraph>
            <target refid="class-tween-constant-trans-spring"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-trans-spring" names="class_tween_constant_trans_spring"><reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>TRANS_SPRING</strong> = <literal>11</literal></paragraph>
            <paragraph>动画像朝着末尾的弹簧一样插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-tween-easetype"></target>
            <paragraph classes="classref-enumeration" ids="enum-tween-easetype" names="enum_tween_easetype">enum <strong>EaseType</strong>: <reference internal="True" refid="enum-tween-easetype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-tween-constant-ease-in"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-ease-in" names="class_tween_constant_ease_in"><reference internal="True" refid="enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference> <strong>EASE_IN</strong> = <literal>0</literal></paragraph>
            <paragraph>插值开始缓慢，并加速接近结束。</paragraph>
            <target refid="class-tween-constant-ease-out"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-ease-out" names="class_tween_constant_ease_out"><reference internal="True" refid="enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference> <strong>EASE_OUT</strong> = <literal>1</literal></paragraph>
            <paragraph>插值开始快速，接近结束时减慢。</paragraph>
            <target refid="class-tween-constant-ease-in-out"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-ease-in-out" names="class_tween_constant_ease_in_out"><reference internal="True" refid="enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference> <strong>EASE_IN_OUT</strong> = <literal>2</literal></paragraph>
            <paragraph><reference internal="True" refid="class-tween-constant-ease-in"><inline classes="std std-ref">EASE_IN</inline></reference> 和 <reference internal="True" refid="class-tween-constant-ease-out"><inline classes="std std-ref">EASE_OUT</inline></reference> 的组合。两端的插值最慢。</paragraph>
            <target refid="class-tween-constant-ease-out-in"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tween-constant-ease-out-in" names="class_tween_constant_ease_out_in"><reference internal="True" refid="enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference> <strong>EASE_OUT_IN</strong> = <literal>3</literal></paragraph>
            <paragraph><reference internal="True" refid="class-tween-constant-ease-in"><inline classes="std std-ref">EASE_IN</inline></reference> 和 <reference internal="True" refid="class-tween-constant-ease-out"><inline classes="std std-ref">EASE_OUT</inline></reference> 的组合。两端的插值最快。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-tween-method-bind-node"></target>
            <paragraph classes="classref-method" ids="class-tween-method-bind-node" names="class_tween_method_bind_node"><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference> <strong>bind_node</strong>(node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-tween-method-bind-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将这个 <strong>Tween</strong> 绑定到给定的 <literal>node</literal> 上。<strong>Tween</strong> 是由 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 直接处理的，所以不依赖被动画的节点运行。将该 <strong>Tween</strong> 绑定到某个 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 后，该对象不在树中时该 <strong>Tween</strong> 就会暂停动画，绑定对象被释放时该 <strong>Tween</strong> 会被自动销毁。另外，<reference internal="True" refid="class-tween-constant-tween-pause-bound"><inline classes="std std-ref">TWEEN_PAUSE_BOUND</inline></reference> 会让暂停行为依赖于绑定的节点。</paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_node#class-node-method-create-tween"><inline classes="std std-ref">Node.create_tween</inline></reference> 来创建并绑定 <strong>Tween</strong> 更简单。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-chain"></target>
            <paragraph classes="classref-method" ids="class-tween-method-chain" names="class_tween_method_chain"><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference> <strong>chain</strong>() <reference internal="True" refid="class-tween-method-chain"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于在使用 <literal>true</literal> 调用 <reference internal="True" refid="class-tween-method-set-parallel"><inline classes="std std-ref">set_parallel</inline></reference> 后，将两个 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 串联。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween = create_tween().set_parallel(true)
tween.tween_property(...)
tween.tween_property(...) # 会和上一条并行执行。
tween.chain().tween_property(...) # 会在前两条完成后执行。</literal_block>
                </div>
                <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Tween tween = CreateTween().SetParallel(true);
tween.TweenProperty(...);
tween.TweenProperty(...); // 会和上一条并行执行。
tween.Chain().TweenProperty(...); // 会在前两条完成后执行。</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-custom-step"></target>
            <paragraph classes="classref-method" ids="class-tween-method-custom-step" names="class_tween_method_custom_step"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>custom_step</strong>(delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-tween-method-custom-step"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的增量秒数 <literal>delta</literal> 处理该 <strong>Tween</strong>。最常见的用法是在该 <strong>Tween</strong> 暂停时对其进行手动控制。也可用于立即停止该 <strong>Tween</strong> 的动画，将 <literal>delta</literal> 设得比完整长度更大即可。</paragraph>
            <paragraph>如果该 <strong>Tween</strong> 仍然有未完成的 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-get-loops-left"></target>
            <paragraph classes="classref-method" ids="class-tween-method-get-loops-left" names="class_tween_method_get_loops_left"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_loops_left</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tween-method-get-loops-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>Tween</strong> 所剩的循环数（见 <reference internal="True" refid="class-tween-method-set-loops"><inline classes="std std-ref">set_loops</inline></reference>）。返回 <literal>-1</literal> 表示 <strong>Tween</strong> 无限循环，返回 <literal>0</literal> 表示 <strong>Tween</strong> 已结束。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-get-total-elapsed-time"></target>
            <paragraph classes="classref-method" ids="class-tween-method-get-total-elapsed-time" names="class_tween_method_get_total_elapsed_time"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_total_elapsed_time</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tween-method-get-total-elapsed-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>Tween</strong> 已进行动画的总时长（即自开始以来经过的时间，不计算暂停等时间），单位为秒。时长会受到 <reference internal="True" refid="class-tween-method-set-speed-scale"><inline classes="std std-ref">set_speed_scale</inline></reference> 影响，<reference internal="True" refid="class-tween-method-stop"><inline classes="std std-ref">stop</inline></reference> 会将其重置为 <literal>0</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于时长是由帧的增量时间累计而来的，该 <strong>Tween</strong> 完成动画后所返回的时长会比 <strong>Tween</strong> 的实际时长略大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-interpolate-value"></target>
            <paragraph classes="classref-method" ids="class-tween-method-interpolate-value" names="class_tween_method_interpolate_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>interpolate_value</strong>(initial_value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, delta_value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, elapsed_time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, duration: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, trans_type: <reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference>, ease_type: <reference internal="True" refid="enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-tween-method-interpolate-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>不想使用 <strong>Tween</strong> 进行动画时，可以使用这个方法进行手动插值。与 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-lerp"><inline classes="std std-ref">@GlobalScope.lerp</inline></reference> 类似，但支持自定义过渡和缓动。</paragraph>
            <paragraph><literal>initial_value</literal> 为插值的起始值。</paragraph>
            <paragraph><literal>delta_value</literal> 为插值的变化值，即等于 <literal>final_value - initial_value</literal>。</paragraph>
            <paragraph><literal>elapsed_time</literal> 为插值开始后所经过的秒数，用于控制插值的位置。例如，等于 <literal>duration</literal> 的一半时，插值后的值位于初始值和最终值的一半。这个值也可以比 <literal>duration</literal> 大或者比 0 小，此时会进行外插。</paragraph>
            <paragraph><literal>duration</literal> 为插值的总时长。</paragraph>
            <paragraph><strong>注意：</strong>如果 <literal>duration</literal> 等于 <literal>0</literal>，那么无论提供的 <literal>elapsed_time</literal> 为多少，该方法返回的始终是最终值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-is-running"></target>
            <paragraph classes="classref-method" ids="class-tween-method-is-running" names="class_tween_method_is_running"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_running</strong>() <reference internal="True" refid="class-tween-method-is-running"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>Tween</strong> 目前是否正在执行，即未暂停且未完成。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-is-valid"></target>
            <paragraph classes="classref-method" ids="class-tween-method-is-valid" names="class_tween_method_is_valid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_valid</strong>() <reference internal="True" refid="class-tween-method-is-valid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>Tween</strong> 是否有效。有效的 <strong>Tween</strong> 是由场景树包含的 <strong>Tween</strong>（即 <reference internal="True" refuri="class_scenetree#class-scenetree-method-get-processed-tweens"><inline classes="std std-ref">SceneTree.get_processed_tweens</inline></reference> 返回的数组中包含这个 <strong>Tween</strong>）。<strong>Tween</strong> 失效的情况有：补间完成、被销毁、使用 <literal>Tween.new()</literal> 创建。无效的 <strong>Tween</strong> 不能追加 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-kill"></target>
            <paragraph classes="classref-method" ids="class-tween-method-kill" names="class_tween_method_kill"><abbreviation explanation="无返回值。">void</abbreviation> <strong>kill</strong>() <reference internal="True" refid="class-tween-method-kill"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>中止所有补间操作，并使该 <strong>Tween</strong> 无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-parallel"></target>
            <paragraph classes="classref-method" ids="class-tween-method-parallel" names="class_tween_method_parallel"><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference> <strong>parallel</strong>() <reference internal="True" refid="class-tween-method-parallel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>让下一个 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 与上一个并行执行。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween = create_tween()
tween.tween_property(...)
tween.parallel().tween_property(...)
tween.parallel().tween_property(...)</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Tween tween = CreateTween();
tween.TweenProperty(...);
tween.Parallel().TweenProperty(...);
tween.Parallel().TweenProperty(...);</literal_block>
                </div>
            </container>
            <paragraph>该示例中的所有 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 都会同时执行。</paragraph>
            <paragraph>你可以通过使用 <reference internal="True" refid="class-tween-method-set-parallel"><inline classes="std std-ref">set_parallel</inline></reference> 让该 <strong>Tween</strong> 默认并行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-pause"></target>
            <paragraph classes="classref-method" ids="class-tween-method-pause" names="class_tween_method_pause"><abbreviation explanation="无返回值。">void</abbreviation> <strong>pause</strong>() <reference internal="True" refid="class-tween-method-pause"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>暂停该补间。可以使用 <reference internal="True" refid="class-tween-method-play"><inline classes="std std-ref">play</inline></reference> 恢复动画。</paragraph>
            <paragraph><strong>注意：</strong>如果一个 Tween 被暂停并且没有被绑定到任何节点，它将无限期地存在，直到手动启动或失效。如果丢失了对这种 Tween 的引用，可以使用 <reference internal="True" refuri="class_scenetree#class-scenetree-method-get-processed-tweens"><inline classes="std std-ref">SceneTree.get_processed_tweens</inline></reference> 检索它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-play"></target>
            <paragraph classes="classref-method" ids="class-tween-method-play" names="class_tween_method_play"><abbreviation explanation="无返回值。">void</abbreviation> <strong>play</strong>() <reference internal="True" refid="class-tween-method-play"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>恢复已暂停或已停止的 <strong>Tween</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-set-ease"></target>
            <paragraph classes="classref-method" ids="class-tween-method-set-ease" names="class_tween_method_set_ease"><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference> <strong>set_ease</strong>(ease: <reference internal="True" refid="enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference>) <reference internal="True" refid="class-tween-method-set-ease"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_propertytweener#class-propertytweener"><inline classes="std std-ref">PropertyTweener</inline></reference> 的默认缓动类型，<reference internal="True" refuri="class_methodtweener#class-methodtweener"><inline classes="std std-ref">MethodTweener</inline></reference> 由该 <strong>Tween</strong> 设置动画。</paragraph>
            <paragraph>如果未指定，默认值为 <reference internal="True" refid="class-tween-constant-ease-in-out"><inline classes="std std-ref">EASE_IN_OUT</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-set-loops"></target>
            <paragraph classes="classref-method" ids="class-tween-method-set-loops" names="class_tween_method_set_loops"><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference> <strong>set_loops</strong>(loops: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-tween-method-set-loops"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>这只该补间序列的重复次数，即 <literal>set_loops(2)</literal> 会让动画执行两次。</paragraph>
            <paragraph>调用这个方法时如果不带参数，那么该 <strong>Tween</strong> 会无限执行，直到被 <reference internal="True" refid="class-tween-method-kill"><inline classes="std std-ref">kill</inline></reference> 销毁、该 <strong>Tween</strong> 绑定的节点被释放或者所有进行动画的对象都被释放（无法再进行任何动画）。</paragraph>
            <paragraph><strong>警告：</strong>使用无限循环时请一定要加入一些时长/延迟。为了防止游戏冻结，0 时长的循环动画（例如单个不带延迟的 <reference internal="True" refuri="class_callbacktweener#class-callbacktweener"><inline classes="std std-ref">CallbackTweener</inline></reference>）会在循环若干次后停止，造成出乎预料的结果。如果 <strong>Tween</strong> 的生命期依赖于某个节点，请一定使用 <reference internal="True" refid="class-tween-method-bind-node"><inline classes="std std-ref">bind_node</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-set-parallel"></target>
            <paragraph classes="classref-method" ids="class-tween-method-set-parallel" names="class_tween_method_set_parallel"><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference> <strong>set_parallel</strong>(parallel: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-tween-method-set-parallel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>parallel</literal> 为 <literal>true</literal>，则后续追加的 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 默认就是同时运行的，否则默认依次运行。</paragraph>
            <paragraph><strong>注意：</strong>与 <reference internal="True" refid="class-tween-method-parallel"><inline classes="std std-ref">parallel</inline></reference> 类似，在这个方法前添加的那一个补间器也是并行步骤的一部分。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">tween.tween_property(self, "position", Vector2(300, 0), 0.5)
tween.set_parallel()
tween.tween_property(self, "modulate", Color.GREEN, 0.5) # 与位置补间器一同运行。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-set-pause-mode"></target>
            <paragraph classes="classref-method" ids="class-tween-method-set-pause-mode" names="class_tween_method_set_pause_mode"><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference> <strong>set_pause_mode</strong>(mode: <reference internal="True" refid="enum-tween-tweenpausemode"><inline classes="std std-ref">TweenPauseMode</inline></reference>) <reference internal="True" refid="class-tween-method-set-pause-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>决定该 <strong>Tween</strong> 在 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 暂停时的行为。可选项请查看 <reference internal="True" refid="enum-tween-tweenpausemode"><inline classes="std std-ref">TweenPauseMode</inline></reference>。</paragraph>
            <paragraph>默认值为 <reference internal="True" refid="class-tween-constant-tween-pause-bound"><inline classes="std std-ref">TWEEN_PAUSE_BOUND</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-set-process-mode"></target>
            <paragraph classes="classref-method" ids="class-tween-method-set-process-mode" names="class_tween_method_set_process_mode"><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference> <strong>set_process_mode</strong>(mode: <reference internal="True" refid="enum-tween-tweenprocessmode"><inline classes="std std-ref">TweenProcessMode</inline></reference>) <reference internal="True" refid="class-tween-method-set-process-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>决定该 <strong>Tween</strong> 应当在处理帧（见 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference>）还是物理帧（见 <reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference>）执行。</paragraph>
            <paragraph>默认值为 <reference internal="True" refid="class-tween-constant-tween-process-idle"><inline classes="std std-ref">TWEEN_PROCESS_IDLE</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-set-speed-scale"></target>
            <paragraph classes="classref-method" ids="class-tween-method-set-speed-scale" names="class_tween_method_set_speed_scale"><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference> <strong>set_speed_scale</strong>(speed: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-tween-method-set-speed-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>补间的速度缩放。影响所有 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 及其延迟。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-set-trans"></target>
            <paragraph classes="classref-method" ids="class-tween-method-set-trans" names="class_tween_method_set_trans"><reference internal="True" refid="class-tween"><inline classes="std std-ref">Tween</inline></reference> <strong>set_trans</strong>(trans: <reference internal="True" refid="enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference>) <reference internal="True" refid="class-tween-method-set-trans"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为此 <strong>Tween</strong> 设置动画化的 <reference internal="True" refuri="class_propertytweener#class-propertytweener"><inline classes="std std-ref">PropertyTweener</inline></reference> 和 <reference internal="True" refuri="class_methodtweener#class-methodtweener"><inline classes="std std-ref">MethodTweener</inline></reference> 的默认过渡类型。</paragraph>
            <paragraph>如果未指定，则默认值为 <reference internal="True" refid="class-tween-constant-trans-linear"><inline classes="std std-ref">TRANS_LINEAR</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-stop"></target>
            <paragraph classes="classref-method" ids="class-tween-method-stop" names="class_tween_method_stop"><abbreviation explanation="无返回值。">void</abbreviation> <strong>stop</strong>() <reference internal="True" refid="class-tween-method-stop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>停止该补间并将该 <strong>Tween</strong> 重置为其初始状态。这不会移除任何附加的 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果一个 Tween 被停止并且没有被绑定到任何节点，它将无限期地存在，直到手动启动或失效。如果丢失了对这种 Tween 的引用，可以使用 <reference internal="True" refuri="class_scenetree#class-scenetree-method-get-processed-tweens"><inline classes="std std-ref">SceneTree.get_processed_tweens</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-tween-callback"></target>
            <paragraph classes="classref-method" ids="class-tween-method-tween-callback" names="class_tween_method_tween_callback"><reference internal="True" refuri="class_callbacktweener#class-callbacktweener"><inline classes="std std-ref">CallbackTweener</inline></reference> <strong>tween_callback</strong>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-tween-method-tween-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建并追加一个 <reference internal="True" refuri="class_callbacktweener#class-callbacktweener"><inline classes="std std-ref">CallbackTweener</inline></reference>。这个方法可用于调用任意对象的任意方法。请使用 <reference internal="True" refuri="class_callable#class-callable-method-bind"><inline classes="std std-ref">Callable.bind</inline></reference> 绑定额外的调用参数。</paragraph>
            <paragraph><strong>示例：</strong>总是每隔 1 秒射击一次的对象：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-7-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-7-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-7-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween = get_tree().create_tween().set_loops()
tween.tween_callback(shoot).set_delay(1)</literal_block>
                </div>
                <div aria-labelledby="tab-7-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-7-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Tween tween = GetTree().CreateTween().SetLoops();
tween.TweenCallback(Callable.From(Shoot)).SetDelay(1.0f);</literal_block>
                </div>
            </container>
            <paragraph><strong>示例：</strong>将精灵变红然后变蓝，带有 2 秒延迟：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-8-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-8-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-8-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween = get_tree().create_tween()
tween.tween_callback($Sprite.set_modulate.bind(Color.RED)).set_delay(2)
tween.tween_callback($Sprite.set_modulate.bind(Color.BLUE)).set_delay(2)</literal_block>
                </div>
                <div aria-labelledby="tab-8-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-8-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Tween tween = GetTree().CreateTween();
Sprite2D sprite = GetNode&lt;Sprite2D&gt;("Sprite");
tween.TweenCallback(Callable.From(() =&gt; sprite.Modulate = Colors.Red)).SetDelay(2.0f);
tween.TweenCallback(Callable.From(() =&gt; sprite.Modulate = Colors.Blue)).SetDelay(2.0f);</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-tween-interval"></target>
            <paragraph classes="classref-method" ids="class-tween-method-tween-interval" names="class_tween_method_tween_interval"><reference internal="True" refuri="class_intervaltweener#class-intervaltweener"><inline classes="std std-ref">IntervalTweener</inline></reference> <strong>tween_interval</strong>(time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-tween-method-tween-interval"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建并追加一个 <reference internal="True" refuri="class_intervaltweener#class-intervaltweener"><inline classes="std std-ref">IntervalTweener</inline></reference>。这个方法可用于在补间动画中创建延迟，可以替代在其他 <reference internal="True" refuri="class_tweener#class-tweener"><inline classes="std std-ref">Tweener</inline></reference> 中使用延迟，或无动画的情况（此时 <strong>Tween</strong> 充当计时器的角色）。<literal>time</literal> 为间隔时间，单位为秒。</paragraph>
            <paragraph><strong>示例：</strong>创建代码执行的间隔：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-9-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-9-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-9-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-9-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-9-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-9-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># ... 一些代码
yield(create_tween().tween_interval(2), "finished")
# ... 更多代码</literal_block>
                </div>
                <div aria-labelledby="tab-9-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-9-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// ... 一些代码
await ToSignal(CreateTween().TweenInterval(2.0f), Tween.SignalName.Finished);
// ... 更多代码</literal_block>
                </div>
            </container>
            <paragraph><strong>示例：</strong>创建每隔几秒就来回移动并跳跃的对象：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-10-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-10-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-10-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-10-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-10-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-10-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween = create_tween().set_loops()
tween.tween_property($Sprite, "position:x", 200.0, 1).as_relative()
tween.tween_callback(jump)
tween.tween_interval(2)
tween.tween_property($Sprite, "position:x", -200.0, 1).as_relative()
tween.tween_callback(jump)
tween.tween_interval(2)</literal_block>
                </div>
                <div aria-labelledby="tab-10-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-10-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Tween tween = CreateTween().SetLoops();
tween.TweenProperty(GetNode("Sprite"), "position:x", 200.0f, 1.0f).AsRelative();
tween.TweenCallback(Callable.From(Jump));
tween.TweenInterval(2.0f);
tween.TweenProperty(GetNode("Sprite"), "position:x", -200.0f, 1.0f).AsRelative();
tween.TweenCallback(Callable.From(Jump));
tween.TweenInterval(2.0f);</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-tween-method"></target>
            <paragraph classes="classref-method" ids="class-tween-method-tween-method" names="class_tween_method_tween_method"><reference internal="True" refuri="class_methodtweener#class-methodtweener"><inline classes="std std-ref">MethodTweener</inline></reference> <strong>tween_method</strong>(method: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, from: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, to: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, duration: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-tween-method-tween-method"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建并追加一个 <reference internal="True" refuri="class_methodtweener#class-methodtweener"><inline classes="std std-ref">MethodTweener</inline></reference>。这个方法与 <reference internal="True" refid="class-tween-method-tween-callback"><inline classes="std std-ref">tween_callback</inline></reference> 和 <reference internal="True" refid="class-tween-method-tween-property"><inline classes="std std-ref">tween_property</inline></reference> 的组合类似，会使用补间后的值作为参数去持续调用某个方法。该值是从 <literal>from</literal> 到 <literal>to</literal> 进行补间的，时长为 <literal>duration</literal> 秒。请使用 <reference internal="True" refuri="class_callable#class-callable-method-bind"><inline classes="std std-ref">Callable.bind</inline></reference> 绑定额外的调用参数。你可以使用 <reference internal="True" refuri="class_methodtweener#class-methodtweener-method-set-ease"><inline classes="std std-ref">MethodTweener.set_ease</inline></reference> 和 <reference internal="True" refuri="class_methodtweener#class-methodtweener-method-set-trans"><inline classes="std std-ref">MethodTweener.set_trans</inline></reference> 来调整该值的缓动和过渡，可以使用 <reference internal="True" refuri="class_methodtweener#class-methodtweener-method-set-delay"><inline classes="std std-ref">MethodTweener.set_delay</inline></reference> 来延迟补间。</paragraph>
            <paragraph><strong>示例：</strong>让 3D 对象面向另一个点：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-11-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-11-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-11-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-11-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-11-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-11-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween = create_tween()
tween.tween_method(look_at.bind(Vector3.UP), Vector3(-1, 0, -1), Vector3(1, 0, -1), 1) # look_at() 方法的第二个参数接受的是上向量。</literal_block>
                </div>
                <div aria-labelledby="tab-11-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-11-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Tween tween = CreateTween();
tween.TweenMethod(Callable.From((Vector3 target) =&gt; LookAt(target, Vector3.Up)), new Vector3(-1.0f, 0.0f, -1.0f), new Vector3(1.0f, 0.0f, -1.0f), 1.0f); // 使用 lambda 为调用绑定附加参数。</literal_block>
                </div>
            </container>
            <paragraph><strong>示例：</strong>在一段延迟后，使用中间方法来设置 <reference internal="True" refuri="class_label#class-label"><inline classes="std std-ref">Label</inline></reference> 的文本：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-12-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-12-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-12-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-12-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-12-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-12-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    var tween = create_tween()
    tween.tween_method(set_label_text, 0, 10, 1).set_delay(1)

func set_label_text(value: int):
    $Label.text = "Counting " + str(value)</literal_block>
                </div>
                <div aria-labelledby="tab-12-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-12-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    base._Ready();

    Tween tween = CreateTween();
    tween.TweenMethod(Callable.From&lt;int&gt;(SetLabelText), 0.0f, 10.0f, 1.0f).SetDelay(1.0f);
}

private void SetLabelText(int value)
{
    GetNode&lt;Label&gt;("Label").Text = $"Counting {value}";
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tween-method-tween-property"></target>
            <paragraph classes="classref-method" ids="class-tween-method-tween-property" names="class_tween_method_tween_property"><reference internal="True" refuri="class_propertytweener#class-propertytweener"><inline classes="std std-ref">PropertyTweener</inline></reference> <strong>tween_property</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, property: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>, final_val: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, duration: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-tween-method-tween-property"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建并追加一个 <reference internal="True" refuri="class_propertytweener#class-propertytweener"><inline classes="std std-ref">PropertyTweener</inline></reference>。这个方法会将 <literal>object</literal> 对象的 <literal>property</literal> 属性在初始值和最终值 <literal>final_val</literal> 之间进行补间，持续时间为 <literal>duration</literal> 秒。初始值默认为该 <reference internal="True" refuri="class_propertytweener#class-propertytweener"><inline classes="std std-ref">PropertyTweener</inline></reference> 启动时该属性的值。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-13-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-13-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-13-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-13-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-13-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-13-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween = create_tween()
tween.tween_property($Sprite, "position", Vector2(100, 200), 1)
tween.tween_property($Sprite, "position", Vector2(200, 300), 1)</literal_block>
                </div>
                <div aria-labelledby="tab-13-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-13-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Tween tween = CreateTween();
tween.TweenProperty(GetNode("Sprite"), "position", new Vector2(100.0f, 200.0f), 1.0f);
tween.TweenProperty(GetNode("Sprite"), "position", new Vector2(200.0f, 300.0f), 1.0f);</literal_block>
                </div>
            </container>
            <paragraph>会将该精灵移动到 (100, 200) 然后再移动到 (200, 300)。如果你使用了 <reference internal="True" refuri="class_propertytweener#class-propertytweener-method-from"><inline classes="std std-ref">PropertyTweener.from</inline></reference> 或 <reference internal="True" refuri="class_propertytweener#class-propertytweener-method-from-current"><inline classes="std std-ref">PropertyTweener.from_current</inline></reference>，那么起始位置就会被给定的值所覆盖。更多调整项请参阅 <reference internal="True" refuri="class_propertytweener#class-propertytweener"><inline classes="std std-ref">PropertyTweener</inline></reference> 中的其他方法。</paragraph>
            <paragraph><strong>注意：</strong>鼠标悬停在检查器中的属性上即可查看正确的属性名称。你还可以用 <literal>"属性:组件"</literal> 的形式提供属性中的组件（例如 <literal>position:x</literal>），这样就只会修改这个特定的组件。</paragraph>
            <paragraph><strong>示例：</strong>使用不同的过渡类型从同一位置开始移动两次：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-14-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-14-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-14-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-14-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-14-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-14-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var tween = create_tween()
tween.tween_property($Sprite, "position", Vector2.RIGHT * 300, 1).as_relative().set_trans(Tween.TRANS_SINE)
tween.tween_property($Sprite, "position", Vector2.RIGHT * 300, 1).as_relative().from_current().set_trans(Tween.TRANS_EXPO)</literal_block>
                </div>
                <div aria-labelledby="tab-14-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-14-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Tween tween = CreateTween();
tween.TweenProperty(GetNode("Sprite"), "position", Vector2.Right * 300.0f, 1.0f).AsRelative().SetTrans(Tween.TransitionType.Sine);
tween.TweenProperty(GetNode("Sprite"), "position", Vector2.Right * 300.0f, 1.0f).AsRelative().FromCurrent().SetTrans(Tween.TransitionType.Expo);</literal_block>
                </div>
            </container>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
