<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_scriptlanguageextension.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/ScriptLanguageExtension.xml.</comment>
    <target refid="class-scriptlanguageextension"></target>
    <section ids="scriptlanguageextension class-scriptlanguageextension" names="scriptlanguageextension class_scriptlanguageextension">
        <title>ScriptLanguageExtension</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <container classes="contribute">
            <paragraph>目前没有这个类的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
        </container>
        <section classes="classref-reftable-group" ids="id1" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="346"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-add-global-constant"><inline classes="std std-ref">_add_global_constant</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-add-named-global-constant"><inline classes="std std-ref">_add_named_global_constant</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-auto-indent-code"><inline classes="std std-ref">_auto_indent_code</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> code, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_line, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_line <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-can-inherit-from-file"><inline classes="std std-ref">_can_inherit_from_file</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-complete-code"><inline classes="std std-ref">_complete_code</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> code, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> owner <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-create-script"><inline classes="std std-ref">_create_script</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-debug-get-current-stack-info"><inline classes="std std-ref">_debug_get_current_stack_info</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-debug-get-error"><inline classes="std std-ref">_debug_get_error</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-debug-get-globals"><inline classes="std std-ref">_debug_get_globals</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_subitems, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_depth <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-debug-get-stack-level-count"><inline classes="std std-ref">_debug_get_stack_level_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-debug-get-stack-level-function"><inline classes="std std-ref">_debug_get_stack_level_function</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void*</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-debug-get-stack-level-instance"><inline classes="std std-ref">_debug_get_stack_level_instance</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-debug-get-stack-level-line"><inline classes="std std-ref">_debug_get_stack_level_line</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-debug-get-stack-level-locals"><inline classes="std std-ref">_debug_get_stack_level_locals</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_subitems, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_depth <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-debug-get-stack-level-members"><inline classes="std std-ref">_debug_get_stack_level_members</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_subitems, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_depth <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-debug-parse-stack-level-expression"><inline classes="std std-ref">_debug_parse_stack_level_expression</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> expression, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_subitems, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_depth <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-find-function"><inline classes="std std-ref">_find_function</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> class_name, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> function_name <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-finish"><inline classes="std std-ref">_finish</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-frame"><inline classes="std std-ref">_frame</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-built-in-templates"><inline classes="std std-ref">_get_built_in_templates</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> object <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-comment-delimiters"><inline classes="std std-ref">_get_comment_delimiters</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-doc-comment-delimiters"><inline classes="std std-ref">_get_doc_comment_delimiters</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-extension"><inline classes="std std-ref">_get_extension</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-global-class-name"><inline classes="std std-ref">_get_global_class_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-name"><inline classes="std std-ref">_get_name</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-public-annotations"><inline classes="std std-ref">_get_public_annotations</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-public-constants"><inline classes="std std-ref">_get_public_constants</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-public-functions"><inline classes="std std-ref">_get_public_functions</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-recognized-extensions"><inline classes="std std-ref">_get_recognized_extensions</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-reserved-words"><inline classes="std std-ref">_get_reserved_words</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-string-delimiters"><inline classes="std std-ref">_get_string_delimiters</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-get-type"><inline classes="std std-ref">_get_type</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-handles-global-class-type"><inline classes="std std-ref">_handles_global_class_type</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-has-named-classes"><inline classes="std std-ref">_has_named_classes</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-init"><inline classes="std std-ref">_init</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-is-control-flow-keyword"><inline classes="std std-ref">_is_control_flow_keyword</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> keyword <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-is-using-templates"><inline classes="std std-ref">_is_using_templates</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-lookup-code"><inline classes="std std-ref">_lookup_code</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> code, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> symbol, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> owner <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-make-function"><inline classes="std std-ref">_make_function</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> class_name, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> function_name, <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> function_args <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-make-template"><inline classes="std std-ref">_make_template</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> template, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> class_name, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> base_class_name <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-open-in-external-editor"><inline classes="std std-ref">_open_in_external_editor</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference> script, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> line, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-overrides-external-editor"><inline classes="std std-ref">_overrides_external_editor</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-profiling-get-accumulated-data"><inline classes="std std-ref">_profiling_get_accumulated_data</inline></reference> <strong>(</strong> ScriptLanguageExtensionProfilingInfo* info_array, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> info_max <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-profiling-get-frame-data"><inline classes="std std-ref">_profiling_get_frame_data</inline></reference> <strong>(</strong> ScriptLanguageExtensionProfilingInfo* info_array, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> info_max <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-profiling-start"><inline classes="std std-ref">_profiling_start</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-profiling-stop"><inline classes="std std-ref">_profiling_stop</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-reload-all-scripts"><inline classes="std std-ref">_reload_all_scripts</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-reload-tool-script"><inline classes="std std-ref">_reload_tool_script</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference> script, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> soft_reload <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-remove-named-global-constant"><inline classes="std std-ref">_remove_named_global_constant</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-supports-builtin-mode"><inline classes="std std-ref">_supports_builtin_mode</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-supports-documentation"><inline classes="std std-ref">_supports_documentation</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-thread-enter"><inline classes="std std-ref">_thread_enter</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-thread-exit"><inline classes="std std-ref">_thread_exit</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-validate"><inline classes="std std-ref">_validate</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> script, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> validate_functions, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> validate_errors, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> validate_warnings, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> validate_safe_lines <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptlanguageextension-private-method-validate-path"><inline classes="std std-ref">_validate_path</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id2" names="枚举">
            <title>枚举</title>
            <target refid="enum-scriptlanguageextension-lookupresulttype"></target>
            <paragraph classes="classref-enumeration" ids="enum-scriptlanguageextension-lookupresulttype" names="enum_scriptlanguageextension_lookupresulttype">enum <strong>LookupResultType</strong>:</paragraph>
            <target refid="class-scriptlanguageextension-constant-lookup-result-script-location"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-lookup-result-script-location" names="class_scriptlanguageextension_constant_lookup_result_script_location"><reference internal="True" refid="enum-scriptlanguageextension-lookupresulttype"><inline classes="std std-ref">LookupResultType</inline></reference> <strong>LOOKUP_RESULT_SCRIPT_LOCATION</strong> = <literal>0</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-lookup-result-class"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-lookup-result-class" names="class_scriptlanguageextension_constant_lookup_result_class"><reference internal="True" refid="enum-scriptlanguageextension-lookupresulttype"><inline classes="std std-ref">LookupResultType</inline></reference> <strong>LOOKUP_RESULT_CLASS</strong> = <literal>1</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-lookup-result-class-constant"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-lookup-result-class-constant" names="class_scriptlanguageextension_constant_lookup_result_class_constant"><reference internal="True" refid="enum-scriptlanguageextension-lookupresulttype"><inline classes="std std-ref">LookupResultType</inline></reference> <strong>LOOKUP_RESULT_CLASS_CONSTANT</strong> = <literal>2</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-lookup-result-class-property"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-lookup-result-class-property" names="class_scriptlanguageextension_constant_lookup_result_class_property"><reference internal="True" refid="enum-scriptlanguageextension-lookupresulttype"><inline classes="std std-ref">LookupResultType</inline></reference> <strong>LOOKUP_RESULT_CLASS_PROPERTY</strong> = <literal>3</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-lookup-result-class-method"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-lookup-result-class-method" names="class_scriptlanguageextension_constant_lookup_result_class_method"><reference internal="True" refid="enum-scriptlanguageextension-lookupresulttype"><inline classes="std std-ref">LookupResultType</inline></reference> <strong>LOOKUP_RESULT_CLASS_METHOD</strong> = <literal>4</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-lookup-result-class-signal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-lookup-result-class-signal" names="class_scriptlanguageextension_constant_lookup_result_class_signal"><reference internal="True" refid="enum-scriptlanguageextension-lookupresulttype"><inline classes="std std-ref">LookupResultType</inline></reference> <strong>LOOKUP_RESULT_CLASS_SIGNAL</strong> = <literal>5</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-lookup-result-class-enum"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-lookup-result-class-enum" names="class_scriptlanguageextension_constant_lookup_result_class_enum"><reference internal="True" refid="enum-scriptlanguageextension-lookupresulttype"><inline classes="std std-ref">LookupResultType</inline></reference> <strong>LOOKUP_RESULT_CLASS_ENUM</strong> = <literal>6</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-lookup-result-class-tbd-globalscope"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-lookup-result-class-tbd-globalscope" names="class_scriptlanguageextension_constant_lookup_result_class_tbd_globalscope"><reference internal="True" refid="enum-scriptlanguageextension-lookupresulttype"><inline classes="std std-ref">LookupResultType</inline></reference> <strong>LOOKUP_RESULT_CLASS_TBD_GLOBALSCOPE</strong> = <literal>7</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-lookup-result-class-annotation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-lookup-result-class-annotation" names="class_scriptlanguageextension_constant_lookup_result_class_annotation"><reference internal="True" refid="enum-scriptlanguageextension-lookupresulttype"><inline classes="std std-ref">LookupResultType</inline></reference> <strong>LOOKUP_RESULT_CLASS_ANNOTATION</strong> = <literal>8</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-lookup-result-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-lookup-result-max" names="class_scriptlanguageextension_constant_lookup_result_max"><reference internal="True" refid="enum-scriptlanguageextension-lookupresulttype"><inline classes="std std-ref">LookupResultType</inline></reference> <strong>LOOKUP_RESULT_MAX</strong> = <literal>9</literal></paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-scriptlanguageextension-codecompletionlocation"></target>
            <paragraph classes="classref-enumeration" ids="enum-scriptlanguageextension-codecompletionlocation" names="enum_scriptlanguageextension_codecompletionlocation">enum <strong>CodeCompletionLocation</strong>:</paragraph>
            <target refid="class-scriptlanguageextension-constant-location-local"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-location-local" names="class_scriptlanguageextension_constant_location_local"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionlocation"><inline classes="std std-ref">CodeCompletionLocation</inline></reference> <strong>LOCATION_LOCAL</strong> = <literal>0</literal></paragraph>
            <paragraph>该选项是相对于代码补全查询位置的 - 例如局部变量。位置的后续值表示选项来自外部类，确切的值表示它们的距离（就内部类而言）。</paragraph>
            <target refid="class-scriptlanguageextension-constant-location-parent-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-location-parent-mask" names="class_scriptlanguageextension_constant_location_parent_mask"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionlocation"><inline classes="std std-ref">CodeCompletionLocation</inline></reference> <strong>LOCATION_PARENT_MASK</strong> = <literal>256</literal></paragraph>
            <paragraph>该选项来自于所在的类或父类，相对于代码补全查询的位置。请使用类的深度进行按位 OR（或）运算（例如 0 表示当前类，1 表示父类，2 表示父类的父类等），从而在当前类或父类中存储选项的深度。</paragraph>
            <target refid="class-scriptlanguageextension-constant-location-other-user-code"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-location-other-user-code" names="class_scriptlanguageextension_constant_location_other_user_code"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionlocation"><inline classes="std std-ref">CodeCompletionLocation</inline></reference> <strong>LOCATION_OTHER_USER_CODE</strong> = <literal>512</literal></paragraph>
            <paragraph>该选项来自用户代码，不是局部，也不是派生类（例如自动加载单例）。</paragraph>
            <target refid="class-scriptlanguageextension-constant-location-other"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-location-other" names="class_scriptlanguageextension_constant_location_other"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionlocation"><inline classes="std std-ref">CodeCompletionLocation</inline></reference> <strong>LOCATION_OTHER</strong> = <literal>1024</literal></paragraph>
            <paragraph>该选项来自其他引擎代码，未被其他枚举常量覆盖 - 例如内置类。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-scriptlanguageextension-codecompletionkind"></target>
            <paragraph classes="classref-enumeration" ids="enum-scriptlanguageextension-codecompletionkind" names="enum_scriptlanguageextension_codecompletionkind">enum <strong>CodeCompletionKind</strong>:</paragraph>
            <target refid="class-scriptlanguageextension-constant-code-completion-kind-class"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-code-completion-kind-class" names="class_scriptlanguageextension_constant_code_completion_kind_class"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>CODE_COMPLETION_KIND_CLASS</strong> = <literal>0</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-code-completion-kind-function"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-code-completion-kind-function" names="class_scriptlanguageextension_constant_code_completion_kind_function"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>CODE_COMPLETION_KIND_FUNCTION</strong> = <literal>1</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-code-completion-kind-signal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-code-completion-kind-signal" names="class_scriptlanguageextension_constant_code_completion_kind_signal"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>CODE_COMPLETION_KIND_SIGNAL</strong> = <literal>2</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-code-completion-kind-variable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-code-completion-kind-variable" names="class_scriptlanguageextension_constant_code_completion_kind_variable"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>CODE_COMPLETION_KIND_VARIABLE</strong> = <literal>3</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-code-completion-kind-member"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-code-completion-kind-member" names="class_scriptlanguageextension_constant_code_completion_kind_member"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>CODE_COMPLETION_KIND_MEMBER</strong> = <literal>4</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-code-completion-kind-enum"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-code-completion-kind-enum" names="class_scriptlanguageextension_constant_code_completion_kind_enum"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>CODE_COMPLETION_KIND_ENUM</strong> = <literal>5</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-code-completion-kind-constant"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-code-completion-kind-constant" names="class_scriptlanguageextension_constant_code_completion_kind_constant"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>CODE_COMPLETION_KIND_CONSTANT</strong> = <literal>6</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-code-completion-kind-node-path"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-code-completion-kind-node-path" names="class_scriptlanguageextension_constant_code_completion_kind_node_path"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>CODE_COMPLETION_KIND_NODE_PATH</strong> = <literal>7</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-code-completion-kind-file-path"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-code-completion-kind-file-path" names="class_scriptlanguageextension_constant_code_completion_kind_file_path"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>CODE_COMPLETION_KIND_FILE_PATH</strong> = <literal>8</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-code-completion-kind-plain-text"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-code-completion-kind-plain-text" names="class_scriptlanguageextension_constant_code_completion_kind_plain_text"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>CODE_COMPLETION_KIND_PLAIN_TEXT</strong> = <literal>9</literal></paragraph>
            <target refid="class-scriptlanguageextension-constant-code-completion-kind-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scriptlanguageextension-constant-code-completion-kind-max" names="class_scriptlanguageextension_constant_code_completion_kind_max"><reference internal="True" refid="enum-scriptlanguageextension-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>CODE_COMPLETION_KIND_MAX</strong> = <literal>10</literal></paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-scriptlanguageextension-private-method-add-global-constant"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-add-global-constant" names="class_scriptlanguageextension_private_method__add_global_constant">void <strong>_add_global_constant</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-add-named-global-constant"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-add-named-global-constant" names="class_scriptlanguageextension_private_method__add_named_global_constant">void <strong>_add_named_global_constant</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-auto-indent-code"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-auto-indent-code" names="class_scriptlanguageextension_private_method__auto_indent_code"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_auto_indent_code</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> code, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_line, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_line <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-can-inherit-from-file"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-can-inherit-from-file" names="class_scriptlanguageextension_private_method__can_inherit_from_file"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_can_inherit_from_file</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-complete-code"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-complete-code" names="class_scriptlanguageextension_private_method__complete_code"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_complete_code</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> code, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> owner <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-create-script"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-create-script" names="class_scriptlanguageextension_private_method__create_script"><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <strong>_create_script</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-debug-get-current-stack-info"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-debug-get-current-stack-info" names="class_scriptlanguageextension_private_method__debug_get_current_stack_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference> <strong>_debug_get_current_stack_info</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-debug-get-error"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-debug-get-error" names="class_scriptlanguageextension_private_method__debug_get_error"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_debug_get_error</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-debug-get-globals"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-debug-get-globals" names="class_scriptlanguageextension_private_method__debug_get_globals"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_debug_get_globals</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_subitems, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_depth <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-debug-get-stack-level-count"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-debug-get-stack-level-count" names="class_scriptlanguageextension_private_method__debug_get_stack_level_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_debug_get_stack_level_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-debug-get-stack-level-function"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-debug-get-stack-level-function" names="class_scriptlanguageextension_private_method__debug_get_stack_level_function"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_debug_get_stack_level_function</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-debug-get-stack-level-instance"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-debug-get-stack-level-instance" names="class_scriptlanguageextension_private_method__debug_get_stack_level_instance">void* <strong>_debug_get_stack_level_instance</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-debug-get-stack-level-line"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-debug-get-stack-level-line" names="class_scriptlanguageextension_private_method__debug_get_stack_level_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_debug_get_stack_level_line</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-debug-get-stack-level-locals"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-debug-get-stack-level-locals" names="class_scriptlanguageextension_private_method__debug_get_stack_level_locals"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_debug_get_stack_level_locals</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_subitems, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_depth <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-debug-get-stack-level-members"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-debug-get-stack-level-members" names="class_scriptlanguageextension_private_method__debug_get_stack_level_members"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_debug_get_stack_level_members</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_subitems, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_depth <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-debug-parse-stack-level-expression"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-debug-parse-stack-level-expression" names="class_scriptlanguageextension_private_method__debug_parse_stack_level_expression"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_debug_parse_stack_level_expression</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> expression, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_subitems, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_depth <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-find-function"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-find-function" names="class_scriptlanguageextension_private_method__find_function"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_find_function</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> class_name, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> function_name <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-finish"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-finish" names="class_scriptlanguageextension_private_method__finish">void <strong>_finish</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-frame"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-frame" names="class_scriptlanguageextension_private_method__frame">void <strong>_frame</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-built-in-templates"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-built-in-templates" names="class_scriptlanguageextension_private_method__get_built_in_templates"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference> <strong>_get_built_in_templates</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> object <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-comment-delimiters"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-comment-delimiters" names="class_scriptlanguageextension_private_method__get_comment_delimiters"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_comment_delimiters</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-doc-comment-delimiters"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-doc-comment-delimiters" names="class_scriptlanguageextension_private_method__get_doc_comment_delimiters"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_doc_comment_delimiters</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-extension"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-extension" names="class_scriptlanguageextension_private_method__get_extension"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_extension</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-global-class-name"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-global-class-name" names="class_scriptlanguageextension_private_method__get_global_class_name"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_get_global_class_name</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-name"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-name" names="class_scriptlanguageextension_private_method__get_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_name</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-public-annotations"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-public-annotations" names="class_scriptlanguageextension_private_method__get_public_annotations"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference> <strong>_get_public_annotations</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-public-constants"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-public-constants" names="class_scriptlanguageextension_private_method__get_public_constants"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_get_public_constants</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-public-functions"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-public-functions" names="class_scriptlanguageextension_private_method__get_public_functions"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference> <strong>_get_public_functions</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-recognized-extensions"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-recognized-extensions" names="class_scriptlanguageextension_private_method__get_recognized_extensions"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_recognized_extensions</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-reserved-words"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-reserved-words" names="class_scriptlanguageextension_private_method__get_reserved_words"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_reserved_words</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-string-delimiters"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-string-delimiters" names="class_scriptlanguageextension_private_method__get_string_delimiters"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_string_delimiters</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-get-type"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-get-type" names="class_scriptlanguageextension_private_method__get_type"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_type</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-handles-global-class-type"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-handles-global-class-type" names="class_scriptlanguageextension_private_method__handles_global_class_type"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_handles_global_class_type</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-has-named-classes"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-has-named-classes" names="class_scriptlanguageextension_private_method__has_named_classes"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_named_classes</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph><emphasis>已废弃。</emphasis>引擎不会调用这个方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-init"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-init" names="class_scriptlanguageextension_private_method__init">void <strong>_init</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-is-control-flow-keyword"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-is-control-flow-keyword" names="class_scriptlanguageextension_private_method__is_control_flow_keyword"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_control_flow_keyword</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> keyword <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-is-using-templates"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-is-using-templates" names="class_scriptlanguageextension_private_method__is_using_templates"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_using_templates</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-lookup-code"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-lookup-code" names="class_scriptlanguageextension_private_method__lookup_code"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_lookup_code</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> code, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> symbol, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> owner <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-make-function"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-make-function" names="class_scriptlanguageextension_private_method__make_function"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_make_function</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> class_name, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> function_name, <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> function_args <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-make-template"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-make-template" names="class_scriptlanguageextension_private_method__make_template"><reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference> <strong>_make_template</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> template, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> class_name, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> base_class_name <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-open-in-external-editor"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-open-in-external-editor" names="class_scriptlanguageextension_private_method__open_in_external_editor"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_open_in_external_editor</strong> <strong>(</strong> <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference> script, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> line, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-overrides-external-editor"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-overrides-external-editor" names="class_scriptlanguageextension_private_method__overrides_external_editor"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_overrides_external_editor</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-profiling-get-accumulated-data"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-profiling-get-accumulated-data" names="class_scriptlanguageextension_private_method__profiling_get_accumulated_data"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_profiling_get_accumulated_data</strong> <strong>(</strong> ScriptLanguageExtensionProfilingInfo* info_array, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> info_max <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-profiling-get-frame-data"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-profiling-get-frame-data" names="class_scriptlanguageextension_private_method__profiling_get_frame_data"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_profiling_get_frame_data</strong> <strong>(</strong> ScriptLanguageExtensionProfilingInfo* info_array, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> info_max <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-profiling-start"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-profiling-start" names="class_scriptlanguageextension_private_method__profiling_start">void <strong>_profiling_start</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-profiling-stop"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-profiling-stop" names="class_scriptlanguageextension_private_method__profiling_stop">void <strong>_profiling_stop</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-reload-all-scripts"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-reload-all-scripts" names="class_scriptlanguageextension_private_method__reload_all_scripts">void <strong>_reload_all_scripts</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-reload-tool-script"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-reload-tool-script" names="class_scriptlanguageextension_private_method__reload_tool_script">void <strong>_reload_tool_script</strong> <strong>(</strong> <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference> script, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> soft_reload <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-remove-named-global-constant"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-remove-named-global-constant" names="class_scriptlanguageextension_private_method__remove_named_global_constant">void <strong>_remove_named_global_constant</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-supports-builtin-mode"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-supports-builtin-mode" names="class_scriptlanguageextension_private_method__supports_builtin_mode"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_supports_builtin_mode</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-supports-documentation"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-supports-documentation" names="class_scriptlanguageextension_private_method__supports_documentation"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_supports_documentation</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-thread-enter"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-thread-enter" names="class_scriptlanguageextension_private_method__thread_enter">void <strong>_thread_enter</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-thread-exit"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-thread-exit" names="class_scriptlanguageextension_private_method__thread_exit">void <strong>_thread_exit</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-validate"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-validate" names="class_scriptlanguageextension_private_method__validate"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_validate</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> script, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> validate_functions, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> validate_errors, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> validate_warnings, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> validate_safe_lines <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptlanguageextension-private-method-validate-path"></target>
            <paragraph classes="classref-method" ids="class-scriptlanguageextension-private-method-validate-path" names="class_scriptlanguageextension_private_method__validate_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_validate_path</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
