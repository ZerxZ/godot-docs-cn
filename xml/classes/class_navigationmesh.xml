<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_navigationmesh.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/NavigationMesh.xml.</comment>
    <target refid="class-navigationmesh"></target>
    <section ids="navigationmesh class-navigationmesh" names="navigationmesh class_navigationmesh">
        <title>NavigationMesh</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于定义可达区域和障碍物的导航网格。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>导航网格是多边形的集合，用于定义环境中的哪些区域是可以穿越的，帮助代理在复杂的空间中寻路。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/navigation/navigation_using_navigationmeshes"><inline classes="doc">使用 NavigationMesh</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 导航网格演示" refuri="https://godotengine.org/asset-library/asset/124">3D 导航网格演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="69"></colspec>
                    <colspec colwidth="105"></colspec>
                    <colspec colwidth="37"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-agent-height"><inline classes="std std-ref">agent_height</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-agent-max-climb"><inline classes="std std-ref">agent_max_climb</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.25</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-agent-max-slope"><inline classes="std std-ref">agent_max_slope</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>45.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-agent-radius"><inline classes="std std-ref">agent_radius</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-cell-height"><inline classes="std std-ref">cell_height</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.25</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-cell-size"><inline classes="std std-ref">cell_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.25</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-detail-sample-distance"><inline classes="std std-ref">detail_sample_distance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>6.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-detail-sample-max-error"><inline classes="std std-ref">detail_sample_max_error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-edge-max-error"><inline classes="std std-ref">edge_max_error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-edge-max-length"><inline classes="std std-ref">edge_max_length</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-filter-baking-aabb"><inline classes="std std-ref">filter_baking_aabb</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>AABB(0, 0, 0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-filter-baking-aabb-offset"><inline classes="std std-ref">filter_baking_aabb_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-filter-ledge-spans"><inline classes="std std-ref">filter_ledge_spans</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-filter-low-hanging-obstacles"><inline classes="std std-ref">filter_low_hanging_obstacles</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-filter-walkable-low-height-spans"><inline classes="std std-ref">filter_walkable_low_height_spans</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-geometry-collision-mask"><inline classes="std std-ref">geometry_collision_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4294967295</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-navigationmesh-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-geometry-parsed-geometry-type"><inline classes="std std-ref">geometry_parsed_geometry_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-navigationmesh-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-geometry-source-geometry-mode"><inline classes="std std-ref">geometry_source_geometry_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-geometry-source-group-name"><inline classes="std std-ref">geometry_source_group_name</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>&amp;"navigation_mesh_source_group"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-region-merge-size"><inline classes="std std-ref">region_merge_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>20.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-region-min-size"><inline classes="std std-ref">region_min_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-navigationmesh-samplepartitiontype"><inline classes="std std-ref">SamplePartitionType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-sample-partition-type"><inline classes="std std-ref">sample_partition_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-property-vertices-per-polygon"><inline classes="std std-ref">vertices_per_polygon</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>6.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="165"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-method-add-polygon"><inline classes="std std-ref">add_polygon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> polygon <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-method-clear"><inline classes="std std-ref">clear</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-method-clear-polygons"><inline classes="std std-ref">clear_polygons</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-method-create-from-mesh"><inline classes="std std-ref">create_from_mesh</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> mesh <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-method-get-collision-mask-value"><inline classes="std std-ref">get_collision_mask_value</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer_number <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-method-get-polygon"><inline classes="std std-ref">get_polygon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-method-get-polygon-count"><inline classes="std std-ref">get_polygon_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-method-get-vertices"><inline classes="std std-ref">get_vertices</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-method-set-collision-mask-value"><inline classes="std std-ref">set_collision_mask_value</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer_number, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmesh-method-set-vertices"><inline classes="std std-ref">set_vertices</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> vertices <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-navigationmesh-samplepartitiontype"></target>
            <paragraph classes="classref-enumeration" ids="enum-navigationmesh-samplepartitiontype" names="enum_navigationmesh_samplepartitiontype">enum <strong>SamplePartitionType</strong>:</paragraph>
            <target refid="class-navigationmesh-constant-sample-partition-watershed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationmesh-constant-sample-partition-watershed" names="class_navigationmesh_constant_sample_partition_watershed"><reference internal="True" refid="enum-navigationmesh-samplepartitiontype"><inline classes="std std-ref">SamplePartitionType</inline></reference> <strong>SAMPLE_PARTITION_WATERSHED</strong> = <literal>0</literal></paragraph>
            <paragraph>分水岭分区。如果你预先计算导航网格，通常是最佳选择，如果你有大的开放区域，请使用它。</paragraph>
            <target refid="class-navigationmesh-constant-sample-partition-monotone"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationmesh-constant-sample-partition-monotone" names="class_navigationmesh_constant_sample_partition_monotone"><reference internal="True" refid="enum-navigationmesh-samplepartitiontype"><inline classes="std std-ref">SamplePartitionType</inline></reference> <strong>SAMPLE_PARTITION_MONOTONE</strong> = <literal>1</literal></paragraph>
            <paragraph>单调分区。如果你想要快速生成导航网格，请使用此选项。</paragraph>
            <target refid="class-navigationmesh-constant-sample-partition-layers"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationmesh-constant-sample-partition-layers" names="class_navigationmesh_constant_sample_partition_layers"><reference internal="True" refid="enum-navigationmesh-samplepartitiontype"><inline classes="std std-ref">SamplePartitionType</inline></reference> <strong>SAMPLE_PARTITION_LAYERS</strong> = <literal>2</literal></paragraph>
            <paragraph>层分区。用于具有中小型图块的平铺导航网格的不错选择。</paragraph>
            <target refid="class-navigationmesh-constant-sample-partition-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationmesh-constant-sample-partition-max" names="class_navigationmesh_constant_sample_partition_max"><reference internal="True" refid="enum-navigationmesh-samplepartitiontype"><inline classes="std std-ref">SamplePartitionType</inline></reference> <strong>SAMPLE_PARTITION_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-navigationmesh-samplepartitiontype"><inline classes="std std-ref">SamplePartitionType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-navigationmesh-parsedgeometrytype"></target>
            <paragraph classes="classref-enumeration" ids="enum-navigationmesh-parsedgeometrytype" names="enum_navigationmesh_parsedgeometrytype">enum <strong>ParsedGeometryType</strong>:</paragraph>
            <target refid="class-navigationmesh-constant-parsed-geometry-mesh-instances"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationmesh-constant-parsed-geometry-mesh-instances" names="class_navigationmesh_constant_parsed_geometry_mesh_instances"><reference internal="True" refid="enum-navigationmesh-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> <strong>PARSED_GEOMETRY_MESH_INSTANCES</strong> = <literal>0</literal></paragraph>
            <paragraph>将网格实例解析为几何体。包括 <reference internal="True" refuri="class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference>、<reference internal="True" refuri="class_csgshape3d#class-csgshape3d"><inline classes="std std-ref">CSGShape3D</inline></reference>、<reference internal="True" refuri="class_gridmap#class-gridmap"><inline classes="std std-ref">GridMap</inline></reference> 等节点。</paragraph>
            <target refid="class-navigationmesh-constant-parsed-geometry-static-colliders"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationmesh-constant-parsed-geometry-static-colliders" names="class_navigationmesh_constant_parsed_geometry_static_colliders"><reference internal="True" refid="enum-navigationmesh-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> <strong>PARSED_GEOMETRY_STATIC_COLLIDERS</strong> = <literal>1</literal></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_staticbody3d#class-staticbody3d"><inline classes="std std-ref">StaticBody3D</inline></reference> 碰撞器解析为几何体。碰撞器应在由 <reference internal="True" refid="class-navigationmesh-property-geometry-collision-mask"><inline classes="std std-ref">geometry_collision_mask</inline></reference> 指定的层中。</paragraph>
            <target refid="class-navigationmesh-constant-parsed-geometry-both"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationmesh-constant-parsed-geometry-both" names="class_navigationmesh_constant_parsed_geometry_both"><reference internal="True" refid="enum-navigationmesh-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> <strong>PARSED_GEOMETRY_BOTH</strong> = <literal>2</literal></paragraph>
            <paragraph><reference internal="True" refid="class-navigationmesh-constant-parsed-geometry-mesh-instances"><inline classes="std std-ref">PARSED_GEOMETRY_MESH_INSTANCES</inline></reference> 和 <reference internal="True" refid="class-navigationmesh-constant-parsed-geometry-static-colliders"><inline classes="std std-ref">PARSED_GEOMETRY_STATIC_COLLIDERS</inline></reference>.</paragraph>
            <target refid="class-navigationmesh-constant-parsed-geometry-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationmesh-constant-parsed-geometry-max" names="class_navigationmesh_constant_parsed_geometry_max"><reference internal="True" refid="enum-navigationmesh-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> <strong>PARSED_GEOMETRY_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-navigationmesh-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-navigationmesh-sourcegeometrymode"></target>
            <paragraph classes="classref-enumeration" ids="enum-navigationmesh-sourcegeometrymode" names="enum_navigationmesh_sourcegeometrymode">enum <strong>SourceGeometryMode</strong>:</paragraph>
            <target refid="class-navigationmesh-constant-source-geometry-root-node-children"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationmesh-constant-source-geometry-root-node-children" names="class_navigationmesh_constant_source_geometry_root_node_children"><reference internal="True" refid="enum-navigationmesh-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> <strong>SOURCE_GEOMETRY_ROOT_NODE_CHILDREN</strong> = <literal>0</literal></paragraph>
            <paragraph>在根节点的子节点中递归扫描几何体。</paragraph>
            <target refid="class-navigationmesh-constant-source-geometry-groups-with-children"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationmesh-constant-source-geometry-groups-with-children" names="class_navigationmesh_constant_source_geometry_groups_with_children"><reference internal="True" refid="enum-navigationmesh-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> <strong>SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN</strong> = <literal>1</literal></paragraph>
            <paragraph>以递归方式扫描组中的节点及其子节点以获取几何图形。该组由 <reference internal="True" refid="class-navigationmesh-property-geometry-source-group-name"><inline classes="std std-ref">geometry_source_group_name</inline></reference> 指定。</paragraph>
            <target refid="class-navigationmesh-constant-source-geometry-groups-explicit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationmesh-constant-source-geometry-groups-explicit" names="class_navigationmesh_constant_source_geometry_groups_explicit"><reference internal="True" refid="enum-navigationmesh-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> <strong>SOURCE_GEOMETRY_GROUPS_EXPLICIT</strong> = <literal>2</literal></paragraph>
            <paragraph>使用一个组中的节点进行几何运算。该组由 <reference internal="True" refid="class-navigationmesh-property-geometry-source-group-name"><inline classes="std std-ref">geometry_source_group_name</inline></reference> 指定。</paragraph>
            <target refid="class-navigationmesh-constant-source-geometry-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationmesh-constant-source-geometry-max" names="class_navigationmesh_constant_source_geometry_max"><reference internal="True" refid="enum-navigationmesh-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> <strong>SOURCE_GEOMETRY_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-navigationmesh-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-navigationmesh-property-agent-height"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-agent-height" names="class_navigationmesh_property_agent_height"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>agent_height</strong> = <literal>1.5</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_agent_height</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_agent_height</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>地板到天花板的最小高度，仍然允许被认为是可行走的地板。</paragraph>
            <paragraph><strong>注意：</strong>烘焙时，这个值会向上取整到最接近的 <reference internal="True" refid="class-navigationmesh-property-cell-height"><inline classes="std std-ref">cell_height</inline></reference> 的倍数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-agent-max-climb"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-agent-max-climb" names="class_navigationmesh_property_agent_max_climb"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>agent_max_climb</strong> = <literal>0.25</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_agent_max_climb</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_agent_max_climb</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>被认为仍可穿越的最小墙壁高度。</paragraph>
            <paragraph><strong>注意：</strong>烘焙时，该值将向下舍入到最接近的 <reference internal="True" refid="class-navigationmesh-property-cell-height"><inline classes="std std-ref">cell_height</inline></reference> 的倍数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-agent-max-slope"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-agent-max-slope" names="class_navigationmesh_property_agent_max_slope"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>agent_max_slope</strong> = <literal>45.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_agent_max_slope</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_agent_max_slope</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>认为可行走的最大坡度，单位是度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-agent-radius"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-agent-radius" names="class_navigationmesh_property_agent_radius"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>agent_radius</strong> = <literal>0.5</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_agent_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_agent_radius</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>侵蚀/缩小远离障碍物的高度场的可行走区域距离。</paragraph>
            <paragraph><strong>注意：</strong>烘焙时，这个值会向上取整到最接近的 <reference internal="True" refid="class-navigationmesh-property-cell-size"><inline classes="std std-ref">cell_size</inline></reference> 的倍数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-cell-height"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-cell-height" names="class_navigationmesh_property_cell_height"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>cell_height</strong> = <literal>0.25</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_cell_height</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_cell_height</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>单元格高度，用于将导航网格的顶点在 Y 轴上进行栅格化。必须与导航地图的单元格高度匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-cell-size"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-cell-size" names="class_navigationmesh_property_cell_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>cell_size</strong> = <literal>0.25</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_cell_size</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_cell_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>单元格大小，用于将导航网格的顶点在 XZ 平面上进行栅格化。必须与导航地图的单元格大小匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-detail-sample-distance"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-detail-sample-distance" names="class_navigationmesh_property_detail_sample_distance"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>detail_sample_distance</strong> = <literal>6.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_detail_sample_distance</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_detail_sample_distance</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>生成细分网格时使用的采样距离，以单元格为单位。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-detail-sample-max-error"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-detail-sample-max-error" names="class_navigationmesh_property_detail_sample_max_error"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>detail_sample_max_error</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_detail_sample_max_error</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_detail_sample_max_error</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>细节网格表面应偏离高度场的最大距离，以单元格为单位。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-edge-max-error"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-edge-max-error" names="class_navigationmesh_property_edge_max_error"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>edge_max_error</strong> = <literal>1.3</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_edge_max_error</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_edge_max_error</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>简化轮廓的边界边缘偏离原始轮廓的最大距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-edge-max-length"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-edge-max-length" names="class_navigationmesh_property_edge_max_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>edge_max_length</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_edge_max_length</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_edge_max_length</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>沿网格边界的轮廓的最大允许长度。值为 <literal>0.0</literal> 将禁用该功能。</paragraph>
            <paragraph><strong>注意：</strong>烘焙时，这个值会向上取整到最接近的 <reference internal="True" refid="class-navigationmesh-property-cell-size"><inline classes="std std-ref">cell_size</inline></reference> 的倍数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-filter-baking-aabb"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-filter-baking-aabb" names="class_navigationmesh_property_filter_baking_aabb"><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>filter_baking_aabb</strong> = <literal>AABB(0, 0, 0, 0, 0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_filter_baking_aabb</strong> <strong>(</strong> <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>get_filter_baking_aabb</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果烘焙 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> 存在体积，对该导航网格的烘焙会被限制在其内部区域中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-filter-baking-aabb-offset"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-filter-baking-aabb-offset" names="class_navigationmesh_property_filter_baking_aabb_offset"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>filter_baking_aabb_offset</strong> = <literal>Vector3(0, 0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_filter_baking_aabb_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_filter_baking_aabb_offset</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>应用于 <reference internal="True" refid="class-navigationmesh-property-filter-baking-aabb"><inline classes="std std-ref">filter_baking_aabb</inline></reference> <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> 的位置偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-filter-ledge-spans"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-filter-ledge-spans" names="class_navigationmesh_property_filter_ledge_spans"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>filter_ledge_spans</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_filter_ledge_spans</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_filter_ledge_spans</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则标记边缘间的跨度为不可行走。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-filter-low-hanging-obstacles"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-filter-low-hanging-obstacles" names="class_navigationmesh_property_filter_low_hanging_obstacles"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>filter_low_hanging_obstacles</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_filter_low_hanging_obstacles</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_filter_low_hanging_obstacles</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，如果它们的最大值在可行走邻域的 <reference internal="True" refid="class-navigationmesh-property-agent-max-climb"><inline classes="std std-ref">agent_max_climb</inline></reference> 内，则将不可行走范围标记为可行走。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-filter-walkable-low-height-spans"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-filter-walkable-low-height-spans" names="class_navigationmesh_property_filter_walkable_low_height_spans"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>filter_walkable_low_height_spans</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_filter_walkable_low_height_spans</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_filter_walkable_low_height_spans</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，如果跨度上方的间隙小于 <reference internal="True" refid="class-navigationmesh-property-agent-height"><inline classes="std std-ref">agent_height</inline></reference>，则将可行走范围标记为不可行走。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-geometry-collision-mask"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-geometry-collision-mask" names="class_navigationmesh_property_geometry_collision_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>geometry_collision_mask</strong> = <literal>4294967295</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_collision_mask</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_collision_mask</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于扫描静态碰撞的物理层。</paragraph>
            <paragraph>仅在 <reference internal="True" refid="class-navigationmesh-property-geometry-parsed-geometry-type"><inline classes="std std-ref">geometry_parsed_geometry_type</inline></reference> 是 <reference internal="True" refid="class-navigationmesh-constant-parsed-geometry-static-colliders"><inline classes="std std-ref">PARSED_GEOMETRY_STATIC_COLLIDERS</inline></reference> 或 <reference internal="True" refid="class-navigationmesh-constant-parsed-geometry-both"><inline classes="std std-ref">PARSED_GEOMETRY_BOTH</inline></reference> 时才使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-geometry-parsed-geometry-type"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-geometry-parsed-geometry-type" names="class_navigationmesh_property_geometry_parsed_geometry_type"><reference internal="True" refid="enum-navigationmesh-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> <strong>geometry_parsed_geometry_type</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_parsed_geometry_type</strong> <strong>(</strong> <reference internal="True" refid="enum-navigationmesh-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-navigationmesh-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> <strong>get_parsed_geometry_type</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>决定哪种类型的节点可解析为几何图形。可能的取值见 <reference internal="True" refid="enum-navigationmesh-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-geometry-source-geometry-mode"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-geometry-source-geometry-mode" names="class_navigationmesh_property_geometry_source_geometry_mode"><reference internal="True" refid="enum-navigationmesh-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> <strong>geometry_source_geometry_mode</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_source_geometry_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-navigationmesh-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-navigationmesh-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> <strong>get_source_geometry_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>烘焙时使用的几何体的来源。可能的取值见 <reference internal="True" refid="enum-navigationmesh-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-geometry-source-group-name"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-geometry-source-group-name" names="class_navigationmesh_property_geometry_source_group_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>geometry_source_group_name</strong> = <literal>&amp;"navigation_mesh_source_group"</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_source_group_name</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_source_group_name</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>分组的名称，会在该分组中扫描几何体。</paragraph>
            <paragraph>只有当 <reference internal="True" refid="class-navigationmesh-property-geometry-source-geometry-mode"><inline classes="std std-ref">geometry_source_geometry_mode</inline></reference> 是 <reference internal="True" refid="class-navigationmesh-constant-source-geometry-groups-with-children"><inline classes="std std-ref">SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN</inline></reference> 或 <reference internal="True" refid="class-navigationmesh-constant-source-geometry-groups-explicit"><inline classes="std std-ref">SOURCE_GEOMETRY_GROUPS_EXPLICIT</inline></reference> 时才使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-region-merge-size"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-region-merge-size" names="class_navigationmesh_property_region_merge_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>region_merge_size</strong> = <literal>20.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_region_merge_size</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_region_merge_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果可能的话，任何小于这个尺寸的区域将与较大的区域合并。</paragraph>
            <paragraph><strong>注意：</strong>这个值将被平方来计算单元格的数量。例如，值为 20 时将把单元格的数量设为 400。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-region-min-size"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-region-min-size" names="class_navigationmesh_property_region_min_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>region_min_size</strong> = <literal>2.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_region_min_size</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_region_min_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>区域被创建所需的最小尺寸。</paragraph>
            <paragraph><strong>注意：</strong>该值将被平方，以计算出允许形成孤岛区域的最小单元数。例如，值为 8 时将把单元格的数量设为 64。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-sample-partition-type"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-sample-partition-type" names="class_navigationmesh_property_sample_partition_type"><reference internal="True" refid="enum-navigationmesh-samplepartitiontype"><inline classes="std std-ref">SamplePartitionType</inline></reference> <strong>sample_partition_type</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_sample_partition_type</strong> <strong>(</strong> <reference internal="True" refid="enum-navigationmesh-samplepartitiontype"><inline classes="std std-ref">SamplePartitionType</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-navigationmesh-samplepartitiontype"><inline classes="std std-ref">SamplePartitionType</inline></reference> <strong>get_sample_partition_type</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>创建导航网格多边形单元的分割算法。可能的取值见 <reference internal="True" refid="enum-navigationmesh-samplepartitiontype"><inline classes="std std-ref">SamplePartitionType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-property-vertices-per-polygon"></target>
            <paragraph classes="classref-property" ids="class-navigationmesh-property-vertices-per-polygon" names="class_navigationmesh_property_vertices_per_polygon"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>vertices_per_polygon</strong> = <literal>6.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_vertices_per_polygon</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_vertices_per_polygon</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在轮廓到多边形转换过程中生成的多边形允许的最大顶点数。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-navigationmesh-method-add-polygon"></target>
            <paragraph classes="classref-method" ids="class-navigationmesh-method-add-polygon" names="class_navigationmesh_method_add_polygon">void <strong>add_polygon</strong> <strong>(</strong> <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> polygon <strong>)</strong></paragraph>
            <paragraph>使用调用 <reference internal="True" refid="class-navigationmesh-method-get-vertices"><inline classes="std std-ref">get_vertices</inline></reference> 得到的顶点的索引添加一个多边形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-method-clear"></target>
            <paragraph classes="classref-method" ids="class-navigationmesh-method-clear" names="class_navigationmesh_method_clear">void <strong>clear</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>清除顶点和多边形索引的内部数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-method-clear-polygons"></target>
            <paragraph classes="classref-method" ids="class-navigationmesh-method-clear-polygons" names="class_navigationmesh_method_clear_polygons">void <strong>clear_polygons</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>清除多边形数组，但不清除顶点数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-method-create-from-mesh"></target>
            <paragraph classes="classref-method" ids="class-navigationmesh-method-create-from-mesh" names="class_navigationmesh_method_create_from_mesh">void <strong>create_from_mesh</strong> <strong>(</strong> <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> mesh <strong>)</strong></paragraph>
            <paragraph>通过根据 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 设置顶点和索引来初始化导航网格。</paragraph>
            <paragraph><strong>注意：</strong>给定的 <literal>mesh</literal> 必须是 <reference internal="True" refuri="class_mesh#class-mesh-constant-primitive-triangles"><inline classes="std std-ref">Mesh.PRIMITIVE_TRIANGLES</inline></reference> 类型，并且有一个索引数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-method-get-collision-mask-value"></target>
            <paragraph classes="classref-method" ids="class-navigationmesh-method-get-collision-mask-value" names="class_navigationmesh_method_get_collision_mask_value"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_collision_mask_value</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer_number <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回是否启用了 <reference internal="True" refid="class-navigationmesh-property-geometry-collision-mask"><inline classes="std std-ref">geometry_collision_mask</inline></reference> 中的指定层，给定的 <literal>layer_number</literal> 在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-method-get-polygon"></target>
            <paragraph classes="classref-method" ids="class-navigationmesh-method-get-polygon" names="class_navigationmesh_method_get_polygon"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_polygon</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong></paragraph>
            <paragraph>返回创建多边形的顶点索引，形式为 <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-method-get-polygon-count"></target>
            <paragraph classes="classref-method" ids="class-navigationmesh-method-get-polygon-count" names="class_navigationmesh_method_get_polygon_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_polygon_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回导航网格中的多边形数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-method-get-vertices"></target>
            <paragraph classes="classref-method" ids="class-navigationmesh-method-get-vertices" names="class_navigationmesh_method_get_vertices"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>get_vertices</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回用于创建该多边形的所有顶点，形式为 <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-method-set-collision-mask-value"></target>
            <paragraph classes="classref-method" ids="class-navigationmesh-method-set-collision-mask-value" names="class_navigationmesh_method_set_collision_mask_value">void <strong>set_collision_mask_value</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer_number, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>根据 <literal>value</literal> 启用或禁用 <reference internal="True" refid="class-navigationmesh-property-geometry-collision-mask"><inline classes="std std-ref">geometry_collision_mask</inline></reference> 中的指定层，给定的 <literal>layer_number</literal> 在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmesh-method-set-vertices"></target>
            <paragraph classes="classref-method" ids="class-navigationmesh-method-set-vertices" names="class_navigationmesh_method_set_vertices">void <strong>set_vertices</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> vertices <strong>)</strong></paragraph>
            <paragraph>设置顶点，可以使用 <reference internal="True" refid="class-navigationmesh-method-add-polygon"><inline classes="std std-ref">add_polygon</inline></reference> 方法对其进行索引，创建多边形。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
