<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_codeedit.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/CodeEdit.xml.</comment>
    <target refid="class-codeedit"></target>
    <section ids="codeedit class-codeedit" names="codeedit class_codeedit">
        <title>CodeEdit</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>多行文本编辑器，针对编辑代码而设计。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>CodeEdit 是一种专门用于编辑纯文本代码文件的 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference>。它包含了许多代码编辑器中的常见功能，如行号、折行、代码补全、缩进管理以及字符串/注释管理。</paragraph>
            <paragraph><strong>注意：</strong>无论使用什么区域设置，<strong>CodeEdit</strong> 默认总是使用从左至右的文本方向来正确显示源代码。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="58"></colspec>
                    <colspec colwidth="115"></colspec>
                    <colspec colwidth="75"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-auto-brace-completion-enabled"><inline classes="std std-ref">auto_brace_completion_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-auto-brace-completion-highlight-matching"><inline classes="std std-ref">auto_brace_completion_highlight_matching</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-auto-brace-completion-pairs"><inline classes="std std-ref">auto_brace_completion_pairs</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>{ "\"": "\"", "'": "'", "(": ")", "[": "]", "{": "}" }</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-code-completion-enabled"><inline classes="std std-ref">code_completion_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-code-completion-prefixes"><inline classes="std std-ref">code_completion_prefixes</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-delimiter-comments"><inline classes="std std-ref">delimiter_comments</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-delimiter-strings"><inline classes="std std-ref">delimiter_strings</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>["' '", "\" \""]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-gutters-draw-bookmarks"><inline classes="std std-ref">gutters_draw_bookmarks</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-gutters-draw-breakpoints-gutter"><inline classes="std std-ref">gutters_draw_breakpoints_gutter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-gutters-draw-executing-lines"><inline classes="std std-ref">gutters_draw_executing_lines</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-gutters-draw-fold-gutter"><inline classes="std std-ref">gutters_draw_fold_gutter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-gutters-draw-line-numbers"><inline classes="std std-ref">gutters_draw_line_numbers</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-gutters-zero-pad-line-numbers"><inline classes="std std-ref">gutters_zero_pad_line_numbers</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-indent-automatic"><inline classes="std std-ref">indent_automatic</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-indent-automatic-prefixes"><inline classes="std std-ref">indent_automatic_prefixes</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[":", "{", "[", "("]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-indent-size"><inline classes="std std-ref">indent_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-indent-use-spaces"><inline classes="std std-ref">indent_use_spaces</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>layout_direction</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-layout-direction"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-line-folding"><inline classes="std std-ref">line_folding</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-line-length-guidelines"><inline classes="std std-ref">line_length_guidelines</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-property-symbol-lookup-on-click"><inline classes="std std-ref">symbol_lookup_on_click</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>text_direction</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal> (overrides <reference internal="True" refuri="class_textedit#class-textedit-property-text-direction"><inline classes="std std-ref">TextEdit</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="440"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-private-method-confirm-code-completion"><inline classes="std std-ref">_confirm_code_completion</inline></reference>(replace: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-private-method-filter-code-completion-candidates"><inline classes="std std-ref">_filter_code_completion_candidates</inline></reference>(candidates: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-private-method-request-code-completion"><inline classes="std std-ref">_request_code_completion</inline></reference>(force: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-add-auto-brace-completion-pair"><inline classes="std std-ref">add_auto_brace_completion_pair</inline></reference>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, end_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-add-code-completion-option"><inline classes="std std-ref">add_code_completion_option</inline></reference>(type: <reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference>, display_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, insert_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, text_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), icon: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> = null, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, location: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1024)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-add-comment-delimiter"><inline classes="std std-ref">add_comment_delimiter</inline></reference>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, end_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, line_only: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-add-string-delimiter"><inline classes="std std-ref">add_string_delimiter</inline></reference>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, end_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, line_only: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-can-fold-line"><inline classes="std std-ref">can_fold_line</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-cancel-code-completion"><inline classes="std std-ref">cancel_code_completion</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-clear-bookmarked-lines"><inline classes="std std-ref">clear_bookmarked_lines</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-clear-breakpointed-lines"><inline classes="std std-ref">clear_breakpointed_lines</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-clear-comment-delimiters"><inline classes="std std-ref">clear_comment_delimiters</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-clear-executing-lines"><inline classes="std std-ref">clear_executing_lines</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-clear-string-delimiters"><inline classes="std std-ref">clear_string_delimiters</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-confirm-code-completion"><inline classes="std std-ref">confirm_code_completion</inline></reference>(replace: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-convert-indent"><inline classes="std std-ref">convert_indent</inline></reference>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-create-code-region"><inline classes="std std-ref">create_code_region</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-delete-lines"><inline classes="std std-ref">delete_lines</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-do-indent"><inline classes="std std-ref">do_indent</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-duplicate-lines"><inline classes="std std-ref">duplicate_lines</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-duplicate-selection"><inline classes="std std-ref">duplicate_selection</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-fold-all-lines"><inline classes="std std-ref">fold_all_lines</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-fold-line"><inline classes="std std-ref">fold_line</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-auto-brace-completion-close-key"><inline classes="std std-ref">get_auto_brace_completion_close_key</inline></reference>(open_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-bookmarked-lines"><inline classes="std std-ref">get_bookmarked_lines</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-breakpointed-lines"><inline classes="std std-ref">get_breakpointed_lines</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-code-completion-option"><inline classes="std std-ref">get_code_completion_option</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-code-completion-options"><inline classes="std std-ref">get_code_completion_options</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-code-completion-selected-index"><inline classes="std std-ref">get_code_completion_selected_index</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-code-region-end-tag"><inline classes="std std-ref">get_code_region_end_tag</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-code-region-start-tag"><inline classes="std std-ref">get_code_region_start_tag</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-delimiter-end-key"><inline classes="std std-ref">get_delimiter_end_key</inline></reference>(delimiter_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-delimiter-end-position"><inline classes="std std-ref">get_delimiter_end_position</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-delimiter-start-key"><inline classes="std std-ref">get_delimiter_start_key</inline></reference>(delimiter_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-delimiter-start-position"><inline classes="std std-ref">get_delimiter_start_position</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-executing-lines"><inline classes="std std-ref">get_executing_lines</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-folded-lines"><inline classes="std std-ref">get_folded_lines</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-text-for-code-completion"><inline classes="std std-ref">get_text_for_code_completion</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-text-for-symbol-lookup"><inline classes="std std-ref">get_text_for_symbol_lookup</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-get-text-with-cursor-char"><inline classes="std std-ref">get_text_with_cursor_char</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-has-auto-brace-completion-close-key"><inline classes="std std-ref">has_auto_brace_completion_close_key</inline></reference>(close_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-has-auto-brace-completion-open-key"><inline classes="std std-ref">has_auto_brace_completion_open_key</inline></reference>(open_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-has-comment-delimiter"><inline classes="std std-ref">has_comment_delimiter</inline></reference>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-has-string-delimiter"><inline classes="std std-ref">has_string_delimiter</inline></reference>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-indent-lines"><inline classes="std std-ref">indent_lines</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-is-in-comment"><inline classes="std std-ref">is_in_comment</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-is-in-string"><inline classes="std std-ref">is_in_string</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-is-line-bookmarked"><inline classes="std std-ref">is_line_bookmarked</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-is-line-breakpointed"><inline classes="std std-ref">is_line_breakpointed</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-is-line-code-region-end"><inline classes="std std-ref">is_line_code_region_end</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-is-line-code-region-start"><inline classes="std std-ref">is_line_code_region_start</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-is-line-executing"><inline classes="std std-ref">is_line_executing</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-is-line-folded"><inline classes="std std-ref">is_line_folded</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-move-lines-down"><inline classes="std std-ref">move_lines_down</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-move-lines-up"><inline classes="std std-ref">move_lines_up</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-remove-comment-delimiter"><inline classes="std std-ref">remove_comment_delimiter</inline></reference>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-remove-string-delimiter"><inline classes="std std-ref">remove_string_delimiter</inline></reference>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-request-code-completion"><inline classes="std std-ref">request_code_completion</inline></reference>(force: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-set-code-completion-selected-index"><inline classes="std std-ref">set_code_completion_selected_index</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-set-code-hint"><inline classes="std std-ref">set_code_hint</inline></reference>(code_hint: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-set-code-hint-draw-below"><inline classes="std std-ref">set_code_hint_draw_below</inline></reference>(draw_below: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-set-code-region-tags"><inline classes="std std-ref">set_code_region_tags</inline></reference>(start: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "region", end: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "endregion")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-set-line-as-bookmarked"><inline classes="std std-ref">set_line_as_bookmarked</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bookmarked: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-set-line-as-breakpoint"><inline classes="std std-ref">set_line_as_breakpoint</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, breakpointed: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-set-line-as-executing"><inline classes="std std-ref">set_line_as_executing</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, executing: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-set-symbol-lookup-word-as-valid"><inline classes="std std-ref">set_symbol_lookup_word_as_valid</inline></reference>(valid: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-toggle-foldable-line"><inline classes="std std-ref">toggle_foldable_line</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-toggle-foldable-lines-at-carets"><inline classes="std std-ref">toggle_foldable_lines_at_carets</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-unfold-all-lines"><inline classes="std std-ref">unfold_all_lines</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-unfold-line"><inline classes="std std-ref">unfold_line</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-unindent-lines"><inline classes="std std-ref">unindent_lines</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-method-update-code-completion-options"><inline classes="std std-ref">update_code_completion_options</inline></reference>(force: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="主题属性">
            <title>主题属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="100"></colspec>
                    <colspec colwidth="35"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-bookmark-color"><inline classes="std std-ref">bookmark_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.5, 0.64, 1, 0.8)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-brace-mismatch-color"><inline classes="std std-ref">brace_mismatch_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 0.2, 0.2, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-breakpoint-color"><inline classes="std std-ref">breakpoint_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.9, 0.29, 0.3, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-code-folding-color"><inline classes="std std-ref">code_folding_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.8, 0.8, 0.8, 0.8)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-completion-background-color"><inline classes="std std-ref">completion_background_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.17, 0.16, 0.2, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-completion-existing-color"><inline classes="std std-ref">completion_existing_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.87, 0.87, 0.87, 0.13)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-completion-scroll-color"><inline classes="std std-ref">completion_scroll_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 0.29)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-completion-scroll-hovered-color"><inline classes="std std-ref">completion_scroll_hovered_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 0.4)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-completion-selected-color"><inline classes="std std-ref">completion_selected_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.26, 0.26, 0.27, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-executing-line-color"><inline classes="std std-ref">executing_line_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.98, 0.89, 0.27, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-folded-code-region-color"><inline classes="std std-ref">folded_code_region_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.68, 0.46, 0.77, 0.2)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-line-length-guideline-color"><inline classes="std std-ref">line_length_guideline_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.3, 0.5, 0.8, 0.1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-color-line-number-color"><inline classes="std std-ref">line_number_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.67, 0.67, 0.67, 0.4)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-constant-completion-lines"><inline classes="std std-ref">completion_lines</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>7</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-constant-completion-max-width"><inline classes="std std-ref">completion_max_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>50</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-constant-completion-scroll-width"><inline classes="std std-ref">completion_scroll_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>6</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-icon-bookmark"><inline classes="std std-ref">bookmark</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-icon-breakpoint"><inline classes="std std-ref">breakpoint</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-icon-can-fold"><inline classes="std std-ref">can_fold</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-icon-can-fold-code-region"><inline classes="std std-ref">can_fold_code_region</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-icon-executing-line"><inline classes="std std-ref">executing_line</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-icon-folded"><inline classes="std std-ref">folded</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-icon-folded-code-region"><inline classes="std std-ref">folded_code_region</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-icon-folded-eol-icon"><inline classes="std std-ref">folded_eol_icon</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codeedit-theme-style-completion"><inline classes="std std-ref">completion</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-codeedit-signal-breakpoint-toggled"></target>
            <paragraph classes="classref-signal" ids="class-codeedit-signal-breakpoint-toggled" names="class_codeedit_signal_breakpoint_toggled"><strong>breakpoint_toggled</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-codeedit-signal-breakpoint-toggled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在行中添加或移除断点时触发。如果该行通过退格键移动，则在旧行处触发一个移除的信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-signal-code-completion-requested"></target>
            <paragraph classes="classref-signal" ids="class-codeedit-signal-code-completion-requested" names="class_codeedit_signal_code_completion_requested"><strong>code_completion_requested</strong>() <reference internal="True" refid="class-codeedit-signal-code-completion-requested"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户请求代码补全时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-signal-symbol-lookup"></target>
            <paragraph classes="classref-signal" ids="class-codeedit-signal-symbol-lookup" names="class_codeedit_signal_symbol_lookup"><strong>symbol_lookup</strong>(symbol: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-codeedit-signal-symbol-lookup"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用户点击有效符号时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-signal-symbol-validate"></target>
            <paragraph classes="classref-signal" ids="class-codeedit-signal-symbol-validate" names="class_codeedit_signal_symbol_validate"><strong>symbol_validate</strong>(symbol: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-codeedit-signal-symbol-validate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用户将鼠标悬停在符号上时发出。应该通过调用 <reference internal="True" refid="class-codeedit-method-set-symbol-lookup-word-as-valid"><inline classes="std std-ref">set_symbol_lookup_word_as_valid</inline></reference> 对该符号进行验证和响应。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-codeedit-codecompletionkind"></target>
            <paragraph classes="classref-enumeration" ids="enum-codeedit-codecompletionkind" names="enum_codeedit_codecompletionkind">enum <strong>CodeCompletionKind</strong>: <reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-codeedit-constant-kind-class"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-kind-class" names="class_codeedit_constant_kind_class"><reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>KIND_CLASS</strong> = <literal>0</literal></paragraph>
            <paragraph>将该选项标记为类。</paragraph>
            <target refid="class-codeedit-constant-kind-function"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-kind-function" names="class_codeedit_constant_kind_function"><reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>KIND_FUNCTION</strong> = <literal>1</literal></paragraph>
            <paragraph>将该选项标记为函数。</paragraph>
            <target refid="class-codeedit-constant-kind-signal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-kind-signal" names="class_codeedit_constant_kind_signal"><reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>KIND_SIGNAL</strong> = <literal>2</literal></paragraph>
            <paragraph>将该选项标记为 Godot 信号。</paragraph>
            <target refid="class-codeedit-constant-kind-variable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-kind-variable" names="class_codeedit_constant_kind_variable"><reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>KIND_VARIABLE</strong> = <literal>3</literal></paragraph>
            <paragraph>将该选项标记为变量。</paragraph>
            <target refid="class-codeedit-constant-kind-member"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-kind-member" names="class_codeedit_constant_kind_member"><reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>KIND_MEMBER</strong> = <literal>4</literal></paragraph>
            <paragraph>将该选项标记为成员。</paragraph>
            <target refid="class-codeedit-constant-kind-enum"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-kind-enum" names="class_codeedit_constant_kind_enum"><reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>KIND_ENUM</strong> = <literal>5</literal></paragraph>
            <paragraph>将该选项标记为枚举条目。</paragraph>
            <target refid="class-codeedit-constant-kind-constant"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-kind-constant" names="class_codeedit_constant_kind_constant"><reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>KIND_CONSTANT</strong> = <literal>6</literal></paragraph>
            <paragraph>将该选项标记为常量。</paragraph>
            <target refid="class-codeedit-constant-kind-node-path"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-kind-node-path" names="class_codeedit_constant_kind_node_path"><reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>KIND_NODE_PATH</strong> = <literal>7</literal></paragraph>
            <paragraph>将该选项标记为 Godot 节点路径。</paragraph>
            <target refid="class-codeedit-constant-kind-file-path"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-kind-file-path" names="class_codeedit_constant_kind_file_path"><reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>KIND_FILE_PATH</strong> = <literal>8</literal></paragraph>
            <paragraph>将该选项标记为文件路径。</paragraph>
            <target refid="class-codeedit-constant-kind-plain-text"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-kind-plain-text" names="class_codeedit_constant_kind_plain_text"><reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference> <strong>KIND_PLAIN_TEXT</strong> = <literal>9</literal></paragraph>
            <paragraph>将该选项标记为未分类或纯文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-codeedit-codecompletionlocation"></target>
            <paragraph classes="classref-enumeration" ids="enum-codeedit-codecompletionlocation" names="enum_codeedit_codecompletionlocation">enum <strong>CodeCompletionLocation</strong>: <reference internal="True" refid="enum-codeedit-codecompletionlocation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-codeedit-constant-location-local"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-location-local" names="class_codeedit_constant_location_local"><reference internal="True" refid="enum-codeedit-codecompletionlocation"><inline classes="std std-ref">CodeCompletionLocation</inline></reference> <strong>LOCATION_LOCAL</strong> = <literal>0</literal></paragraph>
            <paragraph>该选项是相对于代码补全查询位置的 - 例如局部变量。位置的后续值表示选项来自外部类，确切的值表示它们的距离（就内部类而言）。</paragraph>
            <target refid="class-codeedit-constant-location-parent-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-location-parent-mask" names="class_codeedit_constant_location_parent_mask"><reference internal="True" refid="enum-codeedit-codecompletionlocation"><inline classes="std std-ref">CodeCompletionLocation</inline></reference> <strong>LOCATION_PARENT_MASK</strong> = <literal>256</literal></paragraph>
            <paragraph>该选项来自于所在的类或父类，相对于代码补全查询的位置。请使用类的深度进行按位 OR（或）运算（例如 <literal>0</literal> 表示当前类，<literal>1</literal> 表示父类，<literal>2</literal> 表示父类的父类等），从而在当前类或父类中存储选项的深度。</paragraph>
            <target refid="class-codeedit-constant-location-other-user-code"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-location-other-user-code" names="class_codeedit_constant_location_other_user_code"><reference internal="True" refid="enum-codeedit-codecompletionlocation"><inline classes="std std-ref">CodeCompletionLocation</inline></reference> <strong>LOCATION_OTHER_USER_CODE</strong> = <literal>512</literal></paragraph>
            <paragraph>该选项来自用户代码，不是局部，也不是派生类（例如自动加载单例）。</paragraph>
            <target refid="class-codeedit-constant-location-other"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-codeedit-constant-location-other" names="class_codeedit_constant_location_other"><reference internal="True" refid="enum-codeedit-codecompletionlocation"><inline classes="std std-ref">CodeCompletionLocation</inline></reference> <strong>LOCATION_OTHER</strong> = <literal>1024</literal></paragraph>
            <paragraph>该选项来自其他引擎代码，未被其他枚举常量覆盖 - 例如内置类。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-codeedit-property-auto-brace-completion-enabled"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-auto-brace-completion-enabled" names="class_codeedit_property_auto_brace_completion_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>auto_brace_completion_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-auto-brace-completion-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_auto_brace_completion_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_auto_brace_completion_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置括号对是否应自动补全。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-auto-brace-completion-highlight-matching"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-auto-brace-completion-highlight-matching" names="class_codeedit_property_auto_brace_completion_highlight_matching"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>auto_brace_completion_highlight_matching</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-auto-brace-completion-highlight-matching"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_highlight_matching_braces_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_highlight_matching_braces_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>高亮不匹配的括号对。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-auto-brace-completion-pairs"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-auto-brace-completion-pairs" names="class_codeedit_property_auto_brace_completion_pairs"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>auto_brace_completion_pairs</strong> = <literal>{ "\"": "\"", "'": "'", "(": ")", "[": "]", "{": "}" }</literal> <reference internal="True" refid="class-codeedit-property-auto-brace-completion-pairs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_auto_brace_completion_pairs</strong>(value: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_auto_brace_completion_pairs</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将括号对设置为自动补全。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-code-completion-enabled"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-code-completion-enabled" names="class_codeedit_property_code_completion_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>code_completion_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-code-completion-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_code_completion_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_code_completion_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置是否允许代码补全。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-code-completion-prefixes"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-code-completion-prefixes" names="class_codeedit_property_code_completion_prefixes"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] <strong>code_completion_prefixes</strong> = <literal>[]</literal> <reference internal="True" refid="class-codeedit-property-code-completion-prefixes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_code_completion_prefixes</strong>(value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] <strong>get_code_completion_prefixes</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置将触发代码补全的前缀。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-delimiter-comments"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-delimiter-comments" names="class_codeedit_property_delimiter_comments"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] <strong>delimiter_comments</strong> = <literal>[]</literal> <reference internal="True" refid="class-codeedit-property-delimiter-comments"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_comment_delimiters</strong>(value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] <strong>get_comment_delimiters</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置注释分隔符。将删除所有的现有注释分隔符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-delimiter-strings"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-delimiter-strings" names="class_codeedit_property_delimiter_strings"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] <strong>delimiter_strings</strong> = <literal>["' '", "\" \""]</literal> <reference internal="True" refid="class-codeedit-property-delimiter-strings"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_string_delimiters</strong>(value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] <strong>get_string_delimiters</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置字符串分隔符。将删除所有的现有字符串分隔符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-gutters-draw-bookmarks"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-gutters-draw-bookmarks" names="class_codeedit_property_gutters_draw_bookmarks"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>gutters_draw_bookmarks</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-gutters-draw-bookmarks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_bookmarks_gutter</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drawing_bookmarks_gutter</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置是否应在边栏中绘制书签。该边栏与断点和执行行共享。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-gutters-draw-breakpoints-gutter"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-gutters-draw-breakpoints-gutter" names="class_codeedit_property_gutters_draw_breakpoints_gutter"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>gutters_draw_breakpoints_gutter</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-gutters-draw-breakpoints-gutter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_breakpoints_gutter</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drawing_breakpoints_gutter</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置是否应在边栏中绘制断点。该边栏与书签和执行行共享。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-gutters-draw-executing-lines"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-gutters-draw-executing-lines" names="class_codeedit_property_gutters_draw_executing_lines"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>gutters_draw_executing_lines</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-gutters-draw-executing-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_executing_lines_gutter</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drawing_executing_lines_gutter</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置是否应在边栏中绘制执行行。该边栏与断点和书签共享。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-gutters-draw-fold-gutter"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-gutters-draw-fold-gutter" names="class_codeedit_property_gutters_draw_fold_gutter"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>gutters_draw_fold_gutter</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-gutters-draw-fold-gutter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_fold_gutter</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drawing_fold_gutter</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置是否应在装订线中绘制可折叠行图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-gutters-draw-line-numbers"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-gutters-draw-line-numbers" names="class_codeedit_property_gutters_draw_line_numbers"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>gutters_draw_line_numbers</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-gutters-draw-line-numbers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_line_numbers</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_draw_line_numbers_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置是否应在装订线中绘制行号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-gutters-zero-pad-line-numbers"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-gutters-zero-pad-line-numbers" names="class_codeedit_property_gutters_zero_pad_line_numbers"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>gutters_zero_pad_line_numbers</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-gutters-zero-pad-line-numbers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_numbers_zero_padded</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_line_numbers_zero_padded</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置在装订线中绘制的行号是否填充零。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-indent-automatic"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-indent-automatic" names="class_codeedit_property_indent_automatic"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>indent_automatic</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-indent-automatic"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_auto_indent_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_auto_indent_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置是否启用自动缩进，如果找到前缀或括号，这将添加额外的缩进。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-indent-automatic-prefixes"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-indent-automatic-prefixes" names="class_codeedit_property_indent_automatic_prefixes"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] <strong>indent_automatic_prefixes</strong> = <literal>[":", "{", "[", "("]</literal> <reference internal="True" refid="class-codeedit-property-indent-automatic-prefixes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_auto_indent_prefixes</strong>(value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] <strong>get_auto_indent_prefixes</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>触发自动缩进的前缀。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-indent-size"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-indent-size" names="class_codeedit_property_indent_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>indent_size</strong> = <literal>4</literal> <reference internal="True" refid="class-codeedit-property-indent-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_indent_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_indent_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>制表缩进的大小（按一次 <literal classes="kbd">Tab</literal>），以字符为单位。如果启用 <reference internal="True" refid="class-codeedit-property-indent-use-spaces"><inline classes="std std-ref">indent_use_spaces</inline></reference>，则代表使用的空格数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-indent-use-spaces"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-indent-use-spaces" names="class_codeedit_property_indent_use_spaces"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>indent_use_spaces</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-indent-use-spaces"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_indent_using_spaces</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_indent_using_spaces</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>使用空格代替制表符进行缩进。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-line-folding"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-line-folding" names="class_codeedit_property_line_folding"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>line_folding</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-line-folding"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_folding_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_line_folding_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置是否允许折叠行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-line-length-guidelines"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-line-length-guidelines" names="class_codeedit_property_line_length_guidelines"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>] <strong>line_length_guidelines</strong> = <literal>[]</literal> <reference internal="True" refid="class-codeedit-property-line-length-guidelines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_length_guidelines</strong>(value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>] <strong>get_line_length_guidelines</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在提供的列上绘制垂直线。第一个条目被认为是主要的硬参考线，并且被绘制得更显眼。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-property-symbol-lookup-on-click"></target>
            <paragraph classes="classref-property" ids="class-codeedit-property-symbol-lookup-on-click" names="class_codeedit_property_symbol_lookup_on_click"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>symbol_lookup_on_click</strong> = <literal>false</literal> <reference internal="True" refid="class-codeedit-property-symbol-lookup-on-click"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_symbol_lookup_on_click_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_symbol_lookup_on_click_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置当来自 <reference internal="True" refid="class-codeedit-signal-symbol-validate"><inline classes="std std-ref">symbol_validate</inline></reference> 的验证词被点击时，应发出 <reference internal="True" refid="class-codeedit-signal-symbol-lookup"><inline classes="std std-ref">symbol_lookup</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-codeedit-private-method-confirm-code-completion"></target>
            <paragraph classes="classref-method" ids="class-codeedit-private-method-confirm-code-completion" names="class_codeedit_private_method__confirm_code_completion"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_confirm_code_completion</strong>(replace: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-codeedit-private-method-confirm-code-completion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法以定义所选条目应如何插入。如果 <literal>replace</literal> 为 <literal>true</literal>，任何现有的文本都应该被替换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-private-method-filter-code-completion-candidates"></target>
            <paragraph classes="classref-method" ids="class-codeedit-private-method-filter-code-completion-candidates" names="class_codeedit_private_method__filter_code_completion_candidates"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>_filter_code_completion_candidates</strong>(candidates: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-private-method-filter-code-completion-candidates"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法以确定应该显示 <literal>candidates</literal> 中的哪些项。</paragraph>
            <paragraph>参数 <literal>candidates</literal> 和返回值都是一个 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> 的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>，而 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 的键值，详见 <reference internal="True" refid="class-codeedit-method-get-code-completion-option"><inline classes="std std-ref">get_code_completion_option</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-private-method-request-code-completion"></target>
            <paragraph classes="classref-method" ids="class-codeedit-private-method-request-code-completion" names="class_codeedit_private_method__request_code_completion"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_request_code_completion</strong>(force: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-codeedit-private-method-request-code-completion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法以定义当用户请求代码完成时发生的情况。如果 <literal>force</literal> 为 <literal>true</literal>，会绕过任何检查。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-add-auto-brace-completion-pair"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-add-auto-brace-completion-pair" names="class_codeedit_method_add_auto_brace_completion_pair"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_auto_brace_completion_pair</strong>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, end_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-codeedit-method-add-auto-brace-completion-pair"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加一对括号。</paragraph>
            <paragraph>开始和结束键都必须是符号。只有开始键必须是唯一的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-add-code-completion-option"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-add-code-completion-option" names="class_codeedit_method_add_code_completion_option"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_code_completion_option</strong>(type: <reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference>, display_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, insert_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, text_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), icon: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> = null, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, location: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1024) <reference internal="True" refid="class-codeedit-method-add-code-completion-option"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向自动补全菜单的潜在候选队列提交条目。请调用 <reference internal="True" refid="class-codeedit-method-update-code-completion-options"><inline classes="std std-ref">update_code_completion_options</inline></reference> 来更新列表。</paragraph>
            <paragraph><literal>location</literal> 指示的是该选项相对于代码补全请求位置的位置。这个值如何设置见 <reference internal="True" refid="enum-codeedit-codecompletionlocation"><inline classes="std std-ref">CodeCompletionLocation</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这个列表将替换所有当前候选。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-add-comment-delimiter"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-add-comment-delimiter" names="class_codeedit_method_add_comment_delimiter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_comment_delimiter</strong>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, end_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, line_only: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-codeedit-method-add-comment-delimiter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加从 <literal>start_key</literal> 到 <literal>end_key</literal> 的注释分隔符。两个键都应该是符号，并且 <literal>start_key</literal> 不得与其他分隔符共享。</paragraph>
            <paragraph>如果 <literal>line_only</literal> 为 <literal>true</literal> 或 <literal>end_key</literal> 为空 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>，则该区块不会延续到下一行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-add-string-delimiter"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-add-string-delimiter" names="class_codeedit_method_add_string_delimiter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_string_delimiter</strong>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, end_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, line_only: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-codeedit-method-add-string-delimiter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>定义从 <literal>start_key</literal> 到 <literal>end_key</literal> 的字符串分隔符。两个键都应该是符号，并且 <literal>start_key</literal> 不得与其他分隔符共享。</paragraph>
            <paragraph>如果 <literal>line_only</literal> 为 <literal>true</literal> 或 <literal>end_key</literal> 为空 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>，则该区块不会延续到下一行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-can-fold-line"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-can-fold-line" names="class_codeedit_method_can_fold_line"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>can_fold_line</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-can-fold-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定的行是否可折叠，也就是说，它的正下方有缩进的行或注释 / 字符串块。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-cancel-code-completion"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-cancel-code-completion" names="class_codeedit_method_cancel_code_completion"><abbreviation explanation="无返回值。">void</abbreviation> <strong>cancel_code_completion</strong>() <reference internal="True" refid="class-codeedit-method-cancel-code-completion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>取消自动补全菜单。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-clear-bookmarked-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-clear-bookmarked-lines" names="class_codeedit_method_clear_bookmarked_lines"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_bookmarked_lines</strong>() <reference internal="True" refid="class-codeedit-method-clear-bookmarked-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除所有书签行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-clear-breakpointed-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-clear-breakpointed-lines" names="class_codeedit_method_clear_breakpointed_lines"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_breakpointed_lines</strong>() <reference internal="True" refid="class-codeedit-method-clear-breakpointed-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除所有断点行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-clear-comment-delimiters"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-clear-comment-delimiters" names="class_codeedit_method_clear_comment_delimiters"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_comment_delimiters</strong>() <reference internal="True" refid="class-codeedit-method-clear-comment-delimiters"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除所有注释分隔符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-clear-executing-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-clear-executing-lines" names="class_codeedit_method_clear_executing_lines"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_executing_lines</strong>() <reference internal="True" refid="class-codeedit-method-clear-executing-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除所有已执行的行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-clear-string-delimiters"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-clear-string-delimiters" names="class_codeedit_method_clear_string_delimiters"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_string_delimiters</strong>() <reference internal="True" refid="class-codeedit-method-clear-string-delimiters"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除所有字符串分隔符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-confirm-code-completion"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-confirm-code-completion" names="class_codeedit_method_confirm_code_completion"><abbreviation explanation="无返回值。">void</abbreviation> <strong>confirm_code_completion</strong>(replace: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-codeedit-method-confirm-code-completion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将选定的条目插入到文本中。如果 <literal>replace</literal> 为 <literal>true</literal>，任何现有的文本都会被替换，而不是被合并。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-convert-indent"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-convert-indent" names="class_codeedit_method_convert_indent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>convert_indent</strong>(from_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, to_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-codeedit-method-convert-indent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>from_line</literal> 和 <literal>to_line</literal> 之间的行缩进，转换为 <reference internal="True" refid="class-codeedit-property-indent-use-spaces"><inline classes="std std-ref">indent_use_spaces</inline></reference> 设置的制表符或空格。</paragraph>
            <paragraph>值均为 <literal>-1</literal> 将转换整个文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-create-code-region"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-create-code-region" names="class_codeedit_method_create_code_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>create_code_region</strong>() <reference internal="True" refid="class-codeedit-method-create-code-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用选区创建一个新的代码区块。必须至少定义一个单行注释分隔符（见 <reference internal="True" refid="class-codeedit-method-add-comment-delimiter"><inline classes="std std-ref">add_comment_delimiter</inline></reference>）。</paragraph>
            <paragraph>代码区块是代码的一部分，它在折叠时会高亮显示，且可以帮助组织脚本。</paragraph>
            <paragraph>代码区块的开始和结束标记可以被自定义（见 <reference internal="True" refid="class-codeedit-method-set-code-region-tags"><inline classes="std std-ref">set_code_region_tags</inline></reference>）。</paragraph>
            <paragraph>代码区块使用开始和结束标记（默认情况下分别为 <literal>region</literal> 和 <literal>endregion</literal>）进行分隔，前面有一个行注释分隔符。（例如 <literal>#region</literal> 和 <literal>#endregion</literal>）</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-delete-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-delete-lines" names="class_codeedit_method_delete_lines"><abbreviation explanation="无返回值。">void</abbreviation> <strong>delete_lines</strong>() <reference internal="True" refid="class-codeedit-method-delete-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除所选行以及有光标停留的行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-do-indent"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-do-indent" names="class_codeedit_method_do_indent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>do_indent</strong>() <reference internal="True" refid="class-codeedit-method-do-indent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>执行一个缩进，就像用户触发了“ui_text_indent”动作一样。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-duplicate-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-duplicate-lines" names="class_codeedit_method_duplicate_lines"><abbreviation explanation="无返回值。">void</abbreviation> <strong>duplicate_lines</strong>() <reference internal="True" refid="class-codeedit-method-duplicate-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>复制当前使用任何文本光标选择的所有行。无论文本光标位于行内的哪个位置，复制当前行所在的整行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-duplicate-selection"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-duplicate-selection" names="class_codeedit_method_duplicate_selection"><abbreviation explanation="无返回值。">void</abbreviation> <strong>duplicate_selection</strong>() <reference internal="True" refid="class-codeedit-method-duplicate-selection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>制作所有选中文本的副本并制作所有光标所在行的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-fold-all-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-fold-all-lines" names="class_codeedit_method_fold_all_lines"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fold_all_lines</strong>() <reference internal="True" refid="class-codeedit-method-fold-all-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>折叠所有可能被折叠的行（参见 <reference internal="True" refid="class-codeedit-method-can-fold-line"><inline classes="std std-ref">can_fold_line</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-fold-line"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-fold-line" names="class_codeedit_method_fold_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fold_line</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-codeedit-method-fold-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果可能，折叠给定的行（参见 <reference internal="True" refid="class-codeedit-method-can-fold-line"><inline classes="std std-ref">can_fold_line</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-auto-brace-completion-close-key"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-auto-brace-completion-close-key" names="class_codeedit_method_get_auto_brace_completion_close_key"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_auto_brace_completion_close_key</strong>(open_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-auto-brace-completion-close-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取 <literal>open_key</literal> 相匹配的括号自动闭合键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-bookmarked-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-bookmarked-lines" names="class_codeedit_method_get_bookmarked_lines"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_bookmarked_lines</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-bookmarked-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取所有书签行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-breakpointed-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-breakpointed-lines" names="class_codeedit_method_get_breakpointed_lines"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_breakpointed_lines</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-breakpointed-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取所有断点行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-code-completion-option"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-code-completion-option" names="class_codeedit_method_get_code_completion_option"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_code_completion_option</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-code-completion-option"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取在 <literal>index</literal> 处的补全选项。返回的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 有以下键值。</paragraph>
            <paragraph><literal>kind</literal>：<reference internal="True" refid="enum-codeedit-codecompletionkind"><inline classes="std std-ref">CodeCompletionKind</inline></reference></paragraph>
            <paragraph><literal>display_text</literal> ：在自动补全菜单上显示的文本。</paragraph>
            <paragraph><literal>insert_text</literal> ：当选中这个选项时要插入的文本。</paragraph>
            <paragraph><literal>font_color</literal>：自动补全菜单上文本的颜色。</paragraph>
            <paragraph><literal>icon</literal> ：在自动补全菜单上绘制的图标。</paragraph>
            <paragraph><literal>default_value</literal>：符号的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-code-completion-options"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-code-completion-options" names="class_codeedit_method_get_code_completion_options"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>get_code_completion_options</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-code-completion-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取所有补全选项，返回值见 <reference internal="True" refid="class-codeedit-method-get-code-completion-option"><inline classes="std std-ref">get_code_completion_option</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-code-completion-selected-index"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-code-completion-selected-index" names="class_codeedit_method_get_code_completion_selected_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_code_completion_selected_index</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-code-completion-selected-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取当前已选定补全项的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-code-region-end-tag"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-code-region-end-tag" names="class_codeedit_method_get_code_region_end_tag"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_code_region_end_tag</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-code-region-end-tag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回代码区块结束标签（不带注释分隔符）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-code-region-start-tag"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-code-region-start-tag" names="class_codeedit_method_get_code_region_start_tag"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_code_region_start_tag</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-code-region-start-tag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回代码区块开始标签（不带注释分隔符）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-delimiter-end-key"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-delimiter-end-key" names="class_codeedit_method_get_delimiter_end_key"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_delimiter_end_key</strong>(delimiter_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-delimiter-end-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取字符串或注释块索引的结束键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-delimiter-end-position"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-delimiter-end-position" names="class_codeedit_method_get_delimiter_end_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_delimiter_end_position</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-delimiter-end-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>line</literal> <literal>column</literal> 是在一个字符串或注释中，则返回该区域的结束位置。如果不在或未找到结束位置，则 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 的两个值都将是 <literal>-1</literal> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-delimiter-start-key"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-delimiter-start-key" names="class_codeedit_method_get_delimiter_start_key"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_delimiter_start_key</strong>(delimiter_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-delimiter-start-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取字符串或注释块索引的开始键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-delimiter-start-position"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-delimiter-start-position" names="class_codeedit_method_get_delimiter_start_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_delimiter_start_position</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-delimiter-start-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>line</literal> <literal>column</literal> 是在一个字符串或注释中，则返回该区域的起始位置。如果不在或未找到开始位置，则 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 的两个值都将是 <literal>-1</literal> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-executing-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-executing-lines" names="class_codeedit_method_get_executing_lines"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_executing_lines</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-executing-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取所有正在执行的行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-folded-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-folded-lines" names="class_codeedit_method_get_folded_lines"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>] <strong>get_folded_lines</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-folded-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前折叠的所有行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-text-for-code-completion"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-text-for-code-completion" names="class_codeedit_method_get_text_for_code_completion"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_text_for_code_completion</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-text-for-code-completion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在文本光标位置带有 <literal>0xFFFF</literal> 字符的全文。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-text-for-symbol-lookup"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-text-for-symbol-lookup" names="class_codeedit_method_get_text_for_symbol_lookup"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_text_for_symbol_lookup</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-text-for-symbol-lookup"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在鼠标光标处带有 <literal>0xFFFF</literal> 字符的全文。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-get-text-with-cursor-char"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-get-text-with-cursor-char" names="class_codeedit_method_get_text_with_cursor_char"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_text_with_cursor_char</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-get-text-with-cursor-char"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在指定位置带有 <literal>0xFFFF</literal> 字符的全文。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-has-auto-brace-completion-close-key"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-has-auto-brace-completion-close-key" names="class_codeedit_method_has_auto_brace_completion_close_key"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_auto_brace_completion_close_key</strong>(close_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-has-auto-brace-completion-close-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果关闭键 <literal>close_key</literal> 存在，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-has-auto-brace-completion-open-key"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-has-auto-brace-completion-open-key" names="class_codeedit_method_has_auto_brace_completion_open_key"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_auto_brace_completion_open_key</strong>(open_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-has-auto-brace-completion-open-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果打开键 <literal>open_key</literal> 存在，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-has-comment-delimiter"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-has-comment-delimiter" names="class_codeedit_method_has_comment_delimiter"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_comment_delimiter</strong>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-has-comment-delimiter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果注释的 <literal>start_key</literal> 存在，返回 <literal>true</literal> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-has-string-delimiter"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-has-string-delimiter" names="class_codeedit_method_has_string_delimiter"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_string_delimiter</strong>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-has-string-delimiter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果字符串的 <literal>start_key</literal> 存在，返回 <literal>true</literal> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-indent-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-indent-lines" names="class_codeedit_method_indent_lines"><abbreviation explanation="无返回值。">void</abbreviation> <strong>indent_lines</strong>() <reference internal="True" refid="class-codeedit-method-indent-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>缩进选定的行，或者在没有选择的情况下，将光标行缩进一个。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-is-in-comment"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-is-in-comment" names="class_codeedit_method_is_in_comment"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>is_in_comment</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-is-in-comment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>line</literal> <literal>column</literal> 在一条注释中，则返回分隔符索引。如果没有提供 <literal>column</literal>，且整个 <literal>line</literal> 是一条注释，则将返回分隔符索引。否则返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-is-in-string"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-is-in-string" names="class_codeedit_method_is_in_string"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>is_in_string</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-is-in-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>line</literal> <literal>column</literal> 在一条字符串中，则返回分隔符索引。如果没有提供 <literal>column</literal>，且整个 <literal>line</literal> 是一个字符串，则将返回分隔符索引。否则返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-is-line-bookmarked"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-is-line-bookmarked" names="class_codeedit_method_is_line_bookmarked"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_line_bookmarked</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-is-line-bookmarked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定索引处的行是否添加了书签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-is-line-breakpointed"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-is-line-breakpointed" names="class_codeedit_method_is_line_breakpointed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_line_breakpointed</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-is-line-breakpointed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定索引处的行是否有断点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-is-line-code-region-end"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-is-line-code-region-end" names="class_codeedit_method_is_line_code_region_end"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_line_code_region_end</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-is-line-code-region-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定索引处的行是否是代码区块末尾。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-is-line-code-region-start"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-is-line-code-region-start" names="class_codeedit_method_is_line_code_region_start"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_line_code_region_start</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-is-line-code-region-start"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定索引处的行是否是代码区块开始。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-is-line-executing"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-is-line-executing" names="class_codeedit_method_is_line_executing"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_line_executing</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-is-line-executing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定索引处的行是否标记为正在执行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-is-line-folded"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-is-line-folded" names="class_codeedit_method_is_line_folded"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_line_folded</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codeedit-method-is-line-folded"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定索引处的行是否折叠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-move-lines-down"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-move-lines-down" names="class_codeedit_method_move_lines_down"><abbreviation explanation="无返回值。">void</abbreviation> <strong>move_lines_down</strong>() <reference internal="True" refid="class-codeedit-method-move-lines-down"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将所选行以及有光标停留的行向下移动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-move-lines-up"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-move-lines-up" names="class_codeedit_method_move_lines_up"><abbreviation explanation="无返回值。">void</abbreviation> <strong>move_lines_up</strong>() <reference internal="True" refid="class-codeedit-method-move-lines-up"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将所选行以及有光标停留的行向上移动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-remove-comment-delimiter"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-remove-comment-delimiter" names="class_codeedit_method_remove_comment_delimiter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_comment_delimiter</strong>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-codeedit-method-remove-comment-delimiter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除带有 <literal>start_key</literal> 的注释分隔符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-remove-string-delimiter"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-remove-string-delimiter" names="class_codeedit_method_remove_string_delimiter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_string_delimiter</strong>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-codeedit-method-remove-string-delimiter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除带有 <literal>start_key</literal> 的字符串分隔符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-request-code-completion"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-request-code-completion" names="class_codeedit_method_request_code_completion"><abbreviation explanation="无返回值。">void</abbreviation> <strong>request_code_completion</strong>(force: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-codeedit-method-request-code-completion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>发出 <reference internal="True" refid="class-codeedit-signal-code-completion-requested"><inline classes="std std-ref">code_completion_requested</inline></reference>，如果 <literal>force</literal> 为 <literal>true</literal> 则会绕过所有检查。否则，将检查光标是否在一个词中或在一个前缀的前面。如果当前所有选项都是文件路径、节点路径或信号类型，将忽略该请求。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-set-code-completion-selected-index"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-set-code-completion-selected-index" names="class_codeedit_method_set_code_completion_selected_index"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_code_completion_selected_index</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-codeedit-method-set-code-completion-selected-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置当前选定的补全选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-set-code-hint"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-set-code-hint" names="class_codeedit_method_set_code_hint"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_code_hint</strong>(code_hint: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-codeedit-method-set-code-hint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置代码提示文本。传递一个空字符串来清除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-set-code-hint-draw-below"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-set-code-hint-draw-below" names="class_codeedit_method_set_code_hint_draw_below"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_code_hint_draw_below</strong>(draw_below: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-codeedit-method-set-code-hint-draw-below"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置代码提示是否应绘制在文本下方。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-set-code-region-tags"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-set-code-region-tags" names="class_codeedit_method_set_code_region_tags"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_code_region_tags</strong>(start: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "region", end: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "endregion") <reference internal="True" refid="class-codeedit-method-set-code-region-tags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置代码区块的开始和结束标签（不含注释分隔符）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-set-line-as-bookmarked"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-set-line-as-bookmarked" names="class_codeedit_method_set_line_as_bookmarked"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_as_bookmarked</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bookmarked: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-codeedit-method-set-line-as-bookmarked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该行设置为书签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-set-line-as-breakpoint"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-set-line-as-breakpoint" names="class_codeedit_method_set_line_as_breakpoint"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_as_breakpoint</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, breakpointed: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-codeedit-method-set-line-as-breakpoint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该行设置为断点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-set-line-as-executing"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-set-line-as-executing" names="class_codeedit_method_set_line_as_executing"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_as_executing</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, executing: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-codeedit-method-set-line-as-executing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该行设置为正在执行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-set-symbol-lookup-word-as-valid"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-set-symbol-lookup-word-as-valid" names="class_codeedit_method_set_symbol_lookup_word_as_valid"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_symbol_lookup_word_as_valid</strong>(valid: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-codeedit-method-set-symbol-lookup-word-as-valid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <reference internal="True" refid="class-codeedit-signal-symbol-validate"><inline classes="std std-ref">symbol_validate</inline></reference> 发出的符号设置为有效查找。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-toggle-foldable-line"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-toggle-foldable-line" names="class_codeedit_method_toggle_foldable_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>toggle_foldable_line</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-codeedit-method-toggle-foldable-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定行切换代码块的折叠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-toggle-foldable-lines-at-carets"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-toggle-foldable-lines-at-carets" names="class_codeedit_method_toggle_foldable_lines_at_carets"><abbreviation explanation="无返回值。">void</abbreviation> <strong>toggle_foldable_lines_at_carets</strong>() <reference internal="True" refid="class-codeedit-method-toggle-foldable-lines-at-carets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Toggle the folding of the code block on all lines with a caret on them.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-unfold-all-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-unfold-all-lines" names="class_codeedit_method_unfold_all_lines"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unfold_all_lines</strong>() <reference internal="True" refid="class-codeedit-method-unfold-all-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>展开所有行，无论是否被折叠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-unfold-line"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-unfold-line" names="class_codeedit_method_unfold_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unfold_line</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-codeedit-method-unfold-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>展开之前被折叠的所有行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-unindent-lines"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-unindent-lines" names="class_codeedit_method_unindent_lines"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unindent_lines</strong>() <reference internal="True" refid="class-codeedit-method-unindent-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>解除所选行的缩进，或者在没有选择的情况下，将光标行缩进一个。与触发“ui_text_unindent ”动作相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-method-update-code-completion-options"></target>
            <paragraph classes="classref-method" ids="class-codeedit-method-update-code-completion-options" names="class_codeedit_method_update_code_completion_options"><abbreviation explanation="无返回值。">void</abbreviation> <strong>update_code_completion_options</strong>(force: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-codeedit-method-update-code-completion-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>提交所有用 <reference internal="True" refid="class-codeedit-method-add-code-completion-option"><inline classes="std std-ref">add_code_completion_option</inline></reference> 添加的补全选项。如果 <literal>force</literal> 是 <literal>true</literal>，将尝试强制弹出自动补全菜单 。</paragraph>
            <paragraph><strong>注意：</strong>这将取代所有当前的候补选项。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="主题属性说明">
            <title>主题属性说明</title>
            <target refid="class-codeedit-theme-color-bookmark-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-bookmark-color" names="class_codeedit_theme_color_bookmark_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>bookmark_color</strong> = <literal>Color(0.5, 0.64, 1, 0.8)</literal> <reference internal="True" refid="class-codeedit-theme-color-bookmark-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>书签图标的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>，用于标记了书签的行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-color-brace-mismatch-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-brace-mismatch-color" names="class_codeedit_theme_color_brace_mismatch_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>brace_mismatch_color</strong> = <literal>Color(1, 0.2, 0.2, 1)</literal> <reference internal="True" refid="class-codeedit-theme-color-brace-mismatch-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于高亮不匹配括号文本的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-color-breakpoint-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-breakpoint-color" names="class_codeedit_theme_color_breakpoint_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>breakpoint_color</strong> = <literal>Color(0.9, 0.29, 0.3, 1)</literal> <reference internal="True" refid="class-codeedit-theme-color-breakpoint-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>书签行的断点图标的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-color-code-folding-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-code-folding-color" names="class_codeedit_theme_color_code_folding_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>code_folding_color</strong> = <literal>Color(0.8, 0.8, 0.8, 0.8)</literal> <reference internal="True" refid="class-codeedit-theme-color-code-folding-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>所有与折叠行相关的图标的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-color-completion-background-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-completion-background-color" names="class_codeedit_theme_color_completion_background_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>completion_background_color</strong> = <literal>Color(0.17, 0.16, 0.2, 1)</literal> <reference internal="True" refid="class-codeedit-theme-color-completion-background-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置代码补全弹出窗口的背景色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-color-completion-existing-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-completion-existing-color" names="class_codeedit_theme_color_completion_existing_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>completion_existing_color</strong> = <literal>Color(0.87, 0.87, 0.87, 0.13)</literal> <reference internal="True" refid="class-codeedit-theme-color-completion-existing-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于匹配代码补全选项中的文本的背景高亮的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-color-completion-scroll-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-completion-scroll-color" names="class_codeedit_theme_color_completion_scroll_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>completion_scroll_color</strong> = <literal>Color(1, 1, 1, 0.29)</literal> <reference internal="True" refid="class-codeedit-theme-color-completion-scroll-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>代码补全弹出窗口中滚动条的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-color-completion-scroll-hovered-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-completion-scroll-hovered-color" names="class_codeedit_theme_color_completion_scroll_hovered_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>completion_scroll_hovered_color</strong> = <literal>Color(1, 1, 1, 0.4)</literal> <reference internal="True" refid="class-codeedit-theme-color-completion-scroll-hovered-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>代码补全弹出窗口中滚动条在悬停状态的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-color-completion-selected-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-completion-selected-color" names="class_codeedit_theme_color_completion_selected_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>completion_selected_color</strong> = <literal>Color(0.26, 0.26, 0.27, 1)</literal> <reference internal="True" refid="class-codeedit-theme-color-completion-selected-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>代码补全弹出窗口中，当前选定选项的背景高亮的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-color-executing-line-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-executing-line-color" names="class_codeedit_theme_color_executing_line_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>executing_line_color</strong> = <literal>Color(0.98, 0.89, 0.27, 1)</literal> <reference internal="True" refid="class-codeedit-theme-color-executing-line-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>执行行执行图标的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-color-folded-code-region-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-folded-code-region-color" names="class_codeedit_theme_color_folded_code_region_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>folded_code_region_color</strong> = <literal>Color(0.68, 0.46, 0.77, 0.2)</literal> <reference internal="True" refid="class-codeedit-theme-color-folded-code-region-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>折叠代码区块的背景行高亮 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-color-line-length-guideline-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-line-length-guideline-color" names="class_codeedit_theme_color_line_length_guideline_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>line_length_guideline_color</strong> = <literal>Color(0.3, 0.5, 0.8, 0.1)</literal> <reference internal="True" refid="class-codeedit-theme-color-line-length-guideline-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>主行长度参考线的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>，次要参考线将应用 50% 的 Alpha。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-color-line-number-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-color-line-number-color" names="class_codeedit_theme_color_line_number_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>line_number_color</strong> = <literal>Color(0.67, 0.67, 0.67, 0.4)</literal> <reference internal="True" refid="class-codeedit-theme-color-line-number-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置行号的颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-constant-completion-lines"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-constant-completion-lines" names="class_codeedit_theme_constant_completion_lines"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>completion_lines</strong> = <literal>7</literal> <reference internal="True" refid="class-codeedit-theme-constant-completion-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>同时在代码补全弹出窗口中显示的最大选项数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-constant-completion-max-width"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-constant-completion-max-width" names="class_codeedit_theme_constant_completion_max_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>completion_max_width</strong> = <literal>50</literal> <reference internal="True" refid="class-codeedit-theme-constant-completion-max-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>代码补全弹出窗口中选项的最大宽度。超过此长度的选项将被截断。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-constant-completion-scroll-width"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-constant-completion-scroll-width" names="class_codeedit_theme_constant_completion_scroll_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>completion_scroll_width</strong> = <literal>6</literal> <reference internal="True" refid="class-codeedit-theme-constant-completion-scroll-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>代码补全弹出窗口中滚动条的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-icon-bookmark"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-icon-bookmark" names="class_codeedit_theme_icon_bookmark"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>bookmark</strong> <reference internal="True" refid="class-codeedit-theme-icon-bookmark"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置书签行的自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>，会在书签栏中绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-icon-breakpoint"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-icon-breakpoint" names="class_codeedit_theme_icon_breakpoint"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>breakpoint</strong> <reference internal="True" refid="class-codeedit-theme-icon-breakpoint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置断点行的自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>，会在断点栏中绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-icon-can-fold"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-icon-can-fold" names="class_codeedit_theme_icon_can_fold"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>can_fold</strong> <reference internal="True" refid="class-codeedit-theme-icon-can-fold"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置可折叠行的自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>，会在折叠行栏中绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-icon-can-fold-code-region"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-icon-can-fold-code-region" names="class_codeedit_theme_icon_can_fold_code_region"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>can_fold_code_region</strong> <reference internal="True" refid="class-codeedit-theme-icon-can-fold-code-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置一个自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>，以在代码区块可以折叠时在行折叠栏中绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-icon-executing-line"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-icon-executing-line" names="class_codeedit_theme_icon_executing_line"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>executing_line</strong> <reference internal="True" refid="class-codeedit-theme-icon-executing-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>执行行的图标，会在执行栏中绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-icon-folded"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-icon-folded" names="class_codeedit_theme_icon_folded"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>folded</strong> <reference internal="True" refid="class-codeedit-theme-icon-folded"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置一个自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>，以在行被折叠且可以展开时，在行折叠边栏中绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-icon-folded-code-region"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-icon-folded-code-region" names="class_codeedit_theme_icon_folded_code_region"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>folded_code_region</strong> <reference internal="True" refid="class-codeedit-theme-icon-folded-code-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置一个自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>，以在代码区块被折叠且可以展开时，在行折叠边栏中绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-icon-folded-eol-icon"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-icon-folded-eol-icon" names="class_codeedit_theme_icon_folded_eol_icon"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>folded_eol_icon</strong> <reference internal="True" refid="class-codeedit-theme-icon-folded-eol-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置要绘制在折叠行末尾的一个自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codeedit-theme-style-completion"></target>
            <paragraph classes="classref-themeproperty" ids="class-codeedit-theme-style-completion" names="class_codeedit_theme_style_completion"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>completion</strong> <reference internal="True" refid="class-codeedit-theme-style-completion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于代码补全弹窗的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
