<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_control.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Control.xml.</comment>
    <target refid="class-control"></target>
    <section ids="control class-control" names="control class_control">
        <title>Control</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_basebutton#class-basebutton"><inline classes="std std-ref">BaseButton</inline></reference>, <reference internal="True" refuri="class_colorrect#class-colorrect"><inline classes="std std-ref">ColorRect</inline></reference>, <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference>, <reference internal="True" refuri="class_graphedit#class-graphedit"><inline classes="std std-ref">GraphEdit</inline></reference>, <reference internal="True" refuri="class_itemlist#class-itemlist"><inline classes="std std-ref">ItemList</inline></reference>, <reference internal="True" refuri="class_label#class-label"><inline classes="std std-ref">Label</inline></reference>, <reference internal="True" refuri="class_lineedit#class-lineedit"><inline classes="std std-ref">LineEdit</inline></reference>, <reference internal="True" refuri="class_menubar#class-menubar"><inline classes="std std-ref">MenuBar</inline></reference>, <reference internal="True" refuri="class_ninepatchrect#class-ninepatchrect"><inline classes="std std-ref">NinePatchRect</inline></reference>, <reference internal="True" refuri="class_panel#class-panel"><inline classes="std std-ref">Panel</inline></reference>, <reference internal="True" refuri="class_range#class-range"><inline classes="std std-ref">Range</inline></reference>, <reference internal="True" refuri="class_referencerect#class-referencerect"><inline classes="std std-ref">ReferenceRect</inline></reference>, <reference internal="True" refuri="class_richtextlabel#class-richtextlabel"><inline classes="std std-ref">RichTextLabel</inline></reference>, <reference internal="True" refuri="class_separator#class-separator"><inline classes="std std-ref">Separator</inline></reference>, <reference internal="True" refuri="class_tabbar#class-tabbar"><inline classes="std std-ref">TabBar</inline></reference>, <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference>, <reference internal="True" refuri="class_texturerect#class-texturerect"><inline classes="std std-ref">TextureRect</inline></reference>, <reference internal="True" refuri="class_tree#class-tree"><inline classes="std std-ref">Tree</inline></reference>, <reference internal="True" refuri="class_videostreamplayer#class-videostreamplayer"><inline classes="std std-ref">VideoStreamPlayer</inline></reference></paragraph>
        <paragraph>所有 GUI 控件的基类。根据其父控件调整其位置和大小。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>所有 UI 相关节点的基类。<strong>Control</strong> 具有定义其范围的边界矩形，相对于父控件或当前视口的锚点位置，以及相对于锚点的偏移。当节点、任何父节点或屏幕尺寸发生变化时，偏移就会自动更新。</paragraph>
            <paragraph>更多关于 Godot 的 UI 系统、锚点、偏移和容器的信息，请参阅手册中的相关教程。要构建灵活的 UI，你需要混合使用从 <strong>Control</strong> 和 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 节点继承的 UI 元素。</paragraph>
            <paragraph><strong>用户界面节点与输入</strong></paragraph>
            <paragraph>Godot 使用视口来传播输入事件。视口负责将 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> 传播给它的子节点。因为 <reference internal="True" refuri="class_scenetree#class-scenetree-property-root"><inline classes="std std-ref">SceneTree.root</inline></reference> 是 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference>，所以游戏中的所有 UI 元素都会自动进行传播。</paragraph>
            <paragraph>输入事件通过调用 <reference internal="True" refuri="class_node#class-node-private-method-input"><inline classes="std std-ref">Node._input</inline></reference> 在 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 中传播，从根节点传播到所有子节点。对 UI 元素而言，覆盖的最好是 <reference internal="True" refid="class-control-private-method-gui-input"><inline classes="std std-ref">_gui_input</inline></reference>，可以过滤掉无关的输入事件，例如它会对 Z 顺序、<reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference>、焦点、事件是否在该控件的边界框内等条件进行检查。</paragraph>
            <paragraph>请调用 <reference internal="True" refid="class-control-method-accept-event"><inline classes="std std-ref">accept_event</inline></reference>，这样其他节点就不会收到该事件。输入被接受后，就会被标记为已处理，<reference internal="True" refuri="class_node#class-node-private-method-unhandled-input"><inline classes="std std-ref">Node._unhandled_input</inline></reference> 不会对它进行处理。</paragraph>
            <paragraph>只能有一个 <strong>Control</strong> 节点处于焦点。只有处于焦点的节点才会接收到事件。要获得焦点，请调用 <reference internal="True" refid="class-control-method-grab-focus"><inline classes="std std-ref">grab_focus</inline></reference>。导致 <strong>Control</strong> 节点失去焦点的情况有：其他节点获得了焦点、隐藏了聚焦节点。</paragraph>
            <paragraph>将 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 设置为 <reference internal="True" refid="class-control-constant-mouse-filter-ignore"><inline classes="std std-ref">MOUSE_FILTER_IGNORE</inline></reference> 可以让 <strong>Control</strong> 节点忽略鼠标或触摸事件。如果你在按钮上放了一个图标，就会需要用到。</paragraph>
            <paragraph><reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 资源会更改控件的外观。如果你更改了 <strong>Control</strong> 节点上的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>，则会影响其所有子节点。要覆盖某些主题的参数，请调用 <literal>add_theme_*_override</literal> 方法，例如 <reference internal="True" refid="class-control-method-add-theme-font-override"><inline classes="std std-ref">add_theme_font_override</inline></reference>。你可以使用检查器覆盖主题。</paragraph>
            <paragraph><strong>注意：</strong>主题项<emphasis>不是</emphasis> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 的属性。这意味着你无法使用 <reference internal="True" refuri="class_object#class-object-method-get"><inline classes="std std-ref">Object.get</inline></reference> 和 <reference internal="True" refuri="class_object#class-object-method-set"><inline classes="std std-ref">Object.set</inline></reference> 访问它们的值。请改用这个类的 <literal>get_theme_*</literal> 和 <literal>add_theme_*_override</literal> 方法。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/ui/index"><inline classes="doc">GUI 文档索引</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/custom_drawing_in_2d"><inline classes="doc">2D 中的自定义绘图</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/ui/control_node_gallery"><inline classes="doc">控件节点一览</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/rendering/multiple_resolutions"><inline classes="doc">多分辨率</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="所有 GUI 演示" refuri="https://github.com/godotengine/godot-demo-projects/tree/master/gui">所有 GUI 演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="69"></colspec>
                    <colspec colwidth="94"></colspec>
                    <colspec colwidth="79"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-anchor-bottom"><inline classes="std std-ref">anchor_bottom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-anchor-left"><inline classes="std std-ref">anchor_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-anchor-right"><inline classes="std std-ref">anchor_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-anchor-top"><inline classes="std std-ref">anchor_top</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-auto-translate"><inline classes="std std-ref">auto_translate</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-clip-contents"><inline classes="std std-ref">clip_contents</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-custom-minimum-size"><inline classes="std std-ref">custom_minimum_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-control-focusmode"><inline classes="std std-ref">FocusMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-focus-mode"><inline classes="std std-ref">focus_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-focus-neighbor-bottom"><inline classes="std std-ref">focus_neighbor_bottom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("")</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-focus-neighbor-left"><inline classes="std std-ref">focus_neighbor_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("")</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-focus-neighbor-right"><inline classes="std std-ref">focus_neighbor_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("")</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-focus-neighbor-top"><inline classes="std std-ref">focus_neighbor_top</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("")</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-focus-next"><inline classes="std std-ref">focus_next</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("")</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-focus-previous"><inline classes="std std-ref">focus_previous</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("")</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-global-position"><inline classes="std std-ref">global_position</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-control-growdirection"><inline classes="std std-ref">GrowDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-grow-horizontal"><inline classes="std std-ref">grow_horizontal</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-control-growdirection"><inline classes="std std-ref">GrowDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-grow-vertical"><inline classes="std std-ref">grow_vertical</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-control-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-layout-direction"><inline classes="std std-ref">layout_direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-localize-numeral-system"><inline classes="std std-ref">localize_numeral_system</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-mouse-default-cursor-shape"><inline classes="std std-ref">mouse_default_cursor_shape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-control-mousefilter"><inline classes="std std-ref">MouseFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-mouse-force-pass-scroll-events"><inline classes="std std-ref">mouse_force_pass_scroll_events</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-offset-bottom"><inline classes="std std-ref">offset_bottom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-offset-left"><inline classes="std std-ref">offset_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-offset-right"><inline classes="std std-ref">offset_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-offset-top"><inline classes="std std-ref">offset_top</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#enum-node-physicsinterpolationmode"><inline classes="std std-ref">PhysicsInterpolationMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>physics_interpolation_mode</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal> (overrides <reference internal="True" refuri="class_node#class-node-property-physics-interpolation-mode"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-pivot-offset"><inline classes="std std-ref">pivot_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-position"><inline classes="std std-ref">position</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-rotation"><inline classes="std std-ref">rotation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-rotation-degrees"><inline classes="std std-ref">rotation_degrees</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-scale"><inline classes="std std-ref">scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-shortcut-context"><inline classes="std std-ref">shortcut_context</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-size"><inline classes="std std-ref">size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-size-flags-horizontal"><inline classes="std std-ref">size_flags_horizontal</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-size-flags-stretch-ratio"><inline classes="std std-ref">size_flags_stretch_ratio</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-size-flags-vertical"><inline classes="std std-ref">size_flags_vertical</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-theme"><inline classes="std std-ref">theme</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-theme-type-variation"><inline classes="std std-ref">theme_type_variation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>&amp;""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-property-tooltip-text"><inline classes="std std-ref">tooltip_text</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="62"></colspec>
                    <colspec colwidth="265"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-private-method-can-drop-data"><inline classes="std std-ref">_can_drop_data</inline></reference>(at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, data: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-private-method-drop-data"><inline classes="std std-ref">_drop_data</inline></reference>(at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, data: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-private-method-get-drag-data"><inline classes="std std-ref">_get_drag_data</inline></reference>(at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-private-method-get-minimum-size"><inline classes="std std-ref">_get_minimum_size</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-private-method-get-tooltip"><inline classes="std std-ref">_get_tooltip</inline></reference>(at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-private-method-gui-input"><inline classes="std std-ref">_gui_input</inline></reference>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-private-method-has-point"><inline classes="std std-ref">_has_point</inline></reference>(point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-private-method-make-custom-tooltip"><inline classes="std std-ref">_make_custom_tooltip</inline></reference>(for_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-private-method-structured-text-parser"><inline classes="std std-ref">_structured_text_parser</inline></reference>(args: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-accept-event"><inline classes="std std-ref">accept_event</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-add-theme-color-override"><inline classes="std std-ref">add_theme_color_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-add-theme-constant-override"><inline classes="std std-ref">add_theme_constant_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, constant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-add-theme-font-override"><inline classes="std std-ref">add_theme_font_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-add-theme-font-size-override"><inline classes="std std-ref">add_theme_font_size_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-add-theme-icon-override"><inline classes="std std-ref">add_theme_icon_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-add-theme-stylebox-override"><inline classes="std std-ref">add_theme_stylebox_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, stylebox: <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-begin-bulk-theme-override"><inline classes="std std-ref">begin_bulk_theme_override</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-end-bulk-theme-override"><inline classes="std std-ref">end_bulk_theme_override</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control"><inline classes="std std-ref">Control</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-find-next-valid-focus"><inline classes="std std-ref">find_next_valid_focus</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control"><inline classes="std std-ref">Control</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-find-prev-valid-focus"><inline classes="std std-ref">find_prev_valid_focus</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control"><inline classes="std std-ref">Control</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-find-valid-focus-neighbor"><inline classes="std std-ref">find_valid_focus_neighbor</inline></reference>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-force-drag"><inline classes="std std-ref">force_drag</inline></reference>(data: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, preview: <reference internal="True" refid="class-control"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-anchor"><inline classes="std std-ref">get_anchor</inline></reference>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-begin"><inline classes="std std-ref">get_begin</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-combined-minimum-size"><inline classes="std std-ref">get_combined_minimum_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-cursor-shape"><inline classes="std std-ref">get_cursor_shape</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-end"><inline classes="std std-ref">get_end</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-focus-neighbor"><inline classes="std std-ref">get_focus_neighbor</inline></reference>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-global-rect"><inline classes="std std-ref">get_global_rect</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-minimum-size"><inline classes="std std-ref">get_minimum_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-offset"><inline classes="std std-ref">get_offset</inline></reference>(offset: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-parent-area-size"><inline classes="std std-ref">get_parent_area_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control"><inline classes="std std-ref">Control</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-parent-control"><inline classes="std std-ref">get_parent_control</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-rect"><inline classes="std std-ref">get_rect</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-screen-position"><inline classes="std std-ref">get_screen_position</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-theme-constant"><inline classes="std std-ref">get_theme_constant</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-theme-default-base-scale"><inline classes="std std-ref">get_theme_default_base_scale</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-theme-default-font"><inline classes="std std-ref">get_theme_default_font</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-theme-default-font-size"><inline classes="std std-ref">get_theme_default_font_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-theme-font"><inline classes="std std-ref">get_theme_font</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-theme-font-size"><inline classes="std std-ref">get_theme_font_size</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-theme-icon"><inline classes="std std-ref">get_theme_icon</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-theme-stylebox"><inline classes="std std-ref">get_theme_stylebox</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-get-tooltip"><inline classes="std std-ref">get_tooltip</inline></reference>(at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-grab-click-focus"><inline classes="std std-ref">grab_click_focus</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-grab-focus"><inline classes="std std-ref">grab_focus</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-focus"><inline classes="std std-ref">has_focus</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-theme-color"><inline classes="std std-ref">has_theme_color</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-theme-color-override"><inline classes="std std-ref">has_theme_color_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-theme-constant"><inline classes="std std-ref">has_theme_constant</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-theme-constant-override"><inline classes="std std-ref">has_theme_constant_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-theme-font"><inline classes="std std-ref">has_theme_font</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-theme-font-override"><inline classes="std std-ref">has_theme_font_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-theme-font-size"><inline classes="std std-ref">has_theme_font_size</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-theme-font-size-override"><inline classes="std std-ref">has_theme_font_size_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-theme-icon"><inline classes="std std-ref">has_theme_icon</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-theme-icon-override"><inline classes="std std-ref">has_theme_icon_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-theme-stylebox"><inline classes="std std-ref">has_theme_stylebox</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-has-theme-stylebox-override"><inline classes="std std-ref">has_theme_stylebox_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-is-drag-successful"><inline classes="std std-ref">is_drag_successful</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-is-layout-rtl"><inline classes="std std-ref">is_layout_rtl</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-release-focus"><inline classes="std std-ref">release_focus</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-remove-theme-color-override"><inline classes="std std-ref">remove_theme_color_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-remove-theme-constant-override"><inline classes="std std-ref">remove_theme_constant_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-remove-theme-font-override"><inline classes="std std-ref">remove_theme_font_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-remove-theme-font-size-override"><inline classes="std std-ref">remove_theme_font_size_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-remove-theme-icon-override"><inline classes="std std-ref">remove_theme_icon_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-remove-theme-stylebox-override"><inline classes="std std-ref">remove_theme_stylebox_override</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-reset-size"><inline classes="std std-ref">reset_size</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-anchor"><inline classes="std std-ref">set_anchor</inline></reference>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, anchor: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, keep_offset: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, push_opposite_anchor: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-anchor-and-offset"><inline classes="std std-ref">set_anchor_and_offset</inline></reference>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, anchor: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, push_opposite_anchor: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-anchors-and-offsets-preset"><inline classes="std std-ref">set_anchors_and_offsets_preset</inline></reference>(preset: <reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference>, resize_mode: <reference internal="True" refid="enum-control-layoutpresetmode"><inline classes="std std-ref">LayoutPresetMode</inline></reference> = 0, margin: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference>(preset: <reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference>, keep_offsets: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-begin"><inline classes="std std-ref">set_begin</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-drag-forwarding"><inline classes="std std-ref">set_drag_forwarding</inline></reference>(drag_func: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, can_drop_func: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, drop_func: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-drag-preview"><inline classes="std std-ref">set_drag_preview</inline></reference>(control: <reference internal="True" refid="class-control"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-end"><inline classes="std std-ref">set_end</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-focus-neighbor"><inline classes="std std-ref">set_focus_neighbor</inline></reference>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, neighbor: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-global-position"><inline classes="std std-ref">set_global_position</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, keep_offsets: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-offset"><inline classes="std std-ref">set_offset</inline></reference>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-offsets-preset"><inline classes="std std-ref">set_offsets_preset</inline></reference>(preset: <reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference>, resize_mode: <reference internal="True" refid="enum-control-layoutpresetmode"><inline classes="std std-ref">LayoutPresetMode</inline></reference> = 0, margin: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-position"><inline classes="std std-ref">set_position</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, keep_offsets: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-set-size"><inline classes="std std-ref">set_size</inline></reference>(size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, keep_offsets: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-update-minimum-size"><inline classes="std std-ref">update_minimum_size</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-control-method-warp-mouse"><inline classes="std std-ref">warp_mouse</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-control-signal-focus-entered"></target>
            <paragraph classes="classref-signal" ids="class-control-signal-focus-entered" names="class_control_signal_focus_entered"><strong>focus_entered</strong>() <reference internal="True" refid="class-control-signal-focus-entered"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该节点获得焦点时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-signal-focus-exited"></target>
            <paragraph classes="classref-signal" ids="class-control-signal-focus-exited" names="class_control_signal_focus_exited"><strong>focus_exited</strong>() <reference internal="True" refid="class-control-signal-focus-exited"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该节点失去焦点时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-signal-gui-input"></target>
            <paragraph classes="classref-signal" ids="class-control-signal-gui-input" names="class_control_signal_gui_input"><strong>gui_input</strong>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>) <reference internal="True" refid="class-control-signal-gui-input"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当节点收到 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> 时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-signal-minimum-size-changed"></target>
            <paragraph classes="classref-signal" ids="class-control-signal-minimum-size-changed" names="class_control_signal_minimum_size_changed"><strong>minimum_size_changed</strong>() <reference internal="True" refid="class-control-signal-minimum-size-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当节点的最小大小更改时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-signal-mouse-entered"></target>
            <paragraph classes="classref-signal" ids="class-control-signal-mouse-entered" names="class_control_signal_mouse_entered"><strong>mouse_entered</strong>() <reference internal="True" refid="class-control-signal-mouse-entered"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标光标进入控件（或任何子控件）的可见区域时发出，可见区域即未被其他 Control 和 Window 遮挡的区域，需要 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 允许事件达到，与控件是否持有焦点无关。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_canvasitem#class-canvasitem-property-z-index"><inline classes="std std-ref">CanvasItem.z_index</inline></reference> 不影响哪个 Control 会收到信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-signal-mouse-exited"></target>
            <paragraph classes="classref-signal" ids="class-control-signal-mouse-exited" names="class_control_signal_mouse_exited"><strong>mouse_exited</strong>() <reference internal="True" refid="class-control-signal-mouse-exited"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标光标离开控件（或任何子控件）的可见区域时发出，可见区域即未被其他 Control 和 Window 遮挡的区域，需要 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 允许事件达到，与控件是否持有焦点无关。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_canvasitem#class-canvasitem-property-z-index"><inline classes="std std-ref">CanvasItem.z_index</inline></reference> 不影响哪个 Control 会收到信号。</paragraph>
            <paragraph><strong>注意：</strong>如果要忽略任何顶部节点，检查鼠标是否真的离开了该区域，可以使用如下代码：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _on_mouse_exited():
    if not Rect2(Vector2(), size).has_point(get_local_mouse_position()):
        # 未悬停在区域上。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-signal-resized"></target>
            <paragraph classes="classref-signal" ids="class-control-signal-resized" names="class_control_signal_resized"><strong>resized</strong>() <reference internal="True" refid="class-control-signal-resized"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当控件更改大小时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-signal-size-flags-changed"></target>
            <paragraph classes="classref-signal" ids="class-control-signal-size-flags-changed" names="class_control_signal_size_flags_changed"><strong>size_flags_changed</strong>() <reference internal="True" refid="class-control-signal-size-flags-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当大小标志之一更改时发出。见 <reference internal="True" refid="class-control-property-size-flags-horizontal"><inline classes="std std-ref">size_flags_horizontal</inline></reference> 和 <reference internal="True" refid="class-control-property-size-flags-vertical"><inline classes="std std-ref">size_flags_vertical</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-signal-theme-changed"></target>
            <paragraph classes="classref-signal" ids="class-control-signal-theme-changed" names="class_control_signal_theme_changed"><strong>theme_changed</strong>() <reference internal="True" refid="class-control-signal-theme-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>发送 <reference internal="True" refid="class-control-constant-notification-theme-changed"><inline classes="std std-ref">NOTIFICATION_THEME_CHANGED</inline></reference> 通知时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-control-focusmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-control-focusmode" names="enum_control_focusmode">enum <strong>FocusMode</strong>: <reference internal="True" refid="enum-control-focusmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-control-constant-focus-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-focus-none" names="class_control_constant_focus_none"><reference internal="True" refid="enum-control-focusmode"><inline classes="std std-ref">FocusMode</inline></reference> <strong>FOCUS_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>该节点无法获取焦点。在 <reference internal="True" refid="class-control-property-focus-mode"><inline classes="std std-ref">focus_mode</inline></reference> 中使用。</paragraph>
            <target refid="class-control-constant-focus-click"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-focus-click" names="class_control_constant_focus_click"><reference internal="True" refid="enum-control-focusmode"><inline classes="std std-ref">FocusMode</inline></reference> <strong>FOCUS_CLICK</strong> = <literal>1</literal></paragraph>
            <paragraph>该节点只能通过鼠标点击获取焦点。在 <reference internal="True" refid="class-control-property-focus-mode"><inline classes="std std-ref">focus_mode</inline></reference> 中使用。</paragraph>
            <target refid="class-control-constant-focus-all"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-focus-all" names="class_control_constant_focus_all"><reference internal="True" refid="enum-control-focusmode"><inline classes="std std-ref">FocusMode</inline></reference> <strong>FOCUS_ALL</strong> = <literal>2</literal></paragraph>
            <paragraph>该节点可以通过鼠标单击、使用键盘上的箭头和 Tab 键或使用游戏手柄上的方向键来获取焦点。用于 <reference internal="True" refid="class-control-property-focus-mode"><inline classes="std std-ref">focus_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-control-cursorshape"></target>
            <paragraph classes="classref-enumeration" ids="enum-control-cursorshape" names="enum_control_cursorshape">enum <strong>CursorShape</strong>: <reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-control-constant-cursor-arrow"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-arrow" names="class_control_constant_cursor_arrow"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_ARROW</strong> = <literal>0</literal></paragraph>
            <paragraph>当用户将节点悬停时，显示系统的箭头鼠标光标。与 <reference internal="True" refid="class-control-property-mouse-default-cursor-shape"><inline classes="std std-ref">mouse_default_cursor_shape</inline></reference> 成员一起使用。</paragraph>
            <target refid="class-control-constant-cursor-ibeam"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-ibeam" names="class_control_constant_cursor_ibeam"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_IBEAM</strong> = <literal>1</literal></paragraph>
            <paragraph>当用户将节点悬停时，显示系统的 I 型光束鼠标光标。工字梁指针的形状类似于“I”。它告诉用户他们可以突出显示或插入文本。</paragraph>
            <target refid="class-control-constant-cursor-pointing-hand"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-pointing-hand" names="class_control_constant_cursor_pointing_hand"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_POINTING_HAND</strong> = <literal>2</literal></paragraph>
            <paragraph>当用户将节点悬停时，显示系统的手形鼠标光标。</paragraph>
            <target refid="class-control-constant-cursor-cross"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-cross" names="class_control_constant_cursor_cross"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_CROSS</strong> = <literal>3</literal></paragraph>
            <paragraph>当用户将鼠标悬停在节点上时，显示系统的交叉鼠标光标。</paragraph>
            <target refid="class-control-constant-cursor-wait"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-wait" names="class_control_constant_cursor_wait"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_WAIT</strong> = <literal>4</literal></paragraph>
            <paragraph>当用户悬停节点时，显示系统等待的鼠标光标。通常是一个沙漏。</paragraph>
            <target refid="class-control-constant-cursor-busy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-busy" names="class_control_constant_cursor_busy"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_BUSY</strong> = <literal>5</literal></paragraph>
            <paragraph>当用户悬停节点时，显示系统繁忙的鼠标光标。通常是箭头加一个小沙漏。</paragraph>
            <target refid="class-control-constant-cursor-drag"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-drag" names="class_control_constant_cursor_drag"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_DRAG</strong> = <literal>6</literal></paragraph>
            <paragraph>当用户悬停在节点上时，显示系统的拖动鼠标光标，通常是一个闭合的拳头或十字符号。它告诉用户他们当前正在拖动一个项目，例如场景面板中的节点。</paragraph>
            <target refid="class-control-constant-cursor-can-drop"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-can-drop" names="class_control_constant_cursor_can_drop"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_CAN_DROP</strong> = <literal>7</literal></paragraph>
            <paragraph>当用户悬停节点时，显示系统的落地鼠标光标。它可以是一个张开的手。它告诉用户可以放下一个他们当前正在抓取的物品，比如场景面板中的一个节点。</paragraph>
            <target refid="class-control-constant-cursor-forbidden"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-forbidden" names="class_control_constant_cursor_forbidden"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_FORBIDDEN</strong> = <literal>8</literal></paragraph>
            <paragraph>当用户悬停节点时，显示系统禁止的鼠标光标。通常是一个交叉的圆圈。</paragraph>
            <target refid="class-control-constant-cursor-vsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-vsize" names="class_control_constant_cursor_vsize"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_VSIZE</strong> = <literal>9</literal></paragraph>
            <paragraph>当用户悬停节点时，显示系统的垂直调整鼠标光标。一个双头的垂直箭头。它告诉用户可以垂直调整窗口或面板的大小。</paragraph>
            <target refid="class-control-constant-cursor-hsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-hsize" names="class_control_constant_cursor_hsize"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_HSIZE</strong> = <literal>10</literal></paragraph>
            <paragraph>当用户悬停节点时，显示系统的水平调整鼠标光标。一个双头的水平箭头。它告诉用户可以水平调整窗口或面板的大小。</paragraph>
            <target refid="class-control-constant-cursor-bdiagsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-bdiagsize" names="class_control_constant_cursor_bdiagsize"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_BDIAGSIZE</strong> = <literal>11</literal></paragraph>
            <paragraph>当用户将节点悬停时，显示系统窗口调整大小的鼠标光标。光标是从左下角到右上角的双向箭头。它告诉用户可以水平和垂直调整窗口或面板的大小。</paragraph>
            <target refid="class-control-constant-cursor-fdiagsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-fdiagsize" names="class_control_constant_cursor_fdiagsize"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_FDIAGSIZE</strong> = <literal>12</literal></paragraph>
            <paragraph>当用户将节点悬停时，显示系统窗口调整大小的鼠标光标。光标是一个双向箭头，从左上角到右下角，与 <reference internal="True" refid="class-control-constant-cursor-bdiagsize"><inline classes="std std-ref">CURSOR_BDIAGSIZE</inline></reference> 相反。它告诉用户可以水平和垂直调整窗口或面板的大小。</paragraph>
            <target refid="class-control-constant-cursor-move"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-move" names="class_control_constant_cursor_move"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_MOVE</strong> = <literal>13</literal></paragraph>
            <paragraph>当用户将节点悬停时，显示系统的移动鼠标光标。它以 90 度角显示 2 个双向箭头。它告诉用户他们可以自由移动 UI 元素。</paragraph>
            <target refid="class-control-constant-cursor-vsplit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-vsplit" names="class_control_constant_cursor_vsplit"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_VSPLIT</strong> = <literal>14</literal></paragraph>
            <paragraph>当用户将节点悬停时，显示系统的垂直拆分鼠标光标。在 Windows 上与 <reference internal="True" refid="class-control-constant-cursor-vsize"><inline classes="std std-ref">CURSOR_VSIZE</inline></reference> 相同。</paragraph>
            <target refid="class-control-constant-cursor-hsplit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-hsplit" names="class_control_constant_cursor_hsplit"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_HSPLIT</strong> = <literal>15</literal></paragraph>
            <paragraph>当用户将节点悬停时，显示系统的水平拆分鼠标光标。在 Windows 上与 <reference internal="True" refid="class-control-constant-cursor-hsize"><inline classes="std std-ref">CURSOR_HSIZE</inline></reference> 相同。</paragraph>
            <target refid="class-control-constant-cursor-help"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-cursor-help" names="class_control_constant_cursor_help"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_HELP</strong> = <literal>16</literal></paragraph>
            <paragraph>当用户将节点悬停在一个节点上时，显示系统的帮助鼠标光标，一个问号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-control-layoutpreset"></target>
            <paragraph classes="classref-enumeration" ids="enum-control-layoutpreset" names="enum_control_layoutpreset">enum <strong>LayoutPreset</strong>: <reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-control-constant-preset-top-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-top-left" names="class_control_constant_preset_top_left"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_TOP_LEFT</strong> = <literal>0</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件边界的左上角。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-top-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-top-right" names="class_control_constant_preset_top_right"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_TOP_RIGHT</strong> = <literal>1</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件边界的右上角。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-bottom-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-bottom-left" names="class_control_constant_preset_bottom_left"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_BOTTOM_LEFT</strong> = <literal>2</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件边界的左下角。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-bottom-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-bottom-right" names="class_control_constant_preset_bottom_right"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_BOTTOM_RIGHT</strong> = <literal>3</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件边界的右下角。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-center-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-center-left" names="class_control_constant_preset_center_left"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_CENTER_LEFT</strong> = <literal>4</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件边界的左边缘的中点。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-center-top"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-center-top" names="class_control_constant_preset_center_top"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_CENTER_TOP</strong> = <literal>5</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件边界的顶边缘的中点。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-center-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-center-right" names="class_control_constant_preset_center_right"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_CENTER_RIGHT</strong> = <literal>6</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件边界的右边缘的中点。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-center-bottom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-center-bottom" names="class_control_constant_preset_center_bottom"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_CENTER_BOTTOM</strong> = <literal>7</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件边界的底边缘的中点。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-center"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-center" names="class_control_constant_preset_center"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_CENTER</strong> = <literal>8</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件边界的中心。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-left-wide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-left-wide" names="class_control_constant_preset_left_wide"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_LEFT_WIDE</strong> = <literal>9</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件的左边缘。左偏移量相对于父节点的左边缘，上偏移量相对于父节点的左上角。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-top-wide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-top-wide" names="class_control_constant_preset_top_wide"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_TOP_WIDE</strong> = <literal>10</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件的上边缘。左偏移量相对于父节点的左上角，上偏移量相对于父节点的上边缘，右偏移相对于父节点的右上角。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-right-wide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-right-wide" names="class_control_constant_preset_right_wide"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_RIGHT_WIDE</strong> = <literal>11</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件的右边缘。右偏移量相对于父节点的右边缘，上偏移量相对于父节点的右上角。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-bottom-wide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-bottom-wide" names="class_control_constant_preset_bottom_wide"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_BOTTOM_WIDE</strong> = <literal>12</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件的下边缘。左偏移量相对于父节点的左下角，下偏移量相对于父节点的下边缘，右偏移相对于父节点的右下角。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-vcenter-wide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-vcenter-wide" names="class_control_constant_preset_vcenter_wide"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_VCENTER_WIDE</strong> = <literal>13</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到一条垂直线，该垂直线将父控件切成两半。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-hcenter-wide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-hcenter-wide" names="class_control_constant_preset_hcenter_wide"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_HCENTER_WIDE</strong> = <literal>14</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到一条水平线，该水平线将父控件切成两半。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-preset-full-rect"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-full-rect" names="class_control_constant_preset_full_rect"><reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> <strong>PRESET_FULL_RECT</strong> = <literal>15</literal></paragraph>
            <paragraph>将所有 4 个锚点对齐到父控件对应的角。应用此预设后，会将所有 4 个偏移都设置为 0，该 <strong>Control</strong> 将适合其父控件。与 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 一起使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-control-layoutpresetmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-control-layoutpresetmode" names="enum_control_layoutpresetmode">enum <strong>LayoutPresetMode</strong>: <reference internal="True" refid="enum-control-layoutpresetmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-control-constant-preset-mode-minsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-mode-minsize" names="class_control_constant_preset_mode_minsize"><reference internal="True" refid="enum-control-layoutpresetmode"><inline classes="std std-ref">LayoutPresetMode</inline></reference> <strong>PRESET_MODE_MINSIZE</strong> = <literal>0</literal></paragraph>
            <paragraph>控件将被调整为最小尺寸。</paragraph>
            <target refid="class-control-constant-preset-mode-keep-width"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-mode-keep-width" names="class_control_constant_preset_mode_keep_width"><reference internal="True" refid="enum-control-layoutpresetmode"><inline classes="std std-ref">LayoutPresetMode</inline></reference> <strong>PRESET_MODE_KEEP_WIDTH</strong> = <literal>1</literal></paragraph>
            <paragraph>控件的宽度不会改变。</paragraph>
            <target refid="class-control-constant-preset-mode-keep-height"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-mode-keep-height" names="class_control_constant_preset_mode_keep_height"><reference internal="True" refid="enum-control-layoutpresetmode"><inline classes="std std-ref">LayoutPresetMode</inline></reference> <strong>PRESET_MODE_KEEP_HEIGHT</strong> = <literal>2</literal></paragraph>
            <paragraph>控件的高度不会改变。</paragraph>
            <target refid="class-control-constant-preset-mode-keep-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-preset-mode-keep-size" names="class_control_constant_preset_mode_keep_size"><reference internal="True" refid="enum-control-layoutpresetmode"><inline classes="std std-ref">LayoutPresetMode</inline></reference> <strong>PRESET_MODE_KEEP_SIZE</strong> = <literal>3</literal></paragraph>
            <paragraph>控件的大小不会改变。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-control-sizeflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-control-sizeflags" names="enum_control_sizeflags">flags <strong>SizeFlags</strong>: <reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-control-constant-size-shrink-begin"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-size-shrink-begin" names="class_control_constant_size_shrink_begin"><reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference> <strong>SIZE_SHRINK_BEGIN</strong> = <literal>0</literal></paragraph>
            <paragraph>告诉父级 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 将该节点与其起点对齐，即顶部或左侧。它与 <reference internal="True" refid="class-control-constant-size-fill"><inline classes="std std-ref">SIZE_FILL</inline></reference> 以及其他收缩大小标志互斥，但可以在某些容器中与 <reference internal="True" refid="class-control-constant-size-expand"><inline classes="std std-ref">SIZE_EXPAND</inline></reference> 一起使用。与 <reference internal="True" refid="class-control-property-size-flags-horizontal"><inline classes="std std-ref">size_flags_horizontal</inline></reference> 和 <reference internal="True" refid="class-control-property-size-flags-vertical"><inline classes="std std-ref">size_flags_vertical</inline></reference> 一起使用。</paragraph>
            <paragraph><strong>注意：</strong>设置这个标志相当于没有任何大小标志。</paragraph>
            <target refid="class-control-constant-size-fill"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-size-fill" names="class_control_constant_size_fill"><reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference> <strong>SIZE_FILL</strong> = <literal>1</literal></paragraph>
            <paragraph>告诉父级 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 扩展该节点的边界以填充所有可用空间，而无需推动任何其他节点。它与收缩大小标志互斥。与 <reference internal="True" refid="class-control-property-size-flags-horizontal"><inline classes="std std-ref">size_flags_horizontal</inline></reference> 和 <reference internal="True" refid="class-control-property-size-flags-vertical"><inline classes="std std-ref">size_flags_vertical</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-size-expand"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-size-expand" names="class_control_constant_size_expand"><reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference> <strong>SIZE_EXPAND</strong> = <literal>2</literal></paragraph>
            <paragraph>告诉父级 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 让该节点占用你标记的轴上的所有可用空间。如果将多个相邻节点设置为扩展，它们将根据其拉伸比共享空间。见 <reference internal="True" refid="class-control-property-size-flags-stretch-ratio"><inline classes="std std-ref">size_flags_stretch_ratio</inline></reference>。用于 <reference internal="True" refid="class-control-property-size-flags-horizontal"><inline classes="std std-ref">size_flags_horizontal</inline></reference> 和 <reference internal="True" refid="class-control-property-size-flags-vertical"><inline classes="std std-ref">size_flags_vertical</inline></reference>。</paragraph>
            <target refid="class-control-constant-size-expand-fill"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-size-expand-fill" names="class_control_constant_size_expand_fill"><reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference> <strong>SIZE_EXPAND_FILL</strong> = <literal>3</literal></paragraph>
            <paragraph>将该节点的大小标志设置为填充和扩展。有关详细信息，请参阅 <reference internal="True" refid="class-control-constant-size-fill"><inline classes="std std-ref">SIZE_FILL</inline></reference> 和 <reference internal="True" refid="class-control-constant-size-expand"><inline classes="std std-ref">SIZE_EXPAND</inline></reference>。</paragraph>
            <target refid="class-control-constant-size-shrink-center"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-size-shrink-center" names="class_control_constant_size_shrink_center"><reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference> <strong>SIZE_SHRINK_CENTER</strong> = <literal>4</literal></paragraph>
            <paragraph>告诉父级 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 将节点置于可用空间的中心。它与 <reference internal="True" refid="class-control-constant-size-fill"><inline classes="std std-ref">SIZE_FILL</inline></reference> 以及其他收缩大小标志互斥，但可以在某些容器中与 <reference internal="True" refid="class-control-constant-size-expand"><inline classes="std std-ref">SIZE_EXPAND</inline></reference> 一起使用。与 <reference internal="True" refid="class-control-property-size-flags-horizontal"><inline classes="std std-ref">size_flags_horizontal</inline></reference> 和 <reference internal="True" refid="class-control-property-size-flags-vertical"><inline classes="std std-ref">size_flags_vertical</inline></reference> 一起使用。</paragraph>
            <target refid="class-control-constant-size-shrink-end"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-size-shrink-end" names="class_control_constant_size_shrink_end"><reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference> <strong>SIZE_SHRINK_END</strong> = <literal>8</literal></paragraph>
            <paragraph>告诉父级 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 将节点与其末端对齐，即底部或右侧。它与 <reference internal="True" refid="class-control-constant-size-fill"><inline classes="std std-ref">SIZE_FILL</inline></reference> 以及其他收缩大小标志互斥，但可以在某些容器中与 <reference internal="True" refid="class-control-constant-size-expand"><inline classes="std std-ref">SIZE_EXPAND</inline></reference> 一起使用。与 <reference internal="True" refid="class-control-property-size-flags-horizontal"><inline classes="std std-ref">size_flags_horizontal</inline></reference> 和 <reference internal="True" refid="class-control-property-size-flags-vertical"><inline classes="std std-ref">size_flags_vertical</inline></reference> 一起使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-control-mousefilter"></target>
            <paragraph classes="classref-enumeration" ids="enum-control-mousefilter" names="enum_control_mousefilter">enum <strong>MouseFilter</strong>: <reference internal="True" refid="enum-control-mousefilter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-control-constant-mouse-filter-stop"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-mouse-filter-stop" names="class_control_constant_mouse_filter_stop"><reference internal="True" refid="enum-control-mousefilter"><inline classes="std std-ref">MouseFilter</inline></reference> <strong>MOUSE_FILTER_STOP</strong> = <literal>0</literal></paragraph>
            <paragraph>在控件上点击时，将通过 <reference internal="True" refid="class-control-private-method-gui-input"><inline classes="std std-ref">_gui_input</inline></reference> 收到鼠标移动输入事件和鼠标按钮输入事件。控件能够接收到 <reference internal="True" refid="class-control-signal-mouse-entered"><inline classes="std std-ref">mouse_entered</inline></reference> 和 <reference internal="True" refid="class-control-signal-mouse-exited"><inline classes="std std-ref">mouse_exited</inline></reference> 信号。这些事件将自动被标记为已处理，不会进一步传播到其他控件。这也会导致其他控件中的信号被阻止。</paragraph>
            <target refid="class-control-constant-mouse-filter-pass"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-mouse-filter-pass" names="class_control_constant_mouse_filter_pass"><reference internal="True" refid="enum-control-mousefilter"><inline classes="std std-ref">MouseFilter</inline></reference> <strong>MOUSE_FILTER_PASS</strong> = <literal>1</literal></paragraph>
            <paragraph>在控件上点击时，将通过 <reference internal="True" refid="class-control-private-method-gui-input"><inline classes="std std-ref">_gui_input</inline></reference> 收到鼠标移动输入事件和鼠标按钮输入事件。并且控件能够接收到 <reference internal="True" refid="class-control-signal-mouse-entered"><inline classes="std std-ref">mouse_entered</inline></reference> 和 <reference internal="True" refid="class-control-signal-mouse-exited"><inline classes="std std-ref">mouse_exited</inline></reference> 信号。如果此控件不处理事件，则将考虑其父控件（如果有的话），依此类推，直到没有更多的父控件可以处理该事件。这也允许信号在其他控件中触发。如果没有控件处理它，该事件将被传递到 <reference internal="True" refuri="class_node#class-node-private-method-shortcut-input"><inline classes="std std-ref">Node._shortcut_input</inline></reference> 进行进一步处理。</paragraph>
            <target refid="class-control-constant-mouse-filter-ignore"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-mouse-filter-ignore" names="class_control_constant_mouse_filter_ignore"><reference internal="True" refid="enum-control-mousefilter"><inline classes="std std-ref">MouseFilter</inline></reference> <strong>MOUSE_FILTER_IGNORE</strong> = <literal>2</literal></paragraph>
            <paragraph>在控件上点击时，不会通过 <reference internal="True" refid="class-control-private-method-gui-input"><inline classes="std std-ref">_gui_input</inline></reference> 收到鼠标移动输入事件和鼠标按钮输入事件，也不会接收到 <reference internal="True" refid="class-control-signal-mouse-entered"><inline classes="std std-ref">mouse_entered</inline></reference> 和 <reference internal="True" refid="class-control-signal-mouse-exited"><inline classes="std std-ref">mouse_exited</inline></reference> 信号。这不会阻止其他控件接收这些事件或触发信号。被忽略的事件将不会被自动处理。</paragraph>
            <paragraph><strong>注意：</strong>如果控件已收到 <reference internal="True" refid="class-control-signal-mouse-entered"><inline classes="std std-ref">mouse_entered</inline></reference> 但未收到 <reference internal="True" refid="class-control-signal-mouse-exited"><inline classes="std std-ref">mouse_exited</inline></reference>，则将 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 更改为 <reference internal="True" refid="class-control-constant-mouse-filter-ignore"><inline classes="std std-ref">MOUSE_FILTER_IGNORE</inline></reference> 将导致发出 <reference internal="True" refid="class-control-signal-mouse-exited"><inline classes="std std-ref">mouse_exited</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-control-growdirection"></target>
            <paragraph classes="classref-enumeration" ids="enum-control-growdirection" names="enum_control_growdirection">enum <strong>GrowDirection</strong>: <reference internal="True" refid="enum-control-growdirection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-control-constant-grow-direction-begin"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-grow-direction-begin" names="class_control_constant_grow_direction_begin"><reference internal="True" refid="enum-control-growdirection"><inline classes="std std-ref">GrowDirection</inline></reference> <strong>GROW_DIRECTION_BEGIN</strong> = <literal>0</literal></paragraph>
            <paragraph>如果控件的最小尺寸更改为大于其相应轴上的当前尺寸，则控件将向左或顶部增大以进行组合。</paragraph>
            <target refid="class-control-constant-grow-direction-end"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-grow-direction-end" names="class_control_constant_grow_direction_end"><reference internal="True" refid="enum-control-growdirection"><inline classes="std std-ref">GrowDirection</inline></reference> <strong>GROW_DIRECTION_END</strong> = <literal>1</literal></paragraph>
            <paragraph>如果控件的最小尺寸更改为大于其相应轴上的当前尺寸，则控件将向右或向下增大以进行补偿。</paragraph>
            <target refid="class-control-constant-grow-direction-both"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-grow-direction-both" names="class_control_constant_grow_direction_both"><reference internal="True" refid="enum-control-growdirection"><inline classes="std std-ref">GrowDirection</inline></reference> <strong>GROW_DIRECTION_BOTH</strong> = <literal>2</literal></paragraph>
            <paragraph>如果控件的最小大小更改为大于其当前大小，则控件将在两个方向上均等地增长以组成该控件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-control-anchor"></target>
            <paragraph classes="classref-enumeration" ids="enum-control-anchor" names="enum_control_anchor">enum <strong>Anchor</strong>: <reference internal="True" refid="enum-control-anchor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-control-constant-anchor-begin"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-anchor-begin" names="class_control_constant_anchor_begin"><reference internal="True" refid="enum-control-anchor"><inline classes="std std-ref">Anchor</inline></reference> <strong>ANCHOR_BEGIN</strong> = <literal>0</literal></paragraph>
            <paragraph>将 4 个锚点的某一侧吸附到节点的 <literal>Rect</literal> 的左上角。在 <literal>anchor_*</literal> 成员变量中使用，例如 <reference internal="True" refid="class-control-property-anchor-left"><inline classes="std std-ref">anchor_left</inline></reference>。要一次更改全部 4 个锚点，请使用 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference>。</paragraph>
            <target refid="class-control-constant-anchor-end"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-anchor-end" names="class_control_constant_anchor_end"><reference internal="True" refid="enum-control-anchor"><inline classes="std std-ref">Anchor</inline></reference> <strong>ANCHOR_END</strong> = <literal>1</literal></paragraph>
            <paragraph>将 4 个锚点的某一侧吸附到节点的 <literal>Rect</literal> 的右下角。在 <literal>anchor_*</literal> 成员变量中使用，例如 <reference internal="True" refid="class-control-property-anchor-left"><inline classes="std std-ref">anchor_left</inline></reference>。要一次更改全部 4 个锚点，请使用 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-control-layoutdirection"></target>
            <paragraph classes="classref-enumeration" ids="enum-control-layoutdirection" names="enum_control_layoutdirection">enum <strong>LayoutDirection</strong>: <reference internal="True" refid="enum-control-layoutdirection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-control-constant-layout-direction-inherited"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-layout-direction-inherited" names="class_control_constant_layout_direction_inherited"><reference internal="True" refid="enum-control-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> <strong>LAYOUT_DIRECTION_INHERITED</strong> = <literal>0</literal></paragraph>
            <paragraph>自动布局方向，由父控件布局方向决定。</paragraph>
            <target refid="class-control-constant-layout-direction-locale"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-layout-direction-locale" names="class_control_constant_layout_direction_locale"><reference internal="True" refid="enum-control-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> <strong>LAYOUT_DIRECTION_LOCALE</strong> = <literal>1</literal></paragraph>
            <paragraph>自动布局方向，根据当前语言环境确定。</paragraph>
            <target refid="class-control-constant-layout-direction-ltr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-layout-direction-ltr" names="class_control_constant_layout_direction_ltr"><reference internal="True" refid="enum-control-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> <strong>LAYOUT_DIRECTION_LTR</strong> = <literal>2</literal></paragraph>
            <paragraph>从左至右的布局方向。</paragraph>
            <target refid="class-control-constant-layout-direction-rtl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-layout-direction-rtl" names="class_control_constant_layout_direction_rtl"><reference internal="True" refid="enum-control-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> <strong>LAYOUT_DIRECTION_RTL</strong> = <literal>3</literal></paragraph>
            <paragraph>从右至左的布局方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-control-textdirection"></target>
            <paragraph classes="classref-enumeration" ids="enum-control-textdirection" names="enum_control_textdirection">enum <strong>TextDirection</strong>: <reference internal="True" refid="enum-control-textdirection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-control-constant-text-direction-inherited"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-text-direction-inherited" names="class_control_constant_text_direction_inherited"><reference internal="True" refid="enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>TEXT_DIRECTION_INHERITED</strong> = <literal>3</literal></paragraph>
            <paragraph>文字书写方向与布局方向相同。</paragraph>
            <target refid="class-control-constant-text-direction-auto"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-text-direction-auto" names="class_control_constant_text_direction_auto"><reference internal="True" refid="enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>TEXT_DIRECTION_AUTO</strong> = <literal>0</literal></paragraph>
            <paragraph>自动文本书写方向，根据当前区域设置和文本内容确定。</paragraph>
            <target refid="class-control-constant-text-direction-ltr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-text-direction-ltr" names="class_control_constant_text_direction_ltr"><reference internal="True" refid="enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>TEXT_DIRECTION_LTR</strong> = <literal>1</literal></paragraph>
            <paragraph>从左至右的文本书写方向。</paragraph>
            <target refid="class-control-constant-text-direction-rtl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-control-constant-text-direction-rtl" names="class_control_constant_text_direction_rtl"><reference internal="True" refid="enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>TEXT_DIRECTION_RTL</strong> = <literal>2</literal></paragraph>
            <paragraph>从右至左的文本书写方向。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="常量">
            <title>常量</title>
            <target refid="class-control-constant-notification-resized"></target>
            <paragraph classes="classref-constant" ids="class-control-constant-notification-resized" names="class_control_constant_notification_resized"><strong>NOTIFICATION_RESIZED</strong> = <literal>40</literal> <reference internal="True" refid="class-control-constant-notification-resized"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当节点改变大小时发送。请使用 <reference internal="True" refid="class-control-property-size"><inline classes="std std-ref">size</inline></reference> 获取新大小。</paragraph>
            <target refid="class-control-constant-notification-mouse-enter"></target>
            <paragraph classes="classref-constant" ids="class-control-constant-notification-mouse-enter" names="class_control_constant_notification_mouse_enter"><strong>NOTIFICATION_MOUSE_ENTER</strong> = <literal>41</literal> <reference internal="True" refid="class-control-constant-notification-mouse-enter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标光标进入控件（或任何子控件）的可见区域时发送，可见区域即未被其他 Control 和 Window 遮挡的区域，需要 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 允许事件达到，与控件是否持有焦点无关。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_canvasitem#class-canvasitem-property-z-index"><inline classes="std std-ref">CanvasItem.z_index</inline></reference> 不影响哪个 Control 会收到该通知。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-control-constant-notification-mouse-enter-self"><inline classes="std std-ref">NOTIFICATION_MOUSE_ENTER_SELF</inline></reference>。</paragraph>
            <target refid="class-control-constant-notification-mouse-exit"></target>
            <paragraph classes="classref-constant" ids="class-control-constant-notification-mouse-exit" names="class_control_constant_notification_mouse_exit"><strong>NOTIFICATION_MOUSE_EXIT</strong> = <literal>42</literal> <reference internal="True" refid="class-control-constant-notification-mouse-exit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标光标离开控件（以及所有子控件）的可见区域时发送，可见区域即未被其他 Control 和 Window 遮挡的区域，需要 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 允许事件达到，与控件是否持有焦点无关。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_canvasitem#class-canvasitem-property-z-index"><inline classes="std std-ref">CanvasItem.z_index</inline></reference> 不影响哪个 Control 会收到该通知。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-control-constant-notification-mouse-exit-self"><inline classes="std std-ref">NOTIFICATION_MOUSE_EXIT_SELF</inline></reference>。</paragraph>
            <target refid="class-control-constant-notification-mouse-enter-self"></target>
            <paragraph classes="classref-constant" ids="class-control-constant-notification-mouse-enter-self" names="class_control_constant_notification_mouse_enter_self"><strong>NOTIFICATION_MOUSE_ENTER_SELF</strong> = <literal>60</literal> <reference internal="True" refid="class-control-constant-notification-mouse-enter-self"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>实验性：</strong> The reason this notification is sent may change in the future.</paragraph>
            <paragraph>当鼠标光标进入控件的可见区域时发送，可见区域即未被其他 Control 和 Window 遮挡的区域，需要 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 允许事件达到，与控件是否持有焦点无关。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_canvasitem#class-canvasitem-property-z-index"><inline classes="std std-ref">CanvasItem.z_index</inline></reference> 不影响哪个 Control 会收到该通知。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-control-constant-notification-mouse-enter"><inline classes="std std-ref">NOTIFICATION_MOUSE_ENTER</inline></reference>。</paragraph>
            <target refid="class-control-constant-notification-mouse-exit-self"></target>
            <paragraph classes="classref-constant" ids="class-control-constant-notification-mouse-exit-self" names="class_control_constant_notification_mouse_exit_self"><strong>NOTIFICATION_MOUSE_EXIT_SELF</strong> = <literal>61</literal> <reference internal="True" refid="class-control-constant-notification-mouse-exit-self"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>实验性：</strong> The reason this notification is sent may change in the future.</paragraph>
            <paragraph>当鼠标光标离开控件的可见区域时发送，可见区域即未被其他 Control 和 Window 遮挡的区域，需要 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 允许事件达到，与控件是否持有焦点无关。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_canvasitem#class-canvasitem-property-z-index"><inline classes="std std-ref">CanvasItem.z_index</inline></reference> 不影响哪个 Control 会收到该通知。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-control-constant-notification-mouse-exit"><inline classes="std std-ref">NOTIFICATION_MOUSE_EXIT</inline></reference>。</paragraph>
            <target refid="class-control-constant-notification-focus-enter"></target>
            <paragraph classes="classref-constant" ids="class-control-constant-notification-focus-enter" names="class_control_constant_notification_focus_enter"><strong>NOTIFICATION_FOCUS_ENTER</strong> = <literal>43</literal> <reference internal="True" refid="class-control-constant-notification-focus-enter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当节点获得焦点时发送。</paragraph>
            <target refid="class-control-constant-notification-focus-exit"></target>
            <paragraph classes="classref-constant" ids="class-control-constant-notification-focus-exit" names="class_control_constant_notification_focus_exit"><strong>NOTIFICATION_FOCUS_EXIT</strong> = <literal>44</literal> <reference internal="True" refid="class-control-constant-notification-focus-exit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当节点失去焦点时发送。</paragraph>
            <target refid="class-control-constant-notification-theme-changed"></target>
            <paragraph classes="classref-constant" ids="class-control-constant-notification-theme-changed" names="class_control_constant_notification_theme_changed"><strong>NOTIFICATION_THEME_CHANGED</strong> = <literal>45</literal> <reference internal="True" refid="class-control-constant-notification-theme-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当节点需要刷新其主题项目时发送。发送时机如下：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>该节点或其任何祖先节点上的 <reference internal="True" refid="class-control-property-theme"><inline classes="std std-ref">theme</inline></reference> 属性被更改。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>该节点上的 <reference internal="True" refid="class-control-property-theme-type-variation"><inline classes="std std-ref">theme_type_variation</inline></reference> 属性被更改。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>该节点的某个主题属性覆盖被更改。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>该节点进入场景树。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>注意：</strong>作为一种优化，当该节点在场景树之外时，发生的更改不会发送该通知。相反，所有的主题项更新可以在该节点进入场景树时一次性应用。</paragraph>
            <paragraph><strong>注意：</strong>该通知与 <reference internal="True" refuri="class_node#class-node-constant-notification-enter-tree"><inline classes="std std-ref">Node.NOTIFICATION_ENTER_TREE</inline></reference> 一同发送，因此，如果你是在实例化场景，那么此时子节点尚未初始化。可以在该通知中设置该节点的主题和用脚本创建的节点的主题，如果你想要访问编辑器中添加的子节点，请使用 <reference internal="True" refuri="class_node#class-node-method-is-node-ready"><inline classes="std std-ref">Node.is_node_ready</inline></reference> 确认节点已就绪。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _notification(what):
    if what == NOTIFICATION_THEME_CHANGED:
        if not is_node_ready():
            await ready # 等待就绪信号。
        $Label.add_theme_color_override("font_color", Color.YELLOW)</literal_block>
            <target refid="class-control-constant-notification-scroll-begin"></target>
            <paragraph classes="classref-constant" ids="class-control-constant-notification-scroll-begin" names="class_control_constant_notification_scroll_begin"><strong>NOTIFICATION_SCROLL_BEGIN</strong> = <literal>47</literal> <reference internal="True" refid="class-control-constant-notification-scroll-begin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该节点位于 <reference internal="True" refuri="class_scrollcontainer#class-scrollcontainer"><inline classes="std std-ref">ScrollContainer</inline></reference> 内部时发送，该容器在通过<emphasis>触摸事件</emphasis>拖动该可滚动区域时已开始滚动。通过拖动滚动条滚动、使用鼠标滚轮滚动、或使用键盘/游戏手柄事件滚动时，<emphasis>不</emphasis>会发送该通知。</paragraph>
            <paragraph><strong>注意：</strong>该信号仅会在 Android、iOS、桌面、Web 平台上发出，在桌面/Web 平台上需要启用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-devices-pointing-emulate-touch-from-mouse"><inline classes="std std-ref">ProjectSettings.input_devices/pointing/emulate_touch_from_mouse</inline></reference>。</paragraph>
            <target refid="class-control-constant-notification-scroll-end"></target>
            <paragraph classes="classref-constant" ids="class-control-constant-notification-scroll-end" names="class_control_constant_notification_scroll_end"><strong>NOTIFICATION_SCROLL_END</strong> = <literal>48</literal> <reference internal="True" refid="class-control-constant-notification-scroll-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该节点位于 <reference internal="True" refuri="class_scrollcontainer#class-scrollcontainer"><inline classes="std std-ref">ScrollContainer</inline></reference> 内部时发送，该容器在通过<emphasis>触摸事件</emphasis>拖动该可滚动区域时已停止滚动。通过拖动滚动条滚动、使用鼠标滚轮滚动、或使用键盘/游戏手柄事件滚动时，<emphasis>不</emphasis>会发送该通知。</paragraph>
            <paragraph><strong>注意：</strong>该信号仅会在 Android、iOS、桌面、Web 平台上发出，在桌面/Web 平台上需要启用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-devices-pointing-emulate-touch-from-mouse"><inline classes="std std-ref">ProjectSettings.input_devices/pointing/emulate_touch_from_mouse</inline></reference>。</paragraph>
            <target refid="class-control-constant-notification-layout-direction-changed"></target>
            <paragraph classes="classref-constant" ids="class-control-constant-notification-layout-direction-changed" names="class_control_constant_notification_layout_direction_changed"><strong>NOTIFICATION_LAYOUT_DIRECTION_CHANGED</strong> = <literal>49</literal> <reference internal="True" refid="class-control-constant-notification-layout-direction-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当控件的布局方向改变时发送。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-control-property-anchor-bottom"></target>
            <paragraph classes="classref-property" ids="class-control-property-anchor-bottom" names="class_control_property_anchor_bottom"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>anchor_bottom</strong> = <literal>0.0</literal> <reference internal="True" refid="class-control-property-anchor-bottom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_anchor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将节点的底部边缘锚定到父控件的原点、中心或末端。会改变该节点发生移动或改变大小时底部偏移量的更新方式。方便起见，你可以使用 <reference internal="True" refid="enum-control-anchor"><inline classes="std std-ref">Anchor</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-anchor-left"></target>
            <paragraph classes="classref-property" ids="class-control-property-anchor-left" names="class_control_property_anchor_left"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>anchor_left</strong> = <literal>0.0</literal> <reference internal="True" refid="class-control-property-anchor-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_anchor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将节点的左侧边缘锚定到父控件的原点、中心或末端。会改变该节点发生移动或改变大小时左侧偏移量的更新方式。方便起见，你可以使用 <reference internal="True" refid="enum-control-anchor"><inline classes="std std-ref">Anchor</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-anchor-right"></target>
            <paragraph classes="classref-property" ids="class-control-property-anchor-right" names="class_control_property_anchor_right"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>anchor_right</strong> = <literal>0.0</literal> <reference internal="True" refid="class-control-property-anchor-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_anchor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将节点的右侧边缘锚定到父控件的原点、中心或末端。会改变该节点发生移动或改变大小时右侧偏移量的更新方式。方便起见，你可以使用 <reference internal="True" refid="enum-control-anchor"><inline classes="std std-ref">Anchor</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-anchor-top"></target>
            <paragraph classes="classref-property" ids="class-control-property-anchor-top" names="class_control_property_anchor_top"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>anchor_top</strong> = <literal>0.0</literal> <reference internal="True" refid="class-control-property-anchor-top"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_anchor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将节点的顶部边缘锚定到父控件的原点、中心或末端。会改变该节点发生移动或改变大小时顶部偏移量的更新方式。方便起见，你可以使用 <reference internal="True" refid="enum-control-anchor"><inline classes="std std-ref">Anchor</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-auto-translate"></target>
            <paragraph classes="classref-property" ids="class-control-property-auto-translate" names="class_control_property_auto_translate"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>auto_translate</strong> <reference internal="True" refid="class-control-property-auto-translate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_auto_translate</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_auto_translating</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_node#class-node-property-auto-translate-mode"><inline classes="std std-ref">Node.auto_translate_mode</inline></reference> instead.</paragraph>
            <paragraph>切换是否所有文本都应该根据当前区域设置自动变为翻译后的版本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-clip-contents"></target>
            <paragraph classes="classref-property" ids="class-control-property-clip-contents" names="class_control_property_clip_contents"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>clip_contents</strong> = <literal>false</literal> <reference internal="True" refid="class-control-property-clip-contents"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clip_contents</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_clipping_contents</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>渲染基于 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 的子节点时，是否应剪裁到该控件的矩形中。如果为 <literal>true</literal>，则子节点显示在该控件的矩形范围之外的部分，不会渲染，也不会接收输入。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-custom-minimum-size"></target>
            <paragraph classes="classref-property" ids="class-control-property-custom-minimum-size" names="class_control_property_custom_minimum_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>custom_minimum_size</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-control-property-custom-minimum-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_minimum_size</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_custom_minimum_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>节点边界矩形的最小尺寸。如果你将它设置为大于 <literal>(0, 0)</literal> 的值，节点的边界矩形将始终至少有这个大小。请注意，<strong>Control</strong> 节点的 <reference internal="True" refid="class-control-method-get-minimum-size"><inline classes="std std-ref">get_minimum_size</inline></reference> 会返回内部最小尺寸，是由控件中的文本、纹理、样式盒等内容决定的，实际的最小尺寸是该属性与内部最小尺寸中的较大值（见 <reference internal="True" refid="class-control-method-get-combined-minimum-size"><inline classes="std std-ref">get_combined_minimum_size</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-focus-mode"></target>
            <paragraph classes="classref-property" ids="class-control-property-focus-mode" names="class_control_property_focus_mode"><reference internal="True" refid="enum-control-focusmode"><inline classes="std std-ref">FocusMode</inline></reference> <strong>focus_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-control-property-focus-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_focus_mode</strong>(value: <reference internal="True" refid="enum-control-focusmode"><inline classes="std std-ref">FocusMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-control-focusmode"><inline classes="std std-ref">FocusMode</inline></reference> <strong>get_focus_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该控件的焦点访问模式（“无”“单击”或“全部”）。只能同时聚焦一个控件，该控件会收到键盘、手柄以及鼠标的信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-focus-neighbor-bottom"></target>
            <paragraph classes="classref-property" ids="class-control-property-focus-neighbor-bottom" names="class_control_property_focus_neighbor_bottom"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>focus_neighbor_bottom</strong> = <literal>NodePath("")</literal> <reference internal="True" refid="class-control-property-focus-neighbor-bottom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_focus_neighbor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, neighbor: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_focus_neighbor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>告诉 Godot 当用户按下键盘上的下方向键或游戏手柄上的下方向键时，默认应该将焦点移交给哪个节点。你可以通过编辑输入动作 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-ui-down"><inline classes="std std-ref">ProjectSettings.input/ui_down</inline></reference> 来修改具体的按键。该节点必须为 <strong>Control</strong>。如果未设置这个属性，Godot 会将焦点移交给该节点下方距离最近的 <strong>Control</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-focus-neighbor-left"></target>
            <paragraph classes="classref-property" ids="class-control-property-focus-neighbor-left" names="class_control_property_focus_neighbor_left"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>focus_neighbor_left</strong> = <literal>NodePath("")</literal> <reference internal="True" refid="class-control-property-focus-neighbor-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_focus_neighbor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, neighbor: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_focus_neighbor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>告诉 Godot 当用户按下键盘上的左方向键或游戏手柄上的左方向键时，默认应该将焦点移交给哪个节点。你可以通过编辑输入动作 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-ui-left"><inline classes="std std-ref">ProjectSettings.input/ui_left</inline></reference> 来修改具体的按键。该节点必须为 <strong>Control</strong>。如果未设置这个属性，Godot 会将焦点移交给该节点左侧距离最近的 <strong>Control</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-focus-neighbor-right"></target>
            <paragraph classes="classref-property" ids="class-control-property-focus-neighbor-right" names="class_control_property_focus_neighbor_right"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>focus_neighbor_right</strong> = <literal>NodePath("")</literal> <reference internal="True" refid="class-control-property-focus-neighbor-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_focus_neighbor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, neighbor: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_focus_neighbor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>告诉 Godot 当用户按下键盘上的右方向键或游戏手柄上的右方向键时，默认应该将焦点移交给哪个节点。你可以通过编辑输入动作 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-ui-right"><inline classes="std std-ref">ProjectSettings.input/ui_right</inline></reference> 来修改具体的按键。该节点必须为 <strong>Control</strong>。如果未设置这个属性，Godot 会将焦点移交给该节点右侧距离最近的 <strong>Control</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-focus-neighbor-top"></target>
            <paragraph classes="classref-property" ids="class-control-property-focus-neighbor-top" names="class_control_property_focus_neighbor_top"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>focus_neighbor_top</strong> = <literal>NodePath("")</literal> <reference internal="True" refid="class-control-property-focus-neighbor-top"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_focus_neighbor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, neighbor: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_focus_neighbor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>告诉 Godot 当用户按下键盘上的下方向键或游戏手柄上的下方向键时，默认应该将焦点移交给哪个节点。你可以通过编辑输入动作 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-ui-up"><inline classes="std std-ref">ProjectSettings.input/ui_up</inline></reference> 来修改具体的按键。该节点必须为 <strong>Control</strong>。如果未设置这个属性，Godot 会将焦点移交给该节点上方距离最近的 <strong>Control</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-focus-next"></target>
            <paragraph classes="classref-property" ids="class-control-property-focus-next" names="class_control_property_focus_next"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>focus_next</strong> = <literal>NodePath("")</literal> <reference internal="True" refid="class-control-property-focus-next"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_focus_next</strong>(value: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_focus_next</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>告诉 Godot 在默认情况下，当用户按下键盘上的 <literal classes="kbd">Tab</literal> 时，应将焦点交给哪个节点。你可以通过编辑 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-ui-focus-next"><inline classes="std std-ref">ProjectSettings.input/ui_focus_next</inline></reference> 的输入动作来更改按键。</paragraph>
            <paragraph>如果未设置此属性，则 Godot 会将根据场景树中的附近节点选择一个“最佳猜测”。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-focus-previous"></target>
            <paragraph classes="classref-property" ids="class-control-property-focus-previous" names="class_control_property_focus_previous"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>focus_previous</strong> = <literal>NodePath("")</literal> <reference internal="True" refid="class-control-property-focus-previous"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_focus_previous</strong>(value: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_focus_previous</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>告诉 Godot 在默认情况下，当用户按下键盘上的 <literal classes="kbd">Shift + Tab</literal> 时，应将焦点交给哪个节点。你可以通过编辑 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-ui-focus-prev"><inline classes="std std-ref">ProjectSettings.input/ui_focus_prev</inline></reference> 的输入动作来更改按键。</paragraph>
            <paragraph>如果未设置此属性，则 Godot 会将根据场景树中的附近节点选择一个“最佳猜测”。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-global-position"></target>
            <paragraph classes="classref-property" ids="class-control-property-global-position" names="class_control_property_global_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>global_position</strong> <reference internal="True" refid="class-control-property-global-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_global_position</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点的全局位置，相对于世界（通常为 <reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-grow-horizontal"></target>
            <paragraph classes="classref-property" ids="class-control-property-grow-horizontal" names="class_control_property_grow_horizontal"><reference internal="True" refid="enum-control-growdirection"><inline classes="std std-ref">GrowDirection</inline></reference> <strong>grow_horizontal</strong> = <literal>1</literal> <reference internal="True" refid="class-control-property-grow-horizontal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_h_grow_direction</strong>(value: <reference internal="True" refid="enum-control-growdirection"><inline classes="std std-ref">GrowDirection</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-control-growdirection"><inline classes="std std-ref">GrowDirection</inline></reference> <strong>get_h_grow_direction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制水平轴的方向，如果控件的水平最小尺寸更改为大于其当前尺寸，则控件应沿水平轴增长，因为控件始终必须至少为最小尺寸。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-grow-vertical"></target>
            <paragraph classes="classref-property" ids="class-control-property-grow-vertical" names="class_control_property_grow_vertical"><reference internal="True" refid="enum-control-growdirection"><inline classes="std std-ref">GrowDirection</inline></reference> <strong>grow_vertical</strong> = <literal>1</literal> <reference internal="True" refid="class-control-property-grow-vertical"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_v_grow_direction</strong>(value: <reference internal="True" refid="enum-control-growdirection"><inline classes="std std-ref">GrowDirection</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-control-growdirection"><inline classes="std std-ref">GrowDirection</inline></reference> <strong>get_v_grow_direction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制控件在垂直轴上的方向，如果控件的垂直最小尺寸更改为大于当前尺寸，则控件应沿该方向增大，因为控件始终必须至少为最小尺寸。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-layout-direction"></target>
            <paragraph classes="classref-property" ids="class-control-property-layout-direction" names="class_control_property_layout_direction"><reference internal="True" refid="enum-control-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> <strong>layout_direction</strong> = <literal>0</literal> <reference internal="True" refid="class-control-property-layout-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_layout_direction</strong>(value: <reference internal="True" refid="enum-control-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-control-layoutdirection"><inline classes="std std-ref">LayoutDirection</inline></reference> <strong>get_layout_direction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制布局方向和文本书写方向。某些语言需要从右至左的布局（例如阿拉伯语和希伯来语）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-localize-numeral-system"></target>
            <paragraph classes="classref-property" ids="class-control-property-localize-numeral-system" names="class_control_property_localize_numeral_system"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>localize_numeral_system</strong> = <literal>true</literal> <reference internal="True" refid="class-control-property-localize-numeral-system"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_localize_numeral_system</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_localizing_numeral_system</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会自动将代码行号、列表索引号、<reference internal="True" refuri="class_spinbox#class-spinbox"><inline classes="std std-ref">SpinBox</inline></reference> 和 <reference internal="True" refuri="class_progressbar#class-progressbar"><inline classes="std std-ref">ProgressBar</inline></reference> 的值，从阿拉伯数字（0..9）转换为当前区域设置所使用的记数系统。</paragraph>
            <paragraph><strong>注意：</strong>不会自动转换文本中的数字，可以使用 <reference internal="True" refuri="class_textserver#class-textserver-method-format-number"><inline classes="std std-ref">TextServer.format_number</inline></reference> 手动转换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-mouse-default-cursor-shape"></target>
            <paragraph classes="classref-property" ids="class-control-property-mouse-default-cursor-shape" names="class_control_property_mouse_default_cursor_shape"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>mouse_default_cursor_shape</strong> = <literal>0</literal> <reference internal="True" refid="class-control-property-mouse-default-cursor-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_cursor_shape</strong>(value: <reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>get_default_cursor_shape</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>此控件的默认光标形状。对于 Godot 插件和使用系统鼠标光标的应用程序或游戏很有用。</paragraph>
            <paragraph><strong>注意：</strong>在 Linux 上，形状可能会有所不同，具体取决于系统的光标主题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-mouse-filter"></target>
            <paragraph classes="classref-property" ids="class-control-property-mouse-filter" names="class_control_property_mouse_filter"><reference internal="True" refid="enum-control-mousefilter"><inline classes="std std-ref">MouseFilter</inline></reference> <strong>mouse_filter</strong> = <literal>0</literal> <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_mouse_filter</strong>(value: <reference internal="True" refid="enum-control-mousefilter"><inline classes="std std-ref">MouseFilter</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-control-mousefilter"><inline classes="std std-ref">MouseFilter</inline></reference> <strong>get_mouse_filter</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制控件是否能够通过 <reference internal="True" refid="class-control-private-method-gui-input"><inline classes="std std-ref">_gui_input</inline></reference> 接收鼠标按钮输入事件，以及如何处理这些事件。还控制控件是否能接收 <reference internal="True" refid="class-control-signal-mouse-entered"><inline classes="std std-ref">mouse_entered</inline></reference> 和 <reference internal="True" refid="class-control-signal-mouse-exited"><inline classes="std std-ref">mouse_exited</inline></reference> 信号。参阅常量来了解每个常量的作用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-mouse-force-pass-scroll-events"></target>
            <paragraph classes="classref-property" ids="class-control-property-mouse-force-pass-scroll-events" names="class_control_property_mouse_force_pass_scroll_events"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>mouse_force_pass_scroll_events</strong> = <literal>true</literal> <reference internal="True" refid="class-control-property-mouse-force-pass-scroll-events"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_force_pass_scroll_events</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_force_pass_scroll_events</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>启用后，即使 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 被设置为 <reference internal="True" refid="class-control-constant-mouse-filter-stop"><inline classes="std std-ref">MOUSE_FILTER_STOP</inline></reference>，由 <reference internal="True" refid="class-control-private-method-gui-input"><inline classes="std std-ref">_gui_input</inline></reference> 处理的滚轮事件也会被传递给父控件。由于它默认为“真”，这允许嵌套的可滚动容器可以开箱即用。</paragraph>
            <paragraph>如果不希望滚动事件进入 <reference internal="True" refuri="class_node#class-node-private-method-unhandled-input"><inline classes="std std-ref">Node._unhandled_input</inline></reference> 处理，则应该在用户界面的根部禁用它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-offset-bottom"></target>
            <paragraph classes="classref-property" ids="class-control-property-offset-bottom" names="class_control_property_offset_bottom"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>offset_bottom</strong> = <literal>0.0</literal> <reference internal="True" refid="class-control-property-offset-bottom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offset</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_offset</strong>(offset: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点底部边缘与其父控件之间的距离，基于 <reference internal="True" refid="class-control-property-anchor-bottom"><inline classes="std std-ref">anchor_bottom</inline></reference>。</paragraph>
            <paragraph>偏移量通常由一个或多个父 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 节点控制，因此如果你的节点是 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 的直接子节点，则不应进行手动修改。移动节点或调整节点大小时，偏移量会自动更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-offset-left"></target>
            <paragraph classes="classref-property" ids="class-control-property-offset-left" names="class_control_property_offset_left"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>offset_left</strong> = <literal>0.0</literal> <reference internal="True" refid="class-control-property-offset-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offset</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_offset</strong>(offset: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点左侧边缘与其父控件之间的距离，基于 <reference internal="True" refid="class-control-property-anchor-left"><inline classes="std std-ref">anchor_left</inline></reference>。</paragraph>
            <paragraph>偏移量通常由一个或多个父 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 节点控制，因此如果你的节点是 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 的直接子节点，则不应进行手动修改。移动节点或调整节点大小时，偏移量会自动更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-offset-right"></target>
            <paragraph classes="classref-property" ids="class-control-property-offset-right" names="class_control_property_offset_right"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>offset_right</strong> = <literal>0.0</literal> <reference internal="True" refid="class-control-property-offset-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offset</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_offset</strong>(offset: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点右侧边缘与其父控件之间的距离，基于 <reference internal="True" refid="class-control-property-anchor-right"><inline classes="std std-ref">anchor_right</inline></reference>。</paragraph>
            <paragraph>偏移量通常由一个或多个父 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 节点控制，因此如果你的节点是 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 的直接子节点，则不应进行手动修改。移动节点或调整节点大小时，偏移量会自动更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-offset-top"></target>
            <paragraph classes="classref-property" ids="class-control-property-offset-top" names="class_control_property_offset_top"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>offset_top</strong> = <literal>0.0</literal> <reference internal="True" refid="class-control-property-offset-top"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offset</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_offset</strong>(offset: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点顶部边缘与其父控件之间的距离，基于 <reference internal="True" refid="class-control-property-anchor-top"><inline classes="std std-ref">anchor_top</inline></reference>。</paragraph>
            <paragraph>偏移量通常由一个或多个父 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 节点控制，因此如果你的节点是 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 的直接子节点，则不应进行手动修改。移动节点或调整节点大小时，偏移量会自动更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-pivot-offset"></target>
            <paragraph classes="classref-property" ids="class-control-property-pivot-offset" names="class_control_property_pivot_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>pivot_offset</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-control-property-pivot-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pivot_offset</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_pivot_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>默认情况下，该节点的轴心位于左上角。更改 <reference internal="True" refid="class-control-property-rotation"><inline classes="std std-ref">rotation</inline></reference> 或 <reference internal="True" refid="class-control-property-scale"><inline classes="std std-ref">scale</inline></reference> 时，将围绕该轴心进行旋转或缩放。如果将该属性设置为 <reference internal="True" refid="class-control-property-size"><inline classes="std std-ref">size</inline></reference> / 2，则围绕的是该控件的中心点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-position"></target>
            <paragraph classes="classref-property" ids="class-control-property-position" names="class_control_property_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>position</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-control-property-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_position</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点的位置，相对于父节点。对应的是矩形的左上角。该属性不受 <reference internal="True" refid="class-control-property-pivot-offset"><inline classes="std std-ref">pivot_offset</inline></reference> 的影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-rotation"></target>
            <paragraph classes="classref-property" ids="class-control-property-rotation" names="class_control_property_rotation"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>rotation</strong> = <literal>0.0</literal> <reference internal="True" refid="class-control-property-rotation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rotation</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_rotation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点围绕其轴心的旋转，单位为弧度。要更改轴心的位置，请参阅 <reference internal="True" refid="class-control-property-pivot-offset"><inline classes="std std-ref">pivot_offset</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该属性在检查器中以度为单位进行编辑。如果要在脚本中使用度数，请使用 <reference internal="True" refid="class-control-property-rotation-degrees"><inline classes="std std-ref">rotation_degrees</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-rotation-degrees"></target>
            <paragraph classes="classref-property" ids="class-control-property-rotation-degrees" names="class_control_property_rotation_degrees"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>rotation_degrees</strong> <reference internal="True" refid="class-control-property-rotation-degrees"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rotation_degrees</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_rotation_degrees</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>辅助属性，用于按度数访问 <reference internal="True" refid="class-control-property-rotation"><inline classes="std std-ref">rotation</inline></reference> 而不是弧度数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-scale"></target>
            <paragraph classes="classref-property" ids="class-control-property-scale" names="class_control_property_scale"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>scale</strong> = <literal>Vector2(1, 1)</literal> <reference internal="True" refid="class-control-property-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_scale</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>节点的缩放，相对于它的 <reference internal="True" refid="class-control-property-size"><inline classes="std std-ref">size</inline></reference>。更改该属性以围绕其 <reference internal="True" refid="class-control-property-pivot-offset"><inline classes="std std-ref">pivot_offset</inline></reference> 缩放节点。该 Control 的 <reference internal="True" refid="class-control-property-tooltip-text"><inline classes="std std-ref">tooltip_text</inline></reference> 也将根据该值进行缩放。</paragraph>
            <paragraph><strong>注意：</strong>该属性主要用于动画用途。要在项目中支持多种分辨率，请使用 <reference internal="True" refuri="../tutorials/rendering/multiple_resolutions"><inline classes="doc">文档</inline></reference> 中所述的合适的视口拉伸模式，而不是单独缩放控件。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_fontfile#class-fontfile-property-oversampling"><inline classes="std std-ref">FontFile.oversampling</inline></reference> <emphasis>不</emphasis>考虑 <strong>Control</strong> <reference internal="True" refid="class-control-property-scale"><inline classes="std std-ref">scale</inline></reference>。这意味着放大/缩小会导致位图字体和光栅化（非 MSDF）动态字体显得模糊或像素化。为确保无论缩放比例如何，文本都保持清晰，你可以通过启用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-gui-theme-default-font-multichannel-signed-distance-field"><inline classes="std std-ref">ProjectSettings.gui/theme/default_font_multichannel_signed_distance_field</inline></reference>（仅适用于默认项目字体）；或在自定义字体的 DynamicFont 的导入选项中，启用<strong>多通道有符号距离场</strong>来启用 MSDF 字体渲染。对于系统字体，可以在检查器中启用 <reference internal="True" refuri="class_systemfont#class-systemfont-property-multichannel-signed-distance-field"><inline classes="std std-ref">SystemFont.multichannel_signed_distance_field</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果该 Control 节点是 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 节点的子节点，则场景实例化时，缩放将重置为 <literal>Vector2(1, 1)</literal>。要在实例化时设置控件的缩放，请使用 <literal>await get_tree().process_frame</literal> 等待一帧，然后再设置其 <reference internal="True" refid="class-control-property-scale"><inline classes="std std-ref">scale</inline></reference> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-shortcut-context"></target>
            <paragraph classes="classref-property" ids="class-control-property-shortcut-context" names="class_control_property_shortcut_context"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>shortcut_context</strong> <reference internal="True" refid="class-control-property-shortcut-context"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_shortcut_context</strong>(value: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>get_shortcut_context</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 必须是被聚焦 <strong>Control</strong> 的父节点，才能激活快捷方式。如果为 <literal>null</literal>，则可以在任何控件获得焦点时激活该快捷方式（全局快捷方式）。这允许快捷方式只在用户聚焦 GUI 的特定区域时才被接受。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-size"></target>
            <paragraph classes="classref-property" ids="class-control-property-size" names="class_control_property_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>size</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-control-property-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点的边界矩形的大小，使用该节点的坐标系。<reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 节点会自动更新此属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-size-flags-horizontal"></target>
            <paragraph classes="classref-property" ids="class-control-property-size-flags-horizontal" names="class_control_property_size_flags_horizontal"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference>] <strong>size_flags_horizontal</strong> = <literal>1</literal> <reference internal="True" refid="class-control-property-size-flags-horizontal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_h_size_flags</strong>(value: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference>] <strong>get_h_size_flags</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>告诉父 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 节点应如何调整尺寸并将其放置在 X 轴上。请使用 <reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference> 常量的组合来更改标志。查看常量以了解每个常量的作用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-size-flags-stretch-ratio"></target>
            <paragraph classes="classref-property" ids="class-control-property-size-flags-stretch-ratio" names="class_control_property_size_flags_stretch_ratio"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>size_flags_stretch_ratio</strong> = <literal>1.0</literal> <reference internal="True" refid="class-control-property-size-flags-stretch-ratio"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stretch_ratio</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_stretch_ratio</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果该节点及其至少一个邻居节点使用 <reference internal="True" refid="class-control-constant-size-expand"><inline classes="std std-ref">SIZE_EXPAND</inline></reference> 大小标志，则父 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 将根据该属性让它占用更多或更少的空间。如果该节点的拉伸比为 2，其邻居节点的拉伸比为 1，则该节点将占用三分之二的可用空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-size-flags-vertical"></target>
            <paragraph classes="classref-property" ids="class-control-property-size-flags-vertical" names="class_control_property_size_flags_vertical"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference>] <strong>size_flags_vertical</strong> = <literal>1</literal> <reference internal="True" refid="class-control-property-size-flags-vertical"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_v_size_flags</strong>(value: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference>] <strong>get_v_size_flags</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>告诉父 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> 节点应如何调整尺寸并将其放置在 Y 轴上。请使用 <reference internal="True" refid="enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference> 常量的组合来更改标志。查看常量以了解每个常量的作用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-theme"></target>
            <paragraph classes="classref-property" ids="class-control-property-theme" names="class_control_property_theme"><reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> <strong>theme</strong> <reference internal="True" refid="class-control-property-theme"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_theme</strong>(value: <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> <strong>get_theme</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点及其子 <strong>Control</strong> 和 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 所使用的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 资源。如果子节点也设置了 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 资源，则会合并主题项，子节点的定义优先级更高。</paragraph>
            <paragraph><strong>注意：</strong>除非 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 为嵌入式，否则窗口样式无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-theme-type-variation"></target>
            <paragraph classes="classref-property" ids="class-control-property-theme-type-variation" names="class_control_property_theme_type_variation"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>theme_type_variation</strong> = <literal>&amp;""</literal> <reference internal="True" refid="class-control-property-theme-type-variation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_theme_type_variation</strong>(value: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_theme_type_variation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 <strong>Control</strong> 用于查找其自有的主题项的主题类型变体的名称。当为空时，将使用节点的类名（例如 <literal>Button</literal> 用于 <reference internal="True" refuri="class_button#class-button"><inline classes="std std-ref">Button</inline></reference> 控件），以及所有父类的类名（按继承顺序）。</paragraph>
            <paragraph>设置后，该属性将最高优先级赋予指定名称的类型。这种类型又可以扩展另一种类型，形成依赖链。参见 <reference internal="True" refuri="class_theme#class-theme-method-set-type-variation"><inline classes="std std-ref">Theme.set_type_variation</inline></reference>。如果使用该类型或其基类型无法找到主题项，则查找会回退到依赖类名查找。</paragraph>
            <paragraph><strong>注意：</strong>要查找 <strong>Control</strong> 自有的项目，请使用各种 <literal>get_theme_*</literal> 方法且无需指定 <literal>theme_type</literal>。</paragraph>
            <paragraph><strong>注意：</strong>主题项按树状顺序查找，从分支到根，其中每个 <strong>Control</strong> 节点的 <reference internal="True" refid="class-control-property-theme"><inline classes="std std-ref">theme</inline></reference> 属性都将被检查。最早匹配任意类型名称/类名称的项将被返回。最后检查项目级的主题和默认主题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-property-tooltip-text"></target>
            <paragraph classes="classref-property" ids="class-control-property-tooltip-text" names="class_control_property_tooltip_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>tooltip_text</strong> = <literal>""</literal> <reference internal="True" refid="class-control-property-tooltip-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tooltip_text</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_tooltip_text</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>默认工具提示文本。如果 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 属性不是 <reference internal="True" refid="class-control-constant-mouse-filter-ignore"><inline classes="std std-ref">MOUSE_FILTER_IGNORE</inline></reference>，则当用户的鼠标光标在此控件上停留片刻时，将出现工具提示。可以使用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-gui-timers-tooltip-delay-sec"><inline classes="std std-ref">ProjectSettings.gui/timers/tooltip_delay_sec</inline></reference> 选项更改工具提示出现所需的时间。另见 <reference internal="True" refid="class-control-method-get-tooltip"><inline classes="std std-ref">get_tooltip</inline></reference>。</paragraph>
            <paragraph>工具提示弹出窗口将使用默认实现，或者使用通过覆盖 <reference internal="True" refid="class-control-private-method-make-custom-tooltip"><inline classes="std std-ref">_make_custom_tooltip</inline></reference> 提供的自定义实现。默认工具提示包括一个 <reference internal="True" refuri="class_popuppanel#class-popuppanel"><inline classes="std std-ref">PopupPanel</inline></reference> 和 <reference internal="True" refuri="class_label#class-label"><inline classes="std std-ref">Label</inline></reference>，其主题属性可以使用 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 方法分别对 <literal>"TooltipPanel"</literal> 和 <literal>"TooltipLabel"</literal> 进行自定义。例如：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var style_box = StyleBoxFlat.new()
style_box.set_bg_color(Color(1, 1, 0))
style_box.set_border_width_all(2)
# 我们在这里假设`Theme`属性已经被事先分配了一个自定义的主题。
theme.set_stylebox("panel", "TooltipPanel", style_box)
theme.set_color("font_color", "TooltipLabel", Color(0, 1, 1))</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var styleBox = new StyleBoxFlat();
styleBox.SetBgColor(new Color(1, 1, 0));
styleBox.SetBorderWidthAll(2);
// 我们在这里假设`Theme`属性已经被事先分配了一个自定义的主题。
Theme.SetStyleBox("panel", "TooltipPanel", styleBox);
Theme.SetColor("font_color", "TooltipLabel", new Color(0, 1, 1));</literal_block>
                </div>
            </container>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="方法说明">
            <title>方法说明</title>
            <target refid="class-control-private-method-can-drop-data"></target>
            <paragraph classes="classref-method" ids="class-control-private-method-can-drop-data" names="class_control_private_method__can_drop_data"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_can_drop_data</strong>(at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, data: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-private-method-can-drop-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Godot 调用这个方法来检查是否能够将来自某个控件 <reference internal="True" refid="class-control-private-method-get-drag-data"><inline classes="std std-ref">_get_drag_data</inline></reference> 方法的 <literal>data</literal> 拖放到 <literal>at_position</literal>。<literal>at_position</literal> 使用的是这个控件的局部坐标系。</paragraph>
            <paragraph>这个方法应该只用于检查数据。请在 <reference internal="True" refid="class-control-private-method-drop-data"><inline classes="std std-ref">_drop_data</inline></reference> 中处理数据。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _can_drop_data(position, data):
    # 如果和位置相关就检查 position
    # 否则只检查 data 即可
    return typeof(data) == TYPE_DICTIONARY and data.has("expected")</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override bool _CanDropData(Vector2 atPosition, Variant data)
{
    // 如果和位置相关就检查 position
    // 否则只检查 data 即可
    return data.VariantType == Variant.Type.Dictionary &amp;&amp; data.AsGodotDictionary().ContainsKey("expected");
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-private-method-drop-data"></target>
            <paragraph classes="classref-method" ids="class-control-private-method-drop-data" names="class_control_private_method__drop_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_drop_data</strong>(at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, data: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-control-private-method-drop-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Godot 调用该方法把 <literal>data</literal> 传给你，这是从某个控件的 <reference internal="True" refid="class-control-private-method-get-drag-data"><inline classes="std std-ref">_get_drag_data</inline></reference> 获得的结果。Godot 首先会调用 <reference internal="True" refid="class-control-private-method-can-drop-data"><inline classes="std std-ref">_can_drop_data</inline></reference> 来检查是否允许把 <literal>data</literal> 拖放到 <literal>at_position</literal>，这里的 <literal>at_position</literal> 使用的是这个控件的局部坐标系。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _can_drop_data(position, data):
    return typeof(data) == TYPE_DICTIONARY and data.has("color")

func _drop_data(position, data):
    var color = data["color"]</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override bool _CanDropData(Vector2 atPosition, Variant data)
{
    return data.VariantType == Variant.Type.Dictionary &amp;&amp; dict.AsGodotDictionary().ContainsKey("color");
}

public override void _DropData(Vector2 atPosition, Variant data)
{
    Color color = data.AsGodotDictionary()["color"].AsColor();
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-private-method-get-drag-data"></target>
            <paragraph classes="classref-method" ids="class-control-private-method-get-drag-data" names="class_control_private_method__get_drag_data"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_get_drag_data</strong>(at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-control-private-method-get-drag-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Godot 调用该方法来获取数据，这个数据将用于拖动操作，放置到期望放置数据的控件上。如果没有要拖动的数据，则返回 <literal>null</literal>。想要接收拖放数据的控件应该实现 <reference internal="True" refid="class-control-private-method-can-drop-data"><inline classes="std std-ref">_can_drop_data</inline></reference> 和 <reference internal="True" refid="class-control-private-method-drop-data"><inline classes="std std-ref">_drop_data</inline></reference>。<literal>at_position</literal> 是该控件的局部位置。可以使用 <reference internal="True" refid="class-control-method-force-drag"><inline classes="std std-ref">force_drag</inline></reference> 强制拖动。</paragraph>
            <paragraph>可以使用 <reference internal="True" refid="class-control-method-set-drag-preview"><inline classes="std std-ref">set_drag_preview</inline></reference> 设置跟随鼠标显示数据的预览。本方法中非常适合设置这个预览。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _get_drag_data(position):
    var mydata = make_data() # This is your custom method generating the drag data.
    set_drag_preview(make_preview(mydata)) # 这是你生成拖动数据预览的自定义方法。
    return mydata</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override Variant _GetDragData(Vector2 atPosition)
{
    var myData = MakeData(); // This is your custom method generating the drag data.
    SetDragPreview(MakePreview(myData)); // 这是你生成拖动数据预览的自定义方法。
    return myData;
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-private-method-get-minimum-size"></target>
            <paragraph classes="classref-method" ids="class-control-private-method-get-minimum-size" names="class_control_private_method__get_minimum_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_get_minimum_size</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-private-method-get-minimum-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由用户实现的虚方法。返回此控件的最小大小。替代 <reference internal="True" refid="class-control-property-custom-minimum-size"><inline classes="std std-ref">custom_minimum_size</inline></reference>，以用于通过代码控制最小尺寸。实际的最小尺寸将是这两者的最大值（分别在每个轴上）。</paragraph>
            <paragraph>如果未覆盖，则默认为 <reference internal="True" refuri="class_vector2#class-vector2-constant-zero"><inline classes="std std-ref">Vector2.ZERO</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>当脚本被附加到已经覆盖其最小大小的 <strong>Control</strong> 节点（例如 <reference internal="True" refuri="class_label#class-label"><inline classes="std std-ref">Label</inline></reference>、<reference internal="True" refuri="class_button#class-button"><inline classes="std std-ref">Button</inline></reference>、<reference internal="True" refuri="class_panelcontainer#class-panelcontainer"><inline classes="std std-ref">PanelContainer</inline></reference> 等）时，该方法将不会被调用。它只能用于最基本的 GUI 节点，如 <strong>Control</strong>、<reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference>、<reference internal="True" refuri="class_panel#class-panel"><inline classes="std std-ref">Panel</inline></reference> 等。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-private-method-get-tooltip"></target>
            <paragraph classes="classref-method" ids="class-control-private-method-get-tooltip" names="class_control_private_method__get_tooltip"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_tooltip</strong>(at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-private-method-get-tooltip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用户实现的虚方法。返回位于控件局部坐标系中 <literal>at_position</literal> 位置的工具提示文本，工具提示一般会在鼠标停留在该控件上时显示。见 <reference internal="True" refid="class-control-method-get-tooltip"><inline classes="std std-ref">get_tooltip</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果返回的是空 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>，则不会显示工具提示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-private-method-gui-input"></target>
            <paragraph classes="classref-method" ids="class-control-private-method-gui-input" names="class_control_private_method__gui_input"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_gui_input</strong>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-control-private-method-gui-input"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由用户实现的虚方法。使用此方法处理和接受 UI 元素上的输入。请参阅 <reference internal="True" refid="class-control-method-accept-event"><inline classes="std std-ref">accept_event</inline></reference>。</paragraph>
            <paragraph><strong>点击控件的用法示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _gui_input(event):
    if event is InputEventMouseButton:
        if event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
            print("我已被点击 D:")</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _GuiInput(InputEvent @event)
{
    if (@event is InputEventMouseButton mb)
    {
        if (mb.ButtonIndex == MouseButton.Left &amp;&amp; mb.Pressed)
        {
            GD.Print("我已被点击 D:");
        }
    }
}</literal_block>
                </div>
            </container>
            <paragraph>如果出现以下情况，则不会触发该事件：</paragraph>
            <paragraph>* 在控件外点击（参阅<reference internal="True" refid="class-control-private-method-has-point"><inline classes="std std-ref">_has_point</inline></reference>）；</paragraph>
            <paragraph>* 控件将 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 设置为 <reference internal="True" refid="class-control-constant-mouse-filter-ignore"><inline classes="std std-ref">MOUSE_FILTER_IGNORE</inline></reference>；</paragraph>
            <paragraph>* 控件被其上的另一个 <strong>Control</strong> 阻挡，该控件没有将 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 设置为 <reference internal="True" refid="class-control-constant-mouse-filter-ignore"><inline classes="std std-ref">MOUSE_FILTER_IGNORE</inline></reference>；</paragraph>
            <paragraph>* 控件的父级已将 <reference internal="True" refid="class-control-property-mouse-filter"><inline classes="std std-ref">mouse_filter</inline></reference> 设置为 <reference internal="True" refid="class-control-constant-mouse-filter-stop"><inline classes="std std-ref">MOUSE_FILTER_STOP</inline></reference> 或已接受该事件；</paragraph>
            <paragraph>* 它发生在父级的矩形之外，并且父级已启用 <reference internal="True" refid="class-control-property-clip-contents"><inline classes="std std-ref">clip_contents</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>事件位置相对于该控件原点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-private-method-has-point"></target>
            <paragraph classes="classref-method" ids="class-control-private-method-has-point" names="class_control_private_method__has_point"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_point</strong>(point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-private-method-has-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由用户实现的虚方法。返回给定的 <literal>point</literal> 是否在该控件内。</paragraph>
            <paragraph>如果没有被覆盖，则默认行为是检查该点是否在控件的 Rect 内。</paragraph>
            <paragraph><strong>注意：</strong>如果要检查一个点是否在该控件内部，可以使用 <literal>Rect2(Vector2.ZERO, size).has_point(point)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-private-method-make-custom-tooltip"></target>
            <paragraph classes="classref-method" ids="class-control-private-method-make-custom-tooltip" names="class_control_private_method__make_custom_tooltip"><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <strong>_make_custom_tooltip</strong>(for_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-private-method-make-custom-tooltip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由用户实现的虚方法。返回一个 <strong>Control</strong> 节点，该节点取代默认节点以用作工具提示。<literal>for_text</literal> 包含 <reference internal="True" refid="class-control-property-tooltip-text"><inline classes="std std-ref">tooltip_text</inline></reference> 属性的内容。</paragraph>
            <paragraph>返回的节点必须是 <strong>Control</strong> 类型或 Control 派生类型。它可以有任何类型的子节点。当工具提示消失时它会被释放，因此请确保你始终提供一个新实例（如果你想使用场景树中预先存在的节点，你可以复制它并传递复制的实例）。当返回 <literal>null</literal> 或非控制节点时，将使用默认的工具提示。</paragraph>
            <paragraph>返回的节点将作为子节点添加到 <reference internal="True" refuri="class_popuppanel#class-popuppanel"><inline classes="std std-ref">PopupPanel</inline></reference>，因此你应该只提供该面板的内容。该 <reference internal="True" refuri="class_popuppanel#class-popuppanel"><inline classes="std std-ref">PopupPanel</inline></reference> 可以使用 <reference internal="True" refuri="class_theme#class-theme-method-set-stylebox"><inline classes="std std-ref">Theme.set_stylebox</inline></reference> 为类型 <literal>"TooltipPanel"</literal> 设置主题（参见 <reference internal="True" refid="class-control-property-tooltip-text"><inline classes="std std-ref">tooltip_text</inline></reference> 示例）。</paragraph>
            <paragraph><strong>注意：</strong>工具提示会被缩小到最小大小。如果你想确保它完全可见，你可能需要将其 <reference internal="True" refid="class-control-property-custom-minimum-size"><inline classes="std std-ref">custom_minimum_size</inline></reference> 设置为非零值。</paragraph>
            <paragraph><strong>注意：</strong>返回时节点（和任何相关的子节点）应该是 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-visible"><inline classes="std std-ref">CanvasItem.visible</inline></reference>，否则，实例化它的视口将无法可靠地计算它的最小大小。</paragraph>
            <paragraph><strong>自定义构造节点的用法示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _make_custom_tooltip(for_text):
    var label = Label.new()
    label.text = for_text
    return label</literal_block>
                </div>
                <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override Control _MakeCustomTooltip(string forText)
{
    var label = new Label();
    label.Text = forText;
    return label;
}</literal_block>
                </div>
            </container>
            <paragraph><strong>自定义场景实例的使用示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _make_custom_tooltip(for_text):
    var tooltip = preload("res://some_tooltip_scene.tscn").instantiate()
    tooltip.get_node("Label").text = for_text
    return tooltip</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override Control _MakeCustomTooltip(string forText)
{
    Node tooltip = ResourceLoader.Load&lt;PackedScene&gt;("res://some_tooltip_scene.tscn").Instantiate();
    tooltip.GetNode&lt;Label&gt;("Label").Text = forText;
    return tooltip;
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-private-method-structured-text-parser"></target>
            <paragraph classes="classref-method" ids="class-control-private-method-structured-text-parser" names="class_control_private_method__structured_text_parser"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>] <strong>_structured_text_parser</strong>(args: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-private-method-structured-text-parser"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用户定义的 BiDi 算法覆盖函数。</paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference> 文本范围和文本基础方向的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，顺序为从左至右。这些范围应该覆盖完整的来源文本 <literal>text</literal>，不应该存在重叠。BiDi 算法会对每个范围单独应用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-accept-event"></target>
            <paragraph classes="classref-method" ids="class-control-method-accept-event" names="class_control_method_accept_event"><abbreviation explanation="无返回值。">void</abbreviation> <strong>accept_event</strong>() <reference internal="True" refid="class-control-method-accept-event"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将输入事件标记为已处理。一旦接受输入事件，传播就会停止，不会再传播到正在侦听 <reference internal="True" refuri="class_node#class-node-private-method-unhandled-input"><inline classes="std std-ref">Node._unhandled_input</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-private-method-unhandled-key-input"><inline classes="std std-ref">Node._unhandled_key_input</inline></reference> 的节点。</paragraph>
            <paragraph><strong>注意：</strong>不会影响 <reference internal="True" refuri="class_input#class-input"><inline classes="std std-ref">Input</inline></reference> 中的方法，只会影响事件的传播。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-add-theme-color-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-add-theme-color-override" names="class_control_method_add_theme_color_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_theme_color_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-control-method-add-theme-color-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为名称为 <literal>name</literal> 的主题 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 创建本地覆盖项。为控件获取主题项目时，本地覆盖项始终优先。覆盖项可以使用 <reference internal="True" refid="class-control-method-remove-theme-color-override"><inline classes="std std-ref">remove_theme_color_override</inline></reference> 移除。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <paragraph><strong>覆盖标签颜色并在之后重置的示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-7-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-7-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-7-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 存在名叫“MyLabel”的子 Label 节点，使用自定义的值覆盖其字体颜色。
$MyLabel.add_theme_color_override("font_color", Color(1, 0.5, 0))
# 重置该子标签的字体颜色。
$MyLabel.remove_theme_color_override("font_color")
# 也可以使用 Label 类型的默认值覆盖。
$MyLabel.add_theme_color_override("font_color", get_theme_color("font_color", "Label"))</literal_block>
                </div>
                <div aria-labelledby="tab-7-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-7-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 存在名叫“MyLabel”的子 Label 节点，使用自定义的值覆盖其字体颜色。
GetNode&lt;Label&gt;("MyLabel").AddThemeColorOverride("font_color", new Color(1, 0.5f, 0));
// 重置该子标签的字体颜色。
GetNode&lt;Label&gt;("MyLabel").RemoveThemeColorOverride("font_color");
// 也可以使用 Label 类型的默认值覆盖。
GetNode&lt;Label&gt;("MyLabel").AddThemeColorOverride("font_color", GetThemeColor("font_color", "Label"));</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-add-theme-constant-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-add-theme-constant-override" names="class_control_method_add_theme_constant_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_theme_constant_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, constant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-control-method-add-theme-constant-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为名称为 <literal>name</literal> 的主题常量创建本地覆盖项。为控件获取主题项目时，本地覆盖项始终优先。覆盖项可以使用 <reference internal="True" refid="class-control-method-remove-theme-constant-override"><inline classes="std std-ref">remove_theme_constant_override</inline></reference> 移除。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-control-method-get-theme-constant"><inline classes="std std-ref">get_theme_constant</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-add-theme-font-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-add-theme-font-override" names="class_control_method_add_theme_font_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_theme_font_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>) <reference internal="True" refid="class-control-method-add-theme-font-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为名称为 <literal>name</literal> 的主题 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 创建本地覆盖项。为控件获取主题项目时，本地覆盖项始终优先。覆盖项可以使用 <reference internal="True" refid="class-control-method-remove-theme-font-override"><inline classes="std std-ref">remove_theme_font_override</inline></reference> 移除。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-control-method-get-theme-font"><inline classes="std std-ref">get_theme_font</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-add-theme-font-size-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-add-theme-font-size-override" names="class_control_method_add_theme_font_size_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_theme_font_size_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-control-method-add-theme-font-size-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为名称为 <literal>name</literal> 的主题字体大小创建本地覆盖项。为控件获取主题项目时，本地覆盖项始终优先。覆盖项可以使用 <reference internal="True" refid="class-control-method-remove-theme-font-size-override"><inline classes="std std-ref">remove_theme_font_size_override</inline></reference> 移除。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-control-method-get-theme-font-size"><inline classes="std std-ref">get_theme_font_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-add-theme-icon-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-add-theme-icon-override" names="class_control_method_add_theme_icon_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_theme_icon_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-control-method-add-theme-icon-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为名称为 <literal>name</literal> 的主题图标创建本地覆盖项。为控件获取主题项目时，本地覆盖项始终优先。覆盖项可以使用 <reference internal="True" refid="class-control-method-remove-theme-icon-override"><inline classes="std std-ref">remove_theme_icon_override</inline></reference> 移除。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-control-method-get-theme-icon"><inline classes="std std-ref">get_theme_icon</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-add-theme-stylebox-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-add-theme-stylebox-override" names="class_control_method_add_theme_stylebox_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_theme_stylebox_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, stylebox: <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>) <reference internal="True" refid="class-control-method-add-theme-stylebox-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为名称为 <literal>name</literal> 的主题 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 创建本地覆盖项。为控件获取主题项目时，本地覆盖项始终优先。覆盖项可以使用 <reference internal="True" refid="class-control-method-remove-theme-stylebox-override"><inline classes="std std-ref">remove_theme_stylebox_override</inline></reference> 移除。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-control-method-get-theme-stylebox"><inline classes="std std-ref">get_theme_stylebox</inline></reference>。</paragraph>
            <paragraph><strong>通过创建副本来修改 StyleBox 属性的示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-8-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-8-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-8-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 以下代码片段要求子节点 MyButton 分配了 StyleBoxFlat。
# 资源是跨实例共享的，因此我们需要制作其副本
# 来避免修改其他所有按钮的外观。
var new_stylebox_normal = $MyButton.get_theme_stylebox("normal").duplicate()
new_stylebox_normal.border_width_top = 3
new_stylebox_normal.border_color = Color(0, 1, 0.5)
$MyButton.add_theme_stylebox_override("normal", new_stylebox_normal)
# 移除样式盒覆盖项。
$MyButton.remove_theme_stylebox_override("normal")</literal_block>
                </div>
                <div aria-labelledby="tab-8-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-8-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 以下代码片段要求子节点 MyButton 分配了 StyleBoxFlat。
// 资源是跨实例共享的，因此我们需要制作其副本
// 来避免修改其他所有按钮的外观。
StyleBoxFlat newStyleboxNormal = GetNode&lt;Button&gt;("MyButton").GetThemeStylebox("normal").Duplicate() as StyleBoxFlat;
newStyleboxNormal.BorderWidthTop = 3;
newStyleboxNormal.BorderColor = new Color(0, 1, 0.5f);
GetNode&lt;Button&gt;("MyButton").AddThemeStyleboxOverride("normal", newStyleboxNormal);
// 移除样式盒覆盖项。
GetNode&lt;Button&gt;("MyButton").RemoveThemeStyleboxOverride("normal");</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-begin-bulk-theme-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-begin-bulk-theme-override" names="class_control_method_begin_bulk_theme_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>begin_bulk_theme_override</strong>() <reference internal="True" refid="class-control-method-begin-bulk-theme-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>防止 <literal>*_theme_*_override</literal> 方法发出 <reference internal="True" refid="class-control-constant-notification-theme-changed"><inline classes="std std-ref">NOTIFICATION_THEME_CHANGED</inline></reference>，直到 <reference internal="True" refid="class-control-method-end-bulk-theme-override"><inline classes="std std-ref">end_bulk_theme_override</inline></reference> 被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-end-bulk-theme-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-end-bulk-theme-override" names="class_control_method_end_bulk_theme_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>end_bulk_theme_override</strong>() <reference internal="True" refid="class-control-method-end-bulk-theme-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>结束批量主题覆盖更新。见 <reference internal="True" refid="class-control-method-begin-bulk-theme-override"><inline classes="std std-ref">begin_bulk_theme_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-find-next-valid-focus"></target>
            <paragraph classes="classref-method" ids="class-control-method-find-next-valid-focus" names="class_control_method_find_next_valid_focus"><reference internal="True" refid="class-control"><inline classes="std std-ref">Control</inline></reference> <strong>find_next_valid_focus</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-find-next-valid-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>找到下一个可以接受焦点的 <strong>Control</strong>，在树的下方。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-find-prev-valid-focus"></target>
            <paragraph classes="classref-method" ids="class-control-method-find-prev-valid-focus" names="class_control_method_find_prev_valid_focus"><reference internal="True" refid="class-control"><inline classes="std std-ref">Control</inline></reference> <strong>find_prev_valid_focus</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-find-prev-valid-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>找到上一个可以接受焦点的 <strong>Control</strong>，在树的上方。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-find-valid-focus-neighbor"></target>
            <paragraph classes="classref-method" ids="class-control-method-find-valid-focus-neighbor" names="class_control_method_find_valid_focus_neighbor"><reference internal="True" refid="class-control"><inline classes="std std-ref">Control</inline></reference> <strong>find_valid_focus_neighbor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-find-valid-focus-neighbor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查找指定 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 上可以接收焦点的下一个 <strong>Control</strong>。</paragraph>
            <paragraph><strong>注意：</strong>这与 <reference internal="True" refid="class-control-method-get-focus-neighbor"><inline classes="std std-ref">get_focus_neighbor</inline></reference> 不同，后者返回指定焦点邻居的路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-force-drag"></target>
            <paragraph classes="classref-method" ids="class-control-method-force-drag" names="class_control_method_force_drag"><abbreviation explanation="无返回值。">void</abbreviation> <strong>force_drag</strong>(data: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, preview: <reference internal="True" refid="class-control"><inline classes="std std-ref">Control</inline></reference>) <reference internal="True" refid="class-control-method-force-drag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过传递 <literal>data</literal> 和 <literal>preview</literal> 强制拖动并绕过 <reference internal="True" refid="class-control-private-method-get-drag-data"><inline classes="std std-ref">_get_drag_data</inline></reference> 和 <reference internal="True" refid="class-control-method-set-drag-preview"><inline classes="std std-ref">set_drag_preview</inline></reference>。即使鼠标既没有在该控件悬停也没有在该控件上按下，拖动都将开始。</paragraph>
            <paragraph>方法 <reference internal="True" refid="class-control-private-method-can-drop-data"><inline classes="std std-ref">_can_drop_data</inline></reference> 和 <reference internal="True" refid="class-control-private-method-drop-data"><inline classes="std std-ref">_drop_data</inline></reference> 必须在想要接收拖放数据的控件上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-anchor"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-anchor" names="class_control_method_get_anchor"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_anchor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-anchor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的锚点。用于 <reference internal="True" refid="class-control-property-anchor-bottom"><inline classes="std std-ref">anchor_bottom</inline></reference>、<reference internal="True" refid="class-control-property-anchor-left"><inline classes="std std-ref">anchor_left</inline></reference>、<reference internal="True" refid="class-control-property-anchor-right"><inline classes="std std-ref">anchor_right</inline></reference> 和 <reference internal="True" refid="class-control-property-anchor-top"><inline classes="std std-ref">anchor_top</inline></reference> 的取值方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-begin"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-begin" names="class_control_method_get_begin"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_begin</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-begin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-control-property-offset-left"><inline classes="std std-ref">offset_left</inline></reference> 和 <reference internal="True" refid="class-control-property-offset-top"><inline classes="std std-ref">offset_top</inline></reference>。另请参阅 <reference internal="True" refid="class-control-property-position"><inline classes="std std-ref">position</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-combined-minimum-size"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-combined-minimum-size" names="class_control_method_get_combined_minimum_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_combined_minimum_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-combined-minimum-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-control-property-custom-minimum-size"><inline classes="std std-ref">custom_minimum_size</inline></reference> 和 <reference internal="True" refid="class-control-method-get-minimum-size"><inline classes="std std-ref">get_minimum_size</inline></reference> 的组合最小大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-cursor-shape"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-cursor-shape" names="class_control_method_get_cursor_shape"><reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>get_cursor_shape</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-cursor-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回控件在鼠标悬停时显示的鼠标指针形状。见 <reference internal="True" refid="enum-control-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-end"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-end" names="class_control_method_get_end"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_end</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-control-property-offset-right"><inline classes="std std-ref">offset_right</inline></reference> 和 <reference internal="True" refid="class-control-property-offset-bottom"><inline classes="std std-ref">offset_bottom</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-focus-neighbor"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-focus-neighbor" names="class_control_method_get_focus_neighbor"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_focus_neighbor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-focus-neighbor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的焦点邻居。用于 <reference internal="True" refid="class-control-property-focus-neighbor-bottom"><inline classes="std std-ref">focus_neighbor_bottom</inline></reference>、<reference internal="True" refid="class-control-property-focus-neighbor-left"><inline classes="std std-ref">focus_neighbor_left</inline></reference>、<reference internal="True" refid="class-control-property-focus-neighbor-right"><inline classes="std std-ref">focus_neighbor_right</inline></reference> 和 <reference internal="True" refid="class-control-property-focus-neighbor-top"><inline classes="std std-ref">focus_neighbor_top</inline></reference> 的取值方法。</paragraph>
            <paragraph><strong>注意：</strong>要查找特定 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 上的下一个 <strong>Control</strong>，即使未指定邻居，也请使用 <reference internal="True" refid="class-control-method-find-valid-focus-neighbor"><inline classes="std std-ref">find_valid_focus_neighbor</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-global-rect"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-global-rect" names="class_control_method_get_global_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_global_rect</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-global-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回控件相对于所属画布的位置和大小。参见 <reference internal="True" refid="class-control-property-global-position"><inline classes="std std-ref">global_position</inline></reference> 和 <reference internal="True" refid="class-control-property-size"><inline classes="std std-ref">size</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果节点本身或节点与画布之间的任何父级 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 具有非默认旋转或倾斜，则生成的大小可能没有意义。</paragraph>
            <paragraph><strong>注意：</strong>将 <reference internal="True" refuri="class_viewport#class-viewport-property-gui-snap-controls-to-pixels"><inline classes="std std-ref">Viewport.gui_snap_controls_to_pixels</inline></reference> 设置为 <literal>true</literal> 会导致显示的控件和返回的 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> 之间的舍入不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-minimum-size"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-minimum-size" names="class_control_method_get_minimum_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_minimum_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-minimum-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该控件的最小尺寸。见 <reference internal="True" refid="class-control-property-custom-minimum-size"><inline classes="std std-ref">custom_minimum_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-offset"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-offset" names="class_control_method_get_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_offset</strong>(offset: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的偏移。这是 <reference internal="True" refid="class-control-property-offset-bottom"><inline classes="std std-ref">offset_bottom</inline></reference>、<reference internal="True" refid="class-control-property-offset-left"><inline classes="std std-ref">offset_left</inline></reference>、<reference internal="True" refid="class-control-property-offset-right"><inline classes="std std-ref">offset_right</inline></reference> 和 <reference internal="True" refid="class-control-property-offset-top"><inline classes="std std-ref">offset_top</inline></reference> 的 getter 方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-parent-area-size"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-parent-area-size" names="class_control_method_get_parent_area_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_parent_area_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-parent-area-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回父控件中占用的宽度/高度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-parent-control"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-parent-control" names="class_control_method_get_parent_control"><reference internal="True" refid="class-control"><inline classes="std std-ref">Control</inline></reference> <strong>get_parent_control</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-parent-control"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回父控制节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-rect"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-rect" names="class_control_method_get_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_rect</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回控件在包含节点的坐标系中的位置和大小。参见 <reference internal="True" refid="class-control-property-position"><inline classes="std std-ref">position</inline></reference>、<reference internal="True" refid="class-control-property-scale"><inline classes="std std-ref">scale</inline></reference> 和 <reference internal="True" refid="class-control-property-size"><inline classes="std std-ref">size</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refid="class-control-property-rotation"><inline classes="std std-ref">rotation</inline></reference> 不是默认的旋转，那么得到的大小是没有意义的。</paragraph>
            <paragraph><strong>注意：</strong>将 <reference internal="True" refuri="class_viewport#class-viewport-property-gui-snap-controls-to-pixels"><inline classes="std std-ref">Viewport.gui_snap_controls_to_pixels</inline></reference> 设置为 <literal>true</literal>，会导致显示的控件和返回的 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> 之间的舍入不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-screen-position"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-screen-position" names="class_control_method_get_screen_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_screen_position</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-screen-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>Control</strong> 在全局屏幕坐标系中的位置（即考虑窗口的位置）。主要用于编辑器插件。</paragraph>
            <paragraph>如果窗口是嵌入式的，则等于 <reference internal="True" refid="class-control-property-global-position"><inline classes="std std-ref">global_position</inline></reference>（见 <reference internal="True" refuri="class_viewport#class-viewport-property-gui-embed-subwindows"><inline classes="std std-ref">Viewport.gui_embed_subwindows</inline></reference>）。</paragraph>
            <paragraph><strong>显示弹出框的用法示例：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">popup_menu.position = get_screen_position() + get_local_mouse_position()
popup_menu.reset_size()
popup_menu.popup()</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-theme-color"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-theme-color" names="class_control_method_get_theme_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_theme_color</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 返回 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的颜色项。如果省略 <literal>theme_type</literal> 则会使用当前控件的类名，如果定义了 <reference internal="True" refid="class-control-property-theme-type-variation"><inline classes="std std-ref">theme_type_variation</inline></reference> 则会优先使用。如果该类型为类名，则还会按照继承顺序检查父类。如果该类型为变种，则还会按照依赖顺序检查基础类型，然后再检查该控件的类名及其父类。</paragraph>
            <paragraph>会首先考虑当前控件的本地覆盖项（见 <reference internal="True" refid="class-control-method-add-theme-color-override"><inline classes="std std-ref">add_theme_color_override</inline></reference>），然后才是其 <reference internal="True" refid="class-control-property-theme"><inline classes="std std-ref">theme</inline></reference>。各个父控件及其 <reference internal="True" refid="class-control-property-theme"><inline classes="std std-ref">theme</inline></reference> 在当前控件之后考虑；会跳过没有 <reference internal="True" refid="class-control-property-theme"><inline classes="std std-ref">theme</inline></reference> 的控件。如果树中没有匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>，则会使用自定义项目 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>（见 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-gui-theme-custom"><inline classes="std std-ref">ProjectSettings.gui/theme/custom</inline></reference>）和默认 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>（见 <reference internal="True" refuri="class_themedb#class-themedb"><inline classes="std std-ref">ThemeDB</inline></reference>）。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-9-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-9-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-9-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-9-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-9-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-9-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    # 获取当前 Control 类中定义的字体颜色，前提是存在。
    modulate = get_theme_color("font_color")
    # 获取 Button 类中定义的字体颜色。
    modulate = get_theme_color("font_color", "Button")</literal_block>
                </div>
                <div aria-labelledby="tab-9-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-9-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    // 获取当前 Control 类中定义的字体颜色，前提是存在。
    Modulate = GetThemeColor("font_color");
    // 获取 Button 类中定义的字体颜色。
    Modulate = GetThemeColor("font_color", "Button");
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-theme-constant"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-theme-constant" names="class_control_method_get_theme_constant"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_theme_constant</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-theme-constant"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 返回常量，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的常量项。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-theme-default-base-scale"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-theme-default-base-scale" names="class_control_method_get_theme_default_base_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_theme_default_base_scale</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-theme-default-base-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 返回默认基础缩放值，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在有效的 <reference internal="True" refuri="class_theme#class-theme-property-default-base-scale"><inline classes="std std-ref">Theme.default_base_scale</inline></reference> 值。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-theme-default-font"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-theme-default-font" names="class_control_method_get_theme_default_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>get_theme_default_font</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-theme-default-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 返回默认字体，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在有效的 <reference internal="True" refuri="class_theme#class-theme-property-default-font"><inline classes="std std-ref">Theme.default_font</inline></reference> 值。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-theme-default-font-size"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-theme-default-font-size" names="class_control_method_get_theme_default_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_theme_default_font_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-theme-default-font-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 返回默认字体大小，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在有效的 <reference internal="True" refuri="class_theme#class-theme-property-default-font-size"><inline classes="std std-ref">Theme.default_font_size</inline></reference> 值。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-theme-font"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-theme-font" names="class_control_method_get_theme_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>get_theme_font</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-theme-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 返回 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的字体项。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-theme-font-size"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-theme-font-size" names="class_control_method_get_theme_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_theme_font_size</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-theme-font-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 返回字体大小，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的字体大小项。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-theme-icon"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-theme-icon" names="class_control_method_get_theme_icon"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_theme_icon</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-theme-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 返回图标，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的图标项。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-theme-stylebox"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-theme-stylebox" names="class_control_method_get_theme_stylebox"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>get_theme_stylebox</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-theme-stylebox"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从树中第一个匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 返回 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的样式盒项。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-get-tooltip"></target>
            <paragraph classes="classref-method" ids="class-control-method-get-tooltip" names="class_control_method_get_tooltip"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_tooltip</strong>(at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-get-tooltip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于该控件局部坐标系中 <literal>at_position</literal> 位置的工具提示文本，工具提示一般会在鼠标停留在该控件上时显示。默认情况下返回的是 <reference internal="True" refid="class-control-property-tooltip-text"><inline classes="std std-ref">tooltip_text</inline></reference>。</paragraph>
            <paragraph>覆盖这个方法可以自定义行为。见 <reference internal="True" refid="class-control-private-method-get-tooltip"><inline classes="std std-ref">_get_tooltip</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果返回的是空 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>，则不会显示工具提示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-grab-click-focus"></target>
            <paragraph classes="classref-method" ids="class-control-method-grab-click-focus" names="class_control_method_grab_click_focus"><abbreviation explanation="无返回值。">void</abbreviation> <strong>grab_click_focus</strong>() <reference internal="True" refid="class-control-method-grab-click-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个尝试点击控件的 <reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference>。如果收到该事件，则该控件将获得焦点。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-10-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-10-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-10-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-10-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-10-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-10-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _process(delta):
    grab_click_focus() # 点击另一个控制节点时，将改为点击该节点。</literal_block>
                </div>
                <div aria-labelledby="tab-10-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-10-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Process(double delta)
{
    GrabClickFocus(); // 点击另一个控制节点时，将改为点击该节点。
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-grab-focus"></target>
            <paragraph classes="classref-method" ids="class-control-method-grab-focus" names="class_control_method_grab_focus"><abbreviation explanation="无返回值。">void</abbreviation> <strong>grab_focus</strong>() <reference internal="True" refid="class-control-method-grab-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从别的控件上窃取焦点，从而成为聚焦的控件（见 <reference internal="True" refid="class-control-property-focus-mode"><inline classes="std std-ref">focus_mode</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>这个方法与 <reference internal="True" refuri="class_object#class-object-method-call-deferred"><inline classes="std std-ref">Object.call_deferred</inline></reference> 配合使用会更加可靠，尤其是在 <reference internal="True" refuri="class_node#class-node-private-method-ready"><inline classes="std std-ref">Node._ready</inline></reference> 中调用时。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-focus"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-focus" names="class_control_method_has_focus"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_focus</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这是当前的焦点控件，则返回 <literal>true</literal>。见 <reference internal="True" refid="class-control-property-focus-mode"><inline classes="std std-ref">focus_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-theme-color"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-theme-color" names="class_control_method_has_theme_color"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_color</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-theme-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果树中存在匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 则返回 <literal>true</literal>，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的颜色项。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-theme-color-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-theme-color-override" names="class_control_method_has_theme_color_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_color_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-theme-color-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 <strong>Control</strong> 节点中存在名为指定 <literal>name</literal> 的主题 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 本地覆盖项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-add-theme-color-override"><inline classes="std std-ref">add_theme_color_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-theme-constant"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-theme-constant" names="class_control_method_has_theme_constant"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_constant</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-theme-constant"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果树中存在匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 则返回 <literal>true</literal>，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的常量项。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-theme-constant-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-theme-constant-override" names="class_control_method_has_theme_constant_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_constant_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-theme-constant-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 <strong>Control</strong> 节点中存在名为指定 <literal>name</literal> 的主题常量本地覆盖项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-add-theme-constant-override"><inline classes="std std-ref">add_theme_constant_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-theme-font"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-theme-font" names="class_control_method_has_theme_font"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_font</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-theme-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果树中存在匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 则返回 <literal>true</literal>，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的字体项。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-theme-font-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-theme-font-override" names="class_control_method_has_theme_font_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_font_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-theme-font-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 <strong>Control</strong> 节点中存在名为指定 <literal>name</literal> 的主题 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 本地覆盖项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-add-theme-font-override"><inline classes="std std-ref">add_theme_font_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-theme-font-size"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-theme-font-size" names="class_control_method_has_theme_font_size"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_font_size</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-theme-font-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果树中存在匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 则返回 <literal>true</literal>，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的字体大小项。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-theme-font-size-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-theme-font-size-override" names="class_control_method_has_theme_font_size_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_font_size_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-theme-font-size-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 <strong>Control</strong> 节点中存在名为指定 <literal>name</literal> 的主题字体大小本地覆盖项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-add-theme-font-size-override"><inline classes="std std-ref">add_theme_font_size_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-theme-icon"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-theme-icon" names="class_control_method_has_theme_icon"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_icon</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-theme-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果树中存在匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 则返回 <literal>true</literal>，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的图标项。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-theme-icon-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-theme-icon-override" names="class_control_method_has_theme_icon_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_icon_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-theme-icon-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 <strong>Control</strong> 节点中存在名为指定 <literal>name</literal> 的主题图标本地覆盖项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-add-theme-icon-override"><inline classes="std std-ref">add_theme_icon_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-theme-stylebox"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-theme-stylebox" names="class_control_method_has_theme_stylebox"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_stylebox</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, theme_type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-theme-stylebox"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果树中存在匹配的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 则返回 <literal>true</literal>，该 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 中应存在指定名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 的样式盒项。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-get-theme-color"><inline classes="std std-ref">get_theme_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-has-theme-stylebox-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-has-theme-stylebox-override" names="class_control_method_has_theme_stylebox_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_stylebox_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-has-theme-stylebox-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 <strong>Control</strong> 节点中存在名为指定 <literal>name</literal> 的主题 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 本地覆盖项，则返回 <literal>true</literal>。</paragraph>
            <paragraph>详情请参阅 <reference internal="True" refid="class-control-method-add-theme-stylebox-override"><inline classes="std std-ref">add_theme_stylebox_override</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-is-drag-successful"></target>
            <paragraph classes="classref-method" ids="class-control-method-is-drag-successful" names="class_control_method_is_drag_successful"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drag_successful</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-is-drag-successful"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果拖放操作成功则返回 <literal>true</literal>，是 <reference internal="True" refuri="class_viewport#class-viewport-method-gui-is-drag-successful"><inline classes="std std-ref">Viewport.gui_is_drag_successful</inline></reference> 的替代方案。</paragraph>
            <paragraph>建议与 <reference internal="True" refuri="class_node#class-node-constant-notification-drag-end"><inline classes="std std-ref">Node.NOTIFICATION_DRAG_END</inline></reference> 配合使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-is-layout-rtl"></target>
            <paragraph classes="classref-method" ids="class-control-method-is-layout-rtl" names="class_control_method_is_layout_rtl"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_layout_rtl</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-control-method-is-layout-rtl"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果布局是从右至左的，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-release-focus"></target>
            <paragraph classes="classref-method" ids="class-control-method-release-focus" names="class_control_method_release_focus"><abbreviation explanation="无返回值。">void</abbreviation> <strong>release_focus</strong>() <reference internal="True" refid="class-control-method-release-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>放弃焦点。不会让其他控件能够接收键盘输入。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-remove-theme-color-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-remove-theme-color-override" names="class_control_method_remove_theme_color_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_theme_color_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-control-method-remove-theme-color-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除名为指定 <literal>name</literal> 的主题 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 本地覆盖项，该覆盖项由 <reference internal="True" refid="class-control-method-add-theme-color-override"><inline classes="std std-ref">add_theme_color_override</inline></reference> 或检查器面板添加的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-remove-theme-constant-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-remove-theme-constant-override" names="class_control_method_remove_theme_constant_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_theme_constant_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-control-method-remove-theme-constant-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除名为指定 <literal>name</literal> 的主题常量本地覆盖项，该覆盖项由 <reference internal="True" refid="class-control-method-add-theme-constant-override"><inline classes="std std-ref">add_theme_constant_override</inline></reference> 或检查器面板添加的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-remove-theme-font-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-remove-theme-font-override" names="class_control_method_remove_theme_font_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_theme_font_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-control-method-remove-theme-font-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除名为指定 <literal>name</literal> 的主题 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 本地覆盖项，该覆盖项由 <reference internal="True" refid="class-control-method-add-theme-font-override"><inline classes="std std-ref">add_theme_font_override</inline></reference> 或检查器面板添加的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-remove-theme-font-size-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-remove-theme-font-size-override" names="class_control_method_remove_theme_font_size_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_theme_font_size_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-control-method-remove-theme-font-size-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除名为指定 <literal>name</literal> 的主题字体大小本地覆盖项，该覆盖项由 <reference internal="True" refid="class-control-method-add-theme-font-size-override"><inline classes="std std-ref">add_theme_font_size_override</inline></reference> 或检查器面板添加的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-remove-theme-icon-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-remove-theme-icon-override" names="class_control_method_remove_theme_icon_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_theme_icon_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-control-method-remove-theme-icon-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除名为指定 <literal>name</literal> 的主题图标本地覆盖项，该覆盖项由 <reference internal="True" refid="class-control-method-add-theme-icon-override"><inline classes="std std-ref">add_theme_icon_override</inline></reference> 或检查器面板添加的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-remove-theme-stylebox-override"></target>
            <paragraph classes="classref-method" ids="class-control-method-remove-theme-stylebox-override" names="class_control_method_remove_theme_stylebox_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_theme_stylebox_override</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-control-method-remove-theme-stylebox-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除名为指定 <literal>name</literal> 的主题 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 本地覆盖项，该覆盖项由 <reference internal="True" refid="class-control-method-add-theme-stylebox-override"><inline classes="std std-ref">add_theme_stylebox_override</inline></reference> 或检查器面板添加的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-reset-size"></target>
            <paragraph classes="classref-method" ids="class-control-method-reset-size" names="class_control_method_reset_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reset_size</strong>() <reference internal="True" refid="class-control-method-reset-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将大小重置为 <reference internal="True" refid="class-control-method-get-combined-minimum-size"><inline classes="std std-ref">get_combined_minimum_size</inline></reference>。等价于调用 <literal>set_size(Vector2())</literal>（或任何小于最小值的大小）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-anchor"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-anchor" names="class_control_method_set_anchor"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_anchor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, anchor: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, keep_offset: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, push_opposite_anchor: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-control-method-set-anchor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将指定 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的锚点设置为 <literal>anchor</literal>。用于 <reference internal="True" refid="class-control-property-anchor-bottom"><inline classes="std std-ref">anchor_bottom</inline></reference>、<reference internal="True" refid="class-control-property-anchor-left"><inline classes="std std-ref">anchor_left</inline></reference>、<reference internal="True" refid="class-control-property-anchor-right"><inline classes="std std-ref">anchor_right</inline></reference> 和 <reference internal="True" refid="class-control-property-anchor-top"><inline classes="std std-ref">anchor_top</inline></reference> 的设值函数。</paragraph>
            <paragraph>如果 <literal>keep_offset</literal> 为 <literal>true</literal>，则偏移量不会在该操作后更新。</paragraph>
            <paragraph>如果 <literal>push_opposite_anchor</literal> 为 <literal>true</literal>，并且相对的锚点与该锚点重叠，则相对的锚点的值将被覆盖。例如，当将左锚点设置为 1 且右锚点的值为 0.5 时，右锚点的值也将为 1。如果 <literal>push_opposite_anchor</literal> 为 <literal>false</literal>，则左锚点的值将为 0.5。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-anchor-and-offset"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-anchor-and-offset" names="class_control_method_set_anchor_and_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_anchor_and_offset</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, anchor: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, push_opposite_anchor: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-control-method-set-anchor-and-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>工作原理与 <reference internal="True" refid="class-control-method-set-anchor"><inline classes="std std-ref">set_anchor</inline></reference> 相同，但取代 <literal>keep_offset</literal> 参数和自动更新的偏移，它允许你自己设置偏移量（参见 <reference internal="True" refid="class-control-method-set-offset"><inline classes="std std-ref">set_offset</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-anchors-and-offsets-preset"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-anchors-and-offsets-preset" names="class_control_method_set_anchors_and_offsets_preset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_anchors_and_offsets_preset</strong>(preset: <reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference>, resize_mode: <reference internal="True" refid="enum-control-layoutpresetmode"><inline classes="std std-ref">LayoutPresetMode</inline></reference> = 0, margin: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-control-method-set-anchors-and-offsets-preset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置锚点预设和偏移预设。参见 <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">set_anchors_preset</inline></reference> 和 <reference internal="True" refid="class-control-method-set-offsets-preset"><inline classes="std std-ref">set_offsets_preset</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-anchors-preset"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-anchors-preset" names="class_control_method_set_anchors_preset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_anchors_preset</strong>(preset: <reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference>, keep_offsets: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-control-method-set-anchors-preset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将锚点设置为 <reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> 枚举中的 <literal>preset</literal>。这是相当于在 2D 编辑器中使用布局菜单的代码。</paragraph>
            <paragraph>如果 <literal>keep_offsets</literal> 为 <literal>true</literal>，则控件的位置也将被更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-begin"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-begin" names="class_control_method_set_begin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_begin</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-control-method-set-begin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>同时设置 <reference internal="True" refid="class-control-property-offset-left"><inline classes="std std-ref">offset_left</inline></reference> 和 <reference internal="True" refid="class-control-property-offset-top"><inline classes="std std-ref">offset_top</inline></reference>。相当于改变 <reference internal="True" refid="class-control-property-position"><inline classes="std std-ref">position</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-drag-forwarding"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-drag-forwarding" names="class_control_method_set_drag_forwarding"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_forwarding</strong>(drag_func: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, can_drop_func: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, drop_func: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-control-method-set-drag-forwarding"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>转发该控件的 <reference internal="True" refid="class-control-private-method-get-drag-data"><inline classes="std std-ref">_get_drag_data</inline></reference>、<reference internal="True" refid="class-control-private-method-can-drop-data"><inline classes="std std-ref">_can_drop_data</inline></reference> 和 <reference internal="True" refid="class-control-private-method-drop-data"><inline classes="std std-ref">_drop_data</inline></reference> 虚函数的处理，以委托给可调用体。</paragraph>
            <paragraph>对于每个参数，如果不为空，则使用委托的可调用体，否则使用本地（虚）函数。</paragraph>
            <paragraph>每个可调用体的函数格式应该与上面描述的虚函数完全相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-drag-preview"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-drag-preview" names="class_control_method_set_drag_preview"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_preview</strong>(control: <reference internal="True" refid="class-control"><inline classes="std std-ref">Control</inline></reference>) <reference internal="True" refid="class-control-method-set-drag-preview"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在鼠标指针处显示给定的控件。调用此方法的好时机是在 <reference internal="True" refid="class-control-private-method-get-drag-data"><inline classes="std std-ref">_get_drag_data</inline></reference> 中。控件不得位于场景树中。你不应释放控件，也不应在拖动持续时间之外保留对控件的引用。拖拽结束后它会自动删除。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-11-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-11-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-11-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-11-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-11-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-11-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@export var color = Color(1, 0, 0, 1)

func _get_drag_data(position):
    #使用不在树中的控件
    var cpb = ColorPickerButton.new()
    cpb.color = color
    cpb.size = Vector2(50, 50)
    set_drag_preview(cpb)
    return color</literal_block>
                </div>
                <div aria-labelledby="tab-11-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-11-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">[Export]
private Color _color = new Color(1, 0, 0, 1);

public override Variant _GetDragData(Vector2 atPosition)
{
    // 使用不在树中的控件
    var cpb = new ColorPickerButton();
    cpb.Color = _color;
    cpb.Size = new Vector2(50, 50);
    SetDragPreview(cpb);
    return _color;
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-end"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-end" names="class_control_method_set_end"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_end</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-control-method-set-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>同时设置 <reference internal="True" refid="class-control-property-offset-right"><inline classes="std std-ref">offset_right</inline></reference> 和 <reference internal="True" refid="class-control-property-offset-bottom"><inline classes="std std-ref">offset_bottom</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-focus-neighbor"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-focus-neighbor" names="class_control_method_set_focus_neighbor"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_focus_neighbor</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, neighbor: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>) <reference internal="True" refid="class-control-method-set-focus-neighbor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将指定 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的焦点邻居设置为节点路径 <literal>neighbor</literal> 处的 <strong>Control</strong>。这是 <reference internal="True" refid="class-control-property-focus-neighbor-bottom"><inline classes="std std-ref">focus_neighbor_bottom</inline></reference>、<reference internal="True" refid="class-control-property-focus-neighbor-left"><inline classes="std std-ref">focus_neighbor_left</inline></reference>、<reference internal="True" refid="class-control-property-focus-neighbor-right"><inline classes="std std-ref">focus_neighbor_right</inline></reference> 和 <reference internal="True" refid="class-control-property-focus-neighbor-top"><inline classes="std std-ref">focus_neighbor_top</inline></reference> 的 setter 方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-global-position"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-global-position" names="class_control_method_set_global_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_global_position</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, keep_offsets: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-control-method-set-global-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <reference internal="True" refid="class-control-property-global-position"><inline classes="std std-ref">global_position</inline></reference> 设置为给定的 <literal>position</literal>。</paragraph>
            <paragraph>如果 <literal>keep_offsets</literal> 为 <literal>true</literal>，则将更新控件的锚点而不是偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-offset"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-offset" names="class_control_method_set_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offset</strong>(side: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-control-method-set-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将指定 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的偏移设置为 <literal>offset</literal>。用于 <reference internal="True" refid="class-control-property-offset-bottom"><inline classes="std std-ref">offset_bottom</inline></reference>、<reference internal="True" refid="class-control-property-offset-left"><inline classes="std std-ref">offset_left</inline></reference>、<reference internal="True" refid="class-control-property-offset-right"><inline classes="std std-ref">offset_right</inline></reference> 和 <reference internal="True" refid="class-control-property-offset-top"><inline classes="std std-ref">offset_top</inline></reference> 的设值方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-offsets-preset"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-offsets-preset" names="class_control_method_set_offsets_preset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offsets_preset</strong>(preset: <reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference>, resize_mode: <reference internal="True" refid="enum-control-layoutpresetmode"><inline classes="std std-ref">LayoutPresetMode</inline></reference> = 0, margin: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-control-method-set-offsets-preset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将偏移设置为 <reference internal="True" refid="enum-control-layoutpreset"><inline classes="std std-ref">LayoutPreset</inline></reference> 枚举中的 <literal>preset</literal>。这是相当于在 2D 编辑器中使用布局菜单的代码。</paragraph>
            <paragraph>将参数 <literal>resize_mode</literal> 与 <reference internal="True" refid="enum-control-layoutpresetmode"><inline classes="std std-ref">LayoutPresetMode</inline></reference> 中的常量一起使用，以更好地确定 <strong>Control</strong> 的最终大小。如果与更改尺寸大小的预设一起使用，则将忽略常量尺寸大小，例如 <reference internal="True" refid="class-control-constant-preset-left-wide"><inline classes="std std-ref">PRESET_LEFT_WIDE</inline></reference>。</paragraph>
            <paragraph>使用参数 <literal>margin</literal> 来确定 <strong>Control</strong> 和边缘之间的间隙。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-position"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-position" names="class_control_method_set_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_position</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, keep_offsets: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-control-method-set-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <reference internal="True" refid="class-control-property-position"><inline classes="std std-ref">position</inline></reference> 设置为给定的 <literal>position</literal>。</paragraph>
            <paragraph>如果 <literal>keep_offsets</literal> 为 <literal>true</literal>，则将更新控件的锚点而不是偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-set-size"></target>
            <paragraph classes="classref-method" ids="class-control-method-set-size" names="class_control_method_set_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_size</strong>(size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, keep_offsets: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-control-method-set-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置大小（参见 <reference internal="True" refid="class-control-property-size"><inline classes="std std-ref">size</inline></reference>）。</paragraph>
            <paragraph>如果 <literal>keep_offsets</literal> 为 <literal>true</literal>，则将更新控件的锚点而不是偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-update-minimum-size"></target>
            <paragraph classes="classref-method" ids="class-control-method-update-minimum-size" names="class_control_method_update_minimum_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>update_minimum_size</strong>() <reference internal="True" refid="class-control-method-update-minimum-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使该节点和直至顶级的父节点中的大小缓存无效。旨在当返回值更改时与 <reference internal="True" refid="class-control-method-get-minimum-size"><inline classes="std std-ref">get_minimum_size</inline></reference> 一起使用。直接设置 <reference internal="True" refid="class-control-property-custom-minimum-size"><inline classes="std std-ref">custom_minimum_size</inline></reference> 将自动调用该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-control-method-warp-mouse"></target>
            <paragraph classes="classref-method" ids="class-control-method-warp-mouse" names="class_control_method_warp_mouse"><abbreviation explanation="无返回值。">void</abbreviation> <strong>warp_mouse</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-control-method-warp-mouse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将鼠标光标移动到 <literal>position</literal>，相对于该 <strong>Control</strong> 的 <reference internal="True" refid="class-control-property-position"><inline classes="std std-ref">position</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-control-method-warp-mouse"><inline classes="std std-ref">warp_mouse</inline></reference> 仅在 Windows、macOS 和 Linux 上受支持。它在 Android、iOS 和 Web 上没有效果。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
