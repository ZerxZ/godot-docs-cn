<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_displayserver.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/DisplayServer.xml.</comment>
    <target refid="class-displayserver"></target>
    <section ids="displayserver class-displayserver" names="displayserver class_displayserver">
        <title>DisplayServer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于低阶窗口管理的服务器接口。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>所有与窗口管理相关的内容都由 <strong>DisplayServer</strong>（显示服务器）处理。因为一个操作系统可能支持多个显示服务器，所以与 <reference internal="True" refuri="class_os#class-os"><inline classes="std std-ref">OS</inline></reference> 是分开的。</paragraph>
            <paragraph><strong>无头模式：</strong>如果使用 <literal>--headless</literal> <reference internal="True" refuri="../tutorials/editor/command_line_tutorial"><inline classes="doc">命令行参数</inline></reference>启动引擎，就会禁用所有渲染和窗口管理功能。此时 <strong>DisplayServer</strong> 的大多数函数都会返回虚设值。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="73"></colspec>
                    <colspec colwidth="549"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-clipboard-get"><inline classes="std std-ref">clipboard_get</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-clipboard-get-image"><inline classes="std std-ref">clipboard_get_image</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-clipboard-get-primary"><inline classes="std std-ref">clipboard_get_primary</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-clipboard-has"><inline classes="std std-ref">clipboard_has</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-clipboard-has-image"><inline classes="std std-ref">clipboard_has_image</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-clipboard-set"><inline classes="std std-ref">clipboard_set</inline></reference>(clipboard: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-clipboard-set-primary"><inline classes="std std-ref">clipboard_set_primary</inline></reference>(clipboard_primary: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-create-status-indicator"><inline classes="std std-ref">create_status_indicator</inline></reference>(icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-cursor-get-shape"><inline classes="std std-ref">cursor_get_shape</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-cursor-set-custom-image"><inline classes="std std-ref">cursor_set_custom_image</inline></reference>(cursor: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>, shape: <reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> = 0, hotspot: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-cursor-set-shape"><inline classes="std std-ref">cursor_set_shape</inline></reference>(shape: <reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-delete-status-indicator"><inline classes="std std-ref">delete_status_indicator</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-dialog-input-text"><inline classes="std std-ref">dialog_input_text</inline></reference>(title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, description: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, existing_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-dialog-show"><inline classes="std std-ref">dialog_show</inline></reference>(title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, description: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, buttons: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-enable-for-stealing-focus"><inline classes="std std-ref">enable_for_stealing_focus</inline></reference>(process_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-file-dialog-show"><inline classes="std std-ref">file_dialog_show</inline></reference>(title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, current_directory: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, show_hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, mode: <reference internal="True" refid="enum-displayserver-filedialogmode"><inline classes="std std-ref">FileDialogMode</inline></reference>, filters: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-file-dialog-with-options-show"><inline classes="std std-ref">file_dialog_with_options_show</inline></reference>(title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, current_directory: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, show_hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, mode: <reference internal="True" refid="enum-displayserver-filedialogmode"><inline classes="std std-ref">FileDialogMode</inline></reference>, filters: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, options: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>], callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-force-process-and-drop-events"><inline classes="std std-ref">force_process_and_drop_events</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-get-accent-color"><inline classes="std std-ref">get_accent_color</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-get-base-color"><inline classes="std std-ref">get_base_color</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-get-display-cutouts"><inline classes="std std-ref">get_display_cutouts</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-get-display-safe-area"><inline classes="std std-ref">get_display_safe_area</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-get-keyboard-focus-screen"><inline classes="std std-ref">get_keyboard_focus_screen</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-get-name"><inline classes="std std-ref">get_name</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-get-primary-screen"><inline classes="std std-ref">get_primary_screen</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-get-screen-count"><inline classes="std std-ref">get_screen_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-get-screen-from-rect"><inline classes="std std-ref">get_screen_from_rect</inline></reference>(rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-get-swap-cancel-ok"><inline classes="std std-ref">get_swap_cancel_ok</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-get-window-at-screen-position"><inline classes="std std-ref">get_window_at_screen_position</inline></reference>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-get-window-list"><inline classes="std std-ref">get_window_list</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-add-check-item"><inline classes="std std-ref">global_menu_add_check_item</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-add-icon-check-item"><inline classes="std std-ref">global_menu_add_icon_check_item</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-add-icon-item"><inline classes="std std-ref">global_menu_add_icon_item</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-add-icon-radio-check-item"><inline classes="std std-ref">global_menu_add_icon_radio_check_item</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-add-item"><inline classes="std std-ref">global_menu_add_item</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-add-multistate-item"><inline classes="std std-ref">global_menu_add_multistate_item</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, max_states: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, default_state: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-add-radio-check-item"><inline classes="std std-ref">global_menu_add_radio_check_item</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-add-separator"><inline classes="std std-ref">global_menu_add_separator</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-add-submenu-item"><inline classes="std std-ref">global_menu_add_submenu_item</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, submenu: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-clear"><inline classes="std std-ref">global_menu_clear</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-accelerator"><inline classes="std std-ref">global_menu_get_item_accelerator</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-callback"><inline classes="std std-ref">global_menu_get_item_callback</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-count"><inline classes="std std-ref">global_menu_get_item_count</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-icon"><inline classes="std std-ref">global_menu_get_item_icon</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-indentation-level"><inline classes="std std-ref">global_menu_get_item_indentation_level</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-index-from-tag"><inline classes="std std-ref">global_menu_get_item_index_from_tag</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-index-from-text"><inline classes="std std-ref">global_menu_get_item_index_from_text</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-key-callback"><inline classes="std std-ref">global_menu_get_item_key_callback</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-max-states"><inline classes="std std-ref">global_menu_get_item_max_states</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-state"><inline classes="std std-ref">global_menu_get_item_state</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-submenu"><inline classes="std std-ref">global_menu_get_item_submenu</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-tag"><inline classes="std std-ref">global_menu_get_item_tag</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-text"><inline classes="std std-ref">global_menu_get_item_text</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-item-tooltip"><inline classes="std std-ref">global_menu_get_item_tooltip</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-get-system-menu-roots"><inline classes="std std-ref">global_menu_get_system_menu_roots</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-is-item-checkable"><inline classes="std std-ref">global_menu_is_item_checkable</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-is-item-checked"><inline classes="std std-ref">global_menu_is_item_checked</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-is-item-disabled"><inline classes="std std-ref">global_menu_is_item_disabled</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-is-item-hidden"><inline classes="std std-ref">global_menu_is_item_hidden</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-is-item-radio-checkable"><inline classes="std std-ref">global_menu_is_item_radio_checkable</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-remove-item"><inline classes="std std-ref">global_menu_remove_item</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-accelerator"><inline classes="std std-ref">global_menu_set_item_accelerator</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-callback"><inline classes="std std-ref">global_menu_set_item_callback</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-checkable"><inline classes="std std-ref">global_menu_set_item_checkable</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checkable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-checked"><inline classes="std std-ref">global_menu_set_item_checked</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checked: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-disabled"><inline classes="std std-ref">global_menu_set_item_disabled</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-hidden"><inline classes="std std-ref">global_menu_set_item_hidden</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-hover-callbacks"><inline classes="std std-ref">global_menu_set_item_hover_callbacks</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-icon"><inline classes="std std-ref">global_menu_set_item_icon</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-indentation-level"><inline classes="std std-ref">global_menu_set_item_indentation_level</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, level: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-key-callback"><inline classes="std std-ref">global_menu_set_item_key_callback</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-max-states"><inline classes="std std-ref">global_menu_set_item_max_states</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max_states: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-radio-checkable"><inline classes="std std-ref">global_menu_set_item_radio_checkable</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checkable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-state"><inline classes="std std-ref">global_menu_set_item_state</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, state: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-submenu"><inline classes="std std-ref">global_menu_set_item_submenu</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, submenu: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-tag"><inline classes="std std-ref">global_menu_set_item_tag</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-text"><inline classes="std std-ref">global_menu_set_item_text</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-item-tooltip"><inline classes="std std-ref">global_menu_set_item_tooltip</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-global-menu-set-popup-callbacks"><inline classes="std std-ref">global_menu_set_popup_callbacks</inline></reference>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, open_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, close_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-has-additional-outputs"><inline classes="std std-ref">has_additional_outputs</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-has-feature"><inline classes="std std-ref">has_feature</inline></reference>(feature: <reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-help-set-search-callbacks"><inline classes="std std-ref">help_set_search_callbacks</inline></reference>(search_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, action_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-ime-get-selection"><inline classes="std std-ref">ime_get_selection</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-ime-get-text"><inline classes="std std-ref">ime_get_text</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-is-dark-mode"><inline classes="std std-ref">is_dark_mode</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-is-dark-mode-supported"><inline classes="std std-ref">is_dark_mode_supported</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-is-touchscreen-available"><inline classes="std std-ref">is_touchscreen_available</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-is-window-transparency-available"><inline classes="std std-ref">is_window_transparency_available</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-keyboard-get-current-layout"><inline classes="std std-ref">keyboard_get_current_layout</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-keyboard-get-keycode-from-physical"><inline classes="std std-ref">keyboard_get_keycode_from_physical</inline></reference>(keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-keyboard-get-label-from-physical"><inline classes="std std-ref">keyboard_get_label_from_physical</inline></reference>(keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-keyboard-get-layout-count"><inline classes="std std-ref">keyboard_get_layout_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-keyboard-get-layout-language"><inline classes="std std-ref">keyboard_get_layout_language</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-keyboard-get-layout-name"><inline classes="std std-ref">keyboard_get_layout_name</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-keyboard-set-current-layout"><inline classes="std std-ref">keyboard_set_current_layout</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_@globalscope#enum-globalscope-mousebuttonmask"><inline classes="std std-ref">MouseButtonMask</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-mouse-get-button-state"><inline classes="std std-ref">mouse_get_button_state</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-displayserver-mousemode"><inline classes="std std-ref">MouseMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-mouse-get-mode"><inline classes="std std-ref">mouse_get_mode</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-mouse-get-position"><inline classes="std std-ref">mouse_get_position</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-mouse-set-mode"><inline classes="std std-ref">mouse_set_mode</inline></reference>(mouse_mode: <reference internal="True" refid="enum-displayserver-mousemode"><inline classes="std std-ref">MouseMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-process-events"><inline classes="std std-ref">process_events</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-register-additional-output"><inline classes="std std-ref">register_additional_output</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-get-dpi"><inline classes="std std-ref">screen_get_dpi</inline></reference>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-get-image"><inline classes="std std-ref">screen_get_image</inline></reference>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-get-max-scale"><inline classes="std std-ref">screen_get_max_scale</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-displayserver-screenorientation"><inline classes="std std-ref">ScreenOrientation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-get-orientation"><inline classes="std std-ref">screen_get_orientation</inline></reference>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-get-pixel"><inline classes="std std-ref">screen_get_pixel</inline></reference>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-get-position"><inline classes="std std-ref">screen_get_position</inline></reference>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-get-refresh-rate"><inline classes="std std-ref">screen_get_refresh_rate</inline></reference>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-get-scale"><inline classes="std std-ref">screen_get_scale</inline></reference>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-get-size"><inline classes="std std-ref">screen_get_size</inline></reference>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-get-usable-rect"><inline classes="std std-ref">screen_get_usable_rect</inline></reference>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-is-kept-on"><inline classes="std std-ref">screen_is_kept_on</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-set-keep-on"><inline classes="std std-ref">screen_set_keep_on</inline></reference>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-screen-set-orientation"><inline classes="std std-ref">screen_set_orientation</inline></reference>(orientation: <reference internal="True" refid="enum-displayserver-screenorientation"><inline classes="std std-ref">ScreenOrientation</inline></reference>, screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-set-icon"><inline classes="std std-ref">set_icon</inline></reference>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-set-native-icon"><inline classes="std std-ref">set_native_icon</inline></reference>(filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-set-system-theme-change-callback"><inline classes="std std-ref">set_system_theme_change_callback</inline></reference>(callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-status-indicator-get-rect"><inline classes="std std-ref">status_indicator_get_rect</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-status-indicator-set-callback"><inline classes="std std-ref">status_indicator_set_callback</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-status-indicator-set-icon"><inline classes="std std-ref">status_indicator_set_icon</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-status-indicator-set-menu"><inline classes="std std-ref">status_indicator_set_menu</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, menu_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-status-indicator-set-tooltip"><inline classes="std std-ref">status_indicator_set_tooltip</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tablet-get-current-driver"><inline classes="std std-ref">tablet_get_current_driver</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tablet-get-driver-count"><inline classes="std std-ref">tablet_get_driver_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tablet-get-driver-name"><inline classes="std std-ref">tablet_get_driver_name</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tablet-set-current-driver"><inline classes="std std-ref">tablet_set_current_driver</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tts-get-voices"><inline classes="std std-ref">tts_get_voices</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tts-get-voices-for-language"><inline classes="std std-ref">tts_get_voices_for_language</inline></reference>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tts-is-paused"><inline classes="std std-ref">tts_is_paused</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tts-is-speaking"><inline classes="std std-ref">tts_is_speaking</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tts-pause"><inline classes="std std-ref">tts_pause</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tts-resume"><inline classes="std std-ref">tts_resume</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tts-set-utterance-callback"><inline classes="std std-ref">tts_set_utterance_callback</inline></reference>(event: <reference internal="True" refid="enum-displayserver-ttsutteranceevent"><inline classes="std std-ref">TTSUtteranceEvent</inline></reference>, callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tts-speak"><inline classes="std std-ref">tts_speak</inline></reference>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, voice: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, volume: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 50, pitch: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, rate: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, utterance_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, interrupt: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-tts-stop"><inline classes="std std-ref">tts_stop</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-unregister-additional-output"><inline classes="std std-ref">unregister_additional_output</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-virtual-keyboard-get-height"><inline classes="std std-ref">virtual_keyboard_get_height</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-virtual-keyboard-hide"><inline classes="std std-ref">virtual_keyboard_hide</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-virtual-keyboard-show"><inline classes="std std-ref">virtual_keyboard_show</inline></reference>(existing_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, position: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> = Rect2(0, 0, 0, 0), type: <reference internal="True" refid="enum-displayserver-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> = 0, max_length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, cursor_start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, cursor_end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-warp-mouse"><inline classes="std std-ref">warp_mouse</inline></reference>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-can-draw"><inline classes="std std-ref">window_can_draw</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-active-popup"><inline classes="std std-ref">window_get_active_popup</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-attached-instance-id"><inline classes="std std-ref">window_get_attached_instance_id</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-current-screen"><inline classes="std std-ref">window_get_current_screen</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-flag"><inline classes="std std-ref">window_get_flag</inline></reference>(flag: <reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-max-size"><inline classes="std std-ref">window_get_max_size</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-min-size"><inline classes="std std-ref">window_get_min_size</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-displayserver-windowmode"><inline classes="std std-ref">WindowMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-mode"><inline classes="std std-ref">window_get_mode</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-native-handle"><inline classes="std std-ref">window_get_native_handle</inline></reference>(handle_type: <reference internal="True" refid="enum-displayserver-handletype"><inline classes="std std-ref">HandleType</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-popup-safe-rect"><inline classes="std std-ref">window_get_popup_safe_rect</inline></reference>(window: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-position"><inline classes="std std-ref">window_get_position</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-position-with-decorations"><inline classes="std std-ref">window_get_position_with_decorations</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-safe-title-margins"><inline classes="std std-ref">window_get_safe_title_margins</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-size"><inline classes="std std-ref">window_get_size</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-size-with-decorations"><inline classes="std std-ref">window_get_size_with_decorations</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-title-size"><inline classes="std std-ref">window_get_title_size</inline></reference>(title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-displayserver-vsyncmode"><inline classes="std std-ref">VSyncMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-get-vsync-mode"><inline classes="std std-ref">window_get_vsync_mode</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-is-focused"><inline classes="std std-ref">window_is_focused</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-is-maximize-allowed"><inline classes="std std-ref">window_is_maximize_allowed</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-maximize-on-title-dbl-click"><inline classes="std std-ref">window_maximize_on_title_dbl_click</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-minimize-on-title-dbl-click"><inline classes="std std-ref">window_minimize_on_title_dbl_click</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-move-to-foreground"><inline classes="std std-ref">window_move_to_foreground</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-request-attention"><inline classes="std std-ref">window_request_attention</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-current-screen"><inline classes="std std-ref">window_set_current_screen</inline></reference>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-drop-files-callback"><inline classes="std std-ref">window_set_drop_files_callback</inline></reference>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-exclusive"><inline classes="std std-ref">window_set_exclusive</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, exclusive: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-flag"><inline classes="std std-ref">window_set_flag</inline></reference>(flag: <reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-ime-active"><inline classes="std std-ref">window_set_ime_active</inline></reference>(active: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-ime-position"><inline classes="std std-ref">window_set_ime_position</inline></reference>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-input-event-callback"><inline classes="std std-ref">window_set_input_event_callback</inline></reference>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-input-text-callback"><inline classes="std std-ref">window_set_input_text_callback</inline></reference>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-max-size"><inline classes="std std-ref">window_set_max_size</inline></reference>(max_size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-min-size"><inline classes="std std-ref">window_set_min_size</inline></reference>(min_size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-mode"><inline classes="std std-ref">window_set_mode</inline></reference>(mode: <reference internal="True" refid="enum-displayserver-windowmode"><inline classes="std std-ref">WindowMode</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-mouse-passthrough"><inline classes="std std-ref">window_set_mouse_passthrough</inline></reference>(region: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-popup-safe-rect"><inline classes="std std-ref">window_set_popup_safe_rect</inline></reference>(window: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-position"><inline classes="std std-ref">window_set_position</inline></reference>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-rect-changed-callback"><inline classes="std std-ref">window_set_rect_changed_callback</inline></reference>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-size"><inline classes="std std-ref">window_set_size</inline></reference>(size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-title"><inline classes="std std-ref">window_set_title</inline></reference>(title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-transient"><inline classes="std std-ref">window_set_transient</inline></reference>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, parent_window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-vsync-mode"><inline classes="std std-ref">window_set_vsync_mode</inline></reference>(vsync_mode: <reference internal="True" refid="enum-displayserver-vsyncmode"><inline classes="std std-ref">VSyncMode</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-window-buttons-offset"><inline classes="std std-ref">window_set_window_buttons_offset</inline></reference>(offset: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-displayserver-method-window-set-window-event-callback"><inline classes="std std-ref">window_set_window_event_callback</inline></reference>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-displayserver-feature"></target>
            <paragraph classes="classref-enumeration" ids="enum-displayserver-feature" names="enum_displayserver_feature">enum <strong>Feature</strong>: <reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-displayserver-constant-feature-global-menu"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-global-menu" names="class_displayserver_constant_feature_global_menu"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_GLOBAL_MENU</strong> = <literal>0</literal></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>显示服务器支持全局菜单。能够让应用程序在操作系统的顶部栏显示其菜单项。<strong>macOS</strong></paragraph>
            <target refid="class-displayserver-constant-feature-subwindows"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-subwindows" names="class_displayserver_constant_feature_subwindows"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_SUBWINDOWS</strong> = <literal>1</literal></paragraph>
            <paragraph>显示服务器支持多窗口，可以移动到主窗口之外。<strong>Windows、macOS、Linux（X11）</strong></paragraph>
            <target refid="class-displayserver-constant-feature-touchscreen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-touchscreen" names="class_displayserver_constant_feature_touchscreen"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_TOUCHSCREEN</strong> = <literal>2</literal></paragraph>
            <paragraph>显示服务器支持触屏输入。<strong>Windows、Linux（X11）、Android、iOS、Web</strong></paragraph>
            <target refid="class-displayserver-constant-feature-mouse"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-mouse" names="class_displayserver_constant_feature_mouse"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_MOUSE</strong> = <literal>3</literal></paragraph>
            <paragraph>显示服务器支持鼠标输入。<strong>Windows、macOS、Linux（X11/Wayland）、Android、Web</strong></paragraph>
            <target refid="class-displayserver-constant-feature-mouse-warp"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-mouse-warp" names="class_displayserver_constant_feature_mouse_warp"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_MOUSE_WARP</strong> = <literal>4</literal></paragraph>
            <paragraph>显示服务器支持扭曲鼠标坐标以将鼠标光标限制在一个区域内，但在到达其中一个边缘时循环。<strong>Windows, macOS, Linux (X11/Wayland)</strong></paragraph>
            <target refid="class-displayserver-constant-feature-clipboard"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-clipboard" names="class_displayserver_constant_feature_clipboard"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_CLIPBOARD</strong> = <literal>5</literal></paragraph>
            <paragraph>显示服务器支持剪贴板数据的设置和获取。另见 <reference internal="True" refid="class-displayserver-constant-feature-clipboard-primary"><inline classes="std std-ref">FEATURE_CLIPBOARD_PRIMARY</inline></reference>。<strong>Windows、macOS、Linux（X11/Wayland）、Android、iOS、Web</strong></paragraph>
            <target refid="class-displayserver-constant-feature-virtual-keyboard"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-virtual-keyboard" names="class_displayserver_constant_feature_virtual_keyboard"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_VIRTUAL_KEYBOARD</strong> = <literal>6</literal></paragraph>
            <paragraph>显示服务器支持在请求输入文本但没有物理键盘时弹出虚拟键盘。<strong>Android、iOS、Web</strong></paragraph>
            <target refid="class-displayserver-constant-feature-cursor-shape"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-cursor-shape" names="class_displayserver_constant_feature_cursor_shape"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_CURSOR_SHAPE</strong> = <literal>7</literal></paragraph>
            <paragraph>显示服务器支持将鼠标光标形状设置为与默认不同。<strong>Windows、macOS、Linux（X11/Wayland）、Android、Web</strong></paragraph>
            <target refid="class-displayserver-constant-feature-custom-cursor-shape"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-custom-cursor-shape" names="class_displayserver_constant_feature_custom_cursor_shape"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_CUSTOM_CURSOR_SHAPE</strong> = <literal>8</literal></paragraph>
            <paragraph>显示服务器支持将鼠标光标形状设置为自定义图像。<strong>Windows、macOS、Linux（X11/Wayland）、Web</strong></paragraph>
            <target refid="class-displayserver-constant-feature-native-dialog"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-native-dialog" names="class_displayserver_constant_feature_native_dialog"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_NATIVE_DIALOG</strong> = <literal>9</literal></paragraph>
            <paragraph>显示服务器支持使用操作系统的原生外观生成文本对话框。请参阅 <reference internal="True" refid="class-displayserver-method-dialog-show"><inline classes="std std-ref">dialog_show</inline></reference>。<strong>Windows、macOS</strong></paragraph>
            <target refid="class-displayserver-constant-feature-ime"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-ime" names="class_displayserver_constant_feature_ime"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_IME</strong> = <literal>10</literal></paragraph>
            <paragraph>显示服务器支持 <reference name="输入法" refuri="https://en.wikipedia.org/wiki/Input_method">输入法</reference>，它通常用于输入中文、日文和韩文文本。这由操作系统处理，而不是由 Godot 处理。<strong>Windows, macOS, Linux (X11)</strong></paragraph>
            <target refid="class-displayserver-constant-feature-window-transparency"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-window-transparency" names="class_displayserver_constant_feature_window_transparency"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_WINDOW_TRANSPARENCY</strong> = <literal>11</literal></paragraph>
            <paragraph>显示服务器支持窗口可以使用逐像素透明，以使它们后面的窗口部分或完全可见。<strong>Windows、macOS、Linux（X11/Wayland）</strong></paragraph>
            <target refid="class-displayserver-constant-feature-hidpi"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-hidpi" names="class_displayserver_constant_feature_hidpi"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_HIDPI</strong> = <literal>12</literal></paragraph>
            <paragraph>显示服务器支持查询操作系统的显示缩放系数。这允许<emphasis>可靠地</emphasis>执行自动 hiDPI 显示器检测，而不是根据屏幕分辨率和报告的显示器 DPI 进行猜测（由于显示器 EDID 损坏，这可能不可靠）。<strong>Windows、Linux（Wayland）、macOS</strong></paragraph>
            <target refid="class-displayserver-constant-feature-icon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-icon" names="class_displayserver_constant_feature_icon"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_ICON</strong> = <literal>13</literal></paragraph>
            <paragraph>显示服务器支持改变窗口图标（通常显示在左上角）。<strong>Windows、macOS、Linux（X11）</strong></paragraph>
            <target refid="class-displayserver-constant-feature-native-icon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-native-icon" names="class_displayserver_constant_feature_native_icon"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_NATIVE_ICON</strong> = <literal>14</literal></paragraph>
            <paragraph>显示服务器支持改变窗口图标（通常显示在左上角）。<strong>Windows、macOS</strong></paragraph>
            <target refid="class-displayserver-constant-feature-orientation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-orientation" names="class_displayserver_constant_feature_orientation"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_ORIENTATION</strong> = <literal>15</literal></paragraph>
            <paragraph>显示服务器支持改变屏幕朝向。<strong>Android、iOS</strong></paragraph>
            <target refid="class-displayserver-constant-feature-swap-buffers"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-swap-buffers" names="class_displayserver_constant_feature_swap_buffers"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_SWAP_BUFFERS</strong> = <literal>16</literal></paragraph>
            <paragraph>显示服务器支持将垂直同步状态改为非默认状态（不支持此功能的平台强制启用垂直同步）。<strong>Windows、macOS、Linux（X11/Wayland）</strong></paragraph>
            <target refid="class-displayserver-constant-feature-clipboard-primary"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-clipboard-primary" names="class_displayserver_constant_feature_clipboard_primary"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_CLIPBOARD_PRIMARY</strong> = <literal>18</literal></paragraph>
            <paragraph>显示服务器支持使用主剪贴板。主剪贴板和 <reference internal="True" refid="class-displayserver-constant-feature-clipboard"><inline classes="std std-ref">FEATURE_CLIPBOARD</inline></reference> 是不同的剪贴板。<strong>Linux（X11/Wayland）</strong></paragraph>
            <target refid="class-displayserver-constant-feature-text-to-speech"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-text-to-speech" names="class_displayserver_constant_feature_text_to_speech"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_TEXT_TO_SPEECH</strong> = <literal>19</literal></paragraph>
            <paragraph>显示服务器支持文字转语音。见 <literal>tts_*</literal> 方法。<strong>Windows、macOS、Linux（X11/Wayland）、Android、iOS、Web</strong></paragraph>
            <target refid="class-displayserver-constant-feature-extend-to-title"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-extend-to-title" names="class_displayserver_constant_feature_extend_to_title"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_EXTEND_TO_TITLE</strong> = <literal>20</literal></paragraph>
            <paragraph>显示服务器支持将窗口内容扩展到标题。见 <reference internal="True" refid="class-displayserver-constant-window-flag-extend-to-title"><inline classes="std std-ref">WINDOW_FLAG_EXTEND_TO_TITLE</inline></reference>。<strong>macOS</strong></paragraph>
            <target refid="class-displayserver-constant-feature-screen-capture"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-screen-capture" names="class_displayserver_constant_feature_screen_capture"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_SCREEN_CAPTURE</strong> = <literal>21</literal></paragraph>
            <paragraph>显示服务器支持读取屏幕像素。见 <reference internal="True" refid="class-displayserver-method-screen-get-pixel"><inline classes="std std-ref">screen_get_pixel</inline></reference>。</paragraph>
            <target refid="class-displayserver-constant-feature-status-indicator"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-status-indicator" names="class_displayserver_constant_feature_status_indicator"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_STATUS_INDICATOR</strong> = <literal>22</literal></paragraph>
            <paragraph>显示服务器支持应用程序状态指示器。</paragraph>
            <target refid="class-displayserver-constant-feature-native-help"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-native-help" names="class_displayserver_constant_feature_native_help"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_NATIVE_HELP</strong> = <literal>23</literal></paragraph>
            <paragraph>显示服务器支持本机帮助系统搜索回调。请参阅 <reference internal="True" refid="class-displayserver-method-help-set-search-callbacks"><inline classes="std std-ref">help_set_search_callbacks</inline></reference>。</paragraph>
            <target refid="class-displayserver-constant-feature-native-dialog-input"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-native-dialog-input" names="class_displayserver_constant_feature_native_dialog_input"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_NATIVE_DIALOG_INPUT</strong> = <literal>24</literal></paragraph>
            <paragraph>显示服务器支持使用操作系统的原生外观生成文本输入对话框。请参阅 <reference internal="True" refid="class-displayserver-method-dialog-input-text"><inline classes="std std-ref">dialog_input_text</inline></reference>。<strong>Windows、macOS</strong></paragraph>
            <target refid="class-displayserver-constant-feature-native-dialog-file"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-feature-native-dialog-file" names="class_displayserver_constant_feature_native_dialog_file"><reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_NATIVE_DIALOG_FILE</strong> = <literal>25</literal></paragraph>
            <paragraph>显示服务器支持使用操作系统的原生外观生成用于选择文件或目录的对话框。请参阅 <reference internal="True" refid="class-displayserver-method-file-dialog-show"><inline classes="std std-ref">file_dialog_show</inline></reference> 和 <reference internal="True" refid="class-displayserver-method-file-dialog-with-options-show"><inline classes="std std-ref">file_dialog_with_options_show</inline></reference>。<strong>Windows、macOS、Linux（X11/Wayland）</strong></paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-displayserver-mousemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-displayserver-mousemode" names="enum_displayserver_mousemode">enum <strong>MouseMode</strong>: <reference internal="True" refid="enum-displayserver-mousemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-displayserver-constant-mouse-mode-visible"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-mouse-mode-visible" names="class_displayserver_constant_mouse_mode_visible"><reference internal="True" refid="enum-displayserver-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>MOUSE_MODE_VISIBLE</strong> = <literal>0</literal></paragraph>
            <paragraph>如果鼠标光标处于隐藏状态，则使其可见。</paragraph>
            <target refid="class-displayserver-constant-mouse-mode-hidden"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-mouse-mode-hidden" names="class_displayserver_constant_mouse_mode_hidden"><reference internal="True" refid="enum-displayserver-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>MOUSE_MODE_HIDDEN</strong> = <literal>1</literal></paragraph>
            <paragraph>如果鼠标光标是可见的，则使其隐藏。</paragraph>
            <target refid="class-displayserver-constant-mouse-mode-captured"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-mouse-mode-captured" names="class_displayserver_constant_mouse_mode_captured"><reference internal="True" refid="enum-displayserver-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>MOUSE_MODE_CAPTURED</strong> = <literal>2</literal></paragraph>
            <paragraph>捕获鼠标。鼠标将被隐藏，其位置被锁定在窗口管理器窗口的中心。</paragraph>
            <paragraph><strong>注意：</strong>如果你想在这种模式下处理鼠标的移动，则需要使用 <reference internal="True" refuri="class_inputeventmousemotion#class-inputeventmousemotion-property-relative"><inline classes="std std-ref">InputEventMouseMotion.relative</inline></reference>。</paragraph>
            <target refid="class-displayserver-constant-mouse-mode-confined"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-mouse-mode-confined" names="class_displayserver_constant_mouse_mode_confined"><reference internal="True" refid="enum-displayserver-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>MOUSE_MODE_CONFINED</strong> = <literal>3</literal></paragraph>
            <paragraph>将鼠标光标限制在游戏窗口内，并使其可见。</paragraph>
            <target refid="class-displayserver-constant-mouse-mode-confined-hidden"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-mouse-mode-confined-hidden" names="class_displayserver_constant_mouse_mode_confined_hidden"><reference internal="True" refid="enum-displayserver-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>MOUSE_MODE_CONFINED_HIDDEN</strong> = <literal>4</literal></paragraph>
            <paragraph>将鼠标光标限制在游戏窗口内，并使其隐藏。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-displayserver-screenorientation"></target>
            <paragraph classes="classref-enumeration" ids="enum-displayserver-screenorientation" names="enum_displayserver_screenorientation">enum <strong>ScreenOrientation</strong>: <reference internal="True" refid="enum-displayserver-screenorientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-displayserver-constant-screen-landscape"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-screen-landscape" names="class_displayserver_constant_screen_landscape"><reference internal="True" refid="enum-displayserver-screenorientation"><inline classes="std std-ref">ScreenOrientation</inline></reference> <strong>SCREEN_LANDSCAPE</strong> = <literal>0</literal></paragraph>
            <paragraph>默认横屏朝向。</paragraph>
            <target refid="class-displayserver-constant-screen-portrait"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-screen-portrait" names="class_displayserver_constant_screen_portrait"><reference internal="True" refid="enum-displayserver-screenorientation"><inline classes="std std-ref">ScreenOrientation</inline></reference> <strong>SCREEN_PORTRAIT</strong> = <literal>1</literal></paragraph>
            <paragraph>默认竖屏朝向。</paragraph>
            <target refid="class-displayserver-constant-screen-reverse-landscape"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-screen-reverse-landscape" names="class_displayserver_constant_screen_reverse_landscape"><reference internal="True" refid="enum-displayserver-screenorientation"><inline classes="std std-ref">ScreenOrientation</inline></reference> <strong>SCREEN_REVERSE_LANDSCAPE</strong> = <literal>2</literal></paragraph>
            <paragraph>倒横屏朝向（上下颠倒）。</paragraph>
            <target refid="class-displayserver-constant-screen-reverse-portrait"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-screen-reverse-portrait" names="class_displayserver_constant_screen_reverse_portrait"><reference internal="True" refid="enum-displayserver-screenorientation"><inline classes="std std-ref">ScreenOrientation</inline></reference> <strong>SCREEN_REVERSE_PORTRAIT</strong> = <literal>3</literal></paragraph>
            <paragraph>倒竖屏朝向（上下颠倒）。</paragraph>
            <target refid="class-displayserver-constant-screen-sensor-landscape"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-screen-sensor-landscape" names="class_displayserver_constant_screen_sensor_landscape"><reference internal="True" refid="enum-displayserver-screenorientation"><inline classes="std std-ref">ScreenOrientation</inline></reference> <strong>SCREEN_SENSOR_LANDSCAPE</strong> = <literal>4</literal></paragraph>
            <paragraph>自动横屏朝向（传感器决定默认或倒向）。</paragraph>
            <target refid="class-displayserver-constant-screen-sensor-portrait"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-screen-sensor-portrait" names="class_displayserver_constant_screen_sensor_portrait"><reference internal="True" refid="enum-displayserver-screenorientation"><inline classes="std std-ref">ScreenOrientation</inline></reference> <strong>SCREEN_SENSOR_PORTRAIT</strong> = <literal>5</literal></paragraph>
            <paragraph>自动竖屏朝向（传感器决定默认或倒向）。</paragraph>
            <target refid="class-displayserver-constant-screen-sensor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-screen-sensor" names="class_displayserver_constant_screen_sensor"><reference internal="True" refid="enum-displayserver-screenorientation"><inline classes="std std-ref">ScreenOrientation</inline></reference> <strong>SCREEN_SENSOR</strong> = <literal>6</literal></paragraph>
            <paragraph>自动横屏或竖屏朝向（传感器决定默认或倒向）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-displayserver-virtualkeyboardtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-displayserver-virtualkeyboardtype" names="enum_displayserver_virtualkeyboardtype">enum <strong>VirtualKeyboardType</strong>: <reference internal="True" refid="enum-displayserver-virtualkeyboardtype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-displayserver-constant-keyboard-type-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-keyboard-type-default" names="class_displayserver_constant_keyboard_type_default"><reference internal="True" refid="enum-displayserver-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_DEFAULT</strong> = <literal>0</literal></paragraph>
            <paragraph>默认文本虚拟键盘。</paragraph>
            <target refid="class-displayserver-constant-keyboard-type-multiline"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-keyboard-type-multiline" names="class_displayserver_constant_keyboard_type_multiline"><reference internal="True" refid="enum-displayserver-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_MULTILINE</strong> = <literal>1</literal></paragraph>
            <paragraph>多行虚拟键盘。</paragraph>
            <target refid="class-displayserver-constant-keyboard-type-number"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-keyboard-type-number" names="class_displayserver_constant_keyboard_type_number"><reference internal="True" refid="enum-displayserver-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_NUMBER</strong> = <literal>2</literal></paragraph>
            <paragraph>虚拟数字键盘，可用于 PIN 输入。</paragraph>
            <target refid="class-displayserver-constant-keyboard-type-number-decimal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-keyboard-type-number-decimal" names="class_displayserver_constant_keyboard_type_number_decimal"><reference internal="True" refid="enum-displayserver-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_NUMBER_DECIMAL</strong> = <literal>3</literal></paragraph>
            <paragraph>虚拟数字键盘，可用于输入小数。</paragraph>
            <target refid="class-displayserver-constant-keyboard-type-phone"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-keyboard-type-phone" names="class_displayserver_constant_keyboard_type_phone"><reference internal="True" refid="enum-displayserver-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_PHONE</strong> = <literal>4</literal></paragraph>
            <paragraph>虚拟手机号码键盘。</paragraph>
            <target refid="class-displayserver-constant-keyboard-type-email-address"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-keyboard-type-email-address" names="class_displayserver_constant_keyboard_type_email_address"><reference internal="True" refid="enum-displayserver-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_EMAIL_ADDRESS</strong> = <literal>5</literal></paragraph>
            <paragraph>带有附加键的虚拟键盘，可帮助输入电子邮件地址。</paragraph>
            <target refid="class-displayserver-constant-keyboard-type-password"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-keyboard-type-password" names="class_displayserver_constant_keyboard_type_password"><reference internal="True" refid="enum-displayserver-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_PASSWORD</strong> = <literal>6</literal></paragraph>
            <paragraph>用于输入密码的虚拟键盘。在大多数平台上，这应该会禁用自动完成和自动首字母大写功能。</paragraph>
            <paragraph><strong>注意：</strong>Web 平台不支持。与 <reference internal="True" refid="class-displayserver-constant-keyboard-type-default"><inline classes="std std-ref">KEYBOARD_TYPE_DEFAULT</inline></reference> 的行为相同。</paragraph>
            <target refid="class-displayserver-constant-keyboard-type-url"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-keyboard-type-url" names="class_displayserver_constant_keyboard_type_url"><reference internal="True" refid="enum-displayserver-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> <strong>KEYBOARD_TYPE_URL</strong> = <literal>7</literal></paragraph>
            <paragraph>带有附加键的虚拟键盘，可帮助输入 URL。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-displayserver-cursorshape"></target>
            <paragraph classes="classref-enumeration" ids="enum-displayserver-cursorshape" names="enum_displayserver_cursorshape">enum <strong>CursorShape</strong>: <reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-displayserver-constant-cursor-arrow"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-arrow" names="class_displayserver_constant_cursor_arrow"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_ARROW</strong> = <literal>0</literal></paragraph>
            <paragraph>箭头光标形状。这是默认形状，没有指向 <reference internal="True" refuri="class_lineedit#class-lineedit"><inline classes="std std-ref">LineEdit</inline></reference> 和 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> 等会覆盖鼠标指针的节点时显示。</paragraph>
            <target refid="class-displayserver-constant-cursor-ibeam"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-ibeam" names="class_displayserver_constant_cursor_ibeam"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_IBEAM</strong> = <literal>1</literal></paragraph>
            <paragraph>工字光标形状。默认在悬停于 <reference internal="True" refuri="class_lineedit#class-lineedit"><inline classes="std std-ref">LineEdit</inline></reference> 和 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> 等接受文本输入的控件时显示。</paragraph>
            <target refid="class-displayserver-constant-cursor-pointing-hand"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-pointing-hand" names="class_displayserver_constant_cursor_pointing_hand"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_POINTING_HAND</strong> = <literal>2</literal></paragraph>
            <paragraph>指点的手形光标形状。默认在悬停于 <reference internal="True" refuri="class_linkbutton#class-linkbutton"><inline classes="std std-ref">LinkButton</inline></reference> 或 <reference internal="True" refuri="class_richtextlabel#class-richtextlabel"><inline classes="std std-ref">RichTextLabel</inline></reference> 中的 URL 标签时使用。</paragraph>
            <target refid="class-displayserver-constant-cursor-cross"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-cross" names="class_displayserver_constant_cursor_cross"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_CROSS</strong> = <literal>3</literal></paragraph>
            <paragraph>十字光标。应当在用户需要精确瞄准某个元素时显示，例如矩形选择工具和颜色拾取器。</paragraph>
            <target refid="class-displayserver-constant-cursor-wait"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-wait" names="class_displayserver_constant_cursor_wait"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_WAIT</strong> = <literal>4</literal></paragraph>
            <paragraph>等待光标。大多数光标主题会在箭头<emphasis>旁边</emphasis>显示旋转图标。旨在用于非阻塞操作（此时用户可以做其他事情）。另见 <reference internal="True" refid="class-displayserver-constant-cursor-busy"><inline classes="std std-ref">CURSOR_BUSY</inline></reference>。</paragraph>
            <target refid="class-displayserver-constant-cursor-busy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-busy" names="class_displayserver_constant_cursor_busy"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_BUSY</strong> = <literal>5</literal></paragraph>
            <paragraph>等待光标。大多数光标主题会把箭头<emphasis>替换</emphasis>为旋转图标。旨在用于阻塞操作（此时用户无法做其他事情）。另见 <reference internal="True" refid="class-displayserver-constant-cursor-wait"><inline classes="std std-ref">CURSOR_WAIT</inline></reference>。</paragraph>
            <target refid="class-displayserver-constant-cursor-drag"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-drag" names="class_displayserver_constant_cursor_drag"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_DRAG</strong> = <literal>6</literal></paragraph>
            <paragraph>拖动的手形光标。在拖放操作过程中显示。另见 <reference internal="True" refid="class-displayserver-constant-cursor-can-drop"><inline classes="std std-ref">CURSOR_CAN_DROP</inline></reference>。</paragraph>
            <target refid="class-displayserver-constant-cursor-can-drop"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-can-drop" names="class_displayserver_constant_cursor_can_drop"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_CAN_DROP</strong> = <literal>7</literal></paragraph>
            <paragraph>“能放下”光标。在拖放操作过程中，如果将鼠标悬停在可以接受拖放事件的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 上，就会显示这个光标。大多数光标主题会显示一只正在拖拽的手，旁边有一个箭头符号。另见 <reference internal="True" refid="class-displayserver-constant-cursor-drag"><inline classes="std std-ref">CURSOR_DRAG</inline></reference>。</paragraph>
            <target refid="class-displayserver-constant-cursor-forbidden"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-forbidden" names="class_displayserver_constant_cursor_forbidden"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_FORBIDDEN</strong> = <literal>8</literal></paragraph>
            <paragraph>禁止光标。在拖放操作过程中，如果将鼠标悬停在不可接受拖放事件的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 上，就会显示这个光标。</paragraph>
            <target refid="class-displayserver-constant-cursor-vsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-vsize" names="class_displayserver_constant_cursor_vsize"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_VSIZE</strong> = <literal>9</literal></paragraph>
            <paragraph>垂直尺寸调整光标。只在用于悬停的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 可以用鼠标调整垂直大小时显示。另见 <reference internal="True" refid="class-displayserver-constant-cursor-vsplit"><inline classes="std std-ref">CURSOR_VSPLIT</inline></reference>。</paragraph>
            <target refid="class-displayserver-constant-cursor-hsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-hsize" names="class_displayserver_constant_cursor_hsize"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_HSIZE</strong> = <literal>10</literal></paragraph>
            <paragraph>水平尺寸调整光标。只在用于悬停的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 可以用鼠标调整水平大小时显示。另见 <reference internal="True" refid="class-displayserver-constant-cursor-hsplit"><inline classes="std std-ref">CURSOR_HSPLIT</inline></reference>。</paragraph>
            <target refid="class-displayserver-constant-cursor-bdiagsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-bdiagsize" names="class_displayserver_constant_cursor_bdiagsize"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_BDIAGSIZE</strong> = <literal>11</literal></paragraph>
            <paragraph>辅助对角线尺寸调整光标（右上/左下）。只在但悬停的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 可以使用鼠标同时在两个轴上调整大小时显示。</paragraph>
            <target refid="class-displayserver-constant-cursor-fdiagsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-fdiagsize" names="class_displayserver_constant_cursor_fdiagsize"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_FDIAGSIZE</strong> = <literal>12</literal></paragraph>
            <paragraph>主对角线尺寸调整光标（左上/右下）。只在当悬停的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 可以使用鼠标同时在两个轴上调整大小时显示。</paragraph>
            <target refid="class-displayserver-constant-cursor-move"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-move" names="class_displayserver_constant_cursor_move"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_MOVE</strong> = <literal>13</literal></paragraph>
            <paragraph>移动光标。应在能够使用鼠标移动被悬停 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 时显示。</paragraph>
            <target refid="class-displayserver-constant-cursor-vsplit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-vsplit" names="class_displayserver_constant_cursor_vsplit"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_VSPLIT</strong> = <literal>14</literal></paragraph>
            <paragraph>垂直分割光标。当光标悬停于 <reference internal="True" refuri="class_vsplitcontainer#class-vsplitcontainer"><inline classes="std std-ref">VSplitContainer</inline></reference> 等能够使用鼠标调整拆分的垂直大小的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 时显示。部分光标主题中，该光标的外观和 <reference internal="True" refid="class-displayserver-constant-cursor-vsize"><inline classes="std std-ref">CURSOR_VSIZE</inline></reference> 一致。</paragraph>
            <target refid="class-displayserver-constant-cursor-hsplit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-hsplit" names="class_displayserver_constant_cursor_hsplit"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_HSPLIT</strong> = <literal>15</literal></paragraph>
            <paragraph>水平分割光标。当光标悬停于 <reference internal="True" refuri="class_hsplitcontainer#class-hsplitcontainer"><inline classes="std std-ref">HSplitContainer</inline></reference> 等能够使用鼠标调整拆分的水平大小的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 时显示。部分光标主题中，该光标的外观和 <reference internal="True" refid="class-displayserver-constant-cursor-hsize"><inline classes="std std-ref">CURSOR_HSIZE</inline></reference> 一致。</paragraph>
            <target refid="class-displayserver-constant-cursor-help"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-help" names="class_displayserver_constant_cursor_help"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_HELP</strong> = <literal>16</literal></paragraph>
            <paragraph>帮助光标。在大多数光标主题中显示为问号图标，不显示为鼠标光标。应在用户请求对下一次点击的元素提供帮助信息时使用。</paragraph>
            <target refid="class-displayserver-constant-cursor-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-cursor-max" names="class_displayserver_constant_cursor_max"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_MAX</strong> = <literal>17</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-displayserver-filedialogmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-displayserver-filedialogmode" names="enum_displayserver_filedialogmode">enum <strong>FileDialogMode</strong>: <reference internal="True" refid="enum-displayserver-filedialogmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-displayserver-constant-file-dialog-mode-open-file"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-file-dialog-mode-open-file" names="class_displayserver_constant_file_dialog_mode_open_file"><reference internal="True" refid="enum-displayserver-filedialogmode"><inline classes="std std-ref">FileDialogMode</inline></reference> <strong>FILE_DIALOG_MODE_OPEN_FILE</strong> = <literal>0</literal></paragraph>
            <paragraph>该原生对话框只允许选择一个文件。</paragraph>
            <target refid="class-displayserver-constant-file-dialog-mode-open-files"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-file-dialog-mode-open-files" names="class_displayserver_constant_file_dialog_mode_open_files"><reference internal="True" refid="enum-displayserver-filedialogmode"><inline classes="std std-ref">FileDialogMode</inline></reference> <strong>FILE_DIALOG_MODE_OPEN_FILES</strong> = <literal>1</literal></paragraph>
            <paragraph>该原生对话框允许选择多个文件。</paragraph>
            <target refid="class-displayserver-constant-file-dialog-mode-open-dir"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-file-dialog-mode-open-dir" names="class_displayserver_constant_file_dialog_mode_open_dir"><reference internal="True" refid="enum-displayserver-filedialogmode"><inline classes="std std-ref">FileDialogMode</inline></reference> <strong>FILE_DIALOG_MODE_OPEN_DIR</strong> = <literal>2</literal></paragraph>
            <paragraph>该原生对话框只允许选择一个目录，不允许选择任何文件。</paragraph>
            <target refid="class-displayserver-constant-file-dialog-mode-open-any"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-file-dialog-mode-open-any" names="class_displayserver_constant_file_dialog_mode_open_any"><reference internal="True" refid="enum-displayserver-filedialogmode"><inline classes="std std-ref">FileDialogMode</inline></reference> <strong>FILE_DIALOG_MODE_OPEN_ANY</strong> = <literal>3</literal></paragraph>
            <paragraph>该原生对话框允许选择一个文件或目录。</paragraph>
            <target refid="class-displayserver-constant-file-dialog-mode-save-file"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-file-dialog-mode-save-file" names="class_displayserver_constant_file_dialog_mode_save_file"><reference internal="True" refid="enum-displayserver-filedialogmode"><inline classes="std std-ref">FileDialogMode</inline></reference> <strong>FILE_DIALOG_MODE_SAVE_FILE</strong> = <literal>4</literal></paragraph>
            <paragraph>当文件存在时，原生对话框会发出警告。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-displayserver-windowmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-displayserver-windowmode" names="enum_displayserver_windowmode">enum <strong>WindowMode</strong>: <reference internal="True" refid="enum-displayserver-windowmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-displayserver-constant-window-mode-windowed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-mode-windowed" names="class_displayserver_constant_window_mode_windowed"><reference internal="True" refid="enum-displayserver-windowmode"><inline classes="std std-ref">WindowMode</inline></reference> <strong>WINDOW_MODE_WINDOWED</strong> = <literal>0</literal></paragraph>
            <paragraph>窗口模式，即 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 不占据整个屏幕（除非设置为屏幕的大小）。</paragraph>
            <target refid="class-displayserver-constant-window-mode-minimized"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-mode-minimized" names="class_displayserver_constant_window_mode_minimized"><reference internal="True" refid="enum-displayserver-windowmode"><inline classes="std std-ref">WindowMode</inline></reference> <strong>WINDOW_MODE_MINIMIZED</strong> = <literal>1</literal></paragraph>
            <paragraph>最小化窗口模式，即 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 在窗口管理器的窗口列表中既不可见也不可用。通常发生在按下最小化按钮时。</paragraph>
            <target refid="class-displayserver-constant-window-mode-maximized"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-mode-maximized" names="class_displayserver_constant_window_mode_maximized"><reference internal="True" refid="enum-displayserver-windowmode"><inline classes="std std-ref">WindowMode</inline></reference> <strong>WINDOW_MODE_MAXIMIZED</strong> = <literal>2</literal></paragraph>
            <paragraph>最大化窗口模式，即 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 会占据整个屏幕区域，任务栏除外，并且会显示边框。通常发生在按下最大化按钮时。</paragraph>
            <target refid="class-displayserver-constant-window-mode-fullscreen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-mode-fullscreen" names="class_displayserver_constant_window_mode_fullscreen"><reference internal="True" refid="enum-displayserver-windowmode"><inline classes="std std-ref">WindowMode</inline></reference> <strong>WINDOW_MODE_FULLSCREEN</strong> = <literal>3</literal></paragraph>
            <paragraph>具有完整多窗口支持的全屏模式。</paragraph>
            <paragraph>全屏窗口覆盖屏幕的整个显示区域，且没有任何装饰。显示的视频模式没有更改。</paragraph>
            <paragraph><strong>在 Windows 上：</strong>多窗口全屏模式具有 1px 宽的颜色为 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-environment-defaults-default-clear-color"><inline classes="std std-ref">ProjectSettings.rendering/environment/defaults/default_clear_color</inline></reference> 的边框。</paragraph>
            <paragraph><strong>在 macOS 上：</strong>使用新桌面来显示正在运行的项目。</paragraph>
            <paragraph><strong>注意：</strong>无论平台如何，启用全屏都会更改窗口大小以匹配显示器的大小。因此，请确保你的项目在启用全屏模式时支持<reference internal="True" refuri="../tutorials/rendering/multiple_resolutions"><inline classes="doc">多种分辨率</inline></reference>。</paragraph>
            <target refid="class-displayserver-constant-window-mode-exclusive-fullscreen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-mode-exclusive-fullscreen" names="class_displayserver_constant_window_mode_exclusive_fullscreen"><reference internal="True" refid="enum-displayserver-windowmode"><inline classes="std std-ref">WindowMode</inline></reference> <strong>WINDOW_MODE_EXCLUSIVE_FULLSCREEN</strong> = <literal>4</literal></paragraph>
            <paragraph>单窗口全屏模式。这种模式开销较小，但一次只能在给定屏幕上打开一个窗口（打开子窗口或切换应用程序会触发全屏过渡）。</paragraph>
            <paragraph>全屏窗口会覆盖屏幕的整个显示区域，没有边框或装饰。显示视频模式没有改变。</paragraph>
            <paragraph><strong>在 Windows 上：</strong>取决于视频驱动程序，全屏过渡可能会导致屏幕暂时变黑。</paragraph>
            <paragraph><strong>在 macOS 上：</strong>一个新的桌面用于显示正在运行的项目。当鼠标指针悬停在屏幕边缘时，独占全屏模式会阻止 Dock 和 Menu 出现。</paragraph>
            <paragraph><strong>在 Linux（X11）上：</strong>独占全屏模式会绕过合成器。</paragraph>
            <paragraph><strong>注意：</strong>无论平台如何，启用全屏都会更改窗口大小以匹配显示器的大小。因此，确保你的项目在启用全屏模式时支持<reference internal="True" refuri="../tutorials/rendering/multiple_resolutions"><inline classes="doc">多个分辨率</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-displayserver-windowflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-displayserver-windowflags" names="enum_displayserver_windowflags">enum <strong>WindowFlags</strong>: <reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-displayserver-constant-window-flag-resize-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-flag-resize-disabled" names="class_displayserver_constant_window_flag_resize_disabled"><reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference> <strong>WINDOW_FLAG_RESIZE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>该窗口不能通过拖动其调整大小的手柄来调整大小。但仍然可以使用 <reference internal="True" refid="class-displayserver-method-window-set-size"><inline classes="std std-ref">window_set_size</inline></reference> 调整窗口大小。全屏窗口会忽略该标志。</paragraph>
            <target refid="class-displayserver-constant-window-flag-borderless"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-flag-borderless" names="class_displayserver_constant_window_flag_borderless"><reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference> <strong>WINDOW_FLAG_BORDERLESS</strong> = <literal>1</literal></paragraph>
            <paragraph>该窗口没有原生标题栏和其他装饰。全屏窗口会忽略该标志。</paragraph>
            <target refid="class-displayserver-constant-window-flag-always-on-top"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-flag-always-on-top" names="class_displayserver_constant_window_flag_always_on_top"><reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference> <strong>WINDOW_FLAG_ALWAYS_ON_TOP</strong> = <literal>2</literal></paragraph>
            <paragraph>该窗口悬浮在所有其他窗口之上。全屏窗口会忽略该标志。</paragraph>
            <target refid="class-displayserver-constant-window-flag-transparent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-flag-transparent" names="class_displayserver_constant_window_flag_transparent"><reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference> <strong>WINDOW_FLAG_TRANSPARENT</strong> = <literal>3</literal></paragraph>
            <paragraph>该窗口背景可以是透明的。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refid="class-displayserver-method-is-window-transparency-available"><inline classes="std std-ref">is_window_transparency_available</inline></reference> 返回 <literal>false</literal>，则该标志无效。</paragraph>
            <paragraph><strong>注意：</strong>Linux （X11/Wayland）、macOS 和 Windows 上实现了透明支持，但可用性可能因 GPU 驱动程序、显示管理器和合成器功能而异。</paragraph>
            <target refid="class-displayserver-constant-window-flag-no-focus"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-flag-no-focus" names="class_displayserver_constant_window_flag_no_focus"><reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference> <strong>WINDOW_FLAG_NO_FOCUS</strong> = <literal>4</literal></paragraph>
            <paragraph>该窗口无法获得焦点。无聚焦窗口会忽略除鼠标点击外的所有输入。</paragraph>
            <target refid="class-displayserver-constant-window-flag-popup"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-flag-popup" names="class_displayserver_constant_window_flag_popup"><reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference> <strong>WINDOW_FLAG_POPUP</strong> = <literal>5</literal></paragraph>
            <paragraph>窗口是菜单或 <reference internal="True" refuri="class_optionbutton#class-optionbutton"><inline classes="std std-ref">OptionButton</inline></reference> 下拉菜单的一部分。当窗口可见时，不能更改该标志。活动的弹出窗口会以独占的形式接收所有输入，但不会从其父窗口窃取焦点。当在其外部点击或切换应用程序时，弹出窗口将会自动关闭。 弹出窗口必须已经设置了临时父级（参见 <reference internal="True" refid="class-displayserver-method-window-set-transient"><inline classes="std std-ref">window_set_transient</inline></reference>）。</paragraph>
            <target refid="class-displayserver-constant-window-flag-extend-to-title"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-flag-extend-to-title" names="class_displayserver_constant_window_flag_extend_to_title"><reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference> <strong>WINDOW_FLAG_EXTEND_TO_TITLE</strong> = <literal>6</literal></paragraph>
            <paragraph>窗口内容扩展到窗口的全部大小。与无边框窗口不同，框架仍保持不变，可以调整窗口大小，标题栏是透明的，但具有最小化/最大化/关闭按钮。</paragraph>
            <paragraph>使用 <reference internal="True" refid="class-displayserver-method-window-set-window-buttons-offset"><inline classes="std std-ref">window_set_window_buttons_offset</inline></reference> 调整最小化/最大化/关闭按钮的偏移量。</paragraph>
            <paragraph>使用 <reference internal="True" refid="class-displayserver-method-window-get-safe-title-margins"><inline classes="std std-ref">window_get_safe_title_margins</inline></reference> 确定标题栏下方未被装饰覆盖的区域。</paragraph>
            <paragraph><strong>注意：</strong>该标志仅在 macOS 上实现。</paragraph>
            <target refid="class-displayserver-constant-window-flag-mouse-passthrough"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-flag-mouse-passthrough" names="class_displayserver_constant_window_flag_mouse_passthrough"><reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference> <strong>WINDOW_FLAG_MOUSE_PASSTHROUGH</strong> = <literal>7</literal></paragraph>
            <paragraph>所有鼠标事件都被传递到同一应用程序的底层窗口。</paragraph>
            <target refid="class-displayserver-constant-window-flag-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-flag-max" names="class_displayserver_constant_window_flag_max"><reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference> <strong>WINDOW_FLAG_MAX</strong> = <literal>8</literal></paragraph>
            <paragraph><reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference> 的最大值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-displayserver-windowevent"></target>
            <paragraph classes="classref-enumeration" ids="enum-displayserver-windowevent" names="enum_displayserver_windowevent">enum <strong>WindowEvent</strong>: <reference internal="True" refid="enum-displayserver-windowevent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-displayserver-constant-window-event-mouse-enter"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-event-mouse-enter" names="class_displayserver_constant_window_event_mouse_enter"><reference internal="True" refid="enum-displayserver-windowevent"><inline classes="std std-ref">WindowEvent</inline></reference> <strong>WINDOW_EVENT_MOUSE_ENTER</strong> = <literal>0</literal></paragraph>
            <paragraph>当鼠标指针进入该窗口时发送。</paragraph>
            <target refid="class-displayserver-constant-window-event-mouse-exit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-event-mouse-exit" names="class_displayserver_constant_window_event_mouse_exit"><reference internal="True" refid="enum-displayserver-windowevent"><inline classes="std std-ref">WindowEvent</inline></reference> <strong>WINDOW_EVENT_MOUSE_EXIT</strong> = <literal>1</literal></paragraph>
            <paragraph>当鼠标指针退出该窗口时发送。</paragraph>
            <target refid="class-displayserver-constant-window-event-focus-in"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-event-focus-in" names="class_displayserver_constant_window_event_focus_in"><reference internal="True" refid="enum-displayserver-windowevent"><inline classes="std std-ref">WindowEvent</inline></reference> <strong>WINDOW_EVENT_FOCUS_IN</strong> = <literal>2</literal></paragraph>
            <paragraph>当窗口获得焦点时发送。</paragraph>
            <target refid="class-displayserver-constant-window-event-focus-out"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-event-focus-out" names="class_displayserver_constant_window_event_focus_out"><reference internal="True" refid="enum-displayserver-windowevent"><inline classes="std std-ref">WindowEvent</inline></reference> <strong>WINDOW_EVENT_FOCUS_OUT</strong> = <literal>3</literal></paragraph>
            <paragraph>当窗口失去焦点时发送。</paragraph>
            <target refid="class-displayserver-constant-window-event-close-request"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-event-close-request" names="class_displayserver_constant_window_event_close_request"><reference internal="True" refid="enum-displayserver-windowevent"><inline classes="std std-ref">WindowEvent</inline></reference> <strong>WINDOW_EVENT_CLOSE_REQUEST</strong> = <literal>4</literal></paragraph>
            <paragraph>当用户试图关闭该窗口时发送（例如按下关闭按钮）。</paragraph>
            <target refid="class-displayserver-constant-window-event-go-back-request"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-event-go-back-request" names="class_displayserver_constant_window_event_go_back_request"><reference internal="True" refid="enum-displayserver-windowevent"><inline classes="std std-ref">WindowEvent</inline></reference> <strong>WINDOW_EVENT_GO_BACK_REQUEST</strong> = <literal>5</literal></paragraph>
            <paragraph>当按下设备的“后退”按钮时发送。</paragraph>
            <paragraph><strong>注意：</strong>该事件仅在 Android 上实现。</paragraph>
            <target refid="class-displayserver-constant-window-event-dpi-change"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-event-dpi-change" names="class_displayserver_constant_window_event_dpi_change"><reference internal="True" refid="enum-displayserver-windowevent"><inline classes="std std-ref">WindowEvent</inline></reference> <strong>WINDOW_EVENT_DPI_CHANGE</strong> = <literal>6</literal></paragraph>
            <paragraph>当窗口被移动到具有不同 DPI 的显示器上，或者显示器的 DPI 更改时发送。</paragraph>
            <paragraph><strong>注意：</strong>该标志仅在 macOS 上实现。</paragraph>
            <target refid="class-displayserver-constant-window-event-titlebar-change"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-event-titlebar-change" names="class_displayserver_constant_window_event_titlebar_change"><reference internal="True" refid="enum-displayserver-windowevent"><inline classes="std std-ref">WindowEvent</inline></reference> <strong>WINDOW_EVENT_TITLEBAR_CHANGE</strong> = <literal>7</literal></paragraph>
            <paragraph>当窗口标题栏的装饰改变时发送（例如 <reference internal="True" refid="class-displayserver-constant-window-flag-extend-to-title"><inline classes="std std-ref">WINDOW_FLAG_EXTEND_TO_TITLE</inline></reference> 被设置或窗口进入/退出全屏模式）。</paragraph>
            <paragraph><strong>注意：</strong>该标志仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-displayserver-vsyncmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-displayserver-vsyncmode" names="enum_displayserver_vsyncmode">enum <strong>VSyncMode</strong>: <reference internal="True" refid="enum-displayserver-vsyncmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-displayserver-constant-vsync-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-vsync-disabled" names="class_displayserver_constant_vsync_disabled"><reference internal="True" refid="enum-displayserver-vsyncmode"><inline classes="std std-ref">VSyncMode</inline></reference> <strong>VSYNC_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>没有垂直同步，这意味着引擎将尽可能快地显示帧（可能会有可见的撕裂）。帧速率是未限制的（不考虑 <reference internal="True" refuri="class_engine#class-engine-property-max-fps"><inline classes="std std-ref">Engine.max_fps</inline></reference>）。</paragraph>
            <target refid="class-displayserver-constant-vsync-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-vsync-enabled" names="class_displayserver_constant_vsync_enabled"><reference internal="True" refid="enum-displayserver-vsyncmode"><inline classes="std std-ref">VSyncMode</inline></reference> <strong>VSYNC_ENABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>默认的垂直同步模式，图像只在垂直消隐间隔显示（没有可见的撕裂）。帧速率受显示器刷新率的限制（不考虑 <reference internal="True" refuri="class_engine#class-engine-property-max-fps"><inline classes="std std-ref">Engine.max_fps</inline></reference>）。</paragraph>
            <target refid="class-displayserver-constant-vsync-adaptive"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-vsync-adaptive" names="class_displayserver_constant_vsync_adaptive"><reference internal="True" refid="enum-displayserver-vsyncmode"><inline classes="std std-ref">VSyncMode</inline></reference> <strong>VSYNC_ADAPTIVE</strong> = <literal>2</literal></paragraph>
            <paragraph>当帧速率降至屏幕刷新率以下以减少卡顿（可能有可见的撕裂）时，行为类似于 <reference internal="True" refid="class-displayserver-constant-vsync-disabled"><inline classes="std std-ref">VSYNC_DISABLED</inline></reference>。否则，启用垂直同步以避免撕裂。帧速率受显示器刷新率的限制（不考虑 <reference internal="True" refuri="class_engine#class-engine-property-max-fps"><inline classes="std std-ref">Engine.max_fps</inline></reference>）。使用兼容渲染方法时表现得像 <reference internal="True" refid="class-displayserver-constant-vsync-enabled"><inline classes="std std-ref">VSYNC_ENABLED</inline></reference>。</paragraph>
            <target refid="class-displayserver-constant-vsync-mailbox"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-vsync-mailbox" names="class_displayserver_constant_vsync_mailbox"><reference internal="True" refid="enum-displayserver-vsyncmode"><inline classes="std std-ref">VSyncMode</inline></reference> <strong>VSYNC_MAILBOX</strong> = <literal>3</literal></paragraph>
            <paragraph>在垂直消隐间隔显示队列中的最新图像，同时对其他图像渲染（没有可见的撕裂）。帧速率是未限制的（不考虑 <reference internal="True" refuri="class_engine#class-engine-property-max-fps"><inline classes="std std-ref">Engine.max_fps</inline></reference>）。</paragraph>
            <paragraph>虽然不能保证，但可以尽可能快地渲染图像，这可能会减少输入滞后（也称为“快速”V-Sync 模式）。<reference internal="True" refid="class-displayserver-constant-vsync-mailbox"><inline classes="std std-ref">VSYNC_MAILBOX</inline></reference> 在渲染的帧数至少是显示器刷新率的两倍时效果最佳。使用兼容渲染方法时表现得像 <reference internal="True" refid="class-displayserver-constant-vsync-enabled"><inline classes="std std-ref">VSYNC_ENABLED</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-displayserver-handletype"></target>
            <paragraph classes="classref-enumeration" ids="enum-displayserver-handletype" names="enum_displayserver_handletype">enum <strong>HandleType</strong>: <reference internal="True" refid="enum-displayserver-handletype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-displayserver-constant-display-handle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-display-handle" names="class_displayserver_constant_display_handle"><reference internal="True" refid="enum-displayserver-handletype"><inline classes="std std-ref">HandleType</inline></reference> <strong>DISPLAY_HANDLE</strong> = <literal>0</literal></paragraph>
            <paragraph>显示器句柄：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Linux (X11)：显示器的 <literal>X11::Display*</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Android：显示器的 <literal>EGLDisplay</literal>。</paragraph>
                </list_item>
            </bullet_list>
            <target refid="class-displayserver-constant-window-handle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-handle" names="class_displayserver_constant_window_handle"><reference internal="True" refid="enum-displayserver-handletype"><inline classes="std std-ref">HandleType</inline></reference> <strong>WINDOW_HANDLE</strong> = <literal>1</literal></paragraph>
            <paragraph>窗口句柄：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Windows：窗口的 <literal>HWND</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Linux (X11)：窗口的 <literal>X11::Window*</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>macOS：窗口的 <literal>NSWindow*</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>iOS：视图控制器的 <literal>UIViewController*</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Android：Activity 的 <literal>jObject</literal>。</paragraph>
                </list_item>
            </bullet_list>
            <target refid="class-displayserver-constant-window-view"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-window-view" names="class_displayserver_constant_window_view"><reference internal="True" refid="enum-displayserver-handletype"><inline classes="std std-ref">HandleType</inline></reference> <strong>WINDOW_VIEW</strong> = <literal>2</literal></paragraph>
            <paragraph>窗口视图：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Windows：窗口的 <literal>HDC</literal>（仅适用于 GL 兼容性渲染器）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>macOS：窗口主视图的 <literal>NSView*</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>iOS：窗口主视图的 <literal>UIView*</literal>。</paragraph>
                </list_item>
            </bullet_list>
            <target refid="class-displayserver-constant-opengl-context"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-opengl-context" names="class_displayserver_constant_opengl_context"><reference internal="True" refid="enum-displayserver-handletype"><inline classes="std std-ref">HandleType</inline></reference> <strong>OPENGL_CONTEXT</strong> = <literal>3</literal></paragraph>
            <paragraph>OpenGL 上下文（仅适用于 GL 兼容性渲染器）：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Windows：窗口的 <literal>HGLRC</literal>（原生 GL）或窗口的 <literal>EGLContext</literal>（ANGLE）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Linux（X11）：窗口的 <literal>GLXContext*</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>macOS：窗口的 <literal>NSOpenGLContext*</literal>（原生 GL）或窗口的 <literal>EGLContext</literal>（ANGLE）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Android：窗口的 <literal>EGLContext</literal>。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-displayserver-ttsutteranceevent"></target>
            <paragraph classes="classref-enumeration" ids="enum-displayserver-ttsutteranceevent" names="enum_displayserver_ttsutteranceevent">enum <strong>TTSUtteranceEvent</strong>: <reference internal="True" refid="enum-displayserver-ttsutteranceevent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-displayserver-constant-tts-utterance-started"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-tts-utterance-started" names="class_displayserver_constant_tts_utterance_started"><reference internal="True" refid="enum-displayserver-ttsutteranceevent"><inline classes="std std-ref">TTSUtteranceEvent</inline></reference> <strong>TTS_UTTERANCE_STARTED</strong> = <literal>0</literal></paragraph>
            <paragraph>发言开始。</paragraph>
            <target refid="class-displayserver-constant-tts-utterance-ended"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-tts-utterance-ended" names="class_displayserver_constant_tts_utterance_ended"><reference internal="True" refid="enum-displayserver-ttsutteranceevent"><inline classes="std std-ref">TTSUtteranceEvent</inline></reference> <strong>TTS_UTTERANCE_ENDED</strong> = <literal>1</literal></paragraph>
            <paragraph>发言顺利结束。</paragraph>
            <target refid="class-displayserver-constant-tts-utterance-canceled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-tts-utterance-canceled" names="class_displayserver_constant_tts_utterance_canceled"><reference internal="True" refid="enum-displayserver-ttsutteranceevent"><inline classes="std std-ref">TTSUtteranceEvent</inline></reference> <strong>TTS_UTTERANCE_CANCELED</strong> = <literal>2</literal></paragraph>
            <paragraph>发言取消，或者 TTS 服务无法处理。</paragraph>
            <target refid="class-displayserver-constant-tts-utterance-boundary"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-displayserver-constant-tts-utterance-boundary" names="class_displayserver_constant_tts_utterance_boundary"><reference internal="True" refid="enum-displayserver-ttsutteranceevent"><inline classes="std std-ref">TTSUtteranceEvent</inline></reference> <strong>TTS_UTTERANCE_BOUNDARY</strong> = <literal>3</literal></paragraph>
            <paragraph>发言到达单词或句子的边界。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="常量">
            <title>常量</title>
            <target refid="class-displayserver-constant-screen-with-mouse-focus"></target>
            <paragraph classes="classref-constant" ids="class-displayserver-constant-screen-with-mouse-focus" names="class_displayserver_constant_screen_with_mouse_focus"><strong>SCREEN_WITH_MOUSE_FOCUS</strong> = <literal>-4</literal> <reference internal="True" refid="class-displayserver-constant-screen-with-mouse-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>表示包含鼠标指针的屏幕。</paragraph>
            <paragraph><strong>注意：</strong>在 Linux（Wayland）上，该常量始终代表索引 <literal>0</literal> 处的屏幕。</paragraph>
            <target refid="class-displayserver-constant-screen-with-keyboard-focus"></target>
            <paragraph classes="classref-constant" ids="class-displayserver-constant-screen-with-keyboard-focus" names="class_displayserver_constant_screen_with_keyboard_focus"><strong>SCREEN_WITH_KEYBOARD_FOCUS</strong> = <literal>-3</literal> <reference internal="True" refid="class-displayserver-constant-screen-with-keyboard-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>表示包含具有键盘焦点的窗口的屏幕。</paragraph>
            <paragraph><strong>注意：</strong>在 Linux（Wayland）上，该常量始终代表索引 <literal>0</literal> 处的屏幕。</paragraph>
            <target refid="class-displayserver-constant-screen-primary"></target>
            <paragraph classes="classref-constant" ids="class-displayserver-constant-screen-primary" names="class_displayserver_constant_screen_primary"><strong>SCREEN_PRIMARY</strong> = <literal>-2</literal> <reference internal="True" refid="class-displayserver-constant-screen-primary"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>代表主屏幕。</paragraph>
            <paragraph><strong>注意：</strong>在 Linux（Wayland）上，该常量始终代表索引 <literal>0</literal> 处的屏幕。</paragraph>
            <target refid="class-displayserver-constant-screen-of-main-window"></target>
            <paragraph classes="classref-constant" ids="class-displayserver-constant-screen-of-main-window" names="class_displayserver_constant_screen_of_main_window"><strong>SCREEN_OF_MAIN_WINDOW</strong> = <literal>-1</literal> <reference internal="True" refid="class-displayserver-constant-screen-of-main-window"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>代表主窗口所在的屏幕。这通常是允许指定多个屏幕之一的函数中的默认值。</paragraph>
            <paragraph><strong>注意：</strong>在 Linux（Wayland）上，该常量始终代表索引 <literal>0</literal> 处的屏幕。</paragraph>
            <target refid="class-displayserver-constant-main-window-id"></target>
            <paragraph classes="classref-constant" ids="class-displayserver-constant-main-window-id" names="class_displayserver_constant_main_window_id"><strong>MAIN_WINDOW_ID</strong> = <literal>0</literal> <reference internal="True" refid="class-displayserver-constant-main-window-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>主窗口的 ID，可以传给需要 <literal>window_id</literal> 的方法，该窗口由引擎生成。</paragraph>
            <target refid="class-displayserver-constant-invalid-window-id"></target>
            <paragraph classes="classref-constant" ids="class-displayserver-constant-invalid-window-id" names="class_displayserver_constant_invalid_window_id"><strong>INVALID_WINDOW_ID</strong> = <literal>-1</literal> <reference internal="True" refid="class-displayserver-constant-invalid-window-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指向一个不存在窗口的 ID。如果没有窗口与请求的结果相匹配，某些 <strong>DisplayServer</strong> 方法将返回这个 ID。</paragraph>
            <target refid="class-displayserver-constant-invalid-indicator-id"></target>
            <paragraph classes="classref-constant" ids="class-displayserver-constant-invalid-indicator-id" names="class_displayserver_constant_invalid_indicator_id"><strong>INVALID_INDICATOR_ID</strong> = <literal>-1</literal> <reference internal="True" refid="class-displayserver-constant-invalid-indicator-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>引用不存在的应用程序状态指示器的 ID。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-displayserver-method-clipboard-get"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-clipboard-get" names="class_displayserver_method_clipboard_get"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>clipboard_get</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-clipboard-get"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果可能，将用户的剪贴板作为字符串返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-clipboard-get-image"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-clipboard-get-image" names="class_displayserver_method_clipboard_get_image"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>clipboard_get_image</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-clipboard-get-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the user's clipboard as an image if possible.</paragraph>
            <paragraph><strong>Note:</strong> This method uses the copied pixel data, e.g. from a image editing software or a web browser, not an image file copied from file explorer.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-clipboard-get-primary"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-clipboard-get-primary" names="class_displayserver_method_clipboard_get_primary"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>clipboard_get_primary</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-clipboard-get-primary"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果可能的话，将用户的<reference name="主" refuri="https://unix.stackexchange.com/questions/139191/whats-the-difference-between-primary-selection-and-clipboard-buffer">主</reference>剪贴板作为字符串返回。这是当用户在任何应用程序中选择文本时设置的剪贴板，而不是在按下 <literal classes="kbd">Ctrl + C</literal> 时设置的。然后可以通过在支持主剪贴板机制的任何应用程序中，通过点击鼠标中键来粘贴该剪贴板数据。</paragraph>
            <paragraph><strong>注意：</strong>这个方法只在 Linux（X11/Wayland）上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-clipboard-has"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-clipboard-has" names="class_displayserver_method_clipboard_has"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>clipboard_has</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-clipboard-has"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果用户的剪贴板中有文本内容，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-clipboard-has-image"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-clipboard-has-image" names="class_displayserver_method_clipboard_has_image"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>clipboard_has_image</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-clipboard-has-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果用户的剪贴板中有图像内容，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-clipboard-set"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-clipboard-set" names="class_displayserver_method_clipboard_set"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clipboard_set</strong>(clipboard: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-displayserver-method-clipboard-set"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将用户的剪贴板内容设置为给定的字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-clipboard-set-primary"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-clipboard-set-primary" names="class_displayserver_method_clipboard_set_primary"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clipboard_set_primary</strong>(clipboard_primary: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-displayserver-method-clipboard-set-primary"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将用户的<reference name="主剪贴板" refuri="https://unix.stackexchange.com/questions/139191/whats-the-difference-between-primary-selection-and-clipboard-buffer">主剪贴板</reference>内容设置为给定的字符串。这是用户在应用程序中选中文本时设置的剪贴板，不是按 <literal classes="kbd">Ctrl + C</literal> 时设置的。设置后可以在任何支持主剪贴板机制的应用程序中通过点击鼠标中键粘贴剪贴板数据。</paragraph>
            <paragraph><strong>注意：</strong>这个方法只在 Linux（X11/Wayland）上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-create-status-indicator"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-create-status-indicator" names="class_displayserver_method_create_status_indicator"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>create_status_indicator</strong>(icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-create-status-indicator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建应用程序状态指示器，可以指定图标、工具提示以及激活回调。</paragraph>
            <paragraph><literal>callback</literal> 应该接受两个参数：按下的鼠标按键（<reference internal="True" refuri="class_@globalscope#enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> 常量）以及点击位置（屏幕坐标 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-cursor-get-shape"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-cursor-get-shape" names="class_displayserver_method_cursor_get_shape"><reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>cursor_get_shape</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-cursor-get-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回默认鼠标光标形状，由 <reference internal="True" refid="class-displayserver-method-cursor-set-shape"><inline classes="std std-ref">cursor_set_shape</inline></reference> 设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-cursor-set-custom-image"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-cursor-set-custom-image" names="class_displayserver_method_cursor_set_custom_image"><abbreviation explanation="无返回值。">void</abbreviation> <strong>cursor_set_custom_image</strong>(cursor: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>, shape: <reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> = 0, hotspot: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <reference internal="True" refid="class-displayserver-method-cursor-set-custom-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为给定的形状 <literal>shape</literal> 设置自定义鼠标指针图像。这意味着用户的操作系统和鼠标光标主题不再影响鼠标光标的外观。</paragraph>
            <paragraph><literal>cursor</literal> 可以是 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 或 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>，并且它不应大于 256×256 才能正确显示。还可以选择设置 <literal>hotspot</literal> 以偏移图像相对于点击点的位置。默认情况下，<literal>hotspot</literal> 被设置为图像的左上角。另见 <reference internal="True" refid="class-displayserver-method-cursor-set-shape"><inline classes="std std-ref">cursor_set_shape</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-cursor-set-shape"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-cursor-set-shape" names="class_displayserver_method_cursor_set_shape"><abbreviation explanation="无返回值。">void</abbreviation> <strong>cursor_set_shape</strong>(shape: <reference internal="True" refid="enum-displayserver-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference>) <reference internal="True" refid="class-displayserver-method-cursor-set-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置默认的鼠标光标形状。光标的外观将根据用户的操作系统和鼠标光标主题而变化。另见 <reference internal="True" refid="class-displayserver-method-cursor-get-shape"><inline classes="std std-ref">cursor_get_shape</inline></reference> 和 <reference internal="True" refid="class-displayserver-method-cursor-set-custom-image"><inline classes="std std-ref">cursor_set_custom_image</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-delete-status-indicator"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-delete-status-indicator" names="class_displayserver_method_delete_status_indicator"><abbreviation explanation="无返回值。">void</abbreviation> <strong>delete_status_indicator</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-displayserver-method-delete-status-indicator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除应用程序状态指示器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-dialog-input-text"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-dialog-input-text" names="class_displayserver_method_dialog_input_text"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>dialog_input_text</strong>(title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, description: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, existing_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-dialog-input-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>显示文本输入对话框，该对话框使用操作系统原生外观。<literal>callback</literal> 应接受包含文本字段内容的单个 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 参数。</paragraph>
            <paragraph><strong>注意：</strong>如果显示服务器具有 <reference internal="True" refid="class-displayserver-constant-feature-native-dialog-input"><inline classes="std std-ref">FEATURE_NATIVE_DIALOG_INPUT</inline></reference> 功能，则实现该方法。支持的平台包括 macOS 和 Windows。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-dialog-show"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-dialog-show" names="class_displayserver_method_dialog_show"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>dialog_show</strong>(title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, description: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, buttons: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-dialog-show"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>显示文本对话框，该对话框使用操作系统原生外观。<literal>callback</literal> 应接受与按下按钮的索引相对应的单个 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 参数。</paragraph>
            <paragraph><strong>注意：</strong>如果显示服务器具有 <reference internal="True" refid="class-displayserver-constant-feature-native-dialog"><inline classes="std std-ref">FEATURE_NATIVE_DIALOG</inline></reference> 功能，则实现该方法。支持的平台包括 macOS 和 Windows。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-enable-for-stealing-focus"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-enable-for-stealing-focus" names="class_displayserver_method_enable_for_stealing_focus"><abbreviation explanation="无返回值。">void</abbreviation> <strong>enable_for_stealing_focus</strong>(process_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-displayserver-method-enable-for-stealing-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>让进程 PID <literal>process_id</literal> 窃取该窗口的焦点。换句话说，会禁用操作系统对指定 PID 的焦点窃取保护。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-file-dialog-show"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-file-dialog-show" names="class_displayserver_method_file_dialog_show"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>file_dialog_show</strong>(title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, current_directory: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, show_hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, mode: <reference internal="True" refid="enum-displayserver-filedialogmode"><inline classes="std std-ref">FileDialogMode</inline></reference>, filters: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-file-dialog-show"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>显示操作系统原生对话框，用于选择文件系统中的文件或目录。</paragraph>
            <paragraph><literal>filters</literal> 数组中的每个过滤字符串都应该使用类似 <literal>*.txt,*.doc;文本文件</literal> 的格式。过滤器的描述文本不是必填项，可以省略。另见 <reference internal="True" refuri="class_filedialog#class-filedialog-property-filters"><inline classes="std std-ref">FileDialog.filters</inline></reference>。</paragraph>
            <paragraph>回调具有以下参数：<literal>status: bool, selected_paths: PackedStringArray, selected_filter_index: int</literal>。</paragraph>
            <paragraph><strong>注意：</strong>如果显示服务器具有 <reference internal="True" refid="class-displayserver-constant-feature-native-dialog"><inline classes="std std-ref">FEATURE_NATIVE_DIALOG</inline></reference> 功能，则该方法已被实现。支持的平台包括 Linux（X11/Wayland）、Windows 和 macOS。</paragraph>
            <paragraph><strong>注意：</strong><literal>current_directory</literal> 可能会被忽略。</paragraph>
            <paragraph><strong>注意：</strong>在 Linux 上，<literal>show_hidden</literal> 被忽略。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，原生文件对话框没有标题。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，沙盒应用程序将保存安全范围的书签，以保留对多个会话中打开的文件夹的访问权限。使用 <reference internal="True" refuri="class_os#class-os-method-get-granted-permissions"><inline classes="std std-ref">OS.get_granted_permissions</inline></reference> 获取已保存书签的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-file-dialog-with-options-show"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-file-dialog-with-options-show" names="class_displayserver_method_file_dialog_with_options_show"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>file_dialog_with_options_show</strong>(title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, current_directory: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, show_hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, mode: <reference internal="True" refid="enum-displayserver-filedialogmode"><inline classes="std std-ref">FileDialogMode</inline></reference>, filters: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, options: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>], callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-file-dialog-with-options-show"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>显示操作系统原生对话框，用于使用其他用户可选选项，选择文件系统中的文件或目录。</paragraph>
            <paragraph><literal>filters</literal> 数组中的每个过滤字符串都应该使用类似 <literal>*.txt,*.doc;文本文件</literal> 的格式。过滤器的描述文本不是必填项，可以省略。另见 <reference internal="True" refuri="class_filedialog#class-filedialog-property-filters"><inline classes="std std-ref">FileDialog.filters</inline></reference>。</paragraph>
            <paragraph><literal>options</literal> 是具有以下键的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 数组：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>"name"</literal> - 选项的名称 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>"values"</literal> - 值的 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>。如果为空，则使用布尔选项（复选框）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>"default"</literal> - 默认选择的选项索引（<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>）或默认布尔值（<reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>）。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>回调具有以下参数：<literal>status: bool, selected_paths: PackedStringArray, selected_filter_index: int, selected_option: Dictionary</literal>。</paragraph>
            <paragraph><strong>注意：</strong>如果显示服务器具有 <reference internal="True" refid="class-displayserver-constant-feature-native-dialog"><inline classes="std std-ref">FEATURE_NATIVE_DIALOG</inline></reference> 功能，则该方法已被实现。支持的平台包括 Linux（X11/Wayland）、Windows 和 macOS。</paragraph>
            <paragraph><strong>注意：</strong><literal>current_directory</literal> 可能会被忽略。</paragraph>
            <paragraph><strong>注意：</strong>在 Linux （X11）上，<literal>show_hidden</literal> 被忽略。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，原生文件对话框没有标题。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，沙盒应用程序将保存安全范围的书签，以保留对多个会话中打开的文件夹的访问权限。使用 <reference internal="True" refuri="class_os#class-os-method-get-granted-permissions"><inline classes="std std-ref">OS.get_granted_permissions</inline></reference> 获取已保存书签的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-force-process-and-drop-events"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-force-process-and-drop-events" names="class_displayserver_method_force_process_and_drop_events"><abbreviation explanation="无返回值。">void</abbreviation> <strong>force_process_and_drop_events</strong>() <reference internal="True" refid="class-displayserver-method-force-process-and-drop-events"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>强制窗口管理器进行处理，会忽略所有 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>。另见 <reference internal="True" refid="class-displayserver-method-process-events"><inline classes="std std-ref">process_events</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这个方法在 Windows 和 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-get-accent-color"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-get-accent-color" names="class_displayserver_method_get_accent_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_accent_color</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-get-accent-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回操作系统主题强调色。如果强调色未知，则返回 <literal>Color(0, 0, 0, 0)</literal>。</paragraph>
            <paragraph><strong>注意：</strong>这个方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-get-base-color"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-get-base-color" names="class_displayserver_method_get_base_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_base_color</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-get-base-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回操作系统主题基色（默认控件背景）。如果基色未知，则返回 <literal>Color(0, 0, 0, 0)</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-get-display-cutouts"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-get-display-cutouts" names="class_displayserver_method_get_display_cutouts"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>] <strong>get_display_cutouts</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-get-display-cutouts"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> 的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，其中每个都是显示切口或凹口的边界矩形。这些是相机和传感器使用的无边框屏幕上的非功能区域。如果设备没有切口，则返回一个空数组。另见 <reference internal="True" refid="class-displayserver-method-get-display-safe-area"><inline classes="std std-ref">get_display_safe_area</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>目前仅在 Android 上实现。其他平台将返回一个空数组，即使它们确实有显示切口或凹口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-get-display-safe-area"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-get-display-safe-area" names="class_displayserver_method_get_display_safe_area"><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> <strong>get_display_safe_area</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-get-display-safe-area"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回应渲染交互式控件的显示器的未遮挡区域。另见 <reference internal="True" refid="class-displayserver-method-get-display-cutouts"><inline classes="std std-ref">get_display_cutouts</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-get-keyboard-focus-screen"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-get-keyboard-focus-screen" names="class_displayserver_method_get_keyboard_focus_screen"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_keyboard_focus_screen</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-get-keyboard-focus-screen"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含具有键盘焦点的窗口的屏幕索引，如果没有被聚焦的窗口，则返回主屏幕。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-get-name"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-get-name" names="class_displayserver_method_get_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_name</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-get-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前使用的 <strong>DisplayServer</strong> 的名称。大多数操作系统只有一种 <strong>DisplayServer</strong>，但 Linux 可以使用多种 <strong>DisplayServer</strong>（目前有 X11 和 Wayland 两种）。</paragraph>
            <paragraph>内置显示服务器的名称有 <literal>Windows</literal>、<literal>macOS</literal>、<literal>X11</literal>（Linux）、<literal>Wayland</literal>（Linux）、<literal>Android</literal>、<literal>iOS</literal>、<literal>web</literal>（HTML5）、<literal>headless</literal>（使用 <literal>--headless</literal> <reference internal="True" refuri="../tutorials/editor/command_line_tutorial"><inline classes="doc">命令行参数</inline></reference>启动）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-get-primary-screen"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-get-primary-screen" names="class_displayserver_method_get_primary_screen"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_primary_screen</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-get-primary-screen"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回主屏幕的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-get-screen-count"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-get-screen-count" names="class_displayserver_method_get_screen_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_screen_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-get-screen-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回可用的显示器数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-get-screen-from-rect"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-get-screen-from-rect" names="class_displayserver_method_get_screen_from_rect"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_screen_from_rect</strong>(rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-get-screen-from-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含指定矩形的屏幕的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-get-swap-cancel-ok"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-get-swap-cancel-ok" names="class_displayserver_method_get_swap_cancel_ok"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_swap_cancel_ok</strong>() <reference internal="True" refid="class-displayserver-method-get-swap-cancel-ok"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果对话框中的<strong>确定</strong>和<strong>取消</strong>按钮进行了交换，则返回 <literal>true</literal>。在 Windows 上默认启用，从而遵循界面规范，可以使用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-gui-common-swap-cancel-ok"><inline classes="std std-ref">ProjectSettings.gui/common/swap_cancel_ok</inline></reference> 开关。</paragraph>
            <paragraph><strong>注意：</strong>由 <reference internal="True" refid="class-displayserver-method-dialog-show"><inline classes="std std-ref">dialog_show</inline></reference> 等生成的原生对话框不受影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-get-window-at-screen-position"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-get-window-at-screen-position" names="class_displayserver_method_get_window_at_screen_position"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_window_at_screen_position</strong>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-get-window-at-screen-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于指定屏幕位置 <literal>position</literal> 的窗口 ID（单位为像素）。使用多个监视器时，屏幕位置是相对于虚拟桌面区域的位置。如果多监视器中使用了不同的屏幕分辨率或朝向，原点有可能位于所有显示器之外，类似于：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">* (0, 0)        +-------+
                |       |
+-------------+ |       |
|             | |       |
|             | |       |
+-------------+ +-------+</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-get-window-list"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-get-window-list" names="class_displayserver_method_get_window_list"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_window_list</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-get-window-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回属于该进程的 Godot 窗口 ID 列表。</paragraph>
            <paragraph><strong>注意：</strong>这个列表中不含原生对话框。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-add-check-item"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-add-check-item" names="class_displayserver_method_global_menu_add_check_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_add_check_item</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-displayserver-method-global-menu-add-check-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>向 ID 为 <literal>menu_root</literal> 的全局菜单添加新的可勾选菜单项，显示的文本为 <literal>label</literal>。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <paragraph><strong>支持的系统菜单 ID：</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">"_main" - 主菜单（macOS）。
"_dock" - 程序坞弹出菜单（macOS）。
"_apple" - Apple 菜单（macOS，在“服务”之前添加的自定义项目）。
"_window" - 窗口菜单（macOS，“将所有内容置于前面”之后添加的自定义项目）。
"_help" - 帮助菜单 (macOS)。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-add-icon-check-item"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-add-icon-check-item" names="class_displayserver_method_global_menu_add_icon_check_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_add_icon_check_item</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-displayserver-method-global-menu-add-icon-check-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>向 ID 为 <literal>menu_root</literal> 的全局菜单添加新的可勾选菜单项，显示的文本为 <literal>label</literal>，图标为 <literal>icon</literal>。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <paragraph><strong>支持的系统菜单 ID：</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">"_main" - 主菜单（macOS）。
"_dock" - 程序坞弹出菜单（macOS）。
"_apple" - Apple 菜单（macOS，在“服务”之前添加的自定义项目）。
"_window" - 窗口菜单（macOS，“将所有内容置于前面”之后添加的自定义项目）。
"_help" - 帮助菜单 (macOS)。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-add-icon-item"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-add-icon-item" names="class_displayserver_method_global_menu_add_icon_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_add_icon_item</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-displayserver-method-global-menu-add-icon-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>向 ID 为 <literal>menu_root</literal> 的全局菜单添加新的菜单项，显示的文本为 <literal>label</literal>，图标为 <literal>icon</literal>。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <paragraph><strong>支持的系统菜单 ID：</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">"_main" - 主菜单（macOS）。
"_dock" - 程序坞弹出菜单（macOS）。
"_apple" - Apple 菜单（macOS，在“服务”之前添加的自定义项目）。
"_window" - 窗口菜单（macOS，“将所有内容置于前面”之后添加的自定义项目）。
"_help" - 帮助菜单 (macOS)。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-add-icon-radio-check-item"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-add-icon-radio-check-item" names="class_displayserver_method_global_menu_add_icon_radio_check_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_add_icon_radio_check_item</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-displayserver-method-global-menu-add-icon-radio-check-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>向 ID 为 <literal>menu_root</literal> 的全局菜单添加新的单选菜单项，显示的文本为 <literal>label</literal>，图标为 <literal>icon</literal>。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>单选菜单项只负责显示选中标记，并没有任何内置检查行为，必须手动进行选中、取消选中的操作。关于如何进行控制的更多信息见 <reference internal="True" refid="class-displayserver-method-global-menu-set-item-checked"><inline classes="std std-ref">global_menu_set_item_checked</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <paragraph><strong>支持的系统菜单 ID：</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">"_main" - 主菜单（macOS）。
"_dock" - 程序坞弹出菜单（macOS）。
"_apple" - Apple 菜单（macOS，在“服务”之前添加的自定义项目）。
"_window" - 窗口菜单（macOS，“将所有内容置于前面”之后添加的自定义项目）。
"_help" - 帮助菜单 (macOS)。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-add-item"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-add-item" names="class_displayserver_method_global_menu_add_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_add_item</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-displayserver-method-global-menu-add-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>向 ID 为 <literal>menu_root</literal> 的全局菜单添加新的菜单项，显示的文本为 <literal>label</literal>。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <paragraph><strong>支持的系统菜单 ID：</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">"_main" - 主菜单（macOS）。
"_dock" - 程序坞弹出菜单（macOS）。
"_apple" - Apple 菜单（macOS，在“服务”之前添加的自定义项目）。
"_window" - 窗口菜单（macOS，“将所有内容置于前面”之后添加的自定义项目）。
"_help" - 帮助菜单 (macOS)。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-add-multistate-item"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-add-multistate-item" names="class_displayserver_method_global_menu_add_multistate_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_add_multistate_item</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, max_states: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, default_state: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-displayserver-method-global-menu-add-multistate-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>向 ID 为 <literal>menu_root</literal> 的全局菜单添加新的菜单项，显示的文本为 <literal>label</literal>。</paragraph>
            <paragraph>与常规的二态菜单项不同，多状态菜单项的状态可以多于两个，由 <literal>max_states</literal> 定义。每点击或激活该菜单项一次，状态就会加一。默认值由 <literal>default_state</literal> 定义。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>默认情况下不会展示当前菜单项的状态，应该手动更改。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <paragraph><strong>支持的系统菜单 ID：</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">"_main" - 主菜单（macOS）。
"_dock" - 程序坞弹出菜单（macOS）。
"_apple" - Apple 菜单（macOS，在“服务”之前添加的自定义项目）。
"_window" - 窗口菜单（macOS，“将所有内容置于前面”之后添加的自定义项目）。
"_help" - 帮助菜单 (macOS)。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-add-radio-check-item"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-add-radio-check-item" names="class_displayserver_method_global_menu_add_radio_check_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_add_radio_check_item</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-displayserver-method-global-menu-add-radio-check-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>向 ID 为 <literal>menu_root</literal> 的全局菜单添加新的单选菜单项，显示的文本为 <literal>label</literal>。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>单选菜单项只负责显示选中标记，并没有任何内置检查行为，必须手动进行选中、取消选中的操作。关于如何进行控制的更多信息见 <reference internal="True" refid="class-displayserver-method-global-menu-set-item-checked"><inline classes="std std-ref">global_menu_set_item_checked</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <paragraph><strong>支持的系统菜单 ID：</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">"_main" - 主菜单（macOS）。
"_dock" - 程序坞弹出菜单（macOS）。
"_apple" - Apple 菜单（macOS，在“服务”之前添加的自定义项目）。
"_window" - 窗口菜单（macOS，“将所有内容置于前面”之后添加的自定义项目）。
"_help" - 帮助菜单 (macOS)。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-add-separator"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-add-separator" names="class_displayserver_method_global_menu_add_separator"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_add_separator</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-displayserver-method-global-menu-add-separator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>向 ID 为 <literal>menu_root</literal> 的全局菜单添加分隔符。分隔符也拥有索引。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <paragraph><strong>支持的系统菜单 ID：</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">"_main" - 主菜单（macOS）。
"_dock" - 程序坞弹出菜单（macOS）。
"_apple" - Apple 菜单（macOS，在“服务”之前添加的自定义项目）。
"_window" - 窗口菜单（macOS，“将所有内容置于前面”之后添加的自定义项目）。
"_help" - 帮助菜单 (macOS)。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-add-submenu-item"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-add-submenu-item" names="class_displayserver_method_global_menu_add_submenu_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_add_submenu_item</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, submenu: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-displayserver-method-global-menu-add-submenu-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>向 ID 为 <literal>menu_root</literal> 的全局菜单添加作为子菜单的菜单项。<literal>submenu</literal> 参数为全局菜单根菜单项的 ID，会在点击该菜单项时显示</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <paragraph><strong>支持的系统菜单 ID：</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">"_main" - 主菜单（macOS）。
"_dock" - 程序坞弹出菜单（macOS）。
"_apple" - Apple 菜单（macOS，在“服务”之前添加的自定义项目）。
"_window" - 窗口菜单（macOS，“将所有内容置于前面”之后添加的自定义项目）。
"_help" - 帮助菜单 (macOS)。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-clear"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-clear" names="class_displayserver_method_global_menu_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_clear</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>移除 ID 为 <literal>menu_root</literal> 的全局菜单中的所有菜单项。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <paragraph><strong>支持的系统菜单 ID：</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">"_main" - 主菜单（macOS）。
"_dock" - 程序坞弹出菜单（macOS）。
"_apple" - Apple 菜单（macOS，在“服务”之前添加的自定义项目）。
"_window" - 窗口菜单（macOS，“将所有内容置于前面”之后添加的自定义项目）。
"_help" - 帮助菜单 (macOS)。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-accelerator"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-accelerator" names="class_displayserver_method_global_menu_get_item_accelerator"><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>global_menu_get_item_accelerator</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-accelerator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的快捷键。快捷键是能够激活该菜单项的特殊按键组合，无论该控件是否有焦点。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-callback"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-callback" names="class_displayserver_method_global_menu_get_item_callback"><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> <strong>global_menu_get_item_callback</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的回调。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-count"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-count" names="class_displayserver_method_global_menu_get_item_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_get_item_count</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回 ID 为 <literal>menu_root</literal> 的全局菜单中菜单项的数量。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-icon"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-icon" names="class_displayserver_method_global_menu_get_item_icon"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>global_menu_get_item_icon</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的图标。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-indentation-level"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-indentation-level" names="class_displayserver_method_global_menu_get_item_indentation_level"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_get_item_indentation_level</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-indentation-level"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的水平偏移量。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-index-from-tag"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-index-from-tag" names="class_displayserver_method_global_menu_get_item_index_from_tag"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_get_item_index_from_tag</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-index-from-tag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回标签为指定的 <literal>tag</literal> 的菜单项的索引。引擎会自动为每个菜单项分配索引，无法手动设置。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-index-from-text"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-index-from-text" names="class_displayserver_method_global_menu_get_item_index_from_text"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_get_item_index_from_text</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-index-from-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回文本为指定的 <literal>text</literal> 的菜单项的索引。引擎会自动为每个菜单项分配索引，无法手动设置。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-key-callback"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-key-callback" names="class_displayserver_method_global_menu_get_item_key_callback"><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> <strong>global_menu_get_item_key_callback</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-key-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的快捷键回调。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-max-states"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-max-states" names="class_displayserver_method_global_menu_get_item_max_states"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_get_item_max_states</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-max-states"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回多状态项的状态数。详见 <reference internal="True" refid="class-displayserver-method-global-menu-add-multistate-item"><inline classes="std std-ref">global_menu_add_multistate_item</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-state"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-state" names="class_displayserver_method_global_menu_get_item_state"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>global_menu_get_item_state</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回多状态项的状态。详见 <reference internal="True" refid="class-displayserver-method-global-menu-add-multistate-item"><inline classes="std std-ref">global_menu_add_multistate_item</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-submenu"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-submenu" names="class_displayserver_method_global_menu_get_item_submenu"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>global_menu_get_item_submenu</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-submenu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的子菜单 ID。关于如何添加子菜单的更多信息见 <reference internal="True" refid="class-displayserver-method-global-menu-add-submenu-item"><inline classes="std std-ref">global_menu_add_submenu_item</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-tag"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-tag" names="class_displayserver_method_global_menu_get_item_tag"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>global_menu_get_item_tag</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-tag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回指定菜单项的元数据，可能是任何类型。元数据可以使用 <reference internal="True" refid="class-displayserver-method-global-menu-set-item-tag"><inline classes="std std-ref">global_menu_set_item_tag</inline></reference> 设置，可以方法地为菜单项关联上下文数据。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-text"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-text" names="class_displayserver_method_global_menu_get_item_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>global_menu_get_item_text</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的文本。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-item-tooltip"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-item-tooltip" names="class_displayserver_method_global_menu_get_item_tooltip"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>global_menu_get_item_tooltip</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-item-tooltip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项所关联的工具提示。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-get-system-menu-roots"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-get-system-menu-roots" names="class_displayserver_method_global_menu_get_system_menu_roots"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>global_menu_get_system_menu_roots</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-get-system-menu-roots"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>返回受支持的系统菜单 ID 和名称的字典。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-is-item-checkable"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-is-item-checkable" names="class_displayserver_method_global_menu_is_item_checkable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>global_menu_is_item_checkable</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-is-item-checkable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>如果索引为 <literal>idx</literal> 的菜单项能够以某种方式选中，即有复选框或单选按钮，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-is-item-checked"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-is-item-checked" names="class_displayserver_method_global_menu_is_item_checked"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>global_menu_is_item_checked</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-is-item-checked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>如果索引为 <literal>idx</literal> 的菜单项处于选中状态，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-is-item-disabled"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-is-item-disabled" names="class_displayserver_method_global_menu_is_item_disabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>global_menu_is_item_disabled</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-is-item-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>如果索引为 <literal>idx</literal> 的菜单项处于禁用状态，则返回 <literal>true</literal>。禁用状态下无法被选中，也无法激活动作。</paragraph>
            <paragraph>关于如何禁用菜单项的更多信息见 <reference internal="True" refid="class-displayserver-method-global-menu-set-item-disabled"><inline classes="std std-ref">global_menu_set_item_disabled</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-is-item-hidden"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-is-item-hidden" names="class_displayserver_method_global_menu_is_item_hidden"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>global_menu_is_item_hidden</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-is-item-hidden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>如果索引为 <literal>idx</literal> 的菜单项被隐藏，则返回 <literal>true</literal>。</paragraph>
            <paragraph>关于如何隐藏菜单项的更多信息见 <reference internal="True" refid="class-displayserver-method-global-menu-set-item-hidden"><inline classes="std std-ref">global_menu_set_item_hidden</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-is-item-radio-checkable"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-is-item-radio-checkable" names="class_displayserver_method_global_menu_is_item_radio_checkable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>global_menu_is_item_radio_checkable</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-global-menu-is-item-radio-checkable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>如果索引为 <literal>idx</literal> 的菜单项为单选按钮风格，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>仅为装饰作用；必须自行为单选组添加选中、取消选中的逻辑。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-remove-item"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-remove-item" names="class_displayserver_method_global_menu_remove_item"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_remove_item</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-remove-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>从全局菜单 <literal>menu_root</literal> 移除索引为 <literal>idx</literal> 的菜单项。</paragraph>
            <paragraph><strong>注意：</strong>位置在被移除菜单项之后的菜单项的索引号都会减一。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-accelerator"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-accelerator" names="class_displayserver_method_global_menu_set_item_accelerator"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_accelerator</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-accelerator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的快捷键。<literal>keycode</literal> 可以是单一 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>，也可以是 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-callback"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-callback" names="class_displayserver_method_global_menu_set_item_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_callback</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的回调。回调会在按下菜单项时发出。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> Callable 只接受一个 Variant 参数，传入 Callable 的参数是创建菜单项时传给 <literal>tag</literal> 参数的值。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-checkable"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-checkable" names="class_displayserver_method_global_menu_set_item_checkable"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_checkable</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checkable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-checkable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项是否为复选框。如果为 <literal>false</literal>，则会将该菜单项的类型设置为纯文本。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-checked"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-checked" names="class_displayserver_method_global_menu_set_item_checked"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_checked</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checked: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-checked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的选中状态。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-disabled"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-disabled" names="class_displayserver_method_global_menu_set_item_disabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_disabled</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>启用/禁用索引为 <literal>idx</literal> 的菜单项。禁用状态下无法被选中，也无法激活动作。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-hidden"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-hidden" names="class_displayserver_method_global_menu_set_item_hidden"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_hidden</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-hidden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>隐藏/显示索引为 <literal>idx</literal> 的菜单项。当它被隐藏时，项目不会出现在菜单中，并且无法调用其操作。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-hover-callbacks"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-hover-callbacks" names="class_displayserver_method_global_menu_set_item_hover_callbacks"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_hover_callbacks</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-hover-callbacks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的回调。回调会在菜单项被悬停时发出。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> Callable 需要接受一个 Variant 参数，传入 Callable 的参数是创建菜单项时传给 <literal>tag</literal> 参数的值。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-icon"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-icon" names="class_displayserver_method_global_menu_set_item_icon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_icon</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>替换指定索引 <literal>idx</literal> 的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 图标。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <paragraph><strong>注意：</strong>该方法不支持 macOS 的“_dock”菜单项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-indentation-level"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-indentation-level" names="class_displayserver_method_global_menu_set_item_indentation_level"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_indentation_level</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, level: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-indentation-level"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的水平偏移量。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-key-callback"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-key-callback" names="class_displayserver_method_global_menu_set_item_key_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_key_callback</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-key-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的回调。回调会在激活快捷键时发出。</paragraph>
            <paragraph><strong>注意：</strong><literal>key_callback</literal> Callable 只接受一个 Variant 参数，传入 Callable 的参数是创建菜单项时传给 <literal>tag</literal> 参数的值。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-max-states"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-max-states" names="class_displayserver_method_global_menu_set_item_max_states"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_max_states</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max_states: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-max-states"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置多状态项的状态数。详见 <reference internal="True" refid="class-displayserver-method-global-menu-add-multistate-item"><inline classes="std std-ref">global_menu_add_multistate_item</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-radio-checkable"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-radio-checkable" names="class_displayserver_method_global_menu_set_item_radio_checkable"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_radio_checkable</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checkable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-radio-checkable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>将索引为 <literal>idx</literal> 的菜单项设置为单选按钮风格。如果为 <literal>false</literal>，则会将该菜单项的类型设置为纯文本。</paragraph>
            <paragraph><strong>注意：</strong>仅为装饰作用；必须自行为单选组添加选中、取消选中的逻辑。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-state"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-state" names="class_displayserver_method_global_menu_set_item_state"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_state</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, state: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置多状态项的状态。详见 <reference internal="True" refid="class-displayserver-method-global-menu-add-multistate-item"><inline classes="std std-ref">global_menu_add_multistate_item</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-submenu"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-submenu" names="class_displayserver_method_global_menu_set_item_submenu"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_submenu</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, submenu: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-submenu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的子菜单。子菜单是某个全局菜单根菜单项的 ID，点击该菜单项时会显示子菜单。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-tag"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-tag" names="class_displayserver_method_global_menu_set_item_tag"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_tag</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-tag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置指定菜单项的元数据，可以是任何类型。后续可以使用 <reference internal="True" refid="class-displayserver-method-global-menu-get-item-tag"><inline classes="std std-ref">global_menu_get_item_tag</inline></reference> 获取，可以方法地为菜单项关联上下文数据。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-text"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-text" names="class_displayserver_method_global_menu_set_item_text"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_text</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的文本。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-item-tooltip"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-item-tooltip" names="class_displayserver_method_global_menu_set_item_tooltip"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_item_tooltip</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-item-tooltip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的工具提示 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-global-menu-set-popup-callbacks"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-global-menu-set-popup-callbacks" names="class_displayserver_method_global_menu_set_popup_callbacks"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_menu_set_popup_callbacks</strong>(menu_root: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, open_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, close_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-global-menu-set-popup-callbacks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> or <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> instead.</paragraph>
            <paragraph>注册当菜单分别即将显示或关闭时发出的可调用对象。回调方法应该没有参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-has-additional-outputs"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-has-additional-outputs" names="class_displayserver_method_has_additional_outputs"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_additional_outputs</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-has-additional-outputs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if any additional outputs have been registered via <reference internal="True" refid="class-displayserver-method-register-additional-output"><inline classes="std std-ref">register_additional_output</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-has-feature"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-has-feature" names="class_displayserver_method_has_feature"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_feature</strong>(feature: <reference internal="True" refid="enum-displayserver-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-has-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果当前的 <strong>DisplayServer</strong> 支持指定的特性 <literal>feature</literal>，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-help-set-search-callbacks"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-help-set-search-callbacks" names="class_displayserver_method_help_set_search_callbacks"><abbreviation explanation="无返回值。">void</abbreviation> <strong>help_set_search_callbacks</strong>(search_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, action_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-help-set-search-callbacks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置原生帮助系统搜索回调。</paragraph>
            <paragraph><literal>search_callback</literal> 的参数是 <literal>String search_string, int result_limit</literal>，返回的是包含一对对“key、显示名称”的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>。用户在<literal>帮助</literal>菜单中输入搜索内容的时候就会调用这个回调。</paragraph>
            <paragraph><literal>action_callback</literal> 的参数是 <literal>String key</literal>。用户在<literal>帮助</literal>菜单中选择某个搜索结果时就会调用这个回调。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-ime-get-selection"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-ime-get-selection" names="class_displayserver_method_ime_get_selection"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>ime_get_selection</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-ime-get-selection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回<reference name="输入法编辑器" refuri="https://zh.wikipedia.org/wiki/%E8%BE%93%E5%85%A5%E6%B3%95">输入法编辑器</reference>编组字符串中选中的文本，<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> 的 <literal>x</literal> 分量为光标的位置，<literal>y</literal> 则为所选项的长度。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-ime-get-text"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-ime-get-text" names="class_displayserver_method_ime_get_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>ime_get_text</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-ime-get-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回<reference name="输入法编辑器" refuri="https://zh.wikipedia.org/wiki/%E8%BE%93%E5%85%A5%E6%B3%95">输入法编辑器</reference>窗口中的编组字符串。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-is-dark-mode"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-is-dark-mode" names="class_displayserver_method_is_dark_mode"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_dark_mode</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-is-dark-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果操作系统正在使用暗黑模式，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、macOS、Windows 和 Linux（X11/Wayland）上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-is-dark-mode-supported"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-is-dark-mode-supported" names="class_displayserver_method_is_dark_mode_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_dark_mode_supported</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-is-dark-mode-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果操作系统支持暗黑模式，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、macOS、Windows 和 Linux（X11/Wayland）上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-is-touchscreen-available"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-is-touchscreen-available" names="class_displayserver_method_is_touchscreen_available"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_touchscreen_available</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-is-touchscreen-available"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果触摸事件可用（Android 或 iOS）、在 Web 平台上检测到该功能或如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-devices-pointing-emulate-touch-from-mouse"><inline classes="std std-ref">ProjectSettings.input_devices/pointing/emulate_touch_from_mouse</inline></reference> 为 <literal>true</literal> 时，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-is-window-transparency-available"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-is-window-transparency-available" names="class_displayserver_method_is_window_transparency_available"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_window_transparency_available</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-is-window-transparency-available"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果窗口背景可以设为透明，则返回 <literal>true</literal>。如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-display-window-per-pixel-transparency-allowed"><inline classes="std std-ref">ProjectSettings.display/window/per_pixel_transparency/allowed</inline></reference> 被设置为 <literal>false</literal>，或者如果渲染器或 OS 合成器不支持透明，则该方法将返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-keyboard-get-current-layout"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-keyboard-get-current-layout" names="class_displayserver_method_keyboard_get_current_layout"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>keyboard_get_current_layout</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-keyboard-get-current-layout"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回激活的键盘布局的索引。</paragraph>
            <paragraph><strong>注意：</strong>本方法在 Linux（X11/Wayland）、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-keyboard-get-keycode-from-physical"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-keyboard-get-keycode-from-physical" names="class_displayserver_method_keyboard_get_keycode_from_physical"><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>keyboard_get_keycode_from_physical</strong>(keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-keyboard-get-keycode-from-physical"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将物理（美式 QWERTY）键码 <literal>keycode</literal> 转换为激活键盘布局中的键码。</paragraph>
            <paragraph><strong>注意：</strong>本方法在 Linux（X11/Wayland）、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-keyboard-get-label-from-physical"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-keyboard-get-label-from-physical" names="class_displayserver_method_keyboard_get_label_from_physical"><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>keyboard_get_label_from_physical</strong>(keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-keyboard-get-label-from-physical"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将物理（美式 QWERTY）键码 <literal>keycode</literal> 转换为活动键盘布局中的按键上印刷的本地化标签。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Linux（X11/Wayland）、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-keyboard-get-layout-count"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-keyboard-get-layout-count" names="class_displayserver_method_keyboard_get_layout_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>keyboard_get_layout_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-keyboard-get-layout-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回键盘布局的数量。</paragraph>
            <paragraph><strong>注意：</strong>本方法在 Linux（X11/Wayland）、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-keyboard-get-layout-language"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-keyboard-get-layout-language" names="class_displayserver_method_keyboard_get_layout_language"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>keyboard_get_layout_language</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-keyboard-get-layout-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于 <literal>index</literal> 位置的键盘布局的 ISO-639/BCP-47 语言代码。</paragraph>
            <paragraph><strong>注意：</strong>本方法在 Linux（X11/Wayland）、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-keyboard-get-layout-name"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-keyboard-get-layout-name" names="class_displayserver_method_keyboard_get_layout_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>keyboard_get_layout_name</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-keyboard-get-layout-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于 <literal>index</literal> 位置的键盘布局的本地化名称。</paragraph>
            <paragraph><strong>注意：</strong>本方法在 Linux（X11/Wayland）、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-keyboard-set-current-layout"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-keyboard-set-current-layout" names="class_displayserver_method_keyboard_set_current_layout"><abbreviation explanation="无返回值。">void</abbreviation> <strong>keyboard_set_current_layout</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-displayserver-method-keyboard-set-current-layout"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置激活的键盘布局。</paragraph>
            <paragraph><strong>注意：</strong>本方法在 Linux（X11/Wayland）、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-mouse-get-button-state"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-mouse-get-button-state" names="class_displayserver_method_mouse_get_button_state"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_@globalscope#enum-globalscope-mousebuttonmask"><inline classes="std std-ref">MouseButtonMask</inline></reference>] <strong>mouse_get_button_state</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-mouse-get-button-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以位掩码的形式返回当前鼠标按键的状态（各个按钮是否处于按下状态）。如果同时按下了多个按键，则会同时设置多个比特位。等价于 <reference internal="True" refuri="class_input#class-input-method-get-mouse-button-mask"><inline classes="std std-ref">Input.get_mouse_button_mask</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-mouse-get-mode"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-mouse-get-mode" names="class_displayserver_method_mouse_get_mode"><reference internal="True" refid="enum-displayserver-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>mouse_get_mode</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-mouse-get-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前的鼠标模式。另见 <reference internal="True" refid="class-displayserver-method-mouse-set-mode"><inline classes="std std-ref">mouse_set_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-mouse-get-position"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-mouse-get-position" names="class_displayserver_method_mouse_get_position"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>mouse_get_position</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-mouse-get-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回鼠标光标的当前位置，使用屏幕坐标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-mouse-set-mode"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-mouse-set-mode" names="class_displayserver_method_mouse_set_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>mouse_set_mode</strong>(mouse_mode: <reference internal="True" refid="enum-displayserver-mousemode"><inline classes="std std-ref">MouseMode</inline></reference>) <reference internal="True" refid="class-displayserver-method-mouse-set-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置当前的鼠标模式。另见 <reference internal="True" refid="class-displayserver-method-mouse-get-mode"><inline classes="std std-ref">mouse_get_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-process-events"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-process-events" names="class_displayserver_method_process_events"><abbreviation explanation="无返回值。">void</abbreviation> <strong>process_events</strong>() <reference internal="True" refid="class-displayserver-method-process-events"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>执行窗口管理器处理，包括输入的清空。另见 <reference internal="True" refid="class-displayserver-method-force-process-and-drop-events"><inline classes="std std-ref">force_process_and_drop_events</inline></reference>、<reference internal="True" refuri="class_input#class-input-method-flush-buffered-events"><inline classes="std std-ref">Input.flush_buffered_events</inline></reference>、<reference internal="True" refuri="class_input#class-input-property-use-accumulated-input"><inline classes="std std-ref">Input.use_accumulated_input</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-register-additional-output"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-register-additional-output" names="class_displayserver_method_register_additional_output"><abbreviation explanation="无返回值。">void</abbreviation> <strong>register_additional_output</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <reference internal="True" refid="class-displayserver-method-register-additional-output"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Registers an <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> which represents an additional output that will be rendered too, beyond normal windows. The <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> is only used as an identifier, which can be later passed to <reference internal="True" refid="class-displayserver-method-unregister-additional-output"><inline classes="std std-ref">unregister_additional_output</inline></reference>.</paragraph>
            <paragraph>This can be used to prevent Godot from skipping rendering when no normal windows are visible.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-get-dpi"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-get-dpi" names="class_displayserver_method_screen_get_dpi"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>screen_get_dpi</strong>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-screen-get-dpi"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定屏幕的每英寸点数密度。如果 <literal>screen</literal> 为 <reference internal="True" refid="class-displayserver-constant-screen-of-main-window"><inline classes="std std-ref">SCREEN_OF_MAIN_WINDOW</inline></reference>（默认值），则将使用带有主窗口的屏幕。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，如果使用小数显示缩放模式，则返回值不准确。</paragraph>
            <paragraph><strong>注意：</strong>在 Android 设备上，实际屏幕密度分为六种通用密度：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">   ldpi - 120 dpi
   mdpi - 160 dpi
   hdpi - 240 dpi
  xhdpi - 320 dpi
 xxhdpi - 480 dpi
xxxhdpi - 640 dpi</literal_block>
            <paragraph><strong>注意：</strong>该方法在 Android、Linux（X11/Wayland）、macOS 和 Windows 上实现。在不受支持的平台上返回 <literal>72</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-get-image"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-get-image" names="class_displayserver_method_screen_get_image"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>screen_get_image</strong>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-screen-get-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>screen</literal> 的屏幕截图。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Linux（X11）、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，该方法需要“屏幕录制”权限，如果未授予权限将返回桌面壁纸颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-get-max-scale"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-get-max-scale" names="class_displayserver_method_screen_get_max_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>screen_get_max_scale</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-screen-get-max-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有屏幕的最大缩放系数。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，如果系统中至少有一个 hiDPI（Retina）屏幕，则返回值为 <literal>2.0</literal>，在所有其他情况下返回值为 <literal>1.0</literal> 。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-get-orientation"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-get-orientation" names="class_displayserver_method_screen_get_orientation"><reference internal="True" refid="enum-displayserver-screenorientation"><inline classes="std std-ref">ScreenOrientation</inline></reference> <strong>screen_get_orientation</strong>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-screen-get-orientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>screen</literal> 的当前朝向。另见 <reference internal="True" refid="class-displayserver-method-screen-set-orientation"><inline classes="std std-ref">screen_set_orientation</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android 和 iOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-get-pixel"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-get-pixel" names="class_displayserver_method_screen_get_pixel"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>screen_get_pixel</strong>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-screen-get-pixel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>position</literal> 处的显示像素的颜色。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Linux（X11）、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，该方法需要“屏幕录制”权限，如果未授予权限将返回桌面壁纸颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-get-position"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-get-position" names="class_displayserver_method_screen_get_position"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>screen_get_position</strong>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-screen-get-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回屏幕左上角的位置，单位为像素。使用多个监视器时，屏幕位置是相对于虚拟桌面区域的位置。如果多监视器中使用了不同的屏幕分辨率或朝向，原点有可能位于所有显示器之外，类似于：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">* (0, 0)        +-------+
                |       |
+-------------+ |       |
|             | |       |
|             | |       |
+-------------+ +-------+</literal_block>
            <paragraph>另见 <reference internal="True" refid="class-displayserver-method-screen-get-size"><inline classes="std std-ref">screen_get_size</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>在 Linux（Wayland）上，该方法始终返回 <literal>(0, 0)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-get-refresh-rate"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-get-refresh-rate" names="class_displayserver_method_screen_get_refresh_rate"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>screen_get_refresh_rate</strong>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-screen-get-refresh-rate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定屏幕的当前刷新率。如果 <literal>screen</literal> 为 <reference internal="True" refid="class-displayserver-constant-screen-of-main-window"><inline classes="std std-ref">SCREEN_OF_MAIN_WINDOW</inline></reference>（默认值），将使用带有主窗口的屏幕。</paragraph>
            <paragraph><strong>注意：</strong>如果 DisplayServer 未能找到指定屏幕的刷新率，则返回 <literal>-1.0</literal>。在 Web 上，<reference internal="True" refid="class-displayserver-method-screen-get-refresh-rate"><inline classes="std std-ref">screen_get_refresh_rate</inline></reference> 将始终返回 <literal>-1.0</literal>，因为无法在该平台上检索到刷新率。</paragraph>
            <paragraph>要在该方法失败时回退至默认刷新率，请尝试：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var refresh_rate = DisplayServer.screen_get_refresh_rate()
if refresh_rate &lt; 0:
    refresh_rate = 60.0</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-get-scale"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-get-scale" names="class_displayserver_method_screen_get_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>screen_get_scale</strong>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-screen-get-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回屏幕的缩放系数，屏幕使用索引号指定。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，hiDPI（视网膜）屏幕返回 <literal>2.0</literal>，其它所有情况均返回 <literal>1.0</literal>。</paragraph>
            <paragraph><strong>注意：</strong>在 Linux（Wayland）上，只有 <literal>screen</literal> 为 <reference internal="True" refid="class-displayserver-constant-screen-of-main-window"><inline classes="std std-ref">SCREEN_OF_MAIN_WINDOW</inline></reference> 时返回值才是精确的。由于 API 的限制，如果屏幕缩放存在小数点，传入直接的索引号返回的是向上取整后的结果（即 <literal>1.25</literal> 会向上取整成 <literal>2.0</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 和 Linux（Wayland）上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-get-size"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-get-size" names="class_displayserver_method_screen_get_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>screen_get_size</strong>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-screen-get-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回屏幕大小。单位：像素。另见 <reference internal="True" refid="class-displayserver-method-screen-get-position"><inline classes="std std-ref">screen_get_position</inline></reference> 和 <reference internal="True" refid="class-displayserver-method-screen-get-usable-rect"><inline classes="std std-ref">screen_get_usable_rect</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-get-usable-rect"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-get-usable-rect" names="class_displayserver_method_screen_get_usable_rect"><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> <strong>screen_get_usable_rect</strong>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-screen-get-usable-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回屏幕上没有被状态栏遮挡的部分，单位为像素。另见 <reference internal="True" refid="class-displayserver-method-screen-get-size"><inline classes="std std-ref">screen_get_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-is-kept-on"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-is-kept-on" names="class_displayserver_method_screen_is_kept_on"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>screen_is_kept_on</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-screen-is-kept-on"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果操作系统的节电措施永远不会关闭屏幕，则返回 <literal>true</literal>。另见 <reference internal="True" refid="class-displayserver-method-screen-set-keep-on"><inline classes="std std-ref">screen_set_keep_on</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-set-keep-on"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-set-keep-on" names="class_displayserver_method_screen_set_keep_on"><abbreviation explanation="无返回值。">void</abbreviation> <strong>screen_set_keep_on</strong>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-displayserver-method-screen-set-keep-on"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置屏幕是否总是不会被操作系统的节能措施关闭。另见 <reference internal="True" refid="class-displayserver-method-screen-is-kept-on"><inline classes="std std-ref">screen_is_kept_on</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-screen-set-orientation"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-screen-set-orientation" names="class_displayserver_method_screen_set_orientation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>screen_set_orientation</strong>(orientation: <reference internal="True" refid="enum-displayserver-screenorientation"><inline classes="std std-ref">ScreenOrientation</inline></reference>, screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-displayserver-method-screen-set-orientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <literal>screen</literal> 的 <literal>orientation</literal>。另见 <reference internal="True" refid="class-displayserver-method-screen-get-orientation"><inline classes="std std-ref">screen_get_orientation</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>在 iOS 上，如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-display-window-handheld-orientation"><inline classes="std std-ref">ProjectSettings.display/window/handheld/orientation</inline></reference> 未设置为 <reference internal="True" refid="class-displayserver-constant-screen-sensor"><inline classes="std std-ref">SCREEN_SENSOR</inline></reference>，则该方法无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-set-icon"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-set-icon" names="class_displayserver_method_set_icon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_icon</strong>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>) <reference internal="True" refid="class-displayserver-method-set-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 设置窗口图标（通常显示在左上角）。要使用操作系统的原生格式设置图标，请改用 <reference internal="True" refid="class-displayserver-method-set-native-icon"><inline classes="std std-ref">set_native_icon</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>需要支持 <reference internal="True" refid="class-displayserver-constant-feature-icon"><inline classes="std std-ref">FEATURE_ICON</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-set-native-icon"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-set-native-icon" names="class_displayserver_method_set_native_icon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_native_icon</strong>(filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-displayserver-method-set-native-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用操作系统的<emphasis>原生</emphasis>格式设置窗口图标（通常显示在左上角）。位于 <literal>filename</literal> 的文件在 Windows 上必须为 <literal>.ico</literal> 格式，在 macOS 上必须为 <literal>.icns</literal> 格式。使用特制的 <literal>.ico</literal> 或 <literal>.icns</literal> 图标，就能够让 <reference internal="True" refid="class-displayserver-method-set-native-icon"><inline classes="std std-ref">set_native_icon</inline></reference> 指定以不同尺寸显示图标时显示不同的图标。大小由操作系统和用户首选项决定（包括显示器缩放系数）。要使用其他格式的图标，请改用 <reference internal="True" refid="class-displayserver-method-set-icon"><inline classes="std std-ref">set_icon</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>需要支持 <reference internal="True" refid="class-displayserver-constant-feature-native-icon"><inline classes="std std-ref">FEATURE_NATIVE_ICON</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-set-system-theme-change-callback"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-set-system-theme-change-callback" names="class_displayserver_method_set_system_theme_change_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_system_theme_change_callback</strong>(callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-set-system-theme-change-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置更改系统主题设置时应调用的 <literal>callable</literal>。回调方法应该有零个参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、macOS、Windows 和 Linux（X11/Wayland）上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-status-indicator-get-rect"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-status-indicator-get-rect" names="class_displayserver_method_status_indicator_get_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>status_indicator_get_rect</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-status-indicator-get-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定状态指示器 <literal>id</literal> 的矩形，使用屏幕坐标系。如果状态指示器不可见，则返回空的 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-status-indicator-set-callback"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-status-indicator-set-callback" names="class_displayserver_method_status_indicator_set_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>status_indicator_set_callback</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-status-indicator-set-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置应用程序状态指示器激活回调。<literal>callback</literal> 应采用两个参数：<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 鼠标按钮索引（<reference internal="True" refuri="class_@globalscope#enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> 值之一）和 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> 屏幕坐标中的点击位置。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-status-indicator-set-icon"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-status-indicator-set-icon" names="class_displayserver_method_status_indicator_set_icon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>status_indicator_set_icon</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-displayserver-method-status-indicator-set-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置应用程序状态指示器图标。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-status-indicator-set-menu"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-status-indicator-set-menu" names="class_displayserver_method_status_indicator_set_menu"><abbreviation explanation="无返回值。">void</abbreviation> <strong>status_indicator_set_menu</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, menu_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-displayserver-method-status-indicator-set-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置应用程序状态指示器原生弹出菜单。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，该菜单可通过任何鼠标按键激活。其激活回调<emphasis>未</emphasis>触发。</paragraph>
            <paragraph><strong>注意：</strong>在 Windows 上，该菜单可通过鼠标右键激活，选择状态图标并按下 <literal classes="kbd">Shift + F10</literal> 或应用程序键。菜单的其他鼠标按键的激活回调仍会触发。</paragraph>
            <paragraph><strong>注意：</strong>仅当 <reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> 支持 <reference internal="True" refuri="class_nativemenu#class-nativemenu-constant-feature-popup-menu"><inline classes="std std-ref">NativeMenu.FEATURE_POPUP_MENU</inline></reference> 功能时，才支持原生弹出窗口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-status-indicator-set-tooltip"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-status-indicator-set-tooltip" names="class_displayserver_method_status_indicator_set_tooltip"><abbreviation explanation="无返回值。">void</abbreviation> <strong>status_indicator_set_tooltip</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-displayserver-method-status-indicator-set-tooltip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置应用程序状态指示器工具提示。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tablet-get-current-driver"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tablet-get-current-driver" names="class_displayserver_method_tablet_get_current_driver"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>tablet_get_current_driver</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-tablet-get-current-driver"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前活动的数位板驱动程序的名称。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tablet-get-driver-count"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tablet-get-driver-count" names="class_displayserver_method_tablet_get_driver_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>tablet_get_driver_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-tablet-get-driver-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回可用的数位板驱动程序的总数。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tablet-get-driver-name"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tablet-get-driver-name" names="class_displayserver_method_tablet_get_driver_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>tablet_get_driver_name</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-tablet-get-driver-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定索引的数位板驱动程序名称。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tablet-set-current-driver"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tablet-set-current-driver" names="class_displayserver_method_tablet_set_current_driver"><abbreviation explanation="无返回值。">void</abbreviation> <strong>tablet_set_current_driver</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-displayserver-method-tablet-set-current-driver"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置活动数位板驱动程序名称。</paragraph>
            <paragraph>支持的驱动程序：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>winink</literal>：Windows Ink API，默认（需要 Windows 8.1+）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>wintab</literal>：Wacom Wintab API（需要兼容的设备驱动程序）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>dummy</literal>：虚设驱动程序，数位板输入被禁用。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>注意：</strong>该方法仅在 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tts-get-voices"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tts-get-voices" names="class_displayserver_method_tts_get_voices"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>tts_get_voices</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-tts-get-voices"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回语音信息字典的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>。</paragraph>
            <paragraph>每个 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 包含两个 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 条目：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>name</literal> 是语音名称。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>id</literal> 是语音标识符。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>language</literal> 是语言代码，格式为 <literal>lang_Variant</literal> 。<literal>lang</literal> 部分是小写的基于 ISO-639 标准的 2 或 3 字母代码。而 <literal>Variant</literal> 部分是一个依赖于引擎的字符串，描述国家、地区或/和方言。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>请注意，Godot 依赖于系统库来实现文本到语音的功能。这些库在 Windows 和 MacOS 上是默认安装的，但并非安装在所有 Linux 发行版上。如果它们不存在，此方法将返回一个空列表。这适用于 Linux 上的 Godot 用户，以及在 Linux 上运行使用文本到语音的 Godot 游戏的最终用户。</paragraph>
            <paragraph><strong>注意：</strong>这个方法在 Android、iOS、Web、Linux（X11/Wayland）、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-general-text-to-speech"><inline classes="std std-ref">ProjectSettings.audio/general/text_to_speech</inline></reference> 应当为 <literal>true</literal> 才能够使用文本到语音功能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tts-get-voices-for-language"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tts-get-voices-for-language" names="class_displayserver_method_tts_get_voices_for_language"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>tts_get_voices_for_language</strong>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-tts-get-voices-for-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>language</literal> 的语音标识符的 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Web、Linux（X11/Wayland）、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-general-text-to-speech"><inline classes="std std-ref">ProjectSettings.audio/general/text_to_speech</inline></reference> 应为 <literal>true</literal> 才能使用文本转语音。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tts-is-paused"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tts-is-paused" names="class_displayserver_method_tts_is_paused"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>tts_is_paused</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-tts-is-paused"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果合成器处于暂停状态，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Web、Linux（X11/Wayland）、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-general-text-to-speech"><inline classes="std std-ref">ProjectSettings.audio/general/text_to_speech</inline></reference> 应为 <literal>true</literal> 才能使用文本转语音。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tts-is-speaking"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tts-is-speaking" names="class_displayserver_method_tts_is_speaking"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>tts_is_speaking</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-tts-is-speaking"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果合成器正在生成语音，或者有发言正在队列中等待，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Web、Linux（X11/Wayland）、macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-general-text-to-speech"><inline classes="std std-ref">ProjectSettings.audio/general/text_to_speech</inline></reference> 应为 <literal>true</literal> 才能使用文本转语音。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tts-pause"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tts-pause" names="class_displayserver_method_tts_pause"><abbreviation explanation="无返回值。">void</abbreviation> <strong>tts_pause</strong>() <reference internal="True" refid="class-displayserver-method-tts-pause"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>让合成器进入暂停状态。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Web、Linux（X11/Wayland）、macOS 以及 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>要使用文本转语音，<reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-general-text-to-speech"><inline classes="std std-ref">ProjectSettings.audio/general/text_to_speech</inline></reference> 应该为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tts-resume"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tts-resume" names="class_displayserver_method_tts_resume"><abbreviation explanation="无返回值。">void</abbreviation> <strong>tts_resume</strong>() <reference internal="True" refid="class-displayserver-method-tts-resume"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>让处于暂停状态的合成器继续执行。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Web、Linux（X11/Wayland）、macOS 以及 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>要使用文本转语音，<reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-general-text-to-speech"><inline classes="std std-ref">ProjectSettings.audio/general/text_to_speech</inline></reference> 应该为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tts-set-utterance-callback"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tts-set-utterance-callback" names="class_displayserver_method_tts_set_utterance_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>tts_set_utterance_callback</strong>(event: <reference internal="True" refid="enum-displayserver-ttsutteranceevent"><inline classes="std std-ref">TTSUtteranceEvent</inline></reference>, callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-displayserver-method-tts-set-utterance-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加回调，会在发言开始、结束、取消、到达文本边界时调用。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refid="class-displayserver-constant-tts-utterance-started"><inline classes="std std-ref">TTS_UTTERANCE_STARTED</inline></reference>、<reference internal="True" refid="class-displayserver-constant-tts-utterance-ended"><inline classes="std std-ref">TTS_UTTERANCE_ENDED</inline></reference>、<reference internal="True" refid="class-displayserver-constant-tts-utterance-canceled"><inline classes="std std-ref">TTS_UTTERANCE_CANCELED</inline></reference> 可调用体的方法应接受一个 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 参数，即发言 ID。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-displayserver-constant-tts-utterance-boundary"><inline classes="std std-ref">TTS_UTTERANCE_BOUNDARY</inline></reference> 可调用体的方法应接受两个 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 参数：字符索引和发言 ID。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>注意：</strong>边界回调的颗粒度由引擎决定。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Web、Linux（X11/Wayland）、macOS 以及 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>要使用文本转语音，<reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-general-text-to-speech"><inline classes="std std-ref">ProjectSettings.audio/general/text_to_speech</inline></reference> 应该为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tts-speak"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tts-speak" names="class_displayserver_method_tts_speak"><abbreviation explanation="无返回值。">void</abbreviation> <strong>tts_speak</strong>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, voice: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, volume: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 50, pitch: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, rate: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, utterance_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, interrupt: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-displayserver-method-tts-speak"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向队列中添加发言。如果 <literal>interrupt</literal> 为 <literal>true</literal>，则会先清空队列。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>voice</literal> 语音标识符是 <reference internal="True" refid="class-displayserver-method-tts-get-voices"><inline classes="std std-ref">tts_get_voices</inline></reference> 所返回的 <literal>"id"</literal> 值，也可以是 <reference internal="True" refid="class-displayserver-method-tts-get-voices-for-language"><inline classes="std std-ref">tts_get_voices_for_language</inline></reference> 返回的值。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>volume</literal> 音量从 <literal>0</literal>（最低）到 <literal>100</literal>（最高）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>pitch</literal> 音高从 <literal>0.0</literal>（最低）到 <literal>2.0</literal>（最高）, <literal>1.0</literal> 为当前语音的默认音高。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>rate</literal> 语速从 <literal>0.1</literal>（最低）到 <literal>10.0</literal>（最高）, <literal>1.0</literal> 为普通语速。其他值为相对百分比。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>utterance_id</literal> 话语 ID 会作为参数传递给回调函数。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>注意：</strong>在 Windows 和 Linux（X11/Wayland）上，发言的 <literal>text</literal> 可以使用 SSML 标记。对 SSML 支持取决于引擎和语音。如果引擎不支持 SSML，你应该在调用 <reference internal="True" refid="class-displayserver-method-tts-speak"><inline classes="std std-ref">tts_speak</inline></reference> 之前剥离所有 XML 标记。</paragraph>
            <paragraph><strong>注意：</strong>音高、语速、音量的颗粒度由引擎和语音决定。设置的值可能被截断。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Web、Linux（X11/Wayland）、macOS 以及 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>要使用文本转语音，<reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-general-text-to-speech"><inline classes="std std-ref">ProjectSettings.audio/general/text_to_speech</inline></reference> 应该为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-tts-stop"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-tts-stop" names="class_displayserver_method_tts_stop"><abbreviation explanation="无返回值。">void</abbreviation> <strong>tts_stop</strong>() <reference internal="True" refid="class-displayserver-method-tts-stop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>停止执行中的合成器，移除队列中的所有发言。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS、Web、Linux（X11/Wayland）、macOS 以及 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>要使用文本转语音，<reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-general-text-to-speech"><inline classes="std std-ref">ProjectSettings.audio/general/text_to_speech</inline></reference> 应该为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-unregister-additional-output"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-unregister-additional-output" names="class_displayserver_method_unregister_additional_output"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unregister_additional_output</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <reference internal="True" refid="class-displayserver-method-unregister-additional-output"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Unregisters an <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> representing an additional output, that was registered via <reference internal="True" refid="class-displayserver-method-register-additional-output"><inline classes="std std-ref">register_additional_output</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-virtual-keyboard-get-height"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-virtual-keyboard-get-height" names="class_displayserver_method_virtual_keyboard_get_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>virtual_keyboard_get_height</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-virtual-keyboard-get-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回键盘在屏幕上的高度，单位为像素。如果没有键盘或当前键盘被隐藏，则返回0。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-virtual-keyboard-hide"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-virtual-keyboard-hide" names="class_displayserver_method_virtual_keyboard_hide"><abbreviation explanation="无返回值。">void</abbreviation> <strong>virtual_keyboard_hide</strong>() <reference internal="True" refid="class-displayserver-method-virtual-keyboard-hide"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果虚拟键盘为显示状态则隐藏虚拟键盘，否则不做任何操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-virtual-keyboard-show"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-virtual-keyboard-show" names="class_displayserver_method_virtual_keyboard_show"><abbreviation explanation="无返回值。">void</abbreviation> <strong>virtual_keyboard_show</strong>(existing_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, position: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> = Rect2(0, 0, 0, 0), type: <reference internal="True" refid="enum-displayserver-virtualkeyboardtype"><inline classes="std std-ref">VirtualKeyboardType</inline></reference> = 0, max_length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, cursor_start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, cursor_end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-displayserver-method-virtual-keyboard-show"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该平台有虚拟键盘，则显示虚拟键盘。</paragraph>
            <paragraph><literal>existing_text</literal> 参数对于实现你自己的 <reference internal="True" refuri="class_lineedit#class-lineedit"><inline classes="std std-ref">LineEdit</inline></reference> 或 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> 很有用，因为它告诉虚拟键盘已经输入了哪些文本（虚拟键盘使用它进行自动更正和预测）。</paragraph>
            <paragraph><literal>position</literal> 参数为编辑文本的屏幕空间 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>。</paragraph>
            <paragraph><literal>type</literal> 参数允许配置要显示的虚拟键盘类型。</paragraph>
            <paragraph><literal>max_length</literal> 在当与 <literal>-1</literal> 不同时，限制可输入的字符数。</paragraph>
            <paragraph>如果未设置 <literal>cursor_end</literal>，则可选参数 <literal>cursor_start</literal> 可以定义当前文本光标位置。</paragraph>
            <paragraph>可选参数 <literal>cursor_start</literal> 和 <literal>cursor_end</literal>，可以定义当前文本选区。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS 和 Web 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-warp-mouse"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-warp-mouse" names="class_displayserver_method_warp_mouse"><abbreviation explanation="无返回值。">void</abbreviation> <strong>warp_mouse</strong>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-displayserver-method-warp-mouse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将鼠标光标位置设置为相对于当前聚焦的游戏窗口管理器窗口左上角的原点的给定 <literal>position</literal>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-displayserver-method-warp-mouse"><inline classes="std std-ref">warp_mouse</inline></reference> 仅在 Windows、macOS 和 Linux（X11/Wayland）上受支持。它在 Android、iOS 和 Web 上无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-can-draw"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-can-draw" names="class_displayserver_method_window_can_draw"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>window_can_draw</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-can-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果可以在 <literal>window_id</literal> 指定的窗口中绘制任何内容，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。使用 <literal>--disable-render-loop</literal> 命令行参数或无头构建将返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-active-popup"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-active-popup" names="class_displayserver_method_window_get_active_popup"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>window_get_active_popup</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-active-popup"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回活动弹出窗口的 ID，如果没有则返回 <reference internal="True" refid="class-displayserver-constant-invalid-window-id"><inline classes="std std-ref">INVALID_WINDOW_ID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-attached-instance-id"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-attached-instance-id" names="class_displayserver_method_window_get_attached_instance_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>window_get_attached_instance_id</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-attached-instance-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>window_id</literal> 所附加的 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 的 <reference internal="True" refuri="class_object#class-object-method-get-instance-id"><inline classes="std std-ref">Object.get_instance_id</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-current-screen"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-current-screen" names="class_displayserver_method_window_get_current_screen"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>window_get_current_screen</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-current-screen"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该函数返回窗口 <literal>window_id</literal> 所在的屏幕。如果屏幕跨越多个显示器，则返回窗口中心所在的屏幕。另见 <reference internal="True" refid="class-displayserver-method-window-set-current-screen"><inline classes="std std-ref">window_set_current_screen</inline></reference> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-flag"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-flag" names="class_displayserver_method_window_get_flag"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>window_get_flag</strong>(flag: <reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-flag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定窗口当前的 <literal>flag</literal> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-max-size"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-max-size" names="class_displayserver_method_window_get_max_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>window_get_max_size</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-max-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该窗口的最大尺寸，单位为像素。另见 <reference internal="True" refid="class-displayserver-method-window-set-max-size"><inline classes="std std-ref">window_set_max_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-min-size"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-min-size" names="class_displayserver_method_window_get_min_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>window_get_min_size</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-min-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该窗口的最小尺寸，单位为像素。另见 <reference internal="True" refid="class-displayserver-method-window-set-min-size"><inline classes="std std-ref">window_set_min_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-mode"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-mode" names="class_displayserver_method_window_get_mode"><reference internal="True" refid="enum-displayserver-windowmode"><inline classes="std std-ref">WindowMode</inline></reference> <strong>window_get_mode</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定窗口的模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-native-handle"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-native-handle" names="class_displayserver_method_window_get_native_handle"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>window_get_native_handle</strong>(handle_type: <reference internal="True" refid="enum-displayserver-handletype"><inline classes="std std-ref">HandleType</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-native-handle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该函数返回用于插件的内部结构指针。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、Linux（X11/Wayland）、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-popup-safe-rect"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-popup-safe-rect" names="class_displayserver_method_window_get_popup_safe_rect"><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> <strong>window_get_popup_safe_rect</strong>(window: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-popup-safe-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该函数返回控件或菜单项在屏幕坐标系统中的边界框，这个控件或菜单项被用来打开弹出窗口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-position"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-position" names="class_displayserver_method_window_get_position"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>window_get_position</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回屏幕上给定窗口的客户端区域位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-position-with-decorations"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-position-with-decorations" names="class_displayserver_method_window_get_position_with_decorations"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>window_get_position_with_decorations</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-position-with-decorations"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该函数返回给定窗口在屏幕上的位置，包括操作系统绘制的边框。另见 <reference internal="True" refid="class-displayserver-method-window-get-position"><inline classes="std std-ref">window_get_position</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-safe-title-margins"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-safe-title-margins" names="class_displayserver_method_window_get_safe_title_margins"><reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference> <strong>window_get_safe_title_margins</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-safe-title-margins"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当设置了 <reference internal="True" refid="class-displayserver-constant-window-flag-extend-to-title"><inline classes="std std-ref">WINDOW_FLAG_EXTEND_TO_TITLE</inline></reference> 标志时，该函数返回标题左边距 (<literal>x</literal>)、右边距 (<literal>y</literal>) 和高度 (<literal>z</literal>)，这些边距可以安全地使用（不包含任何按钮或其他元素）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-size"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-size" names="class_displayserver_method_window_get_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>window_get_size</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回窗口的大小（单位为像素），不包含操作系统绘制的边框，该窗口由 <literal>window_id</literal> 指定。这个区域也叫做“客户区域”。另见 <reference internal="True" refid="class-displayserver-method-window-get-size-with-decorations"><inline classes="std std-ref">window_get_size_with_decorations</inline></reference>、<reference internal="True" refid="class-displayserver-method-window-set-size"><inline classes="std std-ref">window_set_size</inline></reference>、<reference internal="True" refid="class-displayserver-method-window-get-position"><inline classes="std std-ref">window_get_position</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-size-with-decorations"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-size-with-decorations" names="class_displayserver_method_window_get_size_with_decorations"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>window_get_size_with_decorations</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-size-with-decorations"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回窗口的大小（单位为像素），包含操作系统绘制的边框，该窗口由 <literal>window_id</literal> 指定。另见 <reference internal="True" refid="class-displayserver-method-window-get-size"><inline classes="std std-ref">window_get_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-title-size"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-title-size" names="class_displayserver_method_window_get_title_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>window_get_title_size</strong>(title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-title-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由 <literal>window_id</literal> 指定的窗口的估计窗口标题栏大小（包括文本和窗口按钮）（单位：像素）。该方法不会更改窗口标题。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-get-vsync-mode"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-get-vsync-mode" names="class_displayserver_method_window_get_vsync_mode"><reference internal="True" refid="enum-displayserver-vsyncmode"><inline classes="std std-ref">VSyncMode</inline></reference> <strong>window_get_vsync_mode</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-get-vsync-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定窗口的垂直同步模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-is-focused"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-is-focused" names="class_displayserver_method_window_is_focused"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>window_is_focused</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-is-focused"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>window_id</literal> 指定的窗口已获得焦点，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-is-maximize-allowed"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-is-maximize-allowed" names="class_displayserver_method_window_is_maximize_allowed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>window_is_maximize_allowed</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-is-maximize-allowed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的窗口能够最大化（最大化按钮已启用），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-maximize-on-title-dbl-click"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-maximize-on-title-dbl-click" names="class_displayserver_method_window_maximize_on_title_dbl_click"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>window_maximize_on_title_dbl_click</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-maximize-on-title-dbl-click"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果双击窗口标题应将其最大化，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>这个方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-minimize-on-title-dbl-click"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-minimize-on-title-dbl-click" names="class_displayserver_method_window_minimize_on_title_dbl_click"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>window_minimize_on_title_dbl_click</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-displayserver-method-window-minimize-on-title-dbl-click"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果双击窗口标题应将其最小化，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>这个方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-move-to-foreground"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-move-to-foreground" names="class_displayserver_method_window_move_to_foreground"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_move_to_foreground</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-move-to-foreground"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将由 <literal>window_id</literal> 指定的窗口移动至前台，使其位于其他窗口之上。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-request-attention"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-request-attention" names="class_displayserver_method_window_request_attention"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_request_attention</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-request-attention"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>让由 <literal>window_id</literal> 指定的窗口请求注意，该窗口获得焦点之前会闪烁窗口标题和任务栏项目。如果该窗口目前持有焦点，则通常是没有可见效果的。实际的行为因操作系统而异。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-current-screen"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-current-screen" names="class_displayserver_method_window_set_current_screen"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_current_screen</strong>(screen: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-current-screen"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将由 <literal>window_id</literal> 指定的窗口移动至指定的屏幕 <literal>screen</literal>。另见 <reference internal="True" refid="class-displayserver-method-window-get-current-screen"><inline classes="std std-ref">window_get_current_screen</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-drop-files-callback"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-drop-files-callback" names="class_displayserver_method_window_set_drop_files_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_drop_files_callback</strong>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-drop-files-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置当文件从操作系统的文件管理器拖放到 <literal>window_id</literal> 指定的窗口时应调用的 <literal>callback</literal>。<literal>callback</literal> 应采用一个 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> 参数，即拖放的文件列表。</paragraph>
            <paragraph><strong>警告：</strong>仅限高级用户！将这样的回调添加到 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 节点将覆盖其默认实现，这可能会引入错误。</paragraph>
            <paragraph><strong>注意：</strong>这个方法在 Windows、macOS、Linux（X11/Wayland）、Web 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-exclusive"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-exclusive" names="class_displayserver_method_window_set_exclusive"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_exclusive</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, exclusive: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-displayserver-method-window-set-exclusive"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，该窗口将始终位于其父窗口之上，父窗口将在该窗口打开时忽略输入。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，独占窗口被限制在与父窗口相同的空间（虚拟桌面或屏幕）中。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-flag"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-flag" names="class_displayserver_method_window_set_flag"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_flag</strong>(flag: <reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-flag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启用或禁用给定窗口的给定标志 <literal>flag</literal>。可能的值和相应的行为见 <reference internal="True" refid="enum-displayserver-windowflags"><inline classes="std std-ref">WindowFlags</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-ime-active"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-ime-active" names="class_displayserver_method_window_set_ime_active"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_ime_active</strong>(active: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-ime-active"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置是否应该为窗口启用<reference name="输入法编辑器" refuri="https://zh.wikipedia.org/wiki/%E8%BE%93%E5%85%A5%E6%B3%95">输入法编辑器</reference>，该窗口由 <literal>window_id</literal> 指定。另见 <reference internal="True" refid="class-displayserver-method-window-set-ime-position"><inline classes="std std-ref">window_set_ime_position</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-ime-position"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-ime-position" names="class_displayserver_method_window_set_ime_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_ime_position</strong>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-ime-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定 <literal>window_id</literal> 的<reference name="输入法编辑器" refuri="https://zh.wikipedia.org/wiki/%E8%BE%93%E5%85%A5%E6%B3%95">输入法编辑器</reference>弹出框的位置。仅在指定 <literal>window_id</literal> 的 <reference internal="True" refid="class-displayserver-method-window-set-ime-active"><inline classes="std std-ref">window_set_ime_active</inline></reference> 为 <literal>true</literal> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-input-event-callback"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-input-event-callback" names="class_displayserver_method_window_set_input_event_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_input_event_callback</strong>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-input-event-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置回调 <literal>callback</literal>，向由 <literal>window_id</literal> 指定的窗口发送任何 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> 时会进行回调。</paragraph>
            <paragraph><strong>警告：</strong>仅限高级用户！将这样的回调添加到 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 节点将覆盖其默认实现，这可能会引入错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-input-text-callback"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-input-text-callback" names="class_displayserver_method_window_set_input_text_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_input_text_callback</strong>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-input-text-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置回调 <literal>callback</literal>，使用虚拟键盘向由 <literal>window_id</literal> 指定的窗口输入文本时会进行回调。</paragraph>
            <paragraph><strong>警告：</strong>仅限高级用户！将这样的回调添加到 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 节点将覆盖其默认实现，这可能会引入错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-max-size"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-max-size" names="class_displayserver_method_window_set_max_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_max_size</strong>(max_size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-max-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置由 <literal>window_id</literal> 指定的窗口的最大大小（单位为像素）。通常，用户将无法拖动窗口使其大于该指定大小。另见 <reference internal="True" refid="class-displayserver-method-window-get-max-size"><inline classes="std std-ref">window_get_max_size</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>建议改用 <reference internal="True" refuri="class_window#class-window-property-max-size"><inline classes="std std-ref">Window.max_size</inline></reference> 更改此值。</paragraph>
            <paragraph><strong>注意：</strong>使用第三方工具，用户可以禁用窗口几何限制，从而绕过此限制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-min-size"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-min-size" names="class_displayserver_method_window_set_min_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_min_size</strong>(min_size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-min-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定窗口的最小大小设置为 <literal>min_size</literal>（单位为像素）。通常，用户将无法拖动窗口使其小于该指定大小。另见 <reference internal="True" refid="class-displayserver-method-window-get-min-size"><inline classes="std std-ref">window_get_min_size</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>建议改用 <reference internal="True" refuri="class_window#class-window-property-min-size"><inline classes="std std-ref">Window.min_size</inline></reference> 来更改此值。</paragraph>
            <paragraph><strong>注意：</strong>默认情况下，主窗口的最小大小为 <literal>Vector2i(64, 64)</literal>。这可以防止将窗口调整为接近零的大小时可能出现的问题。</paragraph>
            <paragraph><strong>注意：</strong>使用第三方工具，用户可以禁用窗口几何限制，从而绕过此限制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-mode"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-mode" names="class_displayserver_method_window_set_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_mode</strong>(mode: <reference internal="True" refid="enum-displayserver-windowmode"><inline classes="std std-ref">WindowMode</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定窗口的窗口模式设置为 <literal>mode</literal>。可能的值以及各个模式的行为见 <reference internal="True" refid="enum-displayserver-windowmode"><inline classes="std std-ref">WindowMode</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>将窗口设置为全屏会强制将无边框标志设为 <literal>true</literal>，所以不再需要时请务必将其设回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-mouse-passthrough"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-mouse-passthrough" names="class_displayserver_method_window_set_mouse_passthrough"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_mouse_passthrough</strong>(region: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-mouse-passthrough"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置一个接受鼠标事件的窗口的多边形区域。该区域外的鼠标事件将被传递出去。</paragraph>
            <paragraph>传递一个空数组将禁用穿透支持（所有鼠标事件将被窗口拦截，这是默认行为）。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 设置区域，使用 Path2D 节点。
DisplayServer.window_set_mouse_passthrough($Path2D.curve.get_baked_points())

# 设置区域，使用 Polygon2D 节点。
DisplayServer.window_set_mouse_passthrough($Polygon2D.polygon)

# 重置区域为默认值。
DisplayServer.window_set_mouse_passthrough([])</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 设置区域，使用 Path2D 节点。
DisplayServer.WindowSetMousePassthrough(GetNode&lt;Path2D&gt;("Path2D").Curve.GetBakedPoints());

// 设置区域，使用 Polygon2D 节点。
DisplayServer.WindowSetMousePassthrough(GetNode&lt;Polygon2D&gt;("Polygon2D").Polygon);

// 重置区域为默认值。
DisplayServer.WindowSetMousePassthrough(new Vector2[] {});</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>在 Windows 上，不会绘制位于区域之外的窗口部分，而在 Linux（X11）和 macOS 上则会绘制。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Linux（X11）、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-popup-safe-rect"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-popup-safe-rect" names="class_displayserver_method_window_set_popup_safe_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_popup_safe_rect</strong>(window: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>) <reference internal="True" refid="class-displayserver-method-window-set-popup-safe-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置用于打开弹出窗口的控件或菜单项的范围框，使用屏幕坐标系。在该区域中点击不会自动关闭该弹出框。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-position"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-position" names="class_displayserver_method_window_set_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_position</strong>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定窗口的位置设置为 <literal>position</literal>。使用多个监视器时，屏幕位置是相对于虚拟桌面区域的位置。如果多监视器中使用了不同的屏幕分辨率或朝向，原点有可能位于所有显示器之外，类似于：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">* (0, 0)        +-------+
                |       |
+-------------+ |       |
|             | |       |
|             | |       |
+-------------+ +-------+</literal_block>
            <paragraph>另见 <reference internal="True" refid="class-displayserver-method-window-get-position"><inline classes="std std-ref">window_get_position</inline></reference> 和 <reference internal="True" refid="class-displayserver-method-window-set-size"><inline classes="std std-ref">window_set_size</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>建议改用 <reference internal="True" refuri="class_window#class-window-property-position"><inline classes="std std-ref">Window.position</inline></reference> 更改此值。</paragraph>
            <paragraph><strong>注意：</strong>在 Linux（Wayland）上：该方法是没有操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-rect-changed-callback"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-rect-changed-callback" names="class_displayserver_method_window_set_rect_changed_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_rect_changed_callback</strong>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-rect-changed-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置回调 <literal>callback</literal>，由 <literal>window_id</literal> 指定的窗口发生移动或调整大小时会进行回调。</paragraph>
            <paragraph><strong>警告：</strong>仅限高级用户！将这样的回调添加到 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 节点将覆盖其默认实现，这可能会引入错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-size"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-size" names="class_displayserver_method_window_set_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_size</strong>(size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定窗口的大小设置为 <literal>size</literal>（单位为像素）。另见 <reference internal="True" refid="class-displayserver-method-window-get-size"><inline classes="std std-ref">window_get_size</inline></reference> 和 <reference internal="True" refid="class-displayserver-method-window-get-position"><inline classes="std std-ref">window_get_position</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>建议改用 <reference internal="True" refuri="class_window#class-window-property-size"><inline classes="std std-ref">Window.size</inline></reference> 更改此值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-title"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-title" names="class_displayserver_method_window_set_title"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_title</strong>(title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-title"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定窗口的标题设置为 <literal>title</literal>。</paragraph>
            <paragraph><strong>注意：</strong>建议改用 <reference internal="True" refuri="class_window#class-window-property-title"><inline classes="std std-ref">Window.title</inline></reference> 更改此值。</paragraph>
            <paragraph><strong>注意：</strong>避免每一帧都更改窗口标题，因为这会导致某些窗口管理器出现性能问题。尝试每秒最多更改几次窗口标题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-transient"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-transient" names="class_displayserver_method_window_set_transient"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_transient</strong>(window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, parent_window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-displayserver-method-window-set-transient"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置窗口瞬态父级。瞬态窗口将与其瞬态父级一起销毁，并在关闭时将焦点返回到它们的父级。瞬态窗口显示在非排他性全屏父窗口的顶部。瞬态窗口无法进入全屏模式。</paragraph>
            <paragraph><strong>注意：</strong>建议改用 <reference internal="True" refuri="class_window#class-window-property-transient"><inline classes="std std-ref">Window.transient</inline></reference> 更改此值。</paragraph>
            <paragraph><strong>注意：</strong>行为可能因平台而异。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-vsync-mode"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-vsync-mode" names="class_displayserver_method_window_set_vsync_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_vsync_mode</strong>(vsync_mode: <reference internal="True" refid="enum-displayserver-vsyncmode"><inline classes="std std-ref">VSyncMode</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-vsync-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定窗口的垂直同步模式。另见 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-display-window-vsync-vsync-mode"><inline classes="std std-ref">ProjectSettings.display/window/vsync/vsync_mode</inline></reference>。</paragraph>
            <paragraph>参阅 <reference internal="True" refid="enum-displayserver-vsyncmode"><inline classes="std std-ref">VSyncMode</inline></reference> 了解可能的值，以及它们如何影响应用程序的行为。</paragraph>
            <paragraph>根据平台和使用的渲染器，如果不支持所需的模式，引擎将回退到 <reference internal="True" refid="class-displayserver-constant-vsync-enabled"><inline classes="std std-ref">VSYNC_ENABLED</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>除 <reference internal="True" refid="class-displayserver-constant-vsync-enabled"><inline classes="std std-ref">VSYNC_ENABLED</inline></reference> 以外的垂直同步模式，仅支持 Forward+ 和 Mobile 渲染方式，不支持 Compatibility。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-window-buttons-offset"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-window-buttons-offset" names="class_displayserver_method_window_set_window_buttons_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_window_buttons_offset</strong>(offset: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-window-buttons-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置了 <reference internal="True" refid="class-displayserver-constant-window-flag-extend-to-title"><inline classes="std std-ref">WINDOW_FLAG_EXTEND_TO_TITLE</inline></reference> 标志时，会设置第一个标题栏按钮中心的偏移量。</paragraph>
            <paragraph><strong>注意：</strong>这个标志仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-displayserver-method-window-set-window-event-callback"></target>
            <paragraph classes="classref-method" ids="class-displayserver-method-window-set-window-event-callback" names="class_displayserver_method_window_set_window_event_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>window_set_window_event_callback</strong>(callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, window_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-displayserver-method-window-set-window-event-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置回调 <literal>callback</literal>，由 <literal>window_id</literal> 指定的窗口发生事件时会进行回调。</paragraph>
            <paragraph><strong>警告：</strong>仅限高级用户！将这样的回调添加到 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 节点将覆盖其默认实现，这可能会引入错误。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
