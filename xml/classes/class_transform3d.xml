<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_transform3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Transform3D.xml.</comment>
    <target refid="class-transform3d"></target>
    <section ids="transform3d class-transform3d" names="transform3d class_transform3d">
        <title>Transform3D</title>
        <paragraph>代表 3D 变换的 3×4 矩阵。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于 3D 线性变换的 3×4 矩阵（3 行 4 列），可以表示平移、旋转、缩放等变换，由 <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference>（前三列）和 <reference internal="True" refid="class-transform3d-property-origin"><inline classes="std std-ref">origin</inline></reference> 的 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>（最后一列）组成。</paragraph>
            <paragraph>通用介绍见教程<reference internal="True" refuri="../tutorials/math/matrices_and_transforms"><inline classes="doc">《矩阵与变换》</inline></reference>。</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/index"><inline classes="doc">数学文档索引</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/matrices_and_transforms"><inline classes="doc">矩阵与变换</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/using_transforms"><inline classes="doc">使用 3D 变换</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="矩阵变换演示" refuri="https://godotengine.org/asset-library/asset/584">矩阵变换演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 平台跳跃演示" refuri="https://godotengine.org/asset-library/asset/125">3D 平台跳跃演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2.5D 演示" refuri="https://godotengine.org/asset-library/asset/583">2.5D 演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="50"></colspec>
                    <colspec colwidth="38"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Basis(1, 0, 0, 0, 1, 0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-property-origin"><inline classes="std std-ref">origin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="226"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-constructor-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-constructor-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>(</strong> <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-constructor-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> basis, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> origin <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-constructor-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-constructor-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> x_axis, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> y_axis, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> z_axis, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> origin <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="211"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-affine-inverse"><inline classes="std std-ref">affine_inverse</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-interpolate-with"><inline classes="std std-ref">interpolate_with</inline></reference> <strong>(</strong> <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> xform, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> weight <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-inverse"><inline classes="std std-ref">inverse</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference> <strong>(</strong> <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> xform <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-is-finite"><inline classes="std std-ref">is_finite</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-looking-at"><inline classes="std std-ref">looking_at</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> target, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> up=Vector3(0, 1, 0), <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_model_front=false <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-orthonormalized"><inline classes="std std-ref">orthonormalized</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-rotated"><inline classes="std std-ref">rotated</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> axis, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> angle <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-rotated-local"><inline classes="std std-ref">rotated_local</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> axis, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> angle <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-scaled"><inline classes="std std-ref">scaled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> scale <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-scaled-local"><inline classes="std std-ref">scaled_local</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> scale <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-translated"><inline classes="std std-ref">translated</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> offset <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-translated-local"><inline classes="std std-ref">translated_local</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> offset <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id6" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="140"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-neq-transform3d"><inline classes="std std-ref">operator !=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-aabb"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-packedvector3array"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-plane"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-transform3d"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-vector3"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-float"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-int"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-eq-transform3d"><inline classes="std std-ref">operator ==</inline></reference> <strong>(</strong> <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="常量">
            <title>常量</title>
            <target refid="class-transform3d-constant-identity"></target>
            <paragraph classes="classref-constant" ids="class-transform3d-constant-identity" names="class_transform3d_constant_identity"><strong>IDENTITY</strong> = <literal>Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)</literal></paragraph>
            <paragraph>没有应用平移、旋转、缩放的 <strong>Transform3D</strong>。当应用于其他数据结构时，<reference internal="True" refid="class-transform3d-constant-identity"><inline classes="std std-ref">IDENTITY</inline></reference> 不执行变换。</paragraph>
            <target refid="class-transform3d-constant-flip-x"></target>
            <paragraph classes="classref-constant" ids="class-transform3d-constant-flip-x" names="class_transform3d_constant_flip_x"><strong>FLIP_X</strong> = <literal>Transform3D(-1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)</literal></paragraph>
            <paragraph>应用了垂直于 YZ 平面镜像操作的 <strong>Transform3D</strong>。</paragraph>
            <target refid="class-transform3d-constant-flip-y"></target>
            <paragraph classes="classref-constant" ids="class-transform3d-constant-flip-y" names="class_transform3d_constant_flip_y"><strong>FLIP_Y</strong> = <literal>Transform3D(1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0)</literal></paragraph>
            <paragraph>应用了垂直于 XZ 平面镜像操作的 <strong>Transform3D</strong>。</paragraph>
            <target refid="class-transform3d-constant-flip-z"></target>
            <paragraph classes="classref-constant" ids="class-transform3d-constant-flip-z" names="class_transform3d_constant_flip_z"><strong>FLIP_Z</strong> = <literal>Transform3D(1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0)</literal></paragraph>
            <paragraph>应用了垂直于 XY 平面镜像操作的 <strong>Transform3D</strong>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-transform3d-property-basis"></target>
            <paragraph classes="classref-property" ids="class-transform3d-property-basis" names="class_transform3d_property_basis"><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> <strong>basis</strong> = <literal>Basis(1, 0, 0, 0, 1, 0, 0, 0, 1)</literal></paragraph>
            <paragraph>基是一个矩阵，包含 3 个 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 作为其列：X 轴、Y 轴、Z 轴。这些向量可以被解释为随物体移动的局部坐标系的基向量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-property-origin"></target>
            <paragraph classes="classref-property" ids="class-transform3d-property-origin" names="class_transform3d_property_origin"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>origin</strong> = <literal>Vector3(0, 0, 0)</literal></paragraph>
            <paragraph>变换的平移偏移量，即第 3、4 列。相当于数组索引 <literal>3</literal>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-transform3d-constructor-transform3d"></target>
            <paragraph classes="classref-constructor" ids="class-transform3d-constructor-transform3d" names="class_transform3d_constructor_transform3d"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>Transform3D</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>构造默认初始化为 <reference internal="True" refid="class-transform3d-constant-identity"><inline classes="std std-ref">IDENTITY</inline></reference> 的 <strong>Transform3D</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>Transform3D</strong> <strong>(</strong> <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>构造给定 <strong>Transform3D</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>Transform3D</strong> <strong>(</strong> <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> basis, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> origin <strong>)</strong></paragraph>
            <paragraph>从 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> 和 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 构造 Transform3D。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>Transform3D</strong> <strong>(</strong> <reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>通过修剪投影矩阵的最后一行，从 <reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference> 中构造 Transform3D（不会复制 <literal>from.x.w</literal>、<literal>from.y.w</literal>、<literal>from.z.w</literal>、<literal>from.w.w</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>Transform3D</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> x_axis, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> y_axis, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> z_axis, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> origin <strong>)</strong></paragraph>
            <paragraph>从四个 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 值（矩阵列）构造 Transform3D。每个轴对应于局部基向量（其中一些可能已被缩放）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id10" names="方法说明">
            <title>方法说明</title>
            <target refid="class-transform3d-method-affine-inverse"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-affine-inverse" names="class_transform3d_method_affine_inverse"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>affine_inverse</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>假设该基可逆（必须具有非零行列式），返回该变换的逆。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-interpolate-with"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-interpolate-with" names="class_transform3d_method_interpolate_with"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>interpolate_with</strong> <strong>(</strong> <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> xform, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> weight <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回将该变换与其他变换使用给定权重 <literal>weight</literal> 进行插值的结果（权重范围为 0.0 到 1.0）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-inverse"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-inverse" names="class_transform3d_method_inverse"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>inverse</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回变换的逆，假设该变换的基是正交的（即旋转/反射可以，缩放/倾斜不行）。使用 <reference internal="True" refid="class-transform3d-method-affine-inverse"><inline classes="std std-ref">affine_inverse</inline></reference> 进行非正交变换（例如缩放）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-is-equal-approx"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-is-equal-approx" names="class_transform3d_method_is_equal_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_equal_approx</strong> <strong>(</strong> <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> xform <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果通过在每个分量上运行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-equal-approx"><inline classes="std std-ref">@GlobalScope.is_equal_approx</inline></reference>，该变换和 <literal>xform</literal> 近似相等，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-is-finite"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-is-finite" names="class_transform3d_method_is_finite"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_finite</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该变换是有限的，则返回 <literal>true</literal>，判断方法是在每个分量上调用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-finite"><inline classes="std std-ref">@GlobalScope.is_finite</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-looking-at"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-looking-at" names="class_transform3d_method_looking_at"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>looking_at</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> target, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> up=Vector3(0, 1, 0), <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_model_front=false <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该变换经过旋转后的副本，此时向前的轴（-Z）指向 <literal>target</literal> 的位置。</paragraph>
            <paragraph>向上的轴（+Y）在保持与向前的轴垂直的前提下，尽可能接近 <literal>up</literal> 向量。最终的变换是标准正交变换。变换中原有的旋转、缩放、偏斜信息会被丢弃。<literal>target</literal> 和 <literal>up</literal> 向量不能为零，不能互相平行，使用全局/父级空间。</paragraph>
            <paragraph>如果 <literal>use_model_front</literal> 为 <literal>true</literal>，则会将 +Z 轴（资产正面）作为向前的轴（此时 +X 为左），指向 <literal>target</literal> 的位置。默认情况下会将 -Z 轴（相机前方）作为向前的轴（此时 +X 为右）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-orthonormalized"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-orthonormalized" names="class_transform3d_method_orthonormalized"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>orthonormalized</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回使用正交基（90 度）以及归一化的轴向量（缩放为 1 或 -1）的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-rotated"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-rotated" names="class_transform3d_method_rotated"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>rotated</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> axis, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> angle <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该变换的副本，该副本围绕给定的 <literal>axis</literal> 轴进行了夹角为 <literal>angle</literal> 的旋转操作（单位为弧度）。</paragraph>
            <paragraph><literal>axis</literal> 必须为归一化的向量。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的旋转变换 <literal>R</literal> 从左侧相乘一致，即 <literal>R * X</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在全局/父级坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-rotated-local"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-rotated-local" names="class_transform3d_method_rotated_local"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>rotated_local</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> axis, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> angle <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该变换的副本，该副本围绕给定的 <literal>axis</literal> 轴进行了夹角为 <literal>angle</literal> 的旋转操作（单位为弧度）。</paragraph>
            <paragraph><literal>axis</literal> 必须为归一化的向量。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的旋转变换 <literal>R</literal> 从右侧相乘一致，即 <literal>R * X</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在局部坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-scaled"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-scaled" names="class_transform3d_method_scaled"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>scaled</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> scale <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该变换的副本，该副本进行了系数为 <literal>scale</literal> 的缩放操作。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的缩放变换 <literal>S</literal> 从左侧相乘一致，即 <literal>S * X</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在全局/父级坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-scaled-local"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-scaled-local" names="class_transform3d_method_scaled_local"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>scaled_local</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> scale <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该变换的副本，该副本进行了系数为 <literal>scale</literal> 的缩放操作。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的缩放变换 <literal>S</literal> 从右侧相乘一致，即 <literal>X * S</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在局部坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-translated"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-translated" names="class_transform3d_method_translated"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>translated</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> offset <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该变换的副本，该副本进行了偏移量为 <literal>offset</literal> 的平移操作。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的平移变换 <literal>T</literal> 从左侧相乘一致，即 <literal>T * X</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在全局/父级坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-translated-local"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-translated-local" names="class_transform3d_method_translated_local"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>translated_local</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> offset <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该变换的副本，该副本进行了偏移量为 <literal>offset</literal> 的平移操作。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的平移变换 <literal>T</literal> 从右侧相乘一致，即 <literal>X * T</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在局部坐标系中的变换。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id11" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-transform3d-operator-neq-transform3d"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-neq-transform3d" names="class_transform3d_operator_neq_transform3d"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong> <strong>(</strong> <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果变换不相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-transform3d-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-aabb"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-aabb" names="class_transform3d_operator_mul_aabb"><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>使用给定的 <strong>Transform3D</strong> 矩阵对 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> 进行变换（相乘）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-packedvector3array"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-packedvector3array" names="class_transform3d_operator_mul_packedvector3array"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>使用给定的 <strong>Transform3D</strong> 矩阵对 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 数组中的每个元素进行变换（相乘）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-plane"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-plane" names="class_transform3d_operator_mul_plane"><reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>使用给定的 <strong>Transform3D</strong> 矩阵对 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> 进行变换（相乘）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-transform3d"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-transform3d" names="class_transform3d_operator_mul_transform3d"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>通过将这两个变换矩阵相乘来组合它们。这具有通过第一个变换（父项）来变换第二个变换（子项）的效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-vector3"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-vector3" names="class_transform3d_operator_mul_vector3"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>使用给定的 <strong>Transform3D</strong> 矩阵对 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 进行变换（相乘）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-float"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-float" names="class_transform3d_operator_mul_float"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>该运算符将 <strong>Transform3D</strong> 的所有分量相乘，包括 <reference internal="True" refid="class-transform3d-property-origin"><inline classes="std std-ref">origin</inline></reference> 向量，从而对其进行统一缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-int"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-int" names="class_transform3d_operator_mul_int"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>该运算符将 <strong>Transform3D</strong> 的所有分量相乘，包括 <reference internal="True" refid="class-transform3d-property-origin"><inline classes="std std-ref">origin</inline></reference> 向量，从而对其进行统一缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-eq-transform3d"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-eq-transform3d" names="class_transform3d_operator_eq_transform3d"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong> <strong>(</strong> <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果变换完全相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-transform3d-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
