<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_transform3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Transform3D.xml.</comment>
    <target refid="class-transform3d"></target>
    <section ids="transform3d class-transform3d" names="transform3d class_transform3d">
        <title>Transform3D</title>
        <paragraph>代表 3D 变换的 3×4 矩阵。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Transform3D</strong> 即 3D 变换，是一种内置的 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 类型，这种 3×4 矩阵代表的是 3D 空间中的变换。变换中包含了一个 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>，表示的是旋转、缩放、切变。另外变换自身还提供了 <reference internal="True" refid="class-transform3d-property-origin"><inline classes="std std-ref">origin</inline></reference>，这样就能够表示平移。</paragraph>
            <paragraph>通用的介绍见教程<reference internal="True" refuri="../tutorials/math/matrices_and_transforms"><inline classes="doc">《矩阵和变换》</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>Godot 使用<reference name="右手坐标系" refuri="https://zh.wikipedia.org/zh-cn/%E5%8F%B3%E6%89%8B%E5%AE%9A%E5%89%87">右手坐标系</reference>，这是一种普遍标准。方向方面，<reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference> 等内置类型的约定是 -Z 指向前方（+X 为右、+Y 为上、+Z 为后）。其他对象可能使用不同的方向约定。更多信息见教程<reference name="《导入 3D 场景》" refuri="../tutorials/assets_pipeline/importing_scenes.html#d-asset-direction-conventions">《导入 3D 场景》</reference>。</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/index"><inline classes="doc">数学文档索引</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/matrices_and_transforms"><inline classes="doc">矩阵与变换</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/using_transforms"><inline classes="doc">使用 3D 变换</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="矩阵变换演示" refuri="https://godotengine.org/asset-library/asset/2787">矩阵变换演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 平台跳跃演示" refuri="https://godotengine.org/asset-library/asset/2748">3D 平台跳跃演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2.5D 游戏演示" refuri="https://godotengine.org/asset-library/asset/2783">2.5D 游戏演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="50"></colspec>
                    <colspec colwidth="38"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Basis(1, 0, 0, 0, 1, 0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-property-origin"><inline classes="std std-ref">origin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="229"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-constructor-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-constructor-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>(from: <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-constructor-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>(basis: <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>, origin: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-constructor-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>(from: <reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-constructor-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>(x_axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, y_axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, z_axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, origin: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="216"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-affine-inverse"><inline classes="std std-ref">affine_inverse</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-interpolate-with"><inline classes="std std-ref">interpolate_with</inline></reference>(xform: <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-inverse"><inline classes="std std-ref">inverse</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>(xform: <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-is-finite"><inline classes="std std-ref">is_finite</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-looking-at"><inline classes="std std-ref">looking_at</inline></reference>(target: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, up: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> = Vector3(0, 1, 0), use_model_front: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-orthonormalized"><inline classes="std std-ref">orthonormalized</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-rotated"><inline classes="std std-ref">rotated</inline></reference>(axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-rotated-local"><inline classes="std std-ref">rotated_local</inline></reference>(axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-scaled"><inline classes="std std-ref">scaled</inline></reference>(scale: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-scaled-local"><inline classes="std std-ref">scaled_local</inline></reference>(scale: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-translated"><inline classes="std std-ref">translated</inline></reference>(offset: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-method-translated-local"><inline classes="std std-ref">translated_local</inline></reference>(offset: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id6" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="137"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-neq-transform3d"><inline classes="std std-ref">operator !=</inline></reference>(right: <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-aabb"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-packedvector3array"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-plane"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-transform3d"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-vector3"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-float"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-mul-int"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-div-float"><inline classes="std std-ref">operator /</inline></reference>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-div-int"><inline classes="std std-ref">operator /</inline></reference>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform3d-operator-eq-transform3d"><inline classes="std std-ref">operator ==</inline></reference>(right: <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="常量">
            <title>常量</title>
            <target refid="class-transform3d-constant-identity"></target>
            <paragraph classes="classref-constant" ids="class-transform3d-constant-identity" names="class_transform3d_constant_identity"><strong>IDENTITY</strong> = <literal>Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)</literal> <reference internal="True" refid="class-transform3d-constant-identity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>不含平移、旋转、缩放为 <literal>1</literal> 的变换。<reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference> 等于 <reference internal="True" refuri="class_basis#class-basis-constant-identity"><inline classes="std std-ref">Basis.IDENTITY</inline></reference>。</paragraph>
            <paragraph>与 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>、<strong>Transform3D</strong> 等其他 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 相乘时，不会进行任何变换。</paragraph>
            <target refid="class-transform3d-constant-flip-x"></target>
            <paragraph classes="classref-constant" ids="class-transform3d-constant-flip-x" names="class_transform3d_constant_flip_x"><strong>FLIP_X</strong> = <literal>Transform3D(-1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)</literal> <reference internal="True" refid="class-transform3d-constant-flip-x"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>应用了垂直于 YZ 平面镜像操作的 <strong>Transform3D</strong>。其 <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference> 相当于 <reference internal="True" refuri="class_basis#class-basis-constant-flip-x"><inline classes="std std-ref">Basis.FLIP_X</inline></reference>。</paragraph>
            <target refid="class-transform3d-constant-flip-y"></target>
            <paragraph classes="classref-constant" ids="class-transform3d-constant-flip-y" names="class_transform3d_constant_flip_y"><strong>FLIP_Y</strong> = <literal>Transform3D(1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0)</literal> <reference internal="True" refid="class-transform3d-constant-flip-y"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>应用了垂直于 XZ 平面镜像操作的 <strong>Transform3D</strong>。其 <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference> 相当于 <reference internal="True" refuri="class_basis#class-basis-constant-flip-y"><inline classes="std std-ref">Basis.FLIP_Y</inline></reference>。</paragraph>
            <target refid="class-transform3d-constant-flip-z"></target>
            <paragraph classes="classref-constant" ids="class-transform3d-constant-flip-z" names="class_transform3d_constant_flip_z"><strong>FLIP_Z</strong> = <literal>Transform3D(1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0)</literal> <reference internal="True" refid="class-transform3d-constant-flip-z"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>应用了垂直于 XY 平面镜像操作的 <strong>Transform3D</strong>。其 <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference> 相当于 <reference internal="True" refuri="class_basis#class-basis-constant-flip-z"><inline classes="std std-ref">Basis.FLIP_Z</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-transform3d-property-basis"></target>
            <paragraph classes="classref-property" ids="class-transform3d-property-basis" names="class_transform3d_property_basis"><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> <strong>basis</strong> = <literal>Basis(1, 0, 0, 0, 1, 0, 0, 0, 1)</literal> <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>The <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> of this transform. It is composed by 3 axes (<reference internal="True" refuri="class_basis#class-basis-property-x"><inline classes="std std-ref">Basis.x</inline></reference>, <reference internal="True" refuri="class_basis#class-basis-property-y"><inline classes="std std-ref">Basis.y</inline></reference>, and <reference internal="True" refuri="class_basis#class-basis-property-z"><inline classes="std std-ref">Basis.z</inline></reference>). Together, these represent the transform's rotation, scale, and shear.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-property-origin"></target>
            <paragraph classes="classref-property" ids="class-transform3d-property-origin" names="class_transform3d_property_origin"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>origin</strong> = <literal>Vector3(0, 0, 0)</literal> <reference internal="True" refid="class-transform3d-property-origin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该变换的平移偏移量。在 3D 空间中，这可以被看作是位置。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-transform3d-constructor-transform3d"></target>
            <paragraph classes="classref-constructor" ids="class-transform3d-constructor-transform3d" names="class_transform3d_constructor_transform3d"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>Transform3D</strong>() <reference internal="True" refid="class-transform3d-constructor-transform3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>构造与 <reference internal="True" refid="class-transform3d-constant-identity"><inline classes="std std-ref">IDENTITY</inline></reference> 相同的 <strong>Transform3D</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>Transform3D</strong>(from: <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
            <paragraph>构造给定 <strong>Transform3D</strong> 的副本 <strong>Transform3D</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>Transform3D</strong>(basis: <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>, origin: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
            <paragraph>根据 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> 和 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 构造 <strong>Transform3D</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>Transform3D</strong>(from: <reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference>)</paragraph>
            <paragraph>根据 <reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference> 构造 <strong>Transform3D</strong>。因为 <strong>Transform3D</strong> 是 3×4 的矩阵，而 <reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference> 是 4×4 的矩阵，所以这个操作会削去投影矩阵的最后一行（新的变换中不包含 <literal>from.x.w</literal>、<literal>from.y.w</literal>、<literal>from.z.w</literal>、<literal>from.w.w</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>Transform3D</strong>(x_axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, y_axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, z_axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, origin: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
            <paragraph>根据四个 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 值（也叫矩阵列）构造 <strong>Transform3D</strong>。</paragraph>
            <paragraph>前三个参数是 <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference> 的三个轴（<reference internal="True" refuri="class_basis#class-basis-property-x"><inline classes="std std-ref">Basis.x</inline></reference>、<reference internal="True" refuri="class_basis#class-basis-property-y"><inline classes="std std-ref">Basis.y</inline></reference>、<reference internal="True" refuri="class_basis#class-basis-property-z"><inline classes="std std-ref">Basis.z</inline></reference>）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id10" names="方法说明">
            <title>方法说明</title>
            <target refid="class-transform3d-method-affine-inverse"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-affine-inverse" names="class_transform3d_method_affine_inverse"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>affine_inverse</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-affine-inverse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the inverted version of this transform. Unlike <reference internal="True" refid="class-transform3d-method-inverse"><inline classes="std std-ref">inverse</inline></reference>, this method works with almost any <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference>, including non-uniform ones, but is slower. See also <reference internal="True" refuri="class_basis#class-basis-method-inverse"><inline classes="std std-ref">Basis.inverse</inline></reference>.</paragraph>
            <paragraph><strong>Note:</strong> For this method to return correctly, the transform's <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference> needs to have a determinant that is not exactly <literal>0</literal> (see <reference internal="True" refuri="class_basis#class-basis-method-determinant"><inline classes="std std-ref">Basis.determinant</inline></reference>).</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-interpolate-with"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-interpolate-with" names="class_transform3d_method_interpolate_with"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>interpolate_with</strong>(xform: <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-interpolate-with"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the result of the linear interpolation between this transform and <literal>xform</literal> by the given <literal>weight</literal>.</paragraph>
            <paragraph>The <literal>weight</literal> should be between <literal>0.0</literal> and <literal>1.0</literal> (inclusive). Values outside this range are allowed and can be used to perform <emphasis>extrapolation</emphasis> instead.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-inverse"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-inverse" names="class_transform3d_method_inverse"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>inverse</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-inverse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换的逆版本。另见 <reference internal="True" refuri="class_basis#class-basis-method-inverse"><inline classes="std std-ref">Basis.inverse</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>为了使该方法正确返回，该变换的 <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference> 需要是<emphasis>正交归一化的</emphasis>（请参阅 <reference internal="True" refuri="class_basis#class-basis-method-orthonormalized"><inline classes="std std-ref">Basis.orthonormalized</inline></reference>）。这意味着，该基应该只代表旋转。如果没有，请改用 <reference internal="True" refid="class-transform3d-method-affine-inverse"><inline classes="std std-ref">affine_inverse</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-is-equal-approx"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-is-equal-approx" names="class_transform3d_method_is_equal_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_equal_approx</strong>(xform: <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-is-equal-approx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果通过在每个分量上运行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-equal-approx"><inline classes="std std-ref">@GlobalScope.is_equal_approx</inline></reference>，该变换和 <literal>xform</literal> 近似相等，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-is-finite"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-is-finite" names="class_transform3d_method_is_finite"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_finite</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-is-finite"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该变换是有限的，则返回 <literal>true</literal>，判断方法是在每个分量上调用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-finite"><inline classes="std std-ref">@GlobalScope.is_finite</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-looking-at"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-looking-at" names="class_transform3d_method_looking_at"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>looking_at</strong>(target: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, up: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> = Vector3(0, 1, 0), use_model_front: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-looking-at"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换的旋转副本，以便向前轴（-Z）指向 <literal>target</literal> 的位置。</paragraph>
            <paragraph>向上的轴（+Y）在保持与向前的轴垂直的前提下，尽可能接近 <literal>up</literal> 向量。最终的变换是标准正交变换。变换中原有的旋转、缩放、偏斜信息会被丢弃。<literal>target</literal> 和 <literal>up</literal> 向量不能为零，不能互相平行，使用全局/父级空间。</paragraph>
            <paragraph>如果 <literal>use_model_front</literal> 为 <literal>true</literal>，则会将 +Z 轴（资产正面）作为向前的轴（此时 +X 为左），指向 <literal>target</literal> 的位置。默认情况下会将 -Z 轴（相机前方）作为向前的轴（此时 +X 为右）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-orthonormalized"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-orthonormalized" names="class_transform3d_method_orthonormalized"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>orthonormalized</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-orthonormalized"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换的副本，其 <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference> 已正交归一化。正交归一化的基既是<emphasis>正交的</emphasis>（轴彼此垂直）又是<emphasis>归一化的</emphasis>（轴长度为 <literal>1</literal>），这也意味着它只能代表旋转。另见 <reference internal="True" refuri="class_basis#class-basis-method-orthonormalized"><inline classes="std std-ref">Basis.orthonormalized</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-rotated"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-rotated" names="class_transform3d_method_rotated"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>rotated</strong>(axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-rotated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换围绕给定 <literal>axis</literal> 旋转给定 <literal>angle</literal>（单位为弧度）的副本。</paragraph>
            <paragraph><literal>axis</literal> 必须为归一化的向量。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的旋转变换 <literal>R</literal> 从左侧相乘一致，即 <literal>R * X</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在全局/父级坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-rotated-local"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-rotated-local" names="class_transform3d_method_rotated_local"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>rotated_local</strong>(axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-rotated-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换围绕给定 <literal>axis</literal> 旋转给定 <literal>angle</literal>（单位为弧度）的副本。</paragraph>
            <paragraph><literal>axis</literal> 必须为归一化的向量。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的旋转变换 <literal>R</literal> 从右侧相乘一致，即 <literal>R * X</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在局部坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-scaled"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-scaled" names="class_transform3d_method_scaled"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>scaled</strong>(scale: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-scaled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换按给定的 <literal>scale</literal> 系数缩放的副本。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的缩放变换 <literal>S</literal> 从左侧相乘一致，即 <literal>S * X</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在全局/父级坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-scaled-local"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-scaled-local" names="class_transform3d_method_scaled_local"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>scaled_local</strong>(scale: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-scaled-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换按给定的 <literal>scale</literal> 系数缩放的副本。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的缩放变换 <literal>S</literal> 从右侧相乘一致，即 <literal>X * S</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在局部坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-translated"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-translated" names="class_transform3d_method_translated"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>translated</strong>(offset: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-translated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换平移了给定 <literal>offset</literal> 的副本。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的平移变换 <literal>T</literal> 从左侧相乘一致，即 <literal>T * X</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在全局/父级坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-method-translated-local"></target>
            <paragraph classes="classref-method" ids="class-transform3d-method-translated-local" names="class_transform3d_method_translated_local"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>translated_local</strong>(offset: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform3d-method-translated-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变化平移了给定 <literal>offset</literal> 的副本。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的平移变换 <literal>T</literal> 从右侧相乘一致，即 <literal>X * T</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在局部坐标系中的变换。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id11" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-transform3d-operator-neq-transform3d"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-neq-transform3d" names="class_transform3d_operator_neq_transform3d"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong>(right: <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-transform3d-operator-neq-transform3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果两个变换的分量不相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点精度误差，请考虑改用 <reference internal="True" refid="class-transform3d-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，这样更可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-aabb"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-aabb" names="class_transform3d_operator_mul_aabb"><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>) <reference internal="True" refid="class-transform3d-operator-mul-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用该变换矩阵对 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> 进行变换（相乘）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-packedvector3array"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-packedvector3array" names="class_transform3d_operator_mul_packedvector3array"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>) <reference internal="True" refid="class-transform3d-operator-mul-packedvector3array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由该变换矩阵变换（乘以）给定 <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> 的每个 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 元素。</paragraph>
            <paragraph>在较大的数组上，该操作比单独变换每个 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 要快得多。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-plane"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-plane" names="class_transform3d_operator_mul_plane"><reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>) <reference internal="True" refid="class-transform3d-operator-mul-plane"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用该变换矩阵对 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> 进行变换（相乘）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-transform3d"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-transform3d" names="class_transform3d_operator_mul_transform3d"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-transform3d-operator-mul-transform3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由 <literal>right</literal> 变换来变换（乘以）该变换。</paragraph>
            <paragraph>这是父级和子级 <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 之间执行的操作。</paragraph>
            <paragraph><strong>注意：</strong>如果你只需要修改该变换的一个属性，请考虑改用以下方法之一：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>对于平移，请参阅 <reference internal="True" refid="class-transform3d-method-translated"><inline classes="std std-ref">translated</inline></reference> 或 <reference internal="True" refid="class-transform3d-method-translated-local"><inline classes="std std-ref">translated_local</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>对于旋转，请参阅 <reference internal="True" refid="class-transform3d-method-rotated"><inline classes="std std-ref">rotated</inline></reference> 或 <reference internal="True" refid="class-transform3d-method-rotated-local"><inline classes="std std-ref">rotated_local</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>对于缩放，请参阅 <reference internal="True" refid="class-transform3d-method-scaled"><inline classes="std std-ref">scaled</inline></reference> 或 <reference internal="True" refid="class-transform3d-method-scaled-local"><inline classes="std std-ref">scaled_local</inline></reference>。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-vector3"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-vector3" names="class_transform3d_operator_mul_vector3"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-transform3d-operator-mul-vector3"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用该变换矩阵对 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 进行变换（相乘）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-float"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-float" names="class_transform3d_operator_mul_float"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-transform3d-operator-mul-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <strong>Transform3D</strong> 包括 <reference internal="True" refid="class-transform3d-property-origin"><inline classes="std std-ref">origin</inline></reference> 在内的所有分量乘以给定的 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。会均匀地影响该变换的缩放，对 <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference> 进行缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-mul-int"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-mul-int" names="class_transform3d_operator_mul_int"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-transform3d-operator-mul-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <strong>Transform3D</strong> 包括 <reference internal="True" refid="class-transform3d-property-origin"><inline classes="std std-ref">origin</inline></reference> 在内的所有分量乘以给定的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。会均匀地影响该变换的缩放，对 <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference> 进行缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-div-float"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-div-float" names="class_transform3d_operator_div_float"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>operator /</strong>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-transform3d-operator-div-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <strong>Transform3D</strong> 包括 <reference internal="True" refid="class-transform3d-property-origin"><inline classes="std std-ref">origin</inline></reference> 在内的所有分量除以给定的 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。会均匀地影响该变换的缩放，对 <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference> 进行缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-div-int"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-div-int" names="class_transform3d_operator_div_int"><reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>operator /</strong>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-transform3d-operator-div-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <strong>Transform3D</strong> 包括 <reference internal="True" refid="class-transform3d-property-origin"><inline classes="std std-ref">origin</inline></reference> 在内的所有分量除以给定的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。会均匀地影响该变换的缩放，对 <reference internal="True" refid="class-transform3d-property-basis"><inline classes="std std-ref">basis</inline></reference> 进行缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform3d-operator-eq-transform3d"></target>
            <paragraph classes="classref-operator" ids="class-transform3d-operator-eq-transform3d" names="class_transform3d_operator_eq_transform3d"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong>(right: <reference internal="True" refid="class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-transform3d-operator-eq-transform3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果两个变换的分量完全相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点精度误差，请考虑改用 <reference internal="True" refid="class-transform3d-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，这样更可靠。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
