<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_translation.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Translation.xml.</comment>
    <target refid="class-translation"></target>
    <section ids="translation class-translation" names="translation class_translation">
        <title>Translation</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_optimizedtranslation#class-optimizedtranslation"><inline classes="std std-ref">OptimizedTranslation</inline></reference></paragraph>
        <paragraph>语言翻译，能够将一组字符串映射到对应的翻译。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Translation</strong> 是可以按需加载和卸载的资源，能够将一组字符串映射到对应的翻译。还为复数形式提供了便捷方法。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/i18n/internationalizing_games"><inline classes="doc">将游戏国际化</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/i18n/locales"><inline classes="doc">区域设置</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="50"></colspec>
                    <colspec colwidth="10"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translation-property-locale"><inline classes="std std-ref">locale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>"en"</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="289"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translation-private-method-get-message"><inline classes="std std-ref">_get_message</inline></reference>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translation-private-method-get-plural-message"><inline classes="std std-ref">_get_plural_message</inline></reference>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, src_plural_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, n: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translation-method-add-message"><inline classes="std std-ref">add_message</inline></reference>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, xlated_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translation-method-add-plural-message"><inline classes="std std-ref">add_plural_message</inline></reference>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, xlated_messages: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translation-method-erase-message"><inline classes="std std-ref">erase_message</inline></reference>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translation-method-get-message"><inline classes="std std-ref">get_message</inline></reference>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translation-method-get-message-count"><inline classes="std std-ref">get_message_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translation-method-get-message-list"><inline classes="std std-ref">get_message_list</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translation-method-get-plural-message"><inline classes="std std-ref">get_plural_message</inline></reference>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, src_plural_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, n: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translation-method-get-translated-message-list"><inline classes="std std-ref">get_translated_message_list</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-translation-property-locale"></target>
            <paragraph classes="classref-property" ids="class-translation-property-locale" names="class_translation_property_locale"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>locale</strong> = <literal>"en"</literal> <reference internal="True" refid="class-translation-property-locale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_locale</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_locale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>翻译的区域设置。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-translation-private-method-get-message"></target>
            <paragraph classes="classref-method" ids="class-translation-private-method-get-message" names="class_translation_private_method__get_message"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>_get_message</strong>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translation-private-method-get-message"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖 <reference internal="True" refid="class-translation-method-get-message"><inline classes="std std-ref">get_message</inline></reference> 的虚方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translation-private-method-get-plural-message"></target>
            <paragraph classes="classref-method" ids="class-translation-private-method-get-plural-message" names="class_translation_private_method__get_plural_message"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>_get_plural_message</strong>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, src_plural_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, n: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translation-private-method-get-plural-message"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖 <reference internal="True" refid="class-translation-method-get-plural-message"><inline classes="std std-ref">get_plural_message</inline></reference> 的虚方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translation-method-add-message"></target>
            <paragraph classes="classref-method" ids="class-translation-method-add-message" names="class_translation_method_add_message"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_message</strong>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, xlated_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <reference internal="True" refid="class-translation-method-add-message"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果不存在，则添加一条消息，后跟其翻译。</paragraph>
            <paragraph>可以使用一个额外的上下文，来指定翻译上下文或区分多义词。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translation-method-add-plural-message"></target>
            <paragraph classes="classref-method" ids="class-translation-method-add-plural-message" names="class_translation_method_add_plural_message"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_plural_message</strong>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, xlated_messages: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <reference internal="True" refid="class-translation-method-add-plural-message"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果不存在，则添加一条涉及复数翻译的消息，后跟其翻译。</paragraph>
            <paragraph>可以使用一个额外的上下文，来指定翻译上下文或区分多义词。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translation-method-erase-message"></target>
            <paragraph classes="classref-method" ids="class-translation-method-erase-message" names="class_translation_method_erase_message"><abbreviation explanation="无返回值。">void</abbreviation> <strong>erase_message</strong>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <reference internal="True" refid="class-translation-method-erase-message"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translation-method-get-message"></target>
            <paragraph classes="classref-method" ids="class-translation-method-get-message" names="class_translation_method_get_message"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_message</strong>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translation-method-get-message"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回信息的翻译。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translation-method-get-message-count"></target>
            <paragraph classes="classref-method" ids="class-translation-method-get-message-count" names="class_translation_method_get_message_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_message_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translation-method-get-message-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回现有信息的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translation-method-get-message-list"></target>
            <paragraph classes="classref-method" ids="class-translation-method-get-message-list" names="class_translation_method_get_message_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_message_list</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translation-method-get-message-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有的信息（键值）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translation-method-get-plural-message"></target>
            <paragraph classes="classref-method" ids="class-translation-method-get-plural-message" names="class_translation_method_get_plural_message"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_plural_message</strong>(src_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, src_plural_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, n: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translation-method-get-plural-message"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一条消息涉及复数的翻译。</paragraph>
            <paragraph>数字 <literal>n</literal> 是复数对象的数目或数量。它将被用于指导翻译系统为所选语言获取正确的复数形式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translation-method-get-translated-message-list"></target>
            <paragraph classes="classref-method" ids="class-translation-method-get-translated-message-list" names="class_translation_method_get_translated_message_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_translated_message_list</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translation-method-get-translated-message-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有信息（翻译后的文本）。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
