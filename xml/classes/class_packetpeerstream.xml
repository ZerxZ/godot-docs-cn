<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_packetpeerstream.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/PacketPeerStream.xml.</comment>
    <target refid="class-packetpeerstream"></target>
    <section ids="packetpeerstream class-packetpeerstream" names="packetpeerstream class_packetpeerstream">
        <title>PacketPeerStream</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_packetpeer#class-packetpeer"><inline classes="std std-ref">PacketPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>在 StreamPeer 上使用 PacketPeer 的包装器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>PacketStreamPeer 提供了一个在流中使用数据包的包装器。这样就能够在基于数据包的代码中使用 StreamPeer。PacketPeerStream 在 StreamPeer 的基础上实现了自定义协议，因此用户不应该直接读取或写入被包装的 StreamPeer。</paragraph>
            <paragraph><strong>注意：</strong>导出到安卓时，在导出项目或使用一键部署之前，请务必在安卓导出预设中，开启 <literal>INTERNET</literal> 权限。否则，任何类型的网络通信，都将被 Android 阻止。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="87"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packetpeerstream-property-input-buffer-max-size"><inline classes="std std-ref">input_buffer_max_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>65532</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packetpeerstream-property-output-buffer-max-size"><inline classes="std std-ref">output_buffer_max_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>65532</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packetpeerstream-property-stream-peer"><inline classes="std std-ref">stream_peer</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="属性说明">
            <title>属性说明</title>
            <target refid="class-packetpeerstream-property-input-buffer-max-size"></target>
            <paragraph classes="classref-property" ids="class-packetpeerstream-property-input-buffer-max-size" names="class_packetpeerstream_property_input_buffer_max_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>input_buffer_max_size</strong> = <literal>65532</literal> <reference internal="True" refid="class-packetpeerstream-property-input-buffer-max-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_input_buffer_max_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_input_buffer_max_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <container classes="contribute">
                <paragraph>该属性目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packetpeerstream-property-output-buffer-max-size"></target>
            <paragraph classes="classref-property" ids="class-packetpeerstream-property-output-buffer-max-size" names="class_packetpeerstream_property_output_buffer_max_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>output_buffer_max_size</strong> = <literal>65532</literal> <reference internal="True" refid="class-packetpeerstream-property-output-buffer-max-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_output_buffer_max_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_output_buffer_max_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <container classes="contribute">
                <paragraph>该属性目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packetpeerstream-property-stream-peer"></target>
            <paragraph classes="classref-property" ids="class-packetpeerstream-property-stream-peer" names="class_packetpeerstream_property_stream_peer"><reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference> <strong>stream_peer</strong> <reference internal="True" refid="class-packetpeerstream-property-stream-peer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stream_peer</strong>(value: <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference> <strong>get_stream_peer</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>被包装的 <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference> 对象。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
