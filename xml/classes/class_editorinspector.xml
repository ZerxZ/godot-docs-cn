<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editorinspector.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/EditorInspector.xml.</comment>
    <target refid="class-editorinspector"></target>
    <section ids="editorinspector class-editorinspector" names="editorinspector class_editorinspector">
        <title>EditorInspector</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_scrollcontainer#class-scrollcontainer"><inline classes="std std-ref">ScrollContainer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于编辑对象属性的控件。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这是为编辑器的“设置”对话框、“检查器”面板等实现属性编辑的控件。要获取编辑器的“检查器”面板中所使用的 <strong>EditorInspector</strong>，请使用 <reference internal="True" refuri="class_editorinterface#class-editorinterface-method-get-inspector"><inline classes="std std-ref">EditorInterface.get_inspector</inline></reference>。</paragraph>
            <paragraph><strong>EditorInspector</strong> 展示属性的顺序与 <reference internal="True" refuri="class_object#class-object-method-get-property-list"><inline classes="std std-ref">Object.get_property_list</inline></reference> 返回的数组一致。</paragraph>
            <paragraph>如果属性的名称为路径形式（即包含正斜杠），<strong>EditorInspector</strong> 会为该路径上的各个“目录”创建嵌套的部分。例如，如果某个属性名为 <literal>highlighting/gdscript/node_path_color</literal>，那么就会显示为“Node Path Color”，位于嵌套在“Highlighting”部分的“GDScript”部分中。</paragraph>
            <paragraph>如果属性包含 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-usage-group"><inline classes="std std-ref">@GlobalScope.PROPERTY_USAGE_GROUP</inline></reference> 用法，就会将其后续属性中，名称以其提示字符串开头的属性合为一组。如果遇到不以该提示字符串开头的属性，或者开始了一个新的分组，那么这个分组就会结束。分组名称为空的效果为结束当前分组。<strong>EditorInspector</strong> 会为每个分组都创建一个顶层的部分。例如，如果有个包含分组用法的属性名叫 <literal>Collide With</literal>，其提示字符串为 <literal>collide_with_</literal>，那么后续的 <literal>collide_with_area</literal> 属性就会以“Area”的名称出现在“Collide With”部分中。另外还有一种特殊情况：提示字符串包含属性名称时，该属性也会被划入该分组。这样做的目的是将类似 <literal>font</literal>、<literal>font_color</literal>、<literal>font_size</literal> 的属性分在一起（使用 <literal>font_</literal> 提示字符串）</paragraph>
            <paragraph>如果属性包含 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-usage-subgroup"><inline classes="std std-ref">@GlobalScope.PROPERTY_USAGE_SUBGROUP</inline></reference> 用法，就会用和分组一样的方法创建子分组，每个子分组都会创建一个二级部分。</paragraph>
            <paragraph><strong>注意：</strong>与根据路径形式的名称而创建的部分不同，<strong>EditorInspector</strong> 不会对根据分组创建的部分的名称进行首字母大写。因此，包含分组用法的属性通常使用首字母大写的名称，而不是 snake_case。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="52"></colspec>
                    <colspec colwidth="24"></colspec>
                    <colspec colwidth="97"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_scrollcontainer#enum-scrollcontainer-scrollmode"><inline classes="std std-ref">ScrollMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>horizontal_scroll_mode</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal> (overrides <reference internal="True" refuri="class_scrollcontainer#class-scrollcontainer-property-horizontal-scroll-mode"><inline classes="std std-ref">ScrollContainer</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="88"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinspector-method-get-edited-object"><inline classes="std std-ref">get_edited_object</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinspector-method-get-selected-path"><inline classes="std std-ref">get_selected_path</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-editorinspector-signal-edited-object-changed"></target>
            <paragraph classes="classref-signal" ids="class-editorinspector-signal-edited-object-changed" names="class_editorinspector_signal_edited_object_changed"><strong>edited_object_changed</strong>() <reference internal="True" refid="class-editorinspector-signal-edited-object-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当检查器正在编辑的对象发生更改时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspector-signal-object-id-selected"></target>
            <paragraph classes="classref-signal" ids="class-editorinspector-signal-object-id-selected" names="class_editorinspector_signal_object_id_selected"><strong>object_id_selected</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-editorinspector-signal-object-id-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在检查器中按下 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 的“编辑”按钮时发出。这主要用于远程场景树检查器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspector-signal-property-deleted"></target>
            <paragraph classes="classref-signal" ids="class-editorinspector-signal-property-deleted" names="class_editorinspector_signal_property_deleted"><strong>property_deleted</strong>(property: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorinspector-signal-property-deleted"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当从检查器中移除属性时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspector-signal-property-edited"></target>
            <paragraph classes="classref-signal" ids="class-editorinspector-signal-property-edited" names="class_editorinspector_signal_property_edited"><strong>property_edited</strong>(property: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorinspector-signal-property-edited"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在检查器中编辑属性时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspector-signal-property-keyed"></target>
            <paragraph classes="classref-signal" ids="class-editorinspector-signal-property-keyed" names="class_editorinspector_signal_property_keyed"><strong>property_keyed</strong>(property: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, advance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-editorinspector-signal-property-keyed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当属性在检查器中被键入时触发。当动画面板打开时，可通过点击属性旁边的“钥匙”图标为属性添加关键帧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspector-signal-property-selected"></target>
            <paragraph classes="classref-signal" ids="class-editorinspector-signal-property-selected" names="class_editorinspector_signal_property_selected"><strong>property_selected</strong>(property: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorinspector-signal-property-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在检查器中选择属性时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspector-signal-property-toggled"></target>
            <paragraph classes="classref-signal" ids="class-editorinspector-signal-property-toggled" names="class_editorinspector_signal_property_toggled"><strong>property_toggled</strong>(property: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, checked: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-editorinspector-signal-property-toggled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在检查器中切换布尔属性时发出。</paragraph>
            <paragraph><strong>注意：</strong>如果启用了内部 <literal>autoclear</literal> 属性，则该信号永远不会触发。由于该属性在编辑器检查器中始终处于启用状态，因此编辑器本身绝不会发出该信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspector-signal-resource-selected"></target>
            <paragraph classes="classref-signal" ids="class-editorinspector-signal-resource-selected" names="class_editorinspector_signal_resource_selected"><strong>resource_selected</strong>(resource: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorinspector-signal-resource-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在检查器中选择资源时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspector-signal-restart-requested"></target>
            <paragraph classes="classref-signal" ids="class-editorinspector-signal-restart-requested" names="class_editorinspector_signal_restart_requested"><strong>restart_requested</strong>() <reference internal="True" refid="class-editorinspector-signal-restart-requested"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在检查器中编辑需要重启应用的属性时触发。仅在项目设置和编辑器设置中使用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editorinspector-method-get-edited-object"></target>
            <paragraph classes="classref-method" ids="class-editorinspector-method-get-edited-object" names="class_editorinspector_method_get_edited_object"><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <strong>get_edited_object</strong>() <reference internal="True" refid="class-editorinspector-method-get-edited-object"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前在该检查器中选择的对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinspector-method-get-selected-path"></target>
            <paragraph classes="classref-method" ids="class-editorinspector-method-get-selected-path" names="class_editorinspector_method_get_selected_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_selected_path</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorinspector-method-get-selected-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取当前选定属性的路径。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
