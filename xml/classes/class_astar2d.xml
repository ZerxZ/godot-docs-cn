<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_astar2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AStar2D.xml.</comment>
    <target refid="class-astar2d"></target>
    <section ids="astar2d class-astar2d" names="astar2d class_astar2d">
        <title>AStar2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>A* 的一种实现，用于查找 2D 空间中连通图上两个顶点之间的最短路径。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>A* 算法的一种实现，用于在 2D 空间中的连通图上找到两个顶点之间的最短路径。</paragraph>
            <paragraph>有关如何使用该类的更详尽的解释，请参阅 <reference internal="True" refuri="class_astar3d#class-astar3d"><inline classes="std std-ref">AStar3D</inline></reference>。<strong>AStar2D</strong> 是 <reference internal="True" refuri="class_astar3d#class-astar3d"><inline classes="std std-ref">AStar3D</inline></reference> 的包装器，它强制执行 2D 坐标。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="193"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-private-method-compute-cost"><inline classes="std std-ref">_compute_cost</inline></reference>(from_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-private-method-estimate-cost"><inline classes="std std-ref">_estimate_cost</inline></reference>(from_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-add-point"><inline classes="std std-ref">add_point</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, weight_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-are-points-connected"><inline classes="std std-ref">are_points_connected</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bidirectional: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-connect-points"><inline classes="std std-ref">connect_points</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bidirectional: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-disconnect-points"><inline classes="std std-ref">disconnect_points</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bidirectional: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-get-available-point-id"><inline classes="std std-ref">get_available_point_id</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-get-closest-point"><inline classes="std std-ref">get_closest_point</inline></reference>(to_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, include_disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-get-closest-position-in-segment"><inline classes="std std-ref">get_closest_position_in_segment</inline></reference>(to_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-get-id-path"><inline classes="std std-ref">get_id_path</inline></reference>(from_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, allow_partial_path: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-get-point-capacity"><inline classes="std std-ref">get_point_capacity</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-get-point-connections"><inline classes="std std-ref">get_point_connections</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-get-point-count"><inline classes="std std-ref">get_point_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-get-point-ids"><inline classes="std std-ref">get_point_ids</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-get-point-path"><inline classes="std std-ref">get_point_path</inline></reference>(from_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, allow_partial_path: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-get-point-position"><inline classes="std std-ref">get_point_position</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-get-point-weight-scale"><inline classes="std std-ref">get_point_weight_scale</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-has-point"><inline classes="std std-ref">has_point</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-is-point-disabled"><inline classes="std std-ref">is_point_disabled</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-remove-point"><inline classes="std std-ref">remove_point</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-reserve-space"><inline classes="std std-ref">reserve_space</inline></reference>(num_nodes: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-set-point-disabled"><inline classes="std std-ref">set_point_disabled</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-set-point-position"><inline classes="std std-ref">set_point_position</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astar2d-method-set-point-weight-scale"><inline classes="std std-ref">set_point_weight_scale</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, weight_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-astar2d-private-method-compute-cost"></target>
            <paragraph classes="classref-method" ids="class-astar2d-private-method-compute-cost" names="class_astar2d_private_method__compute_cost"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_compute_cost</strong>(from_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astar2d-private-method-compute-cost"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>计算两个连接点之间的成本时调用。</paragraph>
            <paragraph>请注意，这个函数在默认的 <strong>AStar2D</strong> 类中是隐藏的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-private-method-estimate-cost"></target>
            <paragraph classes="classref-method" ids="class-astar2d-private-method-estimate-cost" names="class_astar2d_private_method__estimate_cost"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_estimate_cost</strong>(from_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astar2d-private-method-estimate-cost"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>估算某个点和路径终点之间的成本时调用。</paragraph>
            <paragraph>请注意，这个函数在默认的 <strong>AStar2D</strong> 类中是隐藏的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-add-point"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-add-point" names="class_astar2d_method_add_point"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_point</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, weight_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0) <reference internal="True" refid="class-astar2d-method-add-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在具有给定标识符的给定位置添加一个新点。<literal>id</literal> 必须为 0 或更大，<literal>weight_scale</literal> 必须为 0.0 或更大。</paragraph>
            <paragraph>在确定从相邻点到此点的一段路程的总成本时，<literal>weight_scale</literal> 要乘以 <reference internal="True" refid="class-astar2d-private-method-compute-cost"><inline classes="std std-ref">_compute_cost</inline></reference> 的结果。因此，在其他条件相同的情况下，算法优先选择 <literal>weight_scale</literal> 较低的点来形成路径。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var astar = AStar2D.new()
astar.add_point(1, Vector2(1, 0), 4) # 添加点 (1, 0)、权重为 4、ID 为 1</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var astar = new AStar2D();
astar.AddPoint(1, new Vector2(1, 0), 4); // 添加点 (1, 0)、权重为 4、ID 为 1</literal_block>
                </div>
            </container>
            <paragraph>如果已经存在一个给定 <literal>id</literal> 的点，则它的位置和权重缩放将被更新为给定值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-are-points-connected"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-are-points-connected" names="class_astar2d_method_are_points_connected"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>are_points_connected</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bidirectional: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astar2d-method-are-points-connected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回两个给定点之间是否存在连接/线段。如果 <literal>bidirectional</literal> 为 <literal>false</literal>，则返回是否可以通过此段从 <literal>id</literal> 移动到 <literal>to_id</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-clear"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-clear" names="class_astar2d_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-astar2d-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除所有点和线段。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-connect-points"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-connect-points" names="class_astar2d_method_connect_points"><abbreviation explanation="无返回值。">void</abbreviation> <strong>connect_points</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bidirectional: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-astar2d-method-connect-points"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的点之间创建一个线段。如果 <literal>bidirectional</literal> 为 <literal>false</literal>，则只允许从 <literal>id</literal> 到 <literal>to_id</literal> 的移动，而不允许反向移动。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var astar = AStar2D.new()
astar.add_point(1, Vector2(1, 1))
astar.add_point(2, Vector2(0, 5))
astar.connect_points(1, 2, false)</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var astar = new AStar2D();
astar.AddPoint(1, new Vector2(1, 1));
astar.AddPoint(2, new Vector2(0, 5));
astar.ConnectPoints(1, 2, false);</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-disconnect-points"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-disconnect-points" names="class_astar2d_method_disconnect_points"><abbreviation explanation="无返回值。">void</abbreviation> <strong>disconnect_points</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bidirectional: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-astar2d-method-disconnect-points"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除给定点之间的线段。如果 <literal>bidirectional</literal> 为 <literal>false</literal>，则仅阻止从 <literal>id</literal> 到 <literal>to_id</literal> 的移动，并且可能会保留一个单向线段。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-get-available-point-id"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-get-available-point-id" names="class_astar2d_method_get_available_point_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_available_point_id</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astar2d-method-get-available-point-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回下一个没有关联点的可用点 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-get-closest-point"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-get-closest-point" names="class_astar2d_method_get_closest_point"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_closest_point</strong>(to_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, include_disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astar2d-method-get-closest-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回距离 <literal>to_position</literal> 最近的点的 ID，可以选择将禁用的点考虑在内。如果点池中没有点，则返回 <literal>-1</literal>。</paragraph>
            <paragraph><strong>注意：</strong>如果有多个点距离 <literal>to_position</literal> 最近，则返回 ID 最小的那个点，以保证结果的确定性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-get-closest-position-in-segment"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-get-closest-position-in-segment" names="class_astar2d_method_get_closest_position_in_segment"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_closest_position_in_segment</strong>(to_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astar2d-method-get-closest-position-in-segment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最接近 <literal>to_position</literal> 的位置，该位置位于两个连接点之间的线段内。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var astar = AStar2D.new()
astar.add_point(1, Vector2(0, 0))
astar.add_point(2, Vector2(0, 5))
astar.connect_points(1, 2)
var res = astar.get_closest_position_in_segment(Vector2(3, 3)) # 返回 (0, 3)</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var astar = new AStar2D();
astar.AddPoint(1, new Vector2(0, 0));
astar.AddPoint(2, new Vector2(0, 5));
astar.ConnectPoints(1, 2);
Vector2 res = astar.GetClosestPositionInSegment(new Vector2(3, 3)); // 返回 (0, 3)</literal_block>
                </div>
            </container>
            <paragraph>结果位于从 <literal>y = 0</literal> 到 <literal>y = 5</literal> 的线段中。它是线段中距给定点最近的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-get-id-path"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-get-id-path" names="class_astar2d_method_get_id_path"><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> <strong>get_id_path</strong>(from_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, allow_partial_path: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-astar2d-method-get-id-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个数组，其中包含构成由 AStar2D 在给定点之间找到的路径的点的 ID。数组从路径的起点到终点进行排序。</paragraph>
            <paragraph>如果目标没有有效路径，并且<literal>allow_partial_path</literal>为<literal>true</literal>，则返回到最接近可到达目标的点的路径。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var astar = AStar2D.new()
astar.add_point(1, Vector2(0, 0))
astar.add_point(2, Vector2(0, 1), 1) # 默认权重为 1
astar.add_point(3, Vector2(1, 1))
astar.add_point(4, Vector2(2, 0))

astar.connect_points(1, 2, false)
astar.connect_points(2, 3, false)
astar.connect_points(4, 3, false)
astar.connect_points(1, 4, false)

var res = astar.get_id_path(1, 3) # 返回 [1, 2, 3]</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var astar = new AStar2D();
astar.AddPoint(1, new Vector2(0, 0));
astar.AddPoint(2, new Vector2(0, 1), 1); // 默认权重为 1
astar.AddPoint(3, new Vector2(1, 1));
astar.AddPoint(4, new Vector2(2, 0));

astar.ConnectPoints(1, 2, false);
astar.ConnectPoints(2, 3, false);
astar.ConnectPoints(4, 3, false);
astar.ConnectPoints(1, 4, false);
int[] res = astar.GetIdPath(1, 3); // 返回 [1, 2, 3]</literal_block>
                </div>
            </container>
            <paragraph>如果将第2个点的权重更改为 3，则结果将改为 <literal>[1, 4, 3]</literal>，因为现在即使距离更长，通过第 4 点也比通过第 2 点“更容易”。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-get-point-capacity"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-get-point-capacity" names="class_astar2d_method_get_point_capacity"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_point_capacity</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astar2d-method-get-point-capacity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该函数返回支持点的数据结构的容量，可以与 <reference internal="True" refid="class-astar2d-method-reserve-space"><inline classes="std std-ref">reserve_space</inline></reference> 方法一起使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-get-point-connections"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-get-point-connections" names="class_astar2d_method_get_point_connections"><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> <strong>get_point_connections</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-astar2d-method-get-point-connections"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个数组，其中包含与给定点形成连接的点的 ID。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var astar = AStar2D.new()
astar.add_point(1, Vector2(0, 0))
astar.add_point(2, Vector2(0, 1))
astar.add_point(3, Vector2(1, 1))
astar.add_point(4, Vector2(2, 0))

astar.connect_points(1, 2, true)
astar.connect_points(1, 3, true)

var neighbors = astar.get_point_connections(1) # 返回 [2, 3]</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var astar = new AStar2D();
astar.AddPoint(1, new Vector2(0, 0));
astar.AddPoint(2, new Vector2(0, 1));
astar.AddPoint(3, new Vector2(1, 1));
astar.AddPoint(4, new Vector2(2, 0));

astar.ConnectPoints(1, 2, true);
astar.ConnectPoints(1, 3, true);

int[] neighbors = astar.GetPointConnections(1); // 返回 [2, 3]</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-get-point-count"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-get-point-count" names="class_astar2d_method_get_point_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_point_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astar2d-method-get-point-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回点池中当前的点数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-get-point-ids"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-get-point-ids" names="class_astar2d_method_get_point_ids"><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> <strong>get_point_ids</strong>() <reference internal="True" refid="class-astar2d-method-get-point-ids"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有点 ID 的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-get-point-path"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-get-point-path" names="class_astar2d_method_get_point_path"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>get_point_path</strong>(from_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, allow_partial_path: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-astar2d-method-get-point-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个数组，其中包含 AStar2D 在给定点之间找到的路径中的点。数组从路径的起点到终点进行排序。</paragraph>
            <paragraph>如果没有通往目标的有效路径并且 <literal>allow_partial_path</literal> 为 <literal>true</literal>，则会返回通往距离目标最近的可达点的路径。</paragraph>
            <paragraph><strong>注意：</strong>该方法不是线程安全的。如果从 <reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference> 调用，它将返回一个空的 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> 并打印一条错误消息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-get-point-position"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-get-point-position" names="class_astar2d_method_get_point_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_point_position</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astar2d-method-get-point-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与给定 <literal>id</literal> 相关联的点的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-get-point-weight-scale"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-get-point-weight-scale" names="class_astar2d_method_get_point_weight_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_point_weight_scale</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astar2d-method-get-point-weight-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与给定 <literal>id</literal> 关联的点的权重比例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-has-point"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-has-point" names="class_astar2d_method_has_point"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_point</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astar2d-method-has-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与给定 <literal>id</literal> 相关联的点是否存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-is-point-disabled"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-is-point-disabled" names="class_astar2d_method_is_point_disabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_point_disabled</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astar2d-method-is-point-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回用于寻路时点是否被禁用。默认情况下，所有点均被启用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-remove-point"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-remove-point" names="class_astar2d_method_remove_point"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_point</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-astar2d-method-remove-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从点池中移除与给定 <literal>id</literal> 关联的点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-reserve-space"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-reserve-space" names="class_astar2d_method_reserve_space"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reserve_space</strong>(num_nodes: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-astar2d-method-reserve-space"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在内部为 <literal>num_nodes</literal> 个点保留空间，如果你想要一次性添加大量的点且数量已知，例如网格，那么就会很有用。新容量必须大于或等于旧容量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-set-point-disabled"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-set-point-disabled" names="class_astar2d_method_set_point_disabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_disabled</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-astar2d-method-set-point-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于寻路时禁用或启用指定的点。适用于制作临时障碍物。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-set-point-position"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-set-point-position" names="class_astar2d_method_set_point_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_position</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-astar2d-method-set-point-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为具有给定 <literal>id</literal> 的点设置位置 <literal>position</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astar2d-method-set-point-weight-scale"></target>
            <paragraph classes="classref-method" ids="class-astar2d-method-set-point-weight-scale" names="class_astar2d_method_set_point_weight_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_weight_scale</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, weight_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-astar2d-method-set-point-weight-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为给定的 <literal>id</literal> 的点设置 <literal>weight_scale</literal>。在确定从邻接点到这个点的一段路程的总成本时，<literal>weight_scale</literal> 要乘以 <reference internal="True" refid="class-astar2d-private-method-compute-cost"><inline classes="std std-ref">_compute_cost</inline></reference> 的结果。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
