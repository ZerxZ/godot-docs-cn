<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_astargrid2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AStarGrid2D.xml.</comment>
    <target refid="class-astargrid2d"></target>
    <section ids="astargrid2d class-astargrid2d" names="astargrid2d class_astargrid2d">
        <title>AStarGrid2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>A* 的一种实现，用于寻找疏松 2D 网格中两点之间的最短路径。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>AStarGrid2D</strong> 是 <reference internal="True" refuri="class_astar2d#class-astar2d"><inline classes="std std-ref">AStar2D</inline></reference> 的变种，针对疏松 2D 网格进行了优化。因为不需要手动创建点并进行连接，所以用起来更加简单。这个类还支持使用不同的启发方法、斜向移动模式、跳跃模式，从而加速运算。</paragraph>
            <paragraph>要使用 <strong>AStarGrid2D</strong>，你只需要设置网格的 <reference internal="True" refid="class-astargrid2d-property-region"><inline classes="std std-ref">region</inline></reference>，<reference internal="True" refid="class-astargrid2d-property-cell-size"><inline classes="std std-ref">cell_size</inline></reference> 可以不设置，最后调用 <reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">update</inline></reference> 方法即可：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var astar_grid = AStarGrid2D.new()
astar_grid.region = Rect2i(0, 0, 32, 32)
astar_grid.cell_size = Vector2(16, 16)
astar_grid.update()
print(astar_grid.get_id_path(Vector2i(0, 0), Vector2i(3, 4))) # 输出 (0, 0), (1, 1), (2, 2), (3, 3), (3, 4)
print(astar_grid.get_point_path(Vector2i(0, 0), Vector2i(3, 4))) # 输出 (0, 0), (16, 16), (32, 32), (48, 48), (48, 64)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">AStarGrid2D astarGrid = new AStarGrid2D();
astarGrid.Region = new Rect2I(0, 0, 32, 32);
astarGrid.CellSize = new Vector2I(16, 16);
astarGrid.Update();
GD.Print(astarGrid.GetIdPath(Vector2I.Zero, new Vector2I(3, 4))); // 输出 (0, 0), (1, 1), (2, 2), (3, 3), (3, 4)
GD.Print(astarGrid.GetPointPath(Vector2I.Zero, new Vector2I(3, 4))); // 输出 (0, 0), (16, 16), (32, 32), (48, 48), (48, 64)</literal_block>
                </div>
            </container>
            <paragraph>要从寻路网格中移除某个点，必须使用 <reference internal="True" refid="class-astargrid2d-method-set-point-solid"><inline classes="std std-ref">set_point_solid</inline></reference> 将其设置为“实心”。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="52"></colspec>
                    <colspec colwidth="90"></colspec>
                    <colspec colwidth="24"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-astargrid2d-cellshape"><inline classes="std std-ref">CellShape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-property-cell-shape"><inline classes="std std-ref">cell_shape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-property-cell-size"><inline classes="std std-ref">cell_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-property-default-compute-heuristic"><inline classes="std std-ref">default_compute_heuristic</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-property-default-estimate-heuristic"><inline classes="std std-ref">default_estimate_heuristic</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-astargrid2d-diagonalmode"><inline classes="std std-ref">DiagonalMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-property-diagonal-mode"><inline classes="std std-ref">diagonal_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-property-jumping-enabled"><inline classes="std std-ref">jumping_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-property-offset"><inline classes="std std-ref">offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-property-region"><inline classes="std std-ref">region</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Rect2i(0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-property-size"><inline classes="std std-ref">size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2i(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="62"></colspec>
                    <colspec colwidth="208"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-private-method-compute-cost"><inline classes="std std-ref">_compute_cost</inline></reference>(from_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, to_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-private-method-estimate-cost"><inline classes="std std-ref">_estimate_cost</inline></reference>(from_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, to_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-fill-solid-region"><inline classes="std std-ref">fill_solid_region</inline></reference>(region: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, solid: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-fill-weight-scale-region"><inline classes="std std-ref">fill_weight_scale_region</inline></reference>(region: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, weight_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-get-id-path"><inline classes="std std-ref">get_id_path</inline></reference>(from_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, to_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, allow_partial_path: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-get-point-path"><inline classes="std std-ref">get_point_path</inline></reference>(from_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, to_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, allow_partial_path: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-get-point-position"><inline classes="std std-ref">get_point_position</inline></reference>(id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-get-point-weight-scale"><inline classes="std std-ref">get_point_weight_scale</inline></reference>(id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-is-dirty"><inline classes="std std-ref">is_dirty</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-is-in-bounds"><inline classes="std std-ref">is_in_bounds</inline></reference>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-is-in-boundsv"><inline classes="std std-ref">is_in_boundsv</inline></reference>(id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-is-point-solid"><inline classes="std std-ref">is_point_solid</inline></reference>(id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-set-point-solid"><inline classes="std std-ref">set_point_solid</inline></reference>(id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, solid: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-set-point-weight-scale"><inline classes="std std-ref">set_point_weight_scale</inline></reference>(id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, weight_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">update</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-astargrid2d-heuristic"></target>
            <paragraph classes="classref-enumeration" ids="enum-astargrid2d-heuristic" names="enum_astargrid2d_heuristic">enum <strong>Heuristic</strong>: <reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-astargrid2d-constant-heuristic-euclidean"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-heuristic-euclidean" names="class_astargrid2d_constant_heuristic_euclidean"><reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference> <strong>HEURISTIC_EUCLIDEAN</strong> = <literal>0</literal></paragraph>
            <paragraph><reference name="欧几里德启发式算法" refuri="https://zh.wikipedia.org/wiki/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E8%B7%9D%E7%A6%BB">欧几里德启发式算法</reference>将被用于寻路，使用的公式如下：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">dx = abs(to_id.x - from_id.x)
dy = abs(to_id.y - from_id.y)
result = sqrt(dx * dx + dy * dy)</literal_block>
            <paragraph><strong>注意：</strong>这也是 <reference internal="True" refuri="class_astar3d#class-astar3d"><inline classes="std std-ref">AStar3D</inline></reference> 和 <reference internal="True" refuri="class_astar2d#class-astar2d"><inline classes="std std-ref">AStar2D</inline></reference> 默认使用的内部启发式算法（包括可能的 z 轴坐标）。</paragraph>
            <target refid="class-astargrid2d-constant-heuristic-manhattan"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-heuristic-manhattan" names="class_astargrid2d_constant_heuristic_manhattan"><reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference> <strong>HEURISTIC_MANHATTAN</strong> = <literal>1</literal></paragraph>
            <paragraph><reference name="曼哈顿启发式算法" refuri="https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%93%88%E9%A0%93%E8%B7%9D%E9%9B%A2">曼哈顿启发式算法</reference>将被用于寻路，使用的公式如下：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">dx = abs(to_id.x - from_id.x)
dy = abs(to_id.y - from_id.y)
result = dx + dy</literal_block>
            <paragraph><strong>注意：</strong>该启发式算法旨在与 4 边正交运动一起使用，4 边正交运动可通过将 <reference internal="True" refid="class-astargrid2d-property-diagonal-mode"><inline classes="std std-ref">diagonal_mode</inline></reference> 设置为 <reference internal="True" refid="class-astargrid2d-constant-diagonal-mode-never"><inline classes="std std-ref">DIAGONAL_MODE_NEVER</inline></reference> 来提供。</paragraph>
            <target refid="class-astargrid2d-constant-heuristic-octile"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-heuristic-octile" names="class_astargrid2d_constant_heuristic_octile"><reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference> <strong>HEURISTIC_OCTILE</strong> = <literal>2</literal></paragraph>
            <paragraph>Octile 启发式算法将被用于寻路，使用的公式如下：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">dx = abs(to_id.x - from_id.x)
dy = abs(to_id.y - from_id.y)
f = sqrt(2) - 1
result = (dx &lt; dy) ? f * dx + dy : f * dy + dx;</literal_block>
            <target refid="class-astargrid2d-constant-heuristic-chebyshev"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-heuristic-chebyshev" names="class_astargrid2d_constant_heuristic_chebyshev"><reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference> <strong>HEURISTIC_CHEBYSHEV</strong> = <literal>3</literal></paragraph>
            <paragraph><reference name="切比雪夫启发式算法" refuri="https://zh.wikipedia.org/wiki/%E5%88%87%E6%AF%94%E9%9B%AA%E5%A4%AB%E8%B7%9D%E7%A6%BB">切比雪夫启发式算法</reference>将被用于寻路，使用的公式如下：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">dx = abs(to_id.x - from_id.x)
dy = abs(to_id.y - from_id.y)
result = max(dx, dy)</literal_block>
            <target refid="class-astargrid2d-constant-heuristic-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-heuristic-max" names="class_astargrid2d_constant_heuristic_max"><reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference> <strong>HEURISTIC_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-astargrid2d-diagonalmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-astargrid2d-diagonalmode" names="enum_astargrid2d_diagonalmode">enum <strong>DiagonalMode</strong>: <reference internal="True" refid="enum-astargrid2d-diagonalmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-astargrid2d-constant-diagonal-mode-always"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-diagonal-mode-always" names="class_astargrid2d_constant_diagonal_mode_always"><reference internal="True" refid="enum-astargrid2d-diagonalmode"><inline classes="std std-ref">DiagonalMode</inline></reference> <strong>DIAGONAL_MODE_ALWAYS</strong> = <literal>0</literal></paragraph>
            <paragraph>该寻路算法将忽略目标单元格周围的实体邻居，并允许沿对角线通过。</paragraph>
            <target refid="class-astargrid2d-constant-diagonal-mode-never"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-diagonal-mode-never" names="class_astargrid2d_constant_diagonal_mode_never"><reference internal="True" refid="enum-astargrid2d-diagonalmode"><inline classes="std std-ref">DiagonalMode</inline></reference> <strong>DIAGONAL_MODE_NEVER</strong> = <literal>1</literal></paragraph>
            <paragraph>该寻路算法将忽略所有对角线，并且路径始终是正交的。</paragraph>
            <target refid="class-astargrid2d-constant-diagonal-mode-at-least-one-walkable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-diagonal-mode-at-least-one-walkable" names="class_astargrid2d_constant_diagonal_mode_at_least_one_walkable"><reference internal="True" refid="enum-astargrid2d-diagonalmode"><inline classes="std std-ref">DiagonalMode</inline></reference> <strong>DIAGONAL_MODE_AT_LEAST_ONE_WALKABLE</strong> = <literal>2</literal></paragraph>
            <paragraph>如果在特定路径段的相邻单元格周围放置了至少两个障碍物，则该寻路算法将避免使用对角线。</paragraph>
            <target refid="class-astargrid2d-constant-diagonal-mode-only-if-no-obstacles"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-diagonal-mode-only-if-no-obstacles" names="class_astargrid2d_constant_diagonal_mode_only_if_no_obstacles"><reference internal="True" refid="enum-astargrid2d-diagonalmode"><inline classes="std std-ref">DiagonalMode</inline></reference> <strong>DIAGONAL_MODE_ONLY_IF_NO_OBSTACLES</strong> = <literal>3</literal></paragraph>
            <paragraph>如果在特定路径段的相邻单元格周围放置了任意障碍物，则该寻路算法将避免使用对角线。</paragraph>
            <target refid="class-astargrid2d-constant-diagonal-mode-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-diagonal-mode-max" names="class_astargrid2d_constant_diagonal_mode_max"><reference internal="True" refid="enum-astargrid2d-diagonalmode"><inline classes="std std-ref">DiagonalMode</inline></reference> <strong>DIAGONAL_MODE_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-astargrid2d-diagonalmode"><inline classes="std std-ref">DiagonalMode</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-astargrid2d-cellshape"></target>
            <paragraph classes="classref-enumeration" ids="enum-astargrid2d-cellshape" names="enum_astargrid2d_cellshape">enum <strong>CellShape</strong>: <reference internal="True" refid="enum-astargrid2d-cellshape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-astargrid2d-constant-cell-shape-square"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-cell-shape-square" names="class_astargrid2d_constant_cell_shape_square"><reference internal="True" refid="enum-astargrid2d-cellshape"><inline classes="std std-ref">CellShape</inline></reference> <strong>CELL_SHAPE_SQUARE</strong> = <literal>0</literal></paragraph>
            <paragraph>矩形单元格形状。</paragraph>
            <target refid="class-astargrid2d-constant-cell-shape-isometric-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-cell-shape-isometric-right" names="class_astargrid2d_constant_cell_shape_isometric_right"><reference internal="True" refid="enum-astargrid2d-cellshape"><inline classes="std std-ref">CellShape</inline></reference> <strong>CELL_SHAPE_ISOMETRIC_RIGHT</strong> = <literal>1</literal></paragraph>
            <paragraph>菱形单元格形状（用于等轴外观）。单元格坐标布局，其中水平轴朝向右上方，垂直轴朝向右下方。</paragraph>
            <target refid="class-astargrid2d-constant-cell-shape-isometric-down"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-cell-shape-isometric-down" names="class_astargrid2d_constant_cell_shape_isometric_down"><reference internal="True" refid="enum-astargrid2d-cellshape"><inline classes="std std-ref">CellShape</inline></reference> <strong>CELL_SHAPE_ISOMETRIC_DOWN</strong> = <literal>2</literal></paragraph>
            <paragraph>菱形单元格形状（用于等轴外观）。单元格坐标布局，其中水平轴朝向右下方，垂直轴朝向左下方。</paragraph>
            <target refid="class-astargrid2d-constant-cell-shape-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-astargrid2d-constant-cell-shape-max" names="class_astargrid2d_constant_cell_shape_max"><reference internal="True" refid="enum-astargrid2d-cellshape"><inline classes="std std-ref">CellShape</inline></reference> <strong>CELL_SHAPE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-astargrid2d-cellshape"><inline classes="std std-ref">CellShape</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-astargrid2d-property-cell-shape"></target>
            <paragraph classes="classref-property" ids="class-astargrid2d-property-cell-shape" names="class_astargrid2d_property_cell_shape"><reference internal="True" refid="enum-astargrid2d-cellshape"><inline classes="std std-ref">CellShape</inline></reference> <strong>cell_shape</strong> = <literal>0</literal> <reference internal="True" refid="class-astargrid2d-property-cell-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cell_shape</strong>(value: <reference internal="True" refid="enum-astargrid2d-cellshape"><inline classes="std std-ref">CellShape</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-astargrid2d-cellshape"><inline classes="std std-ref">CellShape</inline></reference> <strong>get_cell_shape</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>单元格形状。影响位置在栅格中的放置方式。如果发生变化，需要在查找下一条路径之前调用 <reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">update</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-property-cell-size"></target>
            <paragraph classes="classref-property" ids="class-astargrid2d-property-cell-size" names="class_astargrid2d_property_cell_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>cell_size</strong> = <literal>Vector2(1, 1)</literal> <reference internal="True" refid="class-astargrid2d-property-cell-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cell_size</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_cell_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要用于计算由 <reference internal="True" refid="class-astargrid2d-method-get-point-path"><inline classes="std std-ref">get_point_path</inline></reference> 返回的结果点位置的点单元的大小。如果更改了这个值，在查找下一个路径之前需要调用 <reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">update</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-property-default-compute-heuristic"></target>
            <paragraph classes="classref-property" ids="class-astargrid2d-property-default-compute-heuristic" names="class_astargrid2d_property_default_compute_heuristic"><reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference> <strong>default_compute_heuristic</strong> = <literal>0</literal> <reference internal="True" refid="class-astargrid2d-property-default-compute-heuristic"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_compute_heuristic</strong>(value: <reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference> <strong>get_default_compute_heuristic</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>默认 <reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference>，用于在没有覆盖 <reference internal="True" refid="class-astargrid2d-private-method-compute-cost"><inline classes="std std-ref">_compute_cost</inline></reference> 时计算两点之间的消耗。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-property-default-estimate-heuristic"></target>
            <paragraph classes="classref-property" ids="class-astargrid2d-property-default-estimate-heuristic" names="class_astargrid2d_property_default_estimate_heuristic"><reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference> <strong>default_estimate_heuristic</strong> = <literal>0</literal> <reference internal="True" refid="class-astargrid2d-property-default-estimate-heuristic"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_estimate_heuristic</strong>(value: <reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference> <strong>get_default_estimate_heuristic</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>默认 <reference internal="True" refid="enum-astargrid2d-heuristic"><inline classes="std std-ref">Heuristic</inline></reference>，用于在没有覆盖 <reference internal="True" refid="class-astargrid2d-private-method-estimate-cost"><inline classes="std std-ref">_estimate_cost</inline></reference> 时计算该点和终点之间的消耗。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-property-diagonal-mode"></target>
            <paragraph classes="classref-property" ids="class-astargrid2d-property-diagonal-mode" names="class_astargrid2d_property_diagonal_mode"><reference internal="True" refid="enum-astargrid2d-diagonalmode"><inline classes="std std-ref">DiagonalMode</inline></reference> <strong>diagonal_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-astargrid2d-property-diagonal-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_diagonal_mode</strong>(value: <reference internal="True" refid="enum-astargrid2d-diagonalmode"><inline classes="std std-ref">DiagonalMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-astargrid2d-diagonalmode"><inline classes="std std-ref">DiagonalMode</inline></reference> <strong>get_diagonal_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>特定的 <reference internal="True" refid="enum-astargrid2d-diagonalmode"><inline classes="std std-ref">DiagonalMode</inline></reference>，会强制路径避免或接受特定的对角线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-property-jumping-enabled"></target>
            <paragraph classes="classref-property" ids="class-astargrid2d-property-jumping-enabled" names="class_astargrid2d_property_jumping_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>jumping_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-astargrid2d-property-jumping-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_jumping_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_jumping_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>启用或禁用跳跃，以跳过中间点并加快搜索算法的速度。</paragraph>
            <paragraph><strong>注意：</strong>目前，打开它会在寻路过程中忽略权重缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-property-offset"></target>
            <paragraph classes="classref-property" ids="class-astargrid2d-property-offset" names="class_astargrid2d_property_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>offset</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-astargrid2d-property-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offset</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>栅格的偏移量，将被应用以计算 <reference internal="True" refid="class-astargrid2d-method-get-point-path"><inline classes="std std-ref">get_point_path</inline></reference> 返回的结果点的位置。如果发生变化，需要在查找下一条路径之前调用 <reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">update</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-property-region"></target>
            <paragraph classes="classref-property" ids="class-astargrid2d-property-region" names="class_astargrid2d_property_region"><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> <strong>region</strong> = <literal>Rect2i(0, 0, 0, 0)</literal> <reference internal="True" refid="class-astargrid2d-property-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_region</strong>(value: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> <strong>get_region</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>栅格上用来寻路的区域。如果发生变化，需要在查找下一条路径之前调用 <reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">update</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-property-size"></target>
            <paragraph classes="classref-property" ids="class-astargrid2d-property-size" names="class_astargrid2d_property_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>size</strong> = <literal>Vector2i(0, 0)</literal> <reference internal="True" refid="class-astargrid2d-property-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_size</strong>(value: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refid="class-astargrid2d-property-region"><inline classes="std std-ref">region</inline></reference> instead.</paragraph>
            <paragraph>栅格的大小（每个轴上大小为 <reference internal="True" refid="class-astargrid2d-property-cell-size"><inline classes="std std-ref">cell_size</inline></reference> 的单元格数）。如果发生变化，需要在查找下一条路径之前调用 <reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">update</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-astargrid2d-private-method-compute-cost"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-private-method-compute-cost" names="class_astargrid2d_private_method__compute_cost"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_compute_cost</strong>(from_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, to_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astargrid2d-private-method-compute-cost"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>计算两个连接点之间的成本时调用。</paragraph>
            <paragraph>请注意，这个函数在默认的 <strong>AStarGrid2D</strong> 类中是隐藏的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-private-method-estimate-cost"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-private-method-estimate-cost" names="class_astargrid2d_private_method__estimate_cost"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_estimate_cost</strong>(from_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, to_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astargrid2d-private-method-estimate-cost"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>估算某个点和路径终点之间的成本时调用。</paragraph>
            <paragraph>请注意，这个函数在默认的 <strong>AStarGrid2D</strong> 类中是隐藏的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-clear"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-clear" names="class_astargrid2d_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-astargrid2d-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清空网格并将 <reference internal="True" refid="class-astargrid2d-property-region"><inline classes="std std-ref">region</inline></reference> 设置为 <literal>Rect2i(0, 0, 0, 0)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-fill-solid-region"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-fill-solid-region" names="class_astargrid2d_method_fill_solid_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fill_solid_region</strong>(region: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, solid: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-astargrid2d-method-fill-solid-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用指定的值填充网格上 <literal>region</literal> 区域的实心标志。</paragraph>
            <paragraph><strong>注意：</strong>调用该函数后不需要调用 <reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">update</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-fill-weight-scale-region"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-fill-weight-scale-region" names="class_astargrid2d_method_fill_weight_scale_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fill_weight_scale_region</strong>(region: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, weight_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-astargrid2d-method-fill-weight-scale-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用指定的值填充网格上 <literal>region</literal> 区域的权重缩放。</paragraph>
            <paragraph><strong>注意：</strong>调用该函数后不需要调用 <reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">update</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-get-id-path"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-get-id-path" names="class_astargrid2d_method_get_id_path"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>] <strong>get_id_path</strong>(from_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, to_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, allow_partial_path: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-astargrid2d-method-get-id-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个数组，其中包含 AStar2D 在给定点之间找到的路径中的点。数组从路径的起点到终点进行排序。</paragraph>
            <paragraph>如果没有通往目标的有效路径并且 <literal>allow_partial_path</literal> 为 <literal>true</literal>，则会返回通往距离目标最近的可达点的路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-get-point-path"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-get-point-path" names="class_astargrid2d_method_get_point_path"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>get_point_path</strong>(from_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, to_id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, allow_partial_path: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-astargrid2d-method-get-point-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个数组，其中包含 <strong>AStarGrid2D</strong> 在给定点之间找到的路径上的点。数组从路径的起点到终点排序。</paragraph>
            <paragraph>如果没有通往目标的有效路径并且 <literal>allow_partial_path</literal> 为 <literal>true</literal>，则会返回通往距离目标最近的可达点的路径。</paragraph>
            <paragraph><strong>注意：</strong>该方法不是线程安全的。如果从 <reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference> 中调用它，它将返回一个空的 <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> 并打印一条错误消息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-get-point-position"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-get-point-position" names="class_astargrid2d_method_get_point_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_point_position</strong>(id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astargrid2d-method-get-point-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与给定 <literal>id</literal> 相关联的点的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-get-point-weight-scale"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-get-point-weight-scale" names="class_astargrid2d_method_get_point_weight_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_point_weight_scale</strong>(id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astargrid2d-method-get-point-weight-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与给定 <literal>id</literal> 关联的点的权重比例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-is-dirty"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-is-dirty" names="class_astargrid2d_method_is_dirty"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_dirty</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astargrid2d-method-is-dirty"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>表示网格参数发生改变，需要调用 <reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">update</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-is-in-bounds"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-is-in-bounds" names="class_astargrid2d_method_is_in_bounds"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_in_bounds</strong>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astargrid2d-method-is-in-bounds"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>x</literal> 和 <literal>y</literal> 是有效的网格坐标（ID），即如果它位于 <reference internal="True" refid="class-astargrid2d-property-region"><inline classes="std std-ref">region</inline></reference> 内部，则返回 <literal>true</literal>。相当于 <literal>region.has_point(Vector2i(x, y))</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-is-in-boundsv"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-is-in-boundsv" names="class_astargrid2d_method_is_in_boundsv"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_in_boundsv</strong>(id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astargrid2d-method-is-in-boundsv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>id</literal> 向量是有效的网格坐标，即如果它位于 <reference internal="True" refid="class-astargrid2d-property-region"><inline classes="std std-ref">region</inline></reference> 内部，则返回 <literal>true</literal>。相当于 <literal>region.has_point(id)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-is-point-solid"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-is-point-solid" names="class_astargrid2d_method_is_point_solid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_point_solid</strong>(id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-astargrid2d-method-is-point-solid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果寻路时会禁用某个点，则返回 <literal>true</literal>。默认情况下，所有点均处于启用状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-set-point-solid"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-set-point-solid" names="class_astargrid2d_method_set_point_solid"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_solid</strong>(id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, solid: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-astargrid2d-method-set-point-solid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>禁用或启用指定的寻路点。用于制造障碍物。默认情况下，启用所有点。</paragraph>
            <paragraph><strong>注意：</strong>调用该函数后不需要调用 <reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">update</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-set-point-weight-scale"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-set-point-weight-scale" names="class_astargrid2d_method_set_point_weight_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_weight_scale</strong>(id: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, weight_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-astargrid2d-method-set-point-weight-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为具有给定 <literal>id</literal> 的点设置 <literal>weight_scale</literal>。在确定从相邻点到该点穿越路段的总成本时，<literal>weight_scale</literal> 要乘以 <reference internal="True" refid="class-astargrid2d-private-method-compute-cost"><inline classes="std std-ref">_compute_cost</inline></reference> 的结果。</paragraph>
            <paragraph><strong>注意：</strong>调用该函数后不需要调用 <reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">update</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-astargrid2d-method-update"></target>
            <paragraph classes="classref-method" ids="class-astargrid2d-method-update" names="class_astargrid2d_method_update"><abbreviation explanation="无返回值。">void</abbreviation> <strong>update</strong>() <reference internal="True" refid="class-astargrid2d-method-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据参数更新网格的内部状态，以准备搜索路径。如果更改了 <reference internal="True" refid="class-astargrid2d-property-region"><inline classes="std std-ref">region</inline></reference>、<reference internal="True" refid="class-astargrid2d-property-cell-size"><inline classes="std std-ref">cell_size</inline></reference> 或 <reference internal="True" refid="class-astargrid2d-property-offset"><inline classes="std std-ref">offset</inline></reference> 等参数就需要调用它。如果是这种情况，则 <reference internal="True" refid="class-astargrid2d-method-is-dirty"><inline classes="std std-ref">is_dirty</inline></reference> 将返回 <literal>true</literal>，需要调用此方法。</paragraph>
            <paragraph><strong>注意：</strong>会清空所有点的数据（坚固以及权重比例）。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
