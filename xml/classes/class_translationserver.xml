<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_translationserver.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TranslationServer.xml.</comment>
    <target refid="class-translationserver"></target>
    <section ids="translationserver class-translationserver" names="translationserver class_translationserver">
        <title>TranslationServer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>负责语言翻译的服务器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>管理所有语言翻译的服务器。可以向其中添加翻译，也可以从中移除翻译。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/i18n/internationalizing_games"><inline classes="doc">将游戏国际化</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/i18n/locales"><inline classes="doc">区域设置</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="96"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-property-pseudolocalization-enabled"><inline classes="std std-ref">pseudolocalization_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="269"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-add-translation"><inline classes="std std-ref">add_translation</inline></reference>(translation: <reference internal="True" refuri="class_translation#class-translation"><inline classes="std std-ref">Translation</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-compare-locales"><inline classes="std std-ref">compare_locales</inline></reference>(locale_a: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, locale_b: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-get-all-countries"><inline classes="std std-ref">get_all_countries</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-get-all-languages"><inline classes="std std-ref">get_all_languages</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-get-all-scripts"><inline classes="std std-ref">get_all_scripts</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-get-country-name"><inline classes="std std-ref">get_country_name</inline></reference>(country: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-get-language-name"><inline classes="std std-ref">get_language_name</inline></reference>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-get-loaded-locales"><inline classes="std std-ref">get_loaded_locales</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-get-locale"><inline classes="std std-ref">get_locale</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-get-locale-name"><inline classes="std std-ref">get_locale_name</inline></reference>(locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-get-script-name"><inline classes="std std-ref">get_script_name</inline></reference>(script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-get-tool-locale"><inline classes="std std-ref">get_tool_locale</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_translation#class-translation"><inline classes="std std-ref">Translation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-get-translation-object"><inline classes="std std-ref">get_translation_object</inline></reference>(locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-pseudolocalize"><inline classes="std std-ref">pseudolocalize</inline></reference>(message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-reload-pseudolocalization"><inline classes="std std-ref">reload_pseudolocalization</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-remove-translation"><inline classes="std std-ref">remove_translation</inline></reference>(translation: <reference internal="True" refuri="class_translation#class-translation"><inline classes="std std-ref">Translation</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-set-locale"><inline classes="std std-ref">set_locale</inline></reference>(locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-standardize-locale"><inline classes="std std-ref">standardize_locale</inline></reference>(locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-translate"><inline classes="std std-ref">translate</inline></reference>(message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-translationserver-method-translate-plural"><inline classes="std std-ref">translate_plural</inline></reference>(message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, plural_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, n: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-translationserver-property-pseudolocalization-enabled"></target>
            <paragraph classes="classref-property" ids="class-translationserver-property-pseudolocalization-enabled" names="class_translationserver_property_pseudolocalization_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>pseudolocalization_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-translationserver-property-pseudolocalization-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pseudolocalization_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_pseudolocalization_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用伪本地化。有关详细信息，请参阅 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-internationalization-pseudolocalization-use-pseudolocalization"><inline classes="std std-ref">ProjectSettings.internationalization/pseudolocalization/use_pseudolocalization</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-translationserver-method-add-translation"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-add-translation" names="class_translationserver_method_add_translation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_translation</strong>(translation: <reference internal="True" refuri="class_translation#class-translation"><inline classes="std std-ref">Translation</inline></reference>) <reference internal="True" refid="class-translationserver-method-add-translation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加一个 <reference internal="True" refuri="class_translation#class-translation"><inline classes="std std-ref">Translation</inline></reference> 资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-clear"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-clear" names="class_translationserver_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-translationserver-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除服务器中的所有翻译。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-compare-locales"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-compare-locales" names="class_translationserver_method_compare_locales"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>compare_locales</strong>(locale_a: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, locale_b: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-compare-locales"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>比较两个区域设置，返回 <literal>0</literal>（不匹配）和 <literal>10</literal>（完全匹配）之间的相似度得分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-get-all-countries"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-get-all-countries" names="class_translationserver_method_get_all_countries"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_all_countries</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-get-all-countries"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回已知地区代码的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-get-all-languages"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-get-all-languages" names="class_translationserver_method_get_all_languages"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_all_languages</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-get-all-languages"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回已知语言代码的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-get-all-scripts"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-get-all-scripts" names="class_translationserver_method_get_all_scripts"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_all_scripts</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-get-all-scripts"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回已知文字代码的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-get-country-name"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-get-country-name" names="class_translationserver_method_get_country_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_country_name</strong>(country: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-get-country-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回地区代码 <literal>country</literal> 的可读地区名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-get-language-name"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-get-language-name" names="class_translationserver_method_get_language_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_language_name</strong>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-get-language-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回语言代码 <literal>language</literal> 的可读语言名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-get-loaded-locales"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-get-loaded-locales" names="class_translationserver_method_get_loaded_locales"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_loaded_locales</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-get-loaded-locales"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回项目中所有已加载的区域设置的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-get-locale"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-get-locale" names="class_translationserver_method_get_locale"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_locale</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-get-locale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回项目的当前区域设置。</paragraph>
            <paragraph>查询用户系统的区域设置请参阅 <reference internal="True" refuri="class_os#class-os-method-get-locale"><inline classes="std std-ref">OS.get_locale</inline></reference> 和 <reference internal="True" refuri="class_os#class-os-method-get-locale-language"><inline classes="std std-ref">OS.get_locale_language</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-get-locale-name"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-get-locale-name" names="class_translationserver_method_get_locale_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_locale_name</strong>(locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-get-locale-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回区域设置的语言及其变体。例如，<literal>"en_US"</literal> 将返回 <literal>"English (United States)"</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-get-script-name"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-get-script-name" names="class_translationserver_method_get_script_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_script_name</strong>(script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-get-script-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文字代码 <literal>script</literal> 的可读文字名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-get-tool-locale"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-get-tool-locale" names="class_translationserver_method_get_tool_locale"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_tool_locale</strong>() <reference internal="True" refid="class-translationserver-method-get-tool-locale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回编辑器的当前区域设置。</paragraph>
            <paragraph><strong>注意：</strong>从导出后的项目中调用时，返回值与 <reference internal="True" refid="class-translationserver-method-get-locale"><inline classes="std std-ref">get_locale</inline></reference> 相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-get-translation-object"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-get-translation-object" names="class_translationserver_method_get_translation_object"><reference internal="True" refuri="class_translation#class-translation"><inline classes="std std-ref">Translation</inline></reference> <strong>get_translation_object</strong>(locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-translationserver-method-get-translation-object"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据传入的 <literal>locale</literal> 返回 <reference internal="True" refuri="class_translation#class-translation"><inline classes="std std-ref">Translation</inline></reference> 实例。</paragraph>
            <paragraph>如果没有与 <literal>locale</literal> 匹配的 <reference internal="True" refuri="class_translation#class-translation"><inline classes="std std-ref">Translation</inline></reference> 实例，则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-pseudolocalize"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-pseudolocalize" names="class_translationserver_method_pseudolocalize"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>pseudolocalize</strong>(message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-pseudolocalize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据传入的 <literal>message</literal> 返回伪本地化字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-reload-pseudolocalization"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-reload-pseudolocalization" names="class_translationserver_method_reload_pseudolocalization"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reload_pseudolocalization</strong>() <reference internal="True" refid="class-translationserver-method-reload-pseudolocalization"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>重新解析伪本地化选项，并重新加载翻译。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-remove-translation"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-remove-translation" names="class_translationserver_method_remove_translation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_translation</strong>(translation: <reference internal="True" refuri="class_translation#class-translation"><inline classes="std std-ref">Translation</inline></reference>) <reference internal="True" refid="class-translationserver-method-remove-translation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从服务器中删除给定的翻译。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-set-locale"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-set-locale" names="class_translationserver_method_set_locale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_locale</strong>(locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-translationserver-method-set-locale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置项目的区域设置。<literal>locale</literal> 字符串将被标准化，以匹配已知的区域设置（例如 <literal>en-US</literal> 将与 <literal>en_US</literal> 匹配）。</paragraph>
            <paragraph>如果已经为新区域设置预先加载了翻译，则它们将被应用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-standardize-locale"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-standardize-locale" names="class_translationserver_method_standardize_locale"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>standardize_locale</strong>(locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-standardize-locale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回标准化的 <literal>locale</literal> 字符串，以匹配已知的区域设置（例如 <literal>en-US</literal> 将与 <literal>en_US</literal> 匹配）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-translate"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-translate" names="class_translationserver_method_translate"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>translate</strong>(message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-translate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定消息（键）和上下文的翻译，使用当前区域设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-translationserver-method-translate-plural"></target>
            <paragraph classes="classref-method" ids="class-translationserver-method-translate-plural" names="class_translationserver_method_translate_plural"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>translate_plural</strong>(message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, plural_message: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, n: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, context: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-translationserver-method-translate-plural"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定消息（键）、复数消息和上下文的翻译，使用当前区域设置。</paragraph>
            <paragraph>数字 <literal>n</literal> 是复数对象的数量。翻译系统会根据这个数字来针对所选语言获取正确的复数形式。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
