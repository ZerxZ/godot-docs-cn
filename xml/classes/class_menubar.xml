<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_menubar.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/MenuBar.xml.</comment>
    <target refid="class-menubar"></target>
    <section ids="menubar class-menubar" names="menubar class_menubar">
        <title>MenuBar</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>水平菜单栏，会为每个 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> 类型的子节点创建一个 <reference internal="True" refuri="class_menubutton#class-menubutton"><inline classes="std std-ref">MenuButton</inline></reference>。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>水平菜单栏，会为每个 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> 类型的子节点创建一个 <reference internal="True" refuri="class_menubutton#class-menubutton"><inline classes="std std-ref">MenuButton</inline></reference>。通过添加 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> 节点来创建新的菜单选项。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="50"></colspec>
                    <colspec colwidth="70"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-property-flat"><inline classes="std std-ref">flat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-property-language"><inline classes="std std-ref">language</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-property-prefer-global-menu"><inline classes="std std-ref">prefer_global_menu</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-property-start-index"><inline classes="std std-ref">start_index</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-property-switch-on-hover"><inline classes="std std-ref">switch_on_hover</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-property-text-direction"><inline classes="std std-ref">text_direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="139"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-method-get-menu-count"><inline classes="std std-ref">get_menu_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-method-get-menu-popup"><inline classes="std std-ref">get_menu_popup</inline></reference>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-method-get-menu-title"><inline classes="std std-ref">get_menu_title</inline></reference>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-method-get-menu-tooltip"><inline classes="std std-ref">get_menu_tooltip</inline></reference>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-method-is-menu-disabled"><inline classes="std std-ref">is_menu_disabled</inline></reference>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-method-is-menu-hidden"><inline classes="std std-ref">is_menu_hidden</inline></reference>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-method-is-native-menu"><inline classes="std std-ref">is_native_menu</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-method-set-disable-shortcuts"><inline classes="std std-ref">set_disable_shortcuts</inline></reference>(disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-method-set-menu-disabled"><inline classes="std std-ref">set_menu_disabled</inline></reference>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-method-set-menu-hidden"><inline classes="std std-ref">set_menu_hidden</inline></reference>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-method-set-menu-title"><inline classes="std std-ref">set_menu_title</inline></reference>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-method-set-menu-tooltip"><inline classes="std std-ref">set_menu_tooltip</inline></reference>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="主题属性">
            <title>主题属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="85"></colspec>
                    <colspec colwidth="37"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-color-font-color"><inline classes="std std-ref">font_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-color-font-disabled-color"><inline classes="std std-ref">font_disabled_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 0.5)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-color-font-focus-color"><inline classes="std std-ref">font_focus_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.95, 0.95, 0.95, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-color-font-hover-color"><inline classes="std std-ref">font_hover_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.95, 0.95, 0.95, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-color-font-hover-pressed-color"><inline classes="std std-ref">font_hover_pressed_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-color-font-outline-color"><inline classes="std std-ref">font_outline_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-color-font-pressed-color"><inline classes="std std-ref">font_pressed_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-constant-h-separation"><inline classes="std std-ref">h_separation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-font-font"><inline classes="std std-ref">font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-font-size-font-size"><inline classes="std std-ref">font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-style-disabled"><inline classes="std std-ref">disabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-style-disabled-mirrored"><inline classes="std std-ref">disabled_mirrored</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-style-hover"><inline classes="std std-ref">hover</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-style-hover-mirrored"><inline classes="std std-ref">hover_mirrored</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-style-hover-pressed"><inline classes="std std-ref">hover_pressed</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-style-hover-pressed-mirrored"><inline classes="std std-ref">hover_pressed_mirrored</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-style-normal"><inline classes="std std-ref">normal</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-style-normal-mirrored"><inline classes="std std-ref">normal_mirrored</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-style-pressed"><inline classes="std std-ref">pressed</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-menubar-theme-style-pressed-mirrored"><inline classes="std std-ref">pressed_mirrored</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-menubar-property-flat"></target>
            <paragraph classes="classref-property" ids="class-menubar-property-flat" names="class_menubar_property_flat"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>flat</strong> = <literal>false</literal> <reference internal="True" refid="class-menubar-property-flat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flat</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_flat</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>扁平的 <strong>MenuBar</strong>，不显示项目装饰。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-property-language"></target>
            <paragraph classes="classref-property" ids="class-menubar-property-language" names="class_menubar_property_language"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>language</strong> = <literal>""</literal> <reference internal="True" refid="class-menubar-property-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_language</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_language</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>语言代码，用于断行和文本塑形算法，如果留空则使用当前区域设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-property-prefer-global-menu"></target>
            <paragraph classes="classref-property" ids="class-menubar-property-prefer-global-menu" names="class_menubar_property_prefer_global_menu"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>prefer_global_menu</strong> = <literal>true</literal> <reference internal="True" refid="class-menubar-property-prefer-global-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_prefer_global_menu</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_prefer_global_menu</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 <strong>MenuBar</strong> 会在支持系统全局菜单时使用系统全局菜单。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-property-start-index"></target>
            <paragraph classes="classref-property" ids="class-menubar-property-start-index" names="class_menubar_property_start_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>start_index</strong> = <literal>-1</literal> <reference internal="True" refid="class-menubar-property-start-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_start_index</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_start_index</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在全局菜单中插入第一个 <strong>MenuBar</strong> 项目的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-property-switch-on-hover"></target>
            <paragraph classes="classref-property" ids="class-menubar-property-switch-on-hover" names="class_menubar_property_switch_on_hover"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>switch_on_hover</strong> = <literal>true</literal> <reference internal="True" refid="class-menubar-property-switch-on-hover"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_switch_on_hover</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_switch_on_hover</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，当光标悬停在菜单项上方时，将关闭当前的 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> 并打开另一个。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-property-text-direction"></target>
            <paragraph classes="classref-property" ids="class-menubar-property-text-direction" names="class_menubar_property_text_direction"><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>text_direction</strong> = <literal>0</literal> <reference internal="True" refid="class-menubar-property-text-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_direction</strong>(value: <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>get_text_direction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>基础文本书写方向。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-menubar-method-get-menu-count"></target>
            <paragraph classes="classref-method" ids="class-menubar-method-get-menu-count" names="class_menubar_method_get_menu_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_menu_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-menubar-method-get-menu-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回菜单项的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-method-get-menu-popup"></target>
            <paragraph classes="classref-method" ids="class-menubar-method-get-menu-popup" names="class_menubar_method_get_menu_popup"><reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> <strong>get_menu_popup</strong>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-menubar-method-get-menu-popup"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与菜单项关联的 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-method-get-menu-title"></target>
            <paragraph classes="classref-method" ids="class-menubar-method-get-menu-title" names="class_menubar_method_get_menu_title"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_menu_title</strong>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-menubar-method-get-menu-title"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回菜单项的标题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-method-get-menu-tooltip"></target>
            <paragraph classes="classref-method" ids="class-menubar-method-get-menu-tooltip" names="class_menubar_method_get_menu_tooltip"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_menu_tooltip</strong>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-menubar-method-get-menu-tooltip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回菜单项的工具提示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-method-is-menu-disabled"></target>
            <paragraph classes="classref-method" ids="class-menubar-method-is-menu-disabled" names="class_menubar_method_is_menu_disabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_menu_disabled</strong>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-menubar-method-is-menu-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果菜单项为禁用状态，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-method-is-menu-hidden"></target>
            <paragraph classes="classref-method" ids="class-menubar-method-is-menu-hidden" names="class_menubar_method_is_menu_hidden"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_menu_hidden</strong>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-menubar-method-is-menu-hidden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果菜单项为隐藏状态，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-method-is-native-menu"></target>
            <paragraph classes="classref-method" ids="class-menubar-method-is-native-menu" names="class_menubar_method_is_native_menu"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_native_menu</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-menubar-method-is-native-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果支持系统全局菜单，而且该 <strong>MenuBar</strong> 使用全局菜单，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-method-set-disable-shortcuts"></target>
            <paragraph classes="classref-method" ids="class-menubar-method-set-disable-shortcuts" names="class_menubar_method_set_disable_shortcuts"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_disable_shortcuts</strong>(disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-menubar-method-set-disable-shortcuts"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，快捷方式将被禁用，无法用于触发按钮。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-method-set-menu-disabled"></target>
            <paragraph classes="classref-method" ids="class-menubar-method-set-menu-disabled" names="class_menubar_method_set_menu_disabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_menu_disabled</strong>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-menubar-method-set-menu-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <literal>true</literal> 时，菜单项为禁用状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-method-set-menu-hidden"></target>
            <paragraph classes="classref-method" ids="class-menubar-method-set-menu-hidden" names="class_menubar_method_set_menu_hidden"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_menu_hidden</strong>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-menubar-method-set-menu-hidden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <literal>true</literal> 时，菜单项为隐藏状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-method-set-menu-title"></target>
            <paragraph classes="classref-method" ids="class-menubar-method-set-menu-title" names="class_menubar_method_set_menu_title"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_menu_title</strong>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-menubar-method-set-menu-title"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置菜单项的标题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-method-set-menu-tooltip"></target>
            <paragraph classes="classref-method" ids="class-menubar-method-set-menu-tooltip" names="class_menubar_method_set_menu_tooltip"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_menu_tooltip</strong>(menu: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-menubar-method-set-menu-tooltip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置菜单项的工具提示。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="主题属性说明">
            <title>主题属性说明</title>
            <target refid="class-menubar-theme-color-font-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-color-font-color" names="class_menubar_theme_color_font_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_color</strong> = <literal>Color(0.875, 0.875, 0.875, 1)</literal> <reference internal="True" refid="class-menubar-theme-color-font-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项的默认文字 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-color-font-disabled-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-color-font-disabled-color" names="class_menubar_theme_color_font_disabled_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_disabled_color</strong> = <literal>Color(0.875, 0.875, 0.875, 0.5)</literal> <reference internal="True" refid="class-menubar-theme-color-font-disabled-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于禁用状态时使用的文字 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-color-font-focus-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-color-font-focus-color" names="class_menubar_theme_color_font_focus_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_focus_color</strong> = <literal>Color(0.95, 0.95, 0.95, 1)</literal> <reference internal="True" refid="class-menubar-theme-color-font-focus-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于聚焦状态时使用的文字 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。只替换按钮的正常文本颜色。禁用、悬停和按下状态优先于这个颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-color-font-hover-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-color-font-hover-color" names="class_menubar_theme_color_font_hover_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_hover_color</strong> = <literal>Color(0.95, 0.95, 0.95, 1)</literal> <reference internal="True" refid="class-menubar-theme-color-font-hover-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于悬停状态时使用的文字 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-color-font-hover-pressed-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-color-font-hover-pressed-color" names="class_menubar_theme_color_font_hover_pressed_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_hover_pressed_color</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-menubar-theme-color-font-hover-pressed-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于悬停且按下状态时使用的文字 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-color-font-outline-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-color-font-outline-color" names="class_menubar_theme_color_font_outline_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_outline_color</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-menubar-theme-color-font-outline-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项文本轮廓的色调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-color-font-pressed-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-color-font-pressed-color" names="class_menubar_theme_color_font_pressed_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_pressed_color</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-menubar-theme-color-font-pressed-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于按下状态时使用的文字 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-constant-h-separation"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-constant-h-separation" names="class_menubar_theme_constant_h_separation"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>h_separation</strong> = <literal>4</literal> <reference internal="True" refid="class-menubar-theme-constant-h-separation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项之间的水平距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-constant-outline-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-constant-outline-size" names="class_menubar_theme_constant_outline_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>outline_size</strong> = <literal>0</literal> <reference internal="True" refid="class-menubar-theme-constant-outline-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文字轮廓的大小。</paragraph>
            <paragraph><strong>注意：</strong>如果使用启用了 <reference internal="True" refuri="class_fontfile#class-fontfile-property-multichannel-signed-distance-field"><inline classes="std std-ref">FontFile.multichannel_signed_distance_field</inline></reference> 的字体，其 <reference internal="True" refuri="class_fontfile#class-fontfile-property-msdf-pixel-range"><inline classes="std std-ref">FontFile.msdf_pixel_range</inline></reference> 必须至少设置为 <reference internal="True" refid="class-menubar-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference> 的<emphasis>两倍</emphasis>，轮廓渲染才能看起来正确。否则，轮廓可能会比预期的更早被切断。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-font-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-font-font" names="class_menubar_theme_font_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>font</strong> <reference internal="True" refid="class-menubar-theme-font-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项文本的字体 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-font-size-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-font-size-font-size" names="class_menubar_theme_font_size_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_size</strong> <reference internal="True" refid="class-menubar-theme-font-size-font-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项文本的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-style-disabled"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-style-disabled" names="class_menubar_theme_style_disabled"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>disabled</strong> <reference internal="True" refid="class-menubar-theme-style-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于禁用状态时使用的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-style-disabled-mirrored"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-style-disabled-mirrored" names="class_menubar_theme_style_disabled_mirrored"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>disabled_mirrored</strong> <reference internal="True" refid="class-menubar-theme-style-disabled-mirrored"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于禁用状态时使用的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>（用于从右至左布局）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-style-hover"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-style-hover" names="class_menubar_theme_style_hover"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>hover</strong> <reference internal="True" refid="class-menubar-theme-style-hover"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于悬停状态时使用的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-style-hover-mirrored"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-style-hover-mirrored" names="class_menubar_theme_style_hover_mirrored"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>hover_mirrored</strong> <reference internal="True" refid="class-menubar-theme-style-hover-mirrored"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于悬停状态时使用的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>（用于从右至左布局）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-style-hover-pressed"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-style-hover-pressed" names="class_menubar_theme_style_hover_pressed"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>hover_pressed</strong> <reference internal="True" refid="class-menubar-theme-style-hover-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于按下并悬停状态时使用的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-style-hover-pressed-mirrored"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-style-hover-pressed-mirrored" names="class_menubar_theme_style_hover_pressed_mirrored"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>hover_pressed_mirrored</strong> <reference internal="True" refid="class-menubar-theme-style-hover-pressed-mirrored"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于按下并悬停状态时使用的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>（用于从右至左布局）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-style-normal"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-style-normal" names="class_menubar_theme_style_normal"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>normal</strong> <reference internal="True" refid="class-menubar-theme-style-normal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项的默认 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-style-normal-mirrored"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-style-normal-mirrored" names="class_menubar_theme_style_normal_mirrored"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>normal_mirrored</strong> <reference internal="True" refid="class-menubar-theme-style-normal-mirrored"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项的默认 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>（用于从右至左布局）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-style-pressed"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-style-pressed" names="class_menubar_theme_style_pressed"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>pressed</strong> <reference internal="True" refid="class-menubar-theme-style-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于按下状态时使用的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-menubar-theme-style-pressed-mirrored"></target>
            <paragraph classes="classref-themeproperty" ids="class-menubar-theme-style-pressed-mirrored" names="class_menubar_theme_style_pressed_mirrored"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>pressed_mirrored</strong> <reference internal="True" refid="class-menubar-theme-style-pressed-mirrored"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>菜单项处于按下状态时使用的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>（用于从右至左布局）。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
