<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_audiostream.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AudioStream.xml.</comment>
    <target refid="class-audiostream"></target>
    <section ids="audiostream class-audiostream" names="audiostream class_audiostream">
        <title>AudioStream</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_audiostreamgenerator#class-audiostreamgenerator"><inline classes="std std-ref">AudioStreamGenerator</inline></reference>, <reference internal="True" refuri="class_audiostreaminteractive#class-audiostreaminteractive"><inline classes="std std-ref">AudioStreamInteractive</inline></reference>, <reference internal="True" refuri="class_audiostreammicrophone#class-audiostreammicrophone"><inline classes="std std-ref">AudioStreamMicrophone</inline></reference>, <reference internal="True" refuri="class_audiostreammp3#class-audiostreammp3"><inline classes="std std-ref">AudioStreamMP3</inline></reference>, <reference internal="True" refuri="class_audiostreamoggvorbis#class-audiostreamoggvorbis"><inline classes="std std-ref">AudioStreamOggVorbis</inline></reference>, <reference internal="True" refuri="class_audiostreamplaylist#class-audiostreamplaylist"><inline classes="std std-ref">AudioStreamPlaylist</inline></reference>, <reference internal="True" refuri="class_audiostreampolyphonic#class-audiostreampolyphonic"><inline classes="std std-ref">AudioStreamPolyphonic</inline></reference>, <reference internal="True" refuri="class_audiostreamrandomizer#class-audiostreamrandomizer"><inline classes="std std-ref">AudioStreamRandomizer</inline></reference>, <reference internal="True" refuri="class_audiostreamsynchronized#class-audiostreamsynchronized"><inline classes="std std-ref">AudioStreamSynchronized</inline></reference>, <reference internal="True" refuri="class_audiostreamwav#class-audiostreamwav"><inline classes="std std-ref">AudioStreamWAV</inline></reference></paragraph>
        <paragraph>音频流的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>音频流的基类。音频流用于播放音效和音乐，支持 WAV（通过 <reference internal="True" refuri="class_audiostreamwav#class-audiostreamwav"><inline classes="std std-ref">AudioStreamWAV</inline></reference>）和 Ogg（通过 <reference internal="True" refuri="class_audiostreamoggvorbis#class-audiostreamoggvorbis"><inline classes="std std-ref">AudioStreamOggVorbis</inline></reference>）文件格式。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/audio/audio_streams"><inline classes="doc">音频流</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="音频生成器演示" refuri="https://godotengine.org/asset-library/asset/2759">音频生成器演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="音频麦克风录音演示" refuri="https://godotengine.org/asset-library/asset/2760">音频麦克风录音演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="音频频谱可视化演示" refuri="https://godotengine.org/asset-library/asset/2762">音频频谱可视化演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="110"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-private-method-get-beat-count"><inline classes="std std-ref">_get_beat_count</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-private-method-get-bpm"><inline classes="std std-ref">_get_bpm</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-private-method-get-length"><inline classes="std std-ref">_get_length</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-private-method-get-parameter-list"><inline classes="std std-ref">_get_parameter_list</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-private-method-get-stream-name"><inline classes="std std-ref">_get_stream_name</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_audiostreamplayback#class-audiostreamplayback"><inline classes="std std-ref">AudioStreamPlayback</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-private-method-instantiate-playback"><inline classes="std std-ref">_instantiate_playback</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-private-method-is-monophonic"><inline classes="std std-ref">_is_monophonic</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-method-can-be-sampled"><inline classes="std std-ref">can_be_sampled</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_audiosample#class-audiosample"><inline classes="std std-ref">AudioSample</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-method-generate-sample"><inline classes="std std-ref">generate_sample</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-method-get-length"><inline classes="std std-ref">get_length</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_audiostreamplayback#class-audiostreamplayback"><inline classes="std std-ref">AudioStreamPlayback</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-method-instantiate-playback"><inline classes="std std-ref">instantiate_playback</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-method-is-meta-stream"><inline classes="std std-ref">is_meta_stream</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostream-method-is-monophonic"><inline classes="std std-ref">is_monophonic</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-audiostream-signal-parameter-list-changed"></target>
            <paragraph classes="classref-signal" ids="class-audiostream-signal-parameter-list-changed" names="class_audiostream_signal_parameter_list_changed"><strong>parameter_list_changed</strong>() <reference internal="True" refid="class-audiostream-signal-parameter-list-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当参数列表改变时被发出以通知的信号。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-audiostream-private-method-get-beat-count"></target>
            <paragraph classes="classref-method" ids="class-audiostream-private-method-get-beat-count" names="class_audiostream_private_method__get_beat_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_beat_count</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostream-private-method-get-beat-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>可覆盖的方法。应返回该音频流的总节拍数。由引擎用来确定每个节拍的位置。</paragraph>
            <paragraph>理想情况下，返回值应基于流的采样率（例如，<reference internal="True" refuri="class_audiostreamwav#class-audiostreamwav-property-mix-rate"><inline classes="std std-ref">AudioStreamWAV.mix_rate</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostream-private-method-get-bpm"></target>
            <paragraph classes="classref-method" ids="class-audiostream-private-method-get-bpm" names="class_audiostream_private_method__get_bpm"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_get_bpm</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostream-private-method-get-bpm"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>可覆盖的方法。应返回该音频流的节奏，以每分钟节拍数（BPM）为单位。由引擎用来确定每个节拍的位置。</paragraph>
            <paragraph>理想情况下，返回值应基于流的采样率（例如，<reference internal="True" refuri="class_audiostreamwav#class-audiostreamwav-property-mix-rate"><inline classes="std std-ref">AudioStreamWAV.mix_rate</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostream-private-method-get-length"></target>
            <paragraph classes="classref-method" ids="class-audiostream-private-method-get-length" names="class_audiostream_private_method__get_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_get_length</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostream-private-method-get-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法以自定义 <reference internal="True" refid="class-audiostream-method-get-length"><inline classes="std std-ref">get_length</inline></reference> 所返回的值，应该返回这个音频流的长度，单位为秒。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostream-private-method-get-parameter-list"></target>
            <paragraph classes="classref-method" ids="class-audiostream-private-method-get-parameter-list" names="class_audiostream_private_method__get_parameter_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>_get_parameter_list</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostream-private-method-get-parameter-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该流的可控制参数。该数组包含具有属性信息描述格式的字典（请参阅 <reference internal="True" refuri="class_object#class-object-method-get-property-list"><inline classes="std std-ref">Object.get_property_list</inline></reference>）。此外，必须将该参数的默认值添加到 “default_value” 字段中的每个字典中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostream-private-method-get-stream-name"></target>
            <paragraph classes="classref-method" ids="class-audiostream-private-method-get-stream-name" names="class_audiostream_private_method__get_stream_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_stream_name</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostream-private-method-get-stream-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，以自定义分配给该音频流的名称。未被引擎使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostream-private-method-instantiate-playback"></target>
            <paragraph classes="classref-method" ids="class-audiostream-private-method-instantiate-playback" names="class_audiostream_private_method__instantiate_playback"><reference internal="True" refuri="class_audiostreamplayback#class-audiostreamplayback"><inline classes="std std-ref">AudioStreamPlayback</inline></reference> <strong>_instantiate_playback</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostream-private-method-instantiate-playback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法可以自定义 <reference internal="True" refid="class-audiostream-method-instantiate-playback"><inline classes="std std-ref">instantiate_playback</inline></reference> 的返回值。应该返回一个在播放流（例如通过 <reference internal="True" refuri="class_audiostreamplayer#class-audiostreamplayer"><inline classes="std std-ref">AudioStreamPlayer</inline></reference>）时创建的新的 <reference internal="True" refuri="class_audiostreamplayback#class-audiostreamplayback"><inline classes="std std-ref">AudioStreamPlayback</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostream-private-method-is-monophonic"></target>
            <paragraph classes="classref-method" ids="class-audiostream-private-method-is-monophonic" names="class_audiostream_private_method__is_monophonic"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_monophonic</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostream-private-method-is-monophonic"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法以自定义 <reference internal="True" refid="class-audiostream-method-is-monophonic"><inline classes="std std-ref">is_monophonic</inline></reference> 的返回值。如果该音频流仅支持一个通道，则应返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostream-method-can-be-sampled"></target>
            <paragraph classes="classref-method" ids="class-audiostream-method-can-be-sampled" names="class_audiostream_method_can_be_sampled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>can_be_sampled</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostream-method-can-be-sampled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该方法。</paragraph>
            <paragraph>Returns if the current <strong>AudioStream</strong> can be used as a sample. Only static streams can be sampled.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostream-method-generate-sample"></target>
            <paragraph classes="classref-method" ids="class-audiostream-method-generate-sample" names="class_audiostream_method_generate_sample"><reference internal="True" refuri="class_audiosample#class-audiosample"><inline classes="std std-ref">AudioSample</inline></reference> <strong>generate_sample</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostream-method-generate-sample"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该方法。</paragraph>
            <paragraph>Generates an <reference internal="True" refuri="class_audiosample#class-audiosample"><inline classes="std std-ref">AudioSample</inline></reference> based on the current stream.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostream-method-get-length"></target>
            <paragraph classes="classref-method" ids="class-audiostream-method-get-length" names="class_audiostream_method_get_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_length</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostream-method-get-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回音频流的长度，单位为秒。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostream-method-instantiate-playback"></target>
            <paragraph classes="classref-method" ids="class-audiostream-method-instantiate-playback" names="class_audiostream_method_instantiate_playback"><reference internal="True" refuri="class_audiostreamplayback#class-audiostreamplayback"><inline classes="std std-ref">AudioStreamPlayback</inline></reference> <strong>instantiate_playback</strong>() <reference internal="True" refid="class-audiostream-method-instantiate-playback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个新创建的 <reference internal="True" refuri="class_audiostreamplayback#class-audiostreamplayback"><inline classes="std std-ref">AudioStreamPlayback</inline></reference>，用于播放该音频流。当想要扩展 <reference internal="True" refid="class-audiostream-private-method-instantiate-playback"><inline classes="std std-ref">_instantiate_playback</inline></reference>，但从一个内部持有的 AudioStream 子资源调用 <reference internal="True" refid="class-audiostream-method-instantiate-playback"><inline classes="std std-ref">instantiate_playback</inline></reference> 时很有用。在 <literal>AudioStreamRandomPitch::instantiate_playback</literal> 的源代码中可以找到这方面的示例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostream-method-is-meta-stream"></target>
            <paragraph classes="classref-method" ids="class-audiostream-method-is-meta-stream" names="class_audiostream_method_is_meta_stream"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_meta_stream</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostream-method-is-meta-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if the stream is a collection of other streams, <literal>false</literal> otherwise.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostream-method-is-monophonic"></target>
            <paragraph classes="classref-method" ids="class-audiostream-method-is-monophonic" names="class_audiostream_method_is_monophonic"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_monophonic</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostream-method-is-monophonic"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该音频流仅支持一个通道（<emphasis>单声道</emphasis>），则返回 <literal>true</literal>；如果音频流支持两个或多个通道（<emphasis>复调</emphasis>），则返回 <literal>false</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
