<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_animation.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Animation.xml.</comment>
    <target refid="class-animation"></target>
    <section ids="animation class-animation" names="animation class_animation">
        <title>Animation</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>存放的是用于对引擎中的任何对象进行动画处理的数据。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个资源存放的是用于对引擎中的任何对象进行动画处理的数据。动画分为轨道，轨道必须与节点关联。向轨道添加定时关键帧（事件）后，节点的状态可以随时间变化。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 创建动画，让“Enemy”节点在 2.0 秒内
# 向右移动 100 像素。
var animation = Animation.new()
var track_index = animation.add_track(Animation.TYPE_VALUE)
animation.track_set_path(track_index, "Enemy:position:x")
animation.track_insert_key(track_index, 0.0, 0)
animation.track_insert_key(track_index, 2.0, 100)
animation.length = 2.0</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 创建动画，让“Enemy”节点在 2.0 秒内
// 向右移动 100 像素。
var animation = new Animation();
int trackIndex = animation.AddTrack(Animation.TrackType.Value);
animation.TrackSetPath(trackIndex, "Enemy:position:x");
animation.TrackInsertKey(trackIndex, 0.0f, 0);
animation.TrackInsertKey(trackIndex, 2.0f, 100);
animation.Length = 2.0f;</literal_block>
                </div>
            </container>
            <paragraph>动画只是数据的容器，必须添加至 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 等节点才能进行播放。动画轨道分为不同的类型，不同的类型有各自不同的专属方法。可用的类型请查看 <reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>对于 3D 的位置、旋转、缩放，推荐使用专门的 <reference internal="True" refid="class-animation-constant-type-position-3d"><inline classes="std std-ref">TYPE_POSITION_3D</inline></reference>、<reference internal="True" refid="class-animation-constant-type-rotation-3d"><inline classes="std std-ref">TYPE_ROTATION_3D</inline></reference>、<reference internal="True" refid="class-animation-constant-type-scale-3d"><inline classes="std std-ref">TYPE_SCALE_3D</inline></reference> 轨道类型，不要使用 <reference internal="True" refid="class-animation-constant-type-value"><inline classes="std std-ref">TYPE_VALUE</inline></reference>，性能更高。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/animation/index"><inline classes="doc">动画教程索引</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="42"></colspec>
                    <colspec colwidth="68"></colspec>
                    <colspec colwidth="15"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-property-capture-included"><inline classes="std std-ref">capture_included</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-property-length"><inline classes="std std-ref">length</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-animation-loopmode"><inline classes="std std-ref">LoopMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-property-loop-mode"><inline classes="std std-ref">loop_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-property-step"><inline classes="std std-ref">step</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0333333</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="60"></colspec>
                    <colspec colwidth="309"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-add-track"><inline classes="std std-ref">add_track</inline></reference>(type: <reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference>, at_position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-animation-track-get-key-animation"><inline classes="std std-ref">animation_track_get_key_animation</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-animation-track-insert-key"><inline classes="std std-ref">animation_track_insert_key</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, animation: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-animation-track-set-key-animation"><inline classes="std std-ref">animation_track_set_key_animation</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, animation: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-audio-track-get-key-end-offset"><inline classes="std std-ref">audio_track_get_key_end_offset</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-audio-track-get-key-start-offset"><inline classes="std std-ref">audio_track_get_key_start_offset</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-audio-track-get-key-stream"><inline classes="std std-ref">audio_track_get_key_stream</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-audio-track-insert-key"><inline classes="std std-ref">audio_track_insert_key</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, stream: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>, start_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0, end_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-audio-track-is-use-blend"><inline classes="std std-ref">audio_track_is_use_blend</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-audio-track-set-key-end-offset"><inline classes="std std-ref">audio_track_set_key_end_offset</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-audio-track-set-key-start-offset"><inline classes="std std-ref">audio_track_set_key_start_offset</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-audio-track-set-key-stream"><inline classes="std std-ref">audio_track_set_key_stream</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, stream: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-audio-track-set-use-blend"><inline classes="std std-ref">audio_track_set_use_blend</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-bezier-track-get-key-in-handle"><inline classes="std std-ref">bezier_track_get_key_in_handle</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-bezier-track-get-key-out-handle"><inline classes="std std-ref">bezier_track_get_key_out_handle</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-bezier-track-get-key-value"><inline classes="std std-ref">bezier_track_get_key_value</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-bezier-track-insert-key"><inline classes="std std-ref">bezier_track_insert_key</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, in_handle: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0), out_handle: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-bezier-track-interpolate"><inline classes="std std-ref">bezier_track_interpolate</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-bezier-track-set-key-in-handle"><inline classes="std std-ref">bezier_track_set_key_in_handle</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, in_handle: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, balanced_value_time_ratio: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-bezier-track-set-key-out-handle"><inline classes="std std-ref">bezier_track_set_key_out_handle</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, out_handle: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, balanced_value_time_ratio: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-bezier-track-set-key-value"><inline classes="std std-ref">bezier_track_set_key_value</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-blend-shape-track-insert-key"><inline classes="std std-ref">blend_shape_track_insert_key</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-blend-shape-track-interpolate"><inline classes="std std-ref">blend_shape_track_interpolate</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, backward: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-compress"><inline classes="std std-ref">compress</inline></reference>(page_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 8192, fps: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 120, split_tolerance: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 4.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-copy-track"><inline classes="std std-ref">copy_track</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_animation: <reference internal="True" refid="class-animation"><inline classes="std std-ref">Animation</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-find-track"><inline classes="std std-ref">find_track</inline></reference>(path: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>, type: <reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-get-track-count"><inline classes="std std-ref">get_track_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-method-track-get-name"><inline classes="std std-ref">method_track_get_name</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-method-track-get-params"><inline classes="std std-ref">method_track_get_params</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-position-track-insert-key"><inline classes="std std-ref">position_track_insert_key</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, position: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-position-track-interpolate"><inline classes="std std-ref">position_track_interpolate</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, backward: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-remove-track"><inline classes="std std-ref">remove_track</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-rotation-track-insert-key"><inline classes="std std-ref">rotation_track_insert_key</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, rotation: <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-rotation-track-interpolate"><inline classes="std std-ref">rotation_track_interpolate</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, backward: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-scale-track-insert-key"><inline classes="std std-ref">scale_track_insert_key</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, scale: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-scale-track-interpolate"><inline classes="std std-ref">scale_track_interpolate</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, backward: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-find-key"><inline classes="std std-ref">track_find_key</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, find_mode: <reference internal="True" refid="enum-animation-findmode"><inline classes="std std-ref">FindMode</inline></reference> = 0, limit: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, backward: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-get-interpolation-loop-wrap"><inline classes="std std-ref">track_get_interpolation_loop_wrap</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-animation-interpolationtype"><inline classes="std std-ref">InterpolationType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-get-interpolation-type"><inline classes="std std-ref">track_get_interpolation_type</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-get-key-count"><inline classes="std std-ref">track_get_key_count</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-get-key-time"><inline classes="std std-ref">track_get_key_time</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-get-key-transition"><inline classes="std std-ref">track_get_key_transition</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-get-key-value"><inline classes="std std-ref">track_get_key_value</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-get-path"><inline classes="std std-ref">track_get_path</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-get-type"><inline classes="std std-ref">track_get_type</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-insert-key"><inline classes="std std-ref">track_insert_key</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, transition: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-is-compressed"><inline classes="std std-ref">track_is_compressed</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-is-enabled"><inline classes="std std-ref">track_is_enabled</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-is-imported"><inline classes="std std-ref">track_is_imported</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-move-down"><inline classes="std std-ref">track_move_down</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-move-to"><inline classes="std std-ref">track_move_to</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-move-up"><inline classes="std std-ref">track_move_up</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-remove-key"><inline classes="std std-ref">track_remove_key</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-remove-key-at-time"><inline classes="std std-ref">track_remove_key_at_time</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-set-enabled"><inline classes="std std-ref">track_set_enabled</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-set-imported"><inline classes="std std-ref">track_set_imported</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, imported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-set-interpolation-loop-wrap"><inline classes="std std-ref">track_set_interpolation_loop_wrap</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, interpolation: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-set-interpolation-type"><inline classes="std std-ref">track_set_interpolation_type</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, interpolation: <reference internal="True" refid="enum-animation-interpolationtype"><inline classes="std std-ref">InterpolationType</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-set-key-time"><inline classes="std std-ref">track_set_key_time</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-set-key-transition"><inline classes="std std-ref">track_set_key_transition</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transition: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-set-key-value"><inline classes="std std-ref">track_set_key_value</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-set-path"><inline classes="std std-ref">track_set_path</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, path: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-track-swap"><inline classes="std std-ref">track_swap</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, with_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-animation-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-value-track-get-update-mode"><inline classes="std std-ref">value_track_get_update_mode</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-value-track-interpolate"><inline classes="std std-ref">value_track_interpolate</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, backward: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animation-method-value-track-set-update-mode"><inline classes="std std-ref">value_track_set_update_mode</inline></reference>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mode: <reference internal="True" refid="enum-animation-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-animation-tracktype"></target>
            <paragraph classes="classref-enumeration" ids="enum-animation-tracktype" names="enum_animation_tracktype">enum <strong>TrackType</strong>: <reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animation-constant-type-value"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-type-value" names="class_animation_constant_type_value"><reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference> <strong>TYPE_VALUE</strong> = <literal>0</literal></paragraph>
            <paragraph>值轨道设置节点属性中的值，但仅限于那些可以被插值的属性。对于 3D 位置/旋转/缩放，出于性能原因，建议使用专用的 <reference internal="True" refid="class-animation-constant-type-position-3d"><inline classes="std std-ref">TYPE_POSITION_3D</inline></reference>、<reference internal="True" refid="class-animation-constant-type-rotation-3d"><inline classes="std std-ref">TYPE_ROTATION_3D</inline></reference> 和 <reference internal="True" refid="class-animation-constant-type-scale-3d"><inline classes="std std-ref">TYPE_SCALE_3D</inline></reference> 轨道类型而不是 <reference internal="True" refid="class-animation-constant-type-value"><inline classes="std std-ref">TYPE_VALUE</inline></reference>。</paragraph>
            <target refid="class-animation-constant-type-position-3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-type-position-3d" names="class_animation_constant_type_position_3d"><reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference> <strong>TYPE_POSITION_3D</strong> = <literal>1</literal></paragraph>
            <paragraph>3D 位置轨道（值存储在 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 中）。</paragraph>
            <target refid="class-animation-constant-type-rotation-3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-type-rotation-3d" names="class_animation_constant_type_rotation_3d"><reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference> <strong>TYPE_ROTATION_3D</strong> = <literal>2</literal></paragraph>
            <paragraph>3D 旋转轨道（值存储在 <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> 中）。</paragraph>
            <target refid="class-animation-constant-type-scale-3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-type-scale-3d" names="class_animation_constant_type_scale_3d"><reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference> <strong>TYPE_SCALE_3D</strong> = <literal>3</literal></paragraph>
            <paragraph>3D 缩放轨道（值存储在 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 中）。</paragraph>
            <target refid="class-animation-constant-type-blend-shape"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-type-blend-shape" names="class_animation_constant_type_blend_shape"><reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference> <strong>TYPE_BLEND_SHAPE</strong> = <literal>4</literal></paragraph>
            <paragraph>混合形状轨道。</paragraph>
            <target refid="class-animation-constant-type-method"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-type-method" names="class_animation_constant_type_method"><reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference> <strong>TYPE_METHOD</strong> = <literal>5</literal></paragraph>
            <paragraph>方法轨道会在各个关键帧上使用给定参数的调用函数。</paragraph>
            <target refid="class-animation-constant-type-bezier"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-type-bezier" names="class_animation_constant_type_bezier"><reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference> <strong>TYPE_BEZIER</strong> = <literal>6</literal></paragraph>
            <paragraph>贝塞尔轨道可以用来根据自定义曲线对数值进行插值。它们也可以用来对向量和颜色的子属性进行动画处理（例如 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 的 Alpha 值）。</paragraph>
            <target refid="class-animation-constant-type-audio"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-type-audio" names="class_animation_constant_type_audio"><reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference> <strong>TYPE_AUDIO</strong> = <literal>7</literal></paragraph>
            <paragraph>音频轨道可以用来通过任意类型的 <reference internal="True" refuri="class_audiostreamplayer#class-audiostreamplayer"><inline classes="std std-ref">AudioStreamPlayer</inline></reference> 播放音频流。该流可以在动画中进行修剪和预览。</paragraph>
            <target refid="class-animation-constant-type-animation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-type-animation" names="class_animation_constant_type_animation"><reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference> <strong>TYPE_ANIMATION</strong> = <literal>8</literal></paragraph>
            <paragraph>动画轨道会在其他 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点中播放动画。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-animation-interpolationtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-animation-interpolationtype" names="enum_animation_interpolationtype">enum <strong>InterpolationType</strong>: <reference internal="True" refid="enum-animation-interpolationtype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animation-constant-interpolation-nearest"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-interpolation-nearest" names="class_animation_constant_interpolation_nearest"><reference internal="True" refid="enum-animation-interpolationtype"><inline classes="std std-ref">InterpolationType</inline></reference> <strong>INTERPOLATION_NEAREST</strong> = <literal>0</literal></paragraph>
            <paragraph>无插值（最邻近的值）。</paragraph>
            <target refid="class-animation-constant-interpolation-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-interpolation-linear" names="class_animation_constant_interpolation_linear"><reference internal="True" refid="enum-animation-interpolationtype"><inline classes="std std-ref">InterpolationType</inline></reference> <strong>INTERPOLATION_LINEAR</strong> = <literal>1</literal></paragraph>
            <paragraph>线性插值。</paragraph>
            <target refid="class-animation-constant-interpolation-cubic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-interpolation-cubic" names="class_animation_constant_interpolation_cubic"><reference internal="True" refid="enum-animation-interpolationtype"><inline classes="std std-ref">InterpolationType</inline></reference> <strong>INTERPOLATION_CUBIC</strong> = <literal>2</literal></paragraph>
            <paragraph>三次插值。这看起来比线性插值更平滑，但插值成本更高。对于从外部软件导入的复杂 3D 动画，坚持使用 <reference internal="True" refid="class-animation-constant-interpolation-linear"><inline classes="std std-ref">INTERPOLATION_LINEAR</inline></reference>，即使它需要使用更高的动画帧率作为回报。</paragraph>
            <target refid="class-animation-constant-interpolation-linear-angle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-interpolation-linear-angle" names="class_animation_constant_interpolation_linear_angle"><reference internal="True" refid="enum-animation-interpolationtype"><inline classes="std std-ref">InterpolationType</inline></reference> <strong>INTERPOLATION_LINEAR_ANGLE</strong> = <literal>3</literal></paragraph>
            <paragraph>具有最短路径旋转的线性插值。</paragraph>
            <paragraph><strong>注意：</strong>结果值总是归一化的，可能与关键帧的值不匹配。</paragraph>
            <target refid="class-animation-constant-interpolation-cubic-angle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-interpolation-cubic-angle" names="class_animation_constant_interpolation_cubic_angle"><reference internal="True" refid="enum-animation-interpolationtype"><inline classes="std std-ref">InterpolationType</inline></reference> <strong>INTERPOLATION_CUBIC_ANGLE</strong> = <literal>4</literal></paragraph>
            <paragraph>具有最短路径旋转的三次插值。</paragraph>
            <paragraph><strong>注意：</strong>结果值总是归一化的，可能与关键帧的值不匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-animation-updatemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-animation-updatemode" names="enum_animation_updatemode">enum <strong>UpdateMode</strong>: <reference internal="True" refid="enum-animation-updatemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animation-constant-update-continuous"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-update-continuous" names="class_animation_constant_update_continuous"><reference internal="True" refid="enum-animation-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>UPDATE_CONTINUOUS</strong> = <literal>0</literal></paragraph>
            <paragraph>在关键帧之间更新并保持值。</paragraph>
            <target refid="class-animation-constant-update-discrete"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-update-discrete" names="class_animation_constant_update_discrete"><reference internal="True" refid="enum-animation-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>UPDATE_DISCRETE</strong> = <literal>1</literal></paragraph>
            <paragraph>在关键帧更新。</paragraph>
            <target refid="class-animation-constant-update-capture"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-update-capture" names="class_animation_constant_update_capture"><reference internal="True" refid="enum-animation-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>UPDATE_CAPTURE</strong> = <literal>2</literal></paragraph>
            <paragraph>与 <reference internal="True" refid="class-animation-constant-update-continuous"><inline classes="std std-ref">UPDATE_CONTINUOUS</inline></reference> 相同，但是会捕获当前对象的取值并在部分方法中进行插值。另见 <reference internal="True" refuri="class_animationmixer#class-animationmixer-method-capture"><inline classes="std std-ref">AnimationMixer.capture</inline></reference>、<reference internal="True" refuri="class_animationplayer#class-animationplayer-property-playback-auto-capture"><inline classes="std std-ref">AnimationPlayer.playback_auto_capture</inline></reference> 和 <reference internal="True" refuri="class_animationplayer#class-animationplayer-method-play-with-capture"><inline classes="std std-ref">AnimationPlayer.play_with_capture</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-animation-loopmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-animation-loopmode" names="enum_animation_loopmode">enum <strong>LoopMode</strong>: <reference internal="True" refid="enum-animation-loopmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animation-constant-loop-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-loop-none" names="class_animation_constant_loop_none"><reference internal="True" refid="enum-animation-loopmode"><inline classes="std std-ref">LoopMode</inline></reference> <strong>LOOP_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>在动画的两端，动画将停止播放。</paragraph>
            <target refid="class-animation-constant-loop-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-loop-linear" names="class_animation_constant_loop_linear"><reference internal="True" refid="enum-animation-loopmode"><inline classes="std std-ref">LoopMode</inline></reference> <strong>LOOP_LINEAR</strong> = <literal>1</literal></paragraph>
            <paragraph>在动画的两端，动画会在不改变播放方向的情况下重复播放。</paragraph>
            <target refid="class-animation-constant-loop-pingpong"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-loop-pingpong" names="class_animation_constant_loop_pingpong"><reference internal="True" refid="enum-animation-loopmode"><inline classes="std std-ref">LoopMode</inline></reference> <strong>LOOP_PINGPONG</strong> = <literal>2</literal></paragraph>
            <paragraph>在动画的两端重复进行播放和反向播放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-animation-loopedflag"></target>
            <paragraph classes="classref-enumeration" ids="enum-animation-loopedflag" names="enum_animation_loopedflag">enum <strong>LoopedFlag</strong>: <reference internal="True" refid="enum-animation-loopedflag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animation-constant-looped-flag-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-looped-flag-none" names="class_animation_constant_looped_flag_none"><reference internal="True" refid="enum-animation-loopedflag"><inline classes="std std-ref">LoopedFlag</inline></reference> <strong>LOOPED_FLAG_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>该标志指示动画在没有任何循环的情况下继续进行。</paragraph>
            <target refid="class-animation-constant-looped-flag-end"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-looped-flag-end" names="class_animation_constant_looped_flag_end"><reference internal="True" refid="enum-animation-loopedflag"><inline classes="std std-ref">LoopedFlag</inline></reference> <strong>LOOPED_FLAG_END</strong> = <literal>1</literal></paragraph>
            <paragraph>该标志表示动画已到达动画的末尾并且刚好在循环处理之后。</paragraph>
            <target refid="class-animation-constant-looped-flag-start"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-looped-flag-start" names="class_animation_constant_looped_flag_start"><reference internal="True" refid="enum-animation-loopedflag"><inline classes="std std-ref">LoopedFlag</inline></reference> <strong>LOOPED_FLAG_START</strong> = <literal>2</literal></paragraph>
            <paragraph>该标志表示动画已经到达动画的开始并且刚好在循环处理之后。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-animation-findmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-animation-findmode" names="enum_animation_findmode">enum <strong>FindMode</strong>: <reference internal="True" refid="enum-animation-findmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animation-constant-find-mode-nearest"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-find-mode-nearest" names="class_animation_constant_find_mode_nearest"><reference internal="True" refid="enum-animation-findmode"><inline classes="std std-ref">FindMode</inline></reference> <strong>FIND_MODE_NEAREST</strong> = <literal>0</literal></paragraph>
            <paragraph>查找与时间最接近的关键帧。</paragraph>
            <target refid="class-animation-constant-find-mode-approx"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-find-mode-approx" names="class_animation_constant_find_mode_approx"><reference internal="True" refid="enum-animation-findmode"><inline classes="std std-ref">FindMode</inline></reference> <strong>FIND_MODE_APPROX</strong> = <literal>1</literal></paragraph>
            <paragraph>仅查找与时间近似的关键帧。</paragraph>
            <target refid="class-animation-constant-find-mode-exact"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animation-constant-find-mode-exact" names="class_animation_constant_find_mode_exact"><reference internal="True" refid="enum-animation-findmode"><inline classes="std std-ref">FindMode</inline></reference> <strong>FIND_MODE_EXACT</strong> = <literal>2</literal></paragraph>
            <paragraph>仅查找与时间一致的关键帧。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-animation-property-capture-included"></target>
            <paragraph classes="classref-property" ids="class-animation-property-capture-included" names="class_animation_property_capture_included"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>capture_included</strong> = <literal>false</literal> <reference internal="True" refid="class-animation-property-capture-included"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_capture_included</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果包含捕获轨道，则返回 <literal>true</literal>。这是一个只读的缓存值，旨在提升性能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-property-length"></target>
            <paragraph classes="classref-property" ids="class-animation-property-length" names="class_animation_property_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>length</strong> = <literal>1.0</literal> <reference internal="True" refid="class-animation-property-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_length</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_length</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>动画的总长度（单位为秒）。</paragraph>
            <paragraph><strong>注意：</strong>长度不以最后一个关键帧为界，因为这个关键帧可能位于结束前或结束后，以确保正确的插值和循环。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-property-loop-mode"></target>
            <paragraph classes="classref-property" ids="class-animation-property-loop-mode" names="class_animation_property_loop_mode"><reference internal="True" refid="enum-animation-loopmode"><inline classes="std std-ref">LoopMode</inline></reference> <strong>loop_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-animation-property-loop-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_loop_mode</strong>(value: <reference internal="True" refid="enum-animation-loopmode"><inline classes="std std-ref">LoopMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-animation-loopmode"><inline classes="std std-ref">LoopMode</inline></reference> <strong>get_loop_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>确定动画播放期间动画时间轴两端的行为。 这用于动画循环的正确插值，以及提示播放器必须重新启动动画。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-property-step"></target>
            <paragraph classes="classref-property" ids="class-animation-property-step" names="class_animation_property_step"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>step</strong> = <literal>0.0333333</literal> <reference internal="True" refid="class-animation-property-step"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_step</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_step</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>动画步长值。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-animation-method-add-track"></target>
            <paragraph classes="classref-method" ids="class-animation-method-add-track" names="class_animation_method_add_track"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_track</strong>(type: <reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference>, at_position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-animation-method-add-track"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向动画添加轨道。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-animation-track-get-key-animation"></target>
            <paragraph classes="classref-method" ids="class-animation-method-animation-track-get-key-animation" names="class_animation_method_animation_track_get_key_animation"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>animation_track_get_key_animation</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-animation-track-get-key-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由 <literal>key_idx</literal> 标识的键处的动画名称。<literal>track_idx</literal> 必须是动画轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-animation-track-insert-key"></target>
            <paragraph classes="classref-method" ids="class-animation-method-animation-track-insert-key" names="class_animation_method_animation_track_insert_key"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>animation_track_insert_key</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, animation: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animation-method-animation-track-insert-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的 <literal>time</literal>（以秒为单位）插入一个值为 <literal>animation</literal> 的键。<literal>track_idx</literal> 必须是动画轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-animation-track-set-key-animation"></target>
            <paragraph classes="classref-method" ids="class-animation-method-animation-track-set-key-animation" names="class_animation_method_animation_track_set_key_animation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>animation_track_set_key_animation</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, animation: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animation-method-animation-track-set-key-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>key_idx</literal> 标识的键设置为值 <literal>animation</literal>。<literal>track_idx</literal> 必须是动画轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-audio-track-get-key-end-offset"></target>
            <paragraph classes="classref-method" ids="class-animation-method-audio-track-get-key-end-offset" names="class_animation_method_audio_track_get_key_end_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>audio_track_get_key_end_offset</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-audio-track-get-key-end-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由 <literal>key_idx</literal> 标识的键的结束偏移量。<literal>track_idx</literal> 必须是音频轨道的索引。</paragraph>
            <paragraph>结束偏移量是在音频流结束时截断的秒数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-audio-track-get-key-start-offset"></target>
            <paragraph classes="classref-method" ids="class-animation-method-audio-track-get-key-start-offset" names="class_animation_method_audio_track_get_key_start_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>audio_track_get_key_start_offset</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-audio-track-get-key-start-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由 <literal>key_idx</literal> 标识的键的起始偏移量。<literal>track_idx</literal> 必须是音频轨道的索引。</paragraph>
            <paragraph>起始偏移量是在音频流开始时截断的秒数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-audio-track-get-key-stream"></target>
            <paragraph classes="classref-method" ids="class-animation-method-audio-track-get-key-stream" names="class_animation_method_audio_track_get_key_stream"><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>audio_track_get_key_stream</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-audio-track-get-key-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由 <literal>key_idx</literal> 标识的键的音频流。<literal>track_idx</literal> 必须是音频轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-audio-track-insert-key"></target>
            <paragraph classes="classref-method" ids="class-animation-method-audio-track-insert-key" names="class_animation_method_audio_track_insert_key"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>audio_track_insert_key</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, stream: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>, start_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0, end_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0) <reference internal="True" refid="class-animation-method-audio-track-insert-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>time</literal> 秒处插入音频轨道关键帧。<literal>track_idx</literal> 必须是音频轨道的索引。</paragraph>
            <paragraph><literal>stream</literal> 是要播放的 <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference> 资源。<literal>start_offset</literal> 是音频流开头截断的秒数，而 <literal>end_offset</literal> 是在结尾处截断的秒数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-audio-track-is-use-blend"></target>
            <paragraph classes="classref-method" ids="class-animation-method-audio-track-is-use-blend" names="class_animation_method_audio_track_is_use_blend"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>audio_track_is_use_blend</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-audio-track-is-use-blend"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>track_idx</literal> 处的轨道将与其他动画混合，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-audio-track-set-key-end-offset"></target>
            <paragraph classes="classref-method" ids="class-animation-method-audio-track-set-key-end-offset" names="class_animation_method_audio_track_set_key_end_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>audio_track_set_key_end_offset</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-animation-method-audio-track-set-key-end-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将由 <literal>key_idx</literal> 标识的键的结束偏移量设置为值 <literal>offset</literal>。<literal>track_idx</literal> 必须是音频轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-audio-track-set-key-start-offset"></target>
            <paragraph classes="classref-method" ids="class-animation-method-audio-track-set-key-start-offset" names="class_animation_method_audio_track_set_key_start_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>audio_track_set_key_start_offset</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-animation-method-audio-track-set-key-start-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将由 <literal>key_idx</literal> 标识的键的起始偏移量设置为值 <literal>offset</literal>。<literal>track_idx</literal> 必须是音频轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-audio-track-set-key-stream"></target>
            <paragraph classes="classref-method" ids="class-animation-method-audio-track-set-key-stream" names="class_animation_method_audio_track_set_key_stream"><abbreviation explanation="无返回值。">void</abbreviation> <strong>audio_track_set_key_stream</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, stream: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>) <reference internal="True" refid="class-animation-method-audio-track-set-key-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将由 <literal>key_idx</literal> 标识的键的流设置为值 <literal>stream</literal>。<literal>track_idx</literal> 必须是音频轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-audio-track-set-use-blend"></target>
            <paragraph classes="classref-method" ids="class-animation-method-audio-track-set-use-blend" names="class_animation_method_audio_track_set_use_blend"><abbreviation explanation="无返回值。">void</abbreviation> <strong>audio_track_set_use_blend</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-animation-method-audio-track-set-use-blend"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置轨道是否将与其他动画混合。如果为 <literal>true</literal>，音频播放音量会根据混合值而变化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-bezier-track-get-key-in-handle"></target>
            <paragraph classes="classref-method" ids="class-animation-method-bezier-track-get-key-in-handle" names="class_animation_method_bezier_track_get_key_in_handle"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>bezier_track_get_key_in_handle</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-bezier-track-get-key-in-handle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由 <literal>key_idx</literal> 识别的关键帧的入点句柄，<literal>track_idx</literal> 必须是贝赛尔曲线轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-bezier-track-get-key-out-handle"></target>
            <paragraph classes="classref-method" ids="class-animation-method-bezier-track-get-key-out-handle" names="class_animation_method_bezier_track_get_key_out_handle"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>bezier_track_get_key_out_handle</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-bezier-track-get-key-out-handle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由 <literal>key_idx</literal> 识别的关键帧的出点句柄，<literal>track_idx</literal> 必须是贝赛尔曲线轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-bezier-track-get-key-value"></target>
            <paragraph classes="classref-method" ids="class-animation-method-bezier-track-get-key-value" names="class_animation_method_bezier_track_get_key_value"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>bezier_track_get_key_value</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-bezier-track-get-key-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由 <literal>key_idx</literal> 识别的键的值，<literal>track_idx</literal> 必须是贝塞尔轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-bezier-track-insert-key"></target>
            <paragraph classes="classref-method" ids="class-animation-method-bezier-track-insert-key" names="class_animation_method_bezier_track_insert_key"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>bezier_track_insert_key</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, in_handle: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0), out_handle: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <reference internal="True" refid="class-animation-method-bezier-track-insert-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的时间 <literal>time</literal> 秒处插入贝塞尔轨道关键帧。<literal>track_idx</literal> 必须是贝塞尔轨道的索引。</paragraph>
            <paragraph><literal>in_handle</literal> 是添加的贝塞尔曲线点的左侧权重，<literal>out_handle</literal> 是右侧权重，而 <literal>value</literal> 是这个点的实际值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-bezier-track-interpolate"></target>
            <paragraph classes="classref-method" ids="class-animation-method-bezier-track-interpolate" names="class_animation_method_bezier_track_interpolate"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>bezier_track_interpolate</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-bezier-track-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定 <literal>time</literal> 处的插值（以秒为单位）。<literal>track_idx</literal> 必须是贝塞尔轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-bezier-track-set-key-in-handle"></target>
            <paragraph classes="classref-method" ids="class-animation-method-bezier-track-set-key-in-handle" names="class_animation_method_bezier_track_set_key_in_handle"><abbreviation explanation="无返回值。">void</abbreviation> <strong>bezier_track_set_key_in_handle</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, in_handle: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, balanced_value_time_ratio: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0) <reference internal="True" refid="class-animation-method-bezier-track-set-key-in-handle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>key_idx</literal> 所标识的关键帧的入点句柄设置为 <literal>in_handle</literal> 值。<literal>track_idx</literal> 必须是贝塞尔轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-bezier-track-set-key-out-handle"></target>
            <paragraph classes="classref-method" ids="class-animation-method-bezier-track-set-key-out-handle" names="class_animation_method_bezier_track_set_key_out_handle"><abbreviation explanation="无返回值。">void</abbreviation> <strong>bezier_track_set_key_out_handle</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, out_handle: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, balanced_value_time_ratio: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0) <reference internal="True" refid="class-animation-method-bezier-track-set-key-out-handle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将由 <literal>key_idx</literal> 确定的关键帧的出点句柄设置为 <literal>out_handle</literal>。参数 <literal>track_idx</literal> 必须是贝塞尔轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-bezier-track-set-key-value"></target>
            <paragraph classes="classref-method" ids="class-animation-method-bezier-track-set-key-value" names="class_animation_method_bezier_track_set_key_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>bezier_track_set_key_value</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-animation-method-bezier-track-set-key-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>key_idx</literal> 所标识的键值设置为给定值。<literal>track_idx</literal> 必须是贝塞尔轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-blend-shape-track-insert-key"></target>
            <paragraph classes="classref-method" ids="class-animation-method-blend-shape-track-insert-key" names="class_animation_method_blend_shape_track_insert_key"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>blend_shape_track_insert_key</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-animation-method-blend-shape-track-insert-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的混合形状轨道中插入一个关键帧。返回键索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-blend-shape-track-interpolate"></target>
            <paragraph classes="classref-method" ids="class-animation-method-blend-shape-track-interpolate" names="class_animation_method_blend_shape_track_interpolate"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>blend_shape_track_interpolate</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, backward: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-blend-shape-track-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于给定时间（以秒为单位）的插值后的混合形状值。<literal>track_idx</literal> 必须是混合形状轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-clear"></target>
            <paragraph classes="classref-method" ids="class-animation-method-clear" names="class_animation_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-animation-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除动画（清除所有轨道并重置所有）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-compress"></target>
            <paragraph classes="classref-method" ids="class-animation-method-compress" names="class_animation_method_compress"><abbreviation explanation="无返回值。">void</abbreviation> <strong>compress</strong>(page_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 8192, fps: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 120, split_tolerance: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 4.0) <reference internal="True" refid="class-animation-method-compress"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>就地压缩动画及其所有轨道。这将使 <reference internal="True" refid="class-animation-method-track-is-compressed"><inline classes="std std-ref">track_is_compressed</inline></reference> 一旦在这个 <strong>Animation</strong> 上被调用就会返回 <literal>true</literal>。压缩后的轨道在播放时需要更少的内存，并且这被设计用于从外部3D软件导入的复杂的3D动画（比如过场动画）。压缩是有损失的，但现实中通常不会注意到这种差异。</paragraph>
            <paragraph><strong>注意：</strong>压缩轨道有各种限制（比如不能从编辑器中编辑），所以只有在你真正需要时才使用压缩动画。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-copy-track"></target>
            <paragraph classes="classref-method" ids="class-animation-method-copy-track" names="class_animation_method_copy_track"><abbreviation explanation="无返回值。">void</abbreviation> <strong>copy_track</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_animation: <reference internal="True" refid="class-animation"><inline classes="std std-ref">Animation</inline></reference>) <reference internal="True" refid="class-animation-method-copy-track"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向 <literal>to_animation</literal> 添加一个新轨道，该轨道是该动画中给定轨道的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-find-track"></target>
            <paragraph classes="classref-method" ids="class-animation-method-find-track" names="class_animation_method_find_track"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>find_track</strong>(path: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>, type: <reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-find-track"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定轨迹的索引。如果没有找到，返回 -1。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-get-track-count"></target>
            <paragraph classes="classref-method" ids="class-animation-method-get-track-count" names="class_animation_method_get_track_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_track_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-get-track-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回动画中的轨道数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-method-track-get-name"></target>
            <paragraph classes="classref-method" ids="class-animation-method-method-track-get-name" names="class_animation_method_method_track_get_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>method_track_get_name</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-method-track-get-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个方法轨道的方法名。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-method-track-get-params"></target>
            <paragraph classes="classref-method" ids="class-animation-method-method-track-get-params" names="class_animation_method_method_track_get_params"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>method_track_get_params</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-method-track-get-params"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定方法轨道中给定键的方法要调用的参数值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-position-track-insert-key"></target>
            <paragraph classes="classref-method" ids="class-animation-method-position-track-insert-key" names="class_animation_method_position_track_insert_key"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>position_track_insert_key</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, position: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-animation-method-position-track-insert-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的 3D 位置轨道中插入关键帧。返回该关键帧的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-position-track-interpolate"></target>
            <paragraph classes="classref-method" ids="class-animation-method-position-track-interpolate" names="class_animation_method_position_track_interpolate"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>position_track_interpolate</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, backward: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-position-track-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于给定时间（以秒为单位）的插值后的位置值。<literal>track_idx</literal> 必须是 3D 位置轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-remove-track"></target>
            <paragraph classes="classref-method" ids="class-animation-method-remove-track" names="class_animation_method_remove_track"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_track</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-animation-method-remove-track"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过指定轨道索引来移除一个轨道。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-rotation-track-insert-key"></target>
            <paragraph classes="classref-method" ids="class-animation-method-rotation-track-insert-key" names="class_animation_method_rotation_track_insert_key"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>rotation_track_insert_key</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, rotation: <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>) <reference internal="True" refid="class-animation-method-rotation-track-insert-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的 3D 旋转轨道中插入关键帧。返回该关键帧的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-rotation-track-interpolate"></target>
            <paragraph classes="classref-method" ids="class-animation-method-rotation-track-interpolate" names="class_animation_method_rotation_track_interpolate"><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>rotation_track_interpolate</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, backward: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-rotation-track-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于给定时间（以秒为单位）的插值后的旋转值。<literal>track_idx</literal> 必须是 3D 旋转轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-scale-track-insert-key"></target>
            <paragraph classes="classref-method" ids="class-animation-method-scale-track-insert-key" names="class_animation_method_scale_track_insert_key"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>scale_track_insert_key</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, scale: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-animation-method-scale-track-insert-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的 3D 缩放轨道中插入关键帧。返回该关键帧的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-scale-track-interpolate"></target>
            <paragraph classes="classref-method" ids="class-animation-method-scale-track-interpolate" names="class_animation_method_scale_track_interpolate"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>scale_track_interpolate</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, backward: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-scale-track-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于给定时间（以秒为单位）的插值后的缩放值。<literal>track_idx</literal> 必须是 3D 缩放轨道的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-find-key"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-find-key" names="class_animation_method_track_find_key"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>track_find_key</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, find_mode: <reference internal="True" refid="enum-animation-findmode"><inline classes="std std-ref">FindMode</inline></reference> = 0, limit: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, backward: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-track-find-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据时间查找给定轨道中的关键帧索引号。查找时可以要求与给定时间近似/一致。</paragraph>
            <paragraph>如果 <literal>limit</literal> 为 <literal>true</literal>，则不会返回动画范围外的关键帧。</paragraph>
            <paragraph>如果 <literal>backward</literal> 为 <literal>true</literal>，则会按照反方向执行需要单向处理的方法。</paragraph>
            <paragraph>例如 <literal>find_mode</literal> 为 <reference internal="True" refid="class-animation-constant-find-mode-nearest"><inline classes="std std-ref">FIND_MODE_NEAREST</inline></reference> 时，如果查找的位置不存在关键帧，那么就会查找并返回该位置之前的第一个关键帧，而如果 <literal>backward</literal> 为 <literal>true</literal>，则会返回该位置之后的第一个关键帧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-get-interpolation-loop-wrap"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-get-interpolation-loop-wrap" names="class_animation_method_track_get_interpolation_loop_wrap"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>track_get_interpolation_loop_wrap</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-track-get-interpolation-loop-wrap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>track_idx</literal> 处的轨道环绕插值循环，则返回 <literal>true</literal>。新建的轨道默认都会环绕插值循环。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-get-interpolation-type"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-get-interpolation-type" names="class_animation_method_track_get_interpolation_type"><reference internal="True" refid="enum-animation-interpolationtype"><inline classes="std std-ref">InterpolationType</inline></reference> <strong>track_get_interpolation_type</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-track-get-interpolation-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定轨道的插值类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-get-key-count"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-get-key-count" names="class_animation_method_track_get_key_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>track_get_key_count</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-track-get-key-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定轨道中关键帧的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-get-key-time"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-get-key-time" names="class_animation_method_track_get_key_time"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>track_get_key_time</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-track-get-key-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回关键帧所在的时间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-get-key-transition"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-get-key-transition" names="class_animation_method_track_get_key_transition"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>track_get_key_transition</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-track-get-key-transition"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定关键帧的过渡曲线（缓动）（见内置数学函数 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-ease"><inline classes="std std-ref">@GlobalScope.ease</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-get-key-value"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-get-key-value" names="class_animation_method_track_get_key_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>track_get_key_value</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-track-get-key-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定轨道中给定关键帧的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-get-path"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-get-path" names="class_animation_method_track_get_path"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>track_get_path</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-track-get-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取轨道的路径。有关路径格式的详细信息，请参阅 <reference internal="True" refid="class-animation-method-track-set-path"><inline classes="std std-ref">track_set_path</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-get-type"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-get-type" names="class_animation_method_track_get_type"><reference internal="True" refid="enum-animation-tracktype"><inline classes="std std-ref">TrackType</inline></reference> <strong>track_get_type</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-track-get-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取轨道的类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-insert-key"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-insert-key" names="class_animation_method_track_insert_key"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>track_insert_key</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, transition: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1) <reference internal="True" refid="class-animation-method-track-insert-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的轨道中插入一个通用关键帧。返回关键帧索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-is-compressed"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-is-compressed" names="class_animation_method_track_is_compressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>track_is_compressed</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-track-is-compressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果轨道被压缩，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。另见 <reference internal="True" refid="class-animation-method-compress"><inline classes="std std-ref">compress</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-is-enabled"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-is-enabled" names="class_animation_method_track_is_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>track_is_enabled</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-track-is-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果启用了索引 <literal>track_idx</literal> 处的轨道，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-is-imported"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-is-imported" names="class_animation_method_track_is_imported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>track_is_imported</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-track-is-imported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的轨道是被导入的，返回 <literal>true</literal>。否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-move-down"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-move-down" names="class_animation_method_track_move_down"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_move_down</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-animation-method-track-move-down"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将轨道下移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-move-to"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-move-to" names="class_animation_method_track_move_to"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_move_to</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-animation-method-track-move-to"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将轨道 <literal>track_idx</literal> 的索引位置改为 <literal>to_idx</literal> 中定义的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-move-up"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-move-up" names="class_animation_method_track_move_up"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_move_up</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-animation-method-track-move-up"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将轨道上移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-remove-key"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-remove-key" names="class_animation_method_track_remove_key"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_remove_key</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-animation-method-track-remove-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在指定的轨道上按索引移除一个键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-remove-key-at-time"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-remove-key-at-time" names="class_animation_method_track_remove_key_at_time"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_remove_key_at_time</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-animation-method-track-remove-key-at-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定轨道中的 <literal>time</literal> 移除一个键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-set-enabled"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-set-enabled" names="class_animation_method_track_set_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_set_enabled</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-animation-method-track-set-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启用/禁用给定的轨道。轨道默认为启用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-set-imported"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-set-imported" names="class_animation_method_track_set_imported"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_set_imported</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, imported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-animation-method-track-set-imported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将指定的轨道设置为导入或不导入。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-set-interpolation-loop-wrap"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-set-interpolation-loop-wrap" names="class_animation_method_track_set_interpolation_loop_wrap"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_set_interpolation_loop_wrap</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, interpolation: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-animation-method-track-set-interpolation-loop-wrap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则 <literal>track_idx</literal> 处的轨道环绕插值循环。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-set-interpolation-type"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-set-interpolation-type" names="class_animation_method_track_set_interpolation_type"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_set_interpolation_type</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, interpolation: <reference internal="True" refid="enum-animation-interpolationtype"><inline classes="std std-ref">InterpolationType</inline></reference>) <reference internal="True" refid="class-animation-method-track-set-interpolation-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定轨道的插值类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-set-key-time"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-set-key-time" names="class_animation_method_track_set_key_time"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_set_key_time</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-animation-method-track-set-key-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置现有关键帧的时间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-set-key-transition"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-set-key-transition" names="class_animation_method_track_set_key_transition"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_set_key_transition</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transition: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-animation-method-track-set-key-transition"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定关键帧的过渡曲线（缓动）（参阅内置数学函数 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-ease"><inline classes="std std-ref">@GlobalScope.ease</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-set-key-value"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-set-key-value" names="class_animation_method_track_set_key_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_set_key_value</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-animation-method-track-set-key-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置现有关键帧的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-set-path"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-set-path" names="class_animation_method_track_set_path"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_set_path</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, path: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>) <reference internal="True" refid="class-animation-method-track-set-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Sets the path of a track. Paths must be valid scene-tree paths to a node and must be specified starting from the <reference internal="True" refuri="class_animationmixer#class-animationmixer-property-root-node"><inline classes="std std-ref">AnimationMixer.root_node</inline></reference> that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by <literal>":"</literal>.</paragraph>
            <paragraph>For example, <literal>"character/skeleton:ankle"</literal> or <literal>"character/mesh:transform/local"</literal>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-track-swap"></target>
            <paragraph classes="classref-method" ids="class-animation-method-track-swap" names="class_animation_method_track_swap"><abbreviation explanation="无返回值。">void</abbreviation> <strong>track_swap</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, with_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-animation-method-track-swap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将轨道 <literal>track_idx</literal> 的索引位置与轨道 <literal>with_idx</literal> 的索引位置互换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-value-track-get-update-mode"></target>
            <paragraph classes="classref-method" ids="class-animation-method-value-track-get-update-mode" names="class_animation_method_value_track_get_update_mode"><reference internal="True" refid="enum-animation-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>value_track_get_update_mode</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-value-track-get-update-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回值轨道的更新模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-value-track-interpolate"></target>
            <paragraph classes="classref-method" ids="class-animation-method-value-track-interpolate" names="class_animation_method_value_track_interpolate"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>value_track_interpolate</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, backward: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animation-method-value-track-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在给定时间点（单位为秒）插值后的值。<literal>track_idx</literal> 必须是值轨道的索引号。</paragraph>
            <paragraph><literal>backward</literal> 影响的主要是从轨道获取关键帧的方向，与 <reference internal="True" refid="class-animation-method-track-find-key"><inline classes="std std-ref">track_find_key</inline></reference> 的结果一致，此处的轨道指根据 <reference internal="True" refuri="class_animationmixer#class-animationmixer-constant-animation-callback-mode-discrete-force-continuous"><inline classes="std std-ref">AnimationMixer.ANIMATION_CALLBACK_MODE_DISCRETE_FORCE_CONTINUOUS</inline></reference> 转换的 <reference internal="True" refid="class-animation-constant-update-discrete"><inline classes="std std-ref">UPDATE_DISCRETE</inline></reference> 轨道。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animation-method-value-track-set-update-mode"></target>
            <paragraph classes="classref-method" ids="class-animation-method-value-track-set-update-mode" names="class_animation_method_value_track_set_update_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>value_track_set_update_mode</strong>(track_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mode: <reference internal="True" refid="enum-animation-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference>) <reference internal="True" refid="class-animation-method-value-track-set-update-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置值轨道的更新模式（请参阅 <reference internal="True" refid="enum-animation-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference>）。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
