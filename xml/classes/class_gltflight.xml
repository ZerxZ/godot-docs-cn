<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_gltflight.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/modules/gltf/doc_classes/GLTFLight.xml.</comment>
    <target refid="class-gltflight"></target>
    <section ids="gltflight class-gltflight" names="gltflight class_gltflight">
        <title>GLTFLight</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>代表 GLTF 灯光。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>代表由 <literal>KHR_lights_punctual</literal> GLTF 扩展定义的灯光。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/io/runtime_file_loading_and_saving"><inline classes="doc">运行时文件加载与保存</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="KHR_lights_punctual GLTF 扩展规格" refuri="https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_lights_punctual">KHR_lights_punctual GLTF 扩展规格</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="68"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltflight-property-color"><inline classes="std std-ref">color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltflight-property-inner-cone-angle"><inline classes="std std-ref">inner_cone_angle</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltflight-property-intensity"><inline classes="std std-ref">intensity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltflight-property-light-type"><inline classes="std std-ref">light_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltflight-property-outer-cone-angle"><inline classes="std std-ref">outer_cone_angle</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.785398</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltflight-property-range"><inline classes="std std-ref">range</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>inf</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="132"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltflight"><inline classes="std std-ref">GLTFLight</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltflight-method-from-dictionary"><inline classes="std std-ref">from_dictionary</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> dictionary <strong>)</strong> <abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltflight"><inline classes="std std-ref">GLTFLight</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltflight-method-from-node"><inline classes="std std-ref">from_node</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_light3d#class-light3d"><inline classes="std std-ref">Light3D</inline></reference> light_node <strong>)</strong> <abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltflight-method-to-dictionary"><inline classes="std std-ref">to_dictionary</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_light3d#class-light3d"><inline classes="std std-ref">Light3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltflight-method-to-node"><inline classes="std std-ref">to_node</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-gltflight-property-color"></target>
            <paragraph classes="classref-property" ids="class-gltflight-property-color" names="class_gltflight_property_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>color</strong> = <literal>Color(1, 1, 1, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_color</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>灯的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。默认为白色。黑色会导致灯光无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltflight-property-inner-cone-angle"></target>
            <paragraph classes="classref-property" ids="class-gltflight-property-inner-cone-angle" names="class_gltflight_property_inner_cone_angle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>inner_cone_angle</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_inner_cone_angle</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_inner_cone_angle</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>聚光灯下圆锥体的内角。必须小于等于外锥角。</paragraph>
            <paragraph>在这个角度内，光线处于全亮状态。在内锥角和外锥角之间，存在一个从全亮度到零亮度的过渡。创建 Godot <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference> 时，内外锥角之间的比率将被来计算光的衰减。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltflight-property-intensity"></target>
            <paragraph classes="classref-property" ids="class-gltflight-property-intensity" names="class_gltflight_property_intensity"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>intensity</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_intensity</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_intensity</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>光的强度。对于点光和聚光，用烛光（流明/立体光）表示；对于平行光，用勒克斯（流明/平方米）表示。在创建 Godot 灯光时，这个值会被转换为无单位的乘数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltflight-property-light-type"></target>
            <paragraph classes="classref-property" ids="class-gltflight-property-light-type" names="class_gltflight_property_light_type"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>light_type</strong> = <literal>""</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_light_type</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_light_type</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>灯光的类型。Godot接受的值有“point”、“spot”、“directional”，分别对应 Godot 的 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference>、<reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference>、<reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltflight-property-outer-cone-angle"></target>
            <paragraph classes="classref-property" ids="class-gltflight-property-outer-cone-angle" names="class_gltflight_property_outer_cone_angle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>outer_cone_angle</strong> = <literal>0.785398</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_outer_cone_angle</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_outer_cone_angle</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>聚光灯下圆锥体的外角。必须大于等于内锥角。</paragraph>
            <paragraph>在这个角度，光线会下降到零亮度。在内锥角和外锥角之间，存在一个从全亮度到零亮度的过渡。如果这个角度是一个半圆，那么聚光灯会向所有方向发射。创建一个 Godot <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference> 时，外锥角被用作聚光灯的角度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltflight-property-range"></target>
            <paragraph classes="classref-property" ids="class-gltflight-property-range" names="class_gltflight_property_range"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>range</strong> = <literal>inf</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_range</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_range</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>灯光的范围，超过这个范围灯光无效。没有定义范围的 GLTF 灯光的行为与无限范围的物理灯光一样。当创建 Godot 灯光时，范围限制在 4096。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-gltflight-method-from-dictionary"></target>
            <paragraph classes="classref-method" ids="class-gltflight-method-from-dictionary" names="class_gltflight_method_from_dictionary"><reference internal="True" refid="class-gltflight"><inline classes="std std-ref">GLTFLight</inline></reference> <strong>from_dictionary</strong> <strong>(</strong> <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> dictionary <strong>)</strong> <abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></paragraph>
            <paragraph>通过解析给定的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 新建 GLTFLight 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltflight-method-from-node"></target>
            <paragraph classes="classref-method" ids="class-gltflight-method-from-node" names="class_gltflight_method_from_node"><reference internal="True" refid="class-gltflight"><inline classes="std std-ref">GLTFLight</inline></reference> <strong>from_node</strong> <strong>(</strong> <reference internal="True" refuri="class_light3d#class-light3d"><inline classes="std std-ref">Light3D</inline></reference> light_node <strong>)</strong> <abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></paragraph>
            <paragraph>从给定的 Godot <reference internal="True" refuri="class_light3d#class-light3d"><inline classes="std std-ref">Light3D</inline></reference> 节点新建 GLTFLight 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltflight-method-to-dictionary"></target>
            <paragraph classes="classref-method" ids="class-gltflight-method-to-dictionary" names="class_gltflight_method_to_dictionary"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>to_dictionary</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>将这个 GLTFLight 实例序列化为 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltflight-method-to-node"></target>
            <paragraph classes="classref-method" ids="class-gltflight-method-to-node" names="class_gltflight_method_to_node"><reference internal="True" refuri="class_light3d#class-light3d"><inline classes="std std-ref">Light3D</inline></reference> <strong>to_node</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>将这个 GLTFLight 实例转换为 Godot <reference internal="True" refuri="class_light3d#class-light3d"><inline classes="std std-ref">Light3D</inline></reference> 节点。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
