<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_textserver.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TextServer.xml.</comment>
    <target refid="class-textserver"></target>
    <section ids="textserver class-textserver" names="textserver class_textserver">
        <title>TextServer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_textserverextension#class-textserverextension"><inline classes="std std-ref">TextServerExtension</inline></reference></paragraph>
        <paragraph>字体管理和文本渲染的服务器接口。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>TextServer</strong> 即文本服务器，是管理字体、渲染文本的 API 后端。</paragraph>
            <paragraph><strong>注意：</strong>这是底层 API，请考虑改用 <reference internal="True" refuri="class_textline#class-textline"><inline classes="std std-ref">TextLine</inline></reference>、<reference internal="True" refuri="class_textparagraph#class-textparagraph"><inline classes="std std-ref">TextParagraph</inline></reference>、<reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 等类。</paragraph>
            <paragraph>这是抽象类，获取当前活动的 <strong>TextServer</strong> 实例请使用如下代码：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var ts = TextServerManager.get_primary_interface()</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var ts = TextServerManager.GetPrimaryInterface();</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="395"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-create-font"><inline classes="std std-ref">create_font</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-create-font-linked-variation"><inline classes="std std-ref">create_font_linked_variation</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-create-shaped-text"><inline classes="std std-ref">create_shaped_text</inline></reference>(direction: <reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> = 0, orientation: <reference internal="True" refid="enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-draw-hex-code-box"><inline classes="std std-ref">draw_hex_code_box</inline></reference>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-clear-glyphs"><inline classes="std std-ref">font_clear_glyphs</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-clear-kerning-map"><inline classes="std std-ref">font_clear_kerning_map</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-clear-size-cache"><inline classes="std std-ref">font_clear_size_cache</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-clear-textures"><inline classes="std std-ref">font_clear_textures</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-draw-glyph"><inline classes="std std-ref">font_draw_glyph</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-draw-glyph-outline"><inline classes="std std-ref">font_draw_glyph_outline</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-antialiasing"><inline classes="std std-ref">font_get_antialiasing</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-ascent"><inline classes="std std-ref">font_get_ascent</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-baseline-offset"><inline classes="std std-ref">font_get_baseline_offset</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-char-from-glyph-index"><inline classes="std std-ref">font_get_char_from_glyph_index</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-descent"><inline classes="std std-ref">font_get_descent</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-disable-embedded-bitmaps"><inline classes="std std-ref">font_get_disable_embedded_bitmaps</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-embolden"><inline classes="std std-ref">font_get_embolden</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-face-count"><inline classes="std std-ref">font_get_face_count</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-face-index"><inline classes="std std-ref">font_get_face_index</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-fixed-size"><inline classes="std std-ref">font_get_fixed_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-fixed-size-scale-mode"><inline classes="std std-ref">font_get_fixed_size_scale_mode</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-generate-mipmaps"><inline classes="std std-ref">font_get_generate_mipmaps</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-global-oversampling"><inline classes="std std-ref">font_get_global_oversampling</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-glyph-advance"><inline classes="std std-ref">font_get_glyph_advance</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-glyph-contours"><inline classes="std std-ref">font_get_glyph_contours</inline></reference>(font: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-glyph-index"><inline classes="std std-ref">font_get_glyph_index</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, variation_selector: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-glyph-list"><inline classes="std std-ref">font_get_glyph_list</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-glyph-offset"><inline classes="std std-ref">font_get_glyph_offset</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-glyph-size"><inline classes="std std-ref">font_get_glyph_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-glyph-texture-idx"><inline classes="std std-ref">font_get_glyph_texture_idx</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-glyph-texture-rid"><inline classes="std std-ref">font_get_glyph_texture_rid</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-glyph-texture-size"><inline classes="std std-ref">font_get_glyph_texture_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-glyph-uv-rect"><inline classes="std std-ref">font_get_glyph_uv_rect</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-hinting"><inline classes="std std-ref">font_get_hinting</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-kerning"><inline classes="std std-ref">font_get_kerning</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-kerning-list"><inline classes="std std-ref">font_get_kerning_list</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-language-support-override"><inline classes="std std-ref">font_get_language_support_override</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-language-support-overrides"><inline classes="std std-ref">font_get_language_support_overrides</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-msdf-pixel-range"><inline classes="std std-ref">font_get_msdf_pixel_range</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-msdf-size"><inline classes="std std-ref">font_get_msdf_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-name"><inline classes="std std-ref">font_get_name</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-opentype-feature-overrides"><inline classes="std std-ref">font_get_opentype_feature_overrides</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-ot-name-strings"><inline classes="std std-ref">font_get_ot_name_strings</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-oversampling"><inline classes="std std-ref">font_get_oversampling</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-scale"><inline classes="std std-ref">font_get_scale</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-script-support-override"><inline classes="std std-ref">font_get_script_support_override</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-script-support-overrides"><inline classes="std std-ref">font_get_script_support_overrides</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-size-cache-list"><inline classes="std std-ref">font_get_size_cache_list</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-spacing"><inline classes="std std-ref">font_get_spacing</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-stretch"><inline classes="std std-ref">font_get_stretch</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-style"><inline classes="std std-ref">font_get_style</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-style-name"><inline classes="std std-ref">font_get_style_name</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-subpixel-positioning"><inline classes="std std-ref">font_get_subpixel_positioning</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-supported-chars"><inline classes="std std-ref">font_get_supported_chars</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-texture-count"><inline classes="std std-ref">font_get_texture_count</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-texture-image"><inline classes="std std-ref">font_get_texture_image</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-texture-offsets"><inline classes="std std-ref">font_get_texture_offsets</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-transform"><inline classes="std std-ref">font_get_transform</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-underline-position"><inline classes="std std-ref">font_get_underline_position</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-underline-thickness"><inline classes="std std-ref">font_get_underline_thickness</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-variation-coordinates"><inline classes="std std-ref">font_get_variation_coordinates</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-get-weight"><inline classes="std std-ref">font_get_weight</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-has-char"><inline classes="std std-ref">font_has_char</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-is-allow-system-fallback"><inline classes="std std-ref">font_is_allow_system_fallback</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-is-force-autohinter"><inline classes="std std-ref">font_is_force_autohinter</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-is-language-supported"><inline classes="std std-ref">font_is_language_supported</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-is-multichannel-signed-distance-field"><inline classes="std std-ref">font_is_multichannel_signed_distance_field</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-is-script-supported"><inline classes="std std-ref">font_is_script_supported</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-remove-glyph"><inline classes="std std-ref">font_remove_glyph</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-remove-kerning"><inline classes="std std-ref">font_remove_kerning</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-remove-language-support-override"><inline classes="std std-ref">font_remove_language_support_override</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-remove-script-support-override"><inline classes="std std-ref">font_remove_script_support_override</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-remove-size-cache"><inline classes="std std-ref">font_remove_size_cache</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-remove-texture"><inline classes="std std-ref">font_remove_texture</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-render-glyph"><inline classes="std std-ref">font_render_glyph</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-render-range"><inline classes="std std-ref">font_render_range</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-allow-system-fallback"><inline classes="std std-ref">font_set_allow_system_fallback</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, allow_system_fallback: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-antialiasing"><inline classes="std std-ref">font_set_antialiasing</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, antialiasing: <reference internal="True" refid="enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-ascent"><inline classes="std std-ref">font_set_ascent</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, ascent: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-baseline-offset"><inline classes="std std-ref">font_set_baseline_offset</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, baseline_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-data"><inline classes="std std-ref">font_set_data</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-descent"><inline classes="std std-ref">font_set_descent</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, descent: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-disable-embedded-bitmaps"><inline classes="std std-ref">font_set_disable_embedded_bitmaps</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, disable_embedded_bitmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-embolden"><inline classes="std std-ref">font_set_embolden</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-face-index"><inline classes="std std-ref">font_set_face_index</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, face_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-fixed-size"><inline classes="std std-ref">font_set_fixed_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fixed_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-fixed-size-scale-mode"><inline classes="std std-ref">font_set_fixed_size_scale_mode</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fixed_size_scale_mode: <reference internal="True" refid="enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-force-autohinter"><inline classes="std std-ref">font_set_force_autohinter</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, force_autohinter: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-generate-mipmaps"><inline classes="std std-ref">font_set_generate_mipmaps</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, generate_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-global-oversampling"><inline classes="std std-ref">font_set_global_oversampling</inline></reference>(oversampling: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-glyph-advance"><inline classes="std std-ref">font_set_glyph_advance</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, advance: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-glyph-offset"><inline classes="std std-ref">font_set_glyph_offset</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-glyph-size"><inline classes="std std-ref">font_set_glyph_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gl_size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-glyph-texture-idx"><inline classes="std std-ref">font_set_glyph_texture_idx</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, texture_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-glyph-uv-rect"><inline classes="std std-ref">font_set_glyph_uv_rect</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, uv_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-hinting"><inline classes="std std-ref">font_set_hinting</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, hinting: <reference internal="True" refid="enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-kerning"><inline classes="std std-ref">font_set_kerning</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, kerning: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-language-support-override"><inline classes="std std-ref">font_set_language_support_override</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-msdf-pixel-range"><inline classes="std std-ref">font_set_msdf_pixel_range</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msdf_pixel_range: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-msdf-size"><inline classes="std std-ref">font_set_msdf_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msdf_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-multichannel-signed-distance-field"><inline classes="std std-ref">font_set_multichannel_signed_distance_field</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msdf: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-name"><inline classes="std std-ref">font_set_name</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-opentype-feature-overrides"><inline classes="std std-ref">font_set_opentype_feature_overrides</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, overrides: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-oversampling"><inline classes="std std-ref">font_set_oversampling</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, oversampling: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-scale"><inline classes="std std-ref">font_set_scale</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-script-support-override"><inline classes="std std-ref">font_set_script_support_override</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-spacing"><inline classes="std std-ref">font_set_spacing</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-stretch"><inline classes="std std-ref">font_set_stretch</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, weight: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-style"><inline classes="std std-ref">font_set_style</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, style: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-style-name"><inline classes="std std-ref">font_set_style_name</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-subpixel-positioning"><inline classes="std std-ref">font_set_subpixel_positioning</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, subpixel_positioning: <reference internal="True" refid="enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-texture-image"><inline classes="std std-ref">font_set_texture_image</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-texture-offsets"><inline classes="std std-ref">font_set_texture_offsets</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-transform"><inline classes="std std-ref">font_set_transform</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-underline-position"><inline classes="std std-ref">font_set_underline_position</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, underline_position: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-underline-thickness"><inline classes="std std-ref">font_set_underline_thickness</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, underline_thickness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-variation-coordinates"><inline classes="std std-ref">font_set_variation_coordinates</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, variation_coordinates: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-set-weight"><inline classes="std std-ref">font_set_weight</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, weight: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-supported-feature-list"><inline classes="std std-ref">font_supported_feature_list</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-font-supported-variation-list"><inline classes="std std-ref">font_supported_variation_list</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-format-number"><inline classes="std std-ref">format_number</inline></reference>(number: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-get-features"><inline classes="std std-ref">get_features</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-get-hex-code-box-size"><inline classes="std std-ref">get_hex_code_box_size</inline></reference>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-get-name"><inline classes="std std-ref">get_name</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-get-support-data-filename"><inline classes="std std-ref">get_support_data_filename</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-get-support-data-info"><inline classes="std std-ref">get_support_data_info</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-has"><inline classes="std std-ref">has</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-has-feature"><inline classes="std std-ref">has_feature</inline></reference>(feature: <reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-is-confusable"><inline classes="std std-ref">is_confusable</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, dict: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-is-locale-right-to-left"><inline classes="std std-ref">is_locale_right_to_left</inline></reference>(locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-is-valid-identifier"><inline classes="std std-ref">is_valid_identifier</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-is-valid-letter"><inline classes="std std-ref">is_valid_letter</inline></reference>(unicode: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-load-support-data"><inline classes="std std-ref">load_support_data</inline></reference>(filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-name-to-tag"><inline classes="std std-ref">name_to_tag</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-parse-number"><inline classes="std std-ref">parse_number</inline></reference>(number: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-parse-structured-text"><inline classes="std std-ref">parse_structured_text</inline></reference>(parser_type: <reference internal="True" refid="enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference>, args: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-percent-sign"><inline classes="std std-ref">percent_sign</inline></reference>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-save-support-data"><inline classes="std std-ref">save_support_data</inline></reference>(filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-get-span-count"><inline classes="std std-ref">shaped_get_span_count</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-get-span-meta"><inline classes="std std-ref">shaped_get_span_meta</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-set-span-update-font"><inline classes="std std-ref">shaped_set_span_update_font</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, fonts: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>], size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, opentype_features: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> = {})</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-add-object"><inline classes="std std-ref">shaped_text_add_object</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> = 5, length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-add-string"><inline classes="std std-ref">shaped_text_add_string</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, fonts: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>], size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, opentype_features: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> = {}, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", meta: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-clear"><inline classes="std std-ref">shaped_text_clear</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-closest-character-pos"><inline classes="std std-ref">shaped_text_closest_character_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-draw"><inline classes="std std-ref">shaped_text_draw</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, clip_l: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, clip_r: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-draw-outline"><inline classes="std std-ref">shaped_text_draw_outline</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, clip_l: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, clip_r: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-fit-to-width"><inline classes="std std-ref">shaped_text_fit_to_width</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, justification_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] = 3)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-ascent"><inline classes="std std-ref">shaped_text_get_ascent</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-carets"><inline classes="std std-ref">shaped_text_get_carets</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-character-breaks"><inline classes="std std-ref">shaped_text_get_character_breaks</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-custom-ellipsis"><inline classes="std std-ref">shaped_text_get_custom_ellipsis</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-custom-punctuation"><inline classes="std std-ref">shaped_text_get_custom_punctuation</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-descent"><inline classes="std std-ref">shaped_text_get_descent</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-direction"><inline classes="std std-ref">shaped_text_get_direction</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-dominant-direction-in-range"><inline classes="std std-ref">shaped_text_get_dominant_direction_in_range</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-ellipsis-glyph-count"><inline classes="std std-ref">shaped_text_get_ellipsis_glyph_count</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-ellipsis-glyphs"><inline classes="std std-ref">shaped_text_get_ellipsis_glyphs</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-ellipsis-pos"><inline classes="std std-ref">shaped_text_get_ellipsis_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-glyph-count"><inline classes="std std-ref">shaped_text_get_glyph_count</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-glyphs"><inline classes="std std-ref">shaped_text_get_glyphs</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-grapheme-bounds"><inline classes="std std-ref">shaped_text_get_grapheme_bounds</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-inferred-direction"><inline classes="std std-ref">shaped_text_get_inferred_direction</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-line-breaks"><inline classes="std std-ref">shaped_text_get_line_breaks</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, break_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>] = 3) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-line-breaks-adv"><inline classes="std std-ref">shaped_text_get_line_breaks_adv</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, once: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, break_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>] = 3) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-object-glyph"><inline classes="std std-ref">shaped_text_get_object_glyph</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-object-range"><inline classes="std std-ref">shaped_text_get_object_range</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-object-rect"><inline classes="std std-ref">shaped_text_get_object_rect</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-objects"><inline classes="std std-ref">shaped_text_get_objects</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-orientation"><inline classes="std std-ref">shaped_text_get_orientation</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-parent"><inline classes="std std-ref">shaped_text_get_parent</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-preserve-control"><inline classes="std std-ref">shaped_text_get_preserve_control</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-preserve-invalid"><inline classes="std std-ref">shaped_text_get_preserve_invalid</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-range"><inline classes="std std-ref">shaped_text_get_range</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-selection"><inline classes="std std-ref">shaped_text_get_selection</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-size"><inline classes="std std-ref">shaped_text_get_size</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-spacing"><inline classes="std std-ref">shaped_text_get_spacing</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-trim-pos"><inline classes="std std-ref">shaped_text_get_trim_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-underline-position"><inline classes="std std-ref">shaped_text_get_underline_position</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-underline-thickness"><inline classes="std std-ref">shaped_text_get_underline_thickness</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-width"><inline classes="std std-ref">shaped_text_get_width</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-get-word-breaks"><inline classes="std std-ref">shaped_text_get_word_breaks</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, grapheme_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>] = 264, skip_grapheme_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>] = 4) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-has-visible-chars"><inline classes="std std-ref">shaped_text_has_visible_chars</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-hit-test-grapheme"><inline classes="std std-ref">shaped_text_hit_test_grapheme</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, coords: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-hit-test-position"><inline classes="std std-ref">shaped_text_hit_test_position</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, coords: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-is-ready"><inline classes="std std-ref">shaped_text_is_ready</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-next-character-pos"><inline classes="std std-ref">shaped_text_next_character_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-next-grapheme-pos"><inline classes="std std-ref">shaped_text_next_grapheme_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-overrun-trim-to-width"><inline classes="std std-ref">shaped_text_overrun_trim_to_width</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0, overrun_trim_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-textoverrunflag"><inline classes="std std-ref">TextOverrunFlag</inline></reference>] = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-prev-character-pos"><inline classes="std std-ref">shaped_text_prev_character_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-prev-grapheme-pos"><inline classes="std std-ref">shaped_text_prev_grapheme_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-resize-object"><inline classes="std std-ref">shaped_text_resize_object</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> = 5, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-set-bidi-override"><inline classes="std std-ref">shaped_text_set_bidi_override</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, override: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-set-custom-ellipsis"><inline classes="std std-ref">shaped_text_set_custom_ellipsis</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-set-custom-punctuation"><inline classes="std std-ref">shaped_text_set_custom_punctuation</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, punct: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-set-direction"><inline classes="std std-ref">shaped_text_set_direction</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, direction: <reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-set-orientation"><inline classes="std std-ref">shaped_text_set_orientation</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, orientation: <reference internal="True" refid="enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-set-preserve-control"><inline classes="std std-ref">shaped_text_set_preserve_control</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-set-preserve-invalid"><inline classes="std std-ref">shaped_text_set_preserve_invalid</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-set-spacing"><inline classes="std std-ref">shaped_text_set_spacing</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-shape"><inline classes="std std-ref">shaped_text_shape</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-sort-logical"><inline classes="std std-ref">shaped_text_sort_logical</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-substr"><inline classes="std std-ref">shaped_text_substr</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-shaped-text-tab-align"><inline classes="std std-ref">shaped_text_tab_align</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, tab_stops: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-spoof-check"><inline classes="std std-ref">spoof_check</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-string-get-character-breaks"><inline classes="std std-ref">string_get_character_breaks</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-string-get-word-breaks"><inline classes="std std-ref">string_get_word_breaks</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", chars_per_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-string-to-lower"><inline classes="std std-ref">string_to_lower</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-string-to-title"><inline classes="std std-ref">string_to_title</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-string-to-upper"><inline classes="std std-ref">string_to_upper</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-strip-diacritics"><inline classes="std std-ref">strip_diacritics</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserver-method-tag-to-name"><inline classes="std std-ref">tag_to_name</inline></reference>(tag: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-textserver-fontantialiasing"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-fontantialiasing" names="enum_textserver_fontantialiasing">enum <strong>FontAntialiasing</strong>: <reference internal="True" refid="enum-textserver-fontantialiasing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-font-antialiasing-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-font-antialiasing-none" names="class_textserver_constant_font_antialiasing_none"><reference internal="True" refid="enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference> <strong>FONT_ANTIALIASING_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>字体字形栅格化为 1 位的位图。</paragraph>
            <target refid="class-textserver-constant-font-antialiasing-gray"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-font-antialiasing-gray" names="class_textserver_constant_font_antialiasing_gray"><reference internal="True" refid="enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference> <strong>FONT_ANTIALIASING_GRAY</strong> = <literal>1</literal></paragraph>
            <paragraph>字体字形栅格化为 8 位的灰度抗锯齿位图。</paragraph>
            <target refid="class-textserver-constant-font-antialiasing-lcd"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-font-antialiasing-lcd" names="class_textserver_constant_font_antialiasing_lcd"><reference internal="True" refid="enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference> <strong>FONT_ANTIALIASING_LCD</strong> = <literal>2</literal></paragraph>
            <paragraph>字体字形针对 LCD 屏幕栅格化。</paragraph>
            <paragraph>LCD 次像素布局由项目设置 <literal>gui/theme/lcd_subpixel_layout</literal> 的值决定。</paragraph>
            <paragraph>LCD 次像素抗锯齿模式仅适用于在 2D 中渲染横向、无缩放的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-fontlcdsubpixellayout"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-fontlcdsubpixellayout" names="enum_textserver_fontlcdsubpixellayout">enum <strong>FontLCDSubpixelLayout</strong>: <reference internal="True" refid="enum-textserver-fontlcdsubpixellayout"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-font-lcd-subpixel-layout-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-font-lcd-subpixel-layout-none" names="class_textserver_constant_font_lcd_subpixel_layout_none"><reference internal="True" refid="enum-textserver-fontlcdsubpixellayout"><inline classes="std std-ref">FontLCDSubpixelLayout</inline></reference> <strong>FONT_LCD_SUBPIXEL_LAYOUT_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>未知或不支持的次像素布局，禁用 LCD 次像素抗锯齿。</paragraph>
            <target refid="class-textserver-constant-font-lcd-subpixel-layout-hrgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-font-lcd-subpixel-layout-hrgb" names="class_textserver_constant_font_lcd_subpixel_layout_hrgb"><reference internal="True" refid="enum-textserver-fontlcdsubpixellayout"><inline classes="std std-ref">FontLCDSubpixelLayout</inline></reference> <strong>FONT_LCD_SUBPIXEL_LAYOUT_HRGB</strong> = <literal>1</literal></paragraph>
            <paragraph>水平 RGB 次像素布局。</paragraph>
            <target refid="class-textserver-constant-font-lcd-subpixel-layout-hbgr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-font-lcd-subpixel-layout-hbgr" names="class_textserver_constant_font_lcd_subpixel_layout_hbgr"><reference internal="True" refid="enum-textserver-fontlcdsubpixellayout"><inline classes="std std-ref">FontLCDSubpixelLayout</inline></reference> <strong>FONT_LCD_SUBPIXEL_LAYOUT_HBGR</strong> = <literal>2</literal></paragraph>
            <paragraph>水平 BGR 次像素布局。</paragraph>
            <target refid="class-textserver-constant-font-lcd-subpixel-layout-vrgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-font-lcd-subpixel-layout-vrgb" names="class_textserver_constant_font_lcd_subpixel_layout_vrgb"><reference internal="True" refid="enum-textserver-fontlcdsubpixellayout"><inline classes="std std-ref">FontLCDSubpixelLayout</inline></reference> <strong>FONT_LCD_SUBPIXEL_LAYOUT_VRGB</strong> = <literal>3</literal></paragraph>
            <paragraph>垂直 RGB 次像素布局。</paragraph>
            <target refid="class-textserver-constant-font-lcd-subpixel-layout-vbgr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-font-lcd-subpixel-layout-vbgr" names="class_textserver_constant_font_lcd_subpixel_layout_vbgr"><reference internal="True" refid="enum-textserver-fontlcdsubpixellayout"><inline classes="std std-ref">FontLCDSubpixelLayout</inline></reference> <strong>FONT_LCD_SUBPIXEL_LAYOUT_VBGR</strong> = <literal>4</literal></paragraph>
            <paragraph>垂直 BGR 次像素布局。</paragraph>
            <target refid="class-textserver-constant-font-lcd-subpixel-layout-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-font-lcd-subpixel-layout-max" names="class_textserver_constant_font_lcd_subpixel_layout_max"><reference internal="True" refid="enum-textserver-fontlcdsubpixellayout"><inline classes="std std-ref">FontLCDSubpixelLayout</inline></reference> <strong>FONT_LCD_SUBPIXEL_LAYOUT_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-textserver-fontlcdsubpixellayout"><inline classes="std std-ref">FontLCDSubpixelLayout</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-direction"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-direction" names="enum_textserver_direction">enum <strong>Direction</strong>: <reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-direction-auto"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-direction-auto" names="class_textserver_constant_direction_auto"><reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>DIRECTION_AUTO</strong> = <literal>0</literal></paragraph>
            <paragraph>文本的书写方向由根据内容和当前区域设置确定。</paragraph>
            <target refid="class-textserver-constant-direction-ltr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-direction-ltr" names="class_textserver_constant_direction_ltr"><reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>DIRECTION_LTR</strong> = <literal>1</literal></paragraph>
            <paragraph>文本从左至右书写。</paragraph>
            <target refid="class-textserver-constant-direction-rtl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-direction-rtl" names="class_textserver_constant_direction_rtl"><reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>DIRECTION_RTL</strong> = <literal>2</literal></paragraph>
            <paragraph>文本从右至左书写。</paragraph>
            <target refid="class-textserver-constant-direction-inherited"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-direction-inherited" names="class_textserver_constant_direction_inherited"><reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>DIRECTION_INHERITED</strong> = <literal>3</literal></paragraph>
            <paragraph>文本的书写方向与基础字符串书写方向一致。仅用于 BiDi 覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-orientation"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-orientation" names="enum_textserver_orientation">enum <strong>Orientation</strong>: <reference internal="True" refid="enum-textserver-orientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-orientation-horizontal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-orientation-horizontal" names="class_textserver_constant_orientation_horizontal"><reference internal="True" refid="enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> <strong>ORIENTATION_HORIZONTAL</strong> = <literal>0</literal></paragraph>
            <paragraph>文本水平书写。</paragraph>
            <target refid="class-textserver-constant-orientation-vertical"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-orientation-vertical" names="class_textserver_constant_orientation_vertical"><reference internal="True" refid="enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> <strong>ORIENTATION_VERTICAL</strong> = <literal>1</literal></paragraph>
            <paragraph>从左至右的文本从上到下书写。</paragraph>
            <paragraph>从右至左的文本从下到上书写。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-justificationflag"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-justificationflag" names="enum_textserver_justificationflag">flags <strong>JustificationFlag</strong>: <reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-justification-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-justification-none" names="class_textserver_constant_justification_none"><reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference> <strong>JUSTIFICATION_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>不两端对齐文本。</paragraph>
            <target refid="class-textserver-constant-justification-kashida"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-justification-kashida" names="class_textserver_constant_justification_kashida"><reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference> <strong>JUSTIFICATION_KASHIDA</strong> = <literal>1</literal></paragraph>
            <paragraph>通过添加和移除 Kashida 来两端对齐文本。</paragraph>
            <target refid="class-textserver-constant-justification-word-bound"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-justification-word-bound" names="class_textserver_constant_justification_word_bound"><reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference> <strong>JUSTIFICATION_WORD_BOUND</strong> = <literal>2</literal></paragraph>
            <paragraph>通过更改单词之间空格的宽度来两端对齐文本。</paragraph>
            <target refid="class-textserver-constant-justification-trim-edge-spaces"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-justification-trim-edge-spaces" names="class_textserver_constant_justification_trim_edge_spaces"><reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference> <strong>JUSTIFICATION_TRIM_EDGE_SPACES</strong> = <literal>4</literal></paragraph>
            <paragraph>从两端对齐的文本中移除前缀和后缀的空格。</paragraph>
            <target refid="class-textserver-constant-justification-after-last-tab"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-justification-after-last-tab" names="class_textserver_constant_justification_after_last_tab"><reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference> <strong>JUSTIFICATION_AFTER_LAST_TAB</strong> = <literal>8</literal></paragraph>
            <paragraph>仅对最后一个制表符之后的文本应用两端对齐。</paragraph>
            <target refid="class-textserver-constant-justification-constrain-ellipsis"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-justification-constrain-ellipsis" names="class_textserver_constant_justification_constrain_ellipsis"><reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference> <strong>JUSTIFICATION_CONSTRAIN_ELLIPSIS</strong> = <literal>16</literal></paragraph>
            <paragraph>使用省略号对修剪行应用对齐。</paragraph>
            <target refid="class-textserver-constant-justification-skip-last-line"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-justification-skip-last-line" names="class_textserver_constant_justification_skip_last_line"><reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference> <strong>JUSTIFICATION_SKIP_LAST_LINE</strong> = <literal>32</literal></paragraph>
            <paragraph>段落中的最后一行不应用两端对齐。</paragraph>
            <target refid="class-textserver-constant-justification-skip-last-line-with-visible-chars"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-justification-skip-last-line-with-visible-chars" names="class_textserver_constant_justification_skip_last_line_with_visible_chars"><reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference> <strong>JUSTIFICATION_SKIP_LAST_LINE_WITH_VISIBLE_CHARS</strong> = <literal>64</literal></paragraph>
            <paragraph>段落中存在可见字符的最后一行不应用两端对齐（优先于 <reference internal="True" refid="class-textserver-constant-justification-skip-last-line"><inline classes="std std-ref">JUSTIFICATION_SKIP_LAST_LINE</inline></reference>）。</paragraph>
            <target refid="class-textserver-constant-justification-do-not-skip-single-line"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-justification-do-not-skip-single-line" names="class_textserver_constant_justification_do_not_skip_single_line"><reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference> <strong>JUSTIFICATION_DO_NOT_SKIP_SINGLE_LINE</strong> = <literal>128</literal></paragraph>
            <paragraph>始终对只有一行的段落应用两端对齐（忽略 <reference internal="True" refid="class-textserver-constant-justification-skip-last-line"><inline classes="std std-ref">JUSTIFICATION_SKIP_LAST_LINE</inline></reference> 和 <reference internal="True" refid="class-textserver-constant-justification-skip-last-line-with-visible-chars"><inline classes="std std-ref">JUSTIFICATION_SKIP_LAST_LINE_WITH_VISIBLE_CHARS</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-autowrapmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-autowrapmode" names="enum_textserver_autowrapmode">enum <strong>AutowrapMode</strong>: <reference internal="True" refid="enum-textserver-autowrapmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-autowrap-off"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-autowrap-off" names="class_textserver_constant_autowrap_off"><reference internal="True" refid="enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>AUTOWRAP_OFF</strong> = <literal>0</literal></paragraph>
            <paragraph>自动换行已禁用。</paragraph>
            <target refid="class-textserver-constant-autowrap-arbitrary"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-autowrap-arbitrary" names="class_textserver_constant_autowrap_arbitrary"><reference internal="True" refid="enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>AUTOWRAP_ARBITRARY</strong> = <literal>1</literal></paragraph>
            <paragraph>让文本在节点的边界矩形内自动换行，允许在任意位置断行，在空间非常有限的情况下非常有用。</paragraph>
            <target refid="class-textserver-constant-autowrap-word"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-autowrap-word" names="class_textserver_constant_autowrap_word"><reference internal="True" refid="enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>AUTOWRAP_WORD</strong> = <literal>2</literal></paragraph>
            <paragraph>让文本在节点的边界矩形内自动换行，允许在单词之间进行软换行。</paragraph>
            <target refid="class-textserver-constant-autowrap-word-smart"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-autowrap-word-smart" names="class_textserver_constant_autowrap_word_smart"><reference internal="True" refid="enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>AUTOWRAP_WORD_SMART</strong> = <literal>3</literal></paragraph>
            <paragraph>行为与 <reference internal="True" refid="class-textserver-constant-autowrap-word"><inline classes="std std-ref">AUTOWRAP_WORD</inline></reference> 类似，但如果一行的大小无法放下该单词，则会强制断开该单词。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-linebreakflag"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-linebreakflag" names="enum_textserver_linebreakflag">flags <strong>LineBreakFlag</strong>: <reference internal="True" refid="enum-textserver-linebreakflag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-break-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-break-none" names="class_textserver_constant_break_none"><reference internal="True" refid="enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference> <strong>BREAK_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>不换行。</paragraph>
            <target refid="class-textserver-constant-break-mandatory"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-break-mandatory" names="class_textserver_constant_break_mandatory"><reference internal="True" refid="enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference> <strong>BREAK_MANDATORY</strong> = <literal>1</literal></paragraph>
            <paragraph>在强制换行符处换行（例如 <literal>"\n"</literal>）。</paragraph>
            <target refid="class-textserver-constant-break-word-bound"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-break-word-bound" names="class_textserver_constant_break_word_bound"><reference internal="True" refid="enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference> <strong>BREAK_WORD_BOUND</strong> = <literal>2</literal></paragraph>
            <paragraph>在单词之间换行。</paragraph>
            <target refid="class-textserver-constant-break-grapheme-bound"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-break-grapheme-bound" names="class_textserver_constant_break_grapheme_bound"><reference internal="True" refid="enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference> <strong>BREAK_GRAPHEME_BOUND</strong> = <literal>4</literal></paragraph>
            <paragraph>在任何不相连的字素之间换行。</paragraph>
            <target refid="class-textserver-constant-break-adaptive"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-break-adaptive" names="class_textserver_constant_break_adaptive"><reference internal="True" refid="enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference> <strong>BREAK_ADAPTIVE</strong> = <literal>8</literal></paragraph>
            <paragraph>只应与 <reference internal="True" refid="class-textserver-constant-break-word-bound"><inline classes="std std-ref">BREAK_WORD_BOUND</inline></reference> 一起使用，如果不可能在单词之间换行，则在任何不相连的字素之间换行。</paragraph>
            <target refid="class-textserver-constant-break-trim-edge-spaces"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-break-trim-edge-spaces" names="class_textserver_constant_break_trim_edge_spaces"><reference internal="True" refid="enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference> <strong>BREAK_TRIM_EDGE_SPACES</strong> = <literal>16</literal></paragraph>
            <paragraph>移除每一行头尾的空格。</paragraph>
            <target refid="class-textserver-constant-break-trim-indent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-break-trim-indent" names="class_textserver_constant_break_trim_indent"><reference internal="True" refid="enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference> <strong>BREAK_TRIM_INDENT</strong> = <literal>32</literal></paragraph>
            <paragraph>从第一行之后的所有行中减去第一行的缩进宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-visiblecharactersbehavior"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-visiblecharactersbehavior" names="enum_textserver_visiblecharactersbehavior">enum <strong>VisibleCharactersBehavior</strong>: <reference internal="True" refid="enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-vc-chars-before-shaping"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-vc-chars-before-shaping" names="class_textserver_constant_vc_chars_before_shaping"><reference internal="True" refid="enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference> <strong>VC_CHARS_BEFORE_SHAPING</strong> = <literal>0</literal></paragraph>
            <paragraph>塑形前截断文本。例如，增加 <reference internal="True" refuri="class_label#class-label-property-visible-characters"><inline classes="std std-ref">Label.visible_characters</inline></reference> 或 <reference internal="True" refuri="class_richtextlabel#class-richtextlabel-property-visible-characters"><inline classes="std std-ref">RichTextLabel.visible_characters</inline></reference> 的值在视觉上会与输入该文本等价。</paragraph>
            <target refid="class-textserver-constant-vc-chars-after-shaping"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-vc-chars-after-shaping" names="class_textserver_constant_vc_chars_after_shaping"><reference internal="True" refid="enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference> <strong>VC_CHARS_AFTER_SHAPING</strong> = <literal>1</literal></paragraph>
            <paragraph>显示映射到文本开头的前 <reference internal="True" refuri="class_label#class-label-property-visible-characters"><inline classes="std std-ref">Label.visible_characters</inline></reference> 或 <reference internal="True" refuri="class_richtextlabel#class-richtextlabel-property-visible-characters"><inline classes="std std-ref">RichTextLabel.visible_characters</inline></reference> 个字符的字形。</paragraph>
            <target refid="class-textserver-constant-vc-glyphs-auto"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-vc-glyphs-auto" names="class_textserver_constant_vc_glyphs_auto"><reference internal="True" refid="enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference> <strong>VC_GLYPHS_AUTO</strong> = <literal>2</literal></paragraph>
            <paragraph>显示字形数量由 <reference internal="True" refuri="class_label#class-label-property-visible-ratio"><inline classes="std std-ref">Label.visible_ratio</inline></reference> 或 <reference internal="True" refuri="class_richtextlabel#class-richtextlabel-property-visible-ratio"><inline classes="std std-ref">RichTextLabel.visible_ratio</inline></reference> 决定，从左至右计数还是从右至左计数由 <reference internal="True" refuri="class_control#class-control-property-layout-direction"><inline classes="std std-ref">Control.layout_direction</inline></reference> 的值决定。</paragraph>
            <target refid="class-textserver-constant-vc-glyphs-ltr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-vc-glyphs-ltr" names="class_textserver_constant_vc_glyphs_ltr"><reference internal="True" refid="enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference> <strong>VC_GLYPHS_LTR</strong> = <literal>3</literal></paragraph>
            <paragraph>显示字形数量由 <reference internal="True" refuri="class_label#class-label-property-visible-ratio"><inline classes="std std-ref">Label.visible_ratio</inline></reference> 或 <reference internal="True" refuri="class_richtextlabel#class-richtextlabel-property-visible-ratio"><inline classes="std std-ref">RichTextLabel.visible_ratio</inline></reference> 决定，从左侧开始计数。</paragraph>
            <target refid="class-textserver-constant-vc-glyphs-rtl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-vc-glyphs-rtl" names="class_textserver_constant_vc_glyphs_rtl"><reference internal="True" refid="enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference> <strong>VC_GLYPHS_RTL</strong> = <literal>4</literal></paragraph>
            <paragraph>显示字形数量由 <reference internal="True" refuri="class_label#class-label-property-visible-ratio"><inline classes="std std-ref">Label.visible_ratio</inline></reference> 或 <reference internal="True" refuri="class_richtextlabel#class-richtextlabel-property-visible-ratio"><inline classes="std std-ref">RichTextLabel.visible_ratio</inline></reference> 决定，从右侧开始计数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-overrunbehavior"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-overrunbehavior" names="enum_textserver_overrunbehavior">enum <strong>OverrunBehavior</strong>: <reference internal="True" refid="enum-textserver-overrunbehavior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-overrun-no-trimming"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-overrun-no-trimming" names="class_textserver_constant_overrun_no_trimming"><reference internal="True" refid="enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>OVERRUN_NO_TRIMMING</strong> = <literal>0</literal></paragraph>
            <paragraph>不执行文本修剪。</paragraph>
            <target refid="class-textserver-constant-overrun-trim-char"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-overrun-trim-char" names="class_textserver_constant_overrun_trim_char"><reference internal="True" refid="enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>OVERRUN_TRIM_CHAR</strong> = <literal>1</literal></paragraph>
            <paragraph>逐字符修剪文本。</paragraph>
            <target refid="class-textserver-constant-overrun-trim-word"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-overrun-trim-word" names="class_textserver_constant_overrun_trim_word"><reference internal="True" refid="enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>OVERRUN_TRIM_WORD</strong> = <literal>2</literal></paragraph>
            <paragraph>逐单词修剪文本。</paragraph>
            <target refid="class-textserver-constant-overrun-trim-ellipsis"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-overrun-trim-ellipsis" names="class_textserver_constant_overrun_trim_ellipsis"><reference internal="True" refid="enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>OVERRUN_TRIM_ELLIPSIS</strong> = <literal>3</literal></paragraph>
            <paragraph>逐字符修剪文本，并通过添加省略号来表示部分文本已隐藏。</paragraph>
            <target refid="class-textserver-constant-overrun-trim-word-ellipsis"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-overrun-trim-word-ellipsis" names="class_textserver_constant_overrun_trim_word_ellipsis"><reference internal="True" refid="enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>OVERRUN_TRIM_WORD_ELLIPSIS</strong> = <literal>4</literal></paragraph>
            <paragraph>逐单词修剪文本，并通过添加省略号来表示部分文本已隐藏。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-textoverrunflag"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-textoverrunflag" names="enum_textserver_textoverrunflag">flags <strong>TextOverrunFlag</strong>: <reference internal="True" refid="enum-textserver-textoverrunflag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-overrun-no-trim"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-overrun-no-trim" names="class_textserver_constant_overrun_no_trim"><reference internal="True" refid="enum-textserver-textoverrunflag"><inline classes="std std-ref">TextOverrunFlag</inline></reference> <strong>OVERRUN_NO_TRIM</strong> = <literal>0</literal></paragraph>
            <paragraph>不执行修剪。</paragraph>
            <target refid="class-textserver-constant-overrun-trim"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-overrun-trim" names="class_textserver_constant_overrun_trim"><reference internal="True" refid="enum-textserver-textoverrunflag"><inline classes="std std-ref">TextOverrunFlag</inline></reference> <strong>OVERRUN_TRIM</strong> = <literal>1</literal></paragraph>
            <paragraph>当文本超过给定宽度时，修剪文本。</paragraph>
            <target refid="class-textserver-constant-overrun-trim-word-only"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-overrun-trim-word-only" names="class_textserver_constant_overrun_trim_word_only"><reference internal="True" refid="enum-textserver-textoverrunflag"><inline classes="std std-ref">TextOverrunFlag</inline></reference> <strong>OVERRUN_TRIM_WORD_ONLY</strong> = <literal>2</literal></paragraph>
            <paragraph>逐词修剪文本，而不是逐字素修剪文本。</paragraph>
            <target refid="class-textserver-constant-overrun-add-ellipsis"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-overrun-add-ellipsis" names="class_textserver_constant_overrun_add_ellipsis"><reference internal="True" refid="enum-textserver-textoverrunflag"><inline classes="std std-ref">TextOverrunFlag</inline></reference> <strong>OVERRUN_ADD_ELLIPSIS</strong> = <literal>4</literal></paragraph>
            <paragraph>决定是否应在文本末尾添加省略号。</paragraph>
            <target refid="class-textserver-constant-overrun-enforce-ellipsis"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-overrun-enforce-ellipsis" names="class_textserver_constant_overrun_enforce_ellipsis"><reference internal="True" refid="enum-textserver-textoverrunflag"><inline classes="std std-ref">TextOverrunFlag</inline></reference> <strong>OVERRUN_ENFORCE_ELLIPSIS</strong> = <literal>8</literal></paragraph>
            <paragraph>决定是否应在文本末尾强制添加省略号，该省略号无法被隐藏。</paragraph>
            <target refid="class-textserver-constant-overrun-justification-aware"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-overrun-justification-aware" names="class_textserver_constant_overrun_justification_aware"><reference internal="True" refid="enum-textserver-textoverrunflag"><inline classes="std std-ref">TextOverrunFlag</inline></reference> <strong>OVERRUN_JUSTIFICATION_AWARE</strong> = <literal>16</literal></paragraph>
            <paragraph>在尝试修剪文本之前考虑文本是否对齐（请参阅 <reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-graphemeflag"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-graphemeflag" names="enum_textserver_graphemeflag">flags <strong>GraphemeFlag</strong>: <reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-grapheme-is-valid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-valid" names="class_textserver_constant_grapheme_is_valid"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_VALID</strong> = <literal>1</literal></paragraph>
            <paragraph>字素由字体支持，并且可以被绘制。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-rtl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-rtl" names="class_textserver_constant_grapheme_is_rtl"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_RTL</strong> = <literal>2</literal></paragraph>
            <paragraph>字素是从右至左或从下至上书写的一部分。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-virtual"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-virtual" names="class_textserver_constant_grapheme_is_virtual"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_VIRTUAL</strong> = <literal>4</literal></paragraph>
            <paragraph>字素不是源文本的一部分，而是通过两端对齐过程添加的。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-space"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-space" names="class_textserver_constant_grapheme_is_space"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_SPACE</strong> = <literal>8</literal></paragraph>
            <paragraph>字素是空白字符。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-break-hard"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-break-hard" names="class_textserver_constant_grapheme_is_break_hard"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_BREAK_HARD</strong> = <literal>16</literal></paragraph>
            <paragraph>字素是强制换行点（例如 <literal>"\n"</literal>）。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-break-soft"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-break-soft" names="class_textserver_constant_grapheme_is_break_soft"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_BREAK_SOFT</strong> = <literal>32</literal></paragraph>
            <paragraph>字素是可选换行点（例如空格）。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-tab"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-tab" names="class_textserver_constant_grapheme_is_tab"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_TAB</strong> = <literal>64</literal></paragraph>
            <paragraph>字素是制表符。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-elongation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-elongation" names="class_textserver_constant_grapheme_is_elongation"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_ELONGATION</strong> = <literal>128</literal></paragraph>
            <paragraph>字素是 Kashida。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-punctuation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-punctuation" names="class_textserver_constant_grapheme_is_punctuation"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_PUNCTUATION</strong> = <literal>256</literal></paragraph>
            <paragraph>字素是标点符号。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-underscore"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-underscore" names="class_textserver_constant_grapheme_is_underscore"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_UNDERSCORE</strong> = <literal>512</literal></paragraph>
            <paragraph>字素是下划线字符。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-connected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-connected" names="class_textserver_constant_grapheme_is_connected"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_CONNECTED</strong> = <literal>1024</literal></paragraph>
            <paragraph>字素与前一个字素相连。在这个字素之前换行是不安全的。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-safe-to-insert-tatweel"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-safe-to-insert-tatweel" names="class_textserver_constant_grapheme_is_safe_to_insert_tatweel"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_SAFE_TO_INSERT_TATWEEL</strong> = <literal>2048</literal></paragraph>
            <paragraph>在这个字素之前插入 U+0640 以进行伸长是安全的。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-embedded-object"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-embedded-object" names="class_textserver_constant_grapheme_is_embedded_object"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_EMBEDDED_OBJECT</strong> = <literal>4096</literal></paragraph>
            <paragraph>字素是内嵌对象的对象替换字符。</paragraph>
            <target refid="class-textserver-constant-grapheme-is-soft-hyphen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-grapheme-is-soft-hyphen" names="class_textserver_constant_grapheme_is_soft_hyphen"><reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference> <strong>GRAPHEME_IS_SOFT_HYPHEN</strong> = <literal>8192</literal></paragraph>
            <paragraph>字素是一个软连字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-hinting"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-hinting" names="enum_textserver_hinting">enum <strong>Hinting</strong>: <reference internal="True" refid="enum-textserver-hinting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-hinting-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-hinting-none" names="class_textserver_constant_hinting_none"><reference internal="True" refid="enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference> <strong>HINTING_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用字体提示（更平滑但不那么清晰）。</paragraph>
            <target refid="class-textserver-constant-hinting-light"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-hinting-light" names="class_textserver_constant_hinting_light"><reference internal="True" refid="enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference> <strong>HINTING_LIGHT</strong> = <literal>1</literal></paragraph>
            <paragraph>使用浅色字体提示模式。</paragraph>
            <target refid="class-textserver-constant-hinting-normal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-hinting-normal" names="class_textserver_constant_hinting_normal"><reference internal="True" refid="enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference> <strong>HINTING_NORMAL</strong> = <literal>2</literal></paragraph>
            <paragraph>使用默认的字体微调模式（更锐利，但平滑度更低）。</paragraph>
            <paragraph><strong>注意：</strong>此处的微调模式会改变字形的水平和垂直度量。应用于等宽字体时，可能会让部分字形的宽度发生变化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-subpixelpositioning"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-subpixelpositioning" names="enum_textserver_subpixelpositioning">enum <strong>SubpixelPositioning</strong>: <reference internal="True" refid="enum-textserver-subpixelpositioning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-subpixel-positioning-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-subpixel-positioning-disabled" names="class_textserver_constant_subpixel_positioning_disabled"><reference internal="True" refid="enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> <strong>SUBPIXEL_POSITIONING_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>将字形的水平位置舍入至整数像素大小，每个字形光栅化一次。</paragraph>
            <target refid="class-textserver-constant-subpixel-positioning-auto"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-subpixel-positioning-auto" names="class_textserver_constant_subpixel_positioning_auto"><reference internal="True" refid="enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> <strong>SUBPIXEL_POSITIONING_AUTO</strong> = <literal>1</literal></paragraph>
            <paragraph>将字形的水平位置根据字体大小进行舍入。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>如果字体大小小于等于 <reference internal="True" refid="class-textserver-constant-subpixel-positioning-one-quarter-max-size"><inline classes="std std-ref">SUBPIXEL_POSITIONING_ONE_QUARTER_MAX_SIZE</inline></reference>，则舍入至四分之一像素大小。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>如果字体大小小于等于 <reference internal="True" refid="class-textserver-constant-subpixel-positioning-one-half-max-size"><inline classes="std std-ref">SUBPIXEL_POSITIONING_ONE_HALF_MAX_SIZE</inline></reference>，则舍入至二分之一像素大小。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>如果是更大的字体，则舍入至整数像素大小。</paragraph>
                </list_item>
            </bullet_list>
            <target refid="class-textserver-constant-subpixel-positioning-one-half"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-subpixel-positioning-one-half" names="class_textserver_constant_subpixel_positioning_one_half"><reference internal="True" refid="enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> <strong>SUBPIXEL_POSITIONING_ONE_HALF</strong> = <literal>2</literal></paragraph>
            <paragraph>将字形的水平位置舍入至像素大小的一半，每个字形最多光栅化两次。</paragraph>
            <target refid="class-textserver-constant-subpixel-positioning-one-quarter"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-subpixel-positioning-one-quarter" names="class_textserver_constant_subpixel_positioning_one_quarter"><reference internal="True" refid="enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> <strong>SUBPIXEL_POSITIONING_ONE_QUARTER</strong> = <literal>3</literal></paragraph>
            <paragraph>将字形的水平位置舍入至像素大小的四分之一，每个字形最多光栅化四次。</paragraph>
            <target refid="class-textserver-constant-subpixel-positioning-one-half-max-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-subpixel-positioning-one-half-max-size" names="class_textserver_constant_subpixel_positioning_one_half_max_size"><reference internal="True" refid="enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> <strong>SUBPIXEL_POSITIONING_ONE_HALF_MAX_SIZE</strong> = <literal>20</literal></paragraph>
            <paragraph>在 <reference internal="True" refid="class-textserver-constant-subpixel-positioning-auto"><inline classes="std std-ref">SUBPIXEL_POSITIONING_AUTO</inline></reference> 模式下，次像素定位时使用二分之一像素大小的最大字体大小。</paragraph>
            <target refid="class-textserver-constant-subpixel-positioning-one-quarter-max-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-subpixel-positioning-one-quarter-max-size" names="class_textserver_constant_subpixel_positioning_one_quarter_max_size"><reference internal="True" refid="enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> <strong>SUBPIXEL_POSITIONING_ONE_QUARTER_MAX_SIZE</strong> = <literal>16</literal></paragraph>
            <paragraph>在 <reference internal="True" refid="class-textserver-constant-subpixel-positioning-auto"><inline classes="std std-ref">SUBPIXEL_POSITIONING_AUTO</inline></reference> 模式下，次像素定位时使用四分之一像素大小的最大字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-feature"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-feature" names="enum_textserver_feature">enum <strong>Feature</strong>: <reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-feature-simple-layout"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-simple-layout" names="class_textserver_constant_feature_simple_layout"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_SIMPLE_LAYOUT</strong> = <literal>1</literal></paragraph>
            <paragraph>TextServer 支持简单排版。</paragraph>
            <target refid="class-textserver-constant-feature-bidi-layout"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-bidi-layout" names="class_textserver_constant_feature_bidi_layout"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_BIDI_LAYOUT</strong> = <literal>2</literal></paragraph>
            <paragraph>TextServer 支持双向排版。</paragraph>
            <target refid="class-textserver-constant-feature-vertical-layout"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-vertical-layout" names="class_textserver_constant_feature_vertical_layout"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_VERTICAL_LAYOUT</strong> = <literal>4</literal></paragraph>
            <paragraph>TextServer 支持垂直布局。</paragraph>
            <target refid="class-textserver-constant-feature-shaping"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-shaping" names="class_textserver_constant_feature_shaping"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_SHAPING</strong> = <literal>8</literal></paragraph>
            <paragraph>TextServer 支持复杂文本塑形。</paragraph>
            <target refid="class-textserver-constant-feature-kashida-justification"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-kashida-justification" names="class_textserver_constant_feature_kashida_justification"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_KASHIDA_JUSTIFICATION</strong> = <literal>16</literal></paragraph>
            <paragraph>TextServer 支持使用 kashida 进行两端对齐。</paragraph>
            <target refid="class-textserver-constant-feature-break-iterators"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-break-iterators" names="class_textserver_constant_feature_break_iterators"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_BREAK_ITERATORS</strong> = <literal>32</literal></paragraph>
            <paragraph>TextServer 支持复杂断行/断词规则（例如基于字典）。</paragraph>
            <target refid="class-textserver-constant-feature-font-bitmap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-font-bitmap" names="class_textserver_constant_feature_font_bitmap"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_FONT_BITMAP</strong> = <literal>64</literal></paragraph>
            <paragraph>TextServer 支持加载位图字体。</paragraph>
            <target refid="class-textserver-constant-feature-font-dynamic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-font-dynamic" names="class_textserver_constant_feature_font_dynamic"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_FONT_DYNAMIC</strong> = <literal>128</literal></paragraph>
            <paragraph>TextServer 支持加载动态字体（TrueType、OpeType 等）。</paragraph>
            <target refid="class-textserver-constant-feature-font-msdf"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-font-msdf" names="class_textserver_constant_feature_font_msdf"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_FONT_MSDF</strong> = <literal>256</literal></paragraph>
            <paragraph>TextServer 支持多通道有符号距离场动态字体的渲染。</paragraph>
            <target refid="class-textserver-constant-feature-font-system"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-font-system" names="class_textserver_constant_feature_font_system"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_FONT_SYSTEM</strong> = <literal>512</literal></paragraph>
            <paragraph>TextServer 支持加载系统字体。</paragraph>
            <target refid="class-textserver-constant-feature-font-variable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-font-variable" names="class_textserver_constant_feature_font_variable"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_FONT_VARIABLE</strong> = <literal>1024</literal></paragraph>
            <paragraph>TextServer 支持可变字体。</paragraph>
            <target refid="class-textserver-constant-feature-context-sensitive-case-conversion"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-context-sensitive-case-conversion" names="class_textserver_constant_feature_context_sensitive_case_conversion"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_CONTEXT_SENSITIVE_CASE_CONVERSION</strong> = <literal>2048</literal></paragraph>
            <paragraph>TextServer 支持依赖于区域设置、上下文敏感的大小写转换。</paragraph>
            <target refid="class-textserver-constant-feature-use-support-data"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-use-support-data" names="class_textserver_constant_feature_use_support_data"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_USE_SUPPORT_DATA</strong> = <literal>4096</literal></paragraph>
            <paragraph>TextServer 的某些功能需要外部数据文件，见 <reference internal="True" refid="class-textserver-method-load-support-data"><inline classes="std std-ref">load_support_data</inline></reference>。</paragraph>
            <target refid="class-textserver-constant-feature-unicode-identifiers"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-unicode-identifiers" names="class_textserver_constant_feature_unicode_identifiers"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_UNICODE_IDENTIFIERS</strong> = <literal>8192</literal></paragraph>
            <paragraph>TextServer 支持 UAX #31 标识符验证，见 <reference internal="True" refid="class-textserver-method-is-valid-identifier"><inline classes="std std-ref">is_valid_identifier</inline></reference>。</paragraph>
            <target refid="class-textserver-constant-feature-unicode-security"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-feature-unicode-security" names="class_textserver_constant_feature_unicode_security"><reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_UNICODE_SECURITY</strong> = <literal>16384</literal></paragraph>
            <paragraph>TextServer 支持基于 <reference name="Unicode 技术报告 #36" refuri="https://unicode.org/reports/tr36/">Unicode 技术报告 #36</reference> 和 <reference name="Unicode 技术标准 #39" refuri="https://unicode.org/reports/tr39/">Unicode 技术标准 #39</reference> 的欺骗检测功能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-contourpointtag"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-contourpointtag" names="enum_textserver_contourpointtag">enum <strong>ContourPointTag</strong>: <reference internal="True" refid="enum-textserver-contourpointtag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-contour-curve-tag-on"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-contour-curve-tag-on" names="class_textserver_constant_contour_curve_tag_on"><reference internal="True" refid="enum-textserver-contourpointtag"><inline classes="std std-ref">ContourPointTag</inline></reference> <strong>CONTOUR_CURVE_TAG_ON</strong> = <literal>1</literal></paragraph>
            <paragraph>轮廓点在曲线上。</paragraph>
            <target refid="class-textserver-constant-contour-curve-tag-off-conic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-contour-curve-tag-off-conic" names="class_textserver_constant_contour_curve_tag_off_conic"><reference internal="True" refid="enum-textserver-contourpointtag"><inline classes="std std-ref">ContourPointTag</inline></reference> <strong>CONTOUR_CURVE_TAG_OFF_CONIC</strong> = <literal>0</literal></paragraph>
            <paragraph>轮廓点不在曲线上，而是作为圆锥（二次）贝塞尔曲线的控制点。</paragraph>
            <target refid="class-textserver-constant-contour-curve-tag-off-cubic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-contour-curve-tag-off-cubic" names="class_textserver_constant_contour_curve_tag_off_cubic"><reference internal="True" refid="enum-textserver-contourpointtag"><inline classes="std std-ref">ContourPointTag</inline></reference> <strong>CONTOUR_CURVE_TAG_OFF_CUBIC</strong> = <literal>2</literal></paragraph>
            <paragraph>轮廓点不在曲线上，而是作为三次贝塞尔曲线的控制点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-spacingtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-spacingtype" names="enum_textserver_spacingtype">enum <strong>SpacingType</strong>: <reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-spacing-glyph"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-spacing-glyph" names="class_textserver_constant_spacing_glyph"><reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> <strong>SPACING_GLYPH</strong> = <literal>0</literal></paragraph>
            <paragraph>每个字形的间距。</paragraph>
            <target refid="class-textserver-constant-spacing-space"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-spacing-space" names="class_textserver_constant_spacing_space"><reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> <strong>SPACING_SPACE</strong> = <literal>1</literal></paragraph>
            <paragraph>空格字符的间距。</paragraph>
            <target refid="class-textserver-constant-spacing-top"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-spacing-top" names="class_textserver_constant_spacing_top"><reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> <strong>SPACING_TOP</strong> = <literal>2</literal></paragraph>
            <paragraph>行顶部的间距。</paragraph>
            <target refid="class-textserver-constant-spacing-bottom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-spacing-bottom" names="class_textserver_constant_spacing_bottom"><reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> <strong>SPACING_BOTTOM</strong> = <literal>3</literal></paragraph>
            <paragraph>行底部的间距。</paragraph>
            <target refid="class-textserver-constant-spacing-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-spacing-max" names="class_textserver_constant_spacing_max"><reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> <strong>SPACING_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-fontstyle"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-fontstyle" names="enum_textserver_fontstyle">flags <strong>FontStyle</strong>: <reference internal="True" refid="enum-textserver-fontstyle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-font-bold"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-font-bold" names="class_textserver_constant_font_bold"><reference internal="True" refid="enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference> <strong>FONT_BOLD</strong> = <literal>1</literal></paragraph>
            <paragraph>字体为粗体。</paragraph>
            <target refid="class-textserver-constant-font-italic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-font-italic" names="class_textserver_constant_font_italic"><reference internal="True" refid="enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference> <strong>FONT_ITALIC</strong> = <literal>2</literal></paragraph>
            <paragraph>字体为斜体（italic）或伪斜体（oblique）。</paragraph>
            <target refid="class-textserver-constant-font-fixed-width"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-font-fixed-width" names="class_textserver_constant_font_fixed_width"><reference internal="True" refid="enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference> <strong>FONT_FIXED_WIDTH</strong> = <literal>4</literal></paragraph>
            <paragraph>字体中有等宽字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-structuredtextparser"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-structuredtextparser" names="enum_textserver_structuredtextparser">enum <strong>StructuredTextParser</strong>: <reference internal="True" refid="enum-textserver-structuredtextparser"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-structured-text-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-structured-text-default" names="class_textserver_constant_structured_text_default"><reference internal="True" refid="enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>STRUCTURED_TEXT_DEFAULT</strong> = <literal>0</literal></paragraph>
            <paragraph>使用默认的 Unicode BiDi 算法。</paragraph>
            <target refid="class-textserver-constant-structured-text-uri"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-structured-text-uri" names="class_textserver_constant_structured_text_uri"><reference internal="True" refid="enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>STRUCTURED_TEXT_URI</strong> = <literal>1</literal></paragraph>
            <paragraph>URI 的 BiDi 覆盖。</paragraph>
            <target refid="class-textserver-constant-structured-text-file"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-structured-text-file" names="class_textserver_constant_structured_text_file"><reference internal="True" refid="enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>STRUCTURED_TEXT_FILE</strong> = <literal>2</literal></paragraph>
            <paragraph>文件路径的 BiDi 覆盖。</paragraph>
            <target refid="class-textserver-constant-structured-text-email"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-structured-text-email" names="class_textserver_constant_structured_text_email"><reference internal="True" refid="enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>STRUCTURED_TEXT_EMAIL</strong> = <literal>3</literal></paragraph>
            <paragraph>电子邮件的 BiDi 覆盖。</paragraph>
            <target refid="class-textserver-constant-structured-text-list"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-structured-text-list" names="class_textserver_constant_structured_text_list"><reference internal="True" refid="enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>STRUCTURED_TEXT_LIST</strong> = <literal>4</literal></paragraph>
            <paragraph>列表的 BiDi 覆盖。结构化文本选项：列表分隔符 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
            <target refid="class-textserver-constant-structured-text-gdscript"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-structured-text-gdscript" names="class_textserver_constant_structured_text_gdscript"><reference internal="True" refid="enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>STRUCTURED_TEXT_GDSCRIPT</strong> = <literal>5</literal></paragraph>
            <paragraph>GDScript 的 BiDi 覆盖。</paragraph>
            <target refid="class-textserver-constant-structured-text-custom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-structured-text-custom" names="class_textserver_constant_structured_text_custom"><reference internal="True" refid="enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>STRUCTURED_TEXT_CUSTOM</strong> = <literal>6</literal></paragraph>
            <paragraph>用户定义的结构化文本 BiDi 覆盖函数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-textserver-fixedsizescalemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-textserver-fixedsizescalemode" names="enum_textserver_fixedsizescalemode">enum <strong>FixedSizeScaleMode</strong>: <reference internal="True" refid="enum-textserver-fixedsizescalemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textserver-constant-fixed-size-scale-disable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-fixed-size-scale-disable" names="class_textserver_constant_fixed_size_scale_disable"><reference internal="True" refid="enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference> <strong>FIXED_SIZE_SCALE_DISABLE</strong> = <literal>0</literal></paragraph>
            <paragraph>位图字体未被缩放。</paragraph>
            <target refid="class-textserver-constant-fixed-size-scale-integer-only"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-fixed-size-scale-integer-only" names="class_textserver_constant_fixed_size_scale_integer_only"><reference internal="True" refid="enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference> <strong>FIXED_SIZE_SCALE_INTEGER_ONLY</strong> = <literal>1</literal></paragraph>
            <paragraph>位图字体被缩放至字体固定大小的最接近整数倍。这是像素艺术字体的推荐选项。</paragraph>
            <target refid="class-textserver-constant-fixed-size-scale-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textserver-constant-fixed-size-scale-enabled" names="class_textserver_constant_fixed_size_scale_enabled"><reference internal="True" refid="enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference> <strong>FIXED_SIZE_SCALE_ENABLED</strong> = <literal>2</literal></paragraph>
            <paragraph>位图字体被缩放为任意（分数）大小。这是非像素艺术字体的推荐选项。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-textserver-method-create-font"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-create-font" names="class_textserver_method_create_font"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>create_font</strong>() <reference internal="True" refid="class-textserver-method-create-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建空的字体缓存条目资源。要释放生成的资源，请使用 <reference internal="True" refid="class-textserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-create-font-linked-variation"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-create-font-linked-variation" names="class_textserver_method_create_font_linked_variation"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>create_font_linked_variation</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-textserver-method-create-font-linked-variation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个新的已有的字体变体，该字体重用相同的字形缓存和字体数据。要释放生成的资源，请使用 <reference internal="True" refid="class-textserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-create-shaped-text"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-create-shaped-text" names="class_textserver_method_create_shaped_text"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>create_shaped_text</strong>(direction: <reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> = 0, orientation: <reference internal="True" refid="enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> = 0) <reference internal="True" refid="class-textserver-method-create-shaped-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的方向 <literal>direction</literal> 和朝向 <literal>orientation</literal> 新建缓冲区，用于复杂排版。要释放生成的缓冲区，请使用 <reference internal="True" refid="class-textserver-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference>方法。</paragraph>
            <paragraph><strong>注意：</strong>如果服务器不支持 <reference internal="True" refid="class-textserver-constant-feature-bidi-layout"><inline classes="std std-ref">FEATURE_BIDI_LAYOUT</inline></reference> 特性，则会忽略方向（<reference internal="True" refuri="class_textserveradvanced#class-textserveradvanced"><inline classes="std std-ref">TextServerAdvanced</inline></reference> 支持）。</paragraph>
            <paragraph><strong>注意：</strong>如果服务器不支持 <reference internal="True" refid="class-textserver-constant-feature-vertical-layout"><inline classes="std std-ref">FEATURE_VERTICAL_LAYOUT</inline></reference> 特性，则会忽略朝向（<reference internal="True" refuri="class_textserveradvanced#class-textserveradvanced"><inline classes="std std-ref">TextServerAdvanced</inline></reference> 支持）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-draw-hex-code-box"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-draw-hex-code-box" names="class_textserver_method_draw_hex_code_box"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_hex_code_box</strong>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-draw-hex-code-box"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>绘制显示字符十六进制码的框。用于替换缺失的字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-clear-glyphs"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-clear-glyphs" names="class_textserver_method_font_clear_glyphs"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_clear_glyphs</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-textserver-method-font-clear-glyphs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从缓存条目中移除所有的渲染字形信息。</paragraph>
            <paragraph><strong>注意：</strong>该函数不会移除与字形关联的纹理，请使用 <reference internal="True" refid="class-textserver-method-font-remove-texture"><inline classes="std std-ref">font_remove_texture</inline></reference> 手动移除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-clear-kerning-map"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-clear-kerning-map" names="class_textserver_method_font_clear_kerning_map"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_clear_kerning_map</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-clear-kerning-map"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除所有字距调整覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-clear-size-cache"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-clear-size-cache" names="class_textserver_method_font_clear_size_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_clear_size_cache</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-textserver-method-font-clear-size-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从缓存条目中移除所有的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-clear-textures"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-clear-textures" names="class_textserver_method_font_clear_textures"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_clear_textures</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-textserver-method-font-clear-textures"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从字体缓存条目中移除所有的纹理。</paragraph>
            <paragraph><strong>注意：</strong>该函数不会移除与纹理关联的字形，请使用 <reference internal="True" refid="class-textserver-method-font-remove-glyph"><inline classes="std std-ref">font_remove_glyph</inline></reference> 手动移除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-draw-glyph"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-draw-glyph" names="class_textserver_method_font_draw_glyph"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_draw_glyph</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-draw-glyph"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在画布项中某个位置绘制单个字形，使用的字体为 <literal>font_rid</literal>，大小为 <literal>size</literal>。</paragraph>
            <paragraph><strong>注意：</strong>字形索引是特定于字体的，请使用 <reference internal="True" refid="class-textserver-method-shaped-text-get-glyphs"><inline classes="std std-ref">shaped_text_get_glyphs</inline></reference> 或 <reference internal="True" refid="class-textserver-method-font-get-glyph-index"><inline classes="std std-ref">font_get_glyph_index</inline></reference> 返回的字形索引。</paragraph>
            <paragraph><strong>注意：</strong>如果有待渲染的字形，调用这个函数可能会触发纹理缓存的更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-draw-glyph-outline"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-draw-glyph-outline" names="class_textserver_method_font_draw_glyph_outline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_draw_glyph_outline</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-draw-glyph-outline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在画布项中某个位置绘制单个字形轮廓，使用的字体为 <literal>font_rid</literal>，大小为 <literal>size</literal>。</paragraph>
            <paragraph><strong>注意：</strong>字形索引是特定于字体的，请使用 <reference internal="True" refid="class-textserver-method-shaped-text-get-glyphs"><inline classes="std std-ref">shaped_text_get_glyphs</inline></reference> 或 <reference internal="True" refid="class-textserver-method-font-get-glyph-index"><inline classes="std std-ref">font_get_glyph_index</inline></reference> 返回的字形索引。</paragraph>
            <paragraph><strong>注意：</strong>如果有待渲染的字形，调用这个函数可能会触发纹理缓存的更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-antialiasing"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-antialiasing" names="class_textserver_method_font_get_antialiasing"><reference internal="True" refid="enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference> <strong>font_get_antialiasing</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-antialiasing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体的抗锯齿模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-ascent"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-ascent" names="class_textserver_method_font_get_ascent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>font_get_ascent</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-ascent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体的上升幅度（超出基线的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-baseline-offset"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-baseline-offset" names="class_textserver_method_font_get_baseline_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>font_get_baseline_offset</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-baseline-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回额外的基线偏移（作为字体高度的一部分）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-char-from-glyph-index"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-char-from-glyph-index" names="class_textserver_method_font_get_char_from_glyph_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_get_char_from_glyph_index</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-char-from-glyph-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与 <literal>glyph_index</literal> 关联的字符码，如果 <literal>glyph_index</literal> 无效则返回 <literal>0</literal>。见 <reference internal="True" refid="class-textserver-method-font-get-glyph-index"><inline classes="std std-ref">font_get_glyph_index</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-descent"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-descent" names="class_textserver_method_font_get_descent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>font_get_descent</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-descent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体的减少量（低于基线的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-disable-embedded-bitmaps"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-disable-embedded-bitmaps" names="class_textserver_method_font_get_disable_embedded_bitmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>font_get_disable_embedded_bitmaps</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-disable-embedded-bitmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体是否仅用了内嵌位图加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-embolden"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-embolden" names="class_textserver_method_font_get_embolden"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>font_get_embolden</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-embolden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体的加粗力度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-face-count"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-face-count" names="class_textserver_method_font_get_face_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_get_face_count</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-face-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 TrueType / OpenType 集合中的字体数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-face-index"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-face-index" names="class_textserver_method_font_get_face_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_get_face_index</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-face-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 TrueType / OpenType 集合中的活动字体索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-fixed-size"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-fixed-size" names="class_textserver_method_font_get_fixed_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_get_fixed_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-fixed-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位图字体的固定大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-fixed-size-scale-mode"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-fixed-size-scale-mode" names="class_textserver_method_font_get_fixed_size_scale_mode"><reference internal="True" refid="enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference> <strong>font_get_fixed_size_scale_mode</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-fixed-size-scale-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位图字体的缩放模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-generate-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-generate-mipmaps" names="class_textserver_method_font_get_generate_mipmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>font_get_generate_mipmaps</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-generate-mipmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果启用了字体纹理 mipmap 生成，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-global-oversampling"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-global-oversampling" names="class_textserver_method_font_get_global_oversampling"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>font_get_global_oversampling</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-global-oversampling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体过采样系数，由 TextServer 中的所有字体共享。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-glyph-advance"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-glyph-advance" names="class_textserver_method_font_get_glyph_advance"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>font_get_glyph_advance</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-glyph-advance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字形前进量（下一个字形的偏移量）。</paragraph>
            <paragraph><strong>注意：</strong>字形轮廓的前进量，与基础字形的前进量相同，不会被保存。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-glyph-contours"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-glyph-contours" names="class_textserver_method_font_get_glyph_contours"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>font_get_glyph_contours</strong>(font: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-glyph-contours"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字形的轮廓线轮廓返回为具有以下内容的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>：</paragraph>
            <paragraph><literal>points</literal>         - <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>，包含轮廓点。<literal>x</literal> 和 <literal>y</literal> 是点坐标。<literal>z</literal> 是点的类型，使用 <reference internal="True" refid="enum-textserver-contourpointtag"><inline classes="std std-ref">ContourPointTag</inline></reference> 值。</paragraph>
            <paragraph><literal>contours</literal>       - <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>，包含每个轮廓端点的索引。</paragraph>
            <paragraph><literal>orientation</literal>    - <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>，轮廓方向。如果为 <literal>true</literal>，则顺时针轮廓必须被填充。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-glyph-index"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-glyph-index" names="class_textserver_method_font_get_glyph_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_get_glyph_index</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, variation_selector: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-glyph-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>char</literal> 的字形索引，可以选择由 <literal>variation_selector</literal> 进行修改。见 <reference internal="True" refid="class-textserver-method-font-get-char-from-glyph-index"><inline classes="std std-ref">font_get_char_from_glyph_index</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-glyph-list"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-glyph-list" names="class_textserver_method_font_get_glyph_list"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>font_get_glyph_list</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-glyph-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回缓存条目中的已渲染字形列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-glyph-offset"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-glyph-offset" names="class_textserver_method_font_get_glyph_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>font_get_glyph_offset</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-glyph-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字形的基线偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-glyph-size"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-glyph-size" names="class_textserver_method_font_get_glyph_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>font_get_glyph_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-glyph-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该字形的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-glyph-texture-idx"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-glyph-texture-idx" names="class_textserver_method_font_get_glyph_texture_idx"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_get_glyph_texture_idx</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-glyph-texture-idx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含该字形的缓存纹理的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-glyph-texture-rid"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-glyph-texture-rid" names="class_textserver_method_font_get_glyph_texture_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>font_get_glyph_texture_rid</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-glyph-texture-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含字形的缓存纹理的资源 ID。</paragraph>
            <paragraph><strong>注意：</strong>如果有待渲染的字形，调用此函数可能会触发纹理缓存的更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-glyph-texture-size"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-glyph-texture-size" names="class_textserver_method_font_get_glyph_texture_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>font_get_glyph_texture_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-glyph-texture-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含字形的缓存纹理的大小。</paragraph>
            <paragraph><strong>注意：</strong>如果有待渲染的字形，调用此函数可能会触发纹理缓存的更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-glyph-uv-rect"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-glyph-uv-rect" names="class_textserver_method_font_get_glyph_uv_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>font_get_glyph_uv_rect</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-glyph-uv-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含该字形的缓存纹理中的矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-hinting"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-hinting" names="class_textserver_method_font_get_hinting"><reference internal="True" refid="enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference> <strong>font_get_hinting</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-hinting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体微调模式。仅用于动态字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-kerning"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-kerning" names="class_textserver_method_font_get_kerning"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>font_get_kerning</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-kerning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字形对的字距调整。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-kerning-list"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-kerning-list" names="class_textserver_method_font_get_kerning_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>] <strong>font_get_kerning_list</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-kerning-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字距调整覆盖的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-language-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-language-support-override" names="class_textserver_method_font_get_language_support_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>font_get_language_support_override</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textserver-method-font-get-language-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>language</literal> 启用了支持覆盖，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-language-support-overrides"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-language-support-overrides" names="class_textserver_method_font_get_language_support_overrides"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>font_get_language_support_overrides</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-textserver-method-font-get-language-support-overrides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回语言支持覆盖的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-msdf-pixel-range"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-msdf-pixel-range" names="class_textserver_method_font_get_msdf_pixel_range"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_get_msdf_pixel_range</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-msdf-pixel-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最小和最大可表示有符号距离之间形状周围范围的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-msdf-size"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-msdf-size" names="class_textserver_method_font_get_msdf_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_get_msdf_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-msdf-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回用于生成 MSDF 纹理的源字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-name"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-name" names="class_textserver_method_font_get_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>font_get_name</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体家族名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-opentype-feature-overrides"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-opentype-feature-overrides" names="class_textserver_method_font_get_opentype_feature_overrides"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>font_get_opentype_feature_overrides</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-opentype-feature-overrides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体 OpenType 特性集覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-ot-name-strings"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-ot-name-strings" names="class_textserver_method_font_get_ot_name_strings"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>font_get_ot_name_strings</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-ot-name-strings"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 OpenType 字体名称字符串的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>（本地化的字体名称、版本、描述、许可信息、示例文本等）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-oversampling"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-oversampling" names="class_textserver_method_font_get_oversampling"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>font_get_oversampling</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-oversampling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体过采样系数，如果设置为 <literal>0.0</literal>，则使用全局过采样系数。仅由动态字体使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-scale"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-scale" names="class_textserver_method_font_get_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>font_get_scale</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回颜色位图字体的缩放系数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-script-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-script-support-override" names="class_textserver_method_font_get_script_support_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>font_get_script_support_override</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textserver-method-font-get-script-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>script</literal> 启用了支持覆盖，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-script-support-overrides"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-script-support-overrides" names="class_textserver_method_font_get_script_support_overrides"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>font_get_script_support_overrides</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-textserver-method-font-get-script-support-overrides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文字支持覆盖的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-size-cache-list"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-size-cache-list" names="class_textserver_method_font_get_size_cache_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>] <strong>font_get_size_cache_list</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-size-cache-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回缓存中字体大小的列表。每个大小都是由字体大小和轮廓大小组成的 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-spacing"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-spacing" names="class_textserver_method_font_get_spacing"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_get_spacing</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>spacing</literal>（见 <reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>）的间距，单位为像素（与字体大小无关）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-stretch"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-stretch" names="class_textserver_method_font_get_stretch"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_get_stretch</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-stretch"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与正常宽度相比的字体拉伸量。一个介于 <literal>50%</literal> 和 <literal>200%</literal> 之间的百分比值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-style"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-style" names="class_textserver_method_font_get_style"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>] <strong>font_get_style</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-style"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体样式标志，见 <reference internal="True" refid="enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-style-name"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-style-name" names="class_textserver_method_font_get_style_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>font_get_style_name</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-style-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体样式名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-subpixel-positioning"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-subpixel-positioning" names="class_textserver_method_font_get_subpixel_positioning"><reference internal="True" refid="enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> <strong>font_get_subpixel_positioning</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-subpixel-positioning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体的次像素字形定位模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-supported-chars"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-supported-chars" names="class_textserver_method_font_get_supported_chars"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>font_get_supported_chars</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-supported-chars"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含字体中所有可用字符的字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-texture-count"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-texture-count" names="class_textserver_method_font_get_texture_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_get_texture_count</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-texture-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体缓存条目所使用的纹理数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-texture-image"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-texture-image" names="class_textserver_method_font_get_texture_image"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>font_get_texture_image</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-texture-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体缓存纹理图像数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-texture-offsets"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-texture-offsets" names="class_textserver_method_font_get_texture_offsets"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>font_get_texture_offsets</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-texture-offsets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含字形打包数据的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-transform"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-transform" names="class_textserver_method_font_get_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>font_get_transform</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回应用于字体轮廓的 2D 变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-underline-position"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-underline-position" names="class_textserver_method_font_get_underline_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>font_get_underline_position</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-underline-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回基线下方下划线的像素偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-underline-thickness" names="class_textserver_method_font_get_underline_thickness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>font_get_underline_thickness</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-underline-thickness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回下划线的粗细度，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-variation-coordinates"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-variation-coordinates" names="class_textserver_method_font_get_variation_coordinates"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>font_get_variation_coordinates</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-variation-coordinates"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定字体缓存条目的变体坐标。详见 <reference internal="True" refid="class-textserver-method-font-supported-variation-list"><inline classes="std std-ref">font_supported_variation_list</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-get-weight"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-get-weight" names="class_textserver_method_font_get_weight"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_get_weight</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-get-weight"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该字体的字重（粗度）。一个在 <literal>100...999</literal> 范围内的值，正常字体字重为 <literal>400</literal>，粗体字体字重为 <literal>700</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-has-char"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-has-char" names="class_textserver_method_font_has_char"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>font_has_char</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-has-char"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该字体中包含 Unicode 字符 <literal>char</literal>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-is-allow-system-fallback"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-is-allow-system-fallback" names="class_textserver_method_font_is_allow_system_fallback"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>font_is_allow_system_fallback</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-is-allow-system-fallback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果可以自动使用系统字体作为回退字体，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-is-force-autohinter"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-is-force-autohinter" names="class_textserver_method_font_is_force_autohinter"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>font_is_force_autohinter</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-is-force-autohinter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果自动提示被支持且优先于字体内置提示，则返回 <literal>true</literal>。仅由动态字体使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-is-language-supported"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-is-language-supported" names="class_textserver_method_font_is_language_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>font_is_language_supported</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-is-language-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该字体支持给定的语言（<reference name="ISO 639" refuri="https://zh.wikipedia.org/wiki/ISO_639-1">ISO 639</reference> 代码），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-is-multichannel-signed-distance-field"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-is-multichannel-signed-distance-field" names="class_textserver_method_font_is_multichannel_signed_distance_field"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>font_is_multichannel_signed_distance_field</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-is-multichannel-signed-distance-field"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果使用从动态字体矢量数据生成的单个多通道有符号距离场渲染所有大小的字形，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-is-script-supported"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-is-script-supported" names="class_textserver_method_font_is_script_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>font_is_script_supported</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-is-script-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果字体支持给定的文字（ISO 15924 代码），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-remove-glyph"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-remove-glyph" names="class_textserver_method_font_remove_glyph"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_remove_glyph</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-remove-glyph"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从缓存条目中移除指定的渲染字形信息。</paragraph>
            <paragraph><strong>注意：</strong>这个函数不会移除与字形相关的纹理，请使用 <reference internal="True" refid="class-textserver-method-font-remove-texture"><inline classes="std std-ref">font_remove_texture</inline></reference> 手动移除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-remove-kerning"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-remove-kerning" names="class_textserver_method_font_remove_kerning"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_remove_kerning</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-textserver-method-font-remove-kerning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除字形对的字距调整覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-remove-language-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-remove-language-support-override" names="class_textserver_method_font_remove_language_support_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_remove_language_support_override</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textserver-method-font-remove-language-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除语言支持覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-remove-script-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-remove-script-support-override" names="class_textserver_method_font_remove_script_support_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_remove_script_support_override</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textserver-method-font-remove-script-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除文字支持覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-remove-size-cache"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-remove-size-cache" names="class_textserver_method_font_remove_size_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_remove_size_cache</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-textserver-method-font-remove-size-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从缓存条目中移除指定的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-remove-texture"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-remove-texture" names="class_textserver_method_font_remove_texture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_remove_texture</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-remove-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从缓存条目中移除指定纹理。</paragraph>
            <paragraph><strong>注意：</strong>这个函数不会移除与纹理关联的字形，请使用 <reference internal="True" refid="class-textserver-method-font-remove-glyph"><inline classes="std std-ref">font_remove_glyph</inline></reference> 手动移除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-render-glyph"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-render-glyph" names="class_textserver_method_font_render_glyph"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_render_glyph</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-render-glyph"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将指定的字符渲染到字体缓存纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-render-range"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-render-range" names="class_textserver_method_font_render_range"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_render_range</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-render-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将范围内的字符渲染到字体缓存纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-allow-system-fallback"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-allow-system-fallback" names="class_textserver_method_font_set_allow_system_fallback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_allow_system_fallback</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, allow_system_fallback: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-allow-system-fallback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则可以自动将系统字体作为回退使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-antialiasing"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-antialiasing" names="class_textserver_method_font_set_antialiasing"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_antialiasing</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, antialiasing: <reference internal="True" refid="enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-antialiasing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用字体抗锯齿模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-ascent"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-ascent" names="class_textserver_method_font_set_ascent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_ascent</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, ascent: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-ascent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体的升部（基线上方的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-baseline-offset"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-baseline-offset" names="class_textserver_method_font_set_baseline_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_baseline_offset</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, baseline_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-baseline-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置额外的基线偏移（作为字体高度的一部分）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-data"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-data" names="class_textserver_method_font_set_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_data</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体源数据，例如动态字体的源文件内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-descent"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-descent" names="class_textserver_method_font_set_descent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_descent</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, descent: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-descent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体的降部（基线下方的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-disable-embedded-bitmaps"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-disable-embedded-bitmaps" names="class_textserver_method_font_set_disable_embedded_bitmaps"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_disable_embedded_bitmaps</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, disable_embedded_bitmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-disable-embedded-bitmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则会禁用内嵌字体位图的加载（仅包含位图的字体以及彩色字体会禁用该属性）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-embolden"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-embolden" names="class_textserver_method_font_set_embolden"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_embolden</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-embolden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体的加粗强度。如果 <literal>strength</literal> 不等于零，则会加粗字体轮廓。负值会减小轮廓的粗细度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-face-index"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-face-index" names="class_textserver_method_font_set_face_index"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_face_index</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, face_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-face-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 TrueType / OpenType 集合中设置活动字体索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-fixed-size"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-fixed-size" names="class_textserver_method_font_set_fixed_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_fixed_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fixed_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-fixed-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置位图字体的固定大小。如果设置为大于零的值，则会为所有字体大小使用相同的缓存条目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-fixed-size-scale-mode"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-fixed-size-scale-mode" names="class_textserver_method_font_set_fixed_size_scale_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_fixed_size_scale_mode</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fixed_size_scale_mode: <reference internal="True" refid="enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-fixed-size-scale-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置位图字体缩放模式。仅当 <literal>fixed_size</literal> 大于零时才使用该属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-force-autohinter"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-force-autohinter" names="class_textserver_method_font_set_force_autohinter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_force_autohinter</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, force_autohinter: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-force-autohinter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则优先使用自动微调，而不是字体的内置微调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-generate-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-generate-mipmaps" names="class_textserver_method_font_set_generate_mipmaps"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_generate_mipmaps</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, generate_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-generate-mipmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则启用字体纹理 mipmap 生成。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-global-oversampling"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-global-oversampling" names="class_textserver_method_font_set_global_oversampling"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_global_oversampling</strong>(oversampling: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-global-oversampling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置过采样系数，由 TextServer 中的所有字体共享。</paragraph>
            <paragraph><strong>注意：</strong>显示服务器可能自动更改这个值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-glyph-advance"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-glyph-advance" names="class_textserver_method_font_set_glyph_advance"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_glyph_advance</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, advance: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-glyph-advance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字形前进量（下一个字形的偏移量）。</paragraph>
            <paragraph><strong>注意：</strong>字形轮廓的前进量与基础字形的前进量相同，不会被保存。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-glyph-offset"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-glyph-offset" names="class_textserver_method_font_set_glyph_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_glyph_offset</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-glyph-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字形相对于基线的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-glyph-size"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-glyph-size" names="class_textserver_method_font_set_glyph_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_glyph_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gl_size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-glyph-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字形的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-glyph-texture-idx"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-glyph-texture-idx" names="class_textserver_method_font_set_glyph_texture_idx"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_glyph_texture_idx</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, texture_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-glyph-texture-idx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置包含该字形的缓存纹理的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-glyph-uv-rect"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-glyph-uv-rect" names="class_textserver_method_font_set_glyph_uv_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_glyph_uv_rect</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, uv_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-glyph-uv-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置包含该字形的缓存纹理中，该字形的矩形区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-hinting"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-hinting" names="class_textserver_method_font_set_hinting"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_hinting</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, hinting: <reference internal="True" refid="enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-hinting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体微调模式。仅由动态字体使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-kerning"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-kerning" names="class_textserver_method_font_set_kerning"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_kerning</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, kerning: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-kerning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字形对的字距调整。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-language-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-language-support-override" names="class_textserver_method_font_set_language_support_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_language_support_override</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-language-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <reference internal="True" refid="class-textserver-method-font-is-language-supported"><inline classes="std std-ref">font_is_language_supported</inline></reference> 添加覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-msdf-pixel-range"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-msdf-pixel-range" names="class_textserver_method_font_set_msdf_pixel_range"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_msdf_pixel_range</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msdf_pixel_range: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-msdf-pixel-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置最小和最大可表示有符号距离之间形状周围范围的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-msdf-size"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-msdf-size" names="class_textserver_method_font_set_msdf_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_msdf_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msdf_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-msdf-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置用于生成 MSDF 纹理的源字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-multichannel-signed-distance-field"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-multichannel-signed-distance-field" names="class_textserver_method_font_set_multichannel_signed_distance_field"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_multichannel_signed_distance_field</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msdf: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-multichannel-signed-distance-field"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则所有大小的字形都使用同一个从动态字体向量数据生成的多通道带符号距离场进行渲染。MSDF 渲染能够使用任意缩放系数显示字体，字体不会变得模糊，字体大小的改变也不会消耗 CPU 的性能（因为字体不再需要在 CPU 上进行光栅化）。缺点是MSDF 无法使用字体微调。缺少字体微调时，锐度可能降低，较小的字体可能不易阅读。</paragraph>
            <paragraph><strong>注意：</strong>MSDF 字体渲染无法正确渲染存在形状重叠的字形。重叠的形状在 OpenType 标准中是无效的，但在很多字体文件中仍然很常见，尤其是经过 Google Fonts 转换后的那些。要避免形状重叠带来的问题，请考虑直接从字体厂商下载字体文件，不要依赖 Google Fonts。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-name"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-name" names="class_textserver_method_font_set_name"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_name</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该字体的家族名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-opentype-feature-overrides"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-opentype-feature-overrides" names="class_textserver_method_font_set_opentype_feature_overrides"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_opentype_feature_overrides</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, overrides: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-opentype-feature-overrides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体 OpenType 特性集覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-oversampling"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-oversampling" names="class_textserver_method_font_set_oversampling"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_oversampling</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, oversampling: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-oversampling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体的过采样系数，如果设置为 <literal>0.0</literal>，则会改用全局过采样系数。仅由动态字体使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-scale"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-scale" names="class_textserver_method_font_set_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_scale</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置彩色位图字体的缩放系数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-script-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-script-support-override" names="class_textserver_method_font_set_script_support_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_script_support_override</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-script-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <reference internal="True" refid="class-textserver-method-font-is-script-supported"><inline classes="std std-ref">font_is_script_supported</inline></reference> 添加覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-spacing"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-spacing" names="class_textserver_method_font_set_spacing"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_spacing</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>spacing</literal> 的间距（见 <reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>）设置为 <literal>value</literal>，单位为像素（与字体大小无关）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-stretch"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-stretch" names="class_textserver_method_font_set_stretch"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_stretch</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, weight: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-stretch"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体相对于普通宽度的拉伸量，是在 <literal>50%</literal> 和 <literal>200%</literal> 之间的百分比值。</paragraph>
            <paragraph><strong>注意：</strong>这个值仅用于匹配字体，不会影响字体的渲染。请改用 <reference internal="True" refid="class-textserver-method-font-set-face-index"><inline classes="std std-ref">font_set_face_index</inline></reference>、<reference internal="True" refid="class-textserver-method-font-set-variation-coordinates"><inline classes="std std-ref">font_set_variation_coordinates</inline></reference> 或 <reference internal="True" refid="class-textserver-method-font-set-transform"><inline classes="std std-ref">font_set_transform</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-style"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-style" names="class_textserver_method_font_set_style"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_style</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, style: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>]) <reference internal="True" refid="class-textserver-method-font-set-style"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体样式标志，见 <reference internal="True" refid="enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这个值仅用于匹配字体，不会影响字体的渲染。请改用 <reference internal="True" refid="class-textserver-method-font-set-face-index"><inline classes="std std-ref">font_set_face_index</inline></reference>、<reference internal="True" refid="class-textserver-method-font-set-variation-coordinates"><inline classes="std std-ref">font_set_variation_coordinates</inline></reference>、<reference internal="True" refid="class-textserver-method-font-set-embolden"><inline classes="std std-ref">font_set_embolden</inline></reference> 或 <reference internal="True" refid="class-textserver-method-font-set-transform"><inline classes="std std-ref">font_set_transform</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-style-name"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-style-name" names="class_textserver_method_font_set_style_name"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_style_name</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-style-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体的样式名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-subpixel-positioning"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-subpixel-positioning" names="class_textserver_method_font_set_subpixel_positioning"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_subpixel_positioning</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, subpixel_positioning: <reference internal="True" refid="enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-subpixel-positioning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体的次像素字形定位模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-texture-image"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-texture-image" names="class_textserver_method_font_set_texture_image"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_texture_image</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-texture-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体的缓存纹理图像数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-texture-offsets"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-texture-offsets" names="class_textserver_method_font_set_texture_offsets"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_texture_offsets</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-texture-offsets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置包含字形打包数据的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-transform"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-transform" names="class_textserver_method_font_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_transform</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置应用于字体轮廓的 2D 变换，可用于倾斜、翻转和旋转字形。</paragraph>
            <paragraph>例如，要通过倾斜来模拟斜体字体，请应用以下变换 <literal>Transform2D(1.0, slant, 0.0, 1.0, 0.0, 0.0)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-underline-position"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-underline-position" names="class_textserver_method_font_set_underline_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_underline_position</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, underline_position: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-underline-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置基线下方下划线的像素偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-underline-thickness" names="class_textserver_method_font_set_underline_thickness"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_underline_thickness</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, underline_thickness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-underline-thickness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置下划线的粗细度，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-variation-coordinates"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-variation-coordinates" names="class_textserver_method_font_set_variation_coordinates"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_variation_coordinates</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, variation_coordinates: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-variation-coordinates"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为指定的字体缓存条目设置变体坐标。详见 <reference internal="True" refid="class-textserver-method-font-supported-variation-list"><inline classes="std std-ref">font_supported_variation_list</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-set-weight"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-set-weight" names="class_textserver_method_font_set_weight"><abbreviation explanation="无返回值。">void</abbreviation> <strong>font_set_weight</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, weight: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-font-set-weight"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体的字重（粗度）。字重是在 <literal>100...999</literal> 范围内的值，普通字重为 <literal>400</literal>，粗体字重为 <literal>700</literal>。</paragraph>
            <paragraph><strong>注意：</strong>这个值仅用于匹配字体，不会影响字体的渲染。请改用 <reference internal="True" refid="class-textserver-method-font-set-face-index"><inline classes="std std-ref">font_set_face_index</inline></reference>、<reference internal="True" refid="class-textserver-method-font-set-variation-coordinates"><inline classes="std std-ref">font_set_variation_coordinates</inline></reference>、<reference internal="True" refid="class-textserver-method-font-set-embolden"><inline classes="std std-ref">font_set_embolden</inline></reference> 或 <reference internal="True" refid="class-textserver-method-font-set-transform"><inline classes="std std-ref">font_set_transform</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-supported-feature-list"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-supported-feature-list" names="class_textserver_method_font_supported_feature_list"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>font_supported_feature_list</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-supported-feature-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回支持的 OpenType 特性的字典。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-font-supported-variation-list"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-font-supported-variation-list" names="class_textserver_method_font_supported_variation_list"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>font_supported_variation_list</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-font-supported-variation-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回支持的 OpenType 变体坐标的字典。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-format-number"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-format-number" names="class_textserver_method_format_number"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>format_number</strong>(number: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-format-number"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将数字从阿拉伯数字（0..9）转换为 <literal>language</literal> 语言的记数系统。</paragraph>
            <paragraph>如果省略 <literal>language</literal>，则会使用激活的区域设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-free-rid"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-free-rid" names="class_textserver_method_free_rid"><abbreviation explanation="无返回值。">void</abbreviation> <strong>free_rid</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-textserver-method-free-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>释放由该 <strong>TextServer</strong> 创建的某个对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-get-features"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-get-features" names="class_textserver_method_get_features"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_features</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-get-features"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本服务器的功能，见 <reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-get-hex-code-box-size"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-get-hex-code-box-size" names="class_textserver_method_get_hex_code_box_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_hex_code_box_size</strong>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-get-hex-code-box-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回替换字符的大小（在无效字符处绘制的带十六进制字符代码的框）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-get-name"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-get-name" names="class_textserver_method_get_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_name</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-get-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该服务器接口的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-get-support-data-filename"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-get-support-data-filename" names="class_textserver_method_get_support_data_filename"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_support_data_filename</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-get-support-data-filename"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回默认的 TextServer 数据库（例如 ICU 中断迭代器和字典）文件名。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-get-support-data-info"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-get-support-data-info" names="class_textserver_method_get_support_data_info"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_support_data_info</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-get-support-data-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 TextServer 数据库（例如 ICU 中断迭代器和字典）的描述。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-has"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-has" names="class_textserver_method_has"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-textserver-method-has"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>rid</literal> 是该文本服务器拥有的有效资源，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-has-feature"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-has-feature" names="class_textserver_method_has_feature"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_feature</strong>(feature: <reference internal="True" refid="enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-has-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果服务器支持某个功能，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-is-confusable"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-is-confusable" names="class_textserver_method_is_confusable"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>is_confusable</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, dict: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-is-confusable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>dict</literal> 中可能与 <literal>string</literal> 发生视觉混淆的第一个字符串的索引，如果没有找到则返回 <literal>-1</literal>。</paragraph>
            <paragraph><strong>注意：</strong>这个方法不检测不可见字符，要进行欺骗性检测，请与 <reference internal="True" refid="class-textserver-method-spoof-check"><inline classes="std std-ref">spoof_check</inline></reference> 结合使用。</paragraph>
            <paragraph><strong>注意：</strong>如果该服务器不支持 <reference internal="True" refid="class-textserver-constant-feature-unicode-security"><inline classes="std std-ref">FEATURE_UNICODE_SECURITY</inline></reference> 特性，则始终返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-is-locale-right-to-left"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-is-locale-right-to-left" names="class_textserver_method_is_locale_right_to_left"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_locale_right_to_left</strong>(locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-is-locale-right-to-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果区域设置为从右至左，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-is-valid-identifier"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-is-valid-identifier" names="class_textserver_method_is_valid_identifier"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_valid_identifier</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-is-valid-identifier"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>string</literal> 为有效的标识符，则返回 <literal>true</literal>。</paragraph>
            <paragraph>如果文字服务器支持 <reference internal="True" refid="class-textserver-constant-feature-unicode-identifiers"><inline classes="std std-ref">FEATURE_UNICODE_IDENTIFIERS</inline></reference> 特性，则有效的标识符必须：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>遵循 C 范式。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>开头是 XID_Start 类的 Unicode 字符或 <literal>"_"</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>其他位置可以包含 XID_Continue 类的 Unicode 字符。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>仅使用 UAX #31 推荐的文字（允许混合文字）。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果不支持 <reference internal="True" refid="class-textserver-constant-feature-unicode-identifiers"><inline classes="std std-ref">FEATURE_UNICODE_IDENTIFIERS</inline></reference> 特性，则有效的标识符必须：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>开头是 XID_Start 类的 Unicode 字符或 <literal>"_"</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>其他位置可以包含 XID_Continue 类的 Unicode 字符。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-is-valid-letter"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-is-valid-letter" names="class_textserver_method_is_valid_letter"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_valid_letter</strong>(unicode: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-is-valid-letter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的码位是有效的字母，即属于 Unicode 的“L”分类，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-load-support-data"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-load-support-data" names="class_textserver_method_load_support_data"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>load_support_data</strong>(filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textserver-method-load-support-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>加载可选的 TextServer 数据库（例如 ICU 断字迭代器和字典）。</paragraph>
            <paragraph><strong>注意：</strong>这个函数应该在使用任何其他 TextServer 函数之前调用，否则不会起任何作用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-name-to-tag"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-name-to-tag" names="class_textserver_method_name_to_tag"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>name_to_tag</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-name-to-tag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将可读的特性、变体、文字、语言名称转换为 OpenType 标记。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-parse-number"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-parse-number" names="class_textserver_method_parse_number"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>parse_number</strong>(number: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-parse-number"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将数字 <literal>number</literal> 从 <literal>language</literal> 的记数系统转换为阿拉伯数字（0..9）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-parse-structured-text"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-parse-structured-text" names="class_textserver_method_parse_structured_text"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>] <strong>parse_structured_text</strong>(parser_type: <reference internal="True" refid="enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference>, args: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-parse-structured-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>BiDi 算法覆盖函数的默认实现。有关详细信息，请参阅 <reference internal="True" refid="enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-percent-sign"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-percent-sign" names="class_textserver_method_percent_sign"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>percent_sign</strong>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-percent-sign"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回语言 <literal>language</literal> 中使用的百分比符号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-save-support-data"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-save-support-data" names="class_textserver_method_save_support_data"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>save_support_data</strong>(filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-save-support-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将可选的 TextServer 数据库（例如 ICU 断字迭代器和字典）保存到文件中。</paragraph>
            <paragraph><strong>注意：</strong>这个函数在导出项目时会用到，用于包含 TextServer 数据库。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-get-span-count"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-get-span-count" names="class_textserver_method_shaped_get_span_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_get_span_count</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-get-span-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回使用 <reference internal="True" refid="class-textserver-method-shaped-text-add-string"><inline classes="std std-ref">shaped_text_add_string</inline></reference> 或 <reference internal="True" refid="class-textserver-method-shaped-text-add-object"><inline classes="std std-ref">shaped_text_add_object</inline></reference> 添加的文本区间的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-get-span-meta"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-get-span-meta" names="class_textserver_method_shaped_get_span_meta"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>shaped_get_span_meta</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-get-span-meta"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本区间的元数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-set-span-update-font"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-set-span-update-font" names="class_textserver_method_shaped_set_span_update_font"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_set_span_update_font</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, fonts: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>], size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, opentype_features: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> = {}) <reference internal="True" refid="class-textserver-method-shaped-set-span-update-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在不更改文本的情况下，更改文本区间的字体、字体大小和 OpenType 特性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-add-object"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-add-object" names="class_textserver_method_shaped_text_add_object"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shaped_text_add_object</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> = 5, length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0) <reference internal="True" refid="class-textserver-method-shaped-text-add-object"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向文本缓冲中添加内联对象，<literal>key</literal> 必须唯一。在文本中，对象使用 <literal>length</literal> 个对象替换字符表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-add-string"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-add-string" names="class_textserver_method_shaped_text_add_string"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shaped_text_add_string</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, fonts: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>], size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, opentype_features: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> = {}, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", meta: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null) <reference internal="True" refid="class-textserver-method-shaped-text-add-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加文本区间和字体，将其绘制到文本缓冲中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-clear"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-clear" names="class_textserver_method_shaped_text_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_text_clear</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-textserver-method-shaped-text-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清空文本缓冲（移除文本和内联对象）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-closest-character-pos"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-closest-character-pos" names="class_textserver_method_shaped_text_closest_character_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_closest_character_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-closest-character-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回距离 <literal>pos</literal> 最近的组合字符位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-draw"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-draw" names="class_textserver_method_shaped_text_draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_text_draw</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, clip_l: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, clip_r: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在画布项的给定位置绘制塑形后的文本，颜色为 <literal>color</literal>。<literal>pos</literal> 指定的是基线的最左侧（横向排版）或基线的最顶部（纵向排版）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-draw-outline"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-draw-outline" names="class_textserver_method_shaped_text_draw_outline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_text_draw_outline</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, clip_l: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, clip_r: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-draw-outline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在画布项的给定位置绘制塑形后的文本轮廓，颜色为 <literal>color</literal>。<literal>pos</literal> 指定的是基线的最左侧（横向排版）或基线的最顶部（纵向排版）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-fit-to-width"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-fit-to-width" names="class_textserver_method_shaped_text_fit_to_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shaped_text_fit_to_width</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, justification_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] = 3) <reference internal="True" refid="class-textserver-method-shaped-text-fit-to-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>两端对齐文本以适合指定宽度，返回新的文本宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-ascent"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-ascent" names="class_textserver_method_shaped_text_get_ascent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shaped_text_get_ascent</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-ascent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本上高（水平布局基线上方的像素数，或垂直布局基线左侧的像素数）。</paragraph>
            <paragraph><strong>注意：</strong>如果某些字形偏离基线，则总体上高可能高于字体上高。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-carets"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-carets" names="class_textserver_method_shaped_text_get_carets"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>shaped_text_get_carets</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-carets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与文本中字符偏移 <literal>position</literal> 对应的文本光标的形状。返回的光标形状是宽度为 1 像素的矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-character-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-character-breaks" names="class_textserver_method_shaped_text_get_character_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>shaped_text_get_character_breaks</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-character-breaks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回组合字符边界的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-custom-ellipsis"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-custom-ellipsis" names="class_textserver_method_shaped_text_get_custom_ellipsis"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_get_custom_ellipsis</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-custom-ellipsis"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文字裁剪时使用的省略字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-custom-punctuation"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-custom-punctuation" names="class_textserver_method_shaped_text_get_custom_punctuation"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>shaped_text_get_custom_punctuation</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-custom-punctuation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自定义标点字符列表，用于断字。如果被设置为空字符串，则使用服务器的默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-descent"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-descent" names="class_textserver_method_shaped_text_get_descent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shaped_text_get_descent</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-descent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本下深（水平布局基线下方的像素数，或垂直布局基线右侧的像素数）。</paragraph>
            <paragraph><strong>注意：</strong>如果某些字形偏离基线，则总体下深可能高于字体下深。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-direction"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-direction" names="class_textserver_method_shaped_text_get_direction"><reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>shaped_text_get_direction</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本的方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-dominant-direction-in-range"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-dominant-direction-in-range" names="class_textserver_method_shaped_text_get_dominant_direction_in_range"><reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>shaped_text_get_dominant_direction_in_range</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-dominant-direction-in-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本范围内的主要书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-ellipsis-glyph-count"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-ellipsis-glyph-count" names="class_textserver_method_shaped_text_get_ellipsis_glyph_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_get_ellipsis_glyph_count</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-ellipsis-glyph-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回省略号中的字形数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-ellipsis-glyphs"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-ellipsis-glyphs" names="class_textserver_method_shaped_text_get_ellipsis_glyphs"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>shaped_text_get_ellipsis_glyphs</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-ellipsis-glyphs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回省略号中的字形数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-ellipsis-pos"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-ellipsis-pos" names="class_textserver_method_shaped_text_get_ellipsis_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_get_ellipsis_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-ellipsis-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回省略号的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-glyph-count"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-glyph-count" names="class_textserver_method_shaped_text_get_glyph_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_get_glyph_count</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-glyph-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回缓冲区中的字形数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-glyphs"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-glyphs" names="class_textserver_method_shaped_text_get_glyphs"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>shaped_text_get_glyphs</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-glyphs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字形数组，按视觉顺序排序。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-grapheme-bounds"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-grapheme-bounds" names="class_textserver_method_shaped_text_get_grapheme_bounds"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>shaped_text_get_grapheme_bounds</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-grapheme-bounds"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将复合字符的边界返回为距行首的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-inferred-direction"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-inferred-direction" names="class_textserver_method_shaped_text_get_inferred_direction"><reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>shaped_text_get_inferred_direction</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-inferred-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由 BiDi 算法推断的文本书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-line-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-line-breaks" names="class_textserver_method_shaped_text_get_line_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>shaped_text_get_line_breaks</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, break_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>] = 3) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-line-breaks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>对文本进行断行，返回每一行的字符范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-line-breaks-adv"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-line-breaks-adv" names="class_textserver_method_shaped_text_get_line_breaks_adv"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>shaped_text_get_line_breaks_adv</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, once: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, break_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>] = 3) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-line-breaks-adv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将文本拆分为行和列。返回每段的字符范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-object-glyph"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-object-glyph" names="class_textserver_method_shaped_text_get_object_glyph"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_get_object_glyph</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-object-glyph"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回内联对象的字形索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-object-range"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-object-range" names="class_textserver_method_shaped_text_get_object_range"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>shaped_text_get_object_range</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-object-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回内联对象的字符范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-object-rect"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-object-rect" names="class_textserver_method_shaped_text_get_object_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>shaped_text_get_object_rect</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-object-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回内联对象的边界矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-objects"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-objects" names="class_textserver_method_shaped_text_get_objects"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>shaped_text_get_objects</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-objects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回内联对象的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-orientation"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-orientation" names="class_textserver_method_shaped_text_get_orientation"><reference internal="True" refid="enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> <strong>shaped_text_get_orientation</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-orientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本朝向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-parent"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-parent" names="class_textserver_method_shaped_text_get_parent"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>shaped_text_get_parent</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-parent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回子字符串源自哪个父缓冲区。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-preserve-control"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-preserve-control" names="class_textserver_method_shaped_text_get_preserve_control"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shaped_text_get_preserve_control</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-preserve-control"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果文本缓冲区被配置为显示控制字符，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-preserve-invalid"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-preserve-invalid" names="class_textserver_method_shaped_text_get_preserve_invalid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shaped_text_get_preserve_invalid</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-preserve-invalid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果文本缓冲区被配置为在无效字符处显示十六进制代码，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>如果设置为 <literal>false</literal>，则在无效字符处不显示任何内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-range"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-range" names="class_textserver_method_shaped_text_get_range"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>shaped_text_get_range</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回父缓冲区中子字符串缓冲区的字符范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-selection"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-selection" names="class_textserver_method_shaped_text_get_selection"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>shaped_text_get_selection</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-selection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回用于指定字符范围的选区矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-size"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-size" names="class_textserver_method_shaped_text_get_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>shaped_text_get_size</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该文本的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-spacing"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-spacing" names="class_textserver_method_shaped_text_get_spacing"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_get_spacing</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字形或行之间添加的额外间距，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-trim-pos"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-trim-pos" names="class_textserver_method_shaped_text_get_trim_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_get_trim_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-trim-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回超出修剪的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-underline-position"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-underline-position" names="class_textserver_method_shaped_text_get_underline_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shaped_text_get_underline_position</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-underline-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回基线下方下划线的像素偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-underline-thickness" names="class_textserver_method_shaped_text_get_underline_thickness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shaped_text_get_underline_thickness</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-underline-thickness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回下划线的粗细度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-width"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-width" names="class_textserver_method_shaped_text_get_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shaped_text_get_width</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本的宽度（对于水平排版）或高度（对于垂直排版）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-get-word-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-get-word-breaks" names="class_textserver_method_shaped_text_get_word_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>shaped_text_get_word_breaks</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, grapheme_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>] = 264, skip_grapheme_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>] = 4) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-get-word-breaks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将文本分解成单词并返回字符范围的数组。请使用 <literal>grapheme_flags</literal> 来设置哪些字符会被用于分解（见 <reference internal="True" refid="enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-has-visible-chars"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-has-visible-chars" names="class_textserver_method_shaped_text_has_visible_chars"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shaped_text_has_visible_chars</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-has-visible-chars"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果文本缓冲区存在可显示字符，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-hit-test-grapheme"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-hit-test-grapheme" names="class_textserver_method_shaped_text_hit_test_grapheme"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_hit_test_grapheme</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, coords: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-hit-test-grapheme"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字素的索引，该字素位于基线上指定像素偏移的位置，如果没有找到，则返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-hit-test-position"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-hit-test-position" names="class_textserver_method_shaped_text_hit_test_position"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_hit_test_position</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, coords: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-hit-test-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回基线处指定像素偏移处的文本光标的偏移量。该函数始终返回一个有效位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-is-ready"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-is-ready" names="class_textserver_method_shaped_text_is_ready"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shaped_text_is_ready</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-is-ready"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果缓冲区成功塑形，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-next-character-pos"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-next-character-pos" names="class_textserver_method_shaped_text_next_character_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_next_character_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-next-character-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回距离 <literal>pos</literal> 最近的组合字符结束位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-next-grapheme-pos"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-next-grapheme-pos" names="class_textserver_method_shaped_text_next_grapheme_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_next_grapheme_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-next-grapheme-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回距离 <literal>pos</literal> 最近的字素结束位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-overrun-trim-to-width"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-overrun-trim-to-width" names="class_textserver_method_shaped_text_overrun_trim_to_width"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_text_overrun_trim_to_width</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0, overrun_trim_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-textserver-textoverrunflag"><inline classes="std std-ref">TextOverrunFlag</inline></reference>] = 0) <reference internal="True" refid="class-textserver-method-shaped-text-overrun-trim-to-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果文本超出给定宽度，则修剪文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-prev-character-pos"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-prev-character-pos" names="class_textserver_method_shaped_text_prev_character_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_prev_character_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-prev-character-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回距离 <literal>pos</literal> 最近的组合字符开始位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-prev-grapheme-pos"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-prev-grapheme-pos" names="class_textserver_method_shaped_text_prev_grapheme_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shaped_text_prev_grapheme_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-prev-grapheme-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回距离 <literal>pos</literal> 最近的字素开始位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-resize-object"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-resize-object" names="class_textserver_method_shaped_text_resize_object"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shaped_text_resize_object</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> = 5, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0) <reference internal="True" refid="class-textserver-method-shaped-text-resize-object"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置嵌入对象的新大小和对齐方式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-set-bidi-override"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-set-bidi-override" names="class_textserver_method_shaped_text_set_bidi_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_text_set_bidi_override</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, override: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <reference internal="True" refid="class-textserver-method-shaped-text-set-bidi-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖用于结构化文本的 BiDi。</paragraph>
            <paragraph>覆盖范围应覆盖完整的源文本而没有重叠。BiDi 算法将分别被用于每个范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-set-custom-ellipsis"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-set-custom-ellipsis" names="class_textserver_method_shaped_text_set_custom_ellipsis"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_text_set_custom_ellipsis</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-shaped-text-set-custom-ellipsis"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置文字裁剪时使用的省略字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-set-custom-punctuation"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-set-custom-punctuation" names="class_textserver_method_shaped_text_set_custom_punctuation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_text_set_custom_punctuation</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, punct: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-textserver-method-shaped-text-set-custom-punctuation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置自定义标点字符列表，用于断字。如果被设置为空字符串，则使用服务器的默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-set-direction"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-set-direction" names="class_textserver_method_shaped_text_set_direction"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_text_set_direction</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, direction: <reference internal="True" refid="enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> = 0) <reference internal="True" refid="class-textserver-method-shaped-text-set-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置所需的文本方向。如果设置为 <reference internal="True" refid="class-textserver-constant-direction-auto"><inline classes="std std-ref">DIRECTION_AUTO</inline></reference>，方向将根据缓冲区的内容和当前的区域设置来检测。</paragraph>
            <paragraph><strong>注意：</strong>如果服务器不支持 <reference internal="True" refid="class-textserver-constant-feature-bidi-layout"><inline classes="std std-ref">FEATURE_BIDI_LAYOUT</inline></reference> 特性，则方向会被忽略（<reference internal="True" refuri="class_textserveradvanced#class-textserveradvanced"><inline classes="std std-ref">TextServerAdvanced</inline></reference> 支持）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-set-orientation"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-set-orientation" names="class_textserver_method_shaped_text_set_orientation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_text_set_orientation</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, orientation: <reference internal="True" refid="enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> = 0) <reference internal="True" refid="class-textserver-method-shaped-text-set-orientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置所需的文本排版方向。</paragraph>
            <paragraph><strong>注意：</strong>如果服务器不支持 <reference internal="True" refid="class-textserver-constant-feature-vertical-layout"><inline classes="std std-ref">FEATURE_VERTICAL_LAYOUT</inline></reference> 功能（由 <reference internal="True" refuri="class_textserveradvanced#class-textserveradvanced"><inline classes="std std-ref">TextServerAdvanced</inline></reference> 支持），则排版方向将被忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-set-preserve-control"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-set-preserve-control" names="class_textserver_method_shaped_text_set_preserve_control"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_text_set_preserve_control</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textserver-method-shaped-text-set-preserve-control"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则文本缓冲区将显示控制字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-set-preserve-invalid"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-set-preserve-invalid" names="class_textserver_method_shaped_text_set_preserve_invalid"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_text_set_preserve_invalid</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-textserver-method-shaped-text-set-preserve-invalid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则文本缓冲区会将无效字符显示为十六进制代码，否则不显示任何内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-set-spacing"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-set-spacing" names="class_textserver_method_shaped_text_set_spacing"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shaped_text_set_spacing</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refid="enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textserver-method-shaped-text-set-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字形之间或行与行之间添加的额外像素间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-shape"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-shape" names="class_textserver_method_shaped_text_shape"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shaped_text_shape</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-textserver-method-shaped-text-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>形状缓冲区（如果未塑形）。如果字符串塑形成功，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>无需手动调用该函数，只要请求其任何输出数据，缓冲区就会自动被塑形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-sort-logical"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-sort-logical" names="class_textserver_method_shaped_text_sort_logical"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>shaped_text_sort_logical</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-textserver-method-shaped-text-sort-logical"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>按逻辑顺序返回文本字形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-substr"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-substr" names="class_textserver_method_shaped_text_substr"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>shaped_text_substr</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-shaped-text-substr"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>shaped</literal> 文本缓冲区中字符串的子字符串的文本缓冲区（包括内联对象）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-shaped-text-tab-align"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-shaped-text-tab-align" names="class_textserver_method_shaped_text_tab_align"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shaped_text_tab_align</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, tab_stops: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>) <reference internal="True" refid="class-textserver-method-shaped-text-tab-align"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将塑形文本与给定的制表位对齐。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-spoof-check"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-spoof-check" names="class_textserver_method_spoof_check"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>spoof_check</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-spoof-check"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>string</literal> 可能造成读者的混淆，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>如果服务器不支持 <reference internal="True" refid="class-textserver-constant-feature-unicode-security"><inline classes="std std-ref">FEATURE_UNICODE_SECURITY</inline></reference> 特性，则始终返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-string-get-character-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-string-get-character-breaks" names="class_textserver_method_string_get_character_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>string_get_character_breaks</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-string-get-character-breaks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回组合字符边界的数组。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var ts = TextServerManager.get_primary_interface()
print(ts.string_get_word_breaks("Test ❤️‍🔥 Test")) # 输出 [1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-string-get-word-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-string-get-word-breaks" names="class_textserver_method_string_get_word_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>string_get_word_breaks</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", chars_per_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-string-get-word-breaks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns an array of the word break boundaries. Elements in the returned array are the offsets of the start and end of words. Therefore the length of the array is always even.</paragraph>
            <paragraph>When <literal>chars_per_line</literal> is greater than zero, line break boundaries are returned instead.</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var ts = TextServerManager.get_primary_interface()
print(ts.string_get_word_breaks("The Godot Engine, 4")) # Prints [0, 3, 4, 9, 10, 16, 18, 19], which corresponds to the following substrings: "The", "Godot", "Engine", "4"
print(ts.string_get_word_breaks("The Godot Engine, 4", "en", 5)) # Prints [0, 3, 4, 9, 10, 15, 15, 19], which corresponds to the following substrings: "The", "Godot", "Engin", "e, 4"
print(ts.string_get_word_breaks("The Godot Engine, 4", "en", 10)) # Prints [0, 9, 10, 19], which corresponds to the following substrings: "The Godot", "Engine, 4"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-string-to-lower"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-string-to-lower" names="class_textserver_method_string_to_lower"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>string_to_lower</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-string-to-lower"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回转换为小写的字符串。</paragraph>
            <paragraph><strong>注意：</strong>如果服务器支持 <reference internal="True" refid="class-textserver-constant-feature-context-sensitive-case-conversion"><inline classes="std std-ref">FEATURE_CONTEXT_SENSITIVE_CASE_CONVERSION</inline></reference> 特性（<reference internal="True" refuri="class_textserveradvanced#class-textserveradvanced"><inline classes="std std-ref">TextServerAdvanced</inline></reference> 支持），则大小写取决于区域设置，并且对上下文敏感。</paragraph>
            <paragraph><strong>注意：</strong>得到的字符串可能比原来的更长，也可能更短。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-string-to-title"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-string-to-title" names="class_textserver_method_string_to_title"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>string_to_title</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-string-to-title"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回转换为标题大小写的字符串。</paragraph>
            <paragraph><strong>注意：</strong>如果服务器支持 <reference internal="True" refid="class-textserver-constant-feature-context-sensitive-case-conversion"><inline classes="std std-ref">FEATURE_CONTEXT_SENSITIVE_CASE_CONVERSION</inline></reference> 特性（受 <reference internal="True" refuri="class_textserveradvanced#class-textserveradvanced"><inline classes="std std-ref">TextServerAdvanced</inline></reference> 支持），则大小写取决于区域设置，并且对上下文敏感。</paragraph>
            <paragraph><strong>注意：</strong>结果可能比原始结果更长或更短。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-string-to-upper"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-string-to-upper" names="class_textserver_method_string_to_upper"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>string_to_upper</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-string-to-upper"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回转换为大写的字符串。</paragraph>
            <paragraph><strong>注意：</strong>如果服务器支持 <reference internal="True" refid="class-textserver-constant-feature-context-sensitive-case-conversion"><inline classes="std std-ref">FEATURE_CONTEXT_SENSITIVE_CASE_CONVERSION</inline></reference> 特性（<reference internal="True" refuri="class_textserveradvanced#class-textserveradvanced"><inline classes="std std-ref">TextServerAdvanced</inline></reference> 支持），则大小写取决于区域设置，并且对上下文敏感。</paragraph>
            <paragraph><strong>注意：</strong>得到的字符串可能比原来的更长，也可能更短。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-strip-diacritics"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-strip-diacritics" names="class_textserver_method_strip_diacritics"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>strip_diacritics</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-strip-diacritics"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从字符串中剥离变音符号。</paragraph>
            <paragraph><strong>注意：</strong>得到的字符串可能比原来的更长，也可能更短。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserver-method-tag-to-name"></target>
            <paragraph classes="classref-method" ids="class-textserver-method-tag-to-name" names="class_textserver_method_tag_to_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>tag_to_name</strong>(tag: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserver-method-tag-to-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 OpenType 标签转换为可读的特性、变体、文字、语言名称。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
