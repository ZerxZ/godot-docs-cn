<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editorcommandpalette.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/EditorCommandPalette.xml.</comment>
    <target refid="class-editorcommandpalette"></target>
    <section ids="editorcommandpalette class-editorcommandpalette" names="editorcommandpalette class_editorcommandpalette">
        <title>EditorCommandPalette</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_confirmationdialog#class-confirmationdialog"><inline classes="std std-ref">ConfirmationDialog</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_acceptdialog#class-acceptdialog"><inline classes="std std-ref">AcceptDialog</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>Godot 编辑器的命令面板。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该对象包含所有可用命令及其快捷方式文本。这些命令可以通过 <strong>Editor &gt; 命令面板</strong> 菜单访问。</paragraph>
            <paragraph>命令键名使用斜杠分隔符来区分部分，例如：<literal>"example/command1"</literal>，那么 <literal>example</literal> 将是部分名称。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var command_palette = EditorInterface.get_command_palette()
# external_command 是将在命令执行时调用的函数。
var command_callable = Callable(self, "external_command").bind(arguments)
command_palette.add_command("command", "test/command",command_callable)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">EditorCommandPalette commandPalette = EditorInterface.Singleton.GetCommandPalette();
// ExternalCommand 是将在命令执行时调用的函数。
Callable commandCallable = new Callable(this, MethodName.ExternalCommand);
commandPalette.AddCommand("command", "test/command", commandCallable)</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>不应直接实例化此类。相反，使用 <reference internal="True" refuri="class_editorinterface#class-editorinterface-method-get-command-palette"><inline classes="std std-ref">EditorInterface.get_command_palette</inline></reference> 访问单例。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="19"></colspec>
                    <colspec colwidth="90"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>dialog_hide_on_ok</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal> (overrides <reference internal="True" refuri="class_acceptdialog#class-acceptdialog-property-dialog-hide-on-ok"><inline classes="std std-ref">AcceptDialog</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="8"></colspec>
                    <colspec colwidth="262"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorcommandpalette-method-add-command"><inline classes="std std-ref">add_command</inline></reference>(command_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, binded_callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, shortcut_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "None")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorcommandpalette-method-remove-command"><inline classes="std std-ref">remove_command</inline></reference>(key_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editorcommandpalette-method-add-command"></target>
            <paragraph classes="classref-method" ids="class-editorcommandpalette-method-add-command" names="class_editorcommandpalette_method_add_command"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_command</strong>(command_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, binded_callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, shortcut_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "None") <reference internal="True" refid="class-editorcommandpalette-method-add-command"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向 EditorCommandPalette 添加自定义命令。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>command_name</literal>：<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>（<strong>Command</strong> 的名称。这会显示给用户。）</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>key_name</literal>：<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>（特定 <strong>Command</strong> 的密钥名称。这用于唯一标识 <strong>Command</strong>。）</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>binded_callable</literal>：<reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>（<strong>Command</strong> 的 Callable。这将在选择 <strong>Command</strong> 时执行。）</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>shortcut_text</literal>：<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>（<strong>Command</strong> 的快捷键文本，如果可用。）</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorcommandpalette-method-remove-command"></target>
            <paragraph classes="classref-method" ids="class-editorcommandpalette-method-remove-command" names="class_editorcommandpalette_method_remove_command"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_command</strong>(key_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorcommandpalette-method-remove-command"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 EditorCommandPalette 中删除自定义命令。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>key_name</literal>: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> (特定 <strong>Command</strong> 的键名)</paragraph>
                </list_item>
            </bullet_list>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
