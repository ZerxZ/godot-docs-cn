<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_line2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Line2D.xml.</comment>
    <target refid="class-line2d"></target>
    <section ids="line2d class-line2d" names="line2d class_line2d">
        <title>Line2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>可以选择设置纹理的 2D 折线。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该节点绘制一条 2D 折线，即由多个线段连接的点组成的形状。<strong>Line2D</strong> 不是数学折线，即线段不是无限细的。它用于渲染，且可以被着色，也可以选择纹理。</paragraph>
            <paragraph><strong>警告：</strong>某些配置可能无法很好地绘制，例如非常锐利的角度。在这些情况下，节点使用后备绘制逻辑来看起来不错。</paragraph>
            <paragraph><strong>注意：</strong><strong>Line2D</strong> 使用 2D 网格进行绘制。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="矩阵变换演示" refuri="https://godotengine.org/asset-library/asset/2787">矩阵变换演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2.5D 游戏演示" refuri="https://godotengine.org/asset-library/asset/2783">2.5D 游戏演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="63"></colspec>
                    <colspec colwidth="26"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-antialiased"><inline classes="std std-ref">antialiased</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-begin-cap-mode"><inline classes="std std-ref">begin_cap_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-closed"><inline classes="std std-ref">closed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-default-color"><inline classes="std std-ref">default_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-end-cap-mode"><inline classes="std std-ref">end_cap_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_gradient#class-gradient"><inline classes="std std-ref">Gradient</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-gradient"><inline classes="std std-ref">gradient</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-line2d-linejointmode"><inline classes="std std-ref">LineJointMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-joint-mode"><inline classes="std std-ref">joint_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-points"><inline classes="std std-ref">points</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedVector2Array()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-round-precision"><inline classes="std std-ref">round_precision</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>8</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-sharp-limit"><inline classes="std std-ref">sharp_limit</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-texture"><inline classes="std std-ref">texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-line2d-linetexturemode"><inline classes="std std-ref">LineTextureMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-texture-mode"><inline classes="std std-ref">texture_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-width"><inline classes="std std-ref">width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>10.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-property-width-curve"><inline classes="std std-ref">width_curve</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="146"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-method-add-point"><inline classes="std std-ref">add_point</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-method-clear-points"><inline classes="std std-ref">clear_points</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-method-get-point-count"><inline classes="std std-ref">get_point_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-method-get-point-position"><inline classes="std std-ref">get_point_position</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-method-remove-point"><inline classes="std std-ref">remove_point</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-line2d-method-set-point-position"><inline classes="std std-ref">set_point_position</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-line2d-linejointmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-line2d-linejointmode" names="enum_line2d_linejointmode">enum <strong>LineJointMode</strong>: <reference internal="True" refid="enum-line2d-linejointmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-line2d-constant-line-joint-sharp"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-line2d-constant-line-joint-sharp" names="class_line2d_constant_line_joint_sharp"><reference internal="True" refid="enum-line2d-linejointmode"><inline classes="std std-ref">LineJointMode</inline></reference> <strong>LINE_JOINT_SHARP</strong> = <literal>0</literal></paragraph>
            <paragraph>使该折线的接头变尖，通过延伸两条线段直至它们相交来连接它们的侧面。如果关节的旋转太大（基于 <reference internal="True" refid="class-line2d-property-sharp-limit"><inline classes="std std-ref">sharp_limit</inline></reference>），关节将回落到 <reference internal="True" refid="class-line2d-constant-line-joint-bevel"><inline classes="std std-ref">LINE_JOINT_BEVEL</inline></reference> 以防止出现过长的斜角。</paragraph>
            <target refid="class-line2d-constant-line-joint-bevel"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-line2d-constant-line-joint-bevel" names="class_line2d_constant_line_joint_bevel"><reference internal="True" refid="enum-line2d-linejointmode"><inline classes="std std-ref">LineJointMode</inline></reference> <strong>LINE_JOINT_BEVEL</strong> = <literal>1</literal></paragraph>
            <paragraph>使折线的接头倾斜/倒角，用一条简单的线连接两个线段的侧面。</paragraph>
            <target refid="class-line2d-constant-line-joint-round"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-line2d-constant-line-joint-round" names="class_line2d_constant_line_joint_round"><reference internal="True" refid="enum-line2d-linejointmode"><inline classes="std std-ref">LineJointMode</inline></reference> <strong>LINE_JOINT_ROUND</strong> = <literal>2</literal></paragraph>
            <paragraph>使该折线的接头变圆，用圆弧连接两条线段的侧面。该弧的细节取决于 <reference internal="True" refid="class-line2d-property-round-precision"><inline classes="std std-ref">round_precision</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-line2d-linecapmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-line2d-linecapmode" names="enum_line2d_linecapmode">enum <strong>LineCapMode</strong>: <reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-line2d-constant-line-cap-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-line2d-constant-line-cap-none" names="class_line2d_constant_line_cap_none"><reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference> <strong>LINE_CAP_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>不绘制线条端点。</paragraph>
            <target refid="class-line2d-constant-line-cap-box"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-line2d-constant-line-cap-box" names="class_line2d_constant_line_cap_box"><reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference> <strong>LINE_CAP_BOX</strong> = <literal>1</literal></paragraph>
            <paragraph>将线帽绘制为方框，稍微延伸第一段/最后一段。</paragraph>
            <target refid="class-line2d-constant-line-cap-round"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-line2d-constant-line-cap-round" names="class_line2d_constant_line_cap_round"><reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference> <strong>LINE_CAP_ROUND</strong> = <literal>2</literal></paragraph>
            <paragraph>将线帽绘制为连接到第一条/最后一条线段的半圆。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-line2d-linetexturemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-line2d-linetexturemode" names="enum_line2d_linetexturemode">enum <strong>LineTextureMode</strong>: <reference internal="True" refid="enum-line2d-linetexturemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-line2d-constant-line-texture-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-line2d-constant-line-texture-none" names="class_line2d_constant_line_texture_none"><reference internal="True" refid="enum-line2d-linetexturemode"><inline classes="std std-ref">LineTextureMode</inline></reference> <strong>LINE_TEXTURE_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>获取纹理的左侧像素并将它们渲染在整条折线上。</paragraph>
            <target refid="class-line2d-constant-line-texture-tile"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-line2d-constant-line-texture-tile" names="class_line2d_constant_line_texture_tile"><reference internal="True" refid="enum-line2d-linetexturemode"><inline classes="std std-ref">LineTextureMode</inline></reference> <strong>LINE_TEXTURE_TILE</strong> = <literal>1</literal></paragraph>
            <paragraph>将纹理平铺在该折线上。该 <strong>Line2D</strong> 节点的 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-texture-repeat"><inline classes="std std-ref">CanvasItem.texture_repeat</inline></reference> 必须为 <reference internal="True" refuri="class_canvasitem#class-canvasitem-constant-texture-repeat-enabled"><inline classes="std std-ref">CanvasItem.TEXTURE_REPEAT_ENABLED</inline></reference> 或 <reference internal="True" refuri="class_canvasitem#class-canvasitem-constant-texture-repeat-mirror"><inline classes="std std-ref">CanvasItem.TEXTURE_REPEAT_MIRROR</inline></reference>，才能正常工作。</paragraph>
            <target refid="class-line2d-constant-line-texture-stretch"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-line2d-constant-line-texture-stretch" names="class_line2d_constant_line_texture_stretch"><reference internal="True" refid="enum-line2d-linetexturemode"><inline classes="std std-ref">LineTextureMode</inline></reference> <strong>LINE_TEXTURE_STRETCH</strong> = <literal>2</literal></paragraph>
            <paragraph>沿该折线拉伸纹理。为了获得最佳效果，<strong>Line2D</strong> 节点的 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-texture-repeat"><inline classes="std std-ref">CanvasItem.texture_repeat</inline></reference> 必须为 <reference internal="True" refuri="class_canvasitem#class-canvasitem-constant-texture-repeat-disabled"><inline classes="std std-ref">CanvasItem.TEXTURE_REPEAT_DISABLED</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-line2d-property-antialiased"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-antialiased" names="class_line2d_property_antialiased"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>antialiased</strong> = <literal>false</literal> <reference internal="True" refid="class-line2d-property-antialiased"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_antialiased</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_antialiased</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则折线的边界将使用抗锯齿。</paragraph>
            <paragraph><strong>注意：</strong><strong>Line2D</strong> 在使用抗锯齿时，不会通过批处理来加速。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-begin-cap-mode"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-begin-cap-mode" names="class_line2d_property_begin_cap_mode"><reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference> <strong>begin_cap_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-line2d-property-begin-cap-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_begin_cap_mode</strong>(value: <reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference> <strong>get_begin_cap_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refid="class-line2d-property-closed"><inline classes="std std-ref">closed</inline></reference> 为 <literal>false</literal> 时的折线开头样式。使用 <reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-closed"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-closed" names="class_line2d_property_closed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>closed</strong> = <literal>false</literal> <reference internal="True" refid="class-line2d-property-closed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_closed</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_closed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal> 并且折线有超过2个点，则最后一个点和第一个点将通过线段连接。</paragraph>
            <paragraph><strong>注意：</strong>如果提供了 <reference internal="True" refid="class-line2d-property-width-curve"><inline classes="std std-ref">width_curve</inline></reference>，则不保证闭合线段的形状是无缝的。</paragraph>
            <paragraph><strong>注意：</strong>首先绘制结束线段和第一条线段之间的连接点，并在开始时对 <reference internal="True" refid="class-line2d-property-gradient"><inline classes="std std-ref">gradient</inline></reference> 和 <reference internal="True" refid="class-line2d-property-width-curve"><inline classes="std std-ref">width_curve</inline></reference> 进行采样。这是在未来版本中可能会更改的实现细节。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-default-color"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-default-color" names="class_line2d_property_default_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>default_color</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-line2d-property-default-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_color</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_default_color</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>折线的颜色。如果设置了渐变，则不会被使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-end-cap-mode"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-end-cap-mode" names="class_line2d_property_end_cap_mode"><reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference> <strong>end_cap_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-line2d-property-end-cap-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_end_cap_mode</strong>(value: <reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference> <strong>get_end_cap_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refid="class-line2d-property-closed"><inline classes="std std-ref">closed</inline></reference> 为 <literal>false</literal> 时的折线末端样式。使用 <reference internal="True" refid="enum-line2d-linecapmode"><inline classes="std std-ref">LineCapMode</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-gradient"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-gradient" names="class_line2d_property_gradient"><reference internal="True" refuri="class_gradient#class-gradient"><inline classes="std std-ref">Gradient</inline></reference> <strong>gradient</strong> <reference internal="True" refid="class-line2d-property-gradient"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_gradient</strong>(value: <reference internal="True" refuri="class_gradient#class-gradient"><inline classes="std std-ref">Gradient</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_gradient#class-gradient"><inline classes="std std-ref">Gradient</inline></reference> <strong>get_gradient</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>渐变是从头到尾贯穿整条线绘制的。如果该属性被设置，则 <reference internal="True" refid="class-line2d-property-default-color"><inline classes="std std-ref">default_color</inline></reference> 不会被使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-joint-mode"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-joint-mode" names="class_line2d_property_joint_mode"><reference internal="True" refid="enum-line2d-linejointmode"><inline classes="std std-ref">LineJointMode</inline></reference> <strong>joint_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-line2d-property-joint-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_joint_mode</strong>(value: <reference internal="True" refid="enum-line2d-linejointmode"><inline classes="std std-ref">LineJointMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-line2d-linejointmode"><inline classes="std std-ref">LineJointMode</inline></reference> <strong>get_joint_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>折线段之间的连接样式。使用 <reference internal="True" refid="enum-line2d-linejointmode"><inline classes="std std-ref">LineJointMode</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-points"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-points" names="class_line2d_property_points"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>points</strong> = <literal>PackedVector2Array()</literal> <reference internal="True" refid="class-line2d-property-points"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_points</strong>(value: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>get_points</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>折线的点，以局部 2D 坐标解释。在该数组中的相邻点之间绘制线段。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-round-precision"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-round-precision" names="class_line2d_property_round_precision"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>round_precision</strong> = <literal>8</literal> <reference internal="True" refid="class-line2d-property-round-precision"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_round_precision</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_round_precision</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于圆形接头和端盖的光滑度。值越高，边角越平滑，但对渲染和更新的要求更高。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-sharp-limit"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-sharp-limit" names="class_line2d_property_sharp_limit"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>sharp_limit</strong> = <literal>2.0</literal> <reference internal="True" refid="class-line2d-property-sharp-limit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_sharp_limit</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_sharp_limit</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>确定该折线的斜接限制。通常，当 <reference internal="True" refid="class-line2d-property-joint-mode"><inline classes="std std-ref">joint_mode</inline></reference> 被设置为 <reference internal="True" refid="class-line2d-constant-line-joint-sharp"><inline classes="std std-ref">LINE_JOINT_SHARP</inline></reference> 时，锐角会回退到使用 <reference internal="True" refid="class-line2d-constant-line-joint-bevel"><inline classes="std std-ref">LINE_JOINT_BEVEL</inline></reference> 关节的逻辑来防止过长的斜接。该属性的值越高意味着倒角接头的回退将以更锐利的角度发生。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-texture"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-texture" names="class_line2d_property_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>texture</strong> <reference internal="True" refid="class-line2d-property-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(value: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于折线的纹理。使用 <reference internal="True" refid="class-line2d-property-texture-mode"><inline classes="std std-ref">texture_mode</inline></reference> 作为绘图样式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-texture-mode"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-texture-mode" names="class_line2d_property_texture_mode"><reference internal="True" refid="enum-line2d-linetexturemode"><inline classes="std std-ref">LineTextureMode</inline></reference> <strong>texture_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-line2d-property-texture-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture_mode</strong>(value: <reference internal="True" refid="enum-line2d-linetexturemode"><inline classes="std std-ref">LineTextureMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-line2d-linetexturemode"><inline classes="std std-ref">LineTextureMode</inline></reference> <strong>get_texture_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>渲染该折线的 <reference internal="True" refid="class-line2d-property-texture"><inline classes="std std-ref">texture</inline></reference> 的样式。使用 <reference internal="True" refid="enum-line2d-linetexturemode"><inline classes="std std-ref">LineTextureMode</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-width"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-width" names="class_line2d_property_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>width</strong> = <literal>10.0</literal> <reference internal="True" refid="class-line2d-property-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_width</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_width</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>多边形的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-property-width-curve"></target>
            <paragraph classes="classref-property" ids="class-line2d-property-width-curve" names="class_line2d_property_width_curve"><reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference> <strong>width_curve</strong> <reference internal="True" refid="class-line2d-property-width-curve"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_curve</strong>(value: <reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference> <strong>get_curve</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该折线的宽度曲线。该折线在其长度上的宽度将等于宽度曲线在其域上的值。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-line2d-method-add-point"></target>
            <paragraph classes="classref-method" ids="class-line2d-method-add-point" names="class_line2d_method_add_point"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_point</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-line2d-method-add-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在指定的位置 <literal>position</literal> 添加一个点，该位置相对于该线段自身的位置。如果未提供 <literal>index</literal>，则新的点将被添加到点数组的末尾。</paragraph>
            <paragraph>如果给出 <literal>index</literal>，则将新点插入到由索引 <literal>index</literal> 标识的已有点之前。该新点之后的点的索引增加 1。提供的 <literal>index</literal> 不得超过折线中已有点的数量。请参阅 <reference internal="True" refid="class-line2d-method-get-point-count"><inline classes="std std-ref">get_point_count</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-method-clear-points"></target>
            <paragraph classes="classref-method" ids="class-line2d-method-clear-points" names="class_line2d_method_clear_points"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_points</strong>() <reference internal="True" refid="class-line2d-method-clear-points"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从折线中移除所有点，使其为空。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-method-get-point-count"></target>
            <paragraph classes="classref-method" ids="class-line2d-method-get-point-count" names="class_line2d_method_get_point_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_point_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-line2d-method-get-point-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该折线中的点的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-method-get-point-position"></target>
            <paragraph classes="classref-method" ids="class-line2d-method-get-point-position" names="class_line2d_method_get_point_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_point_position</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-line2d-method-get-point-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>index</literal> 的点的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-method-remove-point"></target>
            <paragraph classes="classref-method" ids="class-line2d-method-remove-point" names="class_line2d_method_remove_point"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_point</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-line2d-method-remove-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除该折线中索引为 <literal>index</literal> 的点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-line2d-method-set-point-position"></target>
            <paragraph classes="classref-method" ids="class-line2d-method-set-point-position" names="class_line2d_method_set_point_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_position</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-line2d-method-set-point-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用提供的 <literal>position</literal> 覆盖给定索引 <literal>index</literal> 处的点的位置。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
