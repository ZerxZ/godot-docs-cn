<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_multiplayerpeerextension.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <meta content="network" name="keywords">
    </meta>
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/MultiplayerPeerExtension.xml.</comment>
    <target refid="class-multiplayerpeerextension"></target>
    <section ids="multiplayerpeerextension class-multiplayerpeerextension" names="multiplayerpeerextension class_multiplayerpeerextension">
        <title>MultiplayerPeerExtension</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_packetpeer#class-packetpeer"><inline classes="std std-ref">PacketPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>可以通过 GDExtension 继承，从而实现自定义多人 API 网络层的类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该类旨在被一个 GDExtension 插件继承，以实现多人游戏 API（例如 WebRTC）的自定义网络层。下面的所有方法都<strong>必须</strong>被实现，才能实现一个有效的自定义多人游戏实现。另请参阅 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="64"></colspec>
                    <colspec colwidth="174"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-close"><inline classes="std std-ref">_close</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-disconnect-peer"><inline classes="std std-ref">_disconnect_peer</inline></reference>(p_peer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, p_force: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-get-available-packet-count"><inline classes="std std-ref">_get_available_packet_count</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_multiplayerpeer#enum-multiplayerpeer-connectionstatus"><inline classes="std std-ref">ConnectionStatus</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-get-connection-status"><inline classes="std std-ref">_get_connection_status</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-get-max-packet-size"><inline classes="std std-ref">_get_max_packet_size</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-get-packet"><inline classes="std std-ref">_get_packet</inline></reference>(r_buffer: <literal>const uint8_t **</literal>, r_buffer_size: <literal>int32_t*</literal>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-get-packet-channel"><inline classes="std std-ref">_get_packet_channel</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_multiplayerpeer#enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-get-packet-mode"><inline classes="std std-ref">_get_packet_mode</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-get-packet-peer"><inline classes="std std-ref">_get_packet_peer</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-get-packet-script"><inline classes="std std-ref">_get_packet_script</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-get-transfer-channel"><inline classes="std std-ref">_get_transfer_channel</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_multiplayerpeer#enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-get-transfer-mode"><inline classes="std std-ref">_get_transfer_mode</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-get-unique-id"><inline classes="std std-ref">_get_unique_id</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-is-refusing-new-connections"><inline classes="std std-ref">_is_refusing_new_connections</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-is-server"><inline classes="std std-ref">_is_server</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-is-server-relay-supported"><inline classes="std std-ref">_is_server_relay_supported</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-poll"><inline classes="std std-ref">_poll</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-put-packet"><inline classes="std std-ref">_put_packet</inline></reference>(p_buffer: <literal>const uint8_t*</literal>, p_buffer_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-put-packet-script"><inline classes="std std-ref">_put_packet_script</inline></reference>(p_buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-set-refuse-new-connections"><inline classes="std std-ref">_set_refuse_new_connections</inline></reference>(p_enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-set-target-peer"><inline classes="std std-ref">_set_target_peer</inline></reference>(p_peer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-set-transfer-channel"><inline classes="std std-ref">_set_transfer_channel</inline></reference>(p_channel: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeerextension-private-method-set-transfer-mode"><inline classes="std std-ref">_set_transfer_mode</inline></reference>(p_mode: <reference internal="True" refuri="class_multiplayerpeer#enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-multiplayerpeerextension-private-method-close"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-close" names="class_multiplayerpeerextension_private_method__close"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_close</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-close"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该多人游戏对等体应当立即关闭时调用（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-close"><inline classes="std std-ref">MultiplayerPeer.close</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-disconnect-peer"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-disconnect-peer" names="class_multiplayerpeerextension_private_method__disconnect_peer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_disconnect_peer</strong>(p_peer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, p_force: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-disconnect-peer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>应当强制断开与对等体 <literal>p_peer</literal> 的连接时调用（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-disconnect-peer"><inline classes="std std-ref">MultiplayerPeer.disconnect_peer</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-get-available-packet-count"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-get-available-packet-count" names="class_multiplayerpeerextension_private_method__get_available_packet_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_available_packet_count</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-get-available-packet-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 对可用的数据包数量发出内部请求时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-get-connection-status"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-get-connection-status" names="class_multiplayerpeerextension_private_method__get_connection_status"><reference internal="True" refuri="class_multiplayerpeer#enum-multiplayerpeer-connectionstatus"><inline classes="std std-ref">ConnectionStatus</inline></reference> <strong>_get_connection_status</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-get-connection-status"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 请求连接状态时调用（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-get-connection-status"><inline classes="std std-ref">MultiplayerPeer.get_connection_status</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-get-max-packet-size"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-get-max-packet-size" names="class_multiplayerpeerextension_private_method__get_max_packet_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_max_packet_size</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-get-max-packet-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 请求最大允许的数据包大小（单位为字节）时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-get-packet"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-get-packet" names="class_multiplayerpeerextension_private_method__get_packet"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_get_packet</strong>(r_buffer: <literal>const uint8_t **</literal>, r_buffer_size: <literal>int32_t*</literal>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-get-packet"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 需要接收一个数据包时调用，<literal>r_buffer_size</literal> 是二进制缓冲区 <literal>r_buffer</literal> 的字节大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-get-packet-channel"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-get-packet-channel" names="class_multiplayerpeerextension_private_method__get_packet_channel"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_packet_channel</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-get-packet-channel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回接收下一个可用数据包所使用的通道。请参阅 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-get-packet-channel"><inline classes="std std-ref">MultiplayerPeer.get_packet_channel</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-get-packet-mode"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-get-packet-mode" names="class_multiplayerpeerextension_private_method__get_packet_mode"><reference internal="True" refuri="class_multiplayerpeer#enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> <strong>_get_packet_mode</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-get-packet-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>调用以获取远程对等体用于发送下一个可用数据包的传输模式。请参阅 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-get-packet-mode"><inline classes="std std-ref">MultiplayerPeer.get_packet_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-get-packet-peer"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-get-packet-peer" names="class_multiplayerpeerextension_private_method__get_packet_peer"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_packet_peer</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-get-packet-peer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请求最近数据包发送方 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 的 ID 时调用（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-get-packet-peer"><inline classes="std std-ref">MultiplayerPeer.get_packet_peer</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-get-packet-script"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-get-packet-script" names="class_multiplayerpeerextension_private_method__get_packet_script"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>_get_packet_script</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-get-packet-script"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <reference internal="True" refid="class-multiplayerpeerextension-private-method-get-packet"><inline classes="std std-ref">_get_packet</inline></reference> 未实现，则在有数据包需要被 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 接收时调用。使用 GDScript 扩展这个类时请使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-get-transfer-channel"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-get-transfer-channel" names="class_multiplayerpeerextension_private_method__get_transfer_channel"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_transfer_channel</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-get-transfer-channel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>读取 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 所使用的传输通道时调用（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-property-transfer-channel"><inline classes="std std-ref">MultiplayerPeer.transfer_channel</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-get-transfer-mode"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-get-transfer-mode" names="class_multiplayerpeerextension_private_method__get_transfer_mode"><reference internal="True" refuri="class_multiplayerpeer#enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> <strong>_get_transfer_mode</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-get-transfer-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>读取 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 所使用的传输模式时调用（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-property-transfer-mode"><inline classes="std std-ref">MultiplayerPeer.transfer_mode</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-get-unique-id"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-get-unique-id" names="class_multiplayerpeerextension_private_method__get_unique_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_unique_id</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-get-unique-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请求 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 的唯一 ID 时调用（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-get-unique-id"><inline classes="std std-ref">MultiplayerPeer.get_unique_id</inline></reference>）。取值必须在 <literal>1</literal> 和 <literal>2147483647</literal> 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-is-refusing-new-connections"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-is-refusing-new-connections" names="class_multiplayerpeerextension_private_method__is_refusing_new_connections"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_refusing_new_connections</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-is-refusing-new-connections"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请求 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 的“拒绝新连接”状态时调用（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-property-refuse-new-connections"><inline classes="std std-ref">MultiplayerPeer.refuse_new_connections</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-is-server"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-is-server" names="class_multiplayerpeerextension_private_method__is_server"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_server</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-is-server"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请求 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 的“是否为服务器”状态时调用。见 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-is-server"><inline classes="std std-ref">MultiplayerAPI.is_server</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-is-server-relay-supported"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-is-server-relay-supported" names="class_multiplayerpeerextension_private_method__is_server_relay_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_server_relay_supported</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-is-server-relay-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>检查服务器在当前配置中是否能够作为中继时调用。见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-is-server-relay-supported"><inline classes="std std-ref">MultiplayerPeer.is_server_relay_supported</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-poll"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-poll" names="class_multiplayerpeerextension_private_method__poll"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_poll</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-poll"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>轮询 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 时调用。见 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-poll"><inline classes="std std-ref">MultiplayerAPI.poll</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-put-packet"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-put-packet" names="class_multiplayerpeerextension_private_method__put_packet"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_put_packet</strong>(p_buffer: <literal>const uint8_t*</literal>, p_buffer_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-put-packet"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>需要让 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 发送数据包时调用，<literal>p_buffer_size</literal> 是二进制缓冲区 <literal>p_buffer</literal> 的字节大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-put-packet-script"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-put-packet-script" names="class_multiplayerpeerextension_private_method__put_packet_script"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_put_packet_script</strong>(p_buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-put-packet-script"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <reference internal="True" refid="class-multiplayerpeerextension-private-method-put-packet"><inline classes="std std-ref">_put_packet</inline></reference> 未实现，则在需要让 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 发送数据包时调用。使用 GDScript 扩展这个类时请使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-set-refuse-new-connections"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-set-refuse-new-connections" names="class_multiplayerpeerextension_private_method__set_refuse_new_connections"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_refuse_new_connections</strong>(p_enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-set-refuse-new-connections"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 的“拒绝新连接”状态时调用（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-property-refuse-new-connections"><inline classes="std std-ref">MultiplayerPeer.refuse_new_connections</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-set-target-peer"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-set-target-peer" names="class_multiplayerpeerextension_private_method__set_target_peer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_target_peer</strong>(p_peer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-set-target-peer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 所使用的目标对等体时调用（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-set-target-peer"><inline classes="std std-ref">MultiplayerPeer.set_target_peer</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-set-transfer-channel"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-set-transfer-channel" names="class_multiplayerpeerextension_private_method__set_transfer_channel"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_transfer_channel</strong>(p_channel: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-set-transfer-channel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 所使用的通道时调用（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-property-transfer-channel"><inline classes="std std-ref">MultiplayerPeer.transfer_channel</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeerextension-private-method-set-transfer-mode"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeerextension-private-method-set-transfer-mode" names="class_multiplayerpeerextension_private_method__set_transfer_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_transfer_mode</strong>(p_mode: <reference internal="True" refuri="class_multiplayerpeer#enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-multiplayerpeerextension-private-method-set-transfer-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 所使用的传输模式时调用（见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-property-transfer-mode"><inline classes="std std-ref">MultiplayerPeer.transfer_mode</inline></reference>）。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
