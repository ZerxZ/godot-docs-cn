<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_canvasgroup.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/CanvasGroup.xml.</comment>
    <target refid="class-canvasgroup"></target>
    <section ids="canvasgroup class-canvasgroup" names="canvasgroup class_canvasgroup">
        <title>CanvasGroup</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>将若干 2D 节点合并至单次绘制操作。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>CanvasGroup</strong> 的所有子 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 节点会作为一个单独的对象绘制。它允许在不混合的情况下绘制重叠的半透明 2D 节点（设置 <strong>CanvasGroup</strong> 的 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-self-modulate"><inline classes="std std-ref">CanvasItem.self_modulate</inline></reference> 属性来实现这一效果）。</paragraph>
            <paragraph><strong>注意：</strong><strong>CanvasGroup</strong> 使用一个自定义着色器从后台缓冲区读取以绘制其子节点。为 <strong>CanvasGroup</strong> 指定一个 <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> 会覆盖内置着色器。要在自定义 <reference internal="True" refuri="class_shader#class-shader"><inline classes="std std-ref">Shader</inline></reference> 中复制内置着色器的行为，请使用以下方法：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">shader_type canvas_item;
render_mode unshaded;

uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;

void fragment() {
    vec4 c = textureLod(screen_texture, SCREEN_UV, 0.0);

    if (c.a &gt; 0.0001) {
        c.rgb /= c.a;
    }

    COLOR *= c;
}</literal_block>
            <paragraph><strong>注意：</strong>由于 <strong>CanvasGroup</strong> 和 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-clip-children"><inline classes="std std-ref">CanvasItem.clip_children</inline></reference> 都使用后台缓冲区，因此 <strong>CanvasGroup</strong> 的子级如果将其 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-clip-children"><inline classes="std std-ref">CanvasItem.clip_children</inline></reference> 设置为 <reference internal="True" refuri="class_canvasitem#class-canvasitem-constant-clip-children-disabled"><inline classes="std std-ref">CanvasItem.CLIP_CHILDREN_DISABLED</inline></reference> 以外的其他值将无法正常工作。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="62"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasgroup-property-clear-margin"><inline classes="std std-ref">clear_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>10.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasgroup-property-fit-margin"><inline classes="std std-ref">fit_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>10.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasgroup-property-use-mipmaps"><inline classes="std std-ref">use_mipmaps</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="属性说明">
            <title>属性说明</title>
            <target refid="class-canvasgroup-property-clear-margin"></target>
            <paragraph classes="classref-property" ids="class-canvasgroup-property-clear-margin" names="class_canvasgroup_property_clear_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>clear_margin</strong> = <literal>10.0</literal> <reference internal="True" refid="class-canvasgroup-property-clear-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clear_margin</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_clear_margin</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置用于扩展该 <strong>CanvasGroup</strong> 清除矩形的边距大小。会对该 <strong>CanvasGroup</strong> 所使用的后台缓冲的区域进行扩展。边距较小时可以减少后台缓冲的区域大小，从而提升性能，但如果启用了 <reference internal="True" refid="class-canvasgroup-property-use-mipmaps"><inline classes="std std-ref">use_mipmaps</inline></reference>，较小的边距可能在该 <strong>CanvasGroup</strong> 边缘造成 mipmap 错误。因此，这个值应该尽量调小，但是如果画布组的边缘出现问题，就应该将其调大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasgroup-property-fit-margin"></target>
            <paragraph classes="classref-property" ids="class-canvasgroup-property-fit-margin" names="class_canvasgroup_property_fit_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>fit_margin</strong> = <literal>10.0</literal> <reference internal="True" refid="class-canvasgroup-property-fit-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fit_margin</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_fit_margin</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置用于扩展该 <strong>CanvasGroup</strong> 绘图矩形的边距大小。确定该 <strong>CanvasGroup</strong> 大小的方法是：首先框定子节点的矩形区域，然后将该矩形按照 <reference internal="True" refid="class-canvasgroup-property-fit-margin"><inline classes="std std-ref">fit_margin</inline></reference> 进行扩展。会增大该 <strong>CanvasGroup</strong> 所使用的后台缓冲的区域，也会增大该 <strong>CanvasGroup</strong> 所覆盖的面积，两者都会降低性能。这个值应该尽量调小，仅在需要时调大（例如自定义着色器效果）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasgroup-property-use-mipmaps"></target>
            <paragraph classes="classref-property" ids="class-canvasgroup-property-use-mipmaps" names="class_canvasgroup_property_use_mipmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_mipmaps</strong> = <literal>false</literal> <reference internal="True" refid="class-canvasgroup-property-use-mipmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_mipmaps</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_mipmaps</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会在绘制该 <strong>CanvasGroup</strong> 之前为其后台缓冲计算 mipmap，附加到该 <strong>CanvasGroup</strong> 的自定义 <reference internal="True" refuri="class_shadermaterial#class-shadermaterial"><inline classes="std std-ref">ShaderMaterial</inline></reference> 就可以使用 mipmap。Mipmap 的生成会造成性能消耗，所以应在必要时才启用。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
