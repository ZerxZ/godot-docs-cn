<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_videostreamplayback.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/VideoStreamPlayback.xml.</comment>
    <target refid="class-videostreamplayback"></target>
    <section ids="videostreamplayback class-videostreamplayback" names="videostreamplayback class_videostreamplayback">
        <title>VideoStreamPlayback</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><reference internal="True" refuri="class_videostream#class-videostream"><inline classes="std std-ref">VideoStream</inline></reference> 使用的内部类，用于管理其在 <reference internal="True" refuri="class_videostreamplayer#class-videostreamplayer"><inline classes="std std-ref">VideoStreamPlayer</inline></reference> 中的播放状态。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该类旨在被具有 <reference internal="True" refuri="class_videostream#class-videostream"><inline classes="std std-ref">VideoStream</inline></reference> 自定义实现的视频解码器扩展所覆盖。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="225"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-get-channels"><inline classes="std std-ref">_get_channels</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-get-length"><inline classes="std std-ref">_get_length</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-get-mix-rate"><inline classes="std std-ref">_get_mix_rate</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-get-playback-position"><inline classes="std std-ref">_get_playback_position</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-get-texture"><inline classes="std std-ref">_get_texture</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-is-paused"><inline classes="std std-ref">_is_paused</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-is-playing"><inline classes="std std-ref">_is_playing</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-play"><inline classes="std std-ref">_play</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-seek"><inline classes="std std-ref">_seek</inline></reference>(time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-set-audio-track"><inline classes="std std-ref">_set_audio_track</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-set-paused"><inline classes="std std-ref">_set_paused</inline></reference>(paused: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-stop"><inline classes="std std-ref">_stop</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-private-method-update"><inline classes="std std-ref">_update</inline></reference>(delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-videostreamplayback-method-mix-audio"><inline classes="std std-ref">mix_audio</inline></reference>(num_frames: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, buffer: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> = PackedFloat32Array(), offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-videostreamplayback-private-method-get-channels"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-get-channels" names="class_videostreamplayback_private_method__get_channels"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_channels</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-get-channels"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回音频通道的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-private-method-get-length"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-get-length" names="class_videostreamplayback_private_method__get_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_get_length</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-get-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>视频时长已知时返回视频时长，未知时返回 0。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-private-method-get-mix-rate"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-get-mix-rate" names="class_videostreamplayback_private_method__get_mix_rate"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_mix_rate</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-get-mix-rate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回用于混音的音频采样率。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-private-method-get-playback-position"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-get-playback-position" names="class_videostreamplayback_private_method__get_playback_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_get_playback_position</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-get-playback-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前播放时间戳。获取 <reference internal="True" refuri="class_videostreamplayer#class-videostreamplayer-property-stream-position"><inline classes="std std-ref">VideoStreamPlayer.stream_position</inline></reference> 时会被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-private-method-get-texture"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-get-texture" names="class_videostreamplayback_private_method__get_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>_get_texture</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-get-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>分配一个 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>，解码得到的视频帧会在其中绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-private-method-is-paused"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-is-paused" names="class_videostreamplayback_private_method__is_paused"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_paused</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-is-paused"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回暂停状态，由 <reference internal="True" refid="class-videostreamplayback-private-method-set-paused"><inline classes="std std-ref">_set_paused</inline></reference> 设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-private-method-is-playing"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-is-playing" names="class_videostreamplayback_private_method__is_playing"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_playing</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-is-playing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由调用 <reference internal="True" refid="class-videostreamplayback-private-method-play"><inline classes="std std-ref">_play</inline></reference> 和 <reference internal="True" refid="class-videostreamplayback-private-method-stop"><inline classes="std std-ref">_stop</inline></reference> 决定的播放状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-private-method-play"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-play" names="class_videostreamplayback_private_method__play"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_play</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-play"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_videostreamplayer#class-videostreamplayer-property-autoplay"><inline classes="std std-ref">VideoStreamPlayer.autoplay</inline></reference> 或 <reference internal="True" refuri="class_videostreamplayer#class-videostreamplayer-method-play"><inline classes="std std-ref">VideoStreamPlayer.play</inline></reference> 时会被调用。请注意，手动播放在这个方法被调用前也可能多次调用 <reference internal="True" refid="class-videostreamplayback-private-method-stop"><inline classes="std std-ref">_stop</inline></reference>。开始播放后 <reference internal="True" refid="class-videostreamplayback-private-method-is-playing"><inline classes="std std-ref">_is_playing</inline></reference> 就应该返回 true。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-private-method-seek"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-seek" names="class_videostreamplayback_private_method__seek"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_seek</strong>(time: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-seek"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>检索至第 <literal>time</literal> 秒。设置 <reference internal="True" refuri="class_videostreamplayer#class-videostreamplayer-property-stream-position"><inline classes="std std-ref">VideoStreamPlayer.stream_position</inline></reference> 时会被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-private-method-set-audio-track"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-set-audio-track" names="class_videostreamplayback_private_method__set_audio_track"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_audio_track</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-set-audio-track"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选择 <literal>idx</literal> 音轨。播放开始时，或者设置 <reference internal="True" refuri="class_videostreamplayer#class-videostreamplayer-property-audio-track"><inline classes="std std-ref">VideoStreamPlayer.audio_track</inline></reference> 时会被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-private-method-set-paused"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-set-paused" names="class_videostreamplayback_private_method__set_paused"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_paused</strong>(paused: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-set-paused"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置视频播放的暂停状态。<reference internal="True" refid="class-videostreamplayback-private-method-is-paused"><inline classes="std std-ref">_is_paused</inline></reference> 必须返回 <literal>paused</literal>。设置 <reference internal="True" refuri="class_videostreamplayer#class-videostreamplayer-property-paused"><inline classes="std std-ref">VideoStreamPlayer.paused</inline></reference> 时会被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-private-method-stop"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-stop" names="class_videostreamplayback_private_method__stop"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_stop</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-stop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>停止播放。可能在 <reference internal="True" refid="class-videostreamplayback-private-method-play"><inline classes="std std-ref">_play</inline></reference> 多次调用，也可能与 <reference internal="True" refuri="class_videostreamplayer#class-videostreamplayer-method-stop"><inline classes="std std-ref">VideoStreamPlayer.stop</inline></reference> 对应。停止后 <reference internal="True" refid="class-videostreamplayback-private-method-is-playing"><inline classes="std std-ref">_is_playing</inline></reference> 应返回 false。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-private-method-update"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-private-method-update" names="class_videostreamplayback_private_method__update"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_update</strong>(delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-videostreamplayback-private-method-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将视频播放推进 <literal>delta</literal> 秒。只要 <reference internal="True" refid="class-videostreamplayback-private-method-is-paused"><inline classes="std std-ref">_is_paused</inline></reference> 和 <reference internal="True" refid="class-videostreamplayback-private-method-is-playing"><inline classes="std std-ref">_is_playing</inline></reference> 返回 true，就会为每一帧调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-videostreamplayback-method-mix-audio"></target>
            <paragraph classes="classref-method" ids="class-videostreamplayback-method-mix-audio" names="class_videostreamplayback_method_mix_audio"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mix_audio</strong>(num_frames: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, buffer: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> = PackedFloat32Array(), offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-videostreamplayback-method-mix-audio"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从数组中的索引 <literal>offset</literal> 开始，从 <literal>buffer</literal> 渲染 <literal>num_frames</literal> 个音频帧（每帧 <reference internal="True" refid="class-videostreamplayback-private-method-get-channels"><inline classes="std std-ref">_get_channels</inline></reference> 个浮点数）。返回渲染的音频帧数，如果出错则返回 -1。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
