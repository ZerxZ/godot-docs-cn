<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_range.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Range.xml.</comment>
    <target refid="class-range"></target>
    <section ids="range class-range" names="range class_range">
        <title>Range</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_editorspinslider#class-editorspinslider"><inline classes="std std-ref">EditorSpinSlider</inline></reference>, <reference internal="True" refuri="class_progressbar#class-progressbar"><inline classes="std std-ref">ProgressBar</inline></reference>, <reference internal="True" refuri="class_scrollbar#class-scrollbar"><inline classes="std std-ref">ScrollBar</inline></reference>, <reference internal="True" refuri="class_slider#class-slider"><inline classes="std std-ref">Slider</inline></reference>, <reference internal="True" refuri="class_spinbox#class-spinbox"><inline classes="std std-ref">SpinBox</inline></reference>, <reference internal="True" refuri="class_textureprogressbar#class-textureprogressbar"><inline classes="std std-ref">TextureProgressBar</inline></reference></paragraph>
        <paragraph>代表特定范围内数字的控件的抽象基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>Range 是代表特定范围内数字的控件的抽象基类，能够对步长 <reference internal="True" refid="class-range-property-step"><inline classes="std std-ref">step</inline></reference> 和分页大小 <reference internal="True" refid="class-range-property-page"><inline classes="std std-ref">page</inline></reference> 进行配置。使用 Range 的高阶节点示例请参考 <reference internal="True" refuri="class_scrollbar#class-scrollbar"><inline classes="std std-ref">ScrollBar</inline></reference> 和 <reference internal="True" refuri="class_slider#class-slider"><inline classes="std std-ref">Slider</inline></reference>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="56"></colspec>
                    <colspec colwidth="58"></colspec>
                    <colspec colwidth="78"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-property-allow-greater"><inline classes="std std-ref">allow_greater</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-property-allow-lesser"><inline classes="std std-ref">allow_lesser</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-property-exp-edit"><inline classes="std std-ref">exp_edit</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-property-max-value"><inline classes="std std-ref">max_value</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>100.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-property-min-value"><inline classes="std std-ref">min_value</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-property-page"><inline classes="std std-ref">page</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-property-ratio"><inline classes="std std-ref">ratio</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-property-rounded"><inline classes="std std-ref">rounded</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_control#enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph>size_flags_vertical</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-size-flags-vertical"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-property-step"><inline classes="std std-ref">step</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.01</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-property-value"><inline classes="std std-ref">value</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="8"></colspec>
                    <colspec colwidth="121"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-private-method-value-changed"><inline classes="std std-ref">_value_changed</inline></reference>(new_value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-method-set-value-no-signal"><inline classes="std std-ref">set_value_no_signal</inline></reference>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-method-share"><inline classes="std std-ref">share</inline></reference>(with: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-range-method-unshare"><inline classes="std std-ref">unshare</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-range-signal-changed"></target>
            <paragraph classes="classref-signal" ids="class-range-signal-changed" names="class_range_signal_changed"><strong>changed</strong>() <reference internal="True" refid="class-range-signal-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <reference internal="True" refid="class-range-property-min-value"><inline classes="std std-ref">min_value</inline></reference>、<reference internal="True" refid="class-range-property-max-value"><inline classes="std std-ref">max_value</inline></reference>、<reference internal="True" refid="class-range-property-page"><inline classes="std std-ref">page</inline></reference>、<reference internal="True" refid="class-range-property-step"><inline classes="std std-ref">step</inline></reference> 改变时释放信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-signal-value-changed"></target>
            <paragraph classes="classref-signal" ids="class-range-signal-value-changed" names="class_range_signal_value_changed"><strong>value_changed</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-range-signal-value-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refid="class-range-property-value"><inline classes="std std-ref">value</inline></reference> 更改时发出。在 <reference internal="True" refuri="class_slider#class-slider"><inline classes="std std-ref">Slider</inline></reference> 上使用时，会在拖动时连续调用（可能是每一帧）。如果在连接到 <reference internal="True" refid="class-range-signal-value-changed"><inline classes="std std-ref">value_changed</inline></reference> 的函数中执行昂贵的操作，请考虑使用<emphasis>去除抖动</emphasis> <reference internal="True" refuri="class_timer#class-timer"><inline classes="std std-ref">Timer</inline></reference> 来减少调用该函数的频率。</paragraph>
            <paragraph><strong>注意：</strong>与 <reference internal="True" refuri="class_lineedit#class-lineedit-signal-text-changed"><inline classes="std std-ref">LineEdit.text_changed</inline></reference> 等信号不同，当直接通过代码设置 <literal>value</literal> 时，<reference internal="True" refid="class-range-signal-value-changed"><inline classes="std std-ref">value_changed</inline></reference> 仍会发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-range-property-allow-greater"></target>
            <paragraph classes="classref-property" ids="class-range-property-allow-greater" names="class_range_property_allow_greater"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>allow_greater</strong> = <literal>false</literal> <reference internal="True" refid="class-range-property-allow-greater"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_allow_greater</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_greater_allowed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，<reference internal="True" refid="class-range-property-value"><inline classes="std std-ref">value</inline></reference> 可能大于 <reference internal="True" refid="class-range-property-max-value"><inline classes="std std-ref">max_value</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-property-allow-lesser"></target>
            <paragraph classes="classref-property" ids="class-range-property-allow-lesser" names="class_range_property_allow_lesser"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>allow_lesser</strong> = <literal>false</literal> <reference internal="True" refid="class-range-property-allow-lesser"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_allow_lesser</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_lesser_allowed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，<reference internal="True" refid="class-range-property-value"><inline classes="std std-ref">value</inline></reference> 可能小于 <reference internal="True" refid="class-range-property-min-value"><inline classes="std std-ref">min_value</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-property-exp-edit"></target>
            <paragraph classes="classref-property" ids="class-range-property-exp-edit" names="class_range_property_exp_edit"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>exp_edit</strong> = <literal>false</literal> <reference internal="True" refid="class-range-property-exp-edit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_exp_ratio</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_ratio_exp</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，并且 <reference internal="True" refid="class-range-property-min-value"><inline classes="std std-ref">min_value</inline></reference> 大于 0，<reference internal="True" refid="class-range-property-value"><inline classes="std std-ref">value</inline></reference> 将以指数方式而不是线性方式表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-property-max-value"></target>
            <paragraph classes="classref-property" ids="class-range-property-max-value" names="class_range_property_max_value"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>max_value</strong> = <literal>100.0</literal> <reference internal="True" refid="class-range-property-max-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_max</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>最大值。如果 <reference internal="True" refid="class-range-property-value"><inline classes="std std-ref">value</inline></reference> 大于 <reference internal="True" refid="class-range-property-max-value"><inline classes="std std-ref">max_value</inline></reference>，则会被范围限制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-property-min-value"></target>
            <paragraph classes="classref-property" ids="class-range-property-min-value" names="class_range_property_min_value"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>min_value</strong> = <literal>0.0</literal> <reference internal="True" refid="class-range-property-min-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_min</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_min</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>最小值。如果 <reference internal="True" refid="class-range-property-value"><inline classes="std std-ref">value</inline></reference> 小于 <reference internal="True" refid="class-range-property-min-value"><inline classes="std std-ref">min_value</inline></reference>，则会被范围限制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-property-page"></target>
            <paragraph classes="classref-property" ids="class-range-property-page" names="class_range_property_page"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>page</strong> = <literal>0.0</literal> <reference internal="True" refid="class-range-property-page"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_page</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_page</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>页面大小。主要用于 <reference internal="True" refuri="class_scrollbar#class-scrollbar"><inline classes="std std-ref">ScrollBar</inline></reference>。ScrollBar 的长度是它的尺寸乘以 <reference internal="True" refid="class-range-property-page"><inline classes="std std-ref">page</inline></reference> 超过 <reference internal="True" refid="class-range-property-min-value"><inline classes="std std-ref">min_value</inline></reference> 和 <reference internal="True" refid="class-range-property-max-value"><inline classes="std std-ref">max_value</inline></reference> 之间的差值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-property-ratio"></target>
            <paragraph classes="classref-property" ids="class-range-property-ratio" names="class_range_property_ratio"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>ratio</strong> <reference internal="True" refid="class-range-property-ratio"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_as_ratio</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_as_ratio</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该值在 0 和 1 之间进行映射。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-property-rounded"></target>
            <paragraph classes="classref-property" ids="class-range-property-rounded" names="class_range_property_rounded"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>rounded</strong> = <literal>false</literal> <reference internal="True" refid="class-range-property-rounded"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_rounded_values</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_rounded_values</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，<reference internal="True" refid="class-range-property-value"><inline classes="std std-ref">value</inline></reference> 将始终四舍五入到最接近的整数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-property-step"></target>
            <paragraph classes="classref-property" ids="class-range-property-step" names="class_range_property_step"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>step</strong> = <literal>0.01</literal> <reference internal="True" refid="class-range-property-step"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_step</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_step</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果大于 0，<reference internal="True" refid="class-range-property-value"><inline classes="std std-ref">value</inline></reference> 将总是被四舍五入为这个属性的倍数。如果 <reference internal="True" refid="class-range-property-rounded"><inline classes="std std-ref">rounded</inline></reference> 也是 <literal>true</literal>，<reference internal="True" refid="class-range-property-value"><inline classes="std std-ref">value</inline></reference> 将首先被四舍五入为这个属性的倍数，然后舍入为最近的整数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-property-value"></target>
            <paragraph classes="classref-property" ids="class-range-property-value" names="class_range_property_value"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>value</strong> = <literal>0.0</literal> <reference internal="True" refid="class-range-property-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_value</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_value</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Range 的当前值。更改这个属性（即便是通过代码修改的）会触发 <reference internal="True" refid="class-range-signal-value-changed"><inline classes="std std-ref">value_changed</inline></reference> 信号。如果你想避免触发信号，请使用 <reference internal="True" refid="class-range-method-set-value-no-signal"><inline classes="std std-ref">set_value_no_signal</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-range-private-method-value-changed"></target>
            <paragraph classes="classref-method" ids="class-range-private-method-value-changed" names="class_range_private_method__value_changed"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_value_changed</strong>(new_value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-range-private-method-value-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Range</strong> 的值发生更改时调用（条件与 <reference internal="True" refid="class-range-signal-value-changed"><inline classes="std std-ref">value_changed</inline></reference> 相同）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-method-set-value-no-signal"></target>
            <paragraph classes="classref-method" ids="class-range-method-set-value-no-signal" names="class_range_method_set_value_no_signal"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_value_no_signal</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-range-method-set-value-no-signal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <strong>Range</strong> 的当前值设置为指定的 <literal>value</literal> 而不发出 <reference internal="True" refid="class-range-signal-value-changed"><inline classes="std std-ref">value_changed</inline></reference> 信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-method-share"></target>
            <paragraph classes="classref-method" ids="class-range-method-share" names="class_range_method_share"><abbreviation explanation="无返回值。">void</abbreviation> <strong>share</strong>(with: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-range-method-share"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将两个 <strong>Range</strong> 绑定，之前已与两者之中的任何一个组合的 Range 也会被绑定在一起。其中任何一个 Range 的成员变量改变时，它将与它的组中的所有其他 Range 共享新值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-range-method-unshare"></target>
            <paragraph classes="classref-method" ids="class-range-method-unshare" names="class_range_method_unshare"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unshare</strong>() <reference internal="True" refid="class-range-method-unshare"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使该 <strong>Range</strong> 停止与任何其他 Range 共享其成员变量。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
