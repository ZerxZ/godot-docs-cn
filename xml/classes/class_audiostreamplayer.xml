<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_audiostreamplayer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <meta content="sound, music, song" name="keywords">
    </meta>
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AudioStreamPlayer.xml.</comment>
    <target refid="class-audiostreamplayer"></target>
    <section ids="audiostreamplayer class-audiostreamplayer" names="audiostreamplayer class_audiostreamplayer">
        <title>AudioStreamPlayer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于播放音频的节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>AudioStreamPlayer</strong> 节点能够播放音频流，播放的效果与位置无关，是用户界面、菜单、背景音乐的理想选择。</paragraph>
            <paragraph>使用该节点时，需要将 <reference internal="True" refid="class-audiostreamplayer-property-stream"><inline classes="std std-ref">stream</inline></reference> 设为有效的 <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference> 资源。此外，还支持同时播放多个声音，见 <reference internal="True" refid="class-audiostreamplayer-property-max-polyphony"><inline classes="std std-ref">max_polyphony</inline></reference>。</paragraph>
            <paragraph>如果你需要在特定的位置播放音频，请改用 <reference internal="True" refuri="class_audiostreamplayer2d#class-audiostreamplayer2d"><inline classes="std std-ref">AudioStreamPlayer2D</inline></reference> 或 <reference internal="True" refuri="class_audiostreamplayer3d#class-audiostreamplayer3d"><inline classes="std std-ref">AudioStreamPlayer3D</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/audio/audio_streams"><inline classes="doc">音频流</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2D Dodge The Creeps 演示" refuri="https://godotengine.org/asset-library/asset/2712">2D Dodge The Creeps 演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="音频设备切换演示" refuri="https://godotengine.org/asset-library/asset/2758">音频设备切换演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="音频生成器演示" refuri="https://godotengine.org/asset-library/asset/2759">音频生成器演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="音频麦克风录音演示" refuri="https://godotengine.org/asset-library/asset/2760">音频麦克风录音演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="音频频谱可视化演示" refuri="https://godotengine.org/asset-library/asset/2762">音频频谱可视化演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="52"></colspec>
                    <colspec colwidth="70"></colspec>
                    <colspec colwidth="15"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-property-autoplay"><inline classes="std std-ref">autoplay</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-property-bus"><inline classes="std std-ref">bus</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>&amp;"Master"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-property-max-polyphony"><inline classes="std std-ref">max_polyphony</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-audiostreamplayer-mixtarget"><inline classes="std std-ref">MixTarget</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-property-mix-target"><inline classes="std std-ref">mix_target</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-property-pitch-scale"><inline classes="std std-ref">pitch_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_audioserver#enum-audioserver-playbacktype"><inline classes="std std-ref">PlaybackType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-property-playback-type"><inline classes="std std-ref">playback_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-property-playing"><inline classes="std std-ref">playing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-property-stream"><inline classes="std std-ref">stream</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-property-stream-paused"><inline classes="std std-ref">stream_paused</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-property-volume-db"><inline classes="std std-ref">volume_db</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="55"></colspec>
                    <colspec colwidth="105"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-method-get-playback-position"><inline classes="std std-ref">get_playback_position</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_audiostreamplayback#class-audiostreamplayback"><inline classes="std std-ref">AudioStreamPlayback</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-method-get-stream-playback"><inline classes="std std-ref">get_stream_playback</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-method-has-stream-playback"><inline classes="std std-ref">has_stream_playback</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-method-play"><inline classes="std std-ref">play</inline></reference>(from_position: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-method-seek"><inline classes="std std-ref">seek</inline></reference>(to_position: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayer-method-stop"><inline classes="std std-ref">stop</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-audiostreamplayer-signal-finished"></target>
            <paragraph classes="classref-signal" ids="class-audiostreamplayer-signal-finished" names="class_audiostreamplayer_signal_finished"><strong>finished</strong>() <reference internal="True" refid="class-audiostreamplayer-signal-finished"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当声音不受打断完成播放时发出。调用 <reference internal="True" refid="class-audiostreamplayer-method-stop"><inline classes="std std-ref">stop</inline></reference> 时<emphasis>不会</emphasis>发出该信号，播放声音时退出场景树也不会。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-audiostreamplayer-mixtarget"></target>
            <paragraph classes="classref-enumeration" ids="enum-audiostreamplayer-mixtarget" names="enum_audiostreamplayer_mixtarget">enum <strong>MixTarget</strong>: <reference internal="True" refid="enum-audiostreamplayer-mixtarget"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-audiostreamplayer-constant-mix-target-stereo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreamplayer-constant-mix-target-stereo" names="class_audiostreamplayer_constant_mix_target_stereo"><reference internal="True" refid="enum-audiostreamplayer-mixtarget"><inline classes="std std-ref">MixTarget</inline></reference> <strong>MIX_TARGET_STEREO</strong> = <literal>0</literal></paragraph>
            <paragraph>音频将只在第一个声道中播放。这是默认行为。</paragraph>
            <target refid="class-audiostreamplayer-constant-mix-target-surround"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreamplayer-constant-mix-target-surround" names="class_audiostreamplayer_constant_mix_target_surround"><reference internal="True" refid="enum-audiostreamplayer-mixtarget"><inline classes="std std-ref">MixTarget</inline></reference> <strong>MIX_TARGET_SURROUND</strong> = <literal>1</literal></paragraph>
            <paragraph>音频将在所有环绕声声道中播放。</paragraph>
            <target refid="class-audiostreamplayer-constant-mix-target-center"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreamplayer-constant-mix-target-center" names="class_audiostreamplayer_constant_mix_target_center"><reference internal="True" refid="enum-audiostreamplayer-mixtarget"><inline classes="std std-ref">MixTarget</inline></reference> <strong>MIX_TARGET_CENTER</strong> = <literal>2</literal></paragraph>
            <paragraph>音频将在第二个声道中播放，通常位于中央。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-audiostreamplayer-property-autoplay"></target>
            <paragraph classes="classref-property" ids="class-audiostreamplayer-property-autoplay" names="class_audiostreamplayer_property_autoplay"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>autoplay</strong> = <literal>false</literal> <reference internal="True" refid="class-audiostreamplayer-property-autoplay"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_autoplay</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_autoplay_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该节点会在进入场景树时调用 <reference internal="True" refid="class-audiostreamplayer-method-play"><inline classes="std std-ref">play</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-property-bus"></target>
            <paragraph classes="classref-property" ids="class-audiostreamplayer-property-bus" names="class_audiostreamplayer_property_bus"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>bus</strong> = <literal>&amp;"Master"</literal> <reference internal="True" refid="class-audiostreamplayer-property-bus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bus</strong>(value: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_bus</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>目标总线的名称。该节点的所有声音都会在这条总线上播放。</paragraph>
            <paragraph><strong>注意：</strong>在运行时，如果不存在该名称的总线，那么所有声音都会回退至 <literal>"Master"</literal> 总线。另见 <reference internal="True" refuri="class_audioserver#class-audioserver-method-get-bus-name"><inline classes="std std-ref">AudioServer.get_bus_name</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-property-max-polyphony"></target>
            <paragraph classes="classref-property" ids="class-audiostreamplayer-property-max-polyphony" names="class_audiostreamplayer_property_max_polyphony"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_polyphony</strong> = <literal>1</literal> <reference internal="True" refid="class-audiostreamplayer-property-max-polyphony"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_polyphony</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_polyphony</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点可以同时播放的声音的最大数量。达到此值后再调用 <reference internal="True" refid="class-audiostreamplayer-method-play"><inline classes="std std-ref">play</inline></reference> 将切断最早播放的声音。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-property-mix-target"></target>
            <paragraph classes="classref-property" ids="class-audiostreamplayer-property-mix-target" names="class_audiostreamplayer_property_mix_target"><reference internal="True" refid="enum-audiostreamplayer-mixtarget"><inline classes="std std-ref">MixTarget</inline></reference> <strong>mix_target</strong> = <literal>0</literal> <reference internal="True" refid="class-audiostreamplayer-property-mix-target"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_mix_target</strong>(value: <reference internal="True" refid="enum-audiostreamplayer-mixtarget"><inline classes="std std-ref">MixTarget</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-audiostreamplayer-mixtarget"><inline classes="std std-ref">MixTarget</inline></reference> <strong>get_mix_target</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The mix target channels, as one of the <reference internal="True" refid="enum-audiostreamplayer-mixtarget"><inline classes="std std-ref">MixTarget</inline></reference> constants. Has no effect when two speakers or less are detected (see <reference internal="True" refuri="class_audioserver#enum-audioserver-speakermode"><inline classes="std std-ref">SpeakerMode</inline></reference>).</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-property-pitch-scale"></target>
            <paragraph classes="classref-property" ids="class-audiostreamplayer-property-pitch-scale" names="class_audiostreamplayer_property_pitch_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>pitch_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-audiostreamplayer-property-pitch-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pitch_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_pitch_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>音频的音高和速度，是 <reference internal="True" refid="class-audiostreamplayer-property-stream"><inline classes="std std-ref">stream</inline></reference> 采样率的乘数。取值为 <literal>2.0</literal> 时音频的音高翻倍，为 <literal>0.5</literal> 时音高减半。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-property-playback-type"></target>
            <paragraph classes="classref-property" ids="class-audiostreamplayer-property-playback-type" names="class_audiostreamplayer_property_playback_type"><reference internal="True" refuri="class_audioserver#enum-audioserver-playbacktype"><inline classes="std std-ref">PlaybackType</inline></reference> <strong>playback_type</strong> = <literal>0</literal> <reference internal="True" refid="class-audiostreamplayer-property-playback-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_playback_type</strong>(value: <reference internal="True" refuri="class_audioserver#enum-audioserver-playbacktype"><inline classes="std std-ref">PlaybackType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_audioserver#enum-audioserver-playbacktype"><inline classes="std std-ref">PlaybackType</inline></reference> <strong>get_playback_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该属性。</paragraph>
            <paragraph>The playback type of the stream player. If set other than to the default value, it will force that playback type.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-property-playing"></target>
            <paragraph classes="classref-property" ids="class-audiostreamplayer-property-playing" names="class_audiostreamplayer_property_playing"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>playing</strong> = <literal>false</literal> <reference internal="True" refid="class-audiostreamplayer-property-playing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_playing</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该节点正在播放声音。设置该属性与 <reference internal="True" refid="class-audiostreamplayer-method-play"><inline classes="std std-ref">play</inline></reference> 和 <reference internal="True" refid="class-audiostreamplayer-method-stop"><inline classes="std std-ref">stop</inline></reference> 等效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-property-stream"></target>
            <paragraph classes="classref-property" ids="class-audiostreamplayer-property-stream" names="class_audiostreamplayer_property_stream"><reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference> <strong>stream</strong> <reference internal="True" refid="class-audiostreamplayer-property-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stream</strong>(value: <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference> <strong>get_stream</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要播放的 <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference> 资源。设置该属性会停止所有正在播放的声音。如果留空，则 <strong>AudioStreamPlayer</strong> 不工作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-property-stream-paused"></target>
            <paragraph classes="classref-property" ids="class-audiostreamplayer-property-stream-paused" names="class_audiostreamplayer_property_stream_paused"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>stream_paused</strong> = <literal>false</literal> <reference internal="True" refid="class-audiostreamplayer-property-stream-paused"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stream_paused</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_stream_paused</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则声音暂停。将 <reference internal="True" refid="class-audiostreamplayer-property-stream-paused"><inline classes="std std-ref">stream_paused</inline></reference> 设置为 <literal>false</literal> 会恢复所有声音。</paragraph>
            <paragraph><strong>注意：</strong>进入和退出场景树以及节点暂停时均会自动修改该属性（见 <reference internal="True" refuri="class_node#class-node-property-process-mode"><inline classes="std std-ref">Node.process_mode</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-property-volume-db"></target>
            <paragraph classes="classref-property" ids="class-audiostreamplayer-property-volume-db" names="class_audiostreamplayer_property_volume_db"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>volume_db</strong> = <literal>0.0</literal> <reference internal="True" refid="class-audiostreamplayer-property-volume-db"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_volume_db</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_volume_db</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>声音的音量，单位为分贝。这是对 <reference internal="True" refid="class-audiostreamplayer-property-stream"><inline classes="std std-ref">stream</inline></reference> 音量的偏移。</paragraph>
            <paragraph><strong>注意：</strong>如需在分贝和线性能量间进行转换（常见于音量滑块），请使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-db-to-linear"><inline classes="std std-ref">@GlobalScope.db_to_linear</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-linear-to-db"><inline classes="std std-ref">@GlobalScope.linear_to_db</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-audiostreamplayer-method-get-playback-position"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayer-method-get-playback-position" names="class_audiostreamplayer_method_get_playback_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_playback_position</strong>() <reference internal="True" refid="class-audiostreamplayer-method-get-playback-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以秒为单位返回最后播放的声音在 <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference> 中的位置。如果没有正在播放的声音，将返回 <literal>0.0</literal>。</paragraph>
            <paragraph><strong>注意：</strong>返回的位置不一定精准，因为<reference internal="True" refuri="class_audioserver#class-audioserver"><inline classes="std std-ref">AudioServer</inline></reference>不会在每个处理的帧中混合音频。要想得到更多准确的结果，请将<reference internal="True" refuri="class_audioserver#class-audioserver-method-get-time-since-last-mix"><inline classes="std std-ref">AudioServer.get_time_since_last_mix</inline></reference>添加到返回的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-method-get-stream-playback"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayer-method-get-stream-playback" names="class_audiostreamplayer_method_get_stream_playback"><reference internal="True" refuri="class_audiostreamplayback#class-audiostreamplayback"><inline classes="std std-ref">AudioStreamPlayback</inline></reference> <strong>get_stream_playback</strong>() <reference internal="True" refid="class-audiostreamplayer-method-get-stream-playback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该节点最近的 <reference internal="True" refuri="class_audiostreamplayback#class-audiostreamplayback"><inline classes="std std-ref">AudioStreamPlayback</inline></reference>，通常是最近由 <reference internal="True" refid="class-audiostreamplayer-method-play"><inline classes="std std-ref">play</inline></reference> 创建的对象。如果当前没有在播放任何声音，则这个方法会失败并返回空的回放对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-method-has-stream-playback"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayer-method-has-stream-playback" names="class_audiostreamplayer_method_has_stream_playback"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_stream_playback</strong>() <reference internal="True" refid="class-audiostreamplayer-method-has-stream-playback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果有活动的声音则返回 <literal>true</literal>，即便 <reference internal="True" refid="class-audiostreamplayer-property-stream-paused"><inline classes="std std-ref">stream_paused</inline></reference> 为 <literal>true</literal>。另见 <reference internal="True" refid="class-audiostreamplayer-property-playing"><inline classes="std std-ref">playing</inline></reference> 和 <reference internal="True" refid="class-audiostreamplayer-method-get-stream-playback"><inline classes="std std-ref">get_stream_playback</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-method-play"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayer-method-play" names="class_audiostreamplayer_method_play"><abbreviation explanation="无返回值。">void</abbreviation> <strong>play</strong>(from_position: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0) <reference internal="True" refid="class-audiostreamplayer-method-play"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从开头或给定的位置 <literal>from_position</literal> 开始播放声音，位置的单位为秒。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-method-seek"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayer-method-seek" names="class_audiostreamplayer_method_seek"><abbreviation explanation="无返回值。">void</abbreviation> <strong>seek</strong>(to_position: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-audiostreamplayer-method-seek"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从给定的位置 <literal>to_position</literal> 开始重新播放所有声音，位置的单位为秒。如果当前没有在播放任何声音，则无事发生。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayer-method-stop"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayer-method-stop" names="class_audiostreamplayer_method_stop"><abbreviation explanation="无返回值。">void</abbreviation> <strong>stop</strong>() <reference internal="True" refid="class-audiostreamplayer-method-stop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>停止该节点发出的所有声音。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
