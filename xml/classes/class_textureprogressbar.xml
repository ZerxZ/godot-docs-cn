<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_textureprogressbar.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TextureProgressBar.xml.</comment>
    <target refid="class-textureprogressbar"></target>
    <section ids="textureprogressbar class-textureprogressbar" names="textureprogressbar class_textureprogressbar">
        <title>TextureProgressBar</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_range#class-range"><inline classes="std std-ref">Range</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>基于纹理的进度条。适用于加载屏幕和生命或体力条。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>TextureProgressBar 的工作方式类似于 <reference internal="True" refuri="class_progressbar#class-progressbar"><inline classes="std std-ref">ProgressBar</inline></reference>，但最多使用 3 个纹理，不使用 Godot 的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> 资源。可用于创建水平、垂直和径向进度条。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="56"></colspec>
                    <colspec colwidth="91"></colspec>
                    <colspec colwidth="78"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-fill-mode"><inline classes="std std-ref">fill_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-mousefilter"><inline classes="std std-ref">MouseFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>mouse_filter</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-mouse-filter"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-nine-patch-stretch"><inline classes="std std-ref">nine_patch_stretch</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-radial-center-offset"><inline classes="std std-ref">radial_center_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-radial-fill-degrees"><inline classes="std std-ref">radial_fill_degrees</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>360.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-radial-initial-angle"><inline classes="std std-ref">radial_initial_angle</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_control#enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph>size_flags_vertical</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-size-flags-vertical"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>step</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal> (overrides <reference internal="True" refuri="class_range#class-range-property-step"><inline classes="std std-ref">Range</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-stretch-margin-bottom"><inline classes="std std-ref">stretch_margin_bottom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-stretch-margin-left"><inline classes="std std-ref">stretch_margin_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-stretch-margin-right"><inline classes="std std-ref">stretch_margin_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-stretch-margin-top"><inline classes="std std-ref">stretch_margin_top</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-texture-over"><inline classes="std std-ref">texture_over</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-texture-progress-offset"><inline classes="std std-ref">texture_progress_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-texture-under"><inline classes="std std-ref">texture_under</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-tint-over"><inline classes="std std-ref">tint_over</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-tint-progress"><inline classes="std std-ref">tint_progress</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-property-tint-under"><inline classes="std std-ref">tint_under</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="23"></colspec>
                    <colspec colwidth="162"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-method-get-stretch-margin"><inline classes="std std-ref">get_stretch_margin</inline></reference>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textureprogressbar-method-set-stretch-margin"><inline classes="std std-ref">set_stretch_margin</inline></reference>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-textureprogressbar-fillmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-textureprogressbar-fillmode" names="enum_textureprogressbar_fillmode">enum <strong>FillMode</strong>: <reference internal="True" refid="enum-textureprogressbar-fillmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-textureprogressbar-constant-fill-left-to-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textureprogressbar-constant-fill-left-to-right" names="class_textureprogressbar_constant_fill_left_to_right"><reference internal="True" refid="enum-textureprogressbar-fillmode"><inline classes="std std-ref">FillMode</inline></reference> <strong>FILL_LEFT_TO_RIGHT</strong> = <literal>0</literal></paragraph>
            <paragraph><reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference> 从左到右填充。</paragraph>
            <target refid="class-textureprogressbar-constant-fill-right-to-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textureprogressbar-constant-fill-right-to-left" names="class_textureprogressbar_constant_fill_right_to_left"><reference internal="True" refid="enum-textureprogressbar-fillmode"><inline classes="std std-ref">FillMode</inline></reference> <strong>FILL_RIGHT_TO_LEFT</strong> = <literal>1</literal></paragraph>
            <paragraph><reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference> 从右到左填充。</paragraph>
            <target refid="class-textureprogressbar-constant-fill-top-to-bottom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textureprogressbar-constant-fill-top-to-bottom" names="class_textureprogressbar_constant_fill_top_to_bottom"><reference internal="True" refid="enum-textureprogressbar-fillmode"><inline classes="std std-ref">FillMode</inline></reference> <strong>FILL_TOP_TO_BOTTOM</strong> = <literal>2</literal></paragraph>
            <paragraph><reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference> 从上到下填充。</paragraph>
            <target refid="class-textureprogressbar-constant-fill-bottom-to-top"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textureprogressbar-constant-fill-bottom-to-top" names="class_textureprogressbar_constant_fill_bottom_to_top"><reference internal="True" refid="enum-textureprogressbar-fillmode"><inline classes="std std-ref">FillMode</inline></reference> <strong>FILL_BOTTOM_TO_TOP</strong> = <literal>3</literal></paragraph>
            <paragraph><reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference> 自下而上填充。</paragraph>
            <target refid="class-textureprogressbar-constant-fill-clockwise"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textureprogressbar-constant-fill-clockwise" names="class_textureprogressbar_constant_fill_clockwise"><reference internal="True" refid="enum-textureprogressbar-fillmode"><inline classes="std std-ref">FillMode</inline></reference> <strong>FILL_CLOCKWISE</strong> = <literal>4</literal></paragraph>
            <paragraph>将节点变成径向条形。<reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference> 顺时针填充。参阅<reference internal="True" refid="class-textureprogressbar-property-radial-center-offset"><inline classes="std std-ref">radial_center_offset</inline></reference>、<reference internal="True" refid="class-textureprogressbar-property-radial-initial-angle"><inline classes="std std-ref">radial_initial_angle</inline></reference>和<reference internal="True" refid="class-textureprogressbar-property-radial-fill-degrees"><inline classes="std std-ref">radial_fill_degrees</inline></reference>来控制条形填充的方式。</paragraph>
            <target refid="class-textureprogressbar-constant-fill-counter-clockwise"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textureprogressbar-constant-fill-counter-clockwise" names="class_textureprogressbar_constant_fill_counter_clockwise"><reference internal="True" refid="enum-textureprogressbar-fillmode"><inline classes="std std-ref">FillMode</inline></reference> <strong>FILL_COUNTER_CLOCKWISE</strong> = <literal>5</literal></paragraph>
            <paragraph>将节点变成径向条形。<reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference>逆时针填充。参阅<reference internal="True" refid="class-textureprogressbar-property-radial-center-offset"><inline classes="std std-ref">radial_center_offset</inline></reference>、<reference internal="True" refid="class-textureprogressbar-property-radial-initial-angle"><inline classes="std std-ref">radial_initial_angle</inline></reference>和<reference internal="True" refid="class-textureprogressbar-property-radial-fill-degrees"><inline classes="std std-ref">radial_fill_degrees</inline></reference>来控制条形填充的方式。</paragraph>
            <target refid="class-textureprogressbar-constant-fill-bilinear-left-and-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textureprogressbar-constant-fill-bilinear-left-and-right" names="class_textureprogressbar_constant_fill_bilinear_left_and_right"><reference internal="True" refid="enum-textureprogressbar-fillmode"><inline classes="std std-ref">FillMode</inline></reference> <strong>FILL_BILINEAR_LEFT_AND_RIGHT</strong> = <literal>6</literal></paragraph>
            <paragraph><reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference>从中心开始填充，向左和向右扩展。</paragraph>
            <target refid="class-textureprogressbar-constant-fill-bilinear-top-and-bottom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textureprogressbar-constant-fill-bilinear-top-and-bottom" names="class_textureprogressbar_constant_fill_bilinear_top_and_bottom"><reference internal="True" refid="enum-textureprogressbar-fillmode"><inline classes="std std-ref">FillMode</inline></reference> <strong>FILL_BILINEAR_TOP_AND_BOTTOM</strong> = <literal>7</literal></paragraph>
            <paragraph><reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference>从中心开始填充，同时向顶部和底部扩展。</paragraph>
            <target refid="class-textureprogressbar-constant-fill-clockwise-and-counter-clockwise"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-textureprogressbar-constant-fill-clockwise-and-counter-clockwise" names="class_textureprogressbar_constant_fill_clockwise_and_counter_clockwise"><reference internal="True" refid="enum-textureprogressbar-fillmode"><inline classes="std std-ref">FillMode</inline></reference> <strong>FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE</strong> = <literal>8</literal></paragraph>
            <paragraph>将节点变成径向条形。<reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference>从中心径向填充，顺时针和逆时针扩展。参阅<reference internal="True" refid="class-textureprogressbar-property-radial-center-offset"><inline classes="std std-ref">radial_center_offset</inline></reference>、<reference internal="True" refid="class-textureprogressbar-property-radial-initial-angle"><inline classes="std std-ref">radial_initial_angle</inline></reference>和<reference internal="True" refid="class-textureprogressbar-property-radial-fill-degrees"><inline classes="std std-ref">radial_fill_degrees</inline></reference>来控制条形填充的方式。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-textureprogressbar-property-fill-mode"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-fill-mode" names="class_textureprogressbar_property_fill_mode"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>fill_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-textureprogressbar-property-fill-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fill_mode</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_fill_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>填充方向。可能的取值见 <reference internal="True" refid="enum-textureprogressbar-fillmode"><inline classes="std std-ref">FillMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-nine-patch-stretch"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-nine-patch-stretch" names="class_textureprogressbar_property_nine_patch_stretch"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>nine_patch_stretch</strong> = <literal>false</literal> <reference internal="True" refid="class-textureprogressbar-property-nine-patch-stretch"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_nine_patch_stretch</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_nine_patch_stretch</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，Godot 会像在 <reference internal="True" refuri="class_ninepatchrect#class-ninepatchrect"><inline classes="std std-ref">NinePatchRect</inline></reference> 中那样处理条形纹理。使用 <literal>stretch_margin_*</literal> 属性，如 <reference internal="True" refid="class-textureprogressbar-property-stretch-margin-bottom"><inline classes="std std-ref">stretch_margin_bottom</inline></reference> 来设置九宫格的 3×3 网格。当使用径向的 <reference internal="True" refid="class-textureprogressbar-property-fill-mode"><inline classes="std std-ref">fill_mode</inline></reference> 时，这个设置将启用拉伸功能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-radial-center-offset"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-radial-center-offset" names="class_textureprogressbar_property_radial_center_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>radial_center_offset</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-textureprogressbar-property-radial-center-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_radial_center_offset</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_radial_center_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果 <reference internal="True" refid="class-textureprogressbar-property-fill-mode"><inline classes="std std-ref">fill_mode</inline></reference> 为 <reference internal="True" refid="class-textureprogressbar-constant-fill-clockwise"><inline classes="std std-ref">FILL_CLOCKWISE</inline></reference>、<reference internal="True" refid="class-textureprogressbar-constant-fill-counter-clockwise"><inline classes="std std-ref">FILL_COUNTER_CLOCKWISE</inline></reference> 或 <reference internal="True" refid="class-textureprogressbar-constant-fill-clockwise-and-counter-clockwise"><inline classes="std std-ref">FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE</inline></reference>，则对 <reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference> 进行偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-radial-fill-degrees"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-radial-fill-degrees" names="class_textureprogressbar_property_radial_fill_degrees"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>radial_fill_degrees</strong> = <literal>360.0</literal> <reference internal="True" refid="class-textureprogressbar-property-radial-fill-degrees"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fill_degrees</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_fill_degrees</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refid="class-textureprogressbar-property-fill-mode"><inline classes="std std-ref">fill_mode</inline></reference> 为 <reference internal="True" refid="class-textureprogressbar-constant-fill-clockwise"><inline classes="std std-ref">FILL_CLOCKWISE</inline></reference>、<reference internal="True" refid="class-textureprogressbar-constant-fill-counter-clockwise"><inline classes="std std-ref">FILL_COUNTER_CLOCKWISE</inline></reference> 或 <reference internal="True" refid="class-textureprogressbar-constant-fill-clockwise-and-counter-clockwise"><inline classes="std std-ref">FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE</inline></reference> 时， <reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference> 的填充上限。当节点的 <literal>value</literal> 等于其 <literal>max_value</literal> 时，则纹理将会填充到这个角度。</paragraph>
            <paragraph>见 <reference internal="True" refuri="class_range#class-range-property-value"><inline classes="std std-ref">Range.value</inline></reference>、<reference internal="True" refuri="class_range#class-range-property-max-value"><inline classes="std std-ref">Range.max_value</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-radial-initial-angle"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-radial-initial-angle" names="class_textureprogressbar_property_radial_initial_angle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>radial_initial_angle</strong> = <literal>0.0</literal> <reference internal="True" refid="class-textureprogressbar-property-radial-initial-angle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_radial_initial_angle</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_radial_initial_angle</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refid="class-textureprogressbar-property-fill-mode"><inline classes="std std-ref">fill_mode</inline></reference> 为 <reference internal="True" refid="class-textureprogressbar-constant-fill-clockwise"><inline classes="std std-ref">FILL_CLOCKWISE</inline></reference>、<reference internal="True" refid="class-textureprogressbar-constant-fill-counter-clockwise"><inline classes="std std-ref">FILL_COUNTER_CLOCKWISE</inline></reference> 或 <reference internal="True" refid="class-textureprogressbar-constant-fill-clockwise-and-counter-clockwise"><inline classes="std std-ref">FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE</inline></reference> 时，<reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference> 填充的起始角度。当节点的 <literal>value</literal> 等于其 <literal>min_value</literal> 时，纹理根本不会显示出来。当 <literal>value</literal> 增加时，纹理填充并趋向于 <reference internal="True" refid="class-textureprogressbar-property-radial-fill-degrees"><inline classes="std std-ref">radial_fill_degrees</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-stretch-margin-bottom"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-stretch-margin-bottom" names="class_textureprogressbar_property_stretch_margin_bottom"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>stretch_margin_bottom</strong> = <literal>0</literal> <reference internal="True" refid="class-textureprogressbar-property-stretch-margin-bottom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stretch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_stretch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>九宫格底部一行的高度。边距为 16 意味着九宫格的底角和侧面将有 16 像素的高度。你可以单独设置所有 4 个边距值，来创建边框不均一的面板。仅在 <reference internal="True" refid="class-textureprogressbar-property-nine-patch-stretch"><inline classes="std std-ref">nine_patch_stretch</inline></reference> 为 <literal>true</literal> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-stretch-margin-left"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-stretch-margin-left" names="class_textureprogressbar_property_stretch_margin_left"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>stretch_margin_left</strong> = <literal>0</literal> <reference internal="True" refid="class-textureprogressbar-property-stretch-margin-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stretch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_stretch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>九宫格左侧一列的宽度。仅在 <reference internal="True" refid="class-textureprogressbar-property-nine-patch-stretch"><inline classes="std std-ref">nine_patch_stretch</inline></reference> 为 <literal>true</literal> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-stretch-margin-right"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-stretch-margin-right" names="class_textureprogressbar_property_stretch_margin_right"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>stretch_margin_right</strong> = <literal>0</literal> <reference internal="True" refid="class-textureprogressbar-property-stretch-margin-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stretch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_stretch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>九宫格右侧一列的宽度。仅在 <reference internal="True" refid="class-textureprogressbar-property-nine-patch-stretch"><inline classes="std std-ref">nine_patch_stretch</inline></reference> 为 <literal>true</literal> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-stretch-margin-top"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-stretch-margin-top" names="class_textureprogressbar_property_stretch_margin_top"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>stretch_margin_top</strong> = <literal>0</literal> <reference internal="True" refid="class-textureprogressbar-property-stretch-margin-top"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stretch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_stretch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>九宫格顶部一行的高度。仅在 <reference internal="True" refid="class-textureprogressbar-property-nine-patch-stretch"><inline classes="std std-ref">nine_patch_stretch</inline></reference> 为 <literal>true</literal> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-texture-over"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-texture-over" names="class_textureprogressbar_property_texture_over"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>texture_over</strong> <reference internal="True" refid="class-textureprogressbar-property-texture-over"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_over_texture</strong>(value: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_over_texture</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在进度条至上绘制的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。可用于添加高光，也可用于添加遮挡部分 <reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference> 的上层边框。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-texture-progress"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-texture-progress" names="class_textureprogressbar_property_texture_progress"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>texture_progress</strong> <reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_progress_texture</strong>(value: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_progress_texture</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>被裁剪的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。裁剪基于该节点的 <literal>value</literal> 和 <reference internal="True" refid="class-textureprogressbar-property-fill-mode"><inline classes="std std-ref">fill_mode</inline></reference>。随着 <literal>value</literal> 的增加，该纹理将被填满。当 <literal>value</literal> 达到 <literal>max_value</literal> 时，它将完整显示。如果 <literal>value</literal> 等于 <literal>min_value</literal>，则它根本不显示。</paragraph>
            <paragraph><literal>value</literal> 属性来自 <reference internal="True" refuri="class_range#class-range"><inline classes="std std-ref">Range</inline></reference>。参见 <reference internal="True" refuri="class_range#class-range-property-value"><inline classes="std std-ref">Range.value</inline></reference>、<reference internal="True" refuri="class_range#class-range-property-min-value"><inline classes="std std-ref">Range.min_value</inline></reference>、<reference internal="True" refuri="class_range#class-range-property-max-value"><inline classes="std std-ref">Range.max_value</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-texture-progress-offset"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-texture-progress-offset" names="class_textureprogressbar_property_texture_progress_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>texture_progress_offset</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-textureprogressbar-property-texture-progress-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture_progress_offset</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_texture_progress_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference> 的偏移量。对于带有花哨的边框的 <reference internal="True" refid="class-textureprogressbar-property-texture-over"><inline classes="std std-ref">texture_over</inline></reference> 和 <reference internal="True" refid="class-textureprogressbar-property-texture-under"><inline classes="std std-ref">texture_under</inline></reference> 很有用，可以避免进度纹理的边缘透明。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-texture-under"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-texture-under" names="class_textureprogressbar_property_texture_under"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>texture_under</strong> <reference internal="True" refid="class-textureprogressbar-property-texture-under"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_under_texture</strong>(value: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_under_texture</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在进度条下绘制的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。该进度条的背景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-tint-over"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-tint-over" names="class_textureprogressbar_property_tint_over"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>tint_over</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-textureprogressbar-property-tint-over"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tint_over</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_tint_over</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将与该进度条的 <reference internal="True" refid="class-textureprogressbar-property-texture-over"><inline classes="std std-ref">texture_over</inline></reference> 纹理的颜色相乘。其效果类似于 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-modulate"><inline classes="std std-ref">CanvasItem.modulate</inline></reference> ，只是它只影响这个特定的纹理，而不是整个节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-tint-progress"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-tint-progress" names="class_textureprogressbar_property_tint_progress"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>tint_progress</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-textureprogressbar-property-tint-progress"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tint_progress</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_tint_progress</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将与该进度条的 <reference internal="True" refid="class-textureprogressbar-property-texture-progress"><inline classes="std std-ref">texture_progress</inline></reference> 纹理的颜色相乘。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-property-tint-under"></target>
            <paragraph classes="classref-property" ids="class-textureprogressbar-property-tint-under" names="class_textureprogressbar_property_tint_under"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>tint_under</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-textureprogressbar-property-tint-under"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tint_under</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_tint_under</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将与该进度条的 <reference internal="True" refid="class-textureprogressbar-property-texture-under"><inline classes="std std-ref">texture_under</inline></reference> 纹理的颜色相乘。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-textureprogressbar-method-get-stretch-margin"></target>
            <paragraph classes="classref-method" ids="class-textureprogressbar-method-get-stretch-margin" names="class_textureprogressbar_method_get_stretch_margin"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_stretch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textureprogressbar-method-get-stretch-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定索引的拉伸边距。见 <reference internal="True" refid="class-textureprogressbar-property-stretch-margin-bottom"><inline classes="std std-ref">stretch_margin_bottom</inline></reference> 及相关属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textureprogressbar-method-set-stretch-margin"></target>
            <paragraph classes="classref-method" ids="class-textureprogressbar-method-set-stretch-margin" names="class_textureprogressbar_method_set_stretch_margin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stretch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-textureprogressbar-method-set-stretch-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定索引的拉伸边距。见 <reference internal="True" refid="class-textureprogressbar-property-stretch-margin-bottom"><inline classes="std std-ref">stretch_margin_bottom</inline></reference> 及相关属性。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
