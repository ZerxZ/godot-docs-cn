<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_animationnodetransition.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AnimationNodeTransition.xml.</comment>
    <target refid="class-animationnodetransition"></target>
    <section ids="animationnodetransition class-animationnodetransition" names="animationnodetransition class_animationnodetransition">
        <title>AnimationNodeTransition</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_animationnodesync#class-animationnodesync"><inline classes="std std-ref">AnimationNodeSync</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 中连接两个 <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> 的过渡。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>适用于不需要更高级 <reference internal="True" refuri="class_animationnodestatemachine#class-animationnodestatemachine"><inline classes="std std-ref">AnimationNodeStateMachine</inline></reference> 的情况的简单状态机。可以将动画连接到输入，还可以指定过渡时间。</paragraph>
            <paragraph>设置请求并更改动画播放后，过渡节点会在下一个处理帧中通过将其 <literal>transition_request</literal> 值设置为空，来自动清除请求。</paragraph>
            <paragraph><strong>注意：</strong>使用交叉淡入淡出时，<literal>current_state</literal> 和 <literal>current_index</literal> 在交叉淡入淡出开始后立即更改为下一个状态。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 播放连接到 “state_2” 端口的子动画。
animation_tree.set("parameters/Transition/transition_request", "state_2")
# 替代语法（与上述结果相同）。
animation_tree["parameters/Transition/transition_request"] = "state_2"

# 获取当前状态名称（只读）。
animation_tree.get("parameters/Transition/current_state")
# 替代语法（与上述结果相同）。
animation_tree["parameters/Transition/current_state"]

# 获取当前状态索引（只读）。
animation_tree.get("parameters/Transition/current_index"))
# 替代语法（与上述结果相同）。
animation_tree["parameters/Transition/current_index"]</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 播放连接到 “state_2” 端口的子动画。
animationTree.Set("parameters/Transition/transition_request", "state_2");

// 获取当前状态名称（只读）。
animationTree.Get("parameters/Transition/current_state");

// 获取当前状态索引（只读）。
animationTree.Get("parameters/Transition/current_index");</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/animation/animation_tree"><inline classes="doc">使用 AnimationTree</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 平台跳跃演示" refuri="https://godotengine.org/asset-library/asset/2748">3D 平台跳跃演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="第三人称射击（TPS）演示" refuri="https://godotengine.org/asset-library/asset/2710">第三人称射击（TPS）演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="98"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodetransition-property-allow-transition-to-self"><inline classes="std std-ref">allow_transition_to_self</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodetransition-property-input-count"><inline classes="std std-ref">input_count</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodetransition-property-xfade-curve"><inline classes="std std-ref">xfade_curve</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodetransition-property-xfade-time"><inline classes="std std-ref">xfade_time</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="173"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodetransition-method-is-input-loop-broken-at-end"><inline classes="std std-ref">is_input_loop_broken_at_end</inline></reference>(input: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodetransition-method-is-input-reset"><inline classes="std std-ref">is_input_reset</inline></reference>(input: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodetransition-method-is-input-set-as-auto-advance"><inline classes="std std-ref">is_input_set_as_auto_advance</inline></reference>(input: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodetransition-method-set-input-as-auto-advance"><inline classes="std std-ref">set_input_as_auto_advance</inline></reference>(input: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodetransition-method-set-input-break-loop-at-end"><inline classes="std std-ref">set_input_break_loop_at_end</inline></reference>(input: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodetransition-method-set-input-reset"><inline classes="std std-ref">set_input_reset</inline></reference>(input: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-animationnodetransition-property-allow-transition-to-self"></target>
            <paragraph classes="classref-property" ids="class-animationnodetransition-property-allow-transition-to-self" names="class_animationnodetransition_property_allow_transition_to_self"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>allow_transition_to_self</strong> = <literal>false</literal> <reference internal="True" refid="class-animationnodetransition-property-allow-transition-to-self"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_allow_transition_to_self</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_allow_transition_to_self</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，允许过渡到当前状态。当在输入中启用重置选项时，动画将重新启动。如果为 <literal>false</literal>，则在过渡到 当前状态时不会发生任何事情。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodetransition-property-input-count"></target>
            <paragraph classes="classref-property" ids="class-animationnodetransition-property-input-count" names="class_animationnodetransition_property_input_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>input_count</strong> = <literal>0</literal> <reference internal="True" refid="class-animationnodetransition-property-input-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_input_count</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_input_count</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>这个动画节点启用的输入端口的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodetransition-property-xfade-curve"></target>
            <paragraph classes="classref-property" ids="class-animationnodetransition-property-xfade-curve" names="class_animationnodetransition_property_xfade_curve"><reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference> <strong>xfade_curve</strong> <reference internal="True" refid="class-animationnodetransition-property-xfade-curve"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_xfade_curve</strong>(value: <reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference> <strong>get_xfade_curve</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>确定如何缓动动画之间的淡入淡出。如果为空，过渡将是线性的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodetransition-property-xfade-time"></target>
            <paragraph classes="classref-property" ids="class-animationnodetransition-property-xfade-time" names="class_animationnodetransition_property_xfade_time"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>xfade_time</strong> = <literal>0.0</literal> <reference internal="True" refid="class-animationnodetransition-property-xfade-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_xfade_time</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_xfade_time</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>连接到输入的每个动画之间的交叉衰落时间（以秒为单位）。</paragraph>
            <paragraph>** 注意：<strong>**AnimationNodeTransition</strong>在渐变开始后立即转换当前状态。精确的剩余时间只能从主动画中推断出来。当<reference internal="True" refuri="class_animationnodeoutput#class-animationnodeoutput"><inline classes="std std-ref">AnimationNodeOutput</inline></reference>被视为最上游时，因此<reference internal="True" refid="class-animationnodetransition-property-xfade-time"><inline classes="std std-ref">xfade_time</inline></reference>不会根据下游增量进行缩放。另请参见<reference internal="True" refuri="class_animationnodeoneshot#class-animationnodeoneshot-property-fadeout-time"><inline classes="std std-ref">AnimationNodeOneShot.fadeout_time</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-animationnodetransition-method-is-input-loop-broken-at-end"></target>
            <paragraph classes="classref-method" ids="class-animationnodetransition-method-is-input-loop-broken-at-end" names="class_animationnodetransition_method_is_input_loop_broken_at_end"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_input_loop_broken_at_end</strong>(input: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodetransition-method-is-input-loop-broken-at-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回动画是否在过渡循环结束时中断循环。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodetransition-method-is-input-reset"></target>
            <paragraph classes="classref-method" ids="class-animationnodetransition-method-is-input-reset" names="class_animationnodetransition_method_is_input_reset"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_input_reset</strong>(input: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodetransition-method-is-input-reset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当动画从另一个动画过渡时，该动画是否重新开始。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodetransition-method-is-input-set-as-auto-advance"></target>
            <paragraph classes="classref-method" ids="class-animationnodetransition-method-is-input-set-as-auto-advance" names="class_animationnodetransition_method_is_input_set_as_auto_advance"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_input_set_as_auto_advance</strong>(input: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodetransition-method-is-input-set-as-auto-advance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为给定的 <literal>input</literal> 索引启用了自动前进，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodetransition-method-set-input-as-auto-advance"></target>
            <paragraph classes="classref-method" ids="class-animationnodetransition-method-set-input-as-auto-advance" names="class_animationnodetransition_method_set_input_as_auto_advance"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_input_as_auto_advance</strong>(input: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-animationnodetransition-method-set-input-as-auto-advance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为给定的 <literal>input</literal> 索引启用或禁用自动前进。如果启用，状态会在播放一次动画后更改为下一个输入。如果为最后一个输入状态启用，它会循环到第一个。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodetransition-method-set-input-break-loop-at-end"></target>
            <paragraph classes="classref-method" ids="class-animationnodetransition-method-set-input-break-loop-at-end" names="class_animationnodetransition_method_set_input_break_loop_at_end"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_input_break_loop_at_end</strong>(input: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-animationnodetransition-method-set-input-break-loop-at-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果<literal>true</literal>，则在循环循环结束时中断循环以进行转换，即使动画正在循环。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodetransition-method-set-input-reset"></target>
            <paragraph classes="classref-method" ids="class-animationnodetransition-method-set-input-reset" names="class_animationnodetransition_method_set_input_reset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_input_reset</strong>(input: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-animationnodetransition-method-set-input-reset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则目标动画在动画过渡时重新启动。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
