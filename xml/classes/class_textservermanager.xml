<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_textservermanager.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TextServerManager.xml.</comment>
    <target refid="class-textservermanager"></target>
    <section ids="textservermanager class-textservermanager" names="textservermanager class_textservermanager">
        <title>TextServerManager</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于管理 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 实现的单例。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>TextServerManager</strong> 是加载、枚举和切换 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 的 API 后端。</paragraph>
            <paragraph><strong>注意：</strong>文本服务器可以在运行时切换，但会导致所有字体和文本缓冲区失效。请确保在切换之前卸载所有控件、字体和主题。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="135"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textservermanager-method-add-interface"><inline classes="std std-ref">add_interface</inline></reference>(interface: <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textservermanager-method-find-interface"><inline classes="std std-ref">find_interface</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textservermanager-method-get-interface"><inline classes="std std-ref">get_interface</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textservermanager-method-get-interface-count"><inline classes="std std-ref">get_interface_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textservermanager-method-get-interfaces"><inline classes="std std-ref">get_interfaces</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textservermanager-method-get-primary-interface"><inline classes="std std-ref">get_primary_interface</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textservermanager-method-remove-interface"><inline classes="std std-ref">remove_interface</inline></reference>(interface: <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textservermanager-method-set-primary-interface"><inline classes="std std-ref">set_primary_interface</inline></reference>(index: <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="信号">
            <title>信号</title>
            <target refid="class-textservermanager-signal-interface-added"></target>
            <paragraph classes="classref-signal" ids="class-textservermanager-signal-interface-added" names="class_textservermanager_signal_interface_added"><strong>interface_added</strong>(interface_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-textservermanager-signal-interface-added"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加新接口时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textservermanager-signal-interface-removed"></target>
            <paragraph classes="classref-signal" ids="class-textservermanager-signal-interface-removed" names="class_textservermanager_signal_interface_removed"><strong>interface_removed</strong>(interface_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-textservermanager-signal-interface-removed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当接口被移除时触发。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-textservermanager-method-add-interface"></target>
            <paragraph classes="classref-method" ids="class-textservermanager-method-add-interface" names="class_textservermanager_method_add_interface"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_interface</strong>(interface: <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference>) <reference internal="True" refid="class-textservermanager-method-add-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 接口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textservermanager-method-find-interface"></target>
            <paragraph classes="classref-method" ids="class-textservermanager-method-find-interface" names="class_textservermanager_method_find_interface"><reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> <strong>find_interface</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textservermanager-method-find-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据名称 <literal>name</literal> 查找接口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textservermanager-method-get-interface"></target>
            <paragraph classes="classref-method" ids="class-textservermanager-method-get-interface" names="class_textservermanager_method_get_interface"><reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> <strong>get_interface</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textservermanager-method-get-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在给定索引处注册的接口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textservermanager-method-get-interface-count"></target>
            <paragraph classes="classref-method" ids="class-textservermanager-method-get-interface-count" names="class_textservermanager_method_get_interface_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_interface_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textservermanager-method-get-interface-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前注册的接口数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textservermanager-method-get-interfaces"></target>
            <paragraph classes="classref-method" ids="class-textservermanager-method-get-interfaces" names="class_textservermanager_method_get_interfaces"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>get_interfaces</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textservermanager-method-get-interfaces"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回可用接口的列表，包含每个接口的索引号和名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textservermanager-method-get-primary-interface"></target>
            <paragraph classes="classref-method" ids="class-textservermanager-method-get-primary-interface" names="class_textservermanager_method_get_primary_interface"><reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> <strong>get_primary_interface</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textservermanager-method-get-primary-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前使用的主 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 接口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textservermanager-method-remove-interface"></target>
            <paragraph classes="classref-method" ids="class-textservermanager-method-remove-interface" names="class_textservermanager_method_remove_interface"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_interface</strong>(interface: <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference>) <reference internal="True" refid="class-textservermanager-method-remove-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除接口。在移除接口之前，应释放所有字体和塑形文本的缓存。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textservermanager-method-set-primary-interface"></target>
            <paragraph classes="classref-method" ids="class-textservermanager-method-set-primary-interface" names="class_textservermanager_method_set_primary_interface"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_primary_interface</strong>(index: <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference>) <reference internal="True" refid="class-textservermanager-method-set-primary-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置主 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 接口。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
