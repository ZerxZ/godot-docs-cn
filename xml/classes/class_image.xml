<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_image.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Image.xml.</comment>
    <target refid="class-image"></target>
    <section ids="image class-image" names="image class_image">
        <title>Image</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>图像数据类型。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>本机图像数据类型。包含可以被转换为 <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference> 的图像数据，并提供常用的<emphasis>图像处理</emphasis>方法。<strong>Image</strong> 的最大宽度和高度为 <reference internal="True" refid="class-image-constant-max-width"><inline classes="std std-ref">MAX_WIDTH</inline></reference> 和 <reference internal="True" refid="class-image-constant-max-height"><inline classes="std std-ref">MAX_HEIGHT</inline></reference>。</paragraph>
            <paragraph><strong>Image</strong> 不能被直接分配给对象的纹理属性（例如 <reference internal="True" refuri="class_sprite2d#class-sprite2d-property-texture"><inline classes="std std-ref">Sprite2D.texture</inline></reference>），必须先手动转换为 <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>由于图形硬件限制，最大图像大小为 16384×16384 像素。较大的图像可能无法导入。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/assets_pipeline/importing_images"><inline classes="doc">导入图像</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/io/runtime_file_loading_and_saving"><inline classes="doc">运行时文件加载与保存</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="40"></colspec>
                    <colspec colwidth="96"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-property-data"><inline classes="std std-ref">data</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>{ "data": PackedByteArray(), "format": "Lum8", "height": 0, "mipmaps": false, "width": 0 }</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="276"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-adjust-bcs"><inline classes="std std-ref">adjust_bcs</inline></reference>(brightness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, contrast: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, saturation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-blend-rect"><inline classes="std std-ref">blend_rect</inline></reference>(src: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, dst: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-blend-rect-mask"><inline classes="std std-ref">blend_rect_mask</inline></reference>(src: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, mask: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, dst: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-blit-rect"><inline classes="std std-ref">blit_rect</inline></reference>(src: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, dst: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-blit-rect-mask"><inline classes="std std-ref">blit_rect_mask</inline></reference>(src: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, mask: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, dst: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-bump-map-to-normal-map"><inline classes="std std-ref">bump_map_to_normal_map</inline></reference>(bump_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-clear-mipmaps"><inline classes="std std-ref">clear_mipmaps</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-compress"><inline classes="std std-ref">compress</inline></reference>(mode: <reference internal="True" refid="enum-image-compressmode"><inline classes="std std-ref">CompressMode</inline></reference>, source: <reference internal="True" refid="enum-image-compresssource"><inline classes="std std-ref">CompressSource</inline></reference> = 0, astc_format: <reference internal="True" refid="enum-image-astcformat"><inline classes="std std-ref">ASTCFormat</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-compress-from-channels"><inline classes="std std-ref">compress_from_channels</inline></reference>(mode: <reference internal="True" refid="enum-image-compressmode"><inline classes="std std-ref">CompressMode</inline></reference>, channels: <reference internal="True" refid="enum-image-usedchannels"><inline classes="std std-ref">UsedChannels</inline></reference>, astc_format: <reference internal="True" refid="enum-image-astcformat"><inline classes="std std-ref">ASTCFormat</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-compute-image-metrics"><inline classes="std std-ref">compute_image_metrics</inline></reference>(compared_image: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, use_luma: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-convert"><inline classes="std std-ref">convert</inline></reference>(format: <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-copy-from"><inline classes="std std-ref">copy_from</inline></reference>(src: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-create"><inline classes="std std-ref">create</inline></reference>(width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, use_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, format: <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-create-empty"><inline classes="std std-ref">create_empty</inline></reference>(width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, use_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, format: <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-create-from-data"><inline classes="std std-ref">create_from_data</inline></reference>(width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, use_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, format: <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-crop"><inline classes="std std-ref">crop</inline></reference>(width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-decompress"><inline classes="std std-ref">decompress</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-image-alphamode"><inline classes="std std-ref">AlphaMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-detect-alpha"><inline classes="std std-ref">detect_alpha</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-image-usedchannels"><inline classes="std std-ref">UsedChannels</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-detect-used-channels"><inline classes="std std-ref">detect_used_channels</inline></reference>(source: <reference internal="True" refid="enum-image-compresssource"><inline classes="std std-ref">CompressSource</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-fill"><inline classes="std std-ref">fill</inline></reference>(color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-fill-rect"><inline classes="std std-ref">fill_rect</inline></reference>(rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-fix-alpha-edges"><inline classes="std std-ref">fix_alpha_edges</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-flip-x"><inline classes="std std-ref">flip_x</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-flip-y"><inline classes="std std-ref">flip_y</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-generate-mipmaps"><inline classes="std std-ref">generate_mipmaps</inline></reference>(renormalize: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-get-data"><inline classes="std std-ref">get_data</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-get-data-size"><inline classes="std std-ref">get_data_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-get-format"><inline classes="std std-ref">get_format</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-get-height"><inline classes="std std-ref">get_height</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-get-mipmap-count"><inline classes="std std-ref">get_mipmap_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-get-mipmap-offset"><inline classes="std std-ref">get_mipmap_offset</inline></reference>(mipmap: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-get-pixel"><inline classes="std std-ref">get_pixel</inline></reference>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-get-pixelv"><inline classes="std std-ref">get_pixelv</inline></reference>(point: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-get-region"><inline classes="std std-ref">get_region</inline></reference>(region: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-get-size"><inline classes="std std-ref">get_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-get-used-rect"><inline classes="std std-ref">get_used_rect</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-get-width"><inline classes="std std-ref">get_width</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-has-mipmaps"><inline classes="std std-ref">has_mipmaps</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-is-compressed"><inline classes="std std-ref">is_compressed</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-is-empty"><inline classes="std std-ref">is_empty</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-is-invisible"><inline classes="std std-ref">is_invisible</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-load"><inline classes="std std-ref">load</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-load-bmp-from-buffer"><inline classes="std std-ref">load_bmp_from_buffer</inline></reference>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-load-from-file"><inline classes="std std-ref">load_from_file</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-load-jpg-from-buffer"><inline classes="std std-ref">load_jpg_from_buffer</inline></reference>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-load-ktx-from-buffer"><inline classes="std std-ref">load_ktx_from_buffer</inline></reference>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-load-png-from-buffer"><inline classes="std std-ref">load_png_from_buffer</inline></reference>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-load-svg-from-buffer"><inline classes="std std-ref">load_svg_from_buffer</inline></reference>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-load-svg-from-string"><inline classes="std std-ref">load_svg_from_string</inline></reference>(svg_str: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-load-tga-from-buffer"><inline classes="std std-ref">load_tga_from_buffer</inline></reference>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-load-webp-from-buffer"><inline classes="std std-ref">load_webp_from_buffer</inline></reference>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-normal-map-to-xy"><inline classes="std std-ref">normal_map_to_xy</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-premultiply-alpha"><inline classes="std std-ref">premultiply_alpha</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-resize"><inline classes="std std-ref">resize</inline></reference>(width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, interpolation: <reference internal="True" refid="enum-image-interpolation"><inline classes="std std-ref">Interpolation</inline></reference> = 1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-resize-to-po2"><inline classes="std std-ref">resize_to_po2</inline></reference>(square: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, interpolation: <reference internal="True" refid="enum-image-interpolation"><inline classes="std std-ref">Interpolation</inline></reference> = 1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-rgbe-to-srgb"><inline classes="std std-ref">rgbe_to_srgb</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-rotate-90"><inline classes="std std-ref">rotate_90</inline></reference>(direction: <reference internal="True" refuri="class_@globalscope#enum-globalscope-clockdirection"><inline classes="std std-ref">ClockDirection</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-rotate-180"><inline classes="std std-ref">rotate_180</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-save-exr"><inline classes="std std-ref">save_exr</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, grayscale: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-save-exr-to-buffer"><inline classes="std std-ref">save_exr_to_buffer</inline></reference>(grayscale: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-save-jpg"><inline classes="std std-ref">save_jpg</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, quality: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.75) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-save-jpg-to-buffer"><inline classes="std std-ref">save_jpg_to_buffer</inline></reference>(quality: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.75) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-save-png"><inline classes="std std-ref">save_png</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-save-png-to-buffer"><inline classes="std std-ref">save_png_to_buffer</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-save-webp"><inline classes="std std-ref">save_webp</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, lossy: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, quality: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.75) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-save-webp-to-buffer"><inline classes="std std-ref">save_webp_to_buffer</inline></reference>(lossy: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, quality: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.75) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-set-data"><inline classes="std std-ref">set_data</inline></reference>(width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, use_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, format: <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-set-pixel"><inline classes="std std-ref">set_pixel</inline></reference>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-set-pixelv"><inline classes="std std-ref">set_pixelv</inline></reference>(point: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-shrink-x2"><inline classes="std std-ref">shrink_x2</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-image-method-srgb-to-linear"><inline classes="std std-ref">srgb_to_linear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-image-format"></target>
            <paragraph classes="classref-enumeration" ids="enum-image-format" names="enum_image_format">enum <strong>Format</strong>: <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-image-constant-format-l8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-l8" names="class_image_constant_format_l8"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_L8</strong> = <literal>0</literal></paragraph>
            <paragraph>纹理格式，具有代表亮度的单一 8 位深度。</paragraph>
            <target refid="class-image-constant-format-la8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-la8" names="class_image_constant_format_la8"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_LA8</strong> = <literal>1</literal></paragraph>
            <paragraph>OpenGL 纹理格式，具有两个值，亮度和 Alpha，都以 8 位存储。</paragraph>
            <target refid="class-image-constant-format-r8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-r8" names="class_image_constant_format_r8"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_R8</strong> = <literal>2</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>RED</literal>，具有单个分量和 8 位深度。</paragraph>
            <target refid="class-image-constant-format-rg8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rg8" names="class_image_constant_format_rg8"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RG8</strong> = <literal>3</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>RG</literal>，具有两个部分，每个部分的位深度为 8。</paragraph>
            <target refid="class-image-constant-format-rgb8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgb8" names="class_image_constant_format_rgb8"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGB8</strong> = <literal>4</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>RGB</literal> 具有三个部分，每个分量部分的位深度为 8。</paragraph>
            <paragraph><strong>注意：</strong>创建 <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference> 时，会执行 sRGB 到线性色彩空间的转换。</paragraph>
            <target refid="class-image-constant-format-rgba8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgba8" names="class_image_constant_format_rgba8"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGBA8</strong> = <literal>5</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>RGBA</literal> 有四个部分，每个分量部分的位深度为 8。</paragraph>
            <paragraph><strong>注意：</strong>创建 <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference> 时，会执行 sRGB 到线性色彩空间的转换。</paragraph>
            <target refid="class-image-constant-format-rgba4444"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgba4444" names="class_image_constant_format_rgba4444"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGBA4444</strong> = <literal>6</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>RGBA</literal> 有四个部分，每个分量部分的位深度为 4。</paragraph>
            <target refid="class-image-constant-format-rgb565"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgb565" names="class_image_constant_format_rgb565"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGB565</strong> = <literal>7</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>RGB</literal>，具有三个组件。红色和蓝色的位深度为 5，绿色的位深度为 6。</paragraph>
            <target refid="class-image-constant-format-rf"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rf" names="class_image_constant_format_rf"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RF</strong> = <literal>8</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>GL_R32F</literal>，其中有一个分量，是32 位浮点值。</paragraph>
            <target refid="class-image-constant-format-rgf"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgf" names="class_image_constant_format_rgf"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGF</strong> = <literal>9</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>GL_RG32F</literal> 这里有两个部分，每个部分是一个 32 位浮点值。</paragraph>
            <target refid="class-image-constant-format-rgbf"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgbf" names="class_image_constant_format_rgbf"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGBF</strong> = <literal>10</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>GL_RGB32F</literal>，其中有三个部分，每个部分都是 32 位浮点值。</paragraph>
            <target refid="class-image-constant-format-rgbaf"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgbaf" names="class_image_constant_format_rgbaf"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGBAF</strong> = <literal>11</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>GL_RGBA32F</literal>，其中有四个部分，每个部分都是 32 位浮点值。</paragraph>
            <target refid="class-image-constant-format-rh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rh" names="class_image_constant_format_rh"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RH</strong> = <literal>12</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>GL_R16F</literal>，其中有一个分量，即 16 位“半精度”浮点值。</paragraph>
            <target refid="class-image-constant-format-rgh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgh" names="class_image_constant_format_rgh"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGH</strong> = <literal>13</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>GL_RG16F</literal>，其中有两个分量，每个分量都是 16 位“半精度”浮点值。</paragraph>
            <target refid="class-image-constant-format-rgbh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgbh" names="class_image_constant_format_rgbh"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGBH</strong> = <literal>14</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>GL_RGB16F</literal>，其中有三个分量，每个分量都是 16 位“半精度”浮点值。</paragraph>
            <target refid="class-image-constant-format-rgbah"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgbah" names="class_image_constant_format_rgbah"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGBAH</strong> = <literal>15</literal></paragraph>
            <paragraph>OpenGL 纹理格式 <literal>GL_RGBA16F</literal>，其中有四个分量，每个都是 16 位“半精度”浮点值。</paragraph>
            <target refid="class-image-constant-format-rgbe9995"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgbe9995" names="class_image_constant_format_rgbe9995"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGBE9995</strong> = <literal>16</literal></paragraph>
            <paragraph>一种特殊的 OpenGL 纹理格式，其中三个颜色成分的精度为 9 位，所有三个成分共享一个 5 比特位的指数。</paragraph>
            <target refid="class-image-constant-format-dxt1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-dxt1" names="class_image_constant_format_dxt1"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_DXT1</strong> = <literal>17</literal></paragraph>
            <paragraph><reference name="S3TC" refuri="https://en.wikipedia.org/wiki/S3_Texture_Compression">S3TC</reference> 纹理格式使用块压缩 1，并且是 S3TC 的最小变化，仅提供 1 位的 Alpha 和颜色数据 预乘以 Alpha。</paragraph>
            <paragraph><strong>注意：</strong>创建 <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference> 时，会执行 sRGB 到线性色彩空间的转换。</paragraph>
            <target refid="class-image-constant-format-dxt3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-dxt3" names="class_image_constant_format_dxt3"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_DXT3</strong> = <literal>18</literal></paragraph>
            <paragraph>使用块压缩 2 的 <reference name="S3TC" refuri="https://en.wikipedia.org/wiki/S3_Texture_Compression">S3TC</reference> 贴图格式,并且颜色数据被解析为没有与 Alpha 预先相乘。非常适用于具有 半透明和不透明区域之间的清晰的 Alpha 过渡。</paragraph>
            <paragraph><strong>注意：</strong>创建 <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference> 时，会执行 sRGB 到线性色彩空间的转换。</paragraph>
            <target refid="class-image-constant-format-dxt5"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-dxt5" names="class_image_constant_format_dxt5"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_DXT5</strong> = <literal>19</literal></paragraph>
            <paragraph><reference name="S3TC" refuri="https://en.wikipedia.org/wiki/S3_Texture_Compression">S3TC</reference> 纹理格式也称为块压缩 3 或 BC3，其中包含 64 位的 Alpha 通道数据，后跟 64 位的 DXT1 编码颜色数据。颜色数据不会与 DXT3 预先乘以 Alpha。与 DXT3 相比，DXT5 对于透明渐变通常会产生更好的结果。</paragraph>
            <paragraph><strong>注意：</strong>创建 <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference> 时，会执行 sRGB 到线性色彩空间的转换。</paragraph>
            <target refid="class-image-constant-format-rgtc-r"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgtc-r" names="class_image_constant_format_rgtc_r"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGTC_R</strong> = <literal>20</literal></paragraph>
            <paragraph>使用<reference name="红绿贴图压缩" refuri="https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression">红绿贴图压缩</reference>的贴图格式，使用与 DXT5 用于 Alpha 通道相同的压缩算法对红色通道数据进行归一化。</paragraph>
            <target refid="class-image-constant-format-rgtc-rg"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-rgtc-rg" names="class_image_constant_format_rgtc_rg"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_RGTC_RG</strong> = <literal>21</literal></paragraph>
            <paragraph>使用<reference name="红绿贴图压缩" refuri="https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression">红绿贴图压缩</reference>的贴图格式，使用与 DXT5 用于 Alpha 的压缩算法相同的红绿数据通道。</paragraph>
            <target refid="class-image-constant-format-bptc-rgba"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-bptc-rgba" names="class_image_constant_format_bptc_rgba"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_BPTC_RGBA</strong> = <literal>22</literal></paragraph>
            <paragraph>使用 <reference name="BPTC压缩" refuri="https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression">BPTC压缩</reference> 和无符号归一化RGBA分量的贴图格式.</paragraph>
            <paragraph><strong>注意：</strong>创建 <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference> 时，会执行 sRGB 到线性色彩空间的转换。</paragraph>
            <target refid="class-image-constant-format-bptc-rgbf"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-bptc-rgbf" names="class_image_constant_format_bptc_rgbf"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_BPTC_RGBF</strong> = <literal>23</literal></paragraph>
            <paragraph>使用 <reference name="BPTC" refuri="https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression">BPTC</reference> 压缩和有符号浮点RGB分量的贴图格式.</paragraph>
            <target refid="class-image-constant-format-bptc-rgbfu"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-bptc-rgbfu" names="class_image_constant_format_bptc_rgbfu"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_BPTC_RGBFU</strong> = <literal>24</literal></paragraph>
            <paragraph>使用<reference name="BPTC" refuri="https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression">BPTC</reference> 压缩和无符号浮点RGB分量的贴图格式.</paragraph>
            <target refid="class-image-constant-format-etc"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-etc" names="class_image_constant_format_etc"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ETC</strong> = <literal>25</literal></paragraph>
            <paragraph><reference name="爱立信纹理压缩格式 1" refuri="https://zh.wikipedia.org/zh-cn/%E7%88%B1%E7%AB%8B%E4%BF%A1%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9#ETC1">爱立信纹理压缩格式 1</reference>，又称“ETC1”，是 OpenGL ES 图形标准的一部分。这种格式无法存储 Alpha 通道。</paragraph>
            <target refid="class-image-constant-format-etc2-r11"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-etc2-r11" names="class_image_constant_format_etc2_r11"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ETC2_R11</strong> = <literal>26</literal></paragraph>
            <paragraph><reference name="ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2" refuri="https://zh.wikipedia.org/zh-cn/%E7%88%B1%E7%AB%8B%E4%BF%A1%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9#[3">ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2</reference>（<literal>R11_EAC</literal> 变体），它提供一个无符号数据通道。</paragraph>
            <target refid="class-image-constant-format-etc2-r11s"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-etc2-r11s" names="class_image_constant_format_etc2_r11s"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ETC2_R11S</strong> = <literal>27</literal></paragraph>
            <paragraph><reference name="ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2" refuri="https://zh.wikipedia.org/zh-cn/%E7%88%B1%E7%AB%8B%E4%BF%A1%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9#[3">ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2</reference>（<literal>SIGNED_R11_EAC</literal> 变体），它提供一个有符号数据通道。</paragraph>
            <target refid="class-image-constant-format-etc2-rg11"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-etc2-rg11" names="class_image_constant_format_etc2_rg11"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ETC2_RG11</strong> = <literal>28</literal></paragraph>
            <paragraph><reference name="ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2" refuri="https://zh.wikipedia.org/zh-cn/%E7%88%B1%E7%AB%8B%E4%BF%A1%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9#[3">ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2</reference>（<literal>RG11_EAC</literal> 变体），它提供一个无符号数据通道。</paragraph>
            <target refid="class-image-constant-format-etc2-rg11s"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-etc2-rg11s" names="class_image_constant_format_etc2_rg11s"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ETC2_RG11S</strong> = <literal>29</literal></paragraph>
            <paragraph><reference name="ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2" refuri="https://zh.wikipedia.org/zh-cn/%E7%88%B1%E7%AB%8B%E4%BF%A1%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9#[3">ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2</reference>（<literal>SIGNED_RG11_EAC</literal> 变体），它提供两个有符号数据通道。</paragraph>
            <target refid="class-image-constant-format-etc2-rgb8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-etc2-rgb8" names="class_image_constant_format_etc2_rgb8"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ETC2_RGB8</strong> = <literal>30</literal></paragraph>
            <paragraph><reference name="ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2" refuri="https://zh.wikipedia.org/zh-cn/%E7%88%B1%E7%AB%8B%E4%BF%A1%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9#[3">ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2</reference>（<literal>RGB8</literal> 变体），它是 ETC1 的后续版本，可压缩 RGB888 数据。</paragraph>
            <paragraph><strong>注意：</strong>创建 <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference> 时，会执行 sRGB 到线性色彩空间的转换。</paragraph>
            <target refid="class-image-constant-format-etc2-rgba8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-etc2-rgba8" names="class_image_constant_format_etc2_rgba8"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ETC2_RGBA8</strong> = <literal>31</literal></paragraph>
            <paragraph><reference name="ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2" refuri="https://zh.wikipedia.org/zh-cn/%E7%88%B1%E7%AB%8B%E4%BF%A1%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9#[3">ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2</reference>（<literal>RGBA8</literal> 变体），它可以压缩 RGBA8888 数据，完全支持 Alpha。</paragraph>
            <paragraph><strong>注意：</strong>创建 <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference> 时，会执行 sRGB 到线性色彩空间的转换。</paragraph>
            <target refid="class-image-constant-format-etc2-rgb8a1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-etc2-rgb8a1" names="class_image_constant_format_etc2_rgb8a1"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ETC2_RGB8A1</strong> = <literal>32</literal></paragraph>
            <paragraph><reference name="ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2" refuri="https://zh.wikipedia.org/zh-cn/%E7%88%B1%E7%AB%8B%E4%BF%A1%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9#[3">ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2</reference>（<literal>RGB8_PUNCHTHROUGH_ALPHA1</literal> 变体），它可以压缩 RGBA 数据，使 Alpha 完全透明或完全不透明。</paragraph>
            <paragraph><strong>注意：</strong>创建 <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference> 时，会执行 sRGB 到线性色彩空间的转换。</paragraph>
            <target refid="class-image-constant-format-etc2-ra-as-rg"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-etc2-ra-as-rg" names="class_image_constant_format_etc2_ra_as_rg"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ETC2_RA_AS_RG</strong> = <literal>33</literal></paragraph>
            <paragraph><reference name="ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2" refuri="https://zh.wikipedia.org/zh-cn/%E7%88%B1%E7%AB%8B%E4%BF%A1%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9#[3">ETC2%E5%92%8CEAC]爱立信纹理压缩格式 2</reference>（<literal>RGBA8</literal> 变体），能够压缩 RA 数据，将其解释为两个通道（红和绿）。另见 <reference internal="True" refid="class-image-constant-format-etc2-rgba8"><inline classes="std std-ref">FORMAT_ETC2_RGBA8</inline></reference>。</paragraph>
            <target refid="class-image-constant-format-dxt5-ra-as-rg"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-dxt5-ra-as-rg" names="class_image_constant_format_dxt5_ra_as_rg"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_DXT5_RA_AS_RG</strong> = <literal>34</literal></paragraph>
            <paragraph><reference name="S3TC" refuri="https://en.wikipedia.org/wiki/S3_Texture_Compression">S3TC</reference> 纹理格式，也叫 Block Compression 3、BC3。能够压缩 RA 数据并将其解释为两个通道（红和绿）。另见 <reference internal="True" refid="class-image-constant-format-dxt5"><inline classes="std std-ref">FORMAT_DXT5</inline></reference>。</paragraph>
            <target refid="class-image-constant-format-astc-4x4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-astc-4x4" names="class_image_constant_format_astc_4x4"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ASTC_4x4</strong> = <literal>35</literal></paragraph>
            <paragraph><reference name="自适应可伸缩纹理压缩" refuri="https://zh.wikipedia.org/wiki/%E8%87%AA%E9%80%82%E5%BA%94%E5%8F%AF%E4%BC%B8%E7%BC%A9%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9">自适应可伸缩纹理压缩</reference>。这实现了 4×4（高质量）模式。</paragraph>
            <target refid="class-image-constant-format-astc-4x4-hdr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-astc-4x4-hdr" names="class_image_constant_format_astc_4x4_hdr"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ASTC_4x4_HDR</strong> = <literal>36</literal></paragraph>
            <paragraph>与 <reference internal="True" refid="class-image-constant-format-astc-4x4"><inline classes="std std-ref">FORMAT_ASTC_4x4</inline></reference> 相同的格式，但有提示以让 GPU 知道它用于 HDR。</paragraph>
            <target refid="class-image-constant-format-astc-8x8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-astc-8x8" names="class_image_constant_format_astc_8x8"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ASTC_8x8</strong> = <literal>37</literal></paragraph>
            <paragraph><reference name="自适应可伸缩纹理压缩" refuri="https://zh.wikipedia.org/wiki/%E8%87%AA%E9%80%82%E5%BA%94%E5%8F%AF%E4%BC%B8%E7%BC%A9%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9">自适应可伸缩纹理压缩</reference>。这实现了 8×8（低质量）模式。</paragraph>
            <target refid="class-image-constant-format-astc-8x8-hdr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-astc-8x8-hdr" names="class_image_constant_format_astc_8x8_hdr"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_ASTC_8x8_HDR</strong> = <literal>38</literal></paragraph>
            <paragraph>与 <reference internal="True" refid="class-image-constant-format-astc-8x8"><inline classes="std std-ref">FORMAT_ASTC_8x8</inline></reference> 相同的格式，但有提示以让 GPU 知道它用于 HDR。</paragraph>
            <target refid="class-image-constant-format-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-format-max" names="class_image_constant_format_max"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>FORMAT_MAX</strong> = <literal>39</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-image-interpolation"></target>
            <paragraph classes="classref-enumeration" ids="enum-image-interpolation" names="enum_image_interpolation">enum <strong>Interpolation</strong>: <reference internal="True" refid="enum-image-interpolation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-image-constant-interpolate-nearest"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-interpolate-nearest" names="class_image_constant_interpolate_nearest"><reference internal="True" refid="enum-image-interpolation"><inline classes="std std-ref">Interpolation</inline></reference> <strong>INTERPOLATE_NEAREST</strong> = <literal>0</literal></paragraph>
            <paragraph>执行最近邻插值。如果调整图像大小，它将被像素化。</paragraph>
            <target refid="class-image-constant-interpolate-bilinear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-interpolate-bilinear" names="class_image_constant_interpolate_bilinear"><reference internal="True" refid="enum-image-interpolation"><inline classes="std std-ref">Interpolation</inline></reference> <strong>INTERPOLATE_BILINEAR</strong> = <literal>1</literal></paragraph>
            <paragraph>执行双线性插值。如果调整图像大小，则图像将模糊。此模式比 <reference internal="True" refid="class-image-constant-interpolate-cubic"><inline classes="std std-ref">INTERPOLATE_CUBIC</inline></reference> 更快，但质量较低。</paragraph>
            <target refid="class-image-constant-interpolate-cubic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-interpolate-cubic" names="class_image_constant_interpolate_cubic"><reference internal="True" refid="enum-image-interpolation"><inline classes="std std-ref">Interpolation</inline></reference> <strong>INTERPOLATE_CUBIC</strong> = <literal>2</literal></paragraph>
            <paragraph>执行三次插值。如果调整图像大小，则图像将模糊。与 <reference internal="True" refid="class-image-constant-interpolate-bilinear"><inline classes="std std-ref">INTERPOLATE_BILINEAR</inline></reference> 相比，此模式通常会产生更好的结果，但代价是速度较慢。</paragraph>
            <target refid="class-image-constant-interpolate-trilinear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-interpolate-trilinear" names="class_image_constant_interpolate_trilinear"><reference internal="True" refid="enum-image-interpolation"><inline classes="std std-ref">Interpolation</inline></reference> <strong>INTERPOLATE_TRILINEAR</strong> = <literal>3</literal></paragraph>
            <paragraph>在两个最适合的多级渐远纹理级别上分别执行双线性采样，然后在采样结果之间进行线性插值。</paragraph>
            <paragraph>它比 <reference internal="True" refid="class-image-constant-interpolate-bilinear"><inline classes="std std-ref">INTERPOLATE_BILINEAR</inline></reference> 慢，但能产生更高质量的效果，减少锯齿伪影。</paragraph>
            <paragraph>如果图像没有多级渐远纹理，它们将被生成并在内部使用，但不会在生成的图像之上生成多级渐远纹理。</paragraph>
            <paragraph><strong>注意：</strong>如果你打算缩放原始图像的多个副本，最好事先对其调用 <reference internal="True" refid="class-image-method-generate-mipmaps"><inline classes="std std-ref">generate_mipmaps</inline></reference>，以避免在生成它们时反复浪费处理能力。</paragraph>
            <paragraph>另一方面，如果图像已经有了多级渐远纹理，其将被使用，并为生成的图像生成新的一组。</paragraph>
            <target refid="class-image-constant-interpolate-lanczos"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-interpolate-lanczos" names="class_image_constant_interpolate_lanczos"><reference internal="True" refid="enum-image-interpolation"><inline classes="std std-ref">Interpolation</inline></reference> <strong>INTERPOLATE_LANCZOS</strong> = <literal>4</literal></paragraph>
            <paragraph>执行 Lanczos 插值。这是最慢的图像调整大小模式，但通常可以提供最佳效果，尤其是在缩小图像时。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-image-alphamode"></target>
            <paragraph classes="classref-enumeration" ids="enum-image-alphamode" names="enum_image_alphamode">enum <strong>AlphaMode</strong>: <reference internal="True" refid="enum-image-alphamode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-image-constant-alpha-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-alpha-none" names="class_image_constant_alpha_none"><reference internal="True" refid="enum-image-alphamode"><inline classes="std std-ref">AlphaMode</inline></reference> <strong>ALPHA_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>图片没有 Alpha 通道。</paragraph>
            <target refid="class-image-constant-alpha-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-alpha-bit" names="class_image_constant_alpha_bit"><reference internal="True" refid="enum-image-alphamode"><inline classes="std std-ref">AlphaMode</inline></reference> <strong>ALPHA_BIT</strong> = <literal>1</literal></paragraph>
            <paragraph>图像将 Alpha 存储在单个 bit 中。</paragraph>
            <target refid="class-image-constant-alpha-blend"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-alpha-blend" names="class_image_constant_alpha_blend"><reference internal="True" refid="enum-image-alphamode"><inline classes="std std-ref">AlphaMode</inline></reference> <strong>ALPHA_BLEND</strong> = <literal>2</literal></paragraph>
            <paragraph>图像使用 Alpha。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-image-compressmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-image-compressmode" names="enum_image_compressmode">enum <strong>CompressMode</strong>: <reference internal="True" refid="enum-image-compressmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-image-constant-compress-s3tc"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-compress-s3tc" names="class_image_constant_compress_s3tc"><reference internal="True" refid="enum-image-compressmode"><inline classes="std std-ref">CompressMode</inline></reference> <strong>COMPRESS_S3TC</strong> = <literal>0</literal></paragraph>
            <paragraph>使用 S3TC 压缩。</paragraph>
            <target refid="class-image-constant-compress-etc"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-compress-etc" names="class_image_constant_compress_etc"><reference internal="True" refid="enum-image-compressmode"><inline classes="std std-ref">CompressMode</inline></reference> <strong>COMPRESS_ETC</strong> = <literal>1</literal></paragraph>
            <paragraph>使用 ETC 压缩。</paragraph>
            <target refid="class-image-constant-compress-etc2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-compress-etc2" names="class_image_constant_compress_etc2"><reference internal="True" refid="enum-image-compressmode"><inline classes="std std-ref">CompressMode</inline></reference> <strong>COMPRESS_ETC2</strong> = <literal>2</literal></paragraph>
            <paragraph>使用 ETC2 压缩。</paragraph>
            <target refid="class-image-constant-compress-bptc"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-compress-bptc" names="class_image_constant_compress_bptc"><reference internal="True" refid="enum-image-compressmode"><inline classes="std std-ref">CompressMode</inline></reference> <strong>COMPRESS_BPTC</strong> = <literal>3</literal></paragraph>
            <paragraph>使用 BPTC 压缩。</paragraph>
            <target refid="class-image-constant-compress-astc"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-compress-astc" names="class_image_constant_compress_astc"><reference internal="True" refid="enum-image-compressmode"><inline classes="std std-ref">CompressMode</inline></reference> <strong>COMPRESS_ASTC</strong> = <literal>4</literal></paragraph>
            <paragraph>使用 ASTC 压缩。</paragraph>
            <target refid="class-image-constant-compress-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-compress-max" names="class_image_constant_compress_max"><reference internal="True" refid="enum-image-compressmode"><inline classes="std std-ref">CompressMode</inline></reference> <strong>COMPRESS_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-image-compressmode"><inline classes="std std-ref">CompressMode</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-image-usedchannels"></target>
            <paragraph classes="classref-enumeration" ids="enum-image-usedchannels" names="enum_image_usedchannels">enum <strong>UsedChannels</strong>: <reference internal="True" refid="enum-image-usedchannels"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-image-constant-used-channels-l"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-used-channels-l" names="class_image_constant_used_channels_l"><reference internal="True" refid="enum-image-usedchannels"><inline classes="std std-ref">UsedChannels</inline></reference> <strong>USED_CHANNELS_L</strong> = <literal>0</literal></paragraph>
            <paragraph>该图像仅使用一个通道表示亮度（灰度图）。</paragraph>
            <target refid="class-image-constant-used-channels-la"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-used-channels-la" names="class_image_constant_used_channels_la"><reference internal="True" refid="enum-image-usedchannels"><inline classes="std std-ref">UsedChannels</inline></reference> <strong>USED_CHANNELS_LA</strong> = <literal>1</literal></paragraph>
            <paragraph>该图像使用两个通道，分别表示亮度和 Alpha。</paragraph>
            <target refid="class-image-constant-used-channels-r"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-used-channels-r" names="class_image_constant_used_channels_r"><reference internal="True" refid="enum-image-usedchannels"><inline classes="std std-ref">UsedChannels</inline></reference> <strong>USED_CHANNELS_R</strong> = <literal>2</literal></paragraph>
            <paragraph>该图像仅使用红色通道。</paragraph>
            <target refid="class-image-constant-used-channels-rg"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-used-channels-rg" names="class_image_constant_used_channels_rg"><reference internal="True" refid="enum-image-usedchannels"><inline classes="std std-ref">UsedChannels</inline></reference> <strong>USED_CHANNELS_RG</strong> = <literal>3</literal></paragraph>
            <paragraph>该图像使用红色和绿色两个通道。</paragraph>
            <target refid="class-image-constant-used-channels-rgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-used-channels-rgb" names="class_image_constant_used_channels_rgb"><reference internal="True" refid="enum-image-usedchannels"><inline classes="std std-ref">UsedChannels</inline></reference> <strong>USED_CHANNELS_RGB</strong> = <literal>4</literal></paragraph>
            <paragraph>该图像使用红、绿、蓝三个通道。</paragraph>
            <target refid="class-image-constant-used-channels-rgba"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-used-channels-rgba" names="class_image_constant_used_channels_rgba"><reference internal="True" refid="enum-image-usedchannels"><inline classes="std std-ref">UsedChannels</inline></reference> <strong>USED_CHANNELS_RGBA</strong> = <literal>5</literal></paragraph>
            <paragraph>该图像使用红色、绿色、蓝色和 Alpha 四个通道。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-image-compresssource"></target>
            <paragraph classes="classref-enumeration" ids="enum-image-compresssource" names="enum_image_compresssource">enum <strong>CompressSource</strong>: <reference internal="True" refid="enum-image-compresssource"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-image-constant-compress-source-generic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-compress-source-generic" names="class_image_constant_compress_source_generic"><reference internal="True" refid="enum-image-compresssource"><inline classes="std std-ref">CompressSource</inline></reference> <strong>COMPRESS_SOURCE_GENERIC</strong> = <literal>0</literal></paragraph>
            <paragraph>原始纹理（在压缩前）是常规纹理。所有纹理的默认值。</paragraph>
            <target refid="class-image-constant-compress-source-srgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-compress-source-srgb" names="class_image_constant_compress_source_srgb"><reference internal="True" refid="enum-image-compresssource"><inline classes="std std-ref">CompressSource</inline></reference> <strong>COMPRESS_SOURCE_SRGB</strong> = <literal>1</literal></paragraph>
            <paragraph>原始纹理（在压缩前）使用 sRGB 空间。</paragraph>
            <target refid="class-image-constant-compress-source-normal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-compress-source-normal" names="class_image_constant_compress_source_normal"><reference internal="True" refid="enum-image-compresssource"><inline classes="std std-ref">CompressSource</inline></reference> <strong>COMPRESS_SOURCE_NORMAL</strong> = <literal>2</literal></paragraph>
            <paragraph>原始纹理（在压缩前）是法线纹理（例如可以压缩为两个通道）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-image-astcformat"></target>
            <paragraph classes="classref-enumeration" ids="enum-image-astcformat" names="enum_image_astcformat">enum <strong>ASTCFormat</strong>: <reference internal="True" refid="enum-image-astcformat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-image-constant-astc-format-4x4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-astc-format-4x4" names="class_image_constant_astc_format_4x4"><reference internal="True" refid="enum-image-astcformat"><inline classes="std std-ref">ASTCFormat</inline></reference> <strong>ASTC_FORMAT_4x4</strong> = <literal>0</literal></paragraph>
            <paragraph>表示应该使用高质量 4×4 ASTC 压缩格式的提示。</paragraph>
            <target refid="class-image-constant-astc-format-8x8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-image-constant-astc-format-8x8" names="class_image_constant_astc_format_8x8"><reference internal="True" refid="enum-image-astcformat"><inline classes="std std-ref">ASTCFormat</inline></reference> <strong>ASTC_FORMAT_8x8</strong> = <literal>1</literal></paragraph>
            <paragraph>表示应该使用低质量 8×8 ASTC 压缩格式的提示。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="常量">
            <title>常量</title>
            <target refid="class-image-constant-max-width"></target>
            <paragraph classes="classref-constant" ids="class-image-constant-max-width" names="class_image_constant_max_width"><strong>MAX_WIDTH</strong> = <literal>16777216</literal> <reference internal="True" refid="class-image-constant-max-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Image</strong> 资源允许的最大宽度。</paragraph>
            <target refid="class-image-constant-max-height"></target>
            <paragraph classes="classref-constant" ids="class-image-constant-max-height" names="class_image_constant_max_height"><strong>MAX_HEIGHT</strong> = <literal>16777216</literal> <reference internal="True" refid="class-image-constant-max-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Image</strong> 资源允许的最大高度。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-image-property-data"></target>
            <paragraph classes="classref-property" ids="class-image-property-data" names="class_image_property_data"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>data</strong> = <literal>{ "data": PackedByteArray(), "format": "Lum8", "height": 0, "mipmaps": false, "width": 0 }</literal> <reference internal="True" refid="class-image-property-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以给定的格式保存图像的所有颜色数据。参阅 <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> 常量。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-image-method-adjust-bcs"></target>
            <paragraph classes="classref-method" ids="class-image-method-adjust-bcs" names="class_image_method_adjust_bcs"><abbreviation explanation="无返回值。">void</abbreviation> <strong>adjust_bcs</strong>(brightness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, contrast: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, saturation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-image-method-adjust-bcs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <literal>brightness</literal> 调整图像的亮度，使用 <literal>contrast</literal> 调整图像的对比度，使用 <literal>saturation</literal> 调整图像的饱和度。对压缩图像无效（见 <reference internal="True" refid="class-image-method-is-compressed"><inline classes="std std-ref">is_compressed</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-blend-rect"></target>
            <paragraph classes="classref-method" ids="class-image-method-blend-rect" names="class_image_method_blend_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>blend_rect</strong>(src: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, dst: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-image-method-blend-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>src</literal> 图像上的 <literal>src_rect</literal> 与该图像的坐标 <literal>dst</literal> 处进行 Alpha 混合，将根据两个图像的边界进行裁剪。该图像和 <literal>src</literal> 图像<strong>必须</strong>具有相同的格式。具有非正大小的 <literal>src_rect</literal> 将被视为空。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-blend-rect-mask"></target>
            <paragraph classes="classref-method" ids="class-image-method-blend-rect-mask" names="class_image_method_blend_rect_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>blend_rect_mask</strong>(src: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, mask: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, dst: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-image-method-blend-rect-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用遮罩图 <literal>mask</literal>，将源图像 <literal>src</literal> 中的 <literal>src_rect</literal> 区域的图像，Alpha 混合到本图像从坐标 <literal>dst</literal> 起的区域，会根据两者的图像区域进行裁剪。<literal>src</literal> 和 <literal>mask</literal> 都需要有 Alpha 通道。如果遮罩图 mask 上某个像素的 Alpha 值非 0，则相应的 <literal>dst</literal> 的像素和 <literal>src</literal> 的像素将混合。这张图像和 <literal>src</literal> 图像的格式<strong>必须</strong>一致。<literal>src</literal> 图像和 <literal>mask</literal> 图像的大小（宽度和高度）<strong>必须</strong>相同，格式可以不同。<literal>src_rect</literal> 的大小如果非正，则会作为空矩形处理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-blit-rect"></target>
            <paragraph classes="classref-method" ids="class-image-method-blit-rect" names="class_image_method_blit_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>blit_rect</strong>(src: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, dst: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-image-method-blit-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>src</literal> 图像上的 <literal>src_rect</literal> 复制到该图像的坐标 <literal>dst</literal> 处，并根据两个图像边界进行裁剪。该图像和 <literal>src</literal> 图像<strong>必须</strong>具有相同的格式。具有非正大小的 <literal>src_rect</literal> 将被视为空矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-blit-rect-mask"></target>
            <paragraph classes="classref-method" ids="class-image-method-blit-rect-mask" names="class_image_method_blit_rect_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>blit_rect_mask</strong>(src: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, mask: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, dst: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-image-method-blit-rect-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将源图像 <literal>src</literal> 上的矩形区域 <literal>src_rect</literal> 复制到本图像从坐标 <literal>dst</literal> 起的区域，会根据两者的图像区域进行裁剪。如果遮罩图 <literal>mask</literal> 上某个像素的 Alpha 值非 0，就会把 <literal>src</literal> 上对应的像素复制到 <literal>dst</literal> 上。这张图像和 <literal>src</literal> 图像的格式<strong>必须</strong>一致。<literal>src</literal> 图像和 <literal>mask</literal> 图像的大小（宽度和高度）<strong>必须</strong>相同，格式可以不同。<literal>src_rect</literal> 的大小如果非正，则会作为空矩形处理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-bump-map-to-normal-map"></target>
            <paragraph classes="classref-method" ids="class-image-method-bump-map-to-normal-map" names="class_image_method_bump_map_to_normal_map"><abbreviation explanation="无返回值。">void</abbreviation> <strong>bump_map_to_normal_map</strong>(bump_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0) <reference internal="True" refid="class-image-method-bump-map-to-normal-map"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将凹凸贴图转换为法线贴图。凹凸贴图提供每个像素的高度偏移，而法线贴图提供每个像素的法线方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-clear-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-image-method-clear-mipmaps" names="class_image_method_clear_mipmaps"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_mipmaps</strong>() <reference internal="True" refid="class-image-method-clear-mipmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除图像的多级渐远纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-compress"></target>
            <paragraph classes="classref-method" ids="class-image-method-compress" names="class_image_method_compress"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>compress</strong>(mode: <reference internal="True" refid="enum-image-compressmode"><inline classes="std std-ref">CompressMode</inline></reference>, source: <reference internal="True" refid="enum-image-compresssource"><inline classes="std std-ref">CompressSource</inline></reference> = 0, astc_format: <reference internal="True" refid="enum-image-astcformat"><inline classes="std std-ref">ASTCFormat</inline></reference> = 0) <reference internal="True" refid="class-image-method-compress"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>压缩图像以减少内存的使用。当图像被压缩时，不能直接访问像素数据。如果选择的压缩模式不可用，则返回错误。</paragraph>
            <paragraph><literal>source</literal> 参数有助于为 DXT 和 ETC2 格式选择最佳压缩方法。对于 ASTC 压缩，它会被忽略。</paragraph>
            <paragraph>对于 ASTC 压缩，必须提供 <literal>astc_format</literal> 参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-compress-from-channels"></target>
            <paragraph classes="classref-method" ids="class-image-method-compress-from-channels" names="class_image_method_compress_from_channels"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>compress_from_channels</strong>(mode: <reference internal="True" refid="enum-image-compressmode"><inline classes="std std-ref">CompressMode</inline></reference>, channels: <reference internal="True" refid="enum-image-usedchannels"><inline classes="std std-ref">UsedChannels</inline></reference>, astc_format: <reference internal="True" refid="enum-image-astcformat"><inline classes="std std-ref">ASTCFormat</inline></reference> = 0) <reference internal="True" refid="class-image-method-compress-from-channels"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>压缩图像以减少内存的使用。当图像被压缩时，不能直接访问像素数据。如果选择的压缩模式不可用，则返回错误。</paragraph>
            <paragraph>这是 <reference internal="True" refid="class-image-method-compress"><inline classes="std std-ref">compress</inline></reference> 的一种替代方法，允许用户提供使用的通道，以便压缩器选择最佳的 DXT 和 ETC2 格式。对于其他格式（非 DXT 或 ETC2），将忽略此参数。</paragraph>
            <paragraph>对于 ASTC 压缩，必须提供 <literal>astc_format</literal> 参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-compute-image-metrics"></target>
            <paragraph classes="classref-method" ids="class-image-method-compute-image-metrics" names="class_image_method_compute_image_metrics"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>compute_image_metrics</strong>(compared_image: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>, use_luma: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-image-method-compute-image-metrics"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在当前图像和被比较图像上，计算图像指标。</paragraph>
            <paragraph>该字典包含 <literal>max</literal>、<literal>mean</literal>、<literal>mean_squared</literal>、<literal>root_mean_squared</literal> 和 <literal>peak_snr</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-convert"></target>
            <paragraph classes="classref-method" ids="class-image-method-convert" names="class_image_method_convert"><abbreviation explanation="无返回值。">void</abbreviation> <strong>convert</strong>(format: <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference>) <reference internal="True" refid="class-image-method-convert"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>转换图像的格式。请参阅 <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-copy-from"></target>
            <paragraph classes="classref-method" ids="class-image-method-copy-from" names="class_image_method_copy_from"><abbreviation explanation="无返回值。">void</abbreviation> <strong>copy_from</strong>(src: <reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference>) <reference internal="True" refid="class-image-method-copy-from"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将源图像 <literal>src</literal> 复制到本图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-create"></target>
            <paragraph classes="classref-method" ids="class-image-method-create" names="class_image_method_create"><reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference> <strong>create</strong>(width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, use_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, format: <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-image-method-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refid="class-image-method-create-empty"><inline classes="std std-ref">create_empty</inline></reference>.</paragraph>
            <paragraph>创建一个给定大小和格式的空图像。请参阅 <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> 常量。如果 <literal>use_mipmaps</literal> 为 <literal>true</literal>，则为该图像生成 Mipmaps。请参阅 <reference internal="True" refid="class-image-method-generate-mipmaps"><inline classes="std std-ref">generate_mipmaps</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-create-empty"></target>
            <paragraph classes="classref-method" ids="class-image-method-create-empty" names="class_image_method_create_empty"><reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference> <strong>create_empty</strong>(width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, use_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, format: <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-image-method-create-empty"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个给定大小和格式的空图像。请参阅 <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> 常量。如果 <literal>use_mipmaps</literal> 为 <literal>true</literal>，则为该图像生成 Mipmaps。请参阅 <reference internal="True" refid="class-image-method-generate-mipmaps"><inline classes="std std-ref">generate_mipmaps</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-create-from-data"></target>
            <paragraph classes="classref-method" ids="class-image-method-create-from-data" names="class_image_method_create_from_data"><reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference> <strong>create_from_data</strong>(width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, use_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, format: <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-image-method-create-from-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个给定大小和格式的新图像。请参阅 <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> 常量。用给定的原始数据填充图像。如果 <literal>use_mipmaps</literal> 为 <literal>true</literal>，则从 <literal>data</literal> 为该图像加载 Mipmaps。请参阅 <reference internal="True" refid="class-image-method-generate-mipmaps"><inline classes="std std-ref">generate_mipmaps</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-crop"></target>
            <paragraph classes="classref-method" ids="class-image-method-crop" names="class_image_method_crop"><abbreviation explanation="无返回值。">void</abbreviation> <strong>crop</strong>(width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-image-method-crop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该图像裁剪成给定的 <literal>width</literal> 和 <literal>height</literal>。如果指定的大小大于当前大小，则额外的区域用黑色像素填充。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-decompress"></target>
            <paragraph classes="classref-method" ids="class-image-method-decompress" names="class_image_method_decompress"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>decompress</strong>() <reference internal="True" refid="class-image-method-decompress"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果图像是以一个支持的格式压缩的 VRAM，则解压缩该图像。如果该格式受支持，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，否则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-unavailable"><inline classes="std std-ref">@GlobalScope.ERR_UNAVAILABLE</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>可以解压的格式有：DXT、RGTC、BPTC。不支持 ETC1 和 ETC2 格式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-detect-alpha"></target>
            <paragraph classes="classref-method" ids="class-image-method-detect-alpha" names="class_image_method_detect_alpha"><reference internal="True" refid="enum-image-alphamode"><inline classes="std std-ref">AlphaMode</inline></reference> <strong>detect_alpha</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-detect-alpha"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果图像有 Alpha 值的数据，则返回 <reference internal="True" refid="class-image-constant-alpha-blend"><inline classes="std std-ref">ALPHA_BLEND</inline></reference>。如果所有的 Alpha 值都存储在一个位上，则返回 <reference internal="True" refid="class-image-constant-alpha-bit"><inline classes="std std-ref">ALPHA_BIT</inline></reference>。如果没有找到 Alpha 值的数据，则返回 <reference internal="True" refid="class-image-constant-alpha-none"><inline classes="std std-ref">ALPHA_NONE</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-detect-used-channels"></target>
            <paragraph classes="classref-method" ids="class-image-method-detect-used-channels" names="class_image_method_detect_used_channels"><reference internal="True" refid="enum-image-usedchannels"><inline classes="std std-ref">UsedChannels</inline></reference> <strong>detect_used_channels</strong>(source: <reference internal="True" refid="enum-image-compresssource"><inline classes="std std-ref">CompressSource</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-detect-used-channels"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回某个 <reference internal="True" refid="enum-image-usedchannels"><inline classes="std std-ref">UsedChannels</inline></reference> 常量，表示该图像所使用的颜色通道。如果为压缩图像，则必须使用 <literal>source</literal> 指定原始图像的属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-fill"></target>
            <paragraph classes="classref-method" ids="class-image-method-fill" names="class_image_method_fill"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fill</strong>(color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-image-method-fill"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用颜色 <literal>color</literal> 填充图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-fill-rect"></target>
            <paragraph classes="classref-method" ids="class-image-method-fill-rect" names="class_image_method_fill_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fill_rect</strong>(rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-image-method-fill-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用颜色 <literal>color</literal> 填充矩形 <literal>rect</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-fix-alpha-edges"></target>
            <paragraph classes="classref-method" ids="class-image-method-fix-alpha-edges" names="class_image_method_fix_alpha_edges"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fix_alpha_edges</strong>() <reference internal="True" refid="class-image-method-fix-alpha-edges"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 Alpha 较低的像素与附近像素混合。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-flip-x"></target>
            <paragraph classes="classref-method" ids="class-image-method-flip-x" names="class_image_method_flip_x"><abbreviation explanation="无返回值。">void</abbreviation> <strong>flip_x</strong>() <reference internal="True" refid="class-image-method-flip-x"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>水平翻转图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-flip-y"></target>
            <paragraph classes="classref-method" ids="class-image-method-flip-y" names="class_image_method_flip_y"><abbreviation explanation="无返回值。">void</abbreviation> <strong>flip_y</strong>() <reference internal="True" refid="class-image-method-flip-y"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>垂直翻转图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-generate-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-image-method-generate-mipmaps" names="class_image_method_generate_mipmaps"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>generate_mipmaps</strong>(renormalize: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-image-method-generate-mipmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为图像生成多级渐远纹理（Mipmap）。多级渐远纹理是预先计算好的图像的低分辨率副本，如果图像在渲染时需要按比例缩小，则会自动使用这些副本。它们有助于在渲染时提高图像质量和性能。如果图像被压缩，或采用自定义格式，或图像的宽度或高度为 <literal>0</literal>，则该方法返回错误。在为法线纹理生成多级渐远纹理时启用 <literal>renormalize</literal> 能够确保得到的所有向量值都是归一化的。</paragraph>
            <paragraph>调用 <reference internal="True" refid="class-image-method-has-mipmaps"><inline classes="std std-ref">has_mipmaps</inline></reference> 或 <reference internal="True" refid="class-image-method-get-mipmap-count"><inline classes="std std-ref">get_mipmap_count</inline></reference> 能够检查图像是否使用多级渐远纹理。在已拥有多级渐远纹理的图像上调用 <reference internal="True" refid="class-image-method-generate-mipmaps"><inline classes="std std-ref">generate_mipmaps</inline></reference> 将替换该图像中已有的多级渐远纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-get-data"></target>
            <paragraph classes="classref-method" ids="class-image-method-get-data" names="class_image_method_get_data"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_data</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-get-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回图像原始数据的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-get-data-size"></target>
            <paragraph classes="classref-method" ids="class-image-method-get-data-size" names="class_image_method_get_data_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_data_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-get-data-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns size (in bytes) of the image's raw data.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-get-format"></target>
            <paragraph classes="classref-method" ids="class-image-method-get-format" names="class_image_method_get_format"><reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>get_format</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-get-format"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回图像的格式。参阅 <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-get-height"></target>
            <paragraph classes="classref-method" ids="class-image-method-get-height" names="class_image_method_get_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_height</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-get-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回图像的高度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-get-mipmap-count"></target>
            <paragraph classes="classref-method" ids="class-image-method-get-mipmap-count" names="class_image_method_get_mipmap_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_mipmap_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-get-mipmap-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回多级渐远纹理级别数；如果该图像没有多级渐远纹理，则返回 0。该方法不会将最大的主要级别图像计为一个多级渐远纹理级别，因此如果你想将其包括在内，可以在该计数中加 1。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-get-mipmap-offset"></target>
            <paragraph classes="classref-method" ids="class-image-method-get-mipmap-offset" names="class_image_method_get_mipmap_offset"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_mipmap_offset</strong>(mipmap: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-get-mipmap-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回存储在图像的 <reference internal="True" refid="class-image-property-data"><inline classes="std std-ref">data</inline></reference> 字典中的索引为 <literal>mipmap</literal> 的多级渐远纹理的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-get-pixel"></target>
            <paragraph classes="classref-method" ids="class-image-method-get-pixel" names="class_image_method_get_pixel"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_pixel</strong>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-get-pixel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>(x, y)</literal> 处的像素的颜色。</paragraph>
            <paragraph>这与 <reference internal="True" refid="class-image-method-get-pixelv"><inline classes="std std-ref">get_pixelv</inline></reference> 相同，但使用两个整数参数而不是一个 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> 参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-get-pixelv"></target>
            <paragraph classes="classref-method" ids="class-image-method-get-pixelv" names="class_image_method_get_pixelv"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_pixelv</strong>(point: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-get-pixelv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>point</literal> 处像素的颜色。</paragraph>
            <paragraph>这与 <reference internal="True" refid="class-image-method-get-pixel"><inline classes="std std-ref">get_pixel</inline></reference> 相同，只是用一个 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> 参数代替了两个整数参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-get-region"></target>
            <paragraph classes="classref-method" ids="class-image-method-get-region" names="class_image_method_get_region"><reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference> <strong>get_region</strong>(region: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-get-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个新的 <strong>Image</strong>，它是使用 <literal>region</literal> 指定的该 <strong>Image</strong> 区域的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-get-size"></target>
            <paragraph classes="classref-method" ids="class-image-method-get-size" names="class_image_method_get_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-get-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回图像的大小（宽度和高度）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-get-used-rect"></target>
            <paragraph classes="classref-method" ids="class-image-method-get-used-rect" names="class_image_method_get_used_rect"><reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> <strong>get_used_rect</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-get-used-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个包含该图像可见部分的 <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>，将具有非零 alpha 通道的每个像素视为可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-get-width"></target>
            <paragraph classes="classref-method" ids="class-image-method-get-width" names="class_image_method_get_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_width</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-get-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回图像的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-has-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-image-method-has-mipmaps" names="class_image_method_has_mipmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_mipmaps</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-has-mipmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果图像已经生成多级渐远纹理，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-is-compressed"></target>
            <paragraph classes="classref-method" ids="class-image-method-is-compressed" names="class_image_method_is_compressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_compressed</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-is-compressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果图像被压缩，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-is-empty"></target>
            <paragraph classes="classref-method" ids="class-image-method-is-empty" names="class_image_method_is_empty"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_empty</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-is-empty"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果图像没有数据，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-is-invisible"></target>
            <paragraph classes="classref-method" ids="class-image-method-is-invisible" names="class_image_method_is_invisible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_invisible</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-is-invisible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果图像中所有像素的 Alpha 都是 0，则返回 <literal>true</literal>。如果有任何像素的 Alpha 高于 0，则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-load"></target>
            <paragraph classes="classref-method" ids="class-image-method-load" names="class_image_method_load"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-image-method-load"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从文件 <literal>path</literal> 加载图像。有关支持的图像格式的列表和限制，请参阅<reference name="支持的图像格式" refuri="../tutorials/assets_pipeline/importing_images.html#supported-image-formats">支持的图像格式</reference>。</paragraph>
            <paragraph><strong>警告：</strong>该方法只能用于编辑器，或需要在运行时加载外部图像的情况，例如位于 <literal>user://</literal> 目录的图像，并且可能不适用于导出的项目。</paragraph>
            <paragraph>另请参阅 <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference> 说明，以获取使用示例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-load-bmp-from-buffer"></target>
            <paragraph classes="classref-method" ids="class-image-method-load-bmp-from-buffer" names="class_image_method_load_bmp_from_buffer"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_bmp_from_buffer</strong>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-image-method-load-bmp-from-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 BMP 文件的二进制内容加载图像。</paragraph>
            <paragraph><strong>注意：</strong>Godot 的 BMP 模块不支持每像素 16 位的图像。仅支持每像素 1 位、4 位、8 位、24 位和 32 位的图像。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在启用了 BMP 模块的引擎版本中可用。默认情况下，BMP 模块是启用的，但可以在构建时使用 <literal>module_bmp_enabled=no</literal> SCons 选项禁用它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-load-from-file"></target>
            <paragraph classes="classref-method" ids="class-image-method-load-from-file" names="class_image_method_load_from_file"><reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference> <strong>load_from_file</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-image-method-load-from-file"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个新的 <strong>Image</strong> 并从指定文件加载数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-load-jpg-from-buffer"></target>
            <paragraph classes="classref-method" ids="class-image-method-load-jpg-from-buffer" names="class_image_method_load_jpg_from_buffer"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_jpg_from_buffer</strong>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-image-method-load-jpg-from-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 JPEG 文件的二进制内容加载图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-load-ktx-from-buffer"></target>
            <paragraph classes="classref-method" ids="class-image-method-load-ktx-from-buffer" names="class_image_method_load_ktx_from_buffer"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_ktx_from_buffer</strong>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-image-method-load-ktx-from-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 <reference name="KTX" refuri="https://github.com/KhronosGroup/KTX-Software">KTX</reference> 文件的二进制内容加载图像。与大多数图像格式不同，KTX 可以存储 VRAM 压缩数据并嵌入 mipmap。</paragraph>
            <paragraph><strong>注意：</strong>Godot 的 libktx 实现仅支持 2D 图像。不支持立方体贴图、纹理数组和去填充。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在启用了 KTX 模块的引擎版本中可用。默认情况下，KTX 模块是启用的，但可以在构建时使用 <literal>module_ktx_enabled=no</literal> SCons 选项禁用它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-load-png-from-buffer"></target>
            <paragraph classes="classref-method" ids="class-image-method-load-png-from-buffer" names="class_image_method_load_png_from_buffer"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_png_from_buffer</strong>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-image-method-load-png-from-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 PNG 文件的二进制内容加载图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-load-svg-from-buffer"></target>
            <paragraph classes="classref-method" ids="class-image-method-load-svg-from-buffer" names="class_image_method_load_svg_from_buffer"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_svg_from_buffer</strong>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0) <reference internal="True" refid="class-image-method-load-svg-from-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从<strong>未压缩</strong> SVG 文件（<strong>.svg</strong>）的 UTF-8 二进制内容加载图像。</paragraph>
            <paragraph><strong>注意：</strong>使用压缩的 SVG 文件（如 <strong>.svgz</strong>）时请注意，在加载之前需要对其进行 <literal>decompressed</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在启用了 SVG 模块的引擎版本中可用。默认情况下，SVG 模块是启用的，但可以在构建时使用 <literal>module_svg_enabled=no</literal> SCons 选项禁用它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-load-svg-from-string"></target>
            <paragraph classes="classref-method" ids="class-image-method-load-svg-from-string" names="class_image_method_load_svg_from_string"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_svg_from_string</strong>(svg_str: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0) <reference internal="True" refid="class-image-method-load-svg-from-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 SVG 文件（<strong>.svg</strong>）的字符串内容加载图像。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在启用了 SVG 模块的引擎版本中可用。SVG 模块默认是启用的，但可以在构建时使用 <literal>module_svg_enabled=no</literal> SCons 选项禁用它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-load-tga-from-buffer"></target>
            <paragraph classes="classref-method" ids="class-image-method-load-tga-from-buffer" names="class_image_method_load_tga_from_buffer"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_tga_from_buffer</strong>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-image-method-load-tga-from-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 TGA 文件的二进制内容加载图像。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在启用了 TGA 模块的引擎版本中可用。默认情况下，TGA 模块是启用的，但可以在构建时使用 <literal>module_tga_enabled=no</literal> SCons 选项禁用它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-load-webp-from-buffer"></target>
            <paragraph classes="classref-method" ids="class-image-method-load-webp-from-buffer" names="class_image_method_load_webp_from_buffer"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_webp_from_buffer</strong>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-image-method-load-webp-from-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 WebP 文件的二进制内容加载图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-normal-map-to-xy"></target>
            <paragraph classes="classref-method" ids="class-image-method-normal-map-to-xy" names="class_image_method_normal_map_to_xy"><abbreviation explanation="无返回值。">void</abbreviation> <strong>normal_map_to_xy</strong>() <reference internal="True" refid="class-image-method-normal-map-to-xy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>转换图像的数据以表示 3D 平面上的坐标。可以在该图像表示法线贴图时使用。法线贴图可以在不增加多边形数量的情况下向 3D 表面添加大量细节。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-premultiply-alpha"></target>
            <paragraph classes="classref-method" ids="class-image-method-premultiply-alpha" names="class_image_method_premultiply_alpha"><abbreviation explanation="无返回值。">void</abbreviation> <strong>premultiply_alpha</strong>() <reference internal="True" refid="class-image-method-premultiply-alpha"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将颜色值与 Alpha 值相乘。像素的最终颜色值为 <literal>(color * alpha)/256</literal>。另见 <reference internal="True" refuri="class_canvasitemmaterial#class-canvasitemmaterial-property-blend-mode"><inline classes="std std-ref">CanvasItemMaterial.blend_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-resize"></target>
            <paragraph classes="classref-method" ids="class-image-method-resize" names="class_image_method_resize"><abbreviation explanation="无返回值。">void</abbreviation> <strong>resize</strong>(width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, interpolation: <reference internal="True" refid="enum-image-interpolation"><inline classes="std std-ref">Interpolation</inline></reference> = 1) <reference internal="True" refid="class-image-method-resize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该图像的宽度调整为 <literal>width</literal>、高度调整为 <literal>height</literal>。新的像素使用 <literal>interpolation</literal> 插值模式计算，插值模式由 <reference internal="True" refid="enum-image-interpolation"><inline classes="std std-ref">Interpolation</inline></reference> 常量定义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-resize-to-po2"></target>
            <paragraph classes="classref-method" ids="class-image-method-resize-to-po2" names="class_image_method_resize_to_po2"><abbreviation explanation="无返回值。">void</abbreviation> <strong>resize_to_po2</strong>(square: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, interpolation: <reference internal="True" refid="enum-image-interpolation"><inline classes="std std-ref">Interpolation</inline></reference> = 1) <reference internal="True" refid="class-image-method-resize-to-po2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将图像的宽度和高度调整为最接近的 2 的幂。如果 <literal>square</literal> 为 <literal>true</literal>，则将宽度和高度设置为相同。新像素将通过使用 <reference internal="True" refid="enum-image-interpolation"><inline classes="std std-ref">Interpolation</inline></reference> 常量定义的 <literal>interpolation</literal> 模式计算。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-rgbe-to-srgb"></target>
            <paragraph classes="classref-method" ids="class-image-method-rgbe-to-srgb" names="class_image_method_rgbe_to_srgb"><reference internal="True" refid="class-image"><inline classes="std std-ref">Image</inline></reference> <strong>rgbe_to_srgb</strong>() <reference internal="True" refid="class-image-method-rgbe-to-srgb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将标准 RGBE（红绿蓝指数）图像转换为 sRGB 图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-rotate-90"></target>
            <paragraph classes="classref-method" ids="class-image-method-rotate-90" names="class_image_method_rotate_90"><abbreviation explanation="无返回值。">void</abbreviation> <strong>rotate_90</strong>(direction: <reference internal="True" refuri="class_@globalscope#enum-globalscope-clockdirection"><inline classes="std std-ref">ClockDirection</inline></reference>) <reference internal="True" refid="class-image-method-rotate-90"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该图像按照 <literal>direction</literal> 指定的方向旋转 <literal>90</literal> 度。该图像的宽度和高度必须大于 <literal>1</literal>。如果宽和高不相等，则会调整图像的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-rotate-180"></target>
            <paragraph classes="classref-method" ids="class-image-method-rotate-180" names="class_image_method_rotate_180"><abbreviation explanation="无返回值。">void</abbreviation> <strong>rotate_180</strong>() <reference internal="True" refid="class-image-method-rotate-180"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该图像旋转 <literal>180</literal> 度。该图像的宽度和高度必须大于 <literal>1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-save-exr"></target>
            <paragraph classes="classref-method" ids="class-image-method-save-exr" names="class_image_method_save_exr"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>save_exr</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, grayscale: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-save-exr"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将图像作为 EXR 文件保存到 <literal>path</literal>。如果 <literal>grayscale</literal> 为 <literal>true</literal>，并且图像只有一个通道，它将被明确地保存为单色而不是一个红色通道。如果 Godot 是在没有 TinyEXR 模块的情况下编译的，则该函数将返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-unavailable"><inline classes="std std-ref">@GlobalScope.ERR_UNAVAILABLE</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>TinyEXR 模块在非编辑器构建中被禁用，这意味着当 <reference internal="True" refid="class-image-method-save-exr"><inline classes="std std-ref">save_exr</inline></reference> 从导出的项目中被调用时将返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-unavailable"><inline classes="std std-ref">@GlobalScope.ERR_UNAVAILABLE</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-save-exr-to-buffer"></target>
            <paragraph classes="classref-method" ids="class-image-method-save-exr-to-buffer" names="class_image_method_save_exr_to_buffer"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>save_exr_to_buffer</strong>(grayscale: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-save-exr-to-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将图像作为 EXR 文件保存到一个字节数组。如果 <literal>grayscale</literal> 为 <literal>true</literal> 并且图像只有一个通道，它将被明确地保存为单色而不是一个红色通道。如果 Godot 是在没有 TinyEXR 模块的情况下编译的，则该函数将返回一个空字节数组。</paragraph>
            <paragraph><strong>注意：</strong>TinyEXR 模块在非编辑器构建中被禁用，这意味着当 <reference internal="True" refid="class-image-method-save-exr"><inline classes="std std-ref">save_exr</inline></reference> 从导出的项目中被调用时将返回一个空字节数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-save-jpg"></target>
            <paragraph classes="classref-method" ids="class-image-method-save-jpg" names="class_image_method_save_jpg"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>save_jpg</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, quality: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.75) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-save-jpg"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该图像作为 JPEG 文件保存到 <literal>path</literal>，指定的 <literal>quality</literal> 介于 <literal>0.01</literal> 和 <literal>1.0</literal>（包括）之间。更高的 <literal>quality</literal> 值会以更大的文件大小为代价产生更好看的输出。推荐的 <literal>quality</literal> 值介于 <literal>0.75</literal> 和 <literal>0.90</literal> 之间。即使质量为 <literal>1.00</literal>，JPEG 压缩仍然是有损的。</paragraph>
            <paragraph><strong>注意：</strong>JPEG 不保存 alpha 通道。如果该 <strong>Image</strong> 包含 alpha 通道，该图像仍将被保存，但产生的 JPEG 文件将不包含 alpha 通道。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-save-jpg-to-buffer"></target>
            <paragraph classes="classref-method" ids="class-image-method-save-jpg-to-buffer" names="class_image_method_save_jpg_to_buffer"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>save_jpg_to_buffer</strong>(quality: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.75) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-save-jpg-to-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该图像作为 JPEG 文件保存到字节数组中，指定的 <literal>quality</literal> 介于 <literal>0.01</literal> 和 <literal>1.0</literal>（包括）之间。更高的 <literal>quality</literal> 值会以更大的字节数组大小（以及因此的内存使用）为代价产生更好看的输出。推荐的 <literal>quality</literal> 值介于 <literal>0.75</literal> 和 <literal>0.90</literal> 之间。即使质量为 <literal>1.00</literal>，JPEG 压缩仍然是有损的。</paragraph>
            <paragraph><strong>注意：</strong>JPEG 不保存 alpha 通道。如果该 <strong>Image</strong> 包含 alpha 通道，该图像仍将被保存，但产生的字节数组将不包含 alpha 通道。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-save-png"></target>
            <paragraph classes="classref-method" ids="class-image-method-save-png" names="class_image_method_save_png"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>save_png</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-save-png"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该图像作为 PNG 文件保存到位于 <literal>path</literal> 的文件中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-save-png-to-buffer"></target>
            <paragraph classes="classref-method" ids="class-image-method-save-png-to-buffer" names="class_image_method_save_png_to_buffer"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>save_png_to_buffer</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-save-png-to-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该图像作为 PNG 文件保存到字节数组中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-save-webp"></target>
            <paragraph classes="classref-method" ids="class-image-method-save-webp" names="class_image_method_save_webp"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>save_webp</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, lossy: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, quality: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.75) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-save-webp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该图像作为 WebP（Web 图片）文件保存到 <literal>path</literal> 中的文件中。默认情况下，它将无损保存。如果 <literal>lossy</literal> 为真，则该图像将使用介于 0.0 和 1.0（包含）之间的 <literal>quality</literal> 设置进行有损保存。无损 WebP 提供比 PNG 更有效的压缩。</paragraph>
            <paragraph><strong>注意：</strong>WebP 格式的大小限制为 16383×16383 像素，而 PNG 可以保存更大的图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-save-webp-to-buffer"></target>
            <paragraph classes="classref-method" ids="class-image-method-save-webp-to-buffer" names="class_image_method_save_webp_to_buffer"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>save_webp_to_buffer</strong>(lossy: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, quality: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.75) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-image-method-save-webp-to-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该图像作为 WebP（Web 图片）文件保存到字节数组中。默认情况下，它将无损保存。如果 <literal>lossy</literal> 为真，则该图像将使用介于 0.0 和 1.0（包含）之间的 <literal>quality</literal> 设置进行有损保存。无损 WebP 提供比 PNG 更有效的压缩。</paragraph>
            <paragraph><strong>注意：</strong>WebP 格式的大小限制为 16383×16383 像素，而 PNG 可以保存更大的图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-set-data"></target>
            <paragraph classes="classref-method" ids="class-image-method-set-data" names="class_image_method_set_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_data</strong>(width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, height: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, use_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, format: <reference internal="True" refid="enum-image-format"><inline classes="std std-ref">Format</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-image-method-set-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖现有 <strong>Image</strong> 的数据。<reference internal="True" refid="class-image-method-create-from-data"><inline classes="std std-ref">create_from_data</inline></reference> 的非静态等价物。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-set-pixel"></target>
            <paragraph classes="classref-method" ids="class-image-method-set-pixel" names="class_image_method_set_pixel"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pixel</strong>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-image-method-set-pixel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>(x, y)</literal> 处像素的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 设置为 <literal>color</literal>。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var img_width = 10
var img_height = 5
var img = Image.create(img_width, img_height, false, Image.FORMAT_RGBA8)

img.set_pixel(1, 2, Color.RED) # 将 (1, 2) 处的颜色设置为红色。</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">int imgWidth = 10;
int imgHeight = 5;
var img = Image.Create(imgWidth, imgHeight, false, Image.Format.Rgba8);

img.SetPixel(1, 2, Colors.Red); // 将 (1, 2) 处的颜色设置为红色。</literal_block>
                </div>
            </container>
            <paragraph>这与 <reference internal="True" refid="class-image-method-set-pixelv"><inline classes="std std-ref">set_pixelv</inline></reference> 相同，只是使用两个整数参数而不是一个 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> 参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-set-pixelv"></target>
            <paragraph classes="classref-method" ids="class-image-method-set-pixelv" names="class_image_method_set_pixelv"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pixelv</strong>(point: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-image-method-set-pixelv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>point</literal> 处像素的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 设置为 <literal>color</literal>。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var img_width = 10
var img_height = 5
var img = Image.create(img_width, img_height, false, Image.FORMAT_RGBA8)

img.set_pixelv(Vector2i(1, 2), Color.RED) # 将 (1, 2) 处的颜色设置为红色。</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">int imgWidth = 10;
int imgHeight = 5;
var img = Image.Create(imgWidth, imgHeight, false, Image.Format.Rgba8);

img.SetPixelv(new Vector2I(1, 2), Colors.Red); // 将 (1, 2) 处的颜色设置为红色。</literal_block>
                </div>
            </container>
            <paragraph>这与 <reference internal="True" refid="class-image-method-set-pixel"><inline classes="std std-ref">set_pixel</inline></reference> 相同，只是使用一个 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> 参数而不是两个整数参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-shrink-x2"></target>
            <paragraph classes="classref-method" ids="class-image-method-shrink-x2" names="class_image_method_shrink_x2"><abbreviation explanation="无返回值。">void</abbreviation> <strong>shrink_x2</strong>() <reference internal="True" refid="class-image-method-shrink-x2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在每个轴上将图像缩小 2 倍（这会将像素数除以 4）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-image-method-srgb-to-linear"></target>
            <paragraph classes="classref-method" ids="class-image-method-srgb-to-linear" names="class_image_method_srgb_to_linear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>srgb_to_linear</strong>() <reference internal="True" refid="class-image-method-srgb-to-linear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将原始数据从 sRGB 色彩空间转换为线性比例。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
