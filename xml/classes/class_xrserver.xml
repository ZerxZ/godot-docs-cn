<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_xrserver.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/XRServer.xml.</comment>
    <target refid="class-xrserver"></target>
    <section ids="xrserver class-xrserver" names="xrserver class_xrserver">
        <title>XRServer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于 AR 和 VR 功能的服务器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>AR/VR 服务器是我们“高级虚拟现实”解决方案的核心，负责执行所有处理。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/xr/index"><inline classes="doc">XR 文档索引</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="69"></colspec>
                    <colspec colwidth="53"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-property-primary-interface"><inline classes="std std-ref">primary_interface</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-property-world-origin"><inline classes="std std-ref">world_origin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-property-world-scale"><inline classes="std std-ref">world_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="169"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-add-interface"><inline classes="std std-ref">add_interface</inline></reference>(interface: <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-add-tracker"><inline classes="std std-ref">add_tracker</inline></reference>(tracker: <reference internal="True" refuri="class_xrtracker#class-xrtracker"><inline classes="std std-ref">XRTracker</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-center-on-hmd"><inline classes="std std-ref">center_on_hmd</inline></reference>(rotation_mode: <reference internal="True" refid="enum-xrserver-rotationmode"><inline classes="std std-ref">RotationMode</inline></reference>, keep_height: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-clear-reference-frame"><inline classes="std std-ref">clear_reference_frame</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-find-interface"><inline classes="std std-ref">find_interface</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-get-hmd-transform"><inline classes="std std-ref">get_hmd_transform</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-get-interface"><inline classes="std std-ref">get_interface</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-get-interface-count"><inline classes="std std-ref">get_interface_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-get-interfaces"><inline classes="std std-ref">get_interfaces</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-get-reference-frame"><inline classes="std std-ref">get_reference_frame</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_xrtracker#class-xrtracker"><inline classes="std std-ref">XRTracker</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-get-tracker"><inline classes="std std-ref">get_tracker</inline></reference>(tracker_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-get-trackers"><inline classes="std std-ref">get_trackers</inline></reference>(tracker_types: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-remove-interface"><inline classes="std std-ref">remove_interface</inline></reference>(interface: <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrserver-method-remove-tracker"><inline classes="std std-ref">remove_tracker</inline></reference>(tracker: <reference internal="True" refuri="class_xrtracker#class-xrtracker"><inline classes="std std-ref">XRTracker</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-xrserver-signal-interface-added"></target>
            <paragraph classes="classref-signal" ids="class-xrserver-signal-interface-added" names="class_xrserver_signal_interface_added"><strong>interface_added</strong>(interface_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-xrserver-signal-interface-added"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加新接口时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-signal-interface-removed"></target>
            <paragraph classes="classref-signal" ids="class-xrserver-signal-interface-removed" names="class_xrserver_signal_interface_removed"><strong>interface_removed</strong>(interface_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-xrserver-signal-interface-removed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当接口被移除时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-signal-reference-frame-changed"></target>
            <paragraph classes="classref-signal" ids="class-xrserver-signal-reference-frame-changed" names="class_xrserver_signal_reference_frame_changed"><strong>reference_frame_changed</strong>() <reference internal="True" refid="class-xrserver-signal-reference-frame-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当参考帧变换更改时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-signal-tracker-added"></target>
            <paragraph classes="classref-signal" ids="class-xrserver-signal-tracker-added" names="class_xrserver_signal_tracker_added"><strong>tracker_added</strong>(tracker_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-xrserver-signal-tracker-added"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当一个新的追踪器被添加时发出。如果你不使用一个固定数量的控制器，或者如果你将 <reference internal="True" refuri="class_xranchor3d#class-xranchor3d"><inline classes="std std-ref">XRAnchor3D</inline></reference> 用于一个 AR 解决方案，请务必对此信号做出反应，以添加与该新追踪器相适的 <reference internal="True" refuri="class_xrcontroller3d#class-xrcontroller3d"><inline classes="std std-ref">XRController3D</inline></reference> 或 <reference internal="True" refuri="class_xranchor3d#class-xranchor3d"><inline classes="std std-ref">XRAnchor3D</inline></reference> 节点 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-signal-tracker-removed"></target>
            <paragraph classes="classref-signal" ids="class-xrserver-signal-tracker-removed" names="class_xrserver_signal_tracker_removed"><strong>tracker_removed</strong>(tracker_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-xrserver-signal-tracker-removed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当一个追踪器被移除时发出。如此，你应该移除任何 <reference internal="True" refuri="class_xrcontroller3d#class-xrcontroller3d"><inline classes="std std-ref">XRController3D</inline></reference> 或 <reference internal="True" refuri="class_xranchor3d#class-xranchor3d"><inline classes="std std-ref">XRAnchor3D</inline></reference> 点。这不是强制性的，这些节点只是变得不活动，并且当一个新的追踪器可用时，将再次激活（即打开一个新的控制器，来代替前一个控制器）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-signal-tracker-updated"></target>
            <paragraph classes="classref-signal" ids="class-xrserver-signal-tracker-updated" names="class_xrserver_signal_tracker_updated"><strong>tracker_updated</strong>(tracker_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-xrserver-signal-tracker-updated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当现有追踪器被更新时发出。如果用户切换控制器，则可能会发生这种情况。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-xrserver-trackertype"></target>
            <paragraph classes="classref-enumeration" ids="enum-xrserver-trackertype" names="enum_xrserver_trackertype">enum <strong>TrackerType</strong>: <reference internal="True" refid="enum-xrserver-trackertype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-xrserver-constant-tracker-head"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-tracker-head" names="class_xrserver_constant_tracker_head"><reference internal="True" refid="enum-xrserver-trackertype"><inline classes="std std-ref">TrackerType</inline></reference> <strong>TRACKER_HEAD</strong> = <literal>1</literal></paragraph>
            <paragraph>追踪器追踪玩家头部的位置。这通常是玩家眼睛之间的中心位置。请注意，对于手持式 AR 设备，这可能是该设备的当前位置。</paragraph>
            <target refid="class-xrserver-constant-tracker-controller"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-tracker-controller" names="class_xrserver_constant_tracker_controller"><reference internal="True" refid="enum-xrserver-trackertype"><inline classes="std std-ref">TrackerType</inline></reference> <strong>TRACKER_CONTROLLER</strong> = <literal>2</literal></paragraph>
            <paragraph>追踪器追踪控制器的位置。</paragraph>
            <target refid="class-xrserver-constant-tracker-basestation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-tracker-basestation" names="class_xrserver_constant_tracker_basestation"><reference internal="True" refid="enum-xrserver-trackertype"><inline classes="std std-ref">TrackerType</inline></reference> <strong>TRACKER_BASESTATION</strong> = <literal>4</literal></paragraph>
            <paragraph>追踪器追踪基站的位置。</paragraph>
            <target refid="class-xrserver-constant-tracker-anchor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-tracker-anchor" names="class_xrserver_constant_tracker_anchor"><reference internal="True" refid="enum-xrserver-trackertype"><inline classes="std std-ref">TrackerType</inline></reference> <strong>TRACKER_ANCHOR</strong> = <literal>8</literal></paragraph>
            <paragraph>追踪器追踪 AR 锚的位置和大小。</paragraph>
            <target refid="class-xrserver-constant-tracker-hand"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-tracker-hand" names="class_xrserver_constant_tracker_hand"><reference internal="True" refid="enum-xrserver-trackertype"><inline classes="std std-ref">TrackerType</inline></reference> <strong>TRACKER_HAND</strong> = <literal>16</literal></paragraph>
            <paragraph>追踪器追踪手部的位置和关节。</paragraph>
            <target refid="class-xrserver-constant-tracker-body"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-tracker-body" names="class_xrserver_constant_tracker_body"><reference internal="True" refid="enum-xrserver-trackertype"><inline classes="std std-ref">TrackerType</inline></reference> <strong>TRACKER_BODY</strong> = <literal>32</literal></paragraph>
            <paragraph>追踪器追踪身体的位置和关节。</paragraph>
            <target refid="class-xrserver-constant-tracker-face"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-tracker-face" names="class_xrserver_constant_tracker_face"><reference internal="True" refid="enum-xrserver-trackertype"><inline classes="std std-ref">TrackerType</inline></reference> <strong>TRACKER_FACE</strong> = <literal>64</literal></paragraph>
            <paragraph>追踪器追踪面部的表情。</paragraph>
            <target refid="class-xrserver-constant-tracker-any-known"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-tracker-any-known" names="class_xrserver_constant_tracker_any_known"><reference internal="True" refid="enum-xrserver-trackertype"><inline classes="std std-ref">TrackerType</inline></reference> <strong>TRACKER_ANY_KNOWN</strong> = <literal>127</literal></paragraph>
            <paragraph>内部用于过滤任何已知类型的跟踪器。</paragraph>
            <target refid="class-xrserver-constant-tracker-unknown"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-tracker-unknown" names="class_xrserver_constant_tracker_unknown"><reference internal="True" refid="enum-xrserver-trackertype"><inline classes="std std-ref">TrackerType</inline></reference> <strong>TRACKER_UNKNOWN</strong> = <literal>128</literal></paragraph>
            <paragraph>如果我们尚未设置跟踪器类型，则在内部使用。</paragraph>
            <target refid="class-xrserver-constant-tracker-any"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-tracker-any" names="class_xrserver_constant_tracker_any"><reference internal="True" refid="enum-xrserver-trackertype"><inline classes="std std-ref">TrackerType</inline></reference> <strong>TRACKER_ANY</strong> = <literal>255</literal></paragraph>
            <paragraph>在内部用于选择所有跟踪器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-xrserver-rotationmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-xrserver-rotationmode" names="enum_xrserver_rotationmode">enum <strong>RotationMode</strong>: <reference internal="True" refid="enum-xrserver-rotationmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-xrserver-constant-reset-full-rotation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-reset-full-rotation" names="class_xrserver_constant_reset_full_rotation"><reference internal="True" refid="enum-xrserver-rotationmode"><inline classes="std std-ref">RotationMode</inline></reference> <strong>RESET_FULL_ROTATION</strong> = <literal>0</literal></paragraph>
            <paragraph>完全重置 HMD 的方向。无论用户在现实世界中看向哪个方向。将在虚拟世界中锁定视角。</paragraph>
            <target refid="class-xrserver-constant-reset-but-keep-tilt"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-reset-but-keep-tilt" names="class_xrserver_constant_reset_but_keep_tilt"><reference internal="True" refid="enum-xrserver-rotationmode"><inline classes="std std-ref">RotationMode</inline></reference> <strong>RESET_BUT_KEEP_TILT</strong> = <literal>1</literal></paragraph>
            <paragraph>重置方向，但保持设备的倾斜度。因此，如果我们正在往下看，会继续往下看，但航向会被重置。</paragraph>
            <target refid="class-xrserver-constant-dont-reset-rotation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrserver-constant-dont-reset-rotation" names="class_xrserver_constant_dont_reset_rotation"><reference internal="True" refid="enum-xrserver-rotationmode"><inline classes="std std-ref">RotationMode</inline></reference> <strong>DONT_RESET_ROTATION</strong> = <literal>2</literal></paragraph>
            <paragraph>不重置 HMD 的方向，只让玩家的位置居中。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-xrserver-property-primary-interface"></target>
            <paragraph classes="classref-property" ids="class-xrserver-property-primary-interface" names="class_xrserver_property_primary_interface"><reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference> <strong>primary_interface</strong> <reference internal="True" refid="class-xrserver-property-primary-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_primary_interface</strong>(value: <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference> <strong>get_primary_interface</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前绑定到 <strong>XRServer</strong> 的主 <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-property-world-origin"></target>
            <paragraph classes="classref-property" ids="class-xrserver-property-world-origin" names="class_xrserver_property_world_origin"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>world_origin</strong> = <literal>Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)</literal> <reference internal="True" refid="class-xrserver-property-world-origin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_world_origin</strong>(value: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>get_world_origin</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>我们的跟踪空间在虚拟世界中的原点。渲染器会用到这个信息，根据新的跟踪数据来正确放置相机。</paragraph>
            <paragraph><strong>注意：</strong>这个属性由当前的 <reference internal="True" refuri="class_xrorigin3d#class-xrorigin3d"><inline classes="std std-ref">XROrigin3D</inline></reference> 节点管理。暴露的目的是方便在 GDExtension 使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-property-world-scale"></target>
            <paragraph classes="classref-property" ids="class-xrserver-property-world-scale" names="class_xrserver_property_world_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>world_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-xrserver-property-world-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_world_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_world_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>游戏世界相对于现实世界的缩放。默认情况下，大多数 AR/VR 平台假定 1 个游戏世界单位等于现实世界的 1 米。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-xrserver-method-add-interface"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-add-interface" names="class_xrserver_method_add_interface"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_interface</strong>(interface: <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference>) <reference internal="True" refid="class-xrserver-method-add-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册一个 <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference> 对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-add-tracker"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-add-tracker" names="class_xrserver_method_add_tracker"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_tracker</strong>(tracker: <reference internal="True" refuri="class_xrtracker#class-xrtracker"><inline classes="std std-ref">XRTracker</inline></reference>) <reference internal="True" refid="class-xrserver-method-add-tracker"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册一个跟踪物理对象的新 <reference internal="True" refuri="class_xrtracker#class-xrtracker"><inline classes="std std-ref">XRTracker</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-center-on-hmd"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-center-on-hmd" names="class_xrserver_method_center_on_hmd"><abbreviation explanation="无返回值。">void</abbreviation> <strong>center_on_hmd</strong>(rotation_mode: <reference internal="True" refid="enum-xrserver-rotationmode"><inline classes="std std-ref">RotationMode</inline></reference>, keep_height: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-xrserver-method-center-on-hmd"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>正确地理解这个函数非常重要。AR 和 VR 平台处理定位的方式略有不同。</paragraph>
            <paragraph>对于不提供空间跟踪的平台，我们的原点 (0,0,0) 是 HMD 的位置，但你几乎无法控制玩家在现实世界中面对的方向。</paragraph>
            <paragraph>对于提供空间跟踪的平台，我们的原点在很大程度上取决于系统。对于 OpenVR，原点通常是地面上跟踪空间的中心。对于其他平台，它通常是跟踪相机的位置。</paragraph>
            <paragraph>此方法允许你将跟踪器置于 HMD 的位置。它将获取 HMD 的当前位置并使用它来调整你的所有跟踪数据；从本质上讲，将现实世界重新调整到玩家在游戏世界中的当前位置。</paragraph>
            <paragraph>为了使这种方法产生可用的结果，跟踪信息必须可用。这通常在开始游戏后需要几帧。</paragraph>
            <paragraph>你应该在几秒钟后调用此方法。例如，当用户请求重新调整显示时，按住控制器上的指定按钮一小段时间，或者当实现传送机制时。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-clear-reference-frame"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-clear-reference-frame" names="class_xrserver_method_clear_reference_frame"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_reference_frame</strong>() <reference internal="True" refid="class-xrserver-method-clear-reference-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除之前调用 <reference internal="True" refid="class-xrserver-method-center-on-hmd"><inline classes="std std-ref">center_on_hmd</inline></reference> 设置的参考帧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-find-interface"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-find-interface" names="class_xrserver_method_find_interface"><reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference> <strong>find_interface</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrserver-method-find-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过名称 <literal>name</literal> 查找接口。例如，如果你的项目使用 AR/VR 平台的功能，你可以通过名称找到该平台的接口并初始化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-get-hmd-transform"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-get-hmd-transform" names="class_xrserver_method_get_hmd_transform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>get_hmd_transform</strong>() <reference internal="True" refid="class-xrserver-method-get-hmd-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回主接口的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-get-interface"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-get-interface" names="class_xrserver_method_get_interface"><reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference> <strong>get_interface</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrserver-method-get-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在接口列表中给定 <literal>idx</literal> 索引处注册的接口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-get-interface-count"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-get-interface-count" names="class_xrserver_method_get_interface_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_interface_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrserver-method-get-interface-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前在 AR/VR 服务器上注册的接口数量。如果你的项目支持多个AR/VR平台，你可以查看可用的接口，并向用户展示一个选择，或者简单地尝试初始化每个接口，并使用第一个返回 <literal>true</literal> 的接口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-get-interfaces"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-get-interfaces" names="class_xrserver_method_get_interfaces"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>get_interfaces</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrserver-method-get-interfaces"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回可用接口的列表，每个接口的 ID 和名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-get-reference-frame"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-get-reference-frame" names="class_xrserver_method_get_reference_frame"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>get_reference_frame</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrserver-method-get-reference-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回引用帧的变换。主要在内部使用，并公开以用于 GDExtension 构建接口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-get-tracker"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-get-tracker" names="class_xrserver_method_get_tracker"><reference internal="True" refuri="class_xrtracker#class-xrtracker"><inline classes="std std-ref">XRTracker</inline></reference> <strong>get_tracker</strong>(tracker_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrserver-method-get-tracker"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定 <literal>tracker_name</literal> 的位置追踪器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-get-trackers"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-get-trackers" names="class_xrserver_method_get_trackers"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_trackers</strong>(tracker_types: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-xrserver-method-get-trackers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>tracker_types</literal> 的追踪器字典。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-remove-interface"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-remove-interface" names="class_xrserver_method_remove_interface"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_interface</strong>(interface: <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference>) <reference internal="True" refid="class-xrserver-method-remove-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除该 <literal>interface</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrserver-method-remove-tracker"></target>
            <paragraph classes="classref-method" ids="class-xrserver-method-remove-tracker" names="class_xrserver_method_remove_tracker"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_tracker</strong>(tracker: <reference internal="True" refuri="class_xrtracker#class-xrtracker"><inline classes="std std-ref">XRTracker</inline></reference>) <reference internal="True" refid="class-xrserver-method-remove-tracker"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除该 <literal>tracker</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
