<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_texture3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Texture3D.xml.</comment>
    <target refid="class-texture3d"></target>
    <section ids="texture3d class-texture3d" names="texture3d class_texture3d">
        <title>Texture3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_texture#class-texture"><inline classes="std std-ref">Texture</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_compressedtexture3d#class-compressedtexture3d"><inline classes="std std-ref">CompressedTexture3D</inline></reference>, <reference internal="True" refuri="class_imagetexture3d#class-imagetexture3d"><inline classes="std std-ref">ImageTexture3D</inline></reference>, <reference internal="True" refuri="class_noisetexture3d#class-noisetexture3d"><inline classes="std std-ref">NoiseTexture3D</inline></reference>, <reference internal="True" refuri="class_placeholdertexture3d#class-placeholdertexture3d"><inline classes="std std-ref">PlaceholderTexture3D</inline></reference>, <reference internal="True" refuri="class_texture3drd#class-texture3drd"><inline classes="std std-ref">Texture3DRD</inline></reference></paragraph>
        <paragraph>3D 纹理的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><reference internal="True" refuri="class_imagetexture3d#class-imagetexture3d"><inline classes="std std-ref">ImageTexture3D</inline></reference> 和 <reference internal="True" refuri="class_compressedtexture3d#class-compressedtexture3d"><inline classes="std std-ref">CompressedTexture3D</inline></reference> 的基类。无法直接使用，但包含所有访问派生资源类型所需的函数。<strong>Texture3D</strong> 是所有三维纹理类型的基类。另见 <reference internal="True" refuri="class_texturelayered#class-texturelayered"><inline classes="std std-ref">TextureLayered</inline></reference>。</paragraph>
            <paragraph>所有图像都需要有相同的宽度、高度和 mipmap 层数。</paragraph>
            <paragraph>要自己创建这样的纹理文件，请使用 Godot 编辑器的导入预设重新导入你的图像文件。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="34"></colspec>
                    <colspec colwidth="96"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-private-method-get-data"><inline classes="std std-ref">_get_data</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-private-method-get-depth"><inline classes="std std-ref">_get_depth</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-private-method-get-format"><inline classes="std std-ref">_get_format</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-private-method-get-height"><inline classes="std std-ref">_get_height</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-private-method-get-width"><inline classes="std std-ref">_get_width</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-private-method-has-mipmaps"><inline classes="std std-ref">_has_mipmaps</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-method-create-placeholder"><inline classes="std std-ref">create_placeholder</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-method-get-data"><inline classes="std std-ref">get_data</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-method-get-depth"><inline classes="std std-ref">get_depth</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-method-get-format"><inline classes="std std-ref">get_format</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-method-get-height"><inline classes="std std-ref">get_height</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-method-get-width"><inline classes="std std-ref">get_width</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture3d-method-has-mipmaps"><inline classes="std std-ref">has_mipmaps</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-texture3d-private-method-get-data"></target>
            <paragraph classes="classref-method" ids="class-texture3d-private-method-get-data" names="class_texture3d_private_method__get_data"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image[]</inline></reference> <strong>_get_data</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>查询该 <strong>Texture3D</strong> 的数据时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture3d-private-method-get-depth"></target>
            <paragraph classes="classref-method" ids="class-texture3d-private-method-get-depth" names="class_texture3d_private_method__get_depth"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_depth</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>查询该 <strong>Texture3D</strong> 的深度时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture3d-private-method-get-format"></target>
            <paragraph classes="classref-method" ids="class-texture3d-private-method-get-format" names="class_texture3d_private_method__get_format"><reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>_get_format</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>查询该 <strong>Texture3D</strong> 的格式时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture3d-private-method-get-height"></target>
            <paragraph classes="classref-method" ids="class-texture3d-private-method-get-height" names="class_texture3d_private_method__get_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_height</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>查询该 <strong>Texture3D</strong> 的高度时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture3d-private-method-get-width"></target>
            <paragraph classes="classref-method" ids="class-texture3d-private-method-get-width" names="class_texture3d_private_method__get_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_width</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>查询该 <strong>Texture3D</strong> 的宽度时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture3d-private-method-has-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-texture3d-private-method-has-mipmaps" names="class_texture3d_private_method__has_mipmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_mipmaps</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>查询该 <strong>Texture3D</strong> 的 Mipmap 是否存在时被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture3d-method-create-placeholder"></target>
            <paragraph classes="classref-method" ids="class-texture3d-method-create-placeholder" names="class_texture3d_method_create_placeholder"><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>create_placeholder</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>创建该资源的占位符版本（<reference internal="True" refuri="class_placeholdertexture3d#class-placeholdertexture3d"><inline classes="std std-ref">PlaceholderTexture3D</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture3d-method-get-data"></target>
            <paragraph classes="classref-method" ids="class-texture3d-method-get-data" names="class_texture3d_method_get_data"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image[]</inline></reference> <strong>get_data</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>将该 <strong>Texture3D</strong> 的数据作为 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 数组返回。每个 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 代表该 <strong>Texture3D</strong> 的一个<emphasis>切片</emphasis>，不同的切片映射到不同的深度（Z 轴）级别。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture3d-method-get-depth"></target>
            <paragraph classes="classref-method" ids="class-texture3d-method-get-depth" names="class_texture3d_method_get_depth"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_depth</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该 <strong>Texture3D</strong> 的深度，单位为像素。深度通常由 Z 轴表示（<reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 中没有这个维度）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture3d-method-get-format"></target>
            <paragraph classes="classref-method" ids="class-texture3d-method-get-format" names="class_texture3d_method_get_format"><reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>get_format</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回纹理当前使用的格式。详情见 <reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture3d-method-get-height"></target>
            <paragraph classes="classref-method" ids="class-texture3d-method-get-height" names="class_texture3d_method_get_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_height</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该 <strong>Texture3D</strong> 的高度，单位为像素。宽度通常由 Y 轴表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture3d-method-get-width"></target>
            <paragraph classes="classref-method" ids="class-texture3d-method-get-width" names="class_texture3d_method_get_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_width</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该 <strong>Texture3D</strong> 的宽度，单位为像素。宽度通常由 X 轴表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture3d-method-has-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-texture3d-method-has-mipmaps" names="class_texture3d_method_has_mipmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_mipmaps</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该 <strong>Texture3D</strong> 已生成 mipmap，则返回 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
