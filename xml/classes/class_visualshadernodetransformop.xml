<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_visualshadernodetransformop.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/VisualShaderNodeTransformOp.xml.</comment>
    <target refid="class-visualshadernodetransformop"></target>
    <section ids="visualshadernodetransformop class-visualshadernodetransformop" names="visualshadernodetransformop class_visualshadernodetransformop">
        <title>VisualShaderNodeTransformOp</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>在可视化着色器图中使用的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> 运算符。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>对两个变换（4×4 矩阵）输入应用 <reference internal="True" refid="class-visualshadernodetransformop-property-operator"><inline classes="std std-ref">operator</inline></reference>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="60"></colspec>
                    <colspec colwidth="70"></colspec>
                    <colspec colwidth="7"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodetransformop-property-operator"><inline classes="std std-ref">operator</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-visualshadernodetransformop-operator"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodetransformop-operator" names="enum_visualshadernodetransformop_operator">enum <strong>Operator</strong>: <reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-visualshadernodetransformop-constant-op-axb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetransformop-constant-op-axb" names="class_visualshadernodetransformop_constant_op_axb"><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> <strong>OP_AxB</strong> = <literal>0</literal></paragraph>
            <paragraph>将变换 <literal>a</literal> 乘以变换 <literal>b</literal>。</paragraph>
            <target refid="class-visualshadernodetransformop-constant-op-bxa"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetransformop-constant-op-bxa" names="class_visualshadernodetransformop_constant_op_bxa"><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> <strong>OP_BxA</strong> = <literal>1</literal></paragraph>
            <paragraph>将变换 <literal>b</literal> 乘以变换 <literal>a</literal>。</paragraph>
            <target refid="class-visualshadernodetransformop-constant-op-axb-comp"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetransformop-constant-op-axb-comp" names="class_visualshadernodetransformop_constant_op_axb_comp"><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> <strong>OP_AxB_COMP</strong> = <literal>2</literal></paragraph>
            <paragraph>对变换 <literal>a</literal> 与变换 <literal>b</literal> 进行分量明智的乘法。</paragraph>
            <target refid="class-visualshadernodetransformop-constant-op-bxa-comp"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetransformop-constant-op-bxa-comp" names="class_visualshadernodetransformop_constant_op_bxa_comp"><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> <strong>OP_BxA_COMP</strong> = <literal>3</literal></paragraph>
            <paragraph>对变换 <literal>b</literal> 与变换 <literal>a</literal> 进行分量明智的乘法。</paragraph>
            <target refid="class-visualshadernodetransformop-constant-op-add"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetransformop-constant-op-add" names="class_visualshadernodetransformop_constant_op_add"><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> <strong>OP_ADD</strong> = <literal>4</literal></paragraph>
            <paragraph>将两个变换相加。</paragraph>
            <target refid="class-visualshadernodetransformop-constant-op-a-minus-b"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetransformop-constant-op-a-minus-b" names="class_visualshadernodetransformop_constant_op_a_minus_b"><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> <strong>OP_A_MINUS_B</strong> = <literal>5</literal></paragraph>
            <paragraph>从变换 <literal>b</literal> 中减去变换 <literal>a</literal>。</paragraph>
            <target refid="class-visualshadernodetransformop-constant-op-b-minus-a"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetransformop-constant-op-b-minus-a" names="class_visualshadernodetransformop_constant_op_b_minus_a"><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> <strong>OP_B_MINUS_A</strong> = <literal>6</literal></paragraph>
            <paragraph>从变换 <literal>a</literal> 中减去变换 <literal>b</literal>。</paragraph>
            <target refid="class-visualshadernodetransformop-constant-op-a-div-b"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetransformop-constant-op-a-div-b" names="class_visualshadernodetransformop_constant_op_a_div_b"><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> <strong>OP_A_DIV_B</strong> = <literal>7</literal></paragraph>
            <paragraph>将变换 <literal>a</literal> 除以变换 <literal>b</literal>。</paragraph>
            <target refid="class-visualshadernodetransformop-constant-op-b-div-a"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetransformop-constant-op-b-div-a" names="class_visualshadernodetransformop_constant_op_b_div_a"><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> <strong>OP_B_DIV_A</strong> = <literal>8</literal></paragraph>
            <paragraph>将变换 <literal>b</literal> 除以变换 <literal>a</literal>。</paragraph>
            <target refid="class-visualshadernodetransformop-constant-op-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodetransformop-constant-op-max" names="class_visualshadernodetransformop_constant_op_max"><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> <strong>OP_MAX</strong> = <literal>9</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-visualshadernodetransformop-property-operator"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodetransformop-property-operator" names="class_visualshadernodetransformop_property_operator"><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> <strong>operator</strong> = <literal>0</literal> <reference internal="True" refid="class-visualshadernodetransformop-property-operator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_operator</strong>(value: <reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference> <strong>get_operator</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要对变换执行的运算的类型。选项见 <reference internal="True" refid="enum-visualshadernodetransformop-operator"><inline classes="std std-ref">Operator</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
