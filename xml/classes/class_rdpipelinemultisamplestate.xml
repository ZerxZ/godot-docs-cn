<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_rdpipelinemultisamplestate.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/RDPipelineMultisampleState.xml.</comment>
    <target refid="class-rdpipelinemultisamplestate"></target>
    <section ids="rdpipelinemultisamplestate class-rdpipelinemultisamplestate" names="rdpipelinemultisamplestate class_rdpipelinemultisamplestate">
        <title>RDPipelineMultisampleState</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>管线的多重采样状态（由 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference> 使用）。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>RDPipelineMultisampleState</strong> 控制的是在使用 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference> 进行渲染时，如何进行多重采样和超采样抗锯齿。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="60"></colspec>
                    <colspec colwidth="101"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinemultisamplestate-property-enable-alpha-to-coverage"><inline classes="std std-ref">enable_alpha_to_coverage</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinemultisamplestate-property-enable-alpha-to-one"><inline classes="std std-ref">enable_alpha_to_one</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinemultisamplestate-property-enable-sample-shading"><inline classes="std std-ref">enable_sample_shading</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinemultisamplestate-property-min-sample-shading"><inline classes="std std-ref">min_sample_shading</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinemultisamplestate-property-sample-count"><inline classes="std std-ref">sample_count</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinemultisamplestate-property-sample-masks"><inline classes="std std-ref">sample_masks</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="属性说明">
            <title>属性说明</title>
            <target refid="class-rdpipelinemultisamplestate-property-enable-alpha-to-coverage"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinemultisamplestate-property-enable-alpha-to-coverage" names="class_rdpipelinemultisamplestate_property_enable_alpha_to_coverage"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>enable_alpha_to_coverage</strong> = <literal>false</literal> <reference internal="True" refid="class-rdpipelinemultisamplestate-property-enable-alpha-to-coverage"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_enable_alpha_to_coverage</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_enable_alpha_to_coverage</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用 Alpha 为覆盖面。此时会根据片段的第一个颜色输出的 Alpha 分量生成临时的覆盖值。这样就能够让 Alpha 透明使用多重采样抗锯齿。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinemultisamplestate-property-enable-alpha-to-one"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinemultisamplestate-property-enable-alpha-to-one" names="class_rdpipelinemultisamplestate_property_enable_alpha_to_one"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>enable_alpha_to_one</strong> = <literal>false</literal> <reference internal="True" refid="class-rdpipelinemultisamplestate-property-enable-alpha-to-one"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_enable_alpha_to_one</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_enable_alpha_to_one</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会将 Alpha 强制为 <literal>0.0</literal> 或 <literal>1.0</literal>。这样就能够让 Alpha 透明抗锯齿后的边缘更锐利。仅在 <reference internal="True" refid="class-rdpipelinemultisamplestate-property-enable-alpha-to-coverage"><inline classes="std std-ref">enable_alpha_to_coverage</inline></reference> 为 <literal>true</literal> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinemultisamplestate-property-enable-sample-shading"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinemultisamplestate-property-enable-sample-shading" names="class_rdpipelinemultisamplestate_property_enable_sample_shading"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>enable_sample_shading</strong> = <literal>false</literal> <reference internal="True" refid="class-rdpipelinemultisamplestate-property-enable-sample-shading"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_enable_sample_shading</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_enable_sample_shading</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会启用逐样本着色，使用 SSAA 代替 MSAA。这样能够提供更高质量的抗锯齿，支持透明边缘（Alpha 裁剪）。性能消耗很高。另见 <reference internal="True" refid="class-rdpipelinemultisamplestate-property-min-sample-shading"><inline classes="std std-ref">min_sample_shading</inline></reference>。详见<reference name="逐样本着色 Vulkan 文档" refuri="https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-sampleshading">逐样本着色 Vulkan 文档</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinemultisamplestate-property-min-sample-shading"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinemultisamplestate-property-min-sample-shading" names="class_rdpipelinemultisamplestate_property_min_sample_shading"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>min_sample_shading</strong> = <literal>0.0</literal> <reference internal="True" refid="class-rdpipelinemultisamplestate-property-min-sample-shading"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_min_sample_shading</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_min_sample_shading</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refid="class-rdpipelinemultisamplestate-property-sample-count"><inline classes="std std-ref">sample_count</inline></reference> 的乘数，决定每个片段执行多少次采样。必须在 <literal>0.0</literal> 和 <literal>1.0</literal> 之间（含端点）。仅在 <reference internal="True" refid="class-rdpipelinemultisamplestate-property-enable-sample-shading"><inline classes="std std-ref">enable_sample_shading</inline></reference> 为 <literal>true</literal> 时有效。如果 <reference internal="True" refid="class-rdpipelinemultisamplestate-property-min-sample-shading"><inline classes="std std-ref">min_sample_shading</inline></reference> 为 <literal>1.0</literal>，则片段调用必须仅从覆盖索引样本中读取。如果 <reference internal="True" refid="class-rdpipelinemultisamplestate-property-enable-sample-shading"><inline classes="std std-ref">enable_sample_shading</inline></reference> <emphasis>不是</emphasis> <literal>1.0</literal>，则不能对平铺图像进行访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinemultisamplestate-property-sample-count"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinemultisamplestate-property-sample-count" names="class_rdpipelinemultisamplestate_property_sample_count"><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> <strong>sample_count</strong> = <literal>0</literal> <reference internal="True" refid="class-rdpipelinemultisamplestate-property-sample-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_sample_count</strong>(value: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> <strong>get_sample_count</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要进行 MSAA 采样的数量（如果 <reference internal="True" refid="class-rdpipelinemultisamplestate-property-enable-sample-shading"><inline classes="std std-ref">enable_sample_shading</inline></reference> 为 <literal>true</literal> 则为 SSAA 采样）。值越高，抗锯齿效果越好，但会以性能为代价。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinemultisamplestate-property-sample-masks"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinemultisamplestate-property-sample-masks" names="class_rdpipelinemultisamplestate_property_sample_masks"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>] <strong>sample_masks</strong> = <literal>[]</literal> <reference internal="True" refid="class-rdpipelinemultisamplestate-property-sample-masks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_sample_masks</strong>(value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>] <strong>get_sample_masks</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>样本掩码。详情见 <reference name="Vulkan 的样本掩码文档" refuri="https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-samplemask">Vulkan 的样本掩码文档</reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
