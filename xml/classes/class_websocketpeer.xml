<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_websocketpeer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/websocket/doc_classes/WebSocketPeer.xml.</comment>
    <target refid="class-websocketpeer"></target>
    <section ids="websocketpeer class-websocketpeer" names="websocketpeer class_websocketpeer">
        <title>WebSocketPeer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_packetpeer#class-packetpeer"><inline classes="std std-ref">PacketPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>WebSocket 连接。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个类代表 WebSocket 连接，可以用作 WebSocket 客户端（兼容 RFC 6455），也可以用作 WebSocket 服务器的远程对等体。</paragraph>
            <paragraph>发送 WebSocket 二进制帧请使用 <reference internal="True" refuri="class_packetpeer#class-packetpeer-method-put-packet"><inline classes="std std-ref">PacketPeer.put_packet</inline></reference>，发送 WebSocket 文本帧请使用 <reference internal="True" refid="class-websocketpeer-method-send"><inline classes="std std-ref">send</inline></reference>（与基于文本的 API 交互时请优先选择文本帧）。可以通过 <reference internal="True" refid="class-websocketpeer-method-was-string-packet"><inline classes="std std-ref">was_string_packet</inline></reference> 检查最近一个数据包的帧类型。</paragraph>
            <paragraph>开启 WebSocket 客户端的方法是：首先调用 <reference internal="True" refid="class-websocketpeer-method-connect-to-url"><inline classes="std std-ref">connect_to_url</inline></reference>，然后定期调用 <reference internal="True" refid="class-websocketpeer-method-poll"><inline classes="std std-ref">poll</inline></reference>（例如在 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 的处理过程中）。查询套接字的状态请使用 <reference internal="True" refid="class-websocketpeer-method-get-ready-state"><inline classes="std std-ref">get_ready_state</inline></reference>，获取挂起的数据包数量请使用 <reference internal="True" refuri="class_packetpeer#class-packetpeer-method-get-available-packet-count"><inline classes="std std-ref">PacketPeer.get_available_packet_count</inline></reference>，获取挂起的数据包请使用 <reference internal="True" refuri="class_packetpeer#class-packetpeer-method-get-packet"><inline classes="std std-ref">PacketPeer.get_packet</inline></reference>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node

var socket = WebSocketPeer.new()

func _ready():
    socket.connect_to_url("wss://example.com")

func _process(delta):
    socket.poll()
    var state = socket.get_ready_state()
    if state == WebSocketPeer.STATE_OPEN:
        while socket.get_available_packet_count():
            print("数据包：", socket.get_packet())
    elif state == WebSocketPeer.STATE_CLOSING:
        # 继续轮询才能正确关闭。
        pass
    elif state == WebSocketPeer.STATE_CLOSED:
        var code = socket.get_close_code()
        var reason = socket.get_close_reason()
        print("WebSocket 已关闭，代码：%d，原因 %s。干净得体：%s" % [code, reason, code != -1])
        set_process(false) # 停止处理。</literal_block>
                </div>
            </container>
            <paragraph>如果要作为 WebSocket 服务器的对等体使用，请参考 <reference internal="True" refid="class-websocketpeer-method-accept-stream"><inline classes="std std-ref">accept_stream</inline></reference> 及在线教程。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="80"></colspec>
                    <colspec colwidth="25"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-property-handshake-headers"><inline classes="std std-ref">handshake_headers</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedStringArray()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-property-inbound-buffer-size"><inline classes="std std-ref">inbound_buffer_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>65535</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-property-max-queued-packets"><inline classes="std std-ref">max_queued_packets</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2048</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-property-outbound-buffer-size"><inline classes="std std-ref">outbound_buffer_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>65535</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-property-supported-protocols"><inline classes="std std-ref">supported_protocols</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedStringArray()</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="40"></colspec>
                    <colspec colwidth="174"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-accept-stream"><inline classes="std std-ref">accept_stream</inline></reference>(stream: <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-close"><inline classes="std std-ref">close</inline></reference>(code: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1000, reason: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-connect-to-url"><inline classes="std std-ref">connect_to_url</inline></reference>(url: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, tls_client_options: <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-get-close-code"><inline classes="std std-ref">get_close_code</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-get-close-reason"><inline classes="std std-ref">get_close_reason</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-get-connected-host"><inline classes="std std-ref">get_connected_host</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-get-connected-port"><inline classes="std std-ref">get_connected_port</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-get-current-outbound-buffered-amount"><inline classes="std std-ref">get_current_outbound_buffered_amount</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-websocketpeer-state"><inline classes="std std-ref">State</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-get-ready-state"><inline classes="std std-ref">get_ready_state</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-get-requested-url"><inline classes="std std-ref">get_requested_url</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-get-selected-protocol"><inline classes="std std-ref">get_selected_protocol</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-poll"><inline classes="std std-ref">poll</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-send"><inline classes="std std-ref">send</inline></reference>(message: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, write_mode: <reference internal="True" refid="enum-websocketpeer-writemode"><inline classes="std std-ref">WriteMode</inline></reference> = 1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-send-text"><inline classes="std std-ref">send_text</inline></reference>(message: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-set-no-delay"><inline classes="std std-ref">set_no_delay</inline></reference>(enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-websocketpeer-method-was-string-packet"><inline classes="std std-ref">was_string_packet</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-websocketpeer-writemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-websocketpeer-writemode" names="enum_websocketpeer_writemode">enum <strong>WriteMode</strong>: <reference internal="True" refid="enum-websocketpeer-writemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-websocketpeer-constant-write-mode-text"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-websocketpeer-constant-write-mode-text" names="class_websocketpeer_constant_write_mode_text"><reference internal="True" refid="enum-websocketpeer-writemode"><inline classes="std std-ref">WriteMode</inline></reference> <strong>WRITE_MODE_TEXT</strong> = <literal>0</literal></paragraph>
            <paragraph>指定 WebSockets 消息应作为文本有效载荷传输（只允许有效的 UTF-8）。</paragraph>
            <target refid="class-websocketpeer-constant-write-mode-binary"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-websocketpeer-constant-write-mode-binary" names="class_websocketpeer_constant_write_mode_binary"><reference internal="True" refid="enum-websocketpeer-writemode"><inline classes="std std-ref">WriteMode</inline></reference> <strong>WRITE_MODE_BINARY</strong> = <literal>1</literal></paragraph>
            <paragraph>指定 WebSockets 消息应以二进制有效载荷的形式传输（允许任何字节组合）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-websocketpeer-state"></target>
            <paragraph classes="classref-enumeration" ids="enum-websocketpeer-state" names="enum_websocketpeer_state">enum <strong>State</strong>: <reference internal="True" refid="enum-websocketpeer-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-websocketpeer-constant-state-connecting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-websocketpeer-constant-state-connecting" names="class_websocketpeer_constant_state_connecting"><reference internal="True" refid="enum-websocketpeer-state"><inline classes="std std-ref">State</inline></reference> <strong>STATE_CONNECTING</strong> = <literal>0</literal></paragraph>
            <paragraph>已创建套接字。连接尚未打开。</paragraph>
            <target refid="class-websocketpeer-constant-state-open"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-websocketpeer-constant-state-open" names="class_websocketpeer_constant_state_open"><reference internal="True" refid="enum-websocketpeer-state"><inline classes="std std-ref">State</inline></reference> <strong>STATE_OPEN</strong> = <literal>1</literal></paragraph>
            <paragraph>连接已打开，通讯就绪。</paragraph>
            <target refid="class-websocketpeer-constant-state-closing"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-websocketpeer-constant-state-closing" names="class_websocketpeer_constant_state_closing"><reference internal="True" refid="enum-websocketpeer-state"><inline classes="std std-ref">State</inline></reference> <strong>STATE_CLOSING</strong> = <literal>2</literal></paragraph>
            <paragraph>连接正在关闭过程中。这意味着已经向远程对等体发送了关闭请求，但还没有收到确认。</paragraph>
            <target refid="class-websocketpeer-constant-state-closed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-websocketpeer-constant-state-closed" names="class_websocketpeer_constant_state_closed"><reference internal="True" refid="enum-websocketpeer-state"><inline classes="std std-ref">State</inline></reference> <strong>STATE_CLOSED</strong> = <literal>3</literal></paragraph>
            <paragraph>连接已关闭或无法打开。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-websocketpeer-property-handshake-headers"></target>
            <paragraph classes="classref-property" ids="class-websocketpeer-property-handshake-headers" names="class_websocketpeer_property_handshake_headers"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>handshake_headers</strong> = <literal>PackedStringArray()</literal> <reference internal="True" refid="class-websocketpeer-property-handshake-headers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_handshake_headers</strong>(value: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_handshake_headers</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在 WebSocket 握手过程中要发送的额外 HTTP 标头。</paragraph>
            <paragraph><strong>注意：</strong>由于浏览器的限制，在 Web 导出中不支持。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-property-inbound-buffer-size"></target>
            <paragraph classes="classref-property" ids="class-websocketpeer-property-inbound-buffer-size" names="class_websocketpeer_property_inbound_buffer_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>inbound_buffer_size</strong> = <literal>65535</literal> <reference internal="True" refid="class-websocketpeer-property-inbound-buffer-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_inbound_buffer_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_inbound_buffer_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>输入缓冲区的大小，单位为字节（大致是将分配给入站数据包的最大内存量）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-property-max-queued-packets"></target>
            <paragraph classes="classref-property" ids="class-websocketpeer-property-max-queued-packets" names="class_websocketpeer_property_max_queued_packets"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_queued_packets</strong> = <literal>2048</literal> <reference internal="True" refid="class-websocketpeer-property-max-queued-packets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_queued_packets</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_queued_packets</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>队列中允许的最大数据包数量（包括入站和出站）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-property-outbound-buffer-size"></target>
            <paragraph classes="classref-property" ids="class-websocketpeer-property-outbound-buffer-size" names="class_websocketpeer_property_outbound_buffer_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>outbound_buffer_size</strong> = <literal>65535</literal> <reference internal="True" refid="class-websocketpeer-property-outbound-buffer-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_outbound_buffer_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_outbound_buffer_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>输入缓冲区的大小，单位为字节（大致是将分配给出站数据包的最大内存量）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-property-supported-protocols"></target>
            <paragraph classes="classref-property" ids="class-websocketpeer-property-supported-protocols" names="class_websocketpeer_property_supported_protocols"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>supported_protocols</strong> = <literal>PackedStringArray()</literal> <reference internal="True" refid="class-websocketpeer-property-supported-protocols"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_supported_protocols</strong>(value: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_supported_protocols</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>WebSocket 握手期间允许的 WebSocket 子协议。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> for more details.</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-websocketpeer-method-accept-stream"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-accept-stream" names="class_websocketpeer_method_accept_stream"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>accept_stream</strong>(stream: <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference>) <reference internal="True" refid="class-websocketpeer-method-accept-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 WebSocket 服务器的名义，接受正在执行 HTTP 握手的对等体连接。<literal>stream</literal> 必须是从 <reference internal="True" refuri="class_tcpserver#class-tcpserver-method-take-connection"><inline classes="std std-ref">TCPServer.take_connection</inline></reference> 获取的有效 TCP 流，或者是从 <reference internal="True" refuri="class_streampeertls#class-streampeertls-method-accept-stream"><inline classes="std std-ref">StreamPeerTLS.accept_stream</inline></reference> 接受的 TLS 流。</paragraph>
            <paragraph><strong>注意：</strong>由于浏览器的限制，Web 导出中不支持此方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-close"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-close" names="class_websocketpeer_method_close"><abbreviation explanation="无返回值。">void</abbreviation> <strong>close</strong>(code: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1000, reason: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <reference internal="True" refid="class-websocketpeer-method-close"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>关闭该 WebSocket 连接。<literal>code</literal> 是关闭的状态码（有效状态代码的列表见 RFC 6455 第 7.4 节）。<literal>reason</literal> 是人类可读的关闭连接原因（可以是任何小于 123 字节的 UTF-8 字符串）。如果 <literal>code</literal> 为负数，则连接会立即关闭，不通知远程对等体。</paragraph>
            <paragraph><strong>注意：</strong>为了实现干净得体的关闭，你需要在达到 <reference internal="True" refid="class-websocketpeer-constant-state-closed"><inline classes="std std-ref">STATE_CLOSED</inline></reference> 之前保持轮询。</paragraph>
            <paragraph><strong>注意：</strong>Web 导出可能不支持部分状态码。详情请参考具体浏览器的文档。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-connect-to-url"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-connect-to-url" names="class_websocketpeer_method_connect_to_url"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>connect_to_url</strong>(url: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, tls_client_options: <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference> = null) <reference internal="True" refid="class-websocketpeer-method-connect-to-url"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>连接到给定的 URL。使用 <literal>wss://</literal> 协议连接时会校验 TLS 证书与主机名。传入可选的 <literal>tls_client_options</literal> 参数可以自定义信任的证书颁发机构，也可以禁用通用名校验。见 <reference internal="True" refuri="class_tlsoptions#class-tlsoptions-method-client"><inline classes="std std-ref">TLSOptions.client</inline></reference> 和 <reference internal="True" refuri="class_tlsoptions#class-tlsoptions-method-client-unsafe"><inline classes="std std-ref">TLSOptions.client_unsafe</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>要避免 Web 中的混合内容警告或错误，你可能需要使用以 <literal>wss://</literal>（安全）开头的 <literal>url</literal> 而不是 <literal>ws://</literal>。采用这种做法时，请确保使用与服务器 TLS 证书相匹配的主机域名全称。<literal>wss://</literal> 连接请勿直接使用 IP 地址连接，因为不会与 TLS 证书匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-get-close-code"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-get-close-code" names="class_websocketpeer_method_get_close_code"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_close_code</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-websocketpeer-method-get-close-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回收到的 WebSocket 关闭帧状态码，如果连接没有干净地关闭则返回 <literal>-1</literal>。<reference internal="True" refid="class-websocketpeer-method-get-ready-state"><inline classes="std std-ref">get_ready_state</inline></reference> 返回 <reference internal="True" refid="class-websocketpeer-constant-state-closed"><inline classes="std std-ref">STATE_CLOSED</inline></reference> 才能调用这个方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-get-close-reason"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-get-close-reason" names="class_websocketpeer_method_get_close_reason"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_close_reason</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-websocketpeer-method-get-close-reason"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回收到的 WebSocket 关闭帧状态原因字符串。<reference internal="True" refid="class-websocketpeer-method-get-ready-state"><inline classes="std std-ref">get_ready_state</inline></reference> 返回 <reference internal="True" refid="class-websocketpeer-constant-state-closed"><inline classes="std std-ref">STATE_CLOSED</inline></reference> 才能调用这个方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-get-connected-host"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-get-connected-host" names="class_websocketpeer_method_get_connected_host"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_connected_host</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-websocketpeer-method-get-connected-host"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回已连接对等体的 IP 地址。</paragraph>
            <paragraph><strong>注意：</strong>在 Web 导出中不可用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-get-connected-port"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-get-connected-port" names="class_websocketpeer_method_get_connected_port"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_connected_port</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-websocketpeer-method-get-connected-port"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回已连接对等体的远程端口。</paragraph>
            <paragraph><strong>注意：</strong>在 Web 导出中不可用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-get-current-outbound-buffered-amount"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-get-current-outbound-buffered-amount" names="class_websocketpeer_method_get_current_outbound_buffered_amount"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_current_outbound_buffered_amount</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-websocketpeer-method-get-current-outbound-buffered-amount"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 websocket 输出缓冲区中的当前数据量。<strong>注意：</strong>Web 导出使用 WebSocket.bufferedAmount，而其他平台使用内部缓冲区。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-get-ready-state"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-get-ready-state" names="class_websocketpeer_method_get_ready_state"><reference internal="True" refid="enum-websocketpeer-state"><inline classes="std std-ref">State</inline></reference> <strong>get_ready_state</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-websocketpeer-method-get-ready-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该连接的就绪状态，见 <reference internal="True" refid="enum-websocketpeer-state"><inline classes="std std-ref">State</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-get-requested-url"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-get-requested-url" names="class_websocketpeer_method_get_requested_url"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_requested_url</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-websocketpeer-method-get-requested-url"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该对等体请求的 URL。该 URL 由传给 <reference internal="True" refid="class-websocketpeer-method-connect-to-url"><inline classes="std std-ref">connect_to_url</inline></reference> 的 <literal>url</literal> 得出，作为服务器时则从 HTTP 标头获取（即使用 <reference internal="True" refid="class-websocketpeer-method-accept-stream"><inline classes="std std-ref">accept_stream</inline></reference> 时）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-get-selected-protocol"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-get-selected-protocol" names="class_websocketpeer_method_get_selected_protocol"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_selected_protocol</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-websocketpeer-method-get-selected-protocol"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个连接所选用的 WebSocket 子协议，如果未选择子协议则返回空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-poll"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-poll" names="class_websocketpeer_method_poll"><abbreviation explanation="无返回值。">void</abbreviation> <strong>poll</strong>() <reference internal="True" refid="class-websocketpeer-method-poll"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>更新连接状态并接收传入的数据包。请定期调用此函数，保持其清洁状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-send"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-send" names="class_websocketpeer_method_send"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>send</strong>(message: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, write_mode: <reference internal="True" refid="enum-websocketpeer-writemode"><inline classes="std std-ref">WriteMode</inline></reference> = 1) <reference internal="True" refid="class-websocketpeer-method-send"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用期望的 <literal>write_mode</literal> 发送给定的 <literal>message</literal>。发送 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 时，请优先使用 <reference internal="True" refid="class-websocketpeer-method-send-text"><inline classes="std std-ref">send_text</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-send-text"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-send-text" names="class_websocketpeer_method_send_text"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>send_text</strong>(message: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-websocketpeer-method-send-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 WebSocket 文本模式发送给定的 <literal>message</literal>。与第三方文本 API 交互时请优先使用这个方法而不是 <reference internal="True" refuri="class_packetpeer#class-packetpeer-method-put-packet"><inline classes="std std-ref">PacketPeer.put_packet</inline></reference>（例如使用 <reference internal="True" refuri="class_json#class-json"><inline classes="std std-ref">JSON</inline></reference> 格式的消息时）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-set-no-delay"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-set-no-delay" names="class_websocketpeer_method_set_no_delay"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_no_delay</strong>(enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-websocketpeer-method-set-no-delay"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Disable Nagle's algorithm on the underlying TCP socket (default). See <reference internal="True" refuri="class_streampeertcp#class-streampeertcp-method-set-no-delay"><inline classes="std std-ref">StreamPeerTCP.set_no_delay</inline></reference> for more information.</paragraph>
            <paragraph><strong>Note:</strong> Not available in the Web export.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-websocketpeer-method-was-string-packet"></target>
            <paragraph classes="classref-method" ids="class-websocketpeer-method-was-string-packet" names="class_websocketpeer_method_was_string_packet"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>was_string_packet</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-websocketpeer-method-was-string-packet"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果最后收到的数据包是作为文本有效载荷发送的，返回 <literal>true</literal>。见 <reference internal="True" refid="enum-websocketpeer-writemode"><inline classes="std std-ref">WriteMode</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
