<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_streampeergzip.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/StreamPeerGZIP.xml.</comment>
    <target refid="class-streampeergzip"></target>
    <section ids="streampeergzip class-streampeergzip" names="streampeergzip class_streampeergzip">
        <title>StreamPeerGZIP</title>
        <paragraph><strong>实验性：</strong> This class may be changed or removed in future versions.</paragraph>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>能够处理 GZIP 和 deflate 压缩/解压缩的流对等体。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个类能够使用 GZIP/deflate 对数据进行流式压缩或解压缩。压缩或解压缩经过网络发送的文件时尤其有用，不必事先分配内存。</paragraph>
            <paragraph>使用 <reference internal="True" refid="class-streampeergzip-method-start-compression"><inline classes="std std-ref">start_compression</inline></reference>（或 <reference internal="True" refid="class-streampeergzip-method-start-decompression"><inline classes="std std-ref">start_decompression</inline></reference>）开启流之后，在这个流上调用 <reference internal="True" refuri="class_streampeer#class-streampeer-method-put-partial-data"><inline classes="std std-ref">StreamPeer.put_partial_data</inline></reference> 会对数据进行压缩（或解压缩）并写入内部缓冲区。调用 <reference internal="True" refuri="class_streampeer#class-streampeer-method-get-available-bytes"><inline classes="std std-ref">StreamPeer.get_available_bytes</inline></reference> 会返回内部缓冲区中待处理的字节数，<reference internal="True" refuri="class_streampeer#class-streampeer-method-get-partial-data"><inline classes="std std-ref">StreamPeer.get_partial_data</inline></reference> 会从中获取压缩后（或解压后）的字节。流结束后，你必须调用 <reference internal="True" refid="class-streampeergzip-method-finish"><inline classes="std std-ref">finish</inline></reference> 来确保正确清空内部缓冲区（请务必最后再调用一次 <reference internal="True" refuri="class_streampeer#class-streampeer-method-get-available-bytes"><inline classes="std std-ref">StreamPeer.get_available_bytes</inline></reference>，检查此时是否还有需要读取的数据）。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="175"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeergzip-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeergzip-method-finish"><inline classes="std std-ref">finish</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeergzip-method-start-compression"><inline classes="std std-ref">start_compression</inline></reference>(use_deflate: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, buffer_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 65535)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeergzip-method-start-decompression"><inline classes="std std-ref">start_decompression</inline></reference>(use_deflate: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, buffer_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 65535)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-streampeergzip-method-clear"></target>
            <paragraph classes="classref-method" ids="class-streampeergzip-method-clear" names="class_streampeergzip_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-streampeergzip-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清空该流，重设内部状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeergzip-method-finish"></target>
            <paragraph classes="classref-method" ids="class-streampeergzip-method-finish" names="class_streampeergzip_method_finish"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>finish</strong>() <reference internal="True" refid="class-streampeergzip-method-finish"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>终止该流，对缓冲中剩余的数据块进行压缩或解压缩。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeergzip-method-start-compression"></target>
            <paragraph classes="classref-method" ids="class-streampeergzip-method-start-compression" names="class_streampeergzip_method_start_compression"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>start_compression</strong>(use_deflate: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, buffer_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 65535) <reference internal="True" refid="class-streampeergzip-method-start-compression"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>开始压缩模式的流，缓冲区大小为 <literal>buffer_size</literal>，如果 <literal>use_deflate</literal> 为 <literal>true</literal> 则使用 deflate 而不是 GZIP。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeergzip-method-start-decompression"></target>
            <paragraph classes="classref-method" ids="class-streampeergzip-method-start-decompression" names="class_streampeergzip_method_start_decompression"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>start_decompression</strong>(use_deflate: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, buffer_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 65535) <reference internal="True" refid="class-streampeergzip-method-start-decompression"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>开始解压模式的流，缓冲区大小为 <literal>buffer_size</literal>，如果 <literal>use_deflate</literal> 为 <literal>true</literal> 则使用 deflate 而不是 GZIP。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
