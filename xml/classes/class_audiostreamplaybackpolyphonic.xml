<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_audiostreamplaybackpolyphonic.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AudioStreamPlaybackPolyphonic.xml.</comment>
    <target refid="class-audiostreamplaybackpolyphonic"></target>
    <section ids="audiostreamplaybackpolyphonic class-audiostreamplaybackpolyphonic" names="audiostreamplaybackpolyphonic class_audiostreamplaybackpolyphonic">
        <title>AudioStreamPlaybackPolyphonic</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_audiostreamplayback#class-audiostreamplayback"><inline classes="std std-ref">AudioStreamPlayback</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><reference internal="True" refuri="class_audiostreampolyphonic#class-audiostreampolyphonic"><inline classes="std std-ref">AudioStreamPolyphonic</inline></reference> 的播放实例。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><reference internal="True" refuri="class_audiostreampolyphonic#class-audiostreampolyphonic"><inline classes="std std-ref">AudioStreamPolyphonic</inline></reference> 的播放实例。设置 <reference internal="True" refuri="class_audiostreamplayer#class-audiostreamplayer"><inline classes="std std-ref">AudioStreamPlayer</inline></reference>、<reference internal="True" refuri="class_audiostreamplayer2d#class-audiostreamplayer2d"><inline classes="std std-ref">AudioStreamPlayer2D</inline></reference> 或 <reference internal="True" refuri="class_audiostreamplayer3d#class-audiostreamplayer3d"><inline classes="std std-ref">AudioStreamPlayer3D</inline></reference> 的 <literal>stream</literal> 属性后，可以通过调用 <reference internal="True" refuri="class_audiostreamplayer#class-audiostreamplayer-method-get-stream-playback"><inline classes="std std-ref">AudioStreamPlayer.get_stream_playback</inline></reference>、<reference internal="True" refuri="class_audiostreamplayer2d#class-audiostreamplayer2d-method-get-stream-playback"><inline classes="std std-ref">AudioStreamPlayer2D.get_stream_playback</inline></reference> 或 <reference internal="True" refuri="class_audiostreamplayer3d#class-audiostreamplayer3d-method-get-stream-playback"><inline classes="std std-ref">AudioStreamPlayer3D.get_stream_playback</inline></reference> 方法获取播放实例。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="392"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-is-stream-playing"><inline classes="std std-ref">is_stream_playing</inline></reference>(stream: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-play-stream"><inline classes="std std-ref">play_stream</inline></reference>(stream: <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference>, from_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0, volume_db: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0, pitch_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, playback_type: <reference internal="True" refuri="class_audioserver#enum-audioserver-playbacktype"><inline classes="std std-ref">PlaybackType</inline></reference> = 0, bus: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"Master")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-set-stream-pitch-scale"><inline classes="std std-ref">set_stream_pitch_scale</inline></reference>(stream: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pitch_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-set-stream-volume"><inline classes="std std-ref">set_stream_volume</inline></reference>(stream: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, volume_db: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-stop-stream"><inline classes="std std-ref">stop_stream</inline></reference>(stream: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="常量">
            <title>常量</title>
            <target refid="class-audiostreamplaybackpolyphonic-constant-invalid-id"></target>
            <paragraph classes="classref-constant" ids="class-audiostreamplaybackpolyphonic-constant-invalid-id" names="class_audiostreamplaybackpolyphonic_constant_invalid_id"><strong>INVALID_ID</strong> = <literal>-1</literal> <reference internal="True" refid="class-audiostreamplaybackpolyphonic-constant-invalid-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>无法为播放分配一个流时由 <reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-play-stream"><inline classes="std std-ref">play_stream</inline></reference> 返回。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-audiostreamplaybackpolyphonic-method-is-stream-playing"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplaybackpolyphonic-method-is-stream-playing" names="class_audiostreamplaybackpolyphonic_method_is_stream_playing"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_stream_playing</strong>(stream: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-is-stream-playing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>与整数 ID 关联的流仍在播放时返回 true。请检查 <reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-play-stream"><inline classes="std std-ref">play_stream</inline></reference> 以获取有关此 ID 何时失效的信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplaybackpolyphonic-method-play-stream"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplaybackpolyphonic-method-play-stream" names="class_audiostreamplaybackpolyphonic_method_play_stream"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>play_stream</strong>(stream: <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference>, from_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0, volume_db: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0, pitch_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, playback_type: <reference internal="True" refuri="class_audioserver#enum-audioserver-playbacktype"><inline classes="std std-ref">PlaybackType</inline></reference> = 0, bus: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"Master") <reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-play-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Play an <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference> at a given offset, volume, pitch scale, playback type, and bus. Playback starts immediately.</paragraph>
            <paragraph>The return value is a unique integer ID that is associated to this playback stream and which can be used to control it.</paragraph>
            <paragraph>This ID becomes invalid when the stream ends (if it does not loop), when the <strong>AudioStreamPlaybackPolyphonic</strong> is stopped, or when <reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-stop-stream"><inline classes="std std-ref">stop_stream</inline></reference> is called.</paragraph>
            <paragraph>This function returns <reference internal="True" refid="class-audiostreamplaybackpolyphonic-constant-invalid-id"><inline classes="std std-ref">INVALID_ID</inline></reference> if the amount of streams currently playing equals <reference internal="True" refuri="class_audiostreampolyphonic#class-audiostreampolyphonic-property-polyphony"><inline classes="std std-ref">AudioStreamPolyphonic.polyphony</inline></reference>. If you need a higher amount of maximum polyphony, raise this value.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplaybackpolyphonic-method-set-stream-pitch-scale"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplaybackpolyphonic-method-set-stream-pitch-scale" names="class_audiostreamplaybackpolyphonic_method_set_stream_pitch_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stream_pitch_scale</strong>(stream: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pitch_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-set-stream-pitch-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>改变流的音阶。<literal>stream</literal> 参数是一个由 <reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-play-stream"><inline classes="std std-ref">play_stream</inline></reference> 返回的整数 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplaybackpolyphonic-method-set-stream-volume"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplaybackpolyphonic-method-set-stream-volume" names="class_audiostreamplaybackpolyphonic_method_set_stream_volume"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stream_volume</strong>(stream: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, volume_db: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-set-stream-volume"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>改变流的音量（单位：db）。<literal>stream</literal> 参数是一个由 <reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-play-stream"><inline classes="std std-ref">play_stream</inline></reference> 返回的整数 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplaybackpolyphonic-method-stop-stream"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplaybackpolyphonic-method-stop-stream" names="class_audiostreamplaybackpolyphonic_method_stop_stream"><abbreviation explanation="无返回值。">void</abbreviation> <strong>stop_stream</strong>(stream: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-stop-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>停止某个流。<literal>stream</literal> 参数是由 <reference internal="True" refid="class-audiostreamplaybackpolyphonic-method-play-stream"><inline classes="std std-ref">play_stream</inline></reference> 返回的整数 ID，在调用这个函数后失效。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
