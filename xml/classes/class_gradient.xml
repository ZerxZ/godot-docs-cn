<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_gradient.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Gradient.xml.</comment>
    <target refid="class-gradient"></target>
    <section ids="gradient class-gradient" names="gradient class_gradient">
        <title>Gradient</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>颜色过渡。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该资源通过定义一组彩色点以及如何在它们之间进行插值来描述颜色过渡。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference>，它支持更复杂的缓动方法，但不支持颜色。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="59"></colspec>
                    <colspec colwidth="85"></colspec>
                    <colspec colwidth="46"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-property-colors"><inline classes="std std-ref">colors</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedColorArray(0, 0, 0, 1, 1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-gradient-colorspace"><inline classes="std std-ref">ColorSpace</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-property-interpolation-color-space"><inline classes="std std-ref">interpolation_color_space</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-gradient-interpolationmode"><inline classes="std std-ref">InterpolationMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-property-interpolation-mode"><inline classes="std std-ref">interpolation_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-property-offsets"><inline classes="std std-ref">offsets</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedFloat32Array(0, 1)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="129"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-method-add-point"><inline classes="std std-ref">add_point</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> offset, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-method-get-color"><inline classes="std std-ref">get_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> point <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-method-get-offset"><inline classes="std std-ref">get_offset</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> point <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-method-get-point-count"><inline classes="std std-ref">get_point_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-method-remove-point"><inline classes="std std-ref">remove_point</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> point <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-method-reverse"><inline classes="std std-ref">reverse</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-method-sample"><inline classes="std std-ref">sample</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> offset <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-method-set-color"><inline classes="std std-ref">set_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> point, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gradient-method-set-offset"><inline classes="std std-ref">set_offset</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> point, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> offset <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-gradient-interpolationmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-gradient-interpolationmode" names="enum_gradient_interpolationmode">enum <strong>InterpolationMode</strong>:</paragraph>
            <target refid="class-gradient-constant-gradient-interpolate-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gradient-constant-gradient-interpolate-linear" names="class_gradient_constant_gradient_interpolate_linear"><reference internal="True" refid="enum-gradient-interpolationmode"><inline classes="std std-ref">InterpolationMode</inline></reference> <strong>GRADIENT_INTERPOLATE_LINEAR</strong> = <literal>0</literal></paragraph>
            <paragraph>线性插值。</paragraph>
            <target refid="class-gradient-constant-gradient-interpolate-constant"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gradient-constant-gradient-interpolate-constant" names="class_gradient_constant_gradient_interpolate_constant"><reference internal="True" refid="enum-gradient-interpolationmode"><inline classes="std std-ref">InterpolationMode</inline></reference> <strong>GRADIENT_INTERPOLATE_CONSTANT</strong> = <literal>1</literal></paragraph>
            <paragraph>常量插值，颜色会在每个点上突变，在点和点之间保持一致。在某些情况下用于渐变纹理时，可能会造成明显的锯齿。</paragraph>
            <target refid="class-gradient-constant-gradient-interpolate-cubic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gradient-constant-gradient-interpolate-cubic" names="class_gradient_constant_gradient_interpolate_cubic"><reference internal="True" refid="enum-gradient-interpolationmode"><inline classes="std std-ref">InterpolationMode</inline></reference> <strong>GRADIENT_INTERPOLATE_CUBIC</strong> = <literal>2</literal></paragraph>
            <paragraph>三次插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-gradient-colorspace"></target>
            <paragraph classes="classref-enumeration" ids="enum-gradient-colorspace" names="enum_gradient_colorspace">enum <strong>ColorSpace</strong>:</paragraph>
            <target refid="class-gradient-constant-gradient-color-space-srgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gradient-constant-gradient-color-space-srgb" names="class_gradient_constant_gradient_color_space_srgb"><reference internal="True" refid="enum-gradient-colorspace"><inline classes="std std-ref">ColorSpace</inline></reference> <strong>GRADIENT_COLOR_SPACE_SRGB</strong> = <literal>0</literal></paragraph>
            <paragraph>sRGB 色彩空间。</paragraph>
            <target refid="class-gradient-constant-gradient-color-space-linear-srgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gradient-constant-gradient-color-space-linear-srgb" names="class_gradient_constant_gradient_color_space_linear_srgb"><reference internal="True" refid="enum-gradient-colorspace"><inline classes="std std-ref">ColorSpace</inline></reference> <strong>GRADIENT_COLOR_SPACE_LINEAR_SRGB</strong> = <literal>1</literal></paragraph>
            <paragraph>线性 sRGB 色彩空间。</paragraph>
            <target refid="class-gradient-constant-gradient-color-space-oklab"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gradient-constant-gradient-color-space-oklab" names="class_gradient_constant_gradient_color_space_oklab"><reference internal="True" refid="enum-gradient-colorspace"><inline classes="std std-ref">ColorSpace</inline></reference> <strong>GRADIENT_COLOR_SPACE_OKLAB</strong> = <literal>2</literal></paragraph>
            <paragraph><reference name="Oklab" refuri="https://bottosson.github.io/posts/oklab/">Oklab</reference> 色彩空间。该色彩空间能够在不同颜色之间进行平滑、外观统一的过渡。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-gradient-property-colors"></target>
            <paragraph classes="classref-property" ids="class-gradient-property-colors" names="class_gradient_property_colors"><reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>colors</strong> = <literal>PackedColorArray(0, 0, 0, 1, 1, 1, 1, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_colors</strong> <strong>(</strong> <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>get_colors</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> 形式的渐变色颜色。</paragraph>
            <paragraph><strong>注意：</strong>这个属性返回的是副本，修改返回值并不会对渐变色进行更新。要更新渐变色，请使用 <reference internal="True" refid="class-gradient-method-set-color"><inline classes="std std-ref">set_color</inline></reference> 方法（单独更新颜色）或直接为这个属性赋值（一次性更新所有颜色）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gradient-property-interpolation-color-space"></target>
            <paragraph classes="classref-property" ids="class-gradient-property-interpolation-color-space" names="class_gradient_property_interpolation_color_space"><reference internal="True" refid="enum-gradient-colorspace"><inline classes="std std-ref">ColorSpace</inline></reference> <strong>interpolation_color_space</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_interpolation_color_space</strong> <strong>(</strong> <reference internal="True" refid="enum-gradient-colorspace"><inline classes="std std-ref">ColorSpace</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-gradient-colorspace"><inline classes="std std-ref">ColorSpace</inline></reference> <strong>get_interpolation_color_space</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于在渐变点之间进行插值的色彩空间。不影响返回的颜色，返回的颜色始终在 sRGB 空间。可用的模式见 <reference internal="True" refid="enum-gradient-colorspace"><inline classes="std std-ref">ColorSpace</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-gradient-property-interpolation-mode"><inline classes="std std-ref">interpolation_mode</inline></reference> 为 <reference internal="True" refid="class-gradient-constant-gradient-interpolate-constant"><inline classes="std std-ref">GRADIENT_INTERPOLATE_CONSTANT</inline></reference> 时该设置无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gradient-property-interpolation-mode"></target>
            <paragraph classes="classref-property" ids="class-gradient-property-interpolation-mode" names="class_gradient_property_interpolation_mode"><reference internal="True" refid="enum-gradient-interpolationmode"><inline classes="std std-ref">InterpolationMode</inline></reference> <strong>interpolation_mode</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_interpolation_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-gradient-interpolationmode"><inline classes="std std-ref">InterpolationMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-gradient-interpolationmode"><inline classes="std std-ref">InterpolationMode</inline></reference> <strong>get_interpolation_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于在渐变点之间进行插值的算法。可用的模式见 <reference internal="True" refid="enum-gradient-interpolationmode"><inline classes="std std-ref">InterpolationMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gradient-property-offsets"></target>
            <paragraph classes="classref-property" ids="class-gradient-property-offsets" names="class_gradient_property_offsets"><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> <strong>offsets</strong> = <literal>PackedFloat32Array(0, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_offsets</strong> <strong>(</strong> <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> <strong>get_offsets</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> 形式的渐变色偏移。</paragraph>
            <paragraph><strong>注意：</strong>这个属性返回的是副本，修改返回值并不会对渐变色进行更新。要更新渐变色，请使用 <reference internal="True" refid="class-gradient-method-set-offset"><inline classes="std std-ref">set_offset</inline></reference> 方法（单独更新偏移）或直接为这个属性赋值（一次性更新所有偏移）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-gradient-method-add-point"></target>
            <paragraph classes="classref-method" ids="class-gradient-method-add-point" names="class_gradient_method_add_point">void <strong>add_point</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> offset, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
            <paragraph>使用指定的偏移，将指定的颜色添加到该渐变中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gradient-method-get-color"></target>
            <paragraph classes="classref-method" ids="class-gradient-method-get-color" names="class_gradient_method_get_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_color</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> point <strong>)</strong></paragraph>
            <paragraph>返回渐变色在索引 <literal>point</literal> 处的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gradient-method-get-offset"></target>
            <paragraph classes="classref-method" ids="class-gradient-method-get-offset" names="class_gradient_method_get_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> point <strong>)</strong></paragraph>
            <paragraph>返回渐变色在索引 <literal>point</literal> 处的偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gradient-method-get-point-count"></target>
            <paragraph classes="classref-method" ids="class-gradient-method-get-point-count" names="class_gradient_method_get_point_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_point_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回渐变中的颜色数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gradient-method-remove-point"></target>
            <paragraph classes="classref-method" ids="class-gradient-method-remove-point" names="class_gradient_method_remove_point">void <strong>remove_point</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> point <strong>)</strong></paragraph>
            <paragraph>移除索引 <literal>point</literal> 处的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gradient-method-reverse"></target>
            <paragraph classes="classref-method" ids="class-gradient-method-reverse" names="class_gradient_method_reverse">void <strong>reverse</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>将渐变进行翻转/镜像。</paragraph>
            <paragraph><strong>注意：</strong>这个方法会将所有点以渐变的中点进行镜像，<reference internal="True" refid="class-gradient-property-interpolation-mode"><inline classes="std std-ref">interpolation_mode</inline></reference> 为 <reference internal="True" refid="class-gradient-constant-gradient-interpolate-constant"><inline classes="std std-ref">GRADIENT_INTERPOLATE_CONSTANT</inline></reference> 时可能产生意外的结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gradient-method-sample"></target>
            <paragraph classes="classref-method" ids="class-gradient-method-sample" names="class_gradient_method_sample"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>sample</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> offset <strong>)</strong></paragraph>
            <paragraph>返回由偏移 <literal>offset</literal> 指定的插值颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gradient-method-set-color"></target>
            <paragraph classes="classref-method" ids="class-gradient-method-set-color" names="class_gradient_method_set_color">void <strong>set_color</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> point, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
            <paragraph>设置渐变色在索引 <literal>point</literal> 处的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gradient-method-set-offset"></target>
            <paragraph classes="classref-method" ids="class-gradient-method-set-offset" names="class_gradient_method_set_offset">void <strong>set_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> point, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> offset <strong>)</strong></paragraph>
            <paragraph>设置渐变色在索引 <literal>point</literal> 处的偏移。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
