<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_visualshadernodecubemap.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/VisualShaderNodeCubemap.xml.</comment>
    <target refid="class-visualshadernodecubemap"></target>
    <section ids="visualshadernodecubemap class-visualshadernodecubemap" names="visualshadernodecubemap class_visualshadernodecubemap">
        <title>VisualShaderNodeCubemap</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>在可视化着色器图中使用的一种 <reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 采样节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>在着色器语言中被转换成 <literal>texture(cubemap, vec3)</literal>。返回一个颜色向量和 Alpha 通道的标量。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="62"></colspec>
                    <colspec colwidth="74"></colspec>
                    <colspec colwidth="7"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecubemap-property-cube-map"><inline classes="std std-ref">cube_map</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodecubemap-source"><inline classes="std std-ref">Source</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecubemap-property-source"><inline classes="std std-ref">source</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodecubemap-texturetype"><inline classes="std std-ref">TextureType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecubemap-property-texture-type"><inline classes="std std-ref">texture_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-visualshadernodecubemap-source"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodecubemap-source" names="enum_visualshadernodecubemap_source">enum <strong>Source</strong>: <reference internal="True" refid="enum-visualshadernodecubemap-source"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-visualshadernodecubemap-constant-source-texture"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecubemap-constant-source-texture" names="class_visualshadernodecubemap_constant_source_texture"><reference internal="True" refid="enum-visualshadernodecubemap-source"><inline classes="std std-ref">Source</inline></reference> <strong>SOURCE_TEXTURE</strong> = <literal>0</literal></paragraph>
            <paragraph>使用 <reference internal="True" refid="class-visualshadernodecubemap-property-cube-map"><inline classes="std std-ref">cube_map</inline></reference> 设置的 <reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference>。如果设置为 <reference internal="True" refid="class-visualshadernodecubemap-property-source"><inline classes="std std-ref">source</inline></reference>，则会忽略 <literal>samplerCube</literal> 端口。</paragraph>
            <target refid="class-visualshadernodecubemap-constant-source-port"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecubemap-constant-source-port" names="class_visualshadernodecubemap_constant_source_port"><reference internal="True" refid="enum-visualshadernodecubemap-source"><inline classes="std std-ref">Source</inline></reference> <strong>SOURCE_PORT</strong> = <literal>1</literal></paragraph>
            <paragraph>使用通过 <literal>samplerCube</literal> 端口传递的 <reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 采样器引用。如果设置为 <reference internal="True" refid="class-visualshadernodecubemap-property-source"><inline classes="std std-ref">source</inline></reference>，则会忽略 <reference internal="True" refid="class-visualshadernodecubemap-property-cube-map"><inline classes="std std-ref">cube_map</inline></reference> 纹理。</paragraph>
            <target refid="class-visualshadernodecubemap-constant-source-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecubemap-constant-source-max" names="class_visualshadernodecubemap_constant_source_max"><reference internal="True" refid="enum-visualshadernodecubemap-source"><inline classes="std std-ref">Source</inline></reference> <strong>SOURCE_MAX</strong> = <literal>2</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodecubemap-source"><inline classes="std std-ref">Source</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-visualshadernodecubemap-texturetype"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodecubemap-texturetype" names="enum_visualshadernodecubemap_texturetype">enum <strong>TextureType</strong>: <reference internal="True" refid="enum-visualshadernodecubemap-texturetype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-visualshadernodecubemap-constant-type-data"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecubemap-constant-type-data" names="class_visualshadernodecubemap_constant_type_data"><reference internal="True" refid="enum-visualshadernodecubemap-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TYPE_DATA</strong> = <literal>0</literal></paragraph>
            <paragraph>在uniform声明中未添加提示。</paragraph>
            <target refid="class-visualshadernodecubemap-constant-type-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecubemap-constant-type-color" names="class_visualshadernodecubemap_constant_type_color"><reference internal="True" refid="enum-visualshadernodecubemap-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TYPE_COLOR</strong> = <literal>1</literal></paragraph>
            <paragraph>向该 uniform 声明添加 <literal>source_color</literal> 提示，用于进行正确的 sRGB 到线性颜色空间的转换。</paragraph>
            <target refid="class-visualshadernodecubemap-constant-type-normal-map"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecubemap-constant-type-normal-map" names="class_visualshadernodecubemap_constant_type_normal_map"><reference internal="True" refid="enum-visualshadernodecubemap-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TYPE_NORMAL_MAP</strong> = <literal>2</literal></paragraph>
            <paragraph>将 <literal>hint_normal</literal> 作为提示添加到 uniform 声明中，该声明在内部将纹理转换为法线贴图。</paragraph>
            <target refid="class-visualshadernodecubemap-constant-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecubemap-constant-type-max" names="class_visualshadernodecubemap_constant_type_max"><reference internal="True" refid="enum-visualshadernodecubemap-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TYPE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodecubemap-texturetype"><inline classes="std std-ref">TextureType</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-visualshadernodecubemap-property-cube-map"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodecubemap-property-cube-map" names="class_visualshadernodecubemap_property_cube_map"><reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> <strong>cube_map</strong> <reference internal="True" refid="class-visualshadernodecubemap-property-cube-map"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cube_map</strong>(value: <reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> <strong>get_cube_map</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当使用 <reference internal="True" refid="class-visualshadernodecubemap-constant-source-texture"><inline classes="std std-ref">SOURCE_TEXTURE</inline></reference> 作为 <reference internal="True" refid="class-visualshadernodecubemap-property-source"><inline classes="std std-ref">source</inline></reference> 时，要采样的 <reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecubemap-property-source"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodecubemap-property-source" names="class_visualshadernodecubemap_property_source"><reference internal="True" refid="enum-visualshadernodecubemap-source"><inline classes="std std-ref">Source</inline></reference> <strong>source</strong> = <literal>0</literal> <reference internal="True" refid="class-visualshadernodecubemap-property-source"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_source</strong>(value: <reference internal="True" refid="enum-visualshadernodecubemap-source"><inline classes="std std-ref">Source</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodecubemap-source"><inline classes="std std-ref">Source</inline></reference> <strong>get_source</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>定义采样应该使用哪个源。参阅<reference internal="True" refid="enum-visualshadernodecubemap-source"><inline classes="std std-ref">Source</inline></reference>的选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecubemap-property-texture-type"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodecubemap-property-texture-type" names="class_visualshadernodecubemap_property_texture_type"><reference internal="True" refid="enum-visualshadernodecubemap-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>texture_type</strong> = <literal>0</literal> <reference internal="True" refid="class-visualshadernodecubemap-property-texture-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture_type</strong>(value: <reference internal="True" refid="enum-visualshadernodecubemap-texturetype"><inline classes="std std-ref">TextureType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodecubemap-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>get_texture_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>定义源纹理提供的数据类型。选项参阅<reference internal="True" refid="enum-visualshadernodecubemap-texturetype"><inline classes="std std-ref">TextureType</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
