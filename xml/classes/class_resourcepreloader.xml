<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_resourcepreloader.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/ResourcePreloader.xml.</comment>
    <target refid="class-resourcepreloader"></target>
    <section ids="resourcepreloader class-resourcepreloader" names="resourcepreloader class_resourcepreloader">
        <title>ResourcePreloader</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于预加载场景子资源的节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个节点可以预加载场景中的子资源，这样场景加载完成时，所有的资源就都处于就绪可用状态，可以从预加载器获取。选中该节点后，可以使用 ResourcePreloader 选项卡来添加资源。</paragraph>
            <paragraph>GDScript 提供了简化的 <reference internal="True" refuri="class_@gdscript#class-gdscript-method-preload"><inline classes="std std-ref">@GDScript.preload</inline></reference> 内置方法，可以在大多数场景使用，<strong>ResourcePreloader</strong> 则可用于更高阶的场合。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="169"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourcepreloader-method-add-resource"><inline classes="std std-ref">add_resource</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, resource: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourcepreloader-method-get-resource"><inline classes="std std-ref">get_resource</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourcepreloader-method-get-resource-list"><inline classes="std std-ref">get_resource_list</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourcepreloader-method-has-resource"><inline classes="std std-ref">has_resource</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourcepreloader-method-remove-resource"><inline classes="std std-ref">remove_resource</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourcepreloader-method-rename-resource"><inline classes="std std-ref">rename_resource</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, newname: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-resourcepreloader-method-add-resource"></target>
            <paragraph classes="classref-method" ids="class-resourcepreloader-method-add-resource" names="class_resourcepreloader_method_add_resource"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_resource</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, resource: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>) <reference internal="True" refid="class-resourcepreloader-method-add-resource"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将资源以给定的名称 <literal>name</literal> 添加至预加载器。如果已存在名为 <literal>name</literal> 的资源，则新资源会被重命名为 "<literal>name</literal> N"，这里的 N 是从 2 开始递增的数字。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourcepreloader-method-get-resource"></target>
            <paragraph classes="classref-method" ids="class-resourcepreloader-method-get-resource" names="class_resourcepreloader_method_get_resource"><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>get_resource</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-resourcepreloader-method-get-resource"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与 <literal>name</literal> 关联的资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourcepreloader-method-get-resource-list"></target>
            <paragraph classes="classref-method" ids="class-resourcepreloader-method-get-resource-list" names="class_resourcepreloader_method_get_resource_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_resource_list</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-resourcepreloader-method-get-resource-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回预加载器内的资源列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourcepreloader-method-has-resource"></target>
            <paragraph classes="classref-method" ids="class-resourcepreloader-method-has-resource" names="class_resourcepreloader_method_has_resource"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_resource</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-resourcepreloader-method-has-resource"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果预加载器包含一个与 <literal>name</literal> 关联的资源，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourcepreloader-method-remove-resource"></target>
            <paragraph classes="classref-method" ids="class-resourcepreloader-method-remove-resource" names="class_resourcepreloader_method_remove_resource"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_resource</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-resourcepreloader-method-remove-resource"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从预加载器中删除与 <literal>name</literal> 关联的资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourcepreloader-method-rename-resource"></target>
            <paragraph classes="classref-method" ids="class-resourcepreloader-method-rename-resource" names="class_resourcepreloader_method_rename_resource"><abbreviation explanation="无返回值。">void</abbreviation> <strong>rename_resource</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, newname: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-resourcepreloader-method-rename-resource"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将预加载器中的资源从 <literal>name</literal> 重命名为 <literal>newname</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
