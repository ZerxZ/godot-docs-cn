<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_gltfdocumentextension.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/gltf/doc_classes/GLTFDocumentExtension.xml.</comment>
    <target refid="class-gltfdocumentextension"></target>
    <section ids="gltfdocumentextension class-gltfdocumentextension" names="gltfdocumentextension class_gltfdocumentextension">
        <title>GLTFDocumentExtension</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_gltfdocumentextensionconvertimportermesh#class-gltfdocumentextensionconvertimportermesh"><inline classes="std std-ref">GLTFDocumentExtensionConvertImporterMesh</inline></reference></paragraph>
        <paragraph><reference internal="True" refuri="class_gltfdocument#class-gltfdocument"><inline classes="std std-ref">GLTFDocument</inline></reference> 扩展类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>通过允许在 GLTF 导入或导出的各个阶段运行任意代码，来扩展 <reference internal="True" refuri="class_gltfdocument#class-gltfdocument"><inline classes="std std-ref">GLTFDocument</inline></reference> 类的功能。</paragraph>
            <paragraph>要使用它，请创建一个扩展 GLTFDocumentExtension 的新类，覆盖需要的任何方法，创建你的类的实例，然后使用 <reference internal="True" refuri="class_gltfdocument#class-gltfdocument-method-register-gltf-document-extension"><inline classes="std std-ref">GLTFDocument.register_gltf_document_extension</inline></reference> 注册它。</paragraph>
            <paragraph><strong>注意：</strong>与 GLTFDocument 本身一样，所有 GLTFDocumentExtension 类都必须是无状态的才能正常运行。如果需要存储数据，请使用 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 或 <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference> 中的 <literal>set_additional_data</literal> 和 <literal>get_additional_data</literal> 方法。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/io/runtime_file_loading_and_saving"><inline classes="doc">运行时文件加载与保存</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="335"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-convert-scene-node"><inline classes="std std-ref">_convert_scene_node</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, gltf_node: <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>, scene_node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-export-node"><inline classes="std std-ref">_export_node</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, gltf_node: <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>, json: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-export-post"><inline classes="std std-ref">_export_post</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-export-preflight"><inline classes="std std-ref">_export_preflight</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, root: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-export-preserialize"><inline classes="std std-ref">_export_preserialize</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-generate-scene-node"><inline classes="std std-ref">_generate_scene_node</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, gltf_node: <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>, scene_parent: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-get-image-file-extension"><inline classes="std std-ref">_get_image_file_extension</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-get-saveable-image-formats"><inline classes="std std-ref">_get_saveable_image_formats</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-get-supported-extensions"><inline classes="std std-ref">_get_supported_extensions</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-import-node"><inline classes="std std-ref">_import_node</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, gltf_node: <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>, json: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-import-post"><inline classes="std std-ref">_import_post</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, root: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-import-post-parse"><inline classes="std std-ref">_import_post_parse</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-import-preflight"><inline classes="std std-ref">_import_preflight</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, extensions: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-parse-image-data"><inline classes="std std-ref">_parse_image_data</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, image_data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, mime_type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ret_image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-parse-node-extensions"><inline classes="std std-ref">_parse_node_extensions</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, gltf_node: <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>, extensions: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-parse-texture-json"><inline classes="std std-ref">_parse_texture_json</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, texture_json: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, ret_gltf_texture: <reference internal="True" refuri="class_gltftexture#class-gltftexture"><inline classes="std std-ref">GLTFTexture</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-save-image-at-path"><inline classes="std std-ref">_save_image_at_path</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>, file_path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, image_format: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, lossy_quality: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-serialize-image-to-bytes"><inline classes="std std-ref">_serialize_image_to_bytes</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>, image_dict: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, image_format: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, lossy_quality: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocumentextension-private-method-serialize-texture-json"><inline classes="std std-ref">_serialize_texture_json</inline></reference>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, texture_json: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, gltf_texture: <reference internal="True" refuri="class_gltftexture#class-gltftexture"><inline classes="std std-ref">GLTFTexture</inline></reference>, image_format: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-gltfdocumentextension-private-method-convert-scene-node"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-convert-scene-node" names="class_gltfdocumentextension_private_method__convert_scene_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_convert_scene_node</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, gltf_node: <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>, scene_node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-convert-scene-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-export-preflight"><inline classes="std std-ref">_export_preflight</inline></reference> 之后和 <reference internal="True" refid="class-gltfdocumentextension-private-method-export-preserialize"><inline classes="std std-ref">_export_preserialize</inline></reference> 之前运行。</paragraph>
            <paragraph>在转换来自 Godot 场景节点的数据时运行。该方法可用于将 Godot 场景节点的数据，处理成可以被 <reference internal="True" refid="class-gltfdocumentextension-private-method-export-node"><inline classes="std std-ref">_export_node</inline></reference> 使用的格式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-export-node"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-export-node" names="class_gltfdocumentextension_private_method__export_node"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_export_node</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, gltf_node: <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>, json: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-export-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-get-saveable-image-formats"><inline classes="std std-ref">_get_saveable_image_formats</inline></reference> 之后 <reference internal="True" refid="class-gltfdocumentextension-private-method-export-post"><inline classes="std std-ref">_export_post</inline></reference> 之前运行。如果该 <strong>GLTFDocumentExtension</strong> 用于导出图像，则会在 <reference internal="True" refid="class-gltfdocumentextension-private-method-serialize-texture-json"><inline classes="std std-ref">_serialize_texture_json</inline></reference> 之后运行。</paragraph>
            <paragraph>该方法可用于修改每个节点的最终 JSON。在序列化 JSON 之前，数据应主要被存储在 <literal>gltf_node</literal> 中，但如果原始 Godot <literal>node</literal> 可用，它也将被提供。如果该节点不可用，例如当导出不是从 Godot 场景生成的 GLTF 数据时，该节点可能为 null。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-export-post"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-export-post" names="class_gltfdocumentextension_private_method__export_post"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_export_post</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-export-post"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出过程的一部分。该方法在最后运行，在导出过程的所有其他部分之后。</paragraph>
            <paragraph>该方法可用于修改生成的 GLTF 文件的最终 JSON。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-export-preflight"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-export-preflight" names="class_gltfdocumentextension_private_method__export_preflight"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_export_preflight</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, root: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-export-preflight"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出过程的一部分。该方法将最初运行，在导出过程的所有其他部分之前。</paragraph>
            <paragraph>返回值用于确定该 <strong>GLTFDocumentExtension</strong> 实例是否应该用于导出一个给定的 GLTF 文件。如果为 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，则导出将使用该 <strong>GLTFDocumentExtension</strong> 实例。如果没有被重写，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-export-preserialize"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-export-preserialize" names="class_gltfdocumentextension_private_method__export_preserialize"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_export_preserialize</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-export-preserialize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导入过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-convert-scene-node"><inline classes="std std-ref">_convert_scene_node</inline></reference> 之后 <reference internal="True" refid="class-gltfdocumentextension-private-method-get-saveable-image-formats"><inline classes="std std-ref">_get_saveable_image_formats</inline></reference> 之前运行。</paragraph>
            <paragraph>该方法可用于在执行序列化之前更改状态。每次使用 <reference internal="True" refuri="class_gltfdocument#class-gltfdocument-method-generate-buffer"><inline classes="std std-ref">GLTFDocument.generate_buffer</inline></reference> 生成缓冲区或使用<reference internal="True" refuri="class_gltfdocument#class-gltfdocument-method-write-to-filesystem"><inline classes="std std-ref">GLTFDocument.write_to_filesystem</inline></reference>写入文件系统时，它都会运行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-generate-scene-node"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-generate-scene-node" names="class_gltfdocumentextension_private_method__generate_scene_node"><reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>_generate_scene_node</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, gltf_node: <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>, scene_parent: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-generate-scene-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导入过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-import-post-parse"><inline classes="std std-ref">_import_post_parse</inline></reference> 之后 <reference internal="True" refid="class-gltfdocumentextension-private-method-import-node"><inline classes="std std-ref">_import_node</inline></reference> 之前运行。</paragraph>
            <paragraph>当从 GLTFNode 生成一个 Godot 场景节点时运行。返回的节点将被添加到场景树中。如果将多个节点添加为返回节点的子节点，则可以在该步骤中生成这些节点。</paragraph>
            <paragraph><strong>注意：</strong>如果这是单个根节点，则 <literal>scene_parent</literal> 参数可以为 null。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-get-image-file-extension"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-get-image-file-extension" names="class_gltfdocumentextension_private_method__get_image_file_extension"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_image_file_extension</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-get-image-file-extension"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回用于保存图像数据的文件的文件扩展名，例如 <literal>".png"</literal>。如果定义了，当使用该扩展名处理图像并将图像保存到单独的文件时，图像字节将被复制到具有该扩展名的文件中。如果设置了该选项，则应该有一个能够导入该文件的 <reference internal="True" refuri="class_resourceimporter#class-resourceimporter"><inline classes="std std-ref">ResourceImporter</inline></reference> 类。如果未定义或为空，则 Godot 会将该图像保存到 PNG 文件中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-get-saveable-image-formats"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-get-saveable-image-formats" names="class_gltfdocumentextension_private_method__get_saveable_image_formats"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_saveable_image_formats</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-get-saveable-image-formats"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-convert-scene-node"><inline classes="std std-ref">_convert_scene_node</inline></reference> 之后和 <reference internal="True" refid="class-gltfdocumentextension-private-method-export-node"><inline classes="std std-ref">_export_node</inline></reference> 之前运行。</paragraph>
            <paragraph>返回可以由该扩展保存/导出的图像格式的数组。仅当 <reference internal="True" refuri="class_gltfdocument#class-gltfdocument"><inline classes="std std-ref">GLTFDocument</inline></reference> 的 <reference internal="True" refuri="class_gltfdocument#class-gltfdocument-property-image-format"><inline classes="std std-ref">GLTFDocument.image_format</inline></reference> 在该数组中时，才会选择该扩展作为图像导出器。如果选择该 <strong>GLTFDocumentExtension</strong> 作为图像导出器，则接下来将运行 <reference internal="True" refid="class-gltfdocumentextension-private-method-save-image-at-path"><inline classes="std std-ref">_save_image_at_path</inline></reference> 或 <reference internal="True" refid="class-gltfdocumentextension-private-method-serialize-image-to-bytes"><inline classes="std std-ref">_serialize_image_to_bytes</inline></reference> 方法之一，否则接下来将运行 <reference internal="True" refid="class-gltfdocumentextension-private-method-export-node"><inline classes="std std-ref">_export_node</inline></reference>。如果格式名称包含 <literal>"Lossy"</literal>，则会显示有损质量滑块。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-get-supported-extensions"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-get-supported-extensions" names="class_gltfdocumentextension_private_method__get_supported_extensions"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_supported_extensions</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-get-supported-extensions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导入过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-import-preflight"><inline classes="std std-ref">_import_preflight</inline></reference> 之后 <reference internal="True" refid="class-gltfdocumentextension-private-method-parse-node-extensions"><inline classes="std std-ref">_parse_node_extensions</inline></reference> 之前运行。</paragraph>
            <paragraph>返回一组被该 GLTFDocumentExtension 类支持的 GLTF 扩展。这用于验证是否可以加载一个具有所需扩展名的 GLTF 文件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-import-node"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-import-node" names="class_gltfdocumentextension_private_method__import_node"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_import_node</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, gltf_node: <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>, json: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-import-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导入过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-generate-scene-node"><inline classes="std std-ref">_generate_scene_node</inline></reference> 之后 <reference internal="True" refid="class-gltfdocumentextension-private-method-import-post"><inline classes="std std-ref">_import_post</inline></reference> 之前运行。</paragraph>
            <paragraph>该方法可用于对生成的每个 Godot 场景节点进行修改。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-import-post"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-import-post" names="class_gltfdocumentextension_private_method__import_post"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_import_post</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, root: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-import-post"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导入过程的一部分。该方法在最后运行，在导入过程的所有其他部分之后。</paragraph>
            <paragraph>该方法可用于修改导入过程生成的最终 Godot 场景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-import-post-parse"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-import-post-parse" names="class_gltfdocumentextension_private_method__import_post_parse"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_import_post_parse</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-import-post-parse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导入过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-parse-node-extensions"><inline classes="std std-ref">_parse_node_extensions</inline></reference> 之后 <reference internal="True" refid="class-gltfdocumentextension-private-method-generate-scene-node"><inline classes="std std-ref">_generate_scene_node</inline></reference> 之前运行。</paragraph>
            <paragraph>该方法可用于在解析后、生成节点并运行最终的各节点导入步骤之前，修改到目前为止导入的任何数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-import-preflight"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-import-preflight" names="class_gltfdocumentextension_private_method__import_preflight"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_import_preflight</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, extensions: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-import-preflight"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导入过程的一部分。该方法在最初运行，在导入过程的所有其他部分之前。</paragraph>
            <paragraph>返回值用于确定该 <strong>GLTFDocumentExtension</strong> 实例是否应该用于导入一个给定的 GLTF 文件。如果为 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，导入将使用该 <strong>GLTFDocumentExtension</strong> 实例。如果没有被重写，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-parse-image-data"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-parse-image-data" names="class_gltfdocumentextension_private_method__parse_image_data"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_parse_image_data</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, image_data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, mime_type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ret_image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-parse-image-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导入过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-parse-node-extensions"><inline classes="std std-ref">_parse_node_extensions</inline></reference> 之后 <reference internal="True" refid="class-gltfdocumentextension-private-method-parse-texture-json"><inline classes="std std-ref">_parse_texture_json</inline></reference> 之前运行。</paragraph>
            <paragraph>从 GLTF 文件中解析图像数据时运行。数据可以从单独的文件、URI 或缓冲中获取，然后作为字节数组传递。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-parse-node-extensions"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-parse-node-extensions" names="class_gltfdocumentextension_private_method__parse_node_extensions"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_parse_node_extensions</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, gltf_node: <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>, extensions: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-parse-node-extensions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导入过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-get-supported-extensions"><inline classes="std std-ref">_get_supported_extensions</inline></reference> 之后和 <reference internal="True" refid="class-gltfdocumentextension-private-method-import-post-parse"><inline classes="std std-ref">_import_post_parse</inline></reference> 之前运行。</paragraph>
            <paragraph>在解析 GLTFNode 的节点扩展时运行。该方法可用于将扩展 JSON 数据，处理成可被 <reference internal="True" refid="class-gltfdocumentextension-private-method-generate-scene-node"><inline classes="std std-ref">_generate_scene_node</inline></reference> 使用的格式。该返回值应该是 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 枚举中的一个成员。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-parse-texture-json"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-parse-texture-json" names="class_gltfdocumentextension_private_method__parse_texture_json"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_parse_texture_json</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, texture_json: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, ret_gltf_texture: <reference internal="True" refuri="class_gltftexture#class-gltftexture"><inline classes="std std-ref">GLTFTexture</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-parse-texture-json"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导入过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-parse-image-data"><inline classes="std std-ref">_parse_image_data</inline></reference> 之后 <reference internal="True" refid="class-gltfdocumentextension-private-method-generate-scene-node"><inline classes="std std-ref">_generate_scene_node</inline></reference> 之前运行。</paragraph>
            <paragraph>从 GLTF 纹理数组中解析纹理 JSON 时运行。可用于设置用作纹理的源图像索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-save-image-at-path"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-save-image-at-path" names="class_gltfdocumentextension_private_method__save_image_at_path"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_save_image_at_path</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>, file_path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, image_format: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, lossy_quality: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-save-image-at-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导入过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-get-saveable-image-formats"><inline classes="std std-ref">_get_saveable_image_formats</inline></reference> 之后 <reference internal="True" refid="class-gltfdocumentextension-private-method-serialize-texture-json"><inline classes="std std-ref">_serialize_texture_json</inline></reference> 之前运行。</paragraph>
            <paragraph>当与 GLTF 文件分开保存图像时运行该方法。嵌入图像时，将运行 <reference internal="True" refid="class-gltfdocumentextension-private-method-serialize-image-to-bytes"><inline classes="std std-ref">_serialize_image_to_bytes</inline></reference>。请注意，这些方法仅在选择该 <strong>GLTFDocumentExtension</strong> 作为图像导出器时运行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-serialize-image-to-bytes"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-serialize-image-to-bytes" names="class_gltfdocumentextension_private_method__serialize_image_to_bytes"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>_serialize_image_to_bytes</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>, image_dict: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, image_format: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, lossy_quality: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-serialize-image-to-bytes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-get-saveable-image-formats"><inline classes="std std-ref">_get_saveable_image_formats</inline></reference> 之后和 <reference internal="True" refid="class-gltfdocumentextension-private-method-serialize-texture-json"><inline classes="std std-ref">_serialize_texture_json</inline></reference> 之前运行。</paragraph>
            <paragraph>在 GLTF 文件中嵌入图像时运行该方法。当图像单独保存时，将运行 <reference internal="True" refid="class-gltfdocumentextension-private-method-save-image-at-path"><inline classes="std std-ref">_save_image_at_path</inline></reference>。请注意，这些方法仅在选择该 <strong>GLTFDocumentExtension</strong> 作为图像导出器时运行。</paragraph>
            <paragraph>该方法必须使用 <literal>"mimeType"</literal> 键在 <literal>image_dict</literal> 中设置该图像的 MIME 类型。例如，对于 PNG 图像，它将被设置为 <literal>"image/png"</literal>。该返回值必须是包含该图像数据的 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocumentextension-private-method-serialize-texture-json"></target>
            <paragraph classes="classref-method" ids="class-gltfdocumentextension-private-method-serialize-texture-json" names="class_gltfdocumentextension_private_method__serialize_texture_json"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_serialize_texture_json</strong>(state: <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, texture_json: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, gltf_texture: <reference internal="True" refuri="class_gltftexture#class-gltftexture"><inline classes="std std-ref">GLTFTexture</inline></reference>, image_format: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-gltfdocumentextension-private-method-serialize-texture-json"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出过程的一部分。该方法在 <reference internal="True" refid="class-gltfdocumentextension-private-method-save-image-at-path"><inline classes="std std-ref">_save_image_at_path</inline></reference> 或 <reference internal="True" refid="class-gltfdocumentextension-private-method-serialize-image-to-bytes"><inline classes="std std-ref">_serialize_image_to_bytes</inline></reference> 之后、<reference internal="True" refid="class-gltfdocumentextension-private-method-export-node"><inline classes="std std-ref">_export_node</inline></reference> 之前运行。请注意，该方法仅在选择该 <strong>GLTFDocumentExtension</strong> 作为图像导出器时运行。</paragraph>
            <paragraph>该方法可用于通过编辑 <literal>texture_json</literal> 设置该纹理 JSON 的扩展。还必须使用 <reference internal="True" refuri="class_gltfstate#class-gltfstate-method-add-used-extension"><inline classes="std std-ref">GLTFState.add_used_extension</inline></reference> 将该扩展添加为使用的扩展，如果你不提供后备，请务必将 <literal>required</literal> 设置为 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
