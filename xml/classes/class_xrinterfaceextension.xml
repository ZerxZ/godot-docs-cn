<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_xrinterfaceextension.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/XRInterfaceExtension.xml.</comment>
    <target refid="class-xrinterfaceextension"></target>
    <section ids="xrinterfaceextension class-xrinterfaceextension" names="xrinterfaceextension class_xrinterfaceextension">
        <title>XRInterfaceExtension</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>XR 接口扩展（插件）的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>外部 XR 接口插件应继承自这个类。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/xr/index"><inline classes="doc">XR 文档索引</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="56"></colspec>
                    <colspec colwidth="488"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-end-frame"><inline classes="std std-ref">_end_frame</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-anchor-detection-is-enabled"><inline classes="std std-ref">_get_anchor_detection_is_enabled</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-camera-feed-id"><inline classes="std std-ref">_get_camera_feed_id</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-camera-transform"><inline classes="std std-ref">_get_camera_transform</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-capabilities"><inline classes="std std-ref">_get_capabilities</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-color-texture"><inline classes="std std-ref">_get_color_texture</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-depth-texture"><inline classes="std std-ref">_get_depth_texture</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-name"><inline classes="std std-ref">_get_name</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-play-area"><inline classes="std std-ref">_get_play_area</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_xrinterface#enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-play-area-mode"><inline classes="std std-ref">_get_play_area_mode</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedfloat64array#class-packedfloat64array"><inline classes="std std-ref">PackedFloat64Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-projection-for-view"><inline classes="std std-ref">_get_projection_for_view</inline></reference>(view: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, aspect: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-render-target-size"><inline classes="std std-ref">_get_render_target_size</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-suggested-pose-names"><inline classes="std std-ref">_get_suggested_pose_names</inline></reference>(tracker_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-suggested-tracker-names"><inline classes="std std-ref">_get_suggested_tracker_names</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-system-info"><inline classes="std std-ref">_get_system_info</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_xrinterface#enum-xrinterface-trackingstatus"><inline classes="std std-ref">TrackingStatus</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-tracking-status"><inline classes="std std-ref">_get_tracking_status</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-transform-for-view"><inline classes="std std-ref">_get_transform_for_view</inline></reference>(view: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, cam_transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-velocity-texture"><inline classes="std std-ref">_get_velocity_texture</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-view-count"><inline classes="std std-ref">_get_view_count</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-get-vrs-texture"><inline classes="std std-ref">_get_vrs_texture</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-initialize"><inline classes="std std-ref">_initialize</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-is-initialized"><inline classes="std std-ref">_is_initialized</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-post-draw-viewport"><inline classes="std std-ref">_post_draw_viewport</inline></reference>(render_target: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, screen_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-pre-draw-viewport"><inline classes="std std-ref">_pre_draw_viewport</inline></reference>(render_target: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-pre-render"><inline classes="std std-ref">_pre_render</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-process"><inline classes="std std-ref">_process</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-set-anchor-detection-is-enabled"><inline classes="std std-ref">_set_anchor_detection_is_enabled</inline></reference>(enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-set-play-area-mode"><inline classes="std std-ref">_set_play_area_mode</inline></reference>(mode: <reference internal="True" refuri="class_xrinterface#enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-supports-play-area-mode"><inline classes="std std-ref">_supports_play_area_mode</inline></reference>(mode: <reference internal="True" refuri="class_xrinterface#enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-trigger-haptic-pulse"><inline classes="std std-ref">_trigger_haptic_pulse</inline></reference>(action_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, tracker_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, frequency: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, amplitude: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, duration_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, delay_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-private-method-uninitialize"><inline classes="std std-ref">_uninitialize</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-method-add-blit"><inline classes="std std-ref">add_blit</inline></reference>(render_target: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, dst_rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, use_layer: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, apply_lens_distortion: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, eye_center: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, k1: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, k2: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, upscale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, aspect_ratio: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-method-get-color-texture"><inline classes="std std-ref">get_color_texture</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-method-get-depth-texture"><inline classes="std std-ref">get_depth_texture</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-method-get-render-target-texture"><inline classes="std std-ref">get_render_target_texture</inline></reference>(render_target: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterfaceextension-method-get-velocity-texture"><inline classes="std std-ref">get_velocity_texture</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-xrinterfaceextension-private-method-end-frame"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-end-frame" names="class_xrinterfaceextension_private_method__end_frame"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_end_frame</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-end-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该接口处于活动状态，并且已提交队列，则调用此方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-anchor-detection-is-enabled"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-anchor-detection-is-enabled" names="class_xrinterfaceextension_private_method__get_anchor_detection_is_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_get_anchor_detection_is_enabled</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-anchor-detection-is-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果此接口启用了锚点检测，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-camera-feed-id"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-camera-feed-id" names="class_xrinterfaceextension_private_method__get_camera_feed_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_camera_feed_id</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-camera-feed-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在 <reference internal="True" refuri="class_cameraserver#class-cameraserver"><inline classes="std std-ref">CameraServer</inline></reference> 上注册的 <reference internal="True" refuri="class_camerafeed#class-camerafeed"><inline classes="std std-ref">CameraFeed</inline></reference> 的相机源 ID，该 ID 应在支持 AR 的设备（如果适用）上显示为背景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-camera-transform"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-camera-transform" names="class_xrinterfaceextension_private_method__get_camera_transform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>_get_camera_transform</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-camera-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回将 <reference internal="True" refuri="class_xrcamera3d#class-xrcamera3d"><inline classes="std std-ref">XRCamera3D</inline></reference> 放置在世界中的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-capabilities"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-capabilities" names="class_xrinterfaceextension_private_method__get_capabilities"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_capabilities</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-capabilities"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该接口的功能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-color-texture"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-color-texture" names="class_xrinterfaceextension_private_method__get_color_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_get_color_texture</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-color-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回接受渲染结果的颜色纹理（如果适用）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-depth-texture"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-depth-texture" names="class_xrinterfaceextension_private_method__get_depth_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_get_depth_texture</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-depth-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回接受渲染结果的深度纹理（如果适用）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-name"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-name" names="class_xrinterfaceextension_private_method__get_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>_get_name</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该接口的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-play-area"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-play-area" names="class_xrinterfaceextension_private_method__get_play_area"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>_get_play_area</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-play-area"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回表示游戏区域边界的 <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>（如果适用）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-play-area-mode"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-play-area-mode" names="class_xrinterfaceextension_private_method__get_play_area_mode"><reference internal="True" refuri="class_xrinterface#enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference> <strong>_get_play_area_mode</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-play-area-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回设置游戏区域的模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-projection-for-view"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-projection-for-view" names="class_xrinterfaceextension_private_method__get_projection_for_view"><reference internal="True" refuri="class_packedfloat64array#class-packedfloat64array"><inline classes="std std-ref">PackedFloat64Array</inline></reference> <strong>_get_projection_for_view</strong>(view: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, aspect: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z_far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-projection-for-view"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定试图的投影矩阵，形式为 <reference internal="True" refuri="class_packedfloat64array#class-packedfloat64array"><inline classes="std std-ref">PackedFloat64Array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-render-target-size"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-render-target-size" names="class_xrinterfaceextension_private_method__get_render_target_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_get_render_target_size</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-render-target-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回我们在这个接口上的渲染目标大小，覆盖标记为 XR 视口的 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-suggested-pose-names"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-suggested-pose-names" names="class_xrinterfaceextension_private_method__get_suggested_pose_names"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_suggested_pose_names</strong>(tracker_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-suggested-pose-names"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>，其中包含由此接口配置的姿势名称。请注意，用户的配置可以覆盖此列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-suggested-tracker-names"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-suggested-tracker-names" names="class_xrinterfaceextension_private_method__get_suggested_tracker_names"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_suggested_tracker_names</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-suggested-tracker-names"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>，其中包含由此接口配置的追踪器名称。请注意，用户的配置可以覆盖此列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-system-info"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-system-info" names="class_xrinterfaceextension_private_method__get_system_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_get_system_info</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-system-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含与这个接口相关的系统信息的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-tracking-status"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-tracking-status" names="class_xrinterfaceextension_private_method__get_tracking_status"><reference internal="True" refuri="class_xrinterface#enum-xrinterface-trackingstatus"><inline classes="std std-ref">TrackingStatus</inline></reference> <strong>_get_tracking_status</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-tracking-status"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定当前追踪状态的 <reference internal="True" refuri="class_xrinterface#enum-xrinterface-trackingstatus"><inline classes="std std-ref">TrackingStatus</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-transform-for-view"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-transform-for-view" names="class_xrinterfaceextension_private_method__get_transform_for_view"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>_get_transform_for_view</strong>(view: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, cam_transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-transform-for-view"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定视图的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-velocity-texture"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-velocity-texture" names="class_xrinterfaceextension_private_method__get_velocity_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_get_velocity_texture</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-velocity-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回作为渲染目标的速度纹理（如果适用）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-view-count"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-view-count" names="class_xrinterfaceextension_private_method__get_view_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_view_count</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-view-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此接口所需的视图数量，1 代表单目平面视图，2 代表双目立体视图。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-get-vrs-texture"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-get-vrs-texture" names="class_xrinterfaceextension_private_method__get_vrs_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_get_vrs_texture</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-get-vrs-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-initialize"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-initialize" names="class_xrinterfaceextension_private_method__initialize"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_initialize</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-initialize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>初始化该接口，成功时返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-is-initialized"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-is-initialized" names="class_xrinterfaceextension_private_method__is_initialized"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_initialized</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-is-initialized"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这个接口已初始化，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-post-draw-viewport"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-post-draw-viewport" names="class_xrinterfaceextension_private_method__post_draw_viewport"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_post_draw_viewport</strong>(render_target: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, screen_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-post-draw-viewport"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 XR <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 绘制逻辑完成后调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-pre-draw-viewport"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-pre-draw-viewport" names="class_xrinterfaceextension_private_method__pre_draw_viewport"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_pre_draw_viewport</strong>(render_target: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-pre-draw-viewport"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这是我们的主要 <strong>XRInterfaceExtension</strong>，则在我们开始为每个活动的 XR <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 处理 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 之前调用，如果该视口应该被渲染，则返回 <literal>true</literal>。如果用户摘下头戴式设备，XR 接口可能会返回 <literal>false</literal>，我们可以暂停渲染。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-pre-render"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-pre-render" names="class_xrinterfaceextension_private_method__pre_render"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_pre_render</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-pre-render"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这个 <strong>XRInterfaceExtension</strong> 在渲染开始前处于激活状态，则会调用这个函数，大多数 XR 接口都会在此时进行追踪同步。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-process"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-process" names="class_xrinterfaceextension_private_method__process"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_process</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-process"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这个 <strong>XRInterfaceExtension</strong> 在调用我们的物理和游戏处理前处于激活状态，则会调用这个函数。大多数 XR 接口都会在此时更新其 <reference internal="True" refuri="class_xrpositionaltracker#class-xrpositionaltracker"><inline classes="std std-ref">XRPositionalTracker</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-set-anchor-detection-is-enabled"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-set-anchor-detection-is-enabled" names="class_xrinterfaceextension_private_method__set_anchor_detection_is_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_anchor_detection_is_enabled</strong>(enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-set-anchor-detection-is-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果支持，则在此接口上启用锚点检测。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-set-play-area-mode"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-set-play-area-mode" names="class_xrinterfaceextension_private_method__set_play_area_mode"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_set_play_area_mode</strong>(mode: <reference internal="True" refuri="class_xrinterface#enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-set-play-area-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该接口的游玩区域模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-supports-play-area-mode"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-supports-play-area-mode" names="class_xrinterfaceextension_private_method__supports_play_area_mode"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_supports_play_area_mode</strong>(mode: <reference internal="True" refuri="class_xrinterface#enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-supports-play-area-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该接口支持该游玩区域模式，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-trigger-haptic-pulse"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-trigger-haptic-pulse" names="class_xrinterfaceextension_private_method__trigger_haptic_pulse"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_trigger_haptic_pulse</strong>(action_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, tracker_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, frequency: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, amplitude: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, duration_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, delay_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-trigger-haptic-pulse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在指定的追踪器上触发一次触觉脉冲。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-private-method-uninitialize"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-private-method-uninitialize" names="class_xrinterfaceextension_private_method__uninitialize"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_uninitialize</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-xrinterfaceextension-private-method-uninitialize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该接口取消初始化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-method-add-blit"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-method-add-blit" names="class_xrinterfaceextension_method_add_blit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_blit</strong>(render_target: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, dst_rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, use_layer: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, apply_lens_distortion: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, eye_center: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, k1: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, k2: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, upscale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, aspect_ratio: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-xrinterfaceextension-method-add-blit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将我们的渲染结果传输到屏幕上，还可以在此过程中应用镜头失真。只能在处理 <literal>_commit_views</literal> 时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-method-get-color-texture"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-method-get-color-texture" names="class_xrinterfaceextension_method_get_color_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_color_texture</strong>() <reference internal="True" refid="class-xrinterfaceextension-method-get-color-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-method-get-depth-texture"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-method-get-depth-texture" names="class_xrinterfaceextension_method_get_depth_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_depth_texture</strong>() <reference internal="True" refid="class-xrinterfaceextension-method-get-depth-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-method-get-render-target-texture"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-method-get-render-target-texture" names="class_xrinterfaceextension_method_get_render_target_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_render_target_texture</strong>(render_target: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-xrinterfaceextension-method-get-render-target-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果接口支持，则返回一个纹理的有效 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>，我们应更将当前帧渲染至该纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterfaceextension-method-get-velocity-texture"></target>
            <paragraph classes="classref-method" ids="class-xrinterfaceextension-method-get-velocity-texture" names="class_xrinterfaceextension_method_get_velocity_texture"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_velocity_texture</strong>() <reference internal="True" refid="class-xrinterfaceextension-method-get-velocity-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
