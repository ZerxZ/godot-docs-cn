<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_subviewport.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/SubViewport.xml.</comment>
    <target refid="class-subviewport"></target>
    <section ids="subviewport class-subviewport" names="subviewport class_subviewport">
        <title>SubViewport</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>游戏世界的界面，不会创建窗口，也不会直接绘制到屏幕上。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>SubViewport</strong> 会将场景中的一个矩形区域分离出来，能够独立显示。例如，可以用于在 3D 世界中显示 UI。</paragraph>
            <paragraph><strong>注意：</strong><strong>SubViewport</strong> 是 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 但不是 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference>，即它本身不绘制任何内容。要显示内容，<strong>SubViewport</strong> 的大小必须非零，并且应该被放在 <reference internal="True" refuri="class_subviewportcontainer#class-subviewportcontainer"><inline classes="std std-ref">SubViewportContainer</inline></reference> 内，或被分配给 <reference internal="True" refuri="class_viewporttexture#class-viewporttexture"><inline classes="std std-ref">ViewportTexture</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/rendering/viewports"><inline classes="doc">使用视口</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/2d_transforms"><inline classes="doc">Viewport 和画布变换</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 视口中的 GUI 演示" refuri="https://godotengine.org/asset-library/asset/2807">3D 视口中的 GUI 演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2D 视口中的 3D 演示" refuri="https://godotengine.org/asset-library/asset/2804">2D 视口中的 3D 演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 视口中的 2D 演示" refuri="https://godotengine.org/asset-library/asset/2803">3D 视口中的 2D 演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="屏幕捕捉演示" refuri="https://godotengine.org/asset-library/asset/2808">屏幕捕捉演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="动态分屏演示" refuri="https://godotengine.org/asset-library/asset/2806">动态分屏演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 分辨率缩放演示" refuri="https://godotengine.org/asset-library/asset/2805">3D 分辨率缩放演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="48"></colspec>
                    <colspec colwidth="88"></colspec>
                    <colspec colwidth="24"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-subviewport-clearmode"><inline classes="std std-ref">ClearMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-subviewport-property-render-target-clear-mode"><inline classes="std std-ref">render_target_clear_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-subviewport-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-subviewport-property-render-target-update-mode"><inline classes="std std-ref">render_target_update_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-subviewport-property-size"><inline classes="std std-ref">size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2i(512, 512)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-subviewport-property-size-2d-override"><inline classes="std std-ref">size_2d_override</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2i(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-subviewport-property-size-2d-override-stretch"><inline classes="std std-ref">size_2d_override_stretch</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-subviewport-clearmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-subviewport-clearmode" names="enum_subviewport_clearmode">enum <strong>ClearMode</strong>: <reference internal="True" refid="enum-subviewport-clearmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-subviewport-constant-clear-mode-always"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-subviewport-constant-clear-mode-always" names="class_subviewport_constant_clear_mode_always"><reference internal="True" refid="enum-subviewport-clearmode"><inline classes="std std-ref">ClearMode</inline></reference> <strong>CLEAR_MODE_ALWAYS</strong> = <literal>0</literal></paragraph>
            <paragraph>绘制前始终清除渲染目标。</paragraph>
            <target refid="class-subviewport-constant-clear-mode-never"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-subviewport-constant-clear-mode-never" names="class_subviewport_constant_clear_mode_never"><reference internal="True" refid="enum-subviewport-clearmode"><inline classes="std std-ref">ClearMode</inline></reference> <strong>CLEAR_MODE_NEVER</strong> = <literal>1</literal></paragraph>
            <paragraph>永不清除渲染目标。</paragraph>
            <target refid="class-subviewport-constant-clear-mode-once"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-subviewport-constant-clear-mode-once" names="class_subviewport_constant_clear_mode_once"><reference internal="True" refid="enum-subviewport-clearmode"><inline classes="std std-ref">ClearMode</inline></reference> <strong>CLEAR_MODE_ONCE</strong> = <literal>2</literal></paragraph>
            <paragraph>在下一帧清除渲染目标，然后切换到 <reference internal="True" refid="class-subviewport-constant-clear-mode-never"><inline classes="std std-ref">CLEAR_MODE_NEVER</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-subviewport-updatemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-subviewport-updatemode" names="enum_subviewport_updatemode">enum <strong>UpdateMode</strong>: <reference internal="True" refid="enum-subviewport-updatemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-subviewport-constant-update-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-subviewport-constant-update-disabled" names="class_subviewport_constant_update_disabled"><reference internal="True" refid="enum-subviewport-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>UPDATE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>不要更新渲染目标。</paragraph>
            <target refid="class-subviewport-constant-update-once"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-subviewport-constant-update-once" names="class_subviewport_constant_update_once"><reference internal="True" refid="enum-subviewport-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>UPDATE_ONCE</strong> = <literal>1</literal></paragraph>
            <paragraph>更新渲染目标一次，然后切换到 <reference internal="True" refid="class-subviewport-constant-update-disabled"><inline classes="std std-ref">UPDATE_DISABLED</inline></reference>。</paragraph>
            <target refid="class-subviewport-constant-update-when-visible"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-subviewport-constant-update-when-visible" names="class_subviewport_constant_update_when_visible"><reference internal="True" refid="enum-subviewport-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>UPDATE_WHEN_VISIBLE</strong> = <literal>2</literal></paragraph>
            <paragraph>仅在渲染目标可见时更新渲染目标。这是默认值。</paragraph>
            <target refid="class-subviewport-constant-update-when-parent-visible"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-subviewport-constant-update-when-parent-visible" names="class_subviewport_constant_update_when_parent_visible"><reference internal="True" refid="enum-subviewport-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>UPDATE_WHEN_PARENT_VISIBLE</strong> = <literal>3</literal></paragraph>
            <paragraph>仅在其父级可见时更新渲染目标。</paragraph>
            <target refid="class-subviewport-constant-update-always"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-subviewport-constant-update-always" names="class_subviewport_constant_update_always"><reference internal="True" refid="enum-subviewport-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>UPDATE_ALWAYS</strong> = <literal>4</literal></paragraph>
            <paragraph>始终更新渲染目标。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-subviewport-property-render-target-clear-mode"></target>
            <paragraph classes="classref-property" ids="class-subviewport-property-render-target-clear-mode" names="class_subviewport_property_render_target_clear_mode"><reference internal="True" refid="enum-subviewport-clearmode"><inline classes="std std-ref">ClearMode</inline></reference> <strong>render_target_clear_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-subviewport-property-render-target-clear-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clear_mode</strong>(value: <reference internal="True" refid="enum-subviewport-clearmode"><inline classes="std std-ref">ClearMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-subviewport-clearmode"><inline classes="std std-ref">ClearMode</inline></reference> <strong>get_clear_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该子视口用作渲染目标时的清除模式。</paragraph>
            <paragraph><strong>注意：</strong>此属性适用于 2D 用途。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-subviewport-property-render-target-update-mode"></target>
            <paragraph classes="classref-property" ids="class-subviewport-property-render-target-update-mode" names="class_subviewport_property_render_target_update_mode"><reference internal="True" refid="enum-subviewport-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>render_target_update_mode</strong> = <literal>2</literal> <reference internal="True" refid="class-subviewport-property-render-target-update-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_update_mode</strong>(value: <reference internal="True" refid="enum-subviewport-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-subviewport-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>get_update_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该子视口用作渲染目标时的更新模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-subviewport-property-size"></target>
            <paragraph classes="classref-property" ids="class-subviewport-property-size" names="class_subviewport_property_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>size</strong> = <literal>Vector2i(512, 512)</literal> <reference internal="True" refid="class-subviewport-property-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_size</strong>(value: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>子视口的宽度和高度。必须在两个维度上设置为大于或等于 2 像素的值。否则，不会显示任何内容。</paragraph>
            <paragraph><strong>注意：</strong>如果父节点是一个 <reference internal="True" refuri="class_subviewportcontainer#class-subviewportcontainer"><inline classes="std std-ref">SubViewportContainer</inline></reference>，并且它的 <reference internal="True" refuri="class_subviewportcontainer#class-subviewportcontainer-property-stretch"><inline classes="std std-ref">SubViewportContainer.stretch</inline></reference> 为 <literal>true</literal>，则无法手动更改该视口大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-subviewport-property-size-2d-override"></target>
            <paragraph classes="classref-property" ids="class-subviewport-property-size-2d-override" names="class_subviewport_property_size_2d_override"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>size_2d_override</strong> = <literal>Vector2i(0, 0)</literal> <reference internal="True" refid="class-subviewport-property-size-2d-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_size_2d_override</strong>(value: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_size_2d_override</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>子视口的 2D 尺寸覆盖。如果宽度或高度为 <literal>0</literal>，则禁用覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-subviewport-property-size-2d-override-stretch"></target>
            <paragraph classes="classref-property" ids="class-subviewport-property-size-2d-override-stretch" names="class_subviewport_property_size_2d_override_stretch"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>size_2d_override_stretch</strong> = <literal>false</literal> <reference internal="True" refid="class-subviewport-property-size-2d-override-stretch"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_size_2d_override_stretch</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_size_2d_override_stretch_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 2D 尺寸覆盖也会影响拉伸。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
