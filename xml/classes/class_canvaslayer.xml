<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_canvaslayer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/CanvasLayer.xml.</comment>
    <target refid="class-canvaslayer"></target>
    <section ids="canvaslayer class-canvaslayer" names="canvaslayer class_canvaslayer">
        <title>CanvasLayer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_parallaxbackground#class-parallaxbackground"><inline classes="std std-ref">ParallaxBackground</inline></reference></paragraph>
        <paragraph>用于 2D 场景中的对象的独立渲染的节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>CanvasLayer</strong> 的直接或间接子节点中，派生自 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 的节点会在该图层中进行绘制。图层是定义绘制顺序的数字索引。默认 2D 场景使用的索引为 <literal>0</literal>，因此索引为 <literal>-1</literal> 的 <strong>CanvasLayer</strong> 会在下方绘制，而索引为 <literal>1</literal> 的 <strong>CanvasLayer</strong> 会在上方绘制。无论节点在图层中的 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-z-index"><inline classes="std std-ref">CanvasItem.z_index</inline></reference> 是多少，这一顺序都成立。</paragraph>
            <paragraph><strong>CanvasLayer</strong> 可以隐藏，也可以跟随视口。因此常用于血条等 HUD（位于 <literal>1</literal> 或更高的图层上）和背景（位于 <literal>-1</literal> 或更低的图层上）。</paragraph>
            <paragraph><strong>注意：</strong>嵌入式 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 位于 <literal>1024</literal> 图层。位于 <literal>1025</literal> 或更高图层的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 会显示在嵌入式窗口之上。</paragraph>
            <paragraph><strong>注意：</strong>每个 <strong>CanvasLayer</strong> 都是在一个特定的 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 中绘制的，不能在多个 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 之间共享，见 <reference internal="True" refid="class-canvaslayer-property-custom-viewport"><inline classes="std std-ref">custom_viewport</inline></reference>。使用多个 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 时，例如分屏游戏中，你需要为每个想要绘制的 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 创建一个单独的 <strong>CanvasLayer</strong>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/2d_transforms"><inline classes="doc">Viewport 和画布变换</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/canvas_layers"><inline classes="doc">画布层</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2D Dodge The Creeps 演示" refuri="https://godotengine.org/asset-library/asset/2712">2D Dodge The Creeps 演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="84"></colspec>
                    <colspec colwidth="35"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-property-custom-viewport"><inline classes="std std-ref">custom_viewport</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-property-follow-viewport-enabled"><inline classes="std std-ref">follow_viewport_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-property-follow-viewport-scale"><inline classes="std std-ref">follow_viewport_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-property-layer"><inline classes="std std-ref">layer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-property-offset"><inline classes="std std-ref">offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-property-rotation"><inline classes="std std-ref">rotation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-property-scale"><inline classes="std std-ref">scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-property-transform"><inline classes="std std-ref">transform</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Transform2D(1, 0, 0, 1, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-property-visible"><inline classes="std std-ref">visible</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="88"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-method-get-canvas"><inline classes="std std-ref">get_canvas</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-method-get-final-transform"><inline classes="std std-ref">get_final_transform</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-method-hide"><inline classes="std std-ref">hide</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvaslayer-method-show"><inline classes="std std-ref">show</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-canvaslayer-signal-visibility-changed"></target>
            <paragraph classes="classref-signal" ids="class-canvaslayer-signal-visibility-changed" names="class_canvaslayer_signal_visibility_changed"><strong>visibility_changed</strong>() <reference internal="True" refid="class-canvaslayer-signal-visibility-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该层的可见性发生变化时触发。请参阅 <reference internal="True" refid="class-canvaslayer-property-visible"><inline classes="std std-ref">visible</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-canvaslayer-property-custom-viewport"></target>
            <paragraph classes="classref-property" ids="class-canvaslayer-property-custom-viewport" names="class_canvaslayer_property_custom_viewport"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>custom_viewport</strong> <reference internal="True" refid="class-canvaslayer-property-custom-viewport"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_viewport</strong>(value: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>get_custom_viewport</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>分配给该 <strong>CanvasLayer</strong> 的自定义 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 节点。如果为 <literal>null</literal>，则使用默认的视口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvaslayer-property-follow-viewport-enabled"></target>
            <paragraph classes="classref-property" ids="class-canvaslayer-property-follow-viewport-enabled" names="class_canvaslayer_property_follow_viewport_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>follow_viewport_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-canvaslayer-property-follow-viewport-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_follow_viewport</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_following_viewport</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>启用时，该 <strong>CanvasLayer</strong> 会使用视口的变换，所以它会随相机移动，而不是保持在屏幕上的某个固定位置。</paragraph>
            <paragraph>与 <reference internal="True" refid="class-canvaslayer-property-follow-viewport-scale"><inline classes="std std-ref">follow_viewport_scale</inline></reference> 配合可以实现伪 3D 效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvaslayer-property-follow-viewport-scale"></target>
            <paragraph classes="classref-property" ids="class-canvaslayer-property-follow-viewport-scale" names="class_canvaslayer_property_follow_viewport_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>follow_viewport_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-canvaslayer-property-follow-viewport-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_follow_viewport_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_follow_viewport_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>使用 <reference internal="True" refid="class-canvaslayer-property-follow-viewport-enabled"><inline classes="std std-ref">follow_viewport_enabled</inline></reference> 时缩放图层。移入到前景的图层应具有增加的缩放，而移入到背景的图层应具有减小的缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvaslayer-property-layer"></target>
            <paragraph classes="classref-property" ids="class-canvaslayer-property-layer" names="class_canvaslayer_property_layer"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>layer</strong> = <literal>1</literal> <reference internal="True" refid="class-canvaslayer-property-layer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_layer</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_layer</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>画布层的索引，用于确定绘制顺序。索引值小的画布层绘制在索引值大的画布层后面。</paragraph>
            <paragraph><strong>注意：</strong>如果多个 CanvasLayer 的画布层索引相同，一个 CanvasLayer 的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 子节点都会绘制在另一个 CanvasLayer 的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 子节点之后。哪个 CanvasLayer 画在前面并不一定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvaslayer-property-offset"></target>
            <paragraph classes="classref-property" ids="class-canvaslayer-property-offset" names="class_canvaslayer_property_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>offset</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-canvaslayer-property-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offset</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>图层的基本偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvaslayer-property-rotation"></target>
            <paragraph classes="classref-property" ids="class-canvaslayer-property-rotation" names="class_canvaslayer_property_rotation"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>rotation</strong> = <literal>0.0</literal> <reference internal="True" refid="class-canvaslayer-property-rotation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rotation</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_rotation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>图层的旋转弧度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvaslayer-property-scale"></target>
            <paragraph classes="classref-property" ids="class-canvaslayer-property-scale" names="class_canvaslayer_property_scale"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>scale</strong> = <literal>Vector2(1, 1)</literal> <reference internal="True" refid="class-canvaslayer-property-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_scale</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>图层的缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvaslayer-property-transform"></target>
            <paragraph classes="classref-property" ids="class-canvaslayer-property-transform" names="class_canvaslayer_property_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>transform</strong> = <literal>Transform2D(1, 0, 0, 1, 0, 0)</literal> <reference internal="True" refid="class-canvaslayer-property-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_transform</strong>(value: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_transform</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>图层的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvaslayer-property-visible"></target>
            <paragraph classes="classref-property" ids="class-canvaslayer-property-visible" names="class_canvaslayer_property_visible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>visible</strong> = <literal>true</literal> <reference internal="True" refid="class-canvaslayer-property-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_visible</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_visible</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为 <literal>false</literal> 时，该 <strong>CanvasLayer</strong> 下的所有 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 都会被隐藏。</paragraph>
            <paragraph>与 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-visible"><inline classes="std std-ref">CanvasItem.visible</inline></reference> 不同，<strong>CanvasLayer</strong> 的显示与否不会传播到其内部的层。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-canvaslayer-method-get-canvas"></target>
            <paragraph classes="classref-method" ids="class-canvaslayer-method-get-canvas" names="class_canvaslayer_method_get_canvas"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_canvas</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvaslayer-method-get-canvas"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此层使用的画布的 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvaslayer-method-get-final-transform"></target>
            <paragraph classes="classref-method" ids="class-canvaslayer-method-get-final-transform" names="class_canvaslayer_method_get_final_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_final_transform</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvaslayer-method-get-final-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从 <strong>CanvasLayer</strong> 坐标系到 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 坐标系的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvaslayer-method-hide"></target>
            <paragraph classes="classref-method" ids="class-canvaslayer-method-hide" names="class_canvaslayer_method_hide"><abbreviation explanation="无返回值。">void</abbreviation> <strong>hide</strong>() <reference internal="True" refid="class-canvaslayer-method-hide"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>隐藏该 <strong>CanvasLayer</strong> 下的所有 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference>。相当于将 <reference internal="True" refid="class-canvaslayer-property-visible"><inline classes="std std-ref">visible</inline></reference> 设为 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvaslayer-method-show"></target>
            <paragraph classes="classref-method" ids="class-canvaslayer-method-show" names="class_canvaslayer_method_show"><abbreviation explanation="无返回值。">void</abbreviation> <strong>show</strong>() <reference internal="True" refid="class-canvaslayer-method-show"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>显示该 <strong>CanvasLayer</strong> 下的所有 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference>。相当于将 <reference internal="True" refid="class-canvaslayer-property-visible"><inline classes="std std-ref">visible</inline></reference> 设为 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
