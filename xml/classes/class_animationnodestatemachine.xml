<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_animationnodestatemachine.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AnimationNodeStateMachine.xml.</comment>
    <target refid="class-animationnodestatemachine"></target>
    <section ids="animationnodestatemachine class-animationnodestatemachine" names="animationnodestatemachine class_animationnodestatemachine">
        <title>AnimationNodeStateMachine</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>带有多个 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> 的状态机，用于 <reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference>。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>包含表示动画状态的多个 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference>，以图的形式连接。可以使用最短路径算法，将节点过渡配置为自动发生或通过代码发生。要以编程的方式控制过渡，请从 <reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 节点获取 <reference internal="True" refuri="class_animationnodestatemachineplayback#class-animationnodestatemachineplayback"><inline classes="std std-ref">AnimationNodeStateMachinePlayback</inline></reference> 对象。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var state_machine = $AnimationTree.get("parameters/playback")
state_machine.travel("some_state")</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var stateMachine = GetNode&lt;AnimationTree&gt;("AnimationTree").Get("parameters/playback") as AnimationNodeStateMachinePlayback;
stateMachine.Travel("some_state");</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/animation/animation_tree"><inline classes="doc">使用 AnimationTree</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="74"></colspec>
                    <colspec colwidth="100"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-property-allow-transition-to-self"><inline classes="std std-ref">allow_transition_to_self</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-property-reset-ends"><inline classes="std std-ref">reset_ends</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-animationnodestatemachine-statemachinetype"><inline classes="std std-ref">StateMachineType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-property-state-machine-type"><inline classes="std std-ref">state_machine_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="87"></colspec>
                    <colspec colwidth="270"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-add-node"><inline classes="std std-ref">add_node</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, node: <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-add-transition"><inline classes="std std-ref">add_transition</inline></reference>(from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, transition: <reference internal="True" refuri="class_animationnodestatemachinetransition#class-animationnodestatemachinetransition"><inline classes="std std-ref">AnimationNodeStateMachineTransition</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-get-graph-offset"><inline classes="std std-ref">get_graph_offset</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-get-node"><inline classes="std std-ref">get_node</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-get-node-name"><inline classes="std std-ref">get_node_name</inline></reference>(node: <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-get-node-position"><inline classes="std std-ref">get_node_position</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_animationnodestatemachinetransition#class-animationnodestatemachinetransition"><inline classes="std std-ref">AnimationNodeStateMachineTransition</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-get-transition"><inline classes="std std-ref">get_transition</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-get-transition-count"><inline classes="std std-ref">get_transition_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-get-transition-from"><inline classes="std std-ref">get_transition_from</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-get-transition-to"><inline classes="std std-ref">get_transition_to</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-has-node"><inline classes="std std-ref">has_node</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-has-transition"><inline classes="std std-ref">has_transition</inline></reference>(from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-remove-node"><inline classes="std std-ref">remove_node</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-remove-transition"><inline classes="std std-ref">remove_transition</inline></reference>(from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-remove-transition-by-index"><inline classes="std std-ref">remove_transition_by_index</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-rename-node"><inline classes="std std-ref">rename_node</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, new_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-replace-node"><inline classes="std std-ref">replace_node</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, node: <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-set-graph-offset"><inline classes="std std-ref">set_graph_offset</inline></reference>(offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachine-method-set-node-position"><inline classes="std std-ref">set_node_position</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-animationnodestatemachine-statemachinetype"></target>
            <paragraph classes="classref-enumeration" ids="enum-animationnodestatemachine-statemachinetype" names="enum_animationnodestatemachine_statemachinetype">enum <strong>StateMachineType</strong>: <reference internal="True" refid="enum-animationnodestatemachine-statemachinetype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animationnodestatemachine-constant-state-machine-type-root"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnodestatemachine-constant-state-machine-type-root" names="class_animationnodestatemachine_constant_state_machine_type_root"><reference internal="True" refid="enum-animationnodestatemachine-statemachinetype"><inline classes="std std-ref">StateMachineType</inline></reference> <strong>STATE_MACHINE_TYPE_ROOT</strong> = <literal>0</literal></paragraph>
            <paragraph>寻道到开头被视为从开始状态开始播放。过渡到结束状态被视为退出状态机。</paragraph>
            <target refid="class-animationnodestatemachine-constant-state-machine-type-nested"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnodestatemachine-constant-state-machine-type-nested" names="class_animationnodestatemachine_constant_state_machine_type_nested"><reference internal="True" refid="enum-animationnodestatemachine-statemachinetype"><inline classes="std std-ref">StateMachineType</inline></reference> <strong>STATE_MACHINE_TYPE_NESTED</strong> = <literal>1</literal></paragraph>
            <paragraph>寻道到开头被视为在当前状态下寻道到动画的开头。过渡到结束状态，或每个状态的过渡都缺失，被视为退出状态机。</paragraph>
            <target refid="class-animationnodestatemachine-constant-state-machine-type-grouped"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnodestatemachine-constant-state-machine-type-grouped" names="class_animationnodestatemachine_constant_state_machine_type_grouped"><reference internal="True" refid="enum-animationnodestatemachine-statemachinetype"><inline classes="std std-ref">StateMachineType</inline></reference> <strong>STATE_MACHINE_TYPE_GROUPED</strong> = <literal>2</literal></paragraph>
            <paragraph>这是一个可以从父状态机控制的编组的状态机。它不能独立运行。父级或祖先中必须有一个 <reference internal="True" refid="class-animationnodestatemachine-property-state-machine-type"><inline classes="std std-ref">state_machine_type</inline></reference> 为 <reference internal="True" refid="class-animationnodestatemachine-constant-state-machine-type-root"><inline classes="std std-ref">STATE_MACHINE_TYPE_ROOT</inline></reference> 或 <reference internal="True" refid="class-animationnodestatemachine-constant-state-machine-type-nested"><inline classes="std std-ref">STATE_MACHINE_TYPE_NESTED</inline></reference> 的状态机。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-animationnodestatemachine-property-allow-transition-to-self"></target>
            <paragraph classes="classref-property" ids="class-animationnodestatemachine-property-allow-transition-to-self" names="class_animationnodestatemachine_property_allow_transition_to_self"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>allow_transition_to_self</strong> = <literal>false</literal> <reference internal="True" refid="class-animationnodestatemachine-property-allow-transition-to-self"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_allow_transition_to_self</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_allow_transition_to_self</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，允许使用 <reference internal="True" refuri="class_animationnodestatemachineplayback#class-animationnodestatemachineplayback-method-travel"><inline classes="std std-ref">AnimationNodeStateMachinePlayback.travel</inline></reference> 传送到当前状态。当在 <reference internal="True" refuri="class_animationnodestatemachineplayback#class-animationnodestatemachineplayback-method-travel"><inline classes="std std-ref">AnimationNodeStateMachinePlayback.travel</inline></reference> 中启用重置选项时，动画将重新启动。如果为 <literal>false</literal>，传送到当前状态时不会发生任何事情。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-property-reset-ends"></target>
            <paragraph classes="classref-property" ids="class-animationnodestatemachine-property-reset-ends" names="class_animationnodestatemachine_property_reset_ends"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>reset_ends</strong> = <literal>false</literal> <reference internal="True" refid="class-animationnodestatemachine-property-reset-ends"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_reset_ends</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>are_ends_reset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则将与开始和结束节点的淡入淡出视为与 RESET 动画的混合。</paragraph>
            <paragraph>大多数情况下，状态机的父级 <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> 执行额外的淡入淡出时，将这个属性设置为 <literal>false</literal> 并将父 <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> 和该状态机的开始和结束节点的淡入淡出时间设为相同的值能够得到不错的效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-property-state-machine-type"></target>
            <paragraph classes="classref-property" ids="class-animationnodestatemachine-property-state-machine-type" names="class_animationnodestatemachine_property_state_machine_type"><reference internal="True" refid="enum-animationnodestatemachine-statemachinetype"><inline classes="std std-ref">StateMachineType</inline></reference> <strong>state_machine_type</strong> = <literal>0</literal> <reference internal="True" refid="class-animationnodestatemachine-property-state-machine-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_state_machine_type</strong>(value: <reference internal="True" refid="enum-animationnodestatemachine-statemachinetype"><inline classes="std std-ref">StateMachineType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-animationnodestatemachine-statemachinetype"><inline classes="std std-ref">StateMachineType</inline></reference> <strong>get_state_machine_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该属性可以为不同用例定义过渡过程。另见 <reference internal="True" refid="enum-animationnodestatemachine-statemachinetype"><inline classes="std std-ref">StateMachineType</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-animationnodestatemachine-method-add-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-add-node" names="class_animationnodestatemachine_method_add_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_node</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, node: <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <reference internal="True" refid="class-animationnodestatemachine-method-add-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向图中添加一个新的动画节点。<literal>position</literal> 用于在编辑器中显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-add-transition"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-add-transition" names="class_animationnodestatemachine_method_add_transition"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_transition</strong>(from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, transition: <reference internal="True" refuri="class_animationnodestatemachinetransition#class-animationnodestatemachinetransition"><inline classes="std std-ref">AnimationNodeStateMachineTransition</inline></reference>) <reference internal="True" refid="class-animationnodestatemachine-method-add-transition"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定动画节点之间添加一个过渡。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-get-graph-offset"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-get-graph-offset" names="class_animationnodestatemachine_method_get_graph_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_graph_offset</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachine-method-get-graph-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回图的绘制偏移。用于在编辑器中显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-get-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-get-node" names="class_animationnodestatemachine_method_get_node"><reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> <strong>get_node</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachine-method-get-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定名称的动画节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-get-node-name"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-get-node-name" names="class_animationnodestatemachine_method_get_node_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_node_name</strong>(node: <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachine-method-get-node-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定动画节点的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-get-node-position"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-get-node-position" names="class_animationnodestatemachine_method_get_node_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_node_position</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachine-method-get-node-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定动画节点的坐标。用于在编辑器中显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-get-transition"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-get-transition" names="class_animationnodestatemachine_method_get_transition"><reference internal="True" refuri="class_animationnodestatemachinetransition#class-animationnodestatemachinetransition"><inline classes="std std-ref">AnimationNodeStateMachineTransition</inline></reference> <strong>get_transition</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachine-method-get-transition"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定的过渡。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-get-transition-count"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-get-transition-count" names="class_animationnodestatemachine_method_get_transition_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_transition_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachine-method-get-transition-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回图中的连接数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-get-transition-from"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-get-transition-from" names="class_animationnodestatemachine_method_get_transition_from"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_transition_from</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachine-method-get-transition-from"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定过渡的开始节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-get-transition-to"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-get-transition-to" names="class_animationnodestatemachine_method_get_transition_to"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_transition_to</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachine-method-get-transition-to"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定过渡的末端节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-has-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-has-node" names="class_animationnodestatemachine_method_has_node"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_node</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachine-method-has-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果图中包含给定的动画节点，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-has-transition"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-has-transition" names="class_animationnodestatemachine_method_has_transition"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_transition</strong>(from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachine-method-has-transition"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果在给定动画节点之间存在过渡，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-remove-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-remove-node" names="class_animationnodestatemachine_method_remove_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_node</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationnodestatemachine-method-remove-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从图中删除指定的动画节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-remove-transition"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-remove-transition" names="class_animationnodestatemachine_method_remove_transition"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_transition</strong>(from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationnodestatemachine-method-remove-transition"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除两个指定动画节点之间的过渡。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-remove-transition-by-index"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-remove-transition-by-index" names="class_animationnodestatemachine_method_remove_transition_by_index"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_transition_by_index</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-animationnodestatemachine-method-remove-transition-by-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>按索引删除给定的过渡。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-rename-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-rename-node" names="class_animationnodestatemachine_method_rename_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>rename_node</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, new_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationnodestatemachine-method-rename-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>重命名给定的动画节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-replace-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-replace-node" names="class_animationnodestatemachine_method_replace_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>replace_node</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, node: <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference>) <reference internal="True" refid="class-animationnodestatemachine-method-replace-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用新的动画节点替换给定的动画节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-set-graph-offset"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-set-graph-offset" names="class_animationnodestatemachine_method_set_graph_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_graph_offset</strong>(offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-animationnodestatemachine-method-set-graph-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置图形的绘制偏移。用于在编辑器中显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachine-method-set-node-position"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachine-method-set-node-position" names="class_animationnodestatemachine_method_set_node_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_node_position</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-animationnodestatemachine-method-set-node-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置动画节点的坐标。用于在编辑器中显示。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
