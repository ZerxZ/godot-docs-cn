<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_streampeertls.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/StreamPeerTLS.xml.</comment>
    <target refid="class-streampeertls"></target>
    <section ids="streampeertls class-streampeertls" names="streampeertls class_streampeertls">
        <title>StreamPeerTLS</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>处理 TLS 连接的流对等体。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>处理 TLS 连接的流对等体。此对象可用于连接到 TLS 服务器或接受单个 TLS 客户端连接。</paragraph>
            <paragraph><strong>注意：</strong>当导出到 Android 时，确保在导出项目或使用一键部署之前，在 Android 导出预设中启用 <literal>INTERNET</literal> 权限。否则，任何形式的网络通信都会被 Android 阻止。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/networking/ssl_certificates"><inline classes="doc">TLS 证书</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="42"></colspec>
                    <colspec colwidth="228"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertls-method-accept-stream"><inline classes="std std-ref">accept_stream</inline></reference>(stream: <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference>, server_options: <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertls-method-connect-to-stream"><inline classes="std std-ref">connect_to_stream</inline></reference>(stream: <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference>, common_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, client_options: <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertls-method-disconnect-from-stream"><inline classes="std std-ref">disconnect_from_stream</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-streampeertls-status"><inline classes="std std-ref">Status</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertls-method-get-status"><inline classes="std std-ref">get_status</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertls-method-get-stream"><inline classes="std std-ref">get_stream</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertls-method-poll"><inline classes="std std-ref">poll</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-streampeertls-status"></target>
            <paragraph classes="classref-enumeration" ids="enum-streampeertls-status" names="enum_streampeertls_status">enum <strong>Status</strong>: <reference internal="True" refid="enum-streampeertls-status"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-streampeertls-constant-status-disconnected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-streampeertls-constant-status-disconnected" names="class_streampeertls_constant_status_disconnected"><reference internal="True" refid="enum-streampeertls-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_DISCONNECTED</strong> = <literal>0</literal></paragraph>
            <paragraph>状态，表示 <strong>StreamPeerTLS</strong> 已断开连接。</paragraph>
            <target refid="class-streampeertls-constant-status-handshaking"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-streampeertls-constant-status-handshaking" names="class_streampeertls_constant_status_handshaking"><reference internal="True" refid="enum-streampeertls-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_HANDSHAKING</strong> = <literal>1</literal></paragraph>
            <paragraph>状态，表示 <strong>StreamPeerTLS</strong> 处于握手阶段。</paragraph>
            <target refid="class-streampeertls-constant-status-connected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-streampeertls-constant-status-connected" names="class_streampeertls_constant_status_connected"><reference internal="True" refid="enum-streampeertls-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_CONNECTED</strong> = <literal>2</literal></paragraph>
            <paragraph>状态，表示 <strong>StreamPeerTLS</strong> 已连接至主机。</paragraph>
            <target refid="class-streampeertls-constant-status-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-streampeertls-constant-status-error" names="class_streampeertls_constant_status_error"><reference internal="True" refid="enum-streampeertls-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_ERROR</strong> = <literal>3</literal></paragraph>
            <paragraph>状态，表示 <strong>StreamPeerTLS</strong> 处于出错状态。</paragraph>
            <target refid="class-streampeertls-constant-status-error-hostname-mismatch"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-streampeertls-constant-status-error-hostname-mismatch" names="class_streampeertls_constant_status_error_hostname_mismatch"><reference internal="True" refid="enum-streampeertls-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_ERROR_HOSTNAME_MISMATCH</strong> = <literal>4</literal></paragraph>
            <paragraph>错误状态，表示主机的 TLS 证书域名与请求验证的域名不匹配。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-streampeertls-method-accept-stream"></target>
            <paragraph classes="classref-method" ids="class-streampeertls-method-accept-stream" names="class_streampeertls_method_accept_stream"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>accept_stream</strong>(stream: <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference>, server_options: <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference>) <reference internal="True" refid="class-streampeertls-method-accept-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以服务器的身份接受对等体连接，使用给定的服务器选项 <literal>server_options</literal>。见 <reference internal="True" refuri="class_tlsoptions#class-tlsoptions-method-server"><inline classes="std std-ref">TLSOptions.server</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertls-method-connect-to-stream"></target>
            <paragraph classes="classref-method" ids="class-streampeertls-method-connect-to-stream" names="class_streampeertls_method_connect_to_stream"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>connect_to_stream</strong>(stream: <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference>, common_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, client_options: <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference> = null) <reference internal="True" refid="class-streampeertls-method-connect-to-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用底层 <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference> <literal>stream</literal> 连接到对等体，并对远程证书是否由给定的 <literal>common_name</literal> 签名进行验证。传入 <literal>client_options</literal> 可以自定义信任的证书颁发机构，也可以禁用通用名称验证。见 <reference internal="True" refuri="class_tlsoptions#class-tlsoptions-method-client"><inline classes="std std-ref">TLSOptions.client</inline></reference> 和 <reference internal="True" refuri="class_tlsoptions#class-tlsoptions-method-client-unsafe"><inline classes="std std-ref">TLSOptions.client_unsafe</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertls-method-disconnect-from-stream"></target>
            <paragraph classes="classref-method" ids="class-streampeertls-method-disconnect-from-stream" names="class_streampeertls_method_disconnect_from_stream"><abbreviation explanation="无返回值。">void</abbreviation> <strong>disconnect_from_stream</strong>() <reference internal="True" refid="class-streampeertls-method-disconnect-from-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>与主机断开连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertls-method-get-status"></target>
            <paragraph classes="classref-method" ids="class-streampeertls-method-get-status" names="class_streampeertls_method_get_status"><reference internal="True" refid="enum-streampeertls-status"><inline classes="std std-ref">Status</inline></reference> <strong>get_status</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-streampeertls-method-get-status"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回连接的状态。取值见 <reference internal="True" refid="enum-streampeertls-status"><inline classes="std std-ref">Status</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertls-method-get-stream"></target>
            <paragraph classes="classref-method" ids="class-streampeertls-method-get-stream" names="class_streampeertls_method_get_stream"><reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference> <strong>get_stream</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-streampeertls-method-get-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回底层 <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference> 连接，在 <reference internal="True" refid="class-streampeertls-method-accept-stream"><inline classes="std std-ref">accept_stream</inline></reference> 或 <reference internal="True" refid="class-streampeertls-method-connect-to-stream"><inline classes="std std-ref">connect_to_stream</inline></reference> 中使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertls-method-poll"></target>
            <paragraph classes="classref-method" ids="class-streampeertls-method-poll" names="class_streampeertls_method_poll"><abbreviation explanation="无返回值。">void</abbreviation> <strong>poll</strong>() <reference internal="True" refid="class-streampeertls-method-poll"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>轮询连接以检查传入的字节。在 <reference internal="True" refuri="class_streampeer#class-streampeer-method-get-available-bytes"><inline classes="std std-ref">StreamPeer.get_available_bytes</inline></reference> 之前调用它以使其正常工作。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
