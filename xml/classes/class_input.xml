<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_input.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Input.xml.</comment>
    <target refid="class-input"></target>
    <section ids="input class-input" names="input class_input">
        <title>Input</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于处理输入的单例。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Input</strong> 是处理键盘按键、鼠标按钮及移动、游戏手柄、输入动作等的单例。动作以及对应的事件可以在<strong>项目 &gt; 项目设置</strong>的<strong>输入映射</strong>选项卡中设置，也可以使用 <reference internal="True" refuri="class_inputmap#class-inputmap"><inline classes="std std-ref">InputMap</inline></reference> 类设置。</paragraph>
            <paragraph><strong>注意：</strong><strong>Input</strong> 的方法反映的是全局输入状态，不受 <reference internal="True" refuri="class_control#class-control-method-accept-event"><inline classes="std std-ref">Control.accept_event</inline></reference> 和 <reference internal="True" refuri="class_viewport#class-viewport-method-set-input-as-handled"><inline classes="std std-ref">Viewport.set_input_as_handled</inline></reference> 的影响，因为这两个方法处理的是输入在 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 中传播的方式。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/inputs/index"><inline classes="doc">输入文档索引</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2D Dodge The Creeps 演示" refuri="https://godotengine.org/asset-library/asset/2712">2D Dodge The Creeps 演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 体素演示" refuri="https://godotengine.org/asset-library/asset/2755">3D 体素演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="40"></colspec>
                    <colspec colwidth="80"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-property-emulate-mouse-from-touch"><inline classes="std std-ref">emulate_mouse_from_touch</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-property-emulate-touch-from-mouse"><inline classes="std std-ref">emulate_touch_from_mouse</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-input-mousemode"><inline classes="std std-ref">MouseMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-property-mouse-mode"><inline classes="std std-ref">mouse_mode</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-property-use-accumulated-input"><inline classes="std std-ref">use_accumulated_input</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="73"></colspec>
                    <colspec colwidth="309"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-action-press"><inline classes="std std-ref">action_press</inline></reference>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-action-release"><inline classes="std std-ref">action_release</inline></reference>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-add-joy-mapping"><inline classes="std std-ref">add_joy_mapping</inline></reference>(mapping: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, update_existing: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-flush-buffered-events"><inline classes="std std-ref">flush_buffered_events</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-accelerometer"><inline classes="std std-ref">get_accelerometer</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-action-raw-strength"><inline classes="std std-ref">get_action_raw_strength</inline></reference>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-action-strength"><inline classes="std std-ref">get_action_strength</inline></reference>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-axis"><inline classes="std std-ref">get_axis</inline></reference>(negative_action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, positive_action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-connected-joypads"><inline classes="std std-ref">get_connected_joypads</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-current-cursor-shape"><inline classes="std std-ref">get_current_cursor_shape</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-gravity"><inline classes="std std-ref">get_gravity</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-gyroscope"><inline classes="std std-ref">get_gyroscope</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-joy-axis"><inline classes="std std-ref">get_joy_axis</inline></reference>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, axis: <reference internal="True" refuri="class_@globalscope#enum-globalscope-joyaxis"><inline classes="std std-ref">JoyAxis</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-joy-guid"><inline classes="std std-ref">get_joy_guid</inline></reference>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-joy-info"><inline classes="std std-ref">get_joy_info</inline></reference>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-joy-name"><inline classes="std std-ref">get_joy_name</inline></reference>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-joy-vibration-duration"><inline classes="std std-ref">get_joy_vibration_duration</inline></reference>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-joy-vibration-strength"><inline classes="std std-ref">get_joy_vibration_strength</inline></reference>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-last-mouse-screen-velocity"><inline classes="std std-ref">get_last_mouse_screen_velocity</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-last-mouse-velocity"><inline classes="std std-ref">get_last_mouse_velocity</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-magnetometer"><inline classes="std std-ref">get_magnetometer</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_@globalscope#enum-globalscope-mousebuttonmask"><inline classes="std std-ref">MouseButtonMask</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-mouse-button-mask"><inline classes="std std-ref">get_mouse_button_mask</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-get-vector"><inline classes="std std-ref">get_vector</inline></reference>(negative_x: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, positive_x: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, negative_y: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, positive_y: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, deadzone: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-is-action-just-pressed"><inline classes="std std-ref">is_action_just_pressed</inline></reference>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-is-action-just-released"><inline classes="std std-ref">is_action_just_released</inline></reference>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-is-action-pressed"><inline classes="std std-ref">is_action_pressed</inline></reference>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-is-anything-pressed"><inline classes="std std-ref">is_anything_pressed</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-is-joy-button-pressed"><inline classes="std std-ref">is_joy_button_pressed</inline></reference>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button: <reference internal="True" refuri="class_@globalscope#enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-is-joy-known"><inline classes="std std-ref">is_joy_known</inline></reference>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-is-key-label-pressed"><inline classes="std std-ref">is_key_label_pressed</inline></reference>(keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-is-key-pressed"><inline classes="std std-ref">is_key_pressed</inline></reference>(keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-is-mouse-button-pressed"><inline classes="std std-ref">is_mouse_button_pressed</inline></reference>(button: <reference internal="True" refuri="class_@globalscope#enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-is-physical-key-pressed"><inline classes="std std-ref">is_physical_key_pressed</inline></reference>(keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-parse-input-event"><inline classes="std std-ref">parse_input_event</inline></reference>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-remove-joy-mapping"><inline classes="std std-ref">remove_joy_mapping</inline></reference>(guid: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-set-accelerometer"><inline classes="std std-ref">set_accelerometer</inline></reference>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-set-custom-mouse-cursor"><inline classes="std std-ref">set_custom_mouse_cursor</inline></reference>(image: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>, shape: <reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> = 0, hotspot: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-set-default-cursor-shape"><inline classes="std std-ref">set_default_cursor_shape</inline></reference>(shape: <reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-set-gravity"><inline classes="std std-ref">set_gravity</inline></reference>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-set-gyroscope"><inline classes="std std-ref">set_gyroscope</inline></reference>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-set-magnetometer"><inline classes="std std-ref">set_magnetometer</inline></reference>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-should-ignore-device"><inline classes="std std-ref">should_ignore_device</inline></reference>(vendor_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, product_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-start-joy-vibration"><inline classes="std std-ref">start_joy_vibration</inline></reference>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, weak_magnitude: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, strong_magnitude: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, duration: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-stop-joy-vibration"><inline classes="std std-ref">stop_joy_vibration</inline></reference>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-vibrate-handheld"><inline classes="std std-ref">vibrate_handheld</inline></reference>(duration_ms: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 500, amplitude: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-input-method-warp-mouse"><inline classes="std std-ref">warp_mouse</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-input-signal-joy-connection-changed"></target>
            <paragraph classes="classref-signal" ids="class-input-signal-joy-connection-changed" names="class_input_signal_joy_connection_changed"><strong>joy_connection_changed</strong>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, connected: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-input-signal-joy-connection-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>连接或断开游戏手柄设备时触发。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-input-mousemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-input-mousemode" names="enum_input_mousemode">enum <strong>MouseMode</strong>: <reference internal="True" refid="enum-input-mousemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-input-constant-mouse-mode-visible"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-mouse-mode-visible" names="class_input_constant_mouse_mode_visible"><reference internal="True" refid="enum-input-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>MOUSE_MODE_VISIBLE</strong> = <literal>0</literal></paragraph>
            <paragraph>如果鼠标光标处于隐藏状态，则使其可见。</paragraph>
            <target refid="class-input-constant-mouse-mode-hidden"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-mouse-mode-hidden" names="class_input_constant_mouse_mode_hidden"><reference internal="True" refid="enum-input-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>MOUSE_MODE_HIDDEN</strong> = <literal>1</literal></paragraph>
            <paragraph>如果鼠标光标是可见的，则使其隐藏。</paragraph>
            <target refid="class-input-constant-mouse-mode-captured"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-mouse-mode-captured" names="class_input_constant_mouse_mode_captured"><reference internal="True" refid="enum-input-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>MOUSE_MODE_CAPTURED</strong> = <literal>2</literal></paragraph>
            <paragraph>捕获鼠标。鼠标将被隐藏，其位置被锁定在窗口管理器窗口的中心。</paragraph>
            <paragraph><strong>注意：</strong>如果你想在这种模式下处理鼠标的移动，则需要使用 <reference internal="True" refuri="class_inputeventmousemotion#class-inputeventmousemotion-property-relative"><inline classes="std std-ref">InputEventMouseMotion.relative</inline></reference>。</paragraph>
            <target refid="class-input-constant-mouse-mode-confined"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-mouse-mode-confined" names="class_input_constant_mouse_mode_confined"><reference internal="True" refid="enum-input-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>MOUSE_MODE_CONFINED</strong> = <literal>3</literal></paragraph>
            <paragraph>将鼠标光标限制在游戏窗口内，并使其可见。</paragraph>
            <target refid="class-input-constant-mouse-mode-confined-hidden"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-mouse-mode-confined-hidden" names="class_input_constant_mouse_mode_confined_hidden"><reference internal="True" refid="enum-input-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>MOUSE_MODE_CONFINED_HIDDEN</strong> = <literal>4</literal></paragraph>
            <paragraph>将鼠标光标限制在游戏窗口内，并使其隐藏。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-input-cursorshape"></target>
            <paragraph classes="classref-enumeration" ids="enum-input-cursorshape" names="enum_input_cursorshape">enum <strong>CursorShape</strong>: <reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-input-constant-cursor-arrow"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-arrow" names="class_input_constant_cursor_arrow"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_ARROW</strong> = <literal>0</literal></paragraph>
            <paragraph>箭头光标。标准，默认指向光标。</paragraph>
            <target refid="class-input-constant-cursor-ibeam"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-ibeam" names="class_input_constant_cursor_ibeam"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_IBEAM</strong> = <literal>1</literal></paragraph>
            <paragraph>I 形光标。通常用于指示点击鼠标后文本光标的位置。</paragraph>
            <target refid="class-input-constant-cursor-pointing-hand"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-pointing-hand" names="class_input_constant_cursor_pointing_hand"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_POINTING_HAND</strong> = <literal>2</literal></paragraph>
            <paragraph>指向手形光标。通常用在指示链接或其他可交互项上。</paragraph>
            <target refid="class-input-constant-cursor-cross"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-cross" names="class_input_constant_cursor_cross"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_CROSS</strong> = <literal>3</literal></paragraph>
            <paragraph>十字光标。通常出现在可以执行绘制操作或进行选择的区域上方。</paragraph>
            <target refid="class-input-constant-cursor-wait"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-wait" names="class_input_constant_cursor_wait"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_WAIT</strong> = <literal>4</literal></paragraph>
            <paragraph>等待光标。表示应用程序正忙于执行某项操作，并且它在操作期间无法使用（例如，某些东西正在阻塞其主线程）。</paragraph>
            <target refid="class-input-constant-cursor-busy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-busy" names="class_input_constant_cursor_busy"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_BUSY</strong> = <literal>5</literal></paragraph>
            <paragraph>忙碌光标。表示应用程序正忙于执行某项操作，并且它在操作期间仍然可用。</paragraph>
            <target refid="class-input-constant-cursor-drag"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-drag" names="class_input_constant_cursor_drag"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_DRAG</strong> = <literal>6</literal></paragraph>
            <paragraph>拖动光标。通常在拖动某物时显示。</paragraph>
            <paragraph><strong>注意：</strong>Windows 上没有拖动光标，因此 <reference internal="True" refid="class-input-constant-cursor-drag"><inline classes="std std-ref">CURSOR_DRAG</inline></reference> 与该平台的 <reference internal="True" refid="class-input-constant-cursor-move"><inline classes="std std-ref">CURSOR_MOVE</inline></reference> 相同。</paragraph>
            <target refid="class-input-constant-cursor-can-drop"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-can-drop" names="class_input_constant_cursor_can_drop"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_CAN_DROP</strong> = <literal>7</literal></paragraph>
            <paragraph>可以放下的光标。通常在拖动东西时显示，表示可以在当前位置放下。</paragraph>
            <target refid="class-input-constant-cursor-forbidden"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-forbidden" names="class_input_constant_cursor_forbidden"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_FORBIDDEN</strong> = <literal>8</literal></paragraph>
            <paragraph>禁止的光标。表示当前操作是被禁止的（例如，拖动东西时）或某个位置的控件被禁用。</paragraph>
            <target refid="class-input-constant-cursor-vsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-vsize" names="class_input_constant_cursor_vsize"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_VSIZE</strong> = <literal>9</literal></paragraph>
            <paragraph>垂直调整大小的光标。一个双头的垂直箭头。它告诉用户他们可以垂直地调整窗口或面板的大小。</paragraph>
            <target refid="class-input-constant-cursor-hsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-hsize" names="class_input_constant_cursor_hsize"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_HSIZE</strong> = <literal>10</literal></paragraph>
            <paragraph>水平调整尺寸的光标。一个双头的水平箭头。它告诉用户他们可以水平调整窗口或面板的大小。</paragraph>
            <target refid="class-input-constant-cursor-bdiagsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-bdiagsize" names="class_input_constant_cursor_bdiagsize"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_BDIAGSIZE</strong> = <literal>11</literal></paragraph>
            <paragraph>窗口调整大小的光标。该光标是一个双头箭头，从左下方到右上方。它告诉用户他们可以在水平和垂直方向上调整窗口或面板的大小。</paragraph>
            <target refid="class-input-constant-cursor-fdiagsize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-fdiagsize" names="class_input_constant_cursor_fdiagsize"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_FDIAGSIZE</strong> = <literal>12</literal></paragraph>
            <paragraph>窗口调整大小的光标。是一个双头的箭头，从左上角到右下角，与 <reference internal="True" refid="class-input-constant-cursor-bdiagsize"><inline classes="std std-ref">CURSOR_BDIAGSIZE</inline></reference> 相反。它告诉用户他们可以在水平和垂直方向上调整窗口或面板的大小。</paragraph>
            <target refid="class-input-constant-cursor-move"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-move" names="class_input_constant_cursor_move"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_MOVE</strong> = <literal>13</literal></paragraph>
            <paragraph>移动光标。表示那些东西可以移动。</paragraph>
            <target refid="class-input-constant-cursor-vsplit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-vsplit" names="class_input_constant_cursor_vsplit"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_VSPLIT</strong> = <literal>14</literal></paragraph>
            <paragraph>垂直拆分鼠标光标。在 Windows 上与 <reference internal="True" refid="class-input-constant-cursor-vsize"><inline classes="std std-ref">CURSOR_VSIZE</inline></reference> 相同。</paragraph>
            <target refid="class-input-constant-cursor-hsplit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-hsplit" names="class_input_constant_cursor_hsplit"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_HSPLIT</strong> = <literal>15</literal></paragraph>
            <paragraph>水平分割的鼠标光标。在 Windows 上与 <reference internal="True" refid="class-input-constant-cursor-hsize"><inline classes="std std-ref">CURSOR_HSIZE</inline></reference> 相同。</paragraph>
            <target refid="class-input-constant-cursor-help"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-input-constant-cursor-help" names="class_input_constant_cursor_help"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>CURSOR_HELP</strong> = <literal>16</literal></paragraph>
            <paragraph>帮助光标。通常是一个问号。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-input-property-emulate-mouse-from-touch"></target>
            <paragraph classes="classref-property" ids="class-input-property-emulate-mouse-from-touch" names="class_input_property_emulate_mouse_from_touch"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>emulate_mouse_from_touch</strong> <reference internal="True" refid="class-input-property-emulate-mouse-from-touch"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_emulate_mouse_from_touch</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_emulating_mouse_from_touch</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在点击或滑动触摸屏时发送鼠标输入事件。另请参阅 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-devices-pointing-emulate-mouse-from-touch"><inline classes="std std-ref">ProjectSettings.input_devices/pointing/emulate_mouse_from_touch</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-property-emulate-touch-from-mouse"></target>
            <paragraph classes="classref-property" ids="class-input-property-emulate-touch-from-mouse" names="class_input_property_emulate_touch_from_mouse"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>emulate_touch_from_mouse</strong> <reference internal="True" refid="class-input-property-emulate-touch-from-mouse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_emulate_touch_from_mouse</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_emulating_touch_from_mouse</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在点击或拖动鼠标时发送触摸输入事件。另请参阅 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-devices-pointing-emulate-touch-from-mouse"><inline classes="std std-ref">ProjectSettings.input_devices/pointing/emulate_touch_from_mouse</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-property-mouse-mode"></target>
            <paragraph classes="classref-property" ids="class-input-property-mouse-mode" names="class_input_property_mouse_mode"><reference internal="True" refid="enum-input-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>mouse_mode</strong> <reference internal="True" refid="class-input-property-mouse-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_mouse_mode</strong>(value: <reference internal="True" refid="enum-input-mousemode"><inline classes="std std-ref">MouseMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-input-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> <strong>get_mouse_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制鼠标模式。详情请参阅 <reference internal="True" refid="enum-input-mousemode"><inline classes="std std-ref">MouseMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-property-use-accumulated-input"></target>
            <paragraph classes="classref-property" ids="class-input-property-use-accumulated-input" names="class_input_property_use_accumulated_input"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_accumulated_input</strong> <reference internal="True" refid="class-input-property-use-accumulated-input"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_accumulated_input</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_accumulated_input</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则操作系统发送的相似输入事件将被累积。当输入累积被启用时，在帧期间内所有生成的输入事件，将在帧完成渲染时被合并并发出。因此，这会将每秒输入方法被调用的数量限制为渲染 FPS。</paragraph>
            <paragraph>输入累积可以被禁用，以增加 CPU 使用率为代价，获得稍微更具精确性/反应性的输入。在需要徒手绘制线条的应用程序中，输入累积通常应在用户绘制线条时被禁用，以获得与实际输入非常接近的结果。</paragraph>
            <paragraph><strong>注意：</strong>输入累积默认是<emphasis>启用的</emphasis> 。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-input-method-action-press"></target>
            <paragraph classes="classref-method" ids="class-input-method-action-press" names="class_input_method_action_press"><abbreviation explanation="无返回值。">void</abbreviation> <strong>action_press</strong>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0) <reference internal="True" refid="class-input-method-action-press"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>这将模拟按下指定的按键动作。</paragraph>
            <paragraph>强度可以用于非布尔运算的动作，它的范围在 0 到 1 之间，代表给定动作的力度。</paragraph>
            <paragraph><strong>注意：</strong>这个方法不会引起任何 <reference internal="True" refuri="class_node#class-node-private-method-input"><inline classes="std std-ref">Node._input</inline></reference> 调用。它旨在与 <reference internal="True" refid="class-input-method-is-action-pressed"><inline classes="std std-ref">is_action_pressed</inline></reference> 和 <reference internal="True" refid="class-input-method-is-action-just-pressed"><inline classes="std std-ref">is_action_just_pressed</inline></reference> 一起使用。如果你想模拟 <literal>_input</literal>，请使用 <reference internal="True" refid="class-input-method-parse-input-event"><inline classes="std std-ref">parse_input_event</inline></reference> 代替。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-action-release"></target>
            <paragraph classes="classref-method" ids="class-input-method-action-release" names="class_input_method_action_release"><abbreviation explanation="无返回值。">void</abbreviation> <strong>action_release</strong>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-input-method-action-release"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果已按下指定操作，那么将释放它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-add-joy-mapping"></target>
            <paragraph classes="classref-method" ids="class-input-method-add-joy-mapping" names="class_input_method_add_joy_mapping"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_joy_mapping</strong>(mapping: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, update_existing: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-input-method-add-joy-mapping"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在映射数据库中添加新的映射条目（SDL2 格式）。可选更新已连接的设备。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-flush-buffered-events"></target>
            <paragraph classes="classref-method" ids="class-input-method-flush-buffered-events" names="class_input_method_flush_buffered_events"><abbreviation explanation="无返回值。">void</abbreviation> <strong>flush_buffered_events</strong>() <reference internal="True" refid="class-input-method-flush-buffered-events"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将当前缓冲区内的所有输入事件发送给游戏循环。这些事件可能是由于累积输入（<reference internal="True" refid="class-input-property-use-accumulated-input"><inline classes="std std-ref">use_accumulated_input</inline></reference>）或敏捷输入刷新（<reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-devices-buffering-agile-event-flushing"><inline classes="std std-ref">ProjectSettings.input_devices/buffering/agile_event_flushing</inline></reference>）而被缓冲的结果。</paragraph>
            <paragraph>引擎已经会在关键的执行点执行此操作，至少每帧一次。然而，在你想要精确控制事件处理时间的高级情况下，这可能是有用的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-accelerometer"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-accelerometer" names="class_input_method_get_accelerometer"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_accelerometer</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-accelerometer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设备有加速度计传感器，则返回该设备加速度计传感器的加速度，单位为 m/s²。否则，该方法返回 <reference internal="True" refuri="class_vector3#class-vector3-constant-zero"><inline classes="std std-ref">Vector3.ZERO</inline></reference>。</paragraph>
            <paragraph>请注意，即使你的设备具有一个加速度计，在从编辑器运行时，该方法也会返回一个空的 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>。必须将项目导出到一个支持的设备上，才能从加速度计读取值。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅适用于 Android 和 iOS。在其他平台上，它总是返回 <reference internal="True" refuri="class_vector3#class-vector3-constant-zero"><inline classes="std std-ref">Vector3.ZERO</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-action-raw-strength"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-action-raw-strength" names="class_input_method_get_action_raw_strength"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_action_raw_strength</strong>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-action-raw-strength"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个介于 0 和 1 之间的值，表示给定动作的原始强度，忽略动作的死区。在大多数情况下，应该改用 <reference internal="True" refid="class-input-method-get-action-strength"><inline classes="std std-ref">get_action_strength</inline></reference>。</paragraph>
            <paragraph>如果 <literal>exact_match</literal> 为 <literal>false</literal>，它会忽略 <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference> 和 <reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference> 事件的额外输入修饰键，以及 <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference> 事件的方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-action-strength"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-action-strength" names="class_input_method_get_action_strength"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_action_strength</strong>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-action-strength"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个介于 0 和 1 之间的值，表示给定动作的强度。例如，在游戏手柄中，轴（模拟摇杆或 L2、R2 触发器）离死区越远，该值将越接近 1。如果动作被映射到一个如键盘一样没有轴的控制器时，返回值将为 0 或 1。</paragraph>
            <paragraph>如果 <literal>exact_match</literal> 为 <literal>false</literal>，它会忽略 <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference> 和 <reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference> 事件的额外输入修饰键，以及 <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference> 事件的方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-axis"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-axis" names="class_input_method_get_axis"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_axis</strong>(negative_action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, positive_action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-axis"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过指定两个动作来获取轴的输入，一个是负的，一个是正的。</paragraph>
            <paragraph>这是 <literal>Input.get_action_strength("positive_action")-Input.get_action_strength("negative_action")</literal> 的简写。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-connected-joypads"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-connected-joypads" names="class_input_method_get_connected_joypads"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>] <strong>get_connected_joypads</strong>() <reference internal="True" refid="class-input-method-get-connected-joypads"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，包含当前所有连接手柄的设备 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-current-cursor-shape"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-current-cursor-shape" names="class_input_method_get_current_cursor_shape"><reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> <strong>get_current_cursor_shape</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-current-cursor-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前指定的光标形状（见 <reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-gravity"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-gravity" names="class_input_method_get_gravity"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_gravity</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-gravity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设备有加速度计传感器，则返回该设备有加速度计传感器的重力，单位为 m/s²。否则，该方法返回 <reference internal="True" refuri="class_vector3#class-vector3-constant-zero"><inline classes="std std-ref">Vector3.ZERO</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅适用于 Android 和 iOS。在其他平台上，它总是返回 <reference internal="True" refuri="class_vector3#class-vector3-constant-zero"><inline classes="std std-ref">Vector3.ZERO</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-gyroscope"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-gyroscope" names="class_input_method_get_gyroscope"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_gyroscope</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-gyroscope"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设备有陀螺仪传感器，则返回围绕设备 X、Y、Z 轴的旋转速率，单位为 rad/s。否则，该方法返回 <reference internal="True" refuri="class_vector3#class-vector3-constant-zero"><inline classes="std std-ref">Vector3.ZERO</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这个方法只在 Android 和 iOS 上工作。在其他平台上，总是返回 <reference internal="True" refuri="class_vector3#class-vector3-constant-zero"><inline classes="std std-ref">Vector3.ZERO</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-joy-axis"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-joy-axis" names="class_input_method_get_joy_axis"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_joy_axis</strong>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, axis: <reference internal="True" refuri="class_@globalscope#enum-globalscope-joyaxis"><inline classes="std std-ref">JoyAxis</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-joy-axis"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定索引（参见 <reference internal="True" refuri="class_@globalscope#enum-globalscope-joyaxis"><inline classes="std std-ref">JoyAxis</inline></reference>）处的游戏手柄轴的当前值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-joy-guid"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-joy-guid" names="class_input_method_get_joy_guid"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_joy_guid</strong>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-joy-guid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果平台使用游戏手柄重映射，则返回设备的 GUID，与 SDL2 兼容，例如 <literal>030000004c050000c405000000010000</literal>。否则返回 <literal>"Default Gamepad"</literal>。Godot 会根据这个 GUI 使用 <reference name="SDL2 游戏控制器数据库" refuri="https://github.com/gabomdq/SDL_GameControllerDB">SDL2 游戏控制器数据库</reference>来确定游戏手柄的名称和映射。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-joy-info"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-joy-info" names="class_input_method_get_joy_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_joy_info</strong>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-joy-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回关于设备的额外平台相关信息字典，例如操作系统的原始游戏手柄名称，或者 Steam Input 索引。</paragraph>
            <paragraph>在 Windows 上，该字典包含如下字段：</paragraph>
            <paragraph><literal>xinput_index</literal>：控制器在 XInput 系统中的索引。</paragraph>
            <paragraph>在 Linux 上：</paragraph>
            <paragraph><literal>raw_name</literal>：从操作系统获取的控制器名称，未经 Godot 控制器数据库重命名。</paragraph>
            <paragraph><literal>vendor_id</literal>：设备的 USB 供应商 ID。</paragraph>
            <paragraph><literal>product_id</literal>：设备的 USB 产品 ID。</paragraph>
            <paragraph><literal>steam_input_index</literal>：Steam Input 游戏手柄索引，如果该设备不是 Steam Input 设备则该字段不存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-joy-name"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-joy-name" names="class_input_method_get_joy_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_joy_name</strong>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-input-method-get-joy-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于指定设备索引的游戏手柄名称，例如 <literal>PS4 Controller</literal>。Godot 使用 <reference name="SDL2 游戏控制器数据库" refuri="https://github.com/gabomdq/SDL_GameControllerDB">SDL2 游戏控制器数据库</reference>来确定游戏手柄的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-joy-vibration-duration"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-joy-vibration-duration" names="class_input_method_get_joy_vibration_duration"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_joy_vibration_duration</strong>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-input-method-get-joy-vibration-duration"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以秒为单位返回当前振动效果的持续时间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-joy-vibration-strength"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-joy-vibration-strength" names="class_input_method_get_joy_vibration_strength"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_joy_vibration_strength</strong>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-input-method-get-joy-vibration-strength"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回手柄振动的强度：x 是弱马达的强度，y 是强马达的强度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-last-mouse-screen-velocity"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-last-mouse-screen-velocity" names="class_input_method_get_last_mouse_screen_velocity"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_last_mouse_screen_velocity</strong>() <reference internal="True" refid="class-input-method-get-last-mouse-screen-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回屏幕坐标中上次的鼠标速度。为了提供精确且无抖动的速度，鼠标速度仅每 0.1 秒计算一次。因此，鼠标速度将滞后于鼠标移动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-last-mouse-velocity"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-last-mouse-velocity" names="class_input_method_get_last_mouse_velocity"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_last_mouse_velocity</strong>() <reference internal="True" refid="class-input-method-get-last-mouse-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回上次的鼠标速度。为了提供精确且无抖动的速度，鼠标速度仅每 0.1 秒计算一次。因此，鼠标速度将滞后于鼠标移动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-magnetometer"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-magnetometer" names="class_input_method_get_magnetometer"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_magnetometer</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-magnetometer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设备有磁力传感器，则返回设备所有轴的磁场强度，单位为微特斯拉。否则，该方法返回 <reference internal="True" refuri="class_vector3#class-vector3-constant-zero"><inline classes="std std-ref">Vector3.ZERO</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅适用于 Android 和 iOS。在其他平台上，它总是返回 <reference internal="True" refuri="class_vector3#class-vector3-constant-zero"><inline classes="std std-ref">Vector3.ZERO</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-mouse-button-mask"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-mouse-button-mask" names="class_input_method_get_mouse_button_mask"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_@globalscope#enum-globalscope-mousebuttonmask"><inline classes="std std-ref">MouseButtonMask</inline></reference>] <strong>get_mouse_button_mask</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-mouse-button-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将鼠标按键作为一个位掩码返回。如果多个鼠标按钮同时被按下，则这些位将被加在一起。相当于 <reference internal="True" refuri="class_displayserver#class-displayserver-method-mouse-get-button-state"><inline classes="std std-ref">DisplayServer.mouse_get_button_state</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-get-vector"></target>
            <paragraph classes="classref-method" ids="class-input-method-get-vector" names="class_input_method_get_vector"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_vector</strong>(negative_x: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, positive_x: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, negative_y: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, positive_y: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, deadzone: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-get-vector"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过指定正负 X 和 Y 轴的四个动作来获取输入向量。</paragraph>
            <paragraph>这个方法在获取向量输入时很有用，比如从操纵杆、方向盘、箭头或 WASD。向量的长度被限制为 1，并且有一个圆形的死区，这对于使用向量输入进行运动很有用。</paragraph>
            <paragraph>默认情况下，死区根据动作死区的平均值自动计算。然而，你可以把死区覆盖为任何你想要的值（在 0 到 1 的范围内）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-is-action-just-pressed"></target>
            <paragraph classes="classref-method" ids="class-input-method-is-action-just-pressed" names="class_input_method_is_action_just_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_action_just_pressed</strong>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-is-action-just-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户在当前帧或物理周期中<emphasis>开始</emphasis>按下动作事件时返回 <literal>true</literal>。只在用户按下按钮的那一帧或周期中为 <literal>true</literal>。</paragraph>
            <paragraph>如果代码只需要在动作按下时执行一次，而不是只要处于按下状态就每帧都需要执行，那么这个方法就很有用。</paragraph>
            <paragraph>如果 <literal>exact_match</literal> 为 <literal>false</literal>，则会忽略 <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference> 和 <reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference> 事件的额外输入修饰键，以及 <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference> 事件的方向。</paragraph>
            <paragraph><strong>注意：</strong>返回 <literal>true</literal> 并不意味着该动作<emphasis>仍然</emphasis>处于按下状态。动作在按下后是可以很快再释放的，为了不丢失输入，这种情况下仍然会返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于键盘重影，即便该动作的某个键处于按下状态，<reference internal="True" refid="class-input-method-is-action-just-pressed"><inline classes="std std-ref">is_action_just_pressed</inline></reference> 仍可能会返回 <literal>false</literal>。详情见文档中的<reference name="《输入示例》" refuri="../tutorials/inputs/input_examples.html#keyboard-events">《输入示例》</reference>。</paragraph>
            <paragraph><strong>注意：</strong>在输入处理期间（例如 <reference internal="True" refuri="class_node#class-node-private-method-input"><inline classes="std std-ref">Node._input</inline></reference>），请使用 <reference internal="True" refuri="class_inputevent#class-inputevent-method-is-action-pressed"><inline classes="std std-ref">InputEvent.is_action_pressed</inline></reference> 来查询当前事件的动作状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-is-action-just-released"></target>
            <paragraph classes="classref-method" ids="class-input-method-is-action-just-released" names="class_input_method_is_action_just_released"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_action_just_released</strong>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-is-action-just-released"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户在当前帧或物理周期中<emphasis>停止</emphasis>按下动作事件时返回 <literal>true</literal>。只在用户松开按钮的那一帧或周期中为 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>返回 <literal>true</literal> 并不意味着该动作<emphasis>仍然</emphasis>处于松开状态。动作在松开后是可以很快再按下的，为了不丢失输入，这种情况下仍然会返回 <literal>true</literal>。</paragraph>
            <paragraph>如果 <literal>exact_match</literal> 为 <literal>false</literal>，则会忽略 <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference> 和 <reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference> 事件的额外输入修饰键，以及 <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference> 事件的方向。</paragraph>
            <paragraph><strong>注意：</strong>在输入处理期间（例如 <reference internal="True" refuri="class_node#class-node-private-method-input"><inline classes="std std-ref">Node._input</inline></reference>），请使用 <reference internal="True" refuri="class_inputevent#class-inputevent-method-is-action-released"><inline classes="std std-ref">InputEvent.is_action_released</inline></reference> 来查询当前事件的动作状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-is-action-pressed"></target>
            <paragraph classes="classref-method" ids="class-input-method-is-action-pressed" names="class_input_method_is_action_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_action_pressed</strong>(action: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, exact_match: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-is-action-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果正在按下操作事件，则返回 <literal>true</literal>。</paragraph>
            <paragraph>如果 <literal>exact_match</literal> 为 <literal>false</literal>，则它会忽略 <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference> 和 <reference internal="True" refuri="class_inputeventmousebutton#class-inputeventmousebutton"><inline classes="std std-ref">InputEventMouseButton</inline></reference> 事件的额外输入修饰键，以及 <reference internal="True" refuri="class_inputeventjoypadmotion#class-inputeventjoypadmotion"><inline classes="std std-ref">InputEventJoypadMotion</inline></reference> 事件的方向。</paragraph>
            <paragraph><strong>注意：</strong>由于键盘重影，<reference internal="True" refid="class-input-method-is-action-pressed"><inline classes="std std-ref">is_action_pressed</inline></reference> 可能会返回 <literal>false</literal>，即使动作的某个键被按下时也是如此。有关详细信息，请参阅文档中的 <reference name="《输入示例》" refuri="../tutorials/inputs/input_examples.html#keyboard-events">《输入示例》</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-is-anything-pressed"></target>
            <paragraph classes="classref-method" ids="class-input-method-is-anything-pressed" names="class_input_method_is_anything_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_anything_pressed</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-is-anything-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果任何动作、按键、游戏手柄按钮或鼠标按钮正被按下，则返回 <literal>true</literal>。如果动作是通过调用 <reference internal="True" refid="class-input-method-action-press"><inline classes="std std-ref">action_press</inline></reference> 以通过代码来模拟，该方法也将返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-is-joy-button-pressed"></target>
            <paragraph classes="classref-method" ids="class-input-method-is-joy-button-pressed" names="class_input_method_is_joy_button_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_joy_button_pressed</strong>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button: <reference internal="True" refuri="class_@globalscope#enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-is-joy-button-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果游戏手柄按钮（参见 <reference internal="True" refuri="class_@globalscope#enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference>）正被按下，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-is-joy-known"></target>
            <paragraph classes="classref-method" ids="class-input-method-is-joy-known" names="class_input_method_is_joy_known"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_joy_known</strong>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-input-method-is-joy-known"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果系统知道指定的设备，则返回 <literal>true</literal>。这意味着它设置了所有按钮和轴索引。未知的游戏手柄预计不会匹配这些常量，但仍然可以从中检索事件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-is-key-label-pressed"></target>
            <paragraph classes="classref-method" ids="class-input-method-is-key-label-pressed" names="class_input_method_is_key_label_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_key_label_pressed</strong>(keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-is-key-label-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果正按下印有 <literal>keycode</literal> 的键，则返回 <literal>true</literal>。可以传递一个 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 常量或任何 Unicode 字符代码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-is-key-pressed"></target>
            <paragraph classes="classref-method" ids="class-input-method-is-key-pressed" names="class_input_method_is_key_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_key_pressed</strong>(keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-is-key-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果在当前键盘布局中正在按该拉丁键，则返回 <literal>true</literal>。可以传递一个 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 常量。</paragraph>
            <paragraph>只有在非游戏应用程序中，才推荐使用 <reference internal="True" refid="class-input-method-is-key-pressed"><inline classes="std std-ref">is_key_pressed</inline></reference> 而不是 <reference internal="True" refid="class-input-method-is-physical-key-pressed"><inline classes="std std-ref">is_physical_key_pressed</inline></reference>。这可确保快捷键将根据用户的键盘布局按预期运行，因为在非游戏应用程序中，键盘快捷键通常取决于键盘布局。如有疑问，请使用 <reference internal="True" refid="class-input-method-is-physical-key-pressed"><inline classes="std std-ref">is_physical_key_pressed</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>由于键盘重影，即使按下动作的某个键，<reference internal="True" refid="class-input-method-is-key-pressed"><inline classes="std std-ref">is_key_pressed</inline></reference> 也有可能会返回 <literal>false</literal>。有关详细信息，请参阅文档中的<reference name="《输入示例》" refuri="../tutorials/inputs/input_examples.html#keyboard-events">《输入示例》</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-is-mouse-button-pressed"></target>
            <paragraph classes="classref-method" ids="class-input-method-is-mouse-button-pressed" names="class_input_method_is_mouse_button_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_mouse_button_pressed</strong>(button: <reference internal="True" refuri="class_@globalscope#enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-is-mouse-button-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果正在按下由 <reference internal="True" refuri="class_@globalscope#enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> 指定的鼠标按钮，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-is-physical-key-pressed"></target>
            <paragraph classes="classref-method" ids="class-input-method-is-physical-key-pressed" names="class_input_method_is_physical_key_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_physical_key_pressed</strong>(keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-is-physical-key-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果正按下 101/102 键美式 QWERTY 键盘物理位置上的键，则返回 <literal>true</literal>。可以传递一个 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 常量。</paragraph>
            <paragraph>与 <reference internal="True" refid="class-input-method-is-key-pressed"><inline classes="std std-ref">is_key_pressed</inline></reference> 相比，<reference internal="True" refid="class-input-method-is-physical-key-pressed"><inline classes="std std-ref">is_physical_key_pressed</inline></reference> 被推荐用于游戏内的动作，因为无论用户的键盘布局如何，它都会使 <literal classes="kbd">W</literal>/<literal classes="kbd">A</literal>/<literal classes="kbd">S</literal>/<literal classes="kbd">D</literal> 布局有效。<reference internal="True" refid="class-input-method-is-physical-key-pressed"><inline classes="std std-ref">is_physical_key_pressed</inline></reference> 还将确保顶行数字键在任何键盘布局上有效。如有疑问，请使用 <reference internal="True" refid="class-input-method-is-physical-key-pressed"><inline classes="std std-ref">is_physical_key_pressed</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>由于键盘重影，即使按下动作的某个键，<reference internal="True" refid="class-input-method-is-physical-key-pressed"><inline classes="std std-ref">is_physical_key_pressed</inline></reference> 也有可能会返回 <literal>false</literal>。有关详细信息，请参阅文档中的<reference name="《输入示例》" refuri="../tutorials/inputs/input_examples.html#keyboard-events">《输入示例》</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-parse-input-event"></target>
            <paragraph classes="classref-method" ids="class-input-method-parse-input-event" names="class_input_method_parse_input_event"><abbreviation explanation="无返回值。">void</abbreviation> <strong>parse_input_event</strong>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>) <reference internal="True" refid="class-input-method-parse-input-event"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向游戏提供一个 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>。可用于通过代码人为地触发输入事件。也会产生 <reference internal="True" refuri="class_node#class-node-private-method-input"><inline classes="std std-ref">Node._input</inline></reference> 调用。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var cancel_event = InputEventAction.new()
cancel_event.action = "ui_cancel"
cancel_event.pressed = true
Input.parse_input_event(cancel_event)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var cancelEvent = new InputEventAction();
cancelEvent.Action = "ui_cancel";
cancelEvent.Pressed = true;
Input.ParseInputEvent(cancelEvent);</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>调用该函数不会影响操作系统。因此，发送 <reference internal="True" refuri="class_inputeventmousemotion#class-inputeventmousemotion"><inline classes="std std-ref">InputEventMouseMotion</inline></reference> 事件并不会将操作系统的鼠标光标移动到指定位置（请改用 <reference internal="True" refid="class-input-method-warp-mouse"><inline classes="std std-ref">warp_mouse</inline></reference>），发送 <literal classes="kbd">Alt/Cmd + Tab</literal> 对应的 <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference> 也不会触发当前窗口的切换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-remove-joy-mapping"></target>
            <paragraph classes="classref-method" ids="class-input-method-remove-joy-mapping" names="class_input_method_remove_joy_mapping"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_joy_mapping</strong>(guid: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-input-method-remove-joy-mapping"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从内部数据库中删除与给定 GUID 匹配的所有映射。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-set-accelerometer"></target>
            <paragraph classes="classref-method" ids="class-input-method-set-accelerometer" names="class_input_method_set_accelerometer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_accelerometer</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-input-method-set-accelerometer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置加速度传感器的加速度值。可以用于在没有硬件传感器的设备上进行调试，例如在 PC 上的编辑器中。</paragraph>
            <paragraph><strong>注意：</strong>这个值在 Android 和 iOS 上可立即被硬件传感器的值所覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-set-custom-mouse-cursor"></target>
            <paragraph classes="classref-method" ids="class-input-method-set-custom-mouse-cursor" names="class_input_method_set_custom_mouse_cursor"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_mouse_cursor</strong>(image: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>, shape: <reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> = 0, hotspot: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <reference internal="True" refid="class-input-method-set-custom-mouse-cursor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置自定义鼠标光标图像，该图像仅在游戏窗口内可见。还可以指定热点。将 <literal>null</literal> 传递给 image 参数将重置为系统光标。形状列表见 <reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference>。</paragraph>
            <paragraph><literal>image</literal> 可以是 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 或 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>，其大小必须小于等于 256×256。为了避免渲染问题，建议使用小于等于 128×128 的大小。</paragraph>
            <paragraph><literal>hotspot</literal> 必须在 <literal>image</literal> 的大小范围内。</paragraph>
            <paragraph><strong>注意：</strong>不支持使用 <reference internal="True" refuri="class_animatedtexture#class-animatedtexture"><inline classes="std std-ref">AnimatedTexture</inline></reference> 作为自定义鼠标光标。如果使用 <reference internal="True" refuri="class_animatedtexture#class-animatedtexture"><inline classes="std std-ref">AnimatedTexture</inline></reference>，则只会显示第一帧。</paragraph>
            <paragraph><strong>注意：</strong>推荐使用 <strong>Lossless</strong>、<strong>Lossy</strong> 或 <strong>Uncompressed</strong> 压缩模式。<strong>Video RAM</strong> 压缩模式也可以，但会使用 CPU 解压，拖慢加载，相对于无损模式也并不节省内存。</paragraph>
            <paragraph><strong>注意：</strong>在网络平台上，光标图像允许的最大尺寸为 128×128。 出于<reference name="安全原因" refuri="https://chromestatus.com/feature/5825971391299584">安全原因</reference>，只有当鼠标光标图像完全位于页面内时，大于 32×32 的光标图像才会显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-set-default-cursor-shape"></target>
            <paragraph classes="classref-method" ids="class-input-method-set-default-cursor-shape" names="class_input_method_set_default_cursor_shape"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_cursor_shape</strong>(shape: <reference internal="True" refid="enum-input-cursorshape"><inline classes="std std-ref">CursorShape</inline></reference> = 0) <reference internal="True" refid="class-input-method-set-default-cursor-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该视口中使用的默认光标形状，而不是 <reference internal="True" refid="class-input-constant-cursor-arrow"><inline classes="std std-ref">CURSOR_ARROW</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果要更改 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点的默认光标形状，请改用 <reference internal="True" refuri="class_control#class-control-property-mouse-default-cursor-shape"><inline classes="std std-ref">Control.mouse_default_cursor_shape</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这个方法会生成一个 <reference internal="True" refuri="class_inputeventmousemotion#class-inputeventmousemotion"><inline classes="std std-ref">InputEventMouseMotion</inline></reference> 以立即更新光标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-set-gravity"></target>
            <paragraph classes="classref-method" ids="class-input-method-set-gravity" names="class_input_method_set_gravity"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_gravity</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-input-method-set-gravity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置加速度传感器的重力值。可用于在没有硬件传感器的设备上进行调试，例如在 PC 上的编辑器中。</paragraph>
            <paragraph><strong>注意：</strong>这个值在 Android 和 iOS 上可立即被硬件传感器的值覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-set-gyroscope"></target>
            <paragraph classes="classref-method" ids="class-input-method-set-gyroscope" names="class_input_method_set_gyroscope"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_gyroscope</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-input-method-set-gyroscope"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置陀螺仪传感器的旋转速率值。可用于在没有硬件传感器的设备上进行调试，例如在 PC 上的编辑器中。</paragraph>
            <paragraph><strong>注意：</strong>在 Android 和 iOS 上，这个值可立即被硬件传感器的值所覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-set-magnetometer"></target>
            <paragraph classes="classref-method" ids="class-input-method-set-magnetometer" names="class_input_method_set_magnetometer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_magnetometer</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-input-method-set-magnetometer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置磁力传感器的磁场值。可用于在没有硬件传感器的设备上进行调试，例如在 PC 上的编辑器中。</paragraph>
            <paragraph><strong>注意：</strong>在 Android 和 iOS 上，这个值可立即被硬件传感器的值所覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-should-ignore-device"></target>
            <paragraph classes="classref-method" ids="class-input-method-should-ignore-device" names="class_input_method_should_ignore_device"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>should_ignore_device</strong>(vendor_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, product_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-input-method-should-ignore-device"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查询输入设备是否应被忽略。可以通过设置环境变量 <literal>SDL_GAMECONTROLLER_IGNORE_DEVICES</literal> 来忽略设备。请阅读 <reference name="SDL 文档" refuri="https://wiki.libsdl.org/SDL2">SDL 文档</reference>了解更多信息。</paragraph>
            <paragraph><strong>注意：</strong>某些第三方工具可以添加忽略设备列表。例如，<emphasis>SteamInput</emphasis> 从物理设备创建虚拟设备以进行重新映射。为了避免两次处理相同的输入设备，原始设备被添加到忽略列表中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-start-joy-vibration"></target>
            <paragraph classes="classref-method" ids="class-input-method-start-joy-vibration" names="class_input_method_start_joy_vibration"><abbreviation explanation="无返回值。">void</abbreviation> <strong>start_joy_vibration</strong>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, weak_magnitude: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, strong_magnitude: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, duration: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0) <reference internal="True" refid="class-input-method-start-joy-vibration"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>开始振动游戏手柄。游戏手柄通常带有两个震动马达，一强一弱。<literal>weak_magnitude</literal> 是弱马达的强度（介于 0 和 1 之间），<literal>strong_magnitude</literal> 是强马达的强度（介于 0 和 1 之间）。<literal>duration</literal> 是效果的持续时间（以秒为单位）（持续时间为 0 将尝试无限期地播放振动）。调用 <reference internal="True" refid="class-input-method-stop-joy-vibration"><inline classes="std std-ref">stop_joy_vibration</inline></reference> 可以提前停止震动。</paragraph>
            <paragraph><strong>注意：</strong>并非所有硬件都兼容长效果持续时间；如果播放的时长必须超过几秒钟，建议重新启动效果。</paragraph>
            <paragraph><strong>注意：</strong>对于 macOS，仅 macOS 11 及更高版本支持振动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-stop-joy-vibration"></target>
            <paragraph classes="classref-method" ids="class-input-method-stop-joy-vibration" names="class_input_method_stop_joy_vibration"><abbreviation explanation="无返回值。">void</abbreviation> <strong>stop_joy_vibration</strong>(device: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-input-method-stop-joy-vibration"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>停止使用 <reference internal="True" refid="class-input-method-start-joy-vibration"><inline classes="std std-ref">start_joy_vibration</inline></reference> 启动的游戏手柄的振动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-vibrate-handheld"></target>
            <paragraph classes="classref-method" ids="class-input-method-vibrate-handheld" names="class_input_method_vibrate_handheld"><abbreviation explanation="无返回值。">void</abbreviation> <strong>vibrate_handheld</strong>(duration_ms: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 500, amplitude: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0) <reference internal="True" refid="class-input-method-vibrate-handheld"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使手持设备振动指定的持续时间，单位为毫秒。</paragraph>
            <paragraph><literal>amplitude</literal> 是振动的强度，取值范围为 <literal>0.0</literal> 为 <literal>1.0</literal> 之间。如果设为 <literal>-1.0</literal> 则表示该设备的默认振动强度。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 Android、iOS 和 Web 上实现。在其他平台上无效。</paragraph>
            <paragraph><strong>注意：</strong>在 Android 平台上，<reference internal="True" refid="class-input-method-vibrate-handheld"><inline classes="std std-ref">vibrate_handheld</inline></reference> 需要在导出预设中启用 <literal>VIBRATE</literal> 权限。否则 <reference internal="True" refid="class-input-method-vibrate-handheld"><inline classes="std std-ref">vibrate_handheld</inline></reference> 无效。</paragraph>
            <paragraph><strong>注意：</strong>在 iOS 平台上，仅 iOS 13 及更高版本支持指定持续时间。</paragraph>
            <paragraph><strong>注意：</strong>在 Web 平台上，振幅无法修改。</paragraph>
            <paragraph><strong>注意：</strong>部分浏览器不支持 <reference internal="True" refid="class-input-method-vibrate-handheld"><inline classes="std std-ref">vibrate_handheld</inline></reference>，如 Android 版的 Safari、Firefox 等。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-input-method-warp-mouse"></target>
            <paragraph classes="classref-method" ids="class-input-method-warp-mouse" names="class_input_method_warp_mouse"><abbreviation explanation="无返回值。">void</abbreviation> <strong>warp_mouse</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-input-method-warp-mouse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将鼠标位置设置为指定的向量，单位为像素，并相对于当前聚焦的窗口管理器游戏窗口左上角的原点。</paragraph>
            <paragraph>如果 <reference internal="True" refid="enum-input-mousemode"><inline classes="std std-ref">MouseMode</inline></reference> 被设置为 <reference internal="True" refid="class-input-constant-mouse-mode-confined"><inline classes="std std-ref">MOUSE_MODE_CONFINED</inline></reference> 或 <reference internal="True" refid="class-input-constant-mouse-mode-confined-hidden"><inline classes="std std-ref">MOUSE_MODE_CONFINED_HIDDEN</inline></reference>，则鼠标位置会被钳制在屏幕分辨率的限制内，或者钳制在游戏窗口的限制内。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-input-method-warp-mouse"><inline classes="std std-ref">warp_mouse</inline></reference> 仅支持 Windows、macOS 和 Linux。它对 Android、iOS 和 Web 没有影响。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
