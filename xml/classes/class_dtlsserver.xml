<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_dtlsserver.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/DTLSServer.xml.</comment>
    <target refid="class-dtlsserver"></target>
    <section ids="dtlsserver class-dtlsserver" names="dtlsserver class_dtlsserver">
        <title>DTLSServer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>实现 DTLS 服务器的辅助类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该类用于存储 DTLS 服务器的状态。在 <reference internal="True" refid="class-dtlsserver-method-setup"><inline classes="std std-ref">setup</inline></reference> 之后，它将连接的 <reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp"><inline classes="std std-ref">PacketPeerUDP</inline></reference> 转换为 <reference internal="True" refuri="class_packetpeerdtls#class-packetpeerdtls"><inline classes="std std-ref">PacketPeerDTLS</inline></reference>，通过 <reference internal="True" refid="class-dtlsserver-method-take-connection"><inline classes="std std-ref">take_connection</inline></reference> 接受它们作为 DTLS 客户端。在底层，这个类用于存储服务器的 DTLS 状态和 cookie。为什么需要状态和 cookie 的原因不在本文档的范围内。</paragraph>
            <paragraph>下面是一个如何使用它的小例子：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># server_node.gd
extends Node

var dtls := DTLSServer.new()
var server := UDPServer.new()
var peers = []

func _ready():
    server.listen(4242)
    var key = load("key.key") # 你的私钥。
    var cert = load("cert.crt") # 你的 X509 证书。
    dtls.setup(key, cert)

func _process(delta):
    while server.is_connection_available():
        var peer: PacketPeerUDP = server.take_connection()
        var dtls_peer: PacketPeerDTLS = dtls.take_connection(peer)
        if dtls_peer.get_status() != PacketPeerDTLS.STATUS_HANDSHAKING:
            continue # 由于 cookie 交换，50% 的连接会失败，这是正常现象。
        print("对等体已连接！")
        peers.append(dtls_peer)

    for p in peers:
        p.poll() # 必须轮询以更新状态。
        if p.get_status() == PacketPeerDTLS.STATUS_CONNECTED:
            while p.get_available_packet_count() &gt; 0:
                print("从客户端收到消息：%s" % p.get_packet().get_string_from_utf8())
                p.put_packet("你好 DTLS 客户端".to_utf8_buffer())</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// ServerNode.cs
using Godot;

public partial class ServerNode : Node
{
    private DtlsServer _dtls = new DtlsServer();
    private UdpServer _server = new UdpServer();
    private Godot.Collections.Array&lt;PacketPeerDtls&gt; _peers = new Godot.Collections.Array&lt;PacketPeerDtls&gt;();

    public override void _Ready()
    {
        _server.Listen(4242);
        var key = GD.Load&lt;CryptoKey&gt;("key.key"); // 你的私钥。
        var cert = GD.Load&lt;X509Certificate&gt;("cert.crt"); // 你的 X509 证书。
        _dtls.Setup(key, cert);
    }

    public override void _Process(double delta)
    {
        while (Server.IsConnectionAvailable())
        {
            PacketPeerUdp peer = _server.TakeConnection();
            PacketPeerDtls dtlsPeer = _dtls.TakeConnection(peer);
            if (dtlsPeer.GetStatus() != PacketPeerDtls.Status.Handshaking)
            {
                continue; // 由于 cookie 交换，50% 的连接会失败，这是正常现象。
            }
            GD.Print("对等体已连接！");
            _peers.Add(dtlsPeer);
        }

        foreach (var p in _peers)
        {
            p.Poll(); // 必须轮询以更新状态。
            if (p.GetStatus() == PacketPeerDtls.Status.Connected)
            {
                while (p.GetAvailablePacketCount() &gt; 0)
                {
                    GD.Print($"从客户端收到消息：{p.GetPacket().GetStringFromUtf8()}");
                    p.PutPacket("你好 DTLS 客户端".ToUtf8Buffer());
                }
            }
        }
    }
}</literal_block>
                </div>
            </container>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># client_node.gd
extends Node

var dtls := PacketPeerDTLS.new()
var udp := PacketPeerUDP.new()
var connected = false

func _ready():
    udp.connect_to_host("127.0.0.1", 4242)
    dtls.connect_to_peer(udp, false) # 生产环境中请使用 true 进行证书校验！

func _process(delta):
    dtls.poll()
    if dtls.get_status() == PacketPeerDTLS.STATUS_CONNECTED:
        if !connected:
            # 尝试联系服务器
            dtls.put_packet("回应是… 42！".to_utf8_buffer())
        while dtls.get_available_packet_count() &gt; 0:
            print("已连接：%s" % dtls.get_packet().get_string_from_utf8())
            connected = true</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// ClientNode.cs
using Godot;
using System.Text;

public partial class ClientNode : Node
{
    private PacketPeerDtls _dtls = new PacketPeerDtls();
    private PacketPeerUdp _udp = new PacketPeerUdp();
    private bool _connected = false;

    public override void _Ready()
    {
        _udp.ConnectToHost("127.0.0.1", 4242);
        _dtls.ConnectToPeer(_udp, validateCerts: false); // 生产环境中请使用 true 进行证书校验！
    }

    public override void _Process(double delta)
    {
        _dtls.Poll();
        if (_dtls.GetStatus() == PacketPeerDtls.Status.Connected)
        {
            if (!_connected)
            {
                // 尝试联系服务器
                _dtls.PutPacket("回应是… 42！".ToUtf8Buffer());
            }
            while (_dtls.GetAvailablePacketCount() &gt; 0)
            {
                GD.Print($"已连接：{_dtls.GetPacket().GetStringFromUtf8()}");
                _connected = true;
            }
        }
    }
}</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="45"></colspec>
                    <colspec colwidth="125"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dtlsserver-method-setup"><inline classes="std std-ref">setup</inline></reference>(server_options: <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packetpeerdtls#class-packetpeerdtls"><inline classes="std std-ref">PacketPeerDTLS</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dtlsserver-method-take-connection"><inline classes="std std-ref">take_connection</inline></reference>(udp_peer: <reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp"><inline classes="std std-ref">PacketPeerUDP</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-dtlsserver-method-setup"></target>
            <paragraph classes="classref-method" ids="class-dtlsserver-method-setup" names="class_dtlsserver_method_setup"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>setup</strong>(server_options: <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference>) <reference internal="True" refid="class-dtlsserver-method-setup"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 DTLS 服务器以使用给定的 <literal>server_options</literal>。请参阅 <reference internal="True" refuri="class_tlsoptions#class-tlsoptions-method-server"><inline classes="std std-ref">TLSOptions.server</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dtlsserver-method-take-connection"></target>
            <paragraph classes="classref-method" ids="class-dtlsserver-method-take-connection" names="class_dtlsserver_method_take_connection"><reference internal="True" refuri="class_packetpeerdtls#class-packetpeerdtls"><inline classes="std std-ref">PacketPeerDTLS</inline></reference> <strong>take_connection</strong>(udp_peer: <reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp"><inline classes="std std-ref">PacketPeerUDP</inline></reference>) <reference internal="True" refid="class-dtlsserver-method-take-connection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>尝试与给定 <literal>udp_peer</literal> 启动 DTLS 握手，必须已连接到该 <literal>udp_peer</literal>（请参阅 <reference internal="True" refuri="class_packetpeerudp#class-packetpeerudp-method-connect-to-host"><inline classes="std std-ref">PacketPeerUDP.connect_to_host</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>必须检查返回的 PacketPeerUDP 的状态是否为 <reference internal="True" refuri="class_packetpeerdtls#class-packetpeerdtls-constant-status-handshaking"><inline classes="std std-ref">PacketPeerDTLS.STATUS_HANDSHAKING</inline></reference>，因为正常情况下，50% 的新连接会因为 cookie 交换而无效。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
