<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_gltfdocument.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/modules/gltf/doc_classes/GLTFDocument.xml.</comment>
    <target refid="class-gltfdocument"></target>
    <section ids="gltfdocument class-gltfdocument" names="gltfdocument class_gltfdocument">
        <title>GLTFDocument</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于在 Godot 中导入和导出 glTF 文件的类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>GLTFDocument 支持从 glTF 文件、缓冲区、或 Godot 场景中读取数据。然后可以将该数据写入文件系统、缓冲区、或用于创建 Godot 场景。</paragraph>
            <paragraph>GLTF 场景中的所有数据都存储在 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 类中。GLTFDocument 处理状态对象，但本身不包含任何场景数据。GLTFDocument 有成员变量来存储如图像格式等导出配置设置，但在其他方面是无状态的。可以使用相同的 GLTFDocument 对象和不同的 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 对象以相同的设置处理多个场景。</paragraph>
            <paragraph>通过扩展 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 类并通过 <reference internal="True" refid="class-gltfdocument-method-register-gltf-document-extension"><inline classes="std std-ref">register_gltf_document_extension</inline></reference> 将其注册到 GLTFDocument，则可以使用任意功能来扩展 GLTFDocument。这允许自定义数据被导入和导出。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/io/runtime_file_loading_and_saving"><inline classes="doc">运行时文件加载与保存</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="glTF '鸭子是什么？' 指南" refuri="https://www.khronos.org/files/gltf20-reference-guide.pdf">glTF '鸭子是什么？' 指南</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Khronos glTF 规范" refuri="https://registry.khronos.org/glTF/">Khronos glTF 规范</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="67"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocument-property-image-format"><inline classes="std std-ref">image_format</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>"PNG"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocument-property-lossy-quality"><inline classes="std std-ref">lossy_quality</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.75</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-gltfdocument-rootnodemode"><inline classes="std std-ref">RootNodeMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocument-property-root-node-mode"><inline classes="std std-ref">root_node_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="250"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocument-method-append-from-buffer"><inline classes="std std-ref">append_from_buffer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> bytes, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> base_path, <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> state, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> flags=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocument-method-append-from-file"><inline classes="std std-ref">append_from_file</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> state, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> flags=0, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> base_path="" <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocument-method-append-from-scene"><inline classes="std std-ref">append_from_scene</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> node, <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> state, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> flags=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocument-method-generate-buffer"><inline classes="std std-ref">generate_buffer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> state <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocument-method-generate-scene"><inline classes="std std-ref">generate_scene</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> state, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> bake_fps=30, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> trimming=false, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> remove_immutable_tracks=true <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocument-method-register-gltf-document-extension"><inline classes="std std-ref">register_gltf_document_extension</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> extension, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> first_priority=false <strong>)</strong> <abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocument-method-unregister-gltf-document-extension"><inline classes="std std-ref">unregister_gltf_document_extension</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> extension <strong>)</strong> <abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfdocument-method-write-to-filesystem"><inline classes="std std-ref">write_to_filesystem</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> state, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-gltfdocument-rootnodemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-gltfdocument-rootnodemode" names="enum_gltfdocument_rootnodemode">enum <strong>RootNodeMode</strong>:</paragraph>
            <target refid="class-gltfdocument-constant-root-node-mode-single-root"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gltfdocument-constant-root-node-mode-single-root" names="class_gltfdocument_constant_root_node_mode_single_root"><reference internal="True" refid="enum-gltfdocument-rootnodemode"><inline classes="std std-ref">RootNodeMode</inline></reference> <strong>ROOT_NODE_MODE_SINGLE_ROOT</strong> = <literal>0</literal></paragraph>
            <paragraph>将 Godot 场景的根节点视为 glTF 文件的根节点，并通过 <literal>GODOT_single_root</literal> glTF 扩展将其标记为单根节点。如果实现不支持 <literal>GODOT_single_root</literal>，这将与 <reference internal="True" refid="class-gltfdocument-constant-root-node-mode-keep-root"><inline classes="std std-ref">ROOT_NODE_MODE_KEEP_ROOT</inline></reference> 进行相同的解析。</paragraph>
            <target refid="class-gltfdocument-constant-root-node-mode-keep-root"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gltfdocument-constant-root-node-mode-keep-root" names="class_gltfdocument_constant_root_node_mode_keep_root"><reference internal="True" refid="enum-gltfdocument-rootnodemode"><inline classes="std std-ref">RootNodeMode</inline></reference> <strong>ROOT_NODE_MODE_KEEP_ROOT</strong> = <literal>1</literal></paragraph>
            <paragraph>将 Godot 场景的根节点视为 glTF 文件的根节点，但不要将其标记为任何特殊的东西。导入 Godot 时会生成一个额外的根节点。这仅使用普通 glTF 功能。这相当于 Godot 4.1 及更早版本中的行为。</paragraph>
            <target refid="class-gltfdocument-constant-root-node-mode-multi-root"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gltfdocument-constant-root-node-mode-multi-root" names="class_gltfdocument_constant_root_node_mode_multi_root"><reference internal="True" refid="enum-gltfdocument-rootnodemode"><inline classes="std std-ref">RootNodeMode</inline></reference> <strong>ROOT_NODE_MODE_MULTI_ROOT</strong> = <literal>2</literal></paragraph>
            <paragraph>将 Godot 场景的根节点视为 glTF 场景的名称，并将其所有子节点添加为 glTF 文件的根节点。这仅使用普通 glTF 功能。这避免了额外的根节点，但只会保留 Godot 场景根节点的名称，因为它不会被保存为节点。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-gltfdocument-property-image-format"></target>
            <paragraph classes="classref-property" ids="class-gltfdocument-property-image-format" names="class_gltfdocument_property_image_format"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>image_format</strong> = <literal>"PNG"</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_image_format</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_image_format</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>导出图像格式的用户友好名称。这被用于导出 GLTF 文件，包括写入文件和写入字节数组。</paragraph>
            <paragraph>默认情况下，Godot 允许以下选项：“无”、“PNG”、“JPEG”、“无损 WebP”、和“有损 WebP”。可以使用 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 类添加对更多图像格式的支持。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocument-property-lossy-quality"></target>
            <paragraph classes="classref-property" ids="class-gltfdocument-property-lossy-quality" names="class_gltfdocument_property_lossy_quality"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>lossy_quality</strong> = <literal>0.75</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_lossy_quality</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_lossy_quality</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果 <reference internal="True" refid="class-gltfdocument-property-image-format"><inline classes="std std-ref">image_format</inline></reference> 是有损图像格式，则这决定了该图像的有损质量。在 <literal>0.0</literal> 到 <literal>1.0</literal> 范围内，其中 <literal>0.0</literal> 是最低质量，<literal>1.0</literal> 是最高质量。<literal>1.0</literal> 的有损质量不同于无损质量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocument-property-root-node-mode"></target>
            <paragraph classes="classref-property" ids="class-gltfdocument-property-root-node-mode" names="class_gltfdocument_property_root_node_mode"><reference internal="True" refid="enum-gltfdocument-rootnodemode"><inline classes="std std-ref">RootNodeMode</inline></reference> <strong>root_node_mode</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_root_node_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-gltfdocument-rootnodemode"><inline classes="std std-ref">RootNodeMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-gltfdocument-rootnodemode"><inline classes="std std-ref">RootNodeMode</inline></reference> <strong>get_root_node_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>导出时如何处理根节点。详见 <reference internal="True" refid="enum-gltfdocument-rootnodemode"><inline classes="std std-ref">RootNodeMode</inline></reference>。默认和推荐值为 <reference internal="True" refid="class-gltfdocument-constant-root-node-mode-single-root"><inline classes="std std-ref">ROOT_NODE_MODE_SINGLE_ROOT</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>无论 glTF 文件如何导出，导入时，根节点类型和名称都可以在场景导入设置选项卡中被覆盖。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-gltfdocument-method-append-from-buffer"></target>
            <paragraph classes="classref-method" ids="class-gltfdocument-method-append-from-buffer" names="class_gltfdocument_method_append_from_buffer"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>append_from_buffer</strong> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> bytes, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> base_path, <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> state, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> flags=0 <strong>)</strong></paragraph>
            <paragraph>接收一个定义 GLTF 的 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>，并通过 <literal>state</literal> 参数将数据导入给定的 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 对象。</paragraph>
            <paragraph><strong>注意：</strong><literal>base_path</literal> 被 <reference internal="True" refid="class-gltfdocument-method-append-from-buffer"><inline classes="std std-ref">append_from_buffer</inline></reference> 用作依赖关系的查找路径，可以为空。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocument-method-append-from-file"></target>
            <paragraph classes="classref-method" ids="class-gltfdocument-method-append-from-file" names="class_gltfdocument_method_append_from_file"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>append_from_file</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> state, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> flags=0, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> base_path="" <strong>)</strong></paragraph>
            <paragraph>接收一个 GLTF 文件的路径，并通过 <literal>state</literal> 参数将该文件路径上的数据导入到给定的 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 对象。</paragraph>
            <paragraph><strong>注意：</strong><literal>base_path</literal> 被 <reference internal="True" refid="class-gltfdocument-method-append-from-file"><inline classes="std std-ref">append_from_file</inline></reference> 用作依赖关系的查找路径，可以为空。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocument-method-append-from-scene"></target>
            <paragraph classes="classref-method" ids="class-gltfdocument-method-append-from-scene" names="class_gltfdocument_method_append_from_scene"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>append_from_scene</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> node, <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> state, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> flags=0 <strong>)</strong></paragraph>
            <paragraph>接收一个 Godot 引擎的场景节点，并通过 <literal>state</literal> 参数将其及其后代导出到给定的 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocument-method-generate-buffer"></target>
            <paragraph classes="classref-method" ids="class-gltfdocument-method-generate-buffer" names="class_gltfdocument_method_generate_buffer"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>generate_buffer</strong> <strong>(</strong> <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> state <strong>)</strong></paragraph>
            <paragraph>通过 <literal>state</literal> 参数接收一个 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 对象，并返回一个 GLTF <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocument-method-generate-scene"></target>
            <paragraph classes="classref-method" ids="class-gltfdocument-method-generate-scene" names="class_gltfdocument_method_generate_scene"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>generate_scene</strong> <strong>(</strong> <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> state, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> bake_fps=30, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> trimming=false, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> remove_immutable_tracks=true <strong>)</strong></paragraph>
            <paragraph>通过 <literal>state</literal> 参数接收一个 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 对象，并返回一个 Godot 引擎的场景节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocument-method-register-gltf-document-extension"></target>
            <paragraph classes="classref-method" ids="class-gltfdocument-method-register-gltf-document-extension" names="class_gltfdocument_method_register_gltf_document_extension">void <strong>register_gltf_document_extension</strong> <strong>(</strong> <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> extension, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> first_priority=false <strong>)</strong> <abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></paragraph>
            <paragraph>使用 GLTFDocument 注册给定的 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 实例。如果 <literal>first_priority</literal> 为 true，则该扩展将被首先运行。否则，它将被最后运行。</paragraph>
            <paragraph><strong>注意：</strong>与 GLTFDocument 本身一样，所有 GLTFDocumentExtension 类都必须是无状态的才能正常运行。如果需要存储数据，使用 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 或 <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference> 中的 <literal>set_additional_data</literal> 和 <literal>get_additional_data</literal> 方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocument-method-unregister-gltf-document-extension"></target>
            <paragraph classes="classref-method" ids="class-gltfdocument-method-unregister-gltf-document-extension" names="class_gltfdocument_method_unregister_gltf_document_extension">void <strong>unregister_gltf_document_extension</strong> <strong>(</strong> <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> extension <strong>)</strong> <abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></paragraph>
            <paragraph>将给定的 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 实例取消注册。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfdocument-method-write-to-filesystem"></target>
            <paragraph classes="classref-method" ids="class-gltfdocument-method-write-to-filesystem" names="class_gltfdocument_method_write_to_filesystem"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>write_to_filesystem</strong> <strong>(</strong> <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> state, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
            <paragraph>通过 <literal>state</literal> 参数接收一个 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 对象，并将一个 glTF 文件写入文件系统。</paragraph>
            <paragraph><strong>注意：</strong>glTF 文件的扩展名决定了它是一个 .glb 二进制文件还是一个 .gltf 文件。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
