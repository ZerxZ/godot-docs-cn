<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_animationplayer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AnimationPlayer.xml.</comment>
    <target refid="class-animationplayer"></target>
    <section ids="animationplayer class-animationplayer" names="animationplayer class_animationplayer">
        <title>AnimationPlayer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_animationmixer#class-animationmixer"><inline classes="std std-ref">AnimationMixer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于播放动画的节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>动画播放器用于动画的通用播放。它包含 <reference internal="True" refuri="class_animationlibrary#class-animationlibrary"><inline classes="std std-ref">AnimationLibrary</inline></reference> 资源的字典和动画过渡之间的自定义混合时间。</paragraph>
            <paragraph>某些方法和属性使用单个键直接引用动画。这些键的格式为动画库的键，后跟正斜杠，然后是动画库内动画的键，例如 <literal>"movement/run"</literal>。如果动画库的键为空字符串（称为默认库），则省略正斜杠，与动画库使用相同的键。</paragraph>
            <paragraph><strong>AnimationPlayer</strong> 比 <reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference> 更适合用于复杂动画，例如不规则计时的动画。如果用动画轨道编辑器比用代码实现更方便，也可以优先于 <reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference> 使用。</paragraph>
            <paragraph>更新动画的目标属性是在处理帧中进行的。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/2d_sprite_animation"><inline classes="doc">2D 精灵动画</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/animation/index"><inline classes="doc">动画教程索引</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="第三人称射击（TPS）演示" refuri="https://godotengine.org/asset-library/asset/2710">第三人称射击（TPS）演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="50"></colspec>
                    <colspec colwidth="116"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-property-assigned-animation"><inline classes="std std-ref">assigned_animation</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-property-autoplay"><inline classes="std std-ref">autoplay</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-property-current-animation"><inline classes="std std-ref">current_animation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-property-current-animation-length"><inline classes="std std-ref">current_animation_length</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-property-current-animation-position"><inline classes="std std-ref">current_animation_position</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-property-movie-quit-on-finish"><inline classes="std std-ref">movie_quit_on_finish</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-property-playback-auto-capture"><inline classes="std std-ref">playback_auto_capture</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-property-playback-auto-capture-duration"><inline classes="std std-ref">playback_auto_capture_duration</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_tween#enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-property-playback-auto-capture-ease-type"><inline classes="std std-ref">playback_auto_capture_ease_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_tween#enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-property-playback-auto-capture-transition-type"><inline classes="std std-ref">playback_auto_capture_transition_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-property-playback-default-blend-time"><inline classes="std std-ref">playback_default_blend_time</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-property-speed-scale"><inline classes="std std-ref">speed_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="80"></colspec>
                    <colspec colwidth="435"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-animation-get-next"><inline classes="std std-ref">animation_get_next</inline></reference>(animation_from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-animation-set-next"><inline classes="std std-ref">animation_set_next</inline></reference>(animation_from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, animation_to: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-clear-queue"><inline classes="std std-ref">clear_queue</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-get-blend-time"><inline classes="std std-ref">get_blend_time</inline></reference>(animation_from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, animation_to: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-animationplayer-animationmethodcallmode"><inline classes="std std-ref">AnimationMethodCallMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-get-method-call-mode"><inline classes="std std-ref">get_method_call_mode</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-get-playing-speed"><inline classes="std std-ref">get_playing_speed</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-animationplayer-animationprocesscallback"><inline classes="std std-ref">AnimationProcessCallback</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-get-process-callback"><inline classes="std std-ref">get_process_callback</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-get-queue"><inline classes="std std-ref">get_queue</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-get-root"><inline classes="std std-ref">get_root</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-is-playing"><inline classes="std std-ref">is_playing</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-pause"><inline classes="std std-ref">pause</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-play"><inline classes="std std-ref">play</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"", custom_blend: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, custom_speed: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, from_end: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-play-backwards"><inline classes="std std-ref">play_backwards</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"", custom_blend: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-play-with-capture"><inline classes="std std-ref">play_with_capture</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"", duration: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, custom_blend: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, custom_speed: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, from_end: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, trans_type: <reference internal="True" refuri="class_tween#enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> = 0, ease_type: <reference internal="True" refuri="class_tween#enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-queue"><inline classes="std std-ref">queue</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-seek"><inline classes="std std-ref">seek</inline></reference>(seconds: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, update: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, update_only: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-set-blend-time"><inline classes="std std-ref">set_blend_time</inline></reference>(animation_from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, animation_to: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-set-method-call-mode"><inline classes="std std-ref">set_method_call_mode</inline></reference>(mode: <reference internal="True" refid="enum-animationplayer-animationmethodcallmode"><inline classes="std std-ref">AnimationMethodCallMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-set-process-callback"><inline classes="std std-ref">set_process_callback</inline></reference>(mode: <reference internal="True" refid="enum-animationplayer-animationprocesscallback"><inline classes="std std-ref">AnimationProcessCallback</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-set-root"><inline classes="std std-ref">set_root</inline></reference>(path: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationplayer-method-stop"><inline classes="std std-ref">stop</inline></reference>(keep_state: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-animationplayer-signal-animation-changed"></target>
            <paragraph classes="classref-signal" ids="class-animationplayer-signal-animation-changed" names="class_animationplayer_signal_animation_changed"><strong>animation_changed</strong>(old_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, new_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationplayer-signal-animation-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在前一个动画完成后，队列中的动画播放时发出。另见 <reference internal="True" refid="class-animationplayer-method-queue"><inline classes="std std-ref">queue</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>通过 <reference internal="True" refid="class-animationplayer-method-play"><inline classes="std std-ref">play</inline></reference> 或 <reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 改变动画时，不会发出此信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-signal-current-animation-changed"></target>
            <paragraph classes="classref-signal" ids="class-animationplayer-signal-current-animation-changed" names="class_animationplayer_signal_current_animation_changed"><strong>current_animation_changed</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-animationplayer-signal-current-animation-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <reference internal="True" refid="class-animationplayer-property-current-animation"><inline classes="std std-ref">current_animation</inline></reference> 更改时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-animationplayer-animationprocesscallback"></target>
            <paragraph classes="classref-enumeration" ids="enum-animationplayer-animationprocesscallback" names="enum_animationplayer_animationprocesscallback">enum <strong>AnimationProcessCallback</strong>: <reference internal="True" refid="enum-animationplayer-animationprocesscallback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animationplayer-constant-animation-process-physics"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationplayer-constant-animation-process-physics" names="class_animationplayer_constant_animation_process_physics"><reference internal="True" refid="enum-animationplayer-animationprocesscallback"><inline classes="std std-ref">AnimationProcessCallback</inline></reference> <strong>ANIMATION_PROCESS_PHYSICS</strong> = <literal>0</literal></paragraph>
            <paragraph><strong>已弃用：</strong> See <reference internal="True" refuri="class_animationmixer#class-animationmixer-constant-animation-callback-mode-process-physics"><inline classes="std std-ref">AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS</inline></reference>.</paragraph>
            <target refid="class-animationplayer-constant-animation-process-idle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationplayer-constant-animation-process-idle" names="class_animationplayer_constant_animation_process_idle"><reference internal="True" refid="enum-animationplayer-animationprocesscallback"><inline classes="std std-ref">AnimationProcessCallback</inline></reference> <strong>ANIMATION_PROCESS_IDLE</strong> = <literal>1</literal></paragraph>
            <paragraph><strong>已弃用：</strong> See <reference internal="True" refuri="class_animationmixer#class-animationmixer-constant-animation-callback-mode-process-idle"><inline classes="std std-ref">AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_IDLE</inline></reference>.</paragraph>
            <target refid="class-animationplayer-constant-animation-process-manual"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationplayer-constant-animation-process-manual" names="class_animationplayer_constant_animation_process_manual"><reference internal="True" refid="enum-animationplayer-animationprocesscallback"><inline classes="std std-ref">AnimationProcessCallback</inline></reference> <strong>ANIMATION_PROCESS_MANUAL</strong> = <literal>2</literal></paragraph>
            <paragraph><strong>已弃用：</strong> See <reference internal="True" refuri="class_animationmixer#class-animationmixer-constant-animation-callback-mode-process-manual"><inline classes="std std-ref">AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_MANUAL</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-animationplayer-animationmethodcallmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-animationplayer-animationmethodcallmode" names="enum_animationplayer_animationmethodcallmode">enum <strong>AnimationMethodCallMode</strong>: <reference internal="True" refid="enum-animationplayer-animationmethodcallmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animationplayer-constant-animation-method-call-deferred"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationplayer-constant-animation-method-call-deferred" names="class_animationplayer_constant_animation_method_call_deferred"><reference internal="True" refid="enum-animationplayer-animationmethodcallmode"><inline classes="std std-ref">AnimationMethodCallMode</inline></reference> <strong>ANIMATION_METHOD_CALL_DEFERRED</strong> = <literal>0</literal></paragraph>
            <paragraph><strong>已弃用：</strong> See <reference internal="True" refuri="class_animationmixer#class-animationmixer-constant-animation-callback-mode-method-deferred"><inline classes="std std-ref">AnimationMixer.ANIMATION_CALLBACK_MODE_METHOD_DEFERRED</inline></reference>.</paragraph>
            <target refid="class-animationplayer-constant-animation-method-call-immediate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationplayer-constant-animation-method-call-immediate" names="class_animationplayer_constant_animation_method_call_immediate"><reference internal="True" refid="enum-animationplayer-animationmethodcallmode"><inline classes="std std-ref">AnimationMethodCallMode</inline></reference> <strong>ANIMATION_METHOD_CALL_IMMEDIATE</strong> = <literal>1</literal></paragraph>
            <paragraph><strong>已弃用：</strong> See <reference internal="True" refuri="class_animationmixer#class-animationmixer-constant-animation-callback-mode-method-immediate"><inline classes="std std-ref">AnimationMixer.ANIMATION_CALLBACK_MODE_METHOD_IMMEDIATE</inline></reference>.</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-animationplayer-property-assigned-animation"></target>
            <paragraph classes="classref-property" ids="class-animationplayer-property-assigned-animation" names="class_animationplayer_property_assigned_animation"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>assigned_animation</strong> <reference internal="True" refid="class-animationplayer-property-assigned-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_assigned_animation</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_assigned_animation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果正在播放，则为当前动画的键，否则为上次播放的动画。设置后会改变动画，但除非已经播放，否则不会播放。另见 <reference internal="True" refid="class-animationplayer-property-current-animation"><inline classes="std std-ref">current_animation</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-property-autoplay"></target>
            <paragraph classes="classref-property" ids="class-animationplayer-property-autoplay" names="class_animationplayer_property_autoplay"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>autoplay</strong> = <literal>""</literal> <reference internal="True" refid="class-animationplayer-property-autoplay"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_autoplay</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_autoplay</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>场景加载时要播放的动画名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-property-current-animation"></target>
            <paragraph classes="classref-property" ids="class-animationplayer-property-current-animation" names="class_animationplayer_property_current_animation"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>current_animation</strong> = <literal>""</literal> <reference internal="True" refid="class-animationplayer-property-current-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_current_animation</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_current_animation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前播放的动画的名称。如果没有动画正在播放，该属性的值是一个空字符串。改变这个值不会重新启动动画。关于播放动画的更多信息请参阅 <reference internal="True" refid="class-animationplayer-method-play"><inline classes="std std-ref">play</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>虽然这个属性会出现在检查器中，但它不是用来编辑的，也不会保存在场景中。该属性主要用于获取当前播放的动画，内部用于动画播放轨道。详情请参阅 <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-property-current-animation-length"></target>
            <paragraph classes="classref-property" ids="class-animationplayer-property-current-animation-length" names="class_animationplayer_property_current_animation_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>current_animation_length</strong> <reference internal="True" refid="class-animationplayer-property-current-animation-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_current_animation_length</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前正在播放的动画的长度（以秒为单位）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-property-current-animation-position"></target>
            <paragraph classes="classref-property" ids="class-animationplayer-property-current-animation-position" names="class_animationplayer_property_current_animation_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>current_animation_position</strong> <reference internal="True" refid="class-animationplayer-property-current-animation-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_current_animation_position</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前播放的动画的位置（以秒为单位）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-property-movie-quit-on-finish"></target>
            <paragraph classes="classref-property" ids="class-animationplayer-property-movie-quit-on-finish" names="class_animationplayer_property_movie_quit_on_finish"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>movie_quit_on_finish</strong> = <literal>false</literal> <reference internal="True" refid="class-animationplayer-property-movie-quit-on-finish"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_movie_quit_on_finish_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_movie_quit_on_finish_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，并且引擎在 Movie Maker 模式下运行（见 <reference internal="True" refuri="class_moviewriter#class-moviewriter"><inline classes="std std-ref">MovieWriter</inline></reference>），则会在此 <strong>AnimationPlayer</strong> 中播放完动画后，立即使用 <reference internal="True" refuri="class_scenetree#class-scenetree-method-quit"><inline classes="std std-ref">SceneTree.quit</inline></reference> 退出引擎。当引擎因此而退出时，会打印一条消息。</paragraph>
            <paragraph><strong>注意：</strong>这与 <reference internal="True" refuri="class_animationmixer#class-animationmixer-signal-animation-finished"><inline classes="std std-ref">AnimationMixer.animation_finished</inline></reference> 信号遵循相同的逻辑，因此如果动画被设置为循环，它不会退出引擎。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-property-playback-auto-capture"></target>
            <paragraph classes="classref-property" ids="class-animationplayer-property-playback-auto-capture" names="class_animationplayer_property_playback_auto_capture"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>playback_auto_capture</strong> = <literal>true</literal> <reference internal="True" refid="class-animationplayer-property-playback-auto-capture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_auto_capture</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_auto_capture</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会在自动播放之前执行 <reference internal="True" refuri="class_animationmixer#class-animationmixer-method-capture"><inline classes="std std-ref">AnimationMixer.capture</inline></reference>。这意味着只会使用默认参数执行 <reference internal="True" refid="class-animationplayer-method-play-with-capture"><inline classes="std std-ref">play_with_capture</inline></reference>，不会执行 <reference internal="True" refid="class-animationplayer-method-play"><inline classes="std std-ref">play</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>只有当动画包含捕获轨道时才会执行捕获插值。另见 <reference internal="True" refuri="class_animation#class-animation-constant-update-capture"><inline classes="std std-ref">Animation.UPDATE_CAPTURE</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-property-playback-auto-capture-duration"></target>
            <paragraph classes="classref-property" ids="class-animationplayer-property-playback-auto-capture-duration" names="class_animationplayer_property_playback_auto_capture_duration"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>playback_auto_capture_duration</strong> = <literal>-1.0</literal> <reference internal="True" refid="class-animationplayer-property-playback-auto-capture-duration"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_auto_capture_duration</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_auto_capture_duration</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>另请参见<reference internal="True" refid="class-animationplayer-method-play-with-capture"><inline classes="std std-ref">play_with_capture</inline></reference>和<reference internal="True" refuri="class_animationmixer#class-animationmixer-method-capture"><inline classes="std std-ref">AnimationMixer.capture</inline></reference>。</paragraph>
            <paragraph>如果<reference internal="True" refid="class-animationplayer-property-playback-auto-capture-duration"><inline classes="std std-ref">playback_auto_capture_duration</inline></reference>为负值，则持续时间设置为当前位置和第一个关键点之间的间隔。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-property-playback-auto-capture-ease-type"></target>
            <paragraph classes="classref-property" ids="class-animationplayer-property-playback-auto-capture-ease-type" names="class_animationplayer_property_playback_auto_capture_ease_type"><reference internal="True" refuri="class_tween#enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference> <strong>playback_auto_capture_ease_type</strong> = <literal>0</literal> <reference internal="True" refid="class-animationplayer-property-playback-auto-capture-ease-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_auto_capture_ease_type</strong>(value: <reference internal="True" refuri="class_tween#enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_tween#enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference> <strong>get_auto_capture_ease_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>捕获插值的缓动类型。另见 <reference internal="True" refuri="class_tween#enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-property-playback-auto-capture-transition-type"></target>
            <paragraph classes="classref-property" ids="class-animationplayer-property-playback-auto-capture-transition-type" names="class_animationplayer_property_playback_auto_capture_transition_type"><reference internal="True" refuri="class_tween#enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>playback_auto_capture_transition_type</strong> = <literal>0</literal> <reference internal="True" refid="class-animationplayer-property-playback-auto-capture-transition-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_auto_capture_transition_type</strong>(value: <reference internal="True" refuri="class_tween#enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_tween#enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> <strong>get_auto_capture_transition_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>捕捉插值的过渡类型。另请参见<reference internal="True" refuri="class_tween#enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-property-playback-default-blend-time"></target>
            <paragraph classes="classref-property" ids="class-animationplayer-property-playback-default-blend-time" names="class_animationplayer_property_playback_default_blend_time"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>playback_default_blend_time</strong> = <literal>0.0</literal> <reference internal="True" refid="class-animationplayer-property-playback-default-blend-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_blend_time</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_default_blend_time</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>混合动画的默认时间。范围从 0 到 4096，精度为 0.01。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-property-speed-scale"></target>
            <paragraph classes="classref-property" ids="class-animationplayer-property-speed-scale" names="class_animationplayer_property_speed_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>speed_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-animationplayer-property-speed-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_speed_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_speed_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>速度缩放比。例如，如果该值为 <literal>1</literal>，则动画以正常速度播放。如果它是 <literal>0.5</literal>，那么它会半速播放。如果是 <literal>2</literal>，则会以双倍速度播放。</paragraph>
            <paragraph>如果设置为负值，则动画反向播放。如果设置为<literal>0</literal>，则动画不会前进。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-animationplayer-method-animation-get-next"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-animation-get-next" names="class_animationplayer_method_animation_get_next"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>animation_get_next</strong>(animation_from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationplayer-method-animation-get-next"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在 <literal>animation_from</literal> 动画之后排队播放的动画的键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-animation-set-next"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-animation-set-next" names="class_animationplayer_method_animation_set_next"><abbreviation explanation="无返回值。">void</abbreviation> <strong>animation_set_next</strong>(animation_from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, animation_to: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationplayer-method-animation-set-next"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <literal>animation_from</literal> 动画完成时，触发 <literal>animation_to</literal> 动画。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-clear-queue"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-clear-queue" names="class_animationplayer_method_clear_queue"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_queue</strong>() <reference internal="True" refid="class-animationplayer-method-clear-queue"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除所有已排队、未播放的动画。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-get-blend-time"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-get-blend-time" names="class_animationplayer_method_get_blend_time"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_blend_time</strong>(animation_from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, animation_to: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationplayer-method-get-blend-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回两个动画之间的混合时间（以秒为单位），由它们的键引用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-get-method-call-mode"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-get-method-call-mode" names="class_animationplayer_method_get_method_call_mode"><reference internal="True" refid="enum-animationplayer-animationmethodcallmode"><inline classes="std std-ref">AnimationMethodCallMode</inline></reference> <strong>get_method_call_mode</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationplayer-method-get-method-call-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_animationmixer#class-animationmixer-property-callback-mode-method"><inline classes="std std-ref">AnimationMixer.callback_mode_method</inline></reference> instead.</paragraph>
            <paragraph>返回用于“方法调用”轨道的调用模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-get-playing-speed"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-get-playing-speed" names="class_animationplayer_method_get_playing_speed"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_playing_speed</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationplayer-method-get-playing-speed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前动画的实际播放速度，未播放时则为 <literal>0</literal>。这个速度是 <reference internal="True" refid="class-animationplayer-property-speed-scale"><inline classes="std std-ref">speed_scale</inline></reference> 属性乘以调用 <reference internal="True" refid="class-animationplayer-method-play"><inline classes="std std-ref">play</inline></reference> 时指定的 <literal>custom_speed</literal> 参数。</paragraph>
            <paragraph>如果当前动画是倒放的，则返回负值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-get-process-callback"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-get-process-callback" names="class_animationplayer_method_get_process_callback"><reference internal="True" refid="enum-animationplayer-animationprocesscallback"><inline classes="std std-ref">AnimationProcessCallback</inline></reference> <strong>get_process_callback</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationplayer-method-get-process-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_animationmixer#class-animationmixer-property-callback-mode-process"><inline classes="std std-ref">AnimationMixer.callback_mode_process</inline></reference> instead.</paragraph>
            <paragraph>返回要更新动画的过程通知。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-get-queue"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-get-queue" names="class_animationplayer_method_get_queue"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_queue</strong>() <reference internal="True" refid="class-animationplayer-method-get-queue"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前排队播放的动画键列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-get-root"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-get-root" names="class_animationplayer_method_get_root"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_root</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationplayer-method-get-root"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_animationmixer#class-animationmixer-property-root-node"><inline classes="std std-ref">AnimationMixer.root_node</inline></reference> instead.</paragraph>
            <paragraph>返回节点路径引用将从其出发的节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-is-playing"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-is-playing" names="class_animationplayer_method_is_playing"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_playing</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationplayer-method-is-playing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果动画目前正在播放，则返回 <literal>true</literal>（即便 <reference internal="True" refid="class-animationplayer-property-speed-scale"><inline classes="std std-ref">speed_scale</inline></reference> 和/或 <literal>custom_speed</literal> 为 <literal>0</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-pause"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-pause" names="class_animationplayer_method_pause"><abbreviation explanation="无返回值。">void</abbreviation> <strong>pause</strong>() <reference internal="True" refid="class-animationplayer-method-pause"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>暂停当前播放的动画。<reference internal="True" refid="class-animationplayer-property-current-animation-position"><inline classes="std std-ref">current_animation_position</inline></reference> 将被保留，调用 <reference internal="True" refid="class-animationplayer-method-play"><inline classes="std std-ref">play</inline></reference> 或 <reference internal="True" refid="class-animationplayer-method-play-backwards"><inline classes="std std-ref">play_backwards</inline></reference> 时，不带参数或使用与 <reference internal="True" refid="class-animationplayer-property-assigned-animation"><inline classes="std std-ref">assigned_animation</inline></reference> 相同的动画名称，将恢复动画。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-animationplayer-method-stop"><inline classes="std std-ref">stop</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-play"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-play" names="class_animationplayer_method_play"><abbreviation explanation="无返回值。">void</abbreviation> <strong>play</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"", custom_blend: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, custom_speed: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, from_end: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-animationplayer-method-play"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>播放键名为 <literal>name</literal> 的动画。可以设置自定义混合时间和速度。</paragraph>
            <paragraph><literal>from_end</literal> 选项仅在切换到新的动画轨道，或在相同轨道的开始或结束时生效。它不影响在动画被中途暂停时恢复播放。如果 <literal>custom_speed</literal> 为负，且 <literal>from_end</literal> 为 <literal>true</literal>，则动画将向后播放（相当于调用 <reference internal="True" refid="class-animationplayer-method-play-backwards"><inline classes="std std-ref">play_backwards</inline></reference>）。</paragraph>
            <paragraph><strong>AnimationPlayer</strong> 使用 <reference internal="True" refid="class-animationplayer-property-assigned-animation"><inline classes="std std-ref">assigned_animation</inline></reference> 跟踪其当前或上次播放的动画。如果使用相同的动画 <literal>name</literal> 或没有 <literal>name</literal> 参数调用此方法，则分配的动画将在暂停时恢复播放。</paragraph>
            <paragraph><strong>注意：</strong>动画将在下次处理 <strong>AnimationPlayer</strong> 时更新。如果在调用该方法的同时更新了其他变量，则它们可能更新得太早。要立即执行更新，请调用 <literal>advance(0)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-play-backwards"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-play-backwards" names="class_animationplayer_method_play_backwards"><abbreviation explanation="无返回值。">void</abbreviation> <strong>play_backwards</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"", custom_blend: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1) <reference internal="True" refid="class-animationplayer-method-play-backwards"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>倒放名称键为 <literal>name</literal> 的动画。</paragraph>
            <paragraph>这个方法是简写，等价于调用 <reference internal="True" refid="class-animationplayer-method-play"><inline classes="std std-ref">play</inline></reference> 时使用 <literal>custom_speed = -1.0</literal> 和 <literal>from_end = true</literal>，所以更多信息请参阅其描述。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-play-with-capture"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-play-with-capture" names="class_animationplayer_method_play_with_capture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>play_with_capture</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"", duration: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, custom_blend: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, custom_speed: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, from_end: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, trans_type: <reference internal="True" refuri="class_tween#enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> = 0, ease_type: <reference internal="True" refuri="class_tween#enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference> = 0) <reference internal="True" refid="class-animationplayer-method-play-with-capture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_animationmixer#class-animationmixer-method-capture"><inline classes="std std-ref">AnimationMixer.capture</inline></reference>。</paragraph>
            <paragraph>该方法提供的选项比 <reference internal="True" refid="class-animationplayer-property-playback-auto-capture"><inline classes="std std-ref">playback_auto_capture</inline></reference> 更丰富。<reference internal="True" refid="class-animationplayer-property-playback-auto-capture"><inline classes="std std-ref">playback_auto_capture</inline></reference> 为 <literal>false</literal> 时，该方法与下面这两行基本相同：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">capture(name, duration, trans_type, ease_type)
play(name, custom_blend, custom_speed, from_end)</literal_block>
            <paragraph>如果 <literal>name</literal> 为空，则指定的是 <reference internal="True" refid="class-animationplayer-property-assigned-animation"><inline classes="std std-ref">assigned_animation</inline></reference>。</paragraph>
            <paragraph>如果 <literal>duration</literal> 为负值，则持续时间是当前位置与第一个关键帧的间隔，<literal>from_end</literal> 为 <literal>true</literal> 时使用的则是当前位置与最后一个关键帧之间的间隔。</paragraph>
            <paragraph><strong>注意：</strong><literal>duration</literal> 会考虑 <reference internal="True" refid="class-animationplayer-property-speed-scale"><inline classes="std std-ref">speed_scale</inline></reference>，但 <literal>custom_speed</literal> 不会考虑，因为捕获缓存会和混合结果进行插值，而混合结果可能包含多个动画。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-queue"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-queue" names="class_animationplayer_method_queue"><abbreviation explanation="无返回值。">void</abbreviation> <strong>queue</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationplayer-method-queue"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Queues an animation for playback once the current animation and all previously queued animations are done.</paragraph>
            <paragraph><strong>Note:</strong> If a looped animation is currently playing, the queued animation will never play unless the looped animation is stopped somehow.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-seek"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-seek" names="class_animationplayer_method_seek"><abbreviation explanation="无返回值。">void</abbreviation> <strong>seek</strong>(seconds: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, update: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, update_only: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-animationplayer-method-seek"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将动画寻道到时间点 <literal>seconds</literal>（单位为秒）。<literal>update</literal> 为 <literal>true</literal> 时会同时更新动画，否则会在处理时更新。当前帧和 <literal>seconds</literal> 之间的事件会被跳过。</paragraph>
            <paragraph>如果 <literal>update_only</literal> 为 <literal>true</literal>，则不会处理方法轨道、音频轨道、动画播放轨道。</paragraph>
            <paragraph><strong>注意：</strong>寻道至动画的末尾不会触发 <reference internal="True" refuri="class_animationmixer#class-animationmixer-signal-animation-finished"><inline classes="std std-ref">AnimationMixer.animation_finished</inline></reference>。如果想要跳过动画并触发该信号，请使用 <reference internal="True" refuri="class_animationmixer#class-animationmixer-method-advance"><inline classes="std std-ref">AnimationMixer.advance</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-set-blend-time"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-set-blend-time" names="class_animationplayer_method_set_blend_time"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_blend_time</strong>(animation_from: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, animation_to: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-animationplayer-method-set-blend-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指定两个动画（由它们的键所引用）之间的混合时间（以秒为单位）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-set-method-call-mode"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-set-method-call-mode" names="class_animationplayer_method_set_method_call_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_method_call_mode</strong>(mode: <reference internal="True" refid="enum-animationplayer-animationmethodcallmode"><inline classes="std std-ref">AnimationMethodCallMode</inline></reference>) <reference internal="True" refid="class-animationplayer-method-set-method-call-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_animationmixer#class-animationmixer-property-callback-mode-method"><inline classes="std std-ref">AnimationMixer.callback_mode_method</inline></reference> instead.</paragraph>
            <paragraph>设置用于“方法调用”轨道的调用模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-set-process-callback"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-set-process-callback" names="class_animationplayer_method_set_process_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_process_callback</strong>(mode: <reference internal="True" refid="enum-animationplayer-animationprocesscallback"><inline classes="std std-ref">AnimationProcessCallback</inline></reference>) <reference internal="True" refid="class-animationplayer-method-set-process-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_animationmixer#class-animationmixer-property-callback-mode-process"><inline classes="std std-ref">AnimationMixer.callback_mode_process</inline></reference> instead.</paragraph>
            <paragraph>设置要更新动画的过程通知。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-set-root"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-set-root" names="class_animationplayer_method_set_root"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_root</strong>(path: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>) <reference internal="True" refid="class-animationplayer-method-set-root"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_animationmixer#class-animationmixer-property-root-node"><inline classes="std std-ref">AnimationMixer.root_node</inline></reference> instead.</paragraph>
            <paragraph>设置节点路径引用将从哪个节点出发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationplayer-method-stop"></target>
            <paragraph classes="classref-method" ids="class-animationplayer-method-stop" names="class_animationplayer_method_stop"><abbreviation explanation="无返回值。">void</abbreviation> <strong>stop</strong>(keep_state: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-animationplayer-method-stop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>停止当前播放的动画。动画位置被重置为 <literal>0</literal>，<literal>custom_speed</literal> 被重置为 <literal>1.0</literal>。另见 <reference internal="True" refid="class-animationplayer-method-pause"><inline classes="std std-ref">pause</inline></reference>。</paragraph>
            <paragraph>如果 <literal>keep_state</literal> 为 <literal>true</literal>，则动画状态不会在视觉上更新。</paragraph>
            <paragraph><strong>注意：</strong>方法/音频/动画播放轨道不会被该方法处理。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
