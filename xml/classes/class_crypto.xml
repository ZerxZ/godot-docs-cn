<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_crypto.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Crypto.xml.</comment>
    <target refid="class-crypto"></target>
    <section ids="crypto class-crypto" names="crypto class_crypto">
        <title>Crypto</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供对高阶加密功能的访问。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>Crypto 类提供对高阶加密功能的访问。</paragraph>
            <paragraph>目前，包括非对称密钥的加密/解密和签名/验证、生成加密安全随机字节、RSA 密钥、HMAC 摘要以及自签名的 <reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var crypto = Crypto.new()

# 生成新的 RSA 密钥。
var key = crypto.generate_rsa(4096)

# 使用给定的密钥生成新的自签名证书。
var cert = crypto.generate_self_signed_certificate(key, "CN=mydomain.com,O=My Game Company,C=IT")

# 将密钥和证书保存在用户文件夹中。
key.save("user://generated.key")
cert.save("user://generated.crt")

# 加密
var data = "Some data"
var encrypted = crypto.encrypt(key, data.to_utf8_buffer())

# 解密
var decrypted = crypto.decrypt(key, encrypted)

# 签名
var signature = crypto.sign(HashingContext.HASH_SHA256, data.sha256_buffer(), key)

# 验证
var verified = crypto.verify(HashingContext.HASH_SHA256, data.sha256_buffer(), signature, key)

# 校验
assert(verified)
assert(data.to_utf8_buffer() == decrypted)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;
using System.Diagnostics;

Crypto crypto = new Crypto();

// 生成新的 RSA 密钥。
CryptoKey key = crypto.GenerateRsa(4096);

// 使用给定的密钥生成新的自签名证书。
X509Certificate cert = crypto.GenerateSelfSignedCertificate(key, "CN=mydomain.com,O=My Game Company,C=IT");

// 将密钥和证书保存在用户文件夹中。
key.Save("user://generated.key");
cert.Save("user://generated.crt");

// 加密
string data = "Some data";
byte[] encrypted = crypto.Encrypt(key, data.ToUtf8Buffer());

// 解密
byte[] decrypted = crypto.Decrypt(key, encrypted);

// 签名
byte[] signature = crypto.Sign(HashingContext.HashType.Sha256, Data.Sha256Buffer(), key);

// 验证
bool verified = crypto.Verify(HashingContext.HashType.Sha256, Data.Sha256Buffer(), signature, key);

// 校验
Debug.Assert(verified);
Debug.Assert(data.ToUtf8Buffer() == decrypted);</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="344"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-crypto-method-constant-time-compare"><inline classes="std std-ref">constant_time_compare</inline></reference>(trusted: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, received: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-crypto-method-decrypt"><inline classes="std std-ref">decrypt</inline></reference>(key: <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>, ciphertext: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-crypto-method-encrypt"><inline classes="std std-ref">encrypt</inline></reference>(key: <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>, plaintext: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-crypto-method-generate-random-bytes"><inline classes="std std-ref">generate_random_bytes</inline></reference>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-crypto-method-generate-rsa"><inline classes="std std-ref">generate_rsa</inline></reference>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-crypto-method-generate-self-signed-certificate"><inline classes="std std-ref">generate_self_signed_certificate</inline></reference>(key: <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>, issuer_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "CN=myserver,O=myorganisation,C=IT", not_before: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "20140101000000", not_after: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "20340101000000")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-crypto-method-hmac-digest"><inline classes="std std-ref">hmac_digest</inline></reference>(hash_type: <reference internal="True" refuri="class_hashingcontext#enum-hashingcontext-hashtype"><inline classes="std std-ref">HashType</inline></reference>, key: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, msg: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-crypto-method-sign"><inline classes="std std-ref">sign</inline></reference>(hash_type: <reference internal="True" refuri="class_hashingcontext#enum-hashingcontext-hashtype"><inline classes="std std-ref">HashType</inline></reference>, hash: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, key: <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-crypto-method-verify"><inline classes="std std-ref">verify</inline></reference>(hash_type: <reference internal="True" refuri="class_hashingcontext#enum-hashingcontext-hashtype"><inline classes="std std-ref">HashType</inline></reference>, hash: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, signature: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, key: <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-crypto-method-constant-time-compare"></target>
            <paragraph classes="classref-method" ids="class-crypto-method-constant-time-compare" names="class_crypto_method_constant_time_compare"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>constant_time_compare</strong>(trusted: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, received: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-crypto-method-constant-time-compare"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>比较两个 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> 是否相等，不会泄漏时序信息，能够防止时序攻击。</paragraph>
            <paragraph>详情见<reference name="这篇博文" refuri="https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy">这篇博文</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-crypto-method-decrypt"></target>
            <paragraph classes="classref-method" ids="class-crypto-method-decrypt" names="class_crypto_method_decrypt"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>decrypt</strong>(key: <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>, ciphertext: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-crypto-method-decrypt"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用提供的私钥 <literal>key</literal> 解密给定的密文 <literal>ciphertext</literal>。</paragraph>
            <paragraph><strong>注意：</strong>所接受的密文的最大尺寸受到密钥大小的限制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-crypto-method-encrypt"></target>
            <paragraph classes="classref-method" ids="class-crypto-method-encrypt" names="class_crypto_method_encrypt"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>encrypt</strong>(key: <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>, plaintext: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-crypto-method-encrypt"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用提供的公钥 <literal>key</literal> 加密给定的明文 <literal>plaintext</literal>。</paragraph>
            <paragraph><strong>注意：</strong>所接受的明文的最大尺寸受到密钥大小的限制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-crypto-method-generate-random-bytes"></target>
            <paragraph classes="classref-method" ids="class-crypto-method-generate-random-bytes" names="class_crypto_method_generate_random_bytes"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>generate_random_bytes</strong>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-crypto-method-generate-random-bytes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>生成具有给定大小 <literal>size</literal> 的加密安全随机字节的 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-crypto-method-generate-rsa"></target>
            <paragraph classes="classref-method" ids="class-crypto-method-generate-rsa" names="class_crypto_method_generate_rsa"><reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference> <strong>generate_rsa</strong>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-crypto-method-generate-rsa"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>生成可用于创建自签名证书并传递给 <reference internal="True" refuri="class_streampeertls#class-streampeertls-method-accept-stream"><inline classes="std std-ref">StreamPeerTLS.accept_stream</inline></reference> 的 RSA <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-crypto-method-generate-self-signed-certificate"></target>
            <paragraph classes="classref-method" ids="class-crypto-method-generate-self-signed-certificate" names="class_crypto_method_generate_self_signed_certificate"><reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference> <strong>generate_self_signed_certificate</strong>(key: <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>, issuer_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "CN=myserver,O=myorganisation,C=IT", not_before: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "20140101000000", not_after: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "20340101000000") <reference internal="True" refid="class-crypto-method-generate-self-signed-certificate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据给定的 <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference> 和 <literal>issuer_name</literal> 生成自签名的 <reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference>。证书有效性将由 <literal>not_before</literal> 和 <literal>not_after</literal>（第一个有效日期和最后一个有效日期）定义。<literal>issuer_name</literal> 必须至少包含“CN=”（通用名称，即域名）、“O=”（组织，即你的公司名称）、“C=”（国家，即 2 个字母的该组织所在的国家/地区的 ISO-3166 代码）。</paragraph>
            <paragraph>生成 RSA 密钥和 X509 自签名证书的小示例。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var crypto = Crypto.new()
# 生成 4096 比特 RSA 密钥。
var key = crypto.generate_rsa(4096)
# 使用给定的密钥生成自签名证书。
var cert = crypto.generate_self_signed_certificate(key, "CN=example.com,O=A Game Company,C=IT")</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var crypto = new Crypto();
// 生成 4096 比特 RSA 密钥。
CryptoKey key = crypto.GenerateRsa(4096);
// 使用给定的密钥生成自签名证书。
X509Certificate cert = crypto.GenerateSelfSignedCertificate(key, "CN=mydomain.com,O=My Game Company,C=IT");</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-crypto-method-hmac-digest"></target>
            <paragraph classes="classref-method" ids="class-crypto-method-hmac-digest" names="class_crypto_method_hmac_digest"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>hmac_digest</strong>(hash_type: <reference internal="True" refuri="class_hashingcontext#enum-hashingcontext-hashtype"><inline classes="std std-ref">HashType</inline></reference>, key: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, msg: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-crypto-method-hmac-digest"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用密钥 <literal>key</literal> 生成 <literal>msg</literal> 的 <reference name="HMAC" refuri="https://zh.wikipedia.org/wiki/HMAC">HMAC</reference> 摘要。<literal>hash_type</literal> 参数是用于内部和外部哈希的哈希算法。</paragraph>
            <paragraph>目前仅支持 <reference internal="True" refuri="class_hashingcontext#class-hashingcontext-constant-hash-sha256"><inline classes="std std-ref">HashingContext.HASH_SHA256</inline></reference> 和 <reference internal="True" refuri="class_hashingcontext#class-hashingcontext-constant-hash-sha1"><inline classes="std std-ref">HashingContext.HASH_SHA1</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-crypto-method-sign"></target>
            <paragraph classes="classref-method" ids="class-crypto-method-sign" names="class_crypto_method_sign"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>sign</strong>(hash_type: <reference internal="True" refuri="class_hashingcontext#enum-hashingcontext-hashtype"><inline classes="std std-ref">HashType</inline></reference>, hash: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, key: <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>) <reference internal="True" refid="class-crypto-method-sign"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用提供的私钥 <literal>key</literal> 对类型为 <literal>hash_type</literal> 的给定 <literal>hash</literal> 进行签名。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-crypto-method-verify"></target>
            <paragraph classes="classref-method" ids="class-crypto-method-verify" names="class_crypto_method_verify"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>verify</strong>(hash_type: <reference internal="True" refuri="class_hashingcontext#enum-hashingcontext-hashtype"><inline classes="std std-ref">HashType</inline></reference>, hash: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, signature: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, key: <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>) <reference internal="True" refid="class-crypto-method-verify"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用提供的公钥 <literal>key</literal> 验证类型为 <literal>hash_type</literal> 的给定签名 <literal>signature</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
