<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_semaphore.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Semaphore.xml.</comment>
    <target refid="class-semaphore"></target>
    <section ids="semaphore class-semaphore" names="semaphore class_semaphore">
        <title>Semaphore</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>同步机制，用于控制对 <reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference> 之间共享资源的访问。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>同步机制，用于控制对 <reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference> 之间共享资源的访问。创建时初始化为零。二元版本见 <reference internal="True" refuri="class_mutex#class-mutex"><inline classes="std std-ref">Mutex</inline></reference>。</paragraph>
            <paragraph><strong>警告：</strong>信号量必须谨慎使用，防止死锁。</paragraph>
            <paragraph><strong>警告：</strong>为了确保操作系统能够执行正确的清理（避免崩溃和思索），必须满足以下条件：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>Semaphore</strong> 的引用计数变为零，导致销毁时，没有线程在等待该信号量。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference> 的引用计数变为零，导致销毁时，没有在等待任何信号量。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/performance/using_multiple_threads"><inline classes="doc">使用多线程</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/performance/thread_safe_apis"><inline classes="doc">线程安全的 API</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="56"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-semaphore-method-post"><inline classes="std std-ref">post</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-semaphore-method-try-wait"><inline classes="std std-ref">try_wait</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-semaphore-method-wait"><inline classes="std std-ref">wait</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-semaphore-method-post"></target>
            <paragraph classes="classref-method" ids="class-semaphore-method-post" names="class_semaphore_method_post"><abbreviation explanation="无返回值。">void</abbreviation> <strong>post</strong>() <reference internal="True" refid="class-semaphore-method-post"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>降低 <strong>Semaphore</strong>，额外允许一个线程进入。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-semaphore-method-try-wait"></target>
            <paragraph classes="classref-method" ids="class-semaphore-method-try-wait" names="class_semaphore_method_try_wait"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>try_wait</strong>() <reference internal="True" refid="class-semaphore-method-try-wait"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>与 <reference internal="True" refid="class-semaphore-method-wait"><inline classes="std std-ref">wait</inline></reference> 类似，但不会阻塞，所以如果值为零，则会立即失败并返回 <literal>false</literal>。如果非零，则返回 <literal>true</literal> 以报告成功。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-semaphore-method-wait"></target>
            <paragraph classes="classref-method" ids="class-semaphore-method-wait" names="class_semaphore_method_wait"><abbreviation explanation="无返回值。">void</abbreviation> <strong>wait</strong>() <reference internal="True" refid="class-semaphore-method-wait"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>等待该 <strong>Semaphore</strong>，如果它的值为零，则阻塞到变为非零为止。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
