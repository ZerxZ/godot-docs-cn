<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_diraccess.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <meta content="directory, path, folder" name="keywords">
    </meta>
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/DirAccess.xml.</comment>
    <target refid="class-diraccess"></target>
    <section ids="diraccess class-diraccess" names="diraccess class_diraccess">
        <title>DirAccess</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供管理目录及其内容的方法。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个类可以用来管理目录及其内容，不限于项目文件夹。</paragraph>
            <paragraph><strong>DirAccess</strong> 无法直接实例化。请使用接受要打开的路径的静态方法创建。</paragraph>
            <paragraph>大多数方法都有静态备选项，无需创建 <strong>DirAccess</strong> 即可使用。静态方法仅支持绝对路径（包含 <literal>res://</literal> 和 <literal>user://</literal>）。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 标准
var dir = DirAccess.open("user://levels")
dir.make_dir("world1")
# 静态
DirAccess.make_dir_absolute("user://levels/world1")</literal_block>
            <paragraph><strong>注意：</strong>很多资源类型是经过导入的（例如纹理和声音文件），因为在游戏中只会用到导入后的版本，所以导出后的游戏中不包含对应的源资产。请使用 <reference internal="True" refuri="class_resourceloader#class-resourceloader"><inline classes="std std-ref">ResourceLoader</inline></reference> 访问导入的资源。</paragraph>
            <paragraph>以下是遍历目录中文件的示例：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func dir_contents(path):
    var dir = DirAccess.open(path)
    if dir:
        dir.list_dir_begin()
        var file_name = dir.get_next()
        while file_name != "":
            if dir.current_is_dir():
                print("发现目录：" + file_name)
            else:
                print("发现文件：" + file_name)
            file_name = dir.get_next()
    else:
        print("尝试访问路径时出错。")</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public void DirContents(string path)
{
    using var dir = DirAccess.Open(path);
    if (dir != null)
    {
        dir.ListDirBegin();
        string fileName = dir.GetNext();
        while (fileName != "")
        {
            if (dir.CurrentIsDir())
            {
                GD.Print($"发现目录：{fileName}");
            }
            else
            {
                GD.Print($"发现文件：{fileName}");
            }
            fileName = dir.GetNext();
        }
    }
    else
    {
        GD.Print("尝试访问路径时出错。");
    }
}</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/scripting/filesystem"><inline classes="doc">文件系统</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="76"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-property-include-hidden"><inline classes="std std-ref">include_hidden</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-property-include-navigational"><inline classes="std std-ref">include_navigational</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="187"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-change-dir"><inline classes="std std-ref">change_dir</inline></reference>(to_dir: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-copy"><inline classes="std std-ref">copy</inline></reference>(from: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, to: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, chmod_flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-copy-absolute"><inline classes="std std-ref">copy_absolute</inline></reference>(from: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, to: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, chmod_flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-create-link"><inline classes="std std-ref">create_link</inline></reference>(source: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, target: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-current-is-dir"><inline classes="std std-ref">current_is_dir</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-dir-exists"><inline classes="std std-ref">dir_exists</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-dir-exists-absolute"><inline classes="std std-ref">dir_exists_absolute</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-file-exists"><inline classes="std std-ref">file_exists</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-get-current-dir"><inline classes="std std-ref">get_current_dir</inline></reference>(include_drive: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-get-current-drive"><inline classes="std std-ref">get_current_drive</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-get-directories"><inline classes="std std-ref">get_directories</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-get-directories-at"><inline classes="std std-ref">get_directories_at</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-get-drive-count"><inline classes="std std-ref">get_drive_count</inline></reference>() <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-get-drive-name"><inline classes="std std-ref">get_drive_name</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-get-files"><inline classes="std std-ref">get_files</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-get-files-at"><inline classes="std std-ref">get_files_at</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-get-next"><inline classes="std std-ref">get_next</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-get-open-error"><inline classes="std std-ref">get_open_error</inline></reference>() <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-get-space-left"><inline classes="std std-ref">get_space_left</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-is-case-sensitive"><inline classes="std std-ref">is_case_sensitive</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-is-link"><inline classes="std std-ref">is_link</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-list-dir-begin"><inline classes="std std-ref">list_dir_begin</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-list-dir-end"><inline classes="std std-ref">list_dir_end</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-make-dir"><inline classes="std std-ref">make_dir</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-make-dir-absolute"><inline classes="std std-ref">make_dir_absolute</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-make-dir-recursive"><inline classes="std std-ref">make_dir_recursive</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-make-dir-recursive-absolute"><inline classes="std std-ref">make_dir_recursive_absolute</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess"><inline classes="std std-ref">DirAccess</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-open"><inline classes="std std-ref">open</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-read-link"><inline classes="std std-ref">read_link</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-remove"><inline classes="std std-ref">remove</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-remove-absolute"><inline classes="std std-ref">remove_absolute</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-rename"><inline classes="std std-ref">rename</inline></reference>(from: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, to: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-diraccess-method-rename-absolute"><inline classes="std std-ref">rename_absolute</inline></reference>(from: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, to: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-diraccess-property-include-hidden"></target>
            <paragraph classes="classref-property" ids="class-diraccess-property-include-hidden" names="class_diraccess_property_include_hidden"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>include_hidden</strong> <reference internal="True" refid="class-diraccess-property-include-hidden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_include_hidden</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_include_hidden</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在导航目录时包含隐藏文件。</paragraph>
            <paragraph>影响 <reference internal="True" refid="class-diraccess-method-list-dir-begin"><inline classes="std std-ref">list_dir_begin</inline></reference>、<reference internal="True" refid="class-diraccess-method-get-directories"><inline classes="std std-ref">get_directories</inline></reference>、<reference internal="True" refid="class-diraccess-method-get-files"><inline classes="std std-ref">get_files</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-property-include-navigational"></target>
            <paragraph classes="classref-property" ids="class-diraccess-property-include-navigational" names="class_diraccess_property_include_navigational"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>include_navigational</strong> <reference internal="True" refid="class-diraccess-property-include-navigational"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_include_navigational</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_include_navigational</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在导航目录时包含 <literal>.</literal> 和 <literal>..</literal>。</paragraph>
            <paragraph>影响 <reference internal="True" refid="class-diraccess-method-list-dir-begin"><inline classes="std std-ref">list_dir_begin</inline></reference> 和 <reference internal="True" refid="class-diraccess-method-get-directories"><inline classes="std std-ref">get_directories</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-diraccess-method-change-dir"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-change-dir" names="class_diraccess_method_change_dir"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>change_dir</strong>(to_dir: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-diraccess-method-change-dir"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将当前打开的目录改为作为参数传递的目录。该参数可以是相对于当前目录的（例如 <literal>newdir</literal> 或 <literal>../newdir</literal>），也可以是绝对路径（例如 <literal>/tmp/newdir</literal> 或 <literal>res://somedir/newdir</literal>）。</paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 错误码常量之一（成功时为 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>新目录必须在相同范围内，例如当在 <literal>res://</literal> 中打开目录时，无法将其更改为 <literal>user://</literal> 目录。如果需要在另一个访问范围中打开目录，请使用 <reference internal="True" refid="class-diraccess-method-open"><inline classes="std std-ref">open</inline></reference> 创建一个新实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-copy"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-copy" names="class_diraccess_method_copy"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>copy</strong>(from: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, to: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, chmod_flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-diraccess-method-copy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>from</literal> 文件复制到 <literal>to</literal> 目标位置。两个参数都应该是文件的路径，可以是相对路径，也可以是绝对路径。如果目标文件存在并且没有访问保护，则它将被覆盖。</paragraph>
            <paragraph>如果 <literal>chmod_flags</literal> 不同于 <literal>-1</literal>，且如果在当前操作系统上可用，目标路径的 Unix 权限将设置为提供的值。</paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 错误码常量之一（成功时为 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-copy-absolute"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-copy-absolute" names="class_diraccess_method_copy_absolute"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>copy_absolute</strong>(from: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, to: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, chmod_flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-diraccess-method-copy-absolute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>静态版本的 <reference internal="True" refid="class-diraccess-method-copy"><inline classes="std std-ref">copy</inline></reference>。仅支持绝对路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-create-link"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-create-link" names="class_diraccess_method_create_link"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>create_link</strong>(source: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, target: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-diraccess-method-create-link"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建文件或文件夹的符号链接。</paragraph>
            <paragraph><strong>注意：</strong>在 Window 上，使用提升权限运行程序或启用“开发者模式”时该方法才能正常工作。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS、Linux 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-current-is-dir"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-current-is-dir" names="class_diraccess_method_current_is_dir"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>current_is_dir</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-diraccess-method-current-is-dir"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回上一次 <reference internal="True" refid="class-diraccess-method-get-next"><inline classes="std std-ref">get_next</inline></reference> 调用处理的当前项目是否为目录（<literal>.</literal> 和 <literal>.</literal> 属于目录）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-dir-exists"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-dir-exists" names="class_diraccess_method_dir_exists"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>dir_exists</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-diraccess-method-dir-exists"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回目标目录是否存在。参数可以是相对于当前目录的路径，也可以是绝对路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-dir-exists-absolute"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-dir-exists-absolute" names="class_diraccess_method_dir_exists_absolute"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>dir_exists_absolute</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-diraccess-method-dir-exists-absolute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>静态版本的 <reference internal="True" refid="class-diraccess-method-dir-exists"><inline classes="std std-ref">dir_exists</inline></reference>。仅支持绝对路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-file-exists"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-file-exists" names="class_diraccess_method_file_exists"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>file_exists</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-diraccess-method-file-exists"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回目标文件是否存在。参数可以是相对于当前目录的路径，也可以是绝对路径。</paragraph>
            <paragraph>对于静态等效项，请使用 <reference internal="True" refuri="class_fileaccess#class-fileaccess-method-file-exists"><inline classes="std std-ref">FileAccess.file_exists</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-get-current-dir"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-get-current-dir" names="class_diraccess_method_get_current_dir"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_current_dir</strong>(include_drive: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-diraccess-method-get-current-dir"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前打开目录的绝对路径（例如 <literal>res://文件夹</literal> 或 <literal>C:\tmp\文件夹</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-get-current-drive"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-get-current-drive" names="class_diraccess_method_get_current_drive"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_current_drive</strong>() <reference internal="True" refid="class-diraccess-method-get-current-drive"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前打开目录的驱动器索引。要将返回的索引转换为驱动器名称，请参阅 <reference internal="True" refid="class-diraccess-method-get-drive-name"><inline classes="std std-ref">get_drive_name</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-get-directories"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-get-directories" names="class_diraccess_method_get_directories"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_directories</strong>() <reference internal="True" refid="class-diraccess-method-get-directories"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该目录内容的文件名 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>，不含文件。该数组按字母排序。</paragraph>
            <paragraph>受 <reference internal="True" refid="class-diraccess-property-include-hidden"><inline classes="std std-ref">include_hidden</inline></reference> 和 <reference internal="True" refid="class-diraccess-property-include-navigational"><inline classes="std std-ref">include_navigational</inline></reference> 的影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-get-directories-at"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-get-directories-at" names="class_diraccess_method_get_directories_at"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_directories_at</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-diraccess-method-get-directories-at"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于给定路径 <literal>path</literal> 的目录内容的文件名 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>，不含文件。该数组按字母排序。</paragraph>
            <paragraph>如果你想要对包括的内容有更多的控制，请使用 <reference internal="True" refid="class-diraccess-method-get-directories"><inline classes="std std-ref">get_directories</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-get-drive-count"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-get-drive-count" names="class_diraccess_method_get_drive_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_drive_count</strong>() <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-diraccess-method-get-drive-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 Windows 上，返回挂载在当前文件系统上的驱动器（分区）数量。</paragraph>
            <paragraph>在 macOS 上，返回挂载卷的数量。</paragraph>
            <paragraph>在 Linux 上，返回挂载卷与 GTK 3 书签的数量。</paragraph>
            <paragraph>在其他平台上，该方法返回 0。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-get-drive-name"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-get-drive-name" names="class_diraccess_method_get_drive_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_drive_name</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-diraccess-method-get-drive-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 Windows 上，返回作为参数传递的驱动器（分区）的名称（例如 <literal>C:</literal>）。</paragraph>
            <paragraph>在 macOS 上，返回作为参数传递的挂载卷的路径。</paragraph>
            <paragraph>在 Linux 上，返回作为参数传递的挂载卷或 GTK 3 书签的路径。</paragraph>
            <paragraph>在其他平台上，或者当请求的驱动器不存在时，该方法会返回空的 String。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-get-files"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-get-files" names="class_diraccess_method_get_files"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_files</strong>() <reference internal="True" refid="class-diraccess-method-get-files"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回目录内容的文件名 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>，不含目录。该数组按字母排序。</paragraph>
            <paragraph>受 <reference internal="True" refid="class-diraccess-property-include-hidden"><inline classes="std std-ref">include_hidden</inline></reference> 的影响。</paragraph>
            <paragraph><strong>注意：</strong>在导出后的项目中对 <literal>res://</literal> 使用时，只会返回确实在 PCK 的给定文件夹中存在的文件。在实践中，导入后的资源是存放在顶层的 <literal>.godot</literal> 文件夹中的，因此只会返回 <literal>*.gd</literal> 和 <literal>*.import</literal> 文件的路径（以及 <literal>project.godot</literal> 或者 <literal>project.binary</literal> 和项目图标等文件）。导出后的项目中，返回的列表也会因为 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-editor-export-convert-text-resources-to-binary"><inline classes="std std-ref">ProjectSettings.editor/export/convert_text_resources_to_binary</inline></reference> 是否为 <literal>true</literal> 而变化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-get-files-at"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-get-files-at" names="class_diraccess_method_get_files_at"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_files_at</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-diraccess-method-get-files-at"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于给定路径 <literal>path</literal> 的目录内容的文件名 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>，不含目录。该数组按字母排序。</paragraph>
            <paragraph>如果你想要对包括的内容有更多的控制，请使用 <reference internal="True" refid="class-diraccess-method-get-files"><inline classes="std std-ref">get_files</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-get-next"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-get-next" names="class_diraccess_method_get_next"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_next</strong>() <reference internal="True" refid="class-diraccess-method-get-next"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前目录中的下一个元素（文件或目录）。</paragraph>
            <paragraph>返回的是文件或目录的名称（不是完整路径）。完全处理完流之后，该方法会返回空 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 并自动将流关闭（即此时不必再调用 <reference internal="True" refid="class-diraccess-method-list-dir-end"><inline classes="std std-ref">list_dir_end</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-get-open-error"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-get-open-error" names="class_diraccess_method_get_open_error"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>get_open_error</strong>() <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-diraccess-method-get-open-error"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前线程中最后一次 <reference internal="True" refid="class-diraccess-method-open"><inline classes="std std-ref">open</inline></reference> 调用的结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-get-space-left"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-get-space-left" names="class_diraccess_method_get_space_left"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_space_left</strong>() <reference internal="True" refid="class-diraccess-method-get-space-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前目录所在磁盘的可用空间，单位为字节。如果该平台查询可用空间的方法失败，则返回 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-is-case-sensitive"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-is-case-sensitive" names="class_diraccess_method_is_case_sensitive"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_case_sensitive</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-diraccess-method-is-case-sensitive"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果文件系统或目录使用区分大小写的文件名，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS、Linux（仅对于 EXT4 和 F2FS 文件系统）和 Windows 上实现。在其他平台上，它始终返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-is-link"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-is-link" names="class_diraccess_method_is_link"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_link</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-diraccess-method-is-link"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果文件或目录为符号链接、目录联接等重解析点，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS、Linux 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-list-dir-begin"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-list-dir-begin" names="class_diraccess_method_list_dir_begin"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>list_dir_begin</strong>() <reference internal="True" refid="class-diraccess-method-list-dir-begin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>初始化流，用于使用 <reference internal="True" refid="class-diraccess-method-get-next"><inline classes="std std-ref">get_next</inline></reference> 函数列出所有文件和目录，如果需要还会关闭目前打开的流。处理完流之后，一般应使用 <reference internal="True" refid="class-diraccess-method-list-dir-end"><inline classes="std std-ref">list_dir_end</inline></reference> 关闭。</paragraph>
            <paragraph>受 <reference internal="True" refid="class-diraccess-property-include-hidden"><inline classes="std std-ref">include_hidden</inline></reference> 和 <reference internal="True" refid="class-diraccess-property-include-navigational"><inline classes="std std-ref">include_navigational</inline></reference> 的影响。</paragraph>
            <paragraph><strong>注意：</strong>该方法返回的文件和目录顺序是不确定的，不同操作系统也可能不同。如果你想要获取按字母排序的文件或文件夹列表，请使用 <reference internal="True" refid="class-diraccess-method-get-files"><inline classes="std std-ref">get_files</inline></reference> 或 <reference internal="True" refid="class-diraccess-method-get-directories"><inline classes="std std-ref">get_directories</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-list-dir-end"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-list-dir-end" names="class_diraccess_method_list_dir_end"><abbreviation explanation="无返回值。">void</abbreviation> <strong>list_dir_end</strong>() <reference internal="True" refid="class-diraccess-method-list-dir-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>关闭用 <reference internal="True" refid="class-diraccess-method-list-dir-begin"><inline classes="std std-ref">list_dir_begin</inline></reference> 打开的当前流（并不关注是否已经用 <reference internal="True" refid="class-diraccess-method-get-next"><inline classes="std std-ref">get_next</inline></reference> 完成处理）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-make-dir"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-make-dir" names="class_diraccess_method_make_dir"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>make_dir</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-diraccess-method-make-dir"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建目录。参数可以相对于当前目录，也可以是绝对路径。目标目录应该位于已经存在的目录中（递归创建完整的路径请参阅 <reference internal="True" refid="class-diraccess-method-make-dir-recursive"><inline classes="std std-ref">make_dir_recursive</inline></reference>）。</paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 错误码常量（成功时为 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-make-dir-absolute"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-make-dir-absolute" names="class_diraccess_method_make_dir_absolute"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>make_dir_absolute</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-diraccess-method-make-dir-absolute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>静态版本的 <reference internal="True" refid="class-diraccess-method-make-dir"><inline classes="std std-ref">make_dir</inline></reference>。仅支持绝对路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-make-dir-recursive"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-make-dir-recursive" names="class_diraccess_method_make_dir_recursive"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>make_dir_recursive</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-diraccess-method-make-dir-recursive"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>递归调用 <reference internal="True" refid="class-diraccess-method-make-dir"><inline classes="std std-ref">make_dir</inline></reference> 方法，创建目标目录及其路径中所有必要的中间目录。参数可以相对于当前目录，也可以是绝对路径。</paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 错误码常量（成功时为 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-make-dir-recursive-absolute"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-make-dir-recursive-absolute" names="class_diraccess_method_make_dir_recursive_absolute"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>make_dir_recursive_absolute</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-diraccess-method-make-dir-recursive-absolute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>静态版本的 <reference internal="True" refid="class-diraccess-method-make-dir-recursive"><inline classes="std std-ref">make_dir_recursive</inline></reference>。仅支持绝对路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-open"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-open" names="class_diraccess_method_open"><reference internal="True" refid="class-diraccess"><inline classes="std std-ref">DirAccess</inline></reference> <strong>open</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-diraccess-method-open"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建 <strong>DirAccess</strong> 对象并打开文件系统中的某个现存目录。<literal>path</literal> 参数可以是在项目树中（<literal>res://folder</literal>）、用户目录中（<literal>user://folder</literal>），也可以是用户文件系统的绝对路径（例如 <literal>/tmp/folder</literal> 或 <literal>C:\tmp\folder</literal>）。</paragraph>
            <paragraph>如果打开目录失败，则返回 <literal>null</literal>。你可以使用 <reference internal="True" refid="class-diraccess-method-get-open-error"><inline classes="std std-ref">get_open_error</inline></reference> 来查看发生的错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-read-link"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-read-link" names="class_diraccess_method_read_link"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>read_link</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-diraccess-method-read-link"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回符号链接的目标。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS、Linux 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-remove"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-remove" names="class_diraccess_method_remove"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>remove</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-diraccess-method-remove"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将目标文件或空目录永久删除。参数可以相对于当前目录，也可以是绝对路径。如果目标目录非空，则操作失败。</paragraph>
            <paragraph>如果你不想永久删除该文件/目录，请改用 <reference internal="True" refuri="class_os#class-os-method-move-to-trash"><inline classes="std std-ref">OS.move_to_trash</inline></reference>。</paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 错误码常量（成功时为 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-remove-absolute"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-remove-absolute" names="class_diraccess_method_remove_absolute"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>remove_absolute</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-diraccess-method-remove-absolute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>静态版本的 <reference internal="True" refid="class-diraccess-method-remove"><inline classes="std std-ref">remove</inline></reference>。仅支持绝对路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-rename"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-rename" names="class_diraccess_method_rename"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>rename</strong>(from: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, to: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-diraccess-method-rename"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>from</literal> 文件或目录重命名为（移动至）<literal>to</literal> 目标。两个参数都应该是文件或目录的路径，可以是相对路径也可以是绝对路径。如果目标文件或目录已存在，并且没有写保护，则会被覆盖。</paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 错误码常量（成功时为 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-diraccess-method-rename-absolute"></target>
            <paragraph classes="classref-method" ids="class-diraccess-method-rename-absolute" names="class_diraccess_method_rename_absolute"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>rename_absolute</strong>(from: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, to: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-diraccess-method-rename-absolute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>静态版本的 <reference internal="True" refid="class-diraccess-method-rename"><inline classes="std std-ref">rename</inline></reference>。仅支持绝对路径。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
