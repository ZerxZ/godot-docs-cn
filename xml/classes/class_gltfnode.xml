<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_gltfnode.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/modules/gltf/doc_classes/GLTFNode.xml.</comment>
    <target refid="class-gltfnode"></target>
    <section ids="gltfnode class-gltfnode" names="gltfnode class_gltfnode">
        <title>GLTFNode</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>GLTF 节点类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>代表 GLTF 节点。GLTF 节点中可以包含名称、变换、子节点（GLTF 节点）以及其他专门的属性（由各自不同的类表示）。</paragraph>
            <paragraph>GLTF 节点通常存在于表示 GLTF 文件中的所有数据的 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 内部。大多数 GLTFNode 的属性都是 GLTF 文件中其他数据的索引。你可以使用 <reference internal="True" refid="class-gltfnode-method-get-additional-data"><inline classes="std std-ref">get_additional_data</inline></reference> 和 <reference internal="True" refid="class-gltfnode-method-set-additional-data"><inline classes="std std-ref">set_additional_data</inline></reference> 来添加额外的属性，扩展 GLTF 节点。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/io/runtime_file_loading_and_saving"><inline classes="doc">运行时文件加载与保存</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="GLTF 场景和节点规格" refuri='https://github.com/KhronosGroup/glTF-Tutorials/blob/master/gltfTutorial/gltfTutorial_004_ScenesNodes.md"'>GLTF 场景和节点规格</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="53"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-property-camera"><inline classes="std std-ref">camera</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-property-children"><inline classes="std std-ref">children</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedInt32Array()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-property-height"><inline classes="std std-ref">height</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-property-light"><inline classes="std std-ref">light</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-property-mesh"><inline classes="std std-ref">mesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-property-parent"><inline classes="std std-ref">parent</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-property-position"><inline classes="std std-ref">position</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-property-rotation"><inline classes="std std-ref">rotation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Quaternion(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-property-scale"><inline classes="std std-ref">scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-property-skeleton"><inline classes="std std-ref">skeleton</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-property-skin"><inline classes="std std-ref">skin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-property-xform"><inline classes="std std-ref">xform</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="181"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-method-get-additional-data"><inline classes="std std-ref">get_additional_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> extension_name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfnode-method-set-additional-data"><inline classes="std std-ref">set_additional_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> extension_name, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> additional_data <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-gltfnode-property-camera"></target>
            <paragraph classes="classref-property" ids="class-gltfnode-property-camera" names="class_gltfnode_property_camera"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>camera</strong> = <literal>-1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_camera</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_camera</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果该 GLTF 节点是一个相机，则 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 中 <reference internal="True" refuri="class_gltfcamera#class-gltfcamera"><inline classes="std std-ref">GLTFCamera</inline></reference> 的索引将描述该相机的属性。如果为 -1，则该节点不是相机。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfnode-property-children"></target>
            <paragraph classes="classref-property" ids="class-gltfnode-property-children" names="class_gltfnode_property_children"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>children</strong> = <literal>PackedInt32Array()</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_children</strong> <strong>(</strong> <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_children</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 中子节点的索引。如果该 GLTF 节点没有子节点，则这将是一个空数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfnode-property-height"></target>
            <paragraph classes="classref-property" ids="class-gltfnode-property-height" names="class_gltfnode_property_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>height</strong> = <literal>-1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_height</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_height</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点在节点层次结构中的深度。根节点的高度为 0，其子节点的高度为 1，依此类推。如果为 -1，则尚未计算高度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfnode-property-light"></target>
            <paragraph classes="classref-property" ids="class-gltfnode-property-light" names="class_gltfnode_property_light"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>light</strong> = <literal>-1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_light</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_light</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果该 GLTF 节点是一盏灯，则 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 中 <reference internal="True" refuri="class_gltflight#class-gltflight"><inline classes="std std-ref">GLTFLight</inline></reference> 的索引将描述该灯的属性。如果为 -1，则该节点不是灯。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfnode-property-mesh"></target>
            <paragraph classes="classref-property" ids="class-gltfnode-property-mesh" names="class_gltfnode_property_mesh"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mesh</strong> = <literal>-1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_mesh</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_mesh</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果该 GLTF 节点是网格，则 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 中 <reference internal="True" refuri="class_gltfmesh#class-gltfmesh"><inline classes="std std-ref">GLTFMesh</inline></reference> 的索引将描述该网格的属性。如果为 -1，则该节点不是网格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfnode-property-parent"></target>
            <paragraph classes="classref-property" ids="class-gltfnode-property-parent" names="class_gltfnode_property_parent"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>parent</strong> = <literal>-1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_parent</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_parent</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 中父节点的索引。如果为 -1，则该节点为根节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfnode-property-position"></target>
            <paragraph classes="classref-property" ids="class-gltfnode-property-position" names="class_gltfnode_property_position"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>position</strong> = <literal>Vector3(0, 0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_position</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_position</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 GLTF 节点相对于其父节点的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfnode-property-rotation"></target>
            <paragraph classes="classref-property" ids="class-gltfnode-property-rotation" names="class_gltfnode_property_rotation"><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>rotation</strong> = <literal>Quaternion(0, 0, 0, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_rotation</strong> <strong>(</strong> <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>get_rotation</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 GLTF 节点相对于其父节点的旋转。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfnode-property-scale"></target>
            <paragraph classes="classref-property" ids="class-gltfnode-property-scale" names="class_gltfnode_property_scale"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>scale</strong> = <literal>Vector3(1, 1, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_scale</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_scale</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 GLTF 节点相对于其父节点的缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfnode-property-skeleton"></target>
            <paragraph classes="classref-property" ids="class-gltfnode-property-skeleton" names="class_gltfnode_property_skeleton"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>skeleton</strong> = <literal>-1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_skeleton</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_skeleton</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果该 GLTF 节点具有骨架，则 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 中的 <reference internal="True" refuri="class_gltfskeleton#class-gltfskeleton"><inline classes="std std-ref">GLTFSkeleton</inline></reference> 的索引将描述骨架的属性。如果为 -1，则该节点没有骨架。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfnode-property-skin"></target>
            <paragraph classes="classref-property" ids="class-gltfnode-property-skin" names="class_gltfnode_property_skin"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>skin</strong> = <literal>-1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_skin</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_skin</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果该 GLTF 节点有皮肤，则 <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference> 中的 <reference internal="True" refuri="class_gltfskin#class-gltfskin"><inline classes="std std-ref">GLTFSkin</inline></reference> 的索引将描述皮肤的属性。如果为 -1，则该节点没有皮肤。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfnode-property-xform"></target>
            <paragraph classes="classref-property" ids="class-gltfnode-property-xform" names="class_gltfnode_property_xform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>xform</strong> = <literal>Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_xform</strong> <strong>(</strong> <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>get_xform</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>GLTF 节点相对于其父节点的变换。由于通常首选位置、旋转和缩放属性，因此不使用该属性。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-gltfnode-method-get-additional-data"></target>
            <paragraph classes="classref-method" ids="class-gltfnode-method-get-additional-data" names="class_gltfnode_method_get_additional_data"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_additional_data</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> extension_name <strong>)</strong></paragraph>
            <paragraph>在这个 <strong>GLTFNode</strong> 实例中获取额外的任意数据。这可以用来保持 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 类中每个节点的状态数据，这很重要，因为它们是无状态的。</paragraph>
            <paragraph>参数应该是 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 的名字（不必与 GLTF 文件中的扩展名相匹配），而该返回值可以是你设置的任何值。如果没有设置任何值，则返回值为 null。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfnode-method-set-additional-data"></target>
            <paragraph classes="classref-method" ids="class-gltfnode-method-set-additional-data" names="class_gltfnode_method_set_additional_data">void <strong>set_additional_data</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> extension_name, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> additional_data <strong>)</strong></paragraph>
            <paragraph>在这个 <strong>GLTFNode</strong> 实例中设置额外的任意数据。这可以用来保持 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 类中每个节点的状态数据，这很重要，因为它们是无状态的。</paragraph>
            <paragraph>第一个参数应该是 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 的名字（不必与 GLTF 文件中的扩展名相匹配），第二个参数可以是任何你想要的东西。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
