<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_animationnodeblendtree.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AnimationNodeBlendTree.xml.</comment>
    <target refid="class-animationnodeblendtree"></target>
    <section ids="animationnodeblendtree class-animationnodeblendtree" names="animationnodeblendtree class_animationnodeblendtree">
        <title>AnimationNodeBlendTree</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于复杂动画的许多类型 <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> 的子树。由 <reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 使用。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个动画节点可以包含任何其他类型动画节点的子树，例如 <reference internal="True" refuri="class_animationnodetransition#class-animationnodetransition"><inline classes="std std-ref">AnimationNodeTransition</inline></reference>、<reference internal="True" refuri="class_animationnodeblend2#class-animationnodeblend2"><inline classes="std std-ref">AnimationNodeBlend2</inline></reference>、<reference internal="True" refuri="class_animationnodeblend3#class-animationnodeblend3"><inline classes="std std-ref">AnimationNodeBlend3</inline></reference>、<reference internal="True" refuri="class_animationnodeoneshot#class-animationnodeoneshot"><inline classes="std std-ref">AnimationNodeOneShot</inline></reference> 等。这是最常用的动画节点根之一。</paragraph>
            <paragraph>默认会创建一个名为 <literal>output</literal> 的 <reference internal="True" refuri="class_animationnodeoutput#class-animationnodeoutput"><inline classes="std std-ref">AnimationNodeOutput</inline></reference> 节点。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/animation/animation_tree"><inline classes="doc">使用 AnimationTree</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="73"></colspec>
                    <colspec colwidth="19"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodeblendtree-property-graph-offset"><inline classes="std std-ref">graph_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="43"></colspec>
                    <colspec colwidth="221"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodeblendtree-method-add-node"><inline classes="std std-ref">add_node</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, node: <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodeblendtree-method-connect-node"><inline classes="std std-ref">connect_node</inline></reference>(input_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, input_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, output_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodeblendtree-method-disconnect-node"><inline classes="std std-ref">disconnect_node</inline></reference>(input_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, input_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodeblendtree-method-get-node"><inline classes="std std-ref">get_node</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodeblendtree-method-get-node-position"><inline classes="std std-ref">get_node_position</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodeblendtree-method-has-node"><inline classes="std std-ref">has_node</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodeblendtree-method-remove-node"><inline classes="std std-ref">remove_node</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodeblendtree-method-rename-node"><inline classes="std std-ref">rename_node</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, new_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodeblendtree-method-set-node-position"><inline classes="std std-ref">set_node_position</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-animationnodeblendtree-signal-node-changed"></target>
            <paragraph classes="classref-signal" ids="class-animationnodeblendtree-signal-node-changed" names="class_animationnodeblendtree_signal_node_changed"><strong>node_changed</strong>(node_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationnodeblendtree-signal-node-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当输入端口信息发生更改时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="常量">
            <title>常量</title>
            <target refid="class-animationnodeblendtree-constant-connection-ok"></target>
            <paragraph classes="classref-constant" ids="class-animationnodeblendtree-constant-connection-ok" names="class_animationnodeblendtree_constant_connection_ok"><strong>CONNECTION_OK</strong> = <literal>0</literal> <reference internal="True" refid="class-animationnodeblendtree-constant-connection-ok"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>连接成功。</paragraph>
            <target refid="class-animationnodeblendtree-constant-connection-error-no-input"></target>
            <paragraph classes="classref-constant" ids="class-animationnodeblendtree-constant-connection-error-no-input" names="class_animationnodeblendtree_constant_connection_error_no_input"><strong>CONNECTION_ERROR_NO_INPUT</strong> = <literal>1</literal> <reference internal="True" refid="class-animationnodeblendtree-constant-connection-error-no-input"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>输入节点为 <literal>null</literal>。</paragraph>
            <target refid="class-animationnodeblendtree-constant-connection-error-no-input-index"></target>
            <paragraph classes="classref-constant" ids="class-animationnodeblendtree-constant-connection-error-no-input-index" names="class_animationnodeblendtree_constant_connection_error_no_input_index"><strong>CONNECTION_ERROR_NO_INPUT_INDEX</strong> = <literal>2</literal> <reference internal="True" refid="class-animationnodeblendtree-constant-connection-error-no-input-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指定的输入端口超出范围。</paragraph>
            <target refid="class-animationnodeblendtree-constant-connection-error-no-output"></target>
            <paragraph classes="classref-constant" ids="class-animationnodeblendtree-constant-connection-error-no-output" names="class_animationnodeblendtree_constant_connection_error_no_output"><strong>CONNECTION_ERROR_NO_OUTPUT</strong> = <literal>3</literal> <reference internal="True" refid="class-animationnodeblendtree-constant-connection-error-no-output"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>输出节点为 <literal>null</literal>。</paragraph>
            <target refid="class-animationnodeblendtree-constant-connection-error-same-node"></target>
            <paragraph classes="classref-constant" ids="class-animationnodeblendtree-constant-connection-error-same-node" names="class_animationnodeblendtree_constant_connection_error_same_node"><strong>CONNECTION_ERROR_SAME_NODE</strong> = <literal>4</literal> <reference internal="True" refid="class-animationnodeblendtree-constant-connection-error-same-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>输入和输出节点相同。</paragraph>
            <target refid="class-animationnodeblendtree-constant-connection-error-connection-exists"></target>
            <paragraph classes="classref-constant" ids="class-animationnodeblendtree-constant-connection-error-connection-exists" names="class_animationnodeblendtree_constant_connection_error_connection_exists"><strong>CONNECTION_ERROR_CONNECTION_EXISTS</strong> = <literal>5</literal> <reference internal="True" refid="class-animationnodeblendtree-constant-connection-error-connection-exists"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指定的连接已经存在。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-animationnodeblendtree-property-graph-offset"></target>
            <paragraph classes="classref-property" ids="class-animationnodeblendtree-property-graph-offset" names="class_animationnodeblendtree_property_graph_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>graph_offset</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-animationnodeblendtree-property-graph-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_graph_offset</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_graph_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>所有子动画节点的全局偏移量。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-animationnodeblendtree-method-add-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodeblendtree-method-add-node" names="class_animationnodeblendtree_method_add_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_node</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, node: <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <reference internal="True" refid="class-animationnodeblendtree-method-add-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的位置 <literal>position</literal> 添加一个 <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference>。<literal>name</literal> 用于后续识别该创建的子动画节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodeblendtree-method-connect-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodeblendtree-method-connect-node" names="class_animationnodeblendtree_method_connect_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>connect_node</strong>(input_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, input_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, output_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationnodeblendtree-method-connect-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>连接一个 <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> 的输出作为另一个 <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> 的输入，连接在 <literal>input_index</literal> 指定的输入端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodeblendtree-method-disconnect-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodeblendtree-method-disconnect-node" names="class_animationnodeblendtree_method_disconnect_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>disconnect_node</strong>(input_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, input_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-animationnodeblendtree-method-disconnect-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>断开连接到指定输入端的动画节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodeblendtree-method-get-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodeblendtree-method-get-node" names="class_animationnodeblendtree_method_get_node"><reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> <strong>get_node</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodeblendtree-method-get-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回名称为 <literal>name</literal> 的子动画节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodeblendtree-method-get-node-position"></target>
            <paragraph classes="classref-method" ids="class-animationnodeblendtree-method-get-node-position" names="class_animationnodeblendtree_method_get_node_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_node_position</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodeblendtree-method-get-node-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回名称为 <literal>name</literal> 的子动画节点的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodeblendtree-method-has-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodeblendtree-method-has-node" names="class_animationnodeblendtree_method_has_node"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_node</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodeblendtree-method-has-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果存在名称为 <literal>name</literal> 的动画子节点，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodeblendtree-method-remove-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodeblendtree-method-remove-node" names="class_animationnodeblendtree_method_remove_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_node</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationnodeblendtree-method-remove-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除一个子动画节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodeblendtree-method-rename-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodeblendtree-method-rename-node" names="class_animationnodeblendtree_method_rename_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>rename_node</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, new_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationnodeblendtree-method-rename-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>更改子动画节点的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodeblendtree-method-set-node-position"></target>
            <paragraph classes="classref-method" ids="class-animationnodeblendtree-method-set-node-position" names="class_animationnodeblendtree_method_set_node_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_node_position</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-animationnodeblendtree-method-set-node-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>修改子动画节点的位置。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
