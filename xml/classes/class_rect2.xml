<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_rect2.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Rect2.xml.</comment>
    <target refid="class-rect2"></target>
    <section ids="rect2 class-rect2" names="rect2 class_rect2">
        <title>Rect2</title>
        <paragraph>使用浮点数坐标的 2D 轴对齐边界框。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Rect2</strong> 内置 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 类型表示 2D 空间中的轴对齐矩形。它由其 <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference> 和 <reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">size</inline></reference> 定义，皆为 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 类型。它经常被用于快速重叠测试（参见 <reference internal="True" refid="class-rect2-method-intersects"><inline classes="std std-ref">intersects</inline></reference>）。虽然 <strong>Rect2</strong> 本身是轴对齐的，但它可以与 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> 组合来表示旋转或倾斜的矩形。</paragraph>
            <paragraph>对于整数坐标，请使用 <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>。<strong>Rect2</strong> 的 3D 等效体是 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>不支持负的 <reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">size</inline></reference>。对于负大小，大多数 <strong>Rect2</strong> 方法都无法正常工作。使用 <reference internal="True" refid="class-rect2-method-abs"><inline classes="std std-ref">abs</inline></reference> 获取具有非负大小的等效 <strong>Rect2</strong>。</paragraph>
            <paragraph><strong>注意：</strong>在布尔上下文中，如果 <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference> 和 <reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">size</inline></reference> 均为零（等于 <reference internal="True" refuri="class_vector2#class-vector2-constant-zero"><inline classes="std std-ref">Vector2.ZERO</inline></reference>），则 <strong>Rect2</strong> 的计算结果为 <literal>false</literal>。否则，它的计算结果始终为 <literal>true</literal>。</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/index"><inline classes="doc">数学文档索引</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/vector_math"><inline classes="doc">向量数学</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/vectors_advanced"><inline classes="doc">高等向量数学</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="48"></colspec>
                    <colspec colwidth="19"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-property-end"><inline classes="std std-ref">end</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="184"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-constructor-rect2"><inline classes="std std-ref">Rect2</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-constructor-rect2"><inline classes="std std-ref">Rect2</inline></reference>(from: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-constructor-rect2"><inline classes="std std-ref">Rect2</inline></reference>(from: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-constructor-rect2"><inline classes="std std-ref">Rect2</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-constructor-rect2"><inline classes="std std-ref">Rect2</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, height: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="212"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-abs"><inline classes="std std-ref">abs</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-encloses"><inline classes="std std-ref">encloses</inline></reference>(b: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-expand"><inline classes="std std-ref">expand</inline></reference>(to: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-get-area"><inline classes="std std-ref">get_area</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-get-center"><inline classes="std std-ref">get_center</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-grow"><inline classes="std std-ref">grow</inline></reference>(amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-grow-individual"><inline classes="std std-ref">grow_individual</inline></reference>(left: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, top: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, bottom: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-grow-side"><inline classes="std std-ref">grow_side</inline></reference>(side: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-has-area"><inline classes="std std-ref">has_area</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-has-point"><inline classes="std std-ref">has_point</inline></reference>(point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-intersection"><inline classes="std std-ref">intersection</inline></reference>(b: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-intersects"><inline classes="std std-ref">intersects</inline></reference>(b: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, include_borders: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>(rect: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-is-finite"><inline classes="std std-ref">is_finite</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-method-merge"><inline classes="std std-ref">merge</inline></reference>(b: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id6" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="110"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-operator-neq-rect2"><inline classes="std std-ref">operator !=</inline></reference>(right: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-operator-mul-transform2d"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rect2-operator-eq-rect2"><inline classes="std std-ref">operator ==</inline></reference>(right: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-rect2-property-end"></target>
            <paragraph classes="classref-property" ids="class-rect2-property-end" names="class_rect2_property_end"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>end</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-rect2-property-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>终点。通常为矩形的右下角，等价于 <literal>position + size</literal>。设置该点会影响 <reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-property-position"></target>
            <paragraph classes="classref-property" ids="class-rect2-property-position" names="class_rect2_property_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>position</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>原点。通常为矩形的左上角。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-property-size"></target>
            <paragraph classes="classref-property" ids="class-rect2-property-size" names="class_rect2_property_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>size</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>矩形的宽和高，相对于 <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference>。设置该值会影响终点 <reference internal="True" refid="class-rect2-property-end"><inline classes="std std-ref">end</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>建议将宽和高设置为非负数，因为 Godot 中的大多数方法假设 <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference> 为左上角、<reference internal="True" refid="class-rect2-property-end"><inline classes="std std-ref">end</inline></reference> 为右下角。要获取等价且大小非负的矩形，请使用 <reference internal="True" refid="class-rect2-method-abs"><inline classes="std std-ref">abs</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-rect2-constructor-rect2"></target>
            <paragraph classes="classref-constructor" ids="class-rect2-constructor-rect2" names="class_rect2_constructor_rect2"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>Rect2</strong>() <reference internal="True" refid="class-rect2-constructor-rect2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>构造 <strong>Rect2</strong>，将 <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference> 和 <reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">size</inline></reference> 设置为 <reference internal="True" refuri="class_vector2#class-vector2-constant-zero"><inline classes="std std-ref">Vector2.ZERO</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>Rect2</strong>(from: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
            <paragraph>构造给定 <strong>Rect2</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>Rect2</strong>(from: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>)</paragraph>
            <paragraph>从 <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> 构造 <strong>Rect2</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>Rect2</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
            <paragraph>使用指定的 <literal>position</literal> 和 <literal>size</literal> 构造 <strong>Rect2</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>Rect2</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, height: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
            <paragraph>构造 <strong>Rect2</strong>，将 <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference> 设置为 (<literal>x</literal>, <literal>y</literal>)，将 <reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">size</inline></reference> 设置为 (<literal>width</literal>, <literal>height</literal>)。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="方法说明">
            <title>方法说明</title>
            <target refid="class-rect2-method-abs"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-abs" names="class_rect2_method_abs"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>abs</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-abs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个与该矩形等效的 <strong>Rect2</strong>，其宽度和高度被修改为非负值，其 <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference> 为矩形的左上角。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var rect = Rect2(25, 25, -100, -50)
var absolute = rect.abs() # 绝对值为 Rect2(-75, -25, 100, 50)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var rect = new Rect2(25, 25, -100, -50);
var absolute = rect.Abs(); // 绝对值为 Rect2(-75, -25, 100, 50)</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>当 <reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">size</inline></reference> 为负时，建议使用该方法，因为 Godot 中的大多数其他方法都假设 <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference> 是左上角，<reference internal="True" refid="class-rect2-property-end"><inline classes="std std-ref">end</inline></reference> 是右下角。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-encloses"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-encloses" names="class_rect2_method_encloses"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>encloses</strong>(b: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-encloses"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该矩形<emphasis>完全</emphasis>包含 <literal>b</literal> 矩形，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-expand"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-expand" names="class_rect2_method_expand"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>expand</strong>(to: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-expand"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns a copy of this rectangle expanded to align the edges with the given <literal>to</literal> point, if necessary.</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var rect = Rect2(0, 0, 5, 2)

rect = rect.expand(Vector2(10, 0)) # rect is Rect2(0, 0, 10, 2)
rect = rect.expand(Vector2(-5, 5)) # rect is Rect2(-5, 0, 15, 5)</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var rect = new Rect2(0, 0, 5, 2);

rect = rect.Expand(new Vector2(10, 0)); // rect is Rect2(0, 0, 10, 2)
rect = rect.Expand(new Vector2(-5, 5)); // rect is Rect2(-5, 0, 15, 5)</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-get-area"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-get-area" names="class_rect2_method_get_area"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_area</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-get-area"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该矩形的面积。这相当于 <literal>size.x * size.y</literal>。另请参阅 <reference internal="True" refid="class-rect2-method-has-area"><inline classes="std std-ref">has_area</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-get-center"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-get-center" names="class_rect2_method_get_center"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_center</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-get-center"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该矩形的中心点。这与 <literal>position + (size / 2.0)</literal> 相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-grow"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-grow" names="class_rect2_method_grow"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>grow</strong>(amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-grow"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该矩形的副本，该矩形在所有边上扩展给定的 <literal>amount</literal>。负的 <literal>amount</literal> 会缩小该矩形。另见 <reference internal="True" refid="class-rect2-method-grow-individual"><inline classes="std std-ref">grow_individual</inline></reference> and <reference internal="True" refid="class-rect2-method-grow-side"><inline classes="std std-ref">grow_side</inline></reference>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var a = Rect2(4, 4, 8, 8).grow(4) # a 为 Rect2(0, 0, 16, 16)
var b = Rect2(0, 0, 8, 4).grow(2) # b 为 Rect2(-2, -2, 12, 8)</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var a = new Rect2(4, 4, 8, 8).Grow(4); // a 为 Rect2(0, 0, 16, 16)
var b = new Rect2(0, 0, 8, 4).Grow(2); // b 为 Rect2(-2, -2, 12, 8)</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-grow-individual"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-grow-individual" names="class_rect2_method_grow_individual"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>grow_individual</strong>(left: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, top: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, bottom: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-grow-individual"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该矩形的副本，其 <literal>left</literal>、<literal>top</literal>、<literal>right</literal> 和 <literal>bottom</literal> 边扩展了给定的量。相反，负值会缩小边。另见 <reference internal="True" refid="class-rect2-method-grow"><inline classes="std std-ref">grow</inline></reference> and <reference internal="True" refid="class-rect2-method-grow-side"><inline classes="std std-ref">grow_side</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-grow-side"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-grow-side" names="class_rect2_method_grow_side"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>grow_side</strong>(side: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-grow-side"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该矩形的副本，其 <literal>side</literal> 按给定的 <literal>amount</literal> 扩展（请参阅 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 常量）。相反，负的 <literal>amount</literal> 会缩小该矩形。另见 <reference internal="True" refid="class-rect2-method-grow"><inline classes="std std-ref">grow</inline></reference> 和 <reference internal="True" refid="class-rect2-method-grow-individual"><inline classes="std std-ref">grow_individual</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-has-area"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-has-area" names="class_rect2_method_has_area"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_area</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-has-area"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该矩形具有正的宽度和高度，则返回 <literal>true</literal>。另见 <reference internal="True" refid="class-rect2-method-get-area"><inline classes="std std-ref">get_area</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-has-point"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-has-point" names="class_rect2_method_has_point"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_point</strong>(point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-has-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该矩形包含给定的 <literal>point</literal>，则返回 <literal>true</literal>。依照惯例，<strong>不</strong>包括右侧和底部边缘上的点。</paragraph>
            <paragraph><strong>注意：</strong>对于<emphasis>大小为负</emphasis>的 <strong>Rect2</strong>，该方法并不可靠。请首先使用 <reference internal="True" refid="class-rect2-method-abs"><inline classes="std std-ref">abs</inline></reference> 获取一个有效的矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-intersection"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-intersection" names="class_rect2_method_intersection"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>intersection</strong>(b: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-intersection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该矩形与 <literal>b</literal> 之间的交集。如果该矩形不相交，则返回空的 <strong>Rect2</strong>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var rect1 = Rect2(0, 0, 5, 10)
var rect2 = Rect2(2, 0, 8, 4)

var a = rect1.intersection(rect2) # a 为 Rect2(2, 0, 3, 4)</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var rect1 = new Rect2(0, 0, 5, 10);
var rect2 = new Rect2(2, 0, 8, 4);

var a = rect1.Intersection(rect2); // a 为 Rect2(2, 0, 3, 4)</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>如果你只需要知道两个矩形是否重叠，请改用 <reference internal="True" refid="class-rect2-method-intersects"><inline classes="std std-ref">intersects</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-intersects"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-intersects" names="class_rect2_method_intersects"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>intersects</strong>(b: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, include_borders: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-intersects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该矩形与 <literal>b</literal> 矩形重叠，则返回 <literal>true</literal>。除非 <literal>include_borders</literal> 为 <literal>true</literal>，否则两个矩形的边缘均被排除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-is-equal-approx"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-is-equal-approx" names="class_rect2_method_is_equal_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_equal_approx</strong>(rect: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-is-equal-approx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该矩形和 <literal>rect</literal> 近似相等，判断方法是通过在 <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference> 和 <reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">size</inline></reference> 上调用 <reference internal="True" refuri="class_vector2#class-vector2-method-is-equal-approx"><inline classes="std std-ref">Vector2.is_equal_approx</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-is-finite"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-is-finite" names="class_rect2_method_is_finite"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_finite</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-is-finite"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该矩形是有限的，则返回 <literal>true</literal>，判断方法是对 <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference> 和 <reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">size</inline></reference> 调用 <reference internal="True" refuri="class_vector2#class-vector2-method-is-finite"><inline classes="std std-ref">Vector2.is_finite</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-method-merge"></target>
            <paragraph classes="classref-method" ids="class-rect2-method-merge" names="class_rect2_method_merge"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>merge</strong>(b: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rect2-method-merge"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回边界包围该矩形和 <literal>b</literal> 的 <strong>Rect2</strong>。另见 <reference internal="True" refid="class-rect2-method-encloses"><inline classes="std std-ref">encloses</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id10" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-rect2-operator-neq-rect2"></target>
            <paragraph classes="classref-operator" ids="class-rect2-operator-neq-rect2" names="class_rect2_operator_neq_rect2"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong>(right: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <reference internal="True" refid="class-rect2-operator-neq-rect2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果两个矩形的 <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference> 不相等或 <reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">size</inline></reference> 不相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-rect2-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-operator-mul-transform2d"></target>
            <paragraph classes="classref-operator" ids="class-rect2-operator-mul-transform2d" names="class_rect2_operator_mul_transform2d"><reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-rect2-operator-mul-transform2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>假设该变换的基是正交的（即旋转/反射可以，缩放/倾斜则不然），将 <strong>Rect2</strong> 逆向变换（乘以）给定的 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> 变换矩阵。</paragraph>
            <paragraph><literal>rect * transform</literal> 相当于 <literal>transform.inverse() * rect</literal>。请参阅 <reference internal="True" refuri="class_transform2d#class-transform2d-method-inverse"><inline classes="std std-ref">Transform2D.inverse</inline></reference>。</paragraph>
            <paragraph>对于通过仿射变换的逆变换（例如，通过缩放）进行变换，可以使用 <literal>transform.affine_inverse() * rect</literal> 来代替。请参阅 <reference internal="True" refuri="class_transform2d#class-transform2d-method-affine-inverse"><inline classes="std std-ref">Transform2D.affine_inverse</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rect2-operator-eq-rect2"></target>
            <paragraph classes="classref-operator" ids="class-rect2-operator-eq-rect2" names="class_rect2_operator_eq_rect2"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong>(right: <reference internal="True" refid="class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <reference internal="True" refid="class-rect2-operator-eq-rect2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果两个矩形的 <reference internal="True" refid="class-rect2-property-position"><inline classes="std std-ref">position</inline></reference> 完全相等且 <reference internal="True" refid="class-rect2-property-size"><inline classes="std std-ref">size</inline></reference> 完全相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-rect2-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
