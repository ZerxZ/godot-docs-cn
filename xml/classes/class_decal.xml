<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_decal.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <meta content="stain" name="keywords">
    </meta>
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Decal.xml.</comment>
    <target refid="class-decal"></target>
    <section ids="decal class-decal" names="decal class_decal">
        <title>Decal</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>将纹理投影到 <reference internal="True" refuri="class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> 上的节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Decal</strong> 用于将纹理投射到场景中的 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 上。使用贴花可在不影响底层 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 的情况下向场景中添加细节。它们通常用于为建筑物添加风化效果，为地面添加污垢或泥土，或为道具添加多样性。贴花可以随时移动，使其适用于斑点阴影或激光瞄准点之类的东西。</paragraph>
            <paragraph>贴花由一个 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> 和一组用于指定 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>、法线、ORM（环境光遮蔽、粗糙度、金属度）和自发光的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 组成。贴花在其 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> 内投影，因此改变贴花的朝向会影响它们投影的方向。默认情况下，贴花向下投影（即从正 Y 到负 Y）。</paragraph>
            <paragraph>与贴花关联的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 会自动存储在用于绘制贴花的纹理图集中，因此可以一次绘制所有贴花。Godot 使用集群贴花，这意味着贴花是存储在集群数据中的，会在绘制网格时绘制，而不是作为后期处理效果在此之后进行绘制。</paragraph>
            <paragraph><strong>注意：</strong>贴花不会影响底层材质的透明度，无论其透明度模式如何（Alpha 混合、Alpha 剪切、Alpha 哈希、不透明预通）。这意味着材质的半透明或透明区域将保持半透明或透明，即使在其上应用不透明贴花也是如此。</paragraph>
            <paragraph><strong>注意：</strong>贴花仅在支持 Forward+ 和 Mobile 渲染方式，不支持 Compatibility。使用 Mobile 渲染方式时，每个网格资源上最多只能显示 8 个贴花。尝试在单个网格资源上显示超过 8 个贴花，将导致贴花随着相机移动而闪烁。</paragraph>
            <paragraph><strong>注意：</strong>当使用 Mobile 渲染方式时，贴花只会正确影响其可视 AABB 与该贴花的 AABB 相交的网格。如果使用着色器变形网格，使其超出网格自身的 AABB，则必须增大网格上的 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-extra-cull-margin"><inline classes="std std-ref">GeometryInstance3D.extra_cull_margin</inline></reference>。否则，贴花可能在该网格上不可见。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="74"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-albedo-mix"><inline classes="std std-ref">albedo_mix</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-cull-mask"><inline classes="std std-ref">cull_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1048575</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-distance-fade-begin"><inline classes="std std-ref">distance_fade_begin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>40.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-distance-fade-enabled"><inline classes="std std-ref">distance_fade_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-distance-fade-length"><inline classes="std std-ref">distance_fade_length</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>10.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-emission-energy"><inline classes="std std-ref">emission_energy</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-lower-fade"><inline classes="std std-ref">lower_fade</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-modulate"><inline classes="std std-ref">modulate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-normal-fade"><inline classes="std std-ref">normal_fade</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-size"><inline classes="std std-ref">size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(2, 2, 2)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-texture-albedo"><inline classes="std std-ref">texture_albedo</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-texture-emission"><inline classes="std std-ref">texture_emission</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-texture-normal"><inline classes="std std-ref">texture_normal</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-texture-orm"><inline classes="std std-ref">texture_orm</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-property-upper-fade"><inline classes="std std-ref">upper_fade</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.3</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="156"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-method-get-texture"><inline classes="std std-ref">get_texture</inline></reference>(type: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-decal-method-set-texture"><inline classes="std std-ref">set_texture</inline></reference>(type: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-decal-decaltexture"></target>
            <paragraph classes="classref-enumeration" ids="enum-decal-decaltexture" names="enum_decal_decaltexture">enum <strong>DecalTexture</strong>: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-decal-constant-texture-albedo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-decal-constant-texture-albedo" names="class_decal_constant_texture_albedo"><reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> <strong>TEXTURE_ALBEDO</strong> = <literal>0</literal></paragraph>
            <paragraph>与 <reference internal="True" refid="class-decal-property-texture-albedo"><inline classes="std std-ref">texture_albedo</inline></reference> 对应的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <target refid="class-decal-constant-texture-normal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-decal-constant-texture-normal" names="class_decal_constant_texture_normal"><reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> <strong>TEXTURE_NORMAL</strong> = <literal>1</literal></paragraph>
            <paragraph>与 <reference internal="True" refid="class-decal-property-texture-normal"><inline classes="std std-ref">texture_normal</inline></reference> 对应的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <target refid="class-decal-constant-texture-orm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-decal-constant-texture-orm" names="class_decal_constant_texture_orm"><reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> <strong>TEXTURE_ORM</strong> = <literal>2</literal></paragraph>
            <paragraph>与 <reference internal="True" refid="class-decal-property-texture-orm"><inline classes="std std-ref">texture_orm</inline></reference> 对应的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <target refid="class-decal-constant-texture-emission"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-decal-constant-texture-emission" names="class_decal_constant_texture_emission"><reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> <strong>TEXTURE_EMISSION</strong> = <literal>3</literal></paragraph>
            <paragraph>与 <reference internal="True" refid="class-decal-property-texture-emission"><inline classes="std std-ref">texture_emission</inline></reference> 对应的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <target refid="class-decal-constant-texture-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-decal-constant-texture-max" names="class_decal_constant_texture_max"><reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> <strong>TEXTURE_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph><reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> 枚举的最大大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-decal-property-albedo-mix"></target>
            <paragraph classes="classref-property" ids="class-decal-property-albedo-mix" names="class_decal_property_albedo_mix"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>albedo_mix</strong> = <literal>1.0</literal> <reference internal="True" refid="class-decal-property-albedo-mix"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_albedo_mix</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_albedo_mix</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将该贴花的反照率 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 与底层网格的反照率 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 混合。可以将其设置为 <literal>0.0</literal>，从而创建仅影响法线或 ORM 的贴花。这种情况下仍然需要反照率纹理，因为它的 Alpha 通道将决定覆盖法线和 ORM 的位置。另见 <reference internal="True" refid="class-decal-property-modulate"><inline classes="std std-ref">modulate</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-cull-mask"></target>
            <paragraph classes="classref-property" ids="class-decal-property-cull-mask" names="class_decal_property_cull_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>cull_mask</strong> = <literal>1048575</literal> <reference internal="True" refid="class-decal-property-cull-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cull_mask</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_cull_mask</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定此贴花将投射到哪些 <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d-property-layers"><inline classes="std std-ref">VisualInstance3D.layers</inline></reference> 上。默认情况下，贴花会影响所有图层。可用于指定哪些类型的对象接收该贴花、哪些不接收。这一点特别有用，你可以确保动态对象不会意外收到用于其下方地形的贴花。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-distance-fade-begin"></target>
            <paragraph classes="classref-property" ids="class-decal-property-distance-fade-begin" names="class_decal_property_distance_fade_begin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>distance_fade_begin</strong> = <literal>40.0</literal> <reference internal="True" refid="class-decal-property-distance-fade-begin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_distance_fade_begin</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_distance_fade_begin</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>与相机的距离，贴花从该处开始淡出（以 3D 单位表示）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-distance-fade-enabled"></target>
            <paragraph classes="classref-property" ids="class-decal-property-distance-fade-enabled" names="class_decal_property_distance_fade_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>distance_fade_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-decal-property-distance-fade-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_enable_distance_fade</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_distance_fade_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，贴花会在远离活动的 <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference> 时平滑地淡出，从 <reference internal="True" refid="class-decal-property-distance-fade-begin"><inline classes="std std-ref">distance_fade_begin</inline></reference> 开始。该贴花将在 <reference internal="True" refid="class-decal-property-distance-fade-begin"><inline classes="std std-ref">distance_fade_begin</inline></reference> + <reference internal="True" refid="class-decal-property-distance-fade-length"><inline classes="std std-ref">distance_fade_length</inline></reference> 处消失，之后就会被剔除，根本不会发送到着色器。请使用这个选项来减少场景中激活贴花的数量，从而提高性能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-distance-fade-length"></target>
            <paragraph classes="classref-property" ids="class-decal-property-distance-fade-length" names="class_decal_property_distance_fade_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>distance_fade_length</strong> = <literal>10.0</literal> <reference internal="True" refid="class-decal-property-distance-fade-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_distance_fade_length</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_distance_fade_length</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该贴花淡出的距离（以 3D 单位表示）。这段距离内，该贴花会慢慢变得透明，直至完全不可见。值越大，淡出过渡更平滑，更适合于相机快速移动的情况。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-emission-energy"></target>
            <paragraph classes="classref-property" ids="class-decal-property-emission-energy" names="class_decal_property_emission_energy"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>emission_energy</strong> = <literal>1.0</literal> <reference internal="True" refid="class-decal-property-emission-energy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_emission_energy</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_emission_energy</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>自发光纹理的能量倍数。会使贴花以更高或更低的强度发光，与反照率颜色无关。另见 <reference internal="True" refid="class-decal-property-modulate"><inline classes="std std-ref">modulate</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-lower-fade"></target>
            <paragraph classes="classref-property" ids="class-decal-property-lower-fade" names="class_decal_property_lower_fade"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>lower_fade</strong> = <literal>0.3</literal> <reference internal="True" refid="class-decal-property-lower-fade"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_lower_fade</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_lower_fade</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置该贴花的淡出曲线，表示随着表面远离 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> 中心而逐渐淡出。仅正值有效（负值将被限制到 <literal>0.0</literal>）。另见 <reference internal="True" refid="class-decal-property-upper-fade"><inline classes="std std-ref">upper_fade</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-modulate"></target>
            <paragraph classes="classref-property" ids="class-decal-property-modulate" names="class_decal_property_modulate"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>modulate</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-decal-property-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_modulate</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_modulate</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>更改贴花的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>，将其反照率和自发光颜色乘以这个值。仅在与反照率颜色相乘时才会考虑 Alpha 分量，与自发光颜色相乘时则不会。如果要独立更改自发光和反照率强度，请参阅 <reference internal="True" refid="class-decal-property-emission-energy"><inline classes="std std-ref">emission_energy</inline></reference> 和 <reference internal="True" refid="class-decal-property-albedo-mix"><inline classes="std std-ref">albedo_mix</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-normal-fade"></target>
            <paragraph classes="classref-property" ids="class-decal-property-normal-fade" names="class_decal_property_normal_fade"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>normal_fade</strong> = <literal>0.0</literal> <reference internal="True" refid="class-decal-property-normal-fade"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_normal_fade</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_normal_fade</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果贴花的 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> 与目标表面之间的角度变得过大，则淡出贴花。值为 <literal>0</literal> 时在投影贴花会忽略角度，值为 <literal>1</literal> 时会将贴花限制到几乎垂直的表面。</paragraph>
            <paragraph><strong>注意：</strong>将 <reference internal="True" refid="class-decal-property-normal-fade"><inline classes="std std-ref">normal_fade</inline></reference> 设置为大于 <literal>0.0</literal> 的值会有较小的性能成本，因为增加了法线角度计算。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-size"></target>
            <paragraph classes="classref-property" ids="class-decal-property-size" names="class_decal_property_size"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>size</strong> = <literal>Vector3(2, 2, 2)</literal> <reference internal="True" refid="class-decal-property-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_size</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置贴花使用的 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> 的大小。所有大小都必须设置为大于零的值（如果不是这种情况，它们将被钳制为 <literal>0.001</literal>）。该 AABB 从 <literal>-size/2</literal> 到 <literal>size/2</literal>。</paragraph>
            <paragraph><strong>注意：</strong>为了提高“硬表面”贴花的剔除效率，将它们的 <reference internal="True" refid="class-decal-property-upper-fade"><inline classes="std std-ref">upper_fade</inline></reference> 和 <reference internal="True" refid="class-decal-property-lower-fade"><inline classes="std std-ref">lower_fade</inline></reference> 设置为 <literal>0.0</literal>，并将 <reference internal="True" refid="class-decal-property-size"><inline classes="std std-ref">size</inline></reference> 的 Y 分量设置的越低越好。这将减少贴花的 AABB 大小而不影响它们的外观。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-texture-albedo"></target>
            <paragraph classes="classref-property" ids="class-decal-property-texture-albedo" names="class_decal_property_texture_albedo"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>texture_albedo</strong> <reference internal="True" refid="class-decal-property-texture-albedo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(type: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(type: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>带有贴花的基础 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。必须设置这个属性或者 <reference internal="True" refid="class-decal-property-texture-emission"><inline classes="std std-ref">texture_emission</inline></reference> 贴花才可见。要将贴花的边缘与底层对象平滑地混合，请像遮罩一样使用 Alpha 通道。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_basematerial3d#class-basematerial3d"><inline classes="std std-ref">BaseMaterial3D</inline></reference> 的过滤模式可以对每个材质进行调整，而 <strong>Decal</strong> 纹理的过滤模式是通过 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-decals-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/decals/filter</inline></reference> 全局设置的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-texture-emission"></target>
            <paragraph classes="classref-property" ids="class-decal-property-texture-emission" names="class_decal_property_texture_emission"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>texture_emission</strong> <reference internal="True" refid="class-decal-property-texture-emission"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(type: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(type: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>带有贴花的自发光 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。必须设置这个属性或者 <reference internal="True" refid="class-decal-property-texture-albedo"><inline classes="std std-ref">texture_albedo</inline></reference> 贴花才可见。要将贴花的边缘与底层对象平滑地混合，请像遮罩一样使用 Alpha 通道。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_basematerial3d#class-basematerial3d"><inline classes="std std-ref">BaseMaterial3D</inline></reference> 的过滤模式可以对每个材质进行调整，而 <strong>Decal</strong> 纹理的过滤模式是通过 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-decals-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/decals/filter</inline></reference> 全局设置的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-texture-normal"></target>
            <paragraph classes="classref-property" ids="class-decal-property-texture-normal" names="class_decal_property_texture_normal"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>texture_normal</strong> <reference internal="True" refid="class-decal-property-texture-normal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(type: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(type: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>带有贴花的逐像素法线贴图的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。可用于为贴花添加额外的细节。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_basematerial3d#class-basematerial3d"><inline classes="std std-ref">BaseMaterial3D</inline></reference> 的过滤模式可以对每个材质进行调整，而 <strong>Decal</strong> 纹理的过滤模式是通过 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-decals-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/decals/filter</inline></reference> 全局设置的。</paragraph>
            <paragraph><strong>注意：</strong>单独设置此纹理时贴花不可见，因为还必须设置 <reference internal="True" refid="class-decal-property-texture-albedo"><inline classes="std std-ref">texture_albedo</inline></reference>。要创建仅包含法线的贴花，请将反照率纹理加载到 <reference internal="True" refid="class-decal-property-texture-albedo"><inline classes="std std-ref">texture_albedo</inline></reference>，并将 <reference internal="True" refid="class-decal-property-albedo-mix"><inline classes="std std-ref">albedo_mix</inline></reference> 设置为 <literal>0.0</literal>。反照率纹理的 Alpha 通道将用于确定应在何处覆盖底层表面的法线贴图（及其强度）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-texture-orm"></target>
            <paragraph classes="classref-property" ids="class-decal-property-texture-orm" names="class_decal_property_texture_orm"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>texture_orm</strong> <reference internal="True" refid="class-decal-property-texture-orm"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(type: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(type: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>存有贴花的环境光遮蔽、粗糙度、金属性的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。可用于为贴花添加额外的细节。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_basematerial3d#class-basematerial3d"><inline classes="std std-ref">BaseMaterial3D</inline></reference> 的过滤模式可以对每个材质进行调整，而 <strong>Decal</strong> 纹理的过滤模式是通过 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-decals-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/decals/filter</inline></reference> 全局设置的。</paragraph>
            <paragraph><strong>注意：</strong>单独设置此纹理时贴花不可见，因为还必须设置 <reference internal="True" refid="class-decal-property-texture-albedo"><inline classes="std std-ref">texture_albedo</inline></reference>。要创建仅包含 ORM 的贴花，请将反照率纹理加载到 <reference internal="True" refid="class-decal-property-texture-albedo"><inline classes="std std-ref">texture_albedo</inline></reference>，并将 <reference internal="True" refid="class-decal-property-albedo-mix"><inline classes="std std-ref">albedo_mix</inline></reference> 设置为 <literal>0.0</literal>。反照率纹理的 Alpha 通道将用于确定应在何处覆盖底层表面的 ORM 贴图（及其强度）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-property-upper-fade"></target>
            <paragraph classes="classref-property" ids="class-decal-property-upper-fade" names="class_decal_property_upper_fade"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>upper_fade</strong> = <literal>0.3</literal> <reference internal="True" refid="class-decal-property-upper-fade"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_upper_fade</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_upper_fade</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置该贴花的淡出曲线，表示随着表面远离 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> 中心而逐渐淡出。仅正值有效（负值将被限制到 <literal>0.0</literal>）。另见 <reference internal="True" refid="class-decal-property-upper-fade"><inline classes="std std-ref">upper_fade</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-decal-method-get-texture"></target>
            <paragraph classes="classref-method" ids="class-decal-method-get-texture" names="class_decal_method_get_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(type: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-decal-method-get-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与指定的 <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> 关联的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。这是一个便捷方法，在大多数情况下，你应该直接访问纹理。</paragraph>
            <paragraph>例如，相比于 <literal>albedo_tex = $Decal.get_texture(Decal.TEXTURE_ALBEDO)</literal>，请使用 <literal>albedo_tex = $Decal.texture_albedo</literal>。</paragraph>
            <paragraph>有一种情况下这种写法比直接访问纹理更好，那就是当想要将贴花的纹理复制到另一个贴花是。例如：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">for i in Decal.TEXTURE_MAX:
    $NewDecal.set_texture(i, $OldDecal.get_texture(i))</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">for (int i = 0; i &lt; (int)Decal.DecalTexture.Max; i++)
{
    GetNode&lt;Decal&gt;("NewDecal").SetTexture(i, GetNode&lt;Decal&gt;("OldDecal").GetTexture(i));
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-decal-method-set-texture"></target>
            <paragraph classes="classref-method" ids="class-decal-method-set-texture" names="class_decal_method_set_texture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(type: <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-decal-method-set-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置与指定的 <reference internal="True" refid="enum-decal-decaltexture"><inline classes="std std-ref">DecalTexture</inline></reference> 关联的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。这是一个便捷方法，在大多数情况下，你应该直接访问纹理。</paragraph>
            <paragraph>例如，相比于 <literal>albedo_tex = $Decal.set_texture(Decal.TEXTURE_ALBEDO, albedo_tex)</literal>，请使用 <literal>$Decal.texture_albedo = albedo_tex</literal>。</paragraph>
            <paragraph>有一种情况下这种写法比直接访问纹理更好，那就是当想要将贴花的纹理复制到另一个贴花是。例如：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">for i in Decal.TEXTURE_MAX:
    $NewDecal.set_texture(i, $OldDecal.get_texture(i))</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">for (int i = 0; i &lt; (int)Decal.DecalTexture.Max; i++)
{
    GetNode&lt;Decal&gt;("NewDecal").SetTexture(i, GetNode&lt;Decal&gt;("OldDecal").GetTexture(i));
}</literal_block>
                </div>
            </container>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
