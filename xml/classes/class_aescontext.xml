<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_aescontext.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AESContext.xml.</comment>
    <target refid="class-aescontext"></target>
    <section ids="aescontext class-aescontext" names="aescontext class_aescontext">
        <title>AESContext</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供对原始数据的 AES 加密/解密的访问。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个类存放的是进行 AES（Advanced Encryption Standard，高级加密标准）加解密所需的上下文信息。支持 AES-ECB 和 AES-CBC 两种模式。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node

var aes = AESContext.new()

func _ready():
    var key = "My secret key!!!" # 密钥必须是 16 或 32 字节。
    var data = "My secret text!!" # 数据大小必须是 16 字节的倍数，需要时添加补白。
    # ECB 加密
    aes.start(AESContext.MODE_ECB_ENCRYPT, key.to_utf8_buffer())
    var encrypted = aes.update(data.to_utf8_buffer())
    aes.finish()
    # ECB 解密
    aes.start(AESContext.MODE_ECB_DECRYPT, key.to_utf8_buffer())
    var decrypted = aes.update(encrypted)
    aes.finish()
    # ECB 校验
    assert(decrypted == data.to_utf8_buffer())

    var iv = "My secret iv!!!!" # IV 必须是 16 字节。
    # CBC 加密
    aes.start(AESContext.MODE_CBC_ENCRYPT, key.to_utf8_buffer(), iv.to_utf8_buffer())
    encrypted = aes.update(data.to_utf8_buffer())
    aes.finish()
    # CBC 解密
    aes.start(AESContext.MODE_CBC_DECRYPT, key.to_utf8_buffer(), iv.to_utf8_buffer())
    decrypted = aes.update(encrypted)
    aes.finish()
    # CBC 校验
    assert(decrypted == data.to_utf8_buffer())</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;
using System.Diagnostics;

public partial class MyNode : Node
{
    private AesContext _aes = new AesContext();

    public override void _Ready()
    {
        string key = "My secret key!!!"; // 密钥必须是 16 或 32 字节。
        string data = "My secret text!!"; // 数据大小必须是 16 字节的倍数，需要时添加补白。
        // ECB 加密
        _aes.Start(AesContext.Mode.EcbEncrypt, key.ToUtf8Buffer());
        byte[] encrypted = _aes.Update(data.ToUtf8Buffer());
        _aes.Finish();
        // ECB 解密
        _aes.Start(AesContext.Mode.EcbDecrypt, key.ToUtf8Buffer());
        byte[] decrypted = _aes.Update(encrypted);
        _aes.Finish();
        // ECB 校验
        Debug.Assert(decrypted == data.ToUtf8Buffer());

        string iv = "My secret iv!!!!"; // IV 必须是 16 字节。
        // CBC 加密
        _aes.Start(AesContext.Mode.EcbEncrypt, key.ToUtf8Buffer(), iv.ToUtf8Buffer());
        encrypted = _aes.Update(data.ToUtf8Buffer());
        _aes.Finish();
        // CBC 解密
        _aes.Start(AesContext.Mode.EcbDecrypt, key.ToUtf8Buffer(), iv.ToUtf8Buffer());
        decrypted = _aes.Update(encrypted);
        _aes.Finish();
        // CBC 校验
        Debug.Assert(decrypted == data.ToUtf8Buffer());
    }
}</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="218"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aescontext-method-finish"><inline classes="std std-ref">finish</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aescontext-method-get-iv-state"><inline classes="std std-ref">get_iv_state</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aescontext-method-start"><inline classes="std std-ref">start</inline></reference>(mode: <reference internal="True" refid="enum-aescontext-mode"><inline classes="std std-ref">Mode</inline></reference>, key: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, iv: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> = PackedByteArray())</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aescontext-method-update"><inline classes="std std-ref">update</inline></reference>(src: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-aescontext-mode"></target>
            <paragraph classes="classref-enumeration" ids="enum-aescontext-mode" names="enum_aescontext_mode">enum <strong>Mode</strong>: <reference internal="True" refid="enum-aescontext-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-aescontext-constant-mode-ecb-encrypt"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-aescontext-constant-mode-ecb-encrypt" names="class_aescontext_constant_mode_ecb_encrypt"><reference internal="True" refid="enum-aescontext-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_ECB_ENCRYPT</strong> = <literal>0</literal></paragraph>
            <paragraph>AES 电子密码簿加密模式。</paragraph>
            <target refid="class-aescontext-constant-mode-ecb-decrypt"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-aescontext-constant-mode-ecb-decrypt" names="class_aescontext_constant_mode_ecb_decrypt"><reference internal="True" refid="enum-aescontext-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_ECB_DECRYPT</strong> = <literal>1</literal></paragraph>
            <paragraph>AES 电子密码簿解密模式。</paragraph>
            <target refid="class-aescontext-constant-mode-cbc-encrypt"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-aescontext-constant-mode-cbc-encrypt" names="class_aescontext_constant_mode_cbc_encrypt"><reference internal="True" refid="enum-aescontext-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_CBC_ENCRYPT</strong> = <literal>2</literal></paragraph>
            <paragraph>AES 密码封锁器链式加密模式。</paragraph>
            <target refid="class-aescontext-constant-mode-cbc-decrypt"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-aescontext-constant-mode-cbc-decrypt" names="class_aescontext_constant_mode_cbc_decrypt"><reference internal="True" refid="enum-aescontext-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_CBC_DECRYPT</strong> = <literal>3</literal></paragraph>
            <paragraph>AES 密码封锁器链式解密模式。</paragraph>
            <target refid="class-aescontext-constant-mode-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-aescontext-constant-mode-max" names="class_aescontext_constant_mode_max"><reference internal="True" refid="enum-aescontext-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>模式列举的最大值。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-aescontext-method-finish"></target>
            <paragraph classes="classref-method" ids="class-aescontext-method-finish" names="class_aescontext_method_finish"><abbreviation explanation="无返回值。">void</abbreviation> <strong>finish</strong>() <reference internal="True" refid="class-aescontext-method-finish"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>关闭此 AES 上下文，以便可以再次启动它。见 <reference internal="True" refid="class-aescontext-method-start"><inline classes="std std-ref">start</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aescontext-method-get-iv-state"></target>
            <paragraph classes="classref-method" ids="class-aescontext-method-get-iv-state" names="class_aescontext_method_get_iv_state"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_iv_state</strong>() <reference internal="True" refid="class-aescontext-method-get-iv-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取此上下文的当前 IV 状态（调用 <reference internal="True" refid="class-aescontext-method-update"><inline classes="std std-ref">update</inline></reference> 时会更新 IV）。通常不需要此函数。</paragraph>
            <paragraph><strong>注意：</strong>仅当上下文以 <reference internal="True" refid="class-aescontext-constant-mode-cbc-encrypt"><inline classes="std std-ref">MODE_CBC_ENCRYPT</inline></reference> 或 <reference internal="True" refid="class-aescontext-constant-mode-cbc-decrypt"><inline classes="std std-ref">MODE_CBC_DECRYPT</inline></reference> 开头时，此函数才有意义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aescontext-method-start"></target>
            <paragraph classes="classref-method" ids="class-aescontext-method-start" names="class_aescontext_method_start"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>start</strong>(mode: <reference internal="True" refid="enum-aescontext-mode"><inline classes="std std-ref">Mode</inline></reference>, key: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, iv: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> = PackedByteArray()) <reference internal="True" refid="class-aescontext-method-start"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的 <literal>mode</literal> 中启动 AES 上下文。必须始终提供 16 或 32 字节的 <literal>key</literal>，而仅当 <literal>mode</literal> 为 <reference internal="True" refid="class-aescontext-constant-mode-cbc-encrypt"><inline classes="std std-ref">MODE_CBC_ENCRYPT</inline></reference> 或 <reference internal="True" refid="class-aescontext-constant-mode-cbc-decrypt"><inline classes="std std-ref">MODE_CBC_DECRYPT</inline></reference> 时，才需要正好为 16 字节的 <literal>iv</literal>（初始化向量）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aescontext-method-update"></target>
            <paragraph classes="classref-method" ids="class-aescontext-method-update" names="class_aescontext_method_update"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>update</strong>(src: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-aescontext-method-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>运行此 AES 上下文所需的操作。将返回包含加密（或解密）给定 <literal>src</literal> 结果的 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> 。有关操作模式，请参阅 <reference internal="True" refid="class-aescontext-method-start"><inline classes="std std-ref">start</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><literal>src</literal> 的大小必须是 16 倍的倍数。如果需要，应用一些填充。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
