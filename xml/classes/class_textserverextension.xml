<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_textserverextension.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TextServerExtension.xml.</comment>
    <target refid="class-textserverextension"></target>
    <section ids="textserverextension class-textserverextension" names="textserverextension class_textserverextension">
        <title>TextServerExtension</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_textserveradvanced#class-textserveradvanced"><inline classes="std std-ref">TextServerAdvanced</inline></reference>, <reference internal="True" refuri="class_textserverdummy#class-textserverdummy"><inline classes="std std-ref">TextServerDummy</inline></reference>, <reference internal="True" refuri="class_textserverfallback#class-textserverfallback"><inline classes="std std-ref">TextServerFallback</inline></reference></paragraph>
        <paragraph>自定义 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 实现（插件）的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>外部的 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 实现应该继承这个类。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="65"></colspec>
                    <colspec colwidth="407"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-cleanup"><inline classes="std std-ref">_cleanup</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-create-font"><inline classes="std std-ref">_create_font</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-create-font-linked-variation"><inline classes="std std-ref">_create_font_linked_variation</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-create-shaped-text"><inline classes="std std-ref">_create_shaped_text</inline></reference>(direction: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference>, orientation: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-draw-hex-code-box"><inline classes="std std-ref">_draw_hex_code_box</inline></reference>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-clear-glyphs"><inline classes="std std-ref">_font_clear_glyphs</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-clear-kerning-map"><inline classes="std std-ref">_font_clear_kerning_map</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-clear-size-cache"><inline classes="std std-ref">_font_clear_size_cache</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-clear-textures"><inline classes="std std-ref">_font_clear_textures</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-draw-glyph"><inline classes="std std-ref">_font_draw_glyph</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-draw-glyph-outline"><inline classes="std std-ref">_font_draw_glyph_outline</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-antialiasing"><inline classes="std std-ref">_font_get_antialiasing</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-ascent"><inline classes="std std-ref">_font_get_ascent</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-baseline-offset"><inline classes="std std-ref">_font_get_baseline_offset</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-char-from-glyph-index"><inline classes="std std-ref">_font_get_char_from_glyph_index</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-descent"><inline classes="std std-ref">_font_get_descent</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-disable-embedded-bitmaps"><inline classes="std std-ref">_font_get_disable_embedded_bitmaps</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-embolden"><inline classes="std std-ref">_font_get_embolden</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-face-count"><inline classes="std std-ref">_font_get_face_count</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-face-index"><inline classes="std std-ref">_font_get_face_index</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-fixed-size"><inline classes="std std-ref">_font_get_fixed_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-fixed-size-scale-mode"><inline classes="std std-ref">_font_get_fixed_size_scale_mode</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-generate-mipmaps"><inline classes="std std-ref">_font_get_generate_mipmaps</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-global-oversampling"><inline classes="std std-ref">_font_get_global_oversampling</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-advance"><inline classes="std std-ref">_font_get_glyph_advance</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-contours"><inline classes="std std-ref">_font_get_glyph_contours</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-index"><inline classes="std std-ref">_font_get_glyph_index</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, variation_selector: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-list"><inline classes="std std-ref">_font_get_glyph_list</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-offset"><inline classes="std std-ref">_font_get_glyph_offset</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-size"><inline classes="std std-ref">_font_get_glyph_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-texture-idx"><inline classes="std std-ref">_font_get_glyph_texture_idx</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-texture-rid"><inline classes="std std-ref">_font_get_glyph_texture_rid</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-texture-size"><inline classes="std std-ref">_font_get_glyph_texture_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-uv-rect"><inline classes="std std-ref">_font_get_glyph_uv_rect</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-hinting"><inline classes="std std-ref">_font_get_hinting</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-kerning"><inline classes="std std-ref">_font_get_kerning</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-kerning-list"><inline classes="std std-ref">_font_get_kerning_list</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-language-support-override"><inline classes="std std-ref">_font_get_language_support_override</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-language-support-overrides"><inline classes="std std-ref">_font_get_language_support_overrides</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-msdf-pixel-range"><inline classes="std std-ref">_font_get_msdf_pixel_range</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-msdf-size"><inline classes="std std-ref">_font_get_msdf_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-name"><inline classes="std std-ref">_font_get_name</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-opentype-feature-overrides"><inline classes="std std-ref">_font_get_opentype_feature_overrides</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-ot-name-strings"><inline classes="std std-ref">_font_get_ot_name_strings</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-oversampling"><inline classes="std std-ref">_font_get_oversampling</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-scale"><inline classes="std std-ref">_font_get_scale</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-script-support-override"><inline classes="std std-ref">_font_get_script_support_override</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-script-support-overrides"><inline classes="std std-ref">_font_get_script_support_overrides</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-size-cache-list"><inline classes="std std-ref">_font_get_size_cache_list</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-spacing"><inline classes="std std-ref">_font_get_spacing</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-stretch"><inline classes="std std-ref">_font_get_stretch</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-style"><inline classes="std std-ref">_font_get_style</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-style-name"><inline classes="std std-ref">_font_get_style_name</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-subpixel-positioning"><inline classes="std std-ref">_font_get_subpixel_positioning</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-supported-chars"><inline classes="std std-ref">_font_get_supported_chars</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-texture-count"><inline classes="std std-ref">_font_get_texture_count</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-texture-image"><inline classes="std std-ref">_font_get_texture_image</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-texture-offsets"><inline classes="std std-ref">_font_get_texture_offsets</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-transform"><inline classes="std std-ref">_font_get_transform</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-underline-position"><inline classes="std std-ref">_font_get_underline_position</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-underline-thickness"><inline classes="std std-ref">_font_get_underline_thickness</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-variation-coordinates"><inline classes="std std-ref">_font_get_variation_coordinates</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-weight"><inline classes="std std-ref">_font_get_weight</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-has-char"><inline classes="std std-ref">_font_has_char</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-is-allow-system-fallback"><inline classes="std std-ref">_font_is_allow_system_fallback</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-is-force-autohinter"><inline classes="std std-ref">_font_is_force_autohinter</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-is-language-supported"><inline classes="std std-ref">_font_is_language_supported</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-is-multichannel-signed-distance-field"><inline classes="std std-ref">_font_is_multichannel_signed_distance_field</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-is-script-supported"><inline classes="std std-ref">_font_is_script_supported</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-remove-glyph"><inline classes="std std-ref">_font_remove_glyph</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-remove-kerning"><inline classes="std std-ref">_font_remove_kerning</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-remove-language-support-override"><inline classes="std std-ref">_font_remove_language_support_override</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-remove-script-support-override"><inline classes="std std-ref">_font_remove_script_support_override</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-remove-size-cache"><inline classes="std std-ref">_font_remove_size_cache</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-remove-texture"><inline classes="std std-ref">_font_remove_texture</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-render-glyph"><inline classes="std std-ref">_font_render_glyph</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-render-range"><inline classes="std std-ref">_font_render_range</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-allow-system-fallback"><inline classes="std std-ref">_font_set_allow_system_fallback</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, allow_system_fallback: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-antialiasing"><inline classes="std std-ref">_font_set_antialiasing</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, antialiasing: <reference internal="True" refuri="class_textserver#enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-ascent"><inline classes="std std-ref">_font_set_ascent</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, ascent: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-baseline-offset"><inline classes="std std-ref">_font_set_baseline_offset</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, baseline_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-data"><inline classes="std std-ref">_font_set_data</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-data-ptr"><inline classes="std std-ref">_font_set_data_ptr</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, data_ptr: <literal>const uint8_t*</literal>, data_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-descent"><inline classes="std std-ref">_font_set_descent</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, descent: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-disable-embedded-bitmaps"><inline classes="std std-ref">_font_set_disable_embedded_bitmaps</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, disable_embedded_bitmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-embolden"><inline classes="std std-ref">_font_set_embolden</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-face-index"><inline classes="std std-ref">_font_set_face_index</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, face_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-fixed-size"><inline classes="std std-ref">_font_set_fixed_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fixed_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-fixed-size-scale-mode"><inline classes="std std-ref">_font_set_fixed_size_scale_mode</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fixed_size_scale_mode: <reference internal="True" refuri="class_textserver#enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-force-autohinter"><inline classes="std std-ref">_font_set_force_autohinter</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, force_autohinter: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-generate-mipmaps"><inline classes="std std-ref">_font_set_generate_mipmaps</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, generate_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-global-oversampling"><inline classes="std std-ref">_font_set_global_oversampling</inline></reference>(oversampling: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-advance"><inline classes="std std-ref">_font_set_glyph_advance</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, advance: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-offset"><inline classes="std std-ref">_font_set_glyph_offset</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-size"><inline classes="std std-ref">_font_set_glyph_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gl_size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-texture-idx"><inline classes="std std-ref">_font_set_glyph_texture_idx</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, texture_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-uv-rect"><inline classes="std std-ref">_font_set_glyph_uv_rect</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, uv_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-hinting"><inline classes="std std-ref">_font_set_hinting</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, hinting: <reference internal="True" refuri="class_textserver#enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-kerning"><inline classes="std std-ref">_font_set_kerning</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, kerning: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-language-support-override"><inline classes="std std-ref">_font_set_language_support_override</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-msdf-pixel-range"><inline classes="std std-ref">_font_set_msdf_pixel_range</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msdf_pixel_range: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-msdf-size"><inline classes="std std-ref">_font_set_msdf_size</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msdf_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-multichannel-signed-distance-field"><inline classes="std std-ref">_font_set_multichannel_signed_distance_field</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msdf: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-name"><inline classes="std std-ref">_font_set_name</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-opentype-feature-overrides"><inline classes="std std-ref">_font_set_opentype_feature_overrides</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, overrides: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-oversampling"><inline classes="std std-ref">_font_set_oversampling</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, oversampling: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-scale"><inline classes="std std-ref">_font_set_scale</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-script-support-override"><inline classes="std std-ref">_font_set_script_support_override</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-spacing"><inline classes="std std-ref">_font_set_spacing</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-stretch"><inline classes="std std-ref">_font_set_stretch</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, stretch: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-style"><inline classes="std std-ref">_font_set_style</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, style: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-style-name"><inline classes="std std-ref">_font_set_style_name</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name_style: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-subpixel-positioning"><inline classes="std std-ref">_font_set_subpixel_positioning</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, subpixel_positioning: <reference internal="True" refuri="class_textserver#enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-texture-image"><inline classes="std std-ref">_font_set_texture_image</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-texture-offsets"><inline classes="std std-ref">_font_set_texture_offsets</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-transform"><inline classes="std std-ref">_font_set_transform</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-underline-position"><inline classes="std std-ref">_font_set_underline_position</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, underline_position: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-underline-thickness"><inline classes="std std-ref">_font_set_underline_thickness</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, underline_thickness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-variation-coordinates"><inline classes="std std-ref">_font_set_variation_coordinates</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, variation_coordinates: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-weight"><inline classes="std std-ref">_font_set_weight</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, weight: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-supported-feature-list"><inline classes="std std-ref">_font_supported_feature_list</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-supported-variation-list"><inline classes="std std-ref">_font_supported_variation_list</inline></reference>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-format-number"><inline classes="std std-ref">_format_number</inline></reference>(number: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-free-rid"><inline classes="std std-ref">_free_rid</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-get-features"><inline classes="std std-ref">_get_features</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-get-hex-code-box-size"><inline classes="std std-ref">_get_hex_code_box_size</inline></reference>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-get-name"><inline classes="std std-ref">_get_name</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-get-support-data-filename"><inline classes="std std-ref">_get_support_data_filename</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-get-support-data-info"><inline classes="std std-ref">_get_support_data_info</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-has"><inline classes="std std-ref">_has</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-has-feature"><inline classes="std std-ref">_has_feature</inline></reference>(feature: <reference internal="True" refuri="class_textserver#enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-is-confusable"><inline classes="std std-ref">_is_confusable</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, dict: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-is-locale-right-to-left"><inline classes="std std-ref">_is_locale_right_to_left</inline></reference>(locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-is-valid-identifier"><inline classes="std std-ref">_is_valid_identifier</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-is-valid-letter"><inline classes="std std-ref">_is_valid_letter</inline></reference>(unicode: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-load-support-data"><inline classes="std std-ref">_load_support_data</inline></reference>(filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-name-to-tag"><inline classes="std std-ref">_name_to_tag</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-parse-number"><inline classes="std std-ref">_parse_number</inline></reference>(number: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-parse-structured-text"><inline classes="std std-ref">_parse_structured_text</inline></reference>(parser_type: <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference>, args: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-percent-sign"><inline classes="std std-ref">_percent_sign</inline></reference>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-save-support-data"><inline classes="std std-ref">_save_support_data</inline></reference>(filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-get-span-count"><inline classes="std std-ref">_shaped_get_span_count</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-get-span-meta"><inline classes="std std-ref">_shaped_get_span_meta</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-set-span-update-font"><inline classes="std std-ref">_shaped_set_span_update_font</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, fonts: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>], size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, opentype_features: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-add-object"><inline classes="std std-ref">_shaped_text_add_object</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference>, length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-add-string"><inline classes="std std-ref">_shaped_text_add_string</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, fonts: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>], size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, opentype_features: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, meta: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-clear"><inline classes="std std-ref">_shaped_text_clear</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-closest-character-pos"><inline classes="std std-ref">_shaped_text_closest_character_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-draw"><inline classes="std std-ref">_shaped_text_draw</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, clip_l: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, clip_r: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-draw-outline"><inline classes="std std-ref">_shaped_text_draw_outline</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, clip_l: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, clip_r: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-fit-to-width"><inline classes="std std-ref">_shaped_text_fit_to_width</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, justification_flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-ascent"><inline classes="std std-ref">_shaped_text_get_ascent</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-carets"><inline classes="std std-ref">_shaped_text_get_carets</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, caret: <literal>CaretInfo*</literal>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-character-breaks"><inline classes="std std-ref">_shaped_text_get_character_breaks</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-custom-ellipsis"><inline classes="std std-ref">_shaped_text_get_custom_ellipsis</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-custom-punctuation"><inline classes="std std-ref">_shaped_text_get_custom_punctuation</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-descent"><inline classes="std std-ref">_shaped_text_get_descent</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-direction"><inline classes="std std-ref">_shaped_text_get_direction</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-dominant-direction-in-range"><inline classes="std std-ref">_shaped_text_get_dominant_direction_in_range</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-ellipsis-glyph-count"><inline classes="std std-ref">_shaped_text_get_ellipsis_glyph_count</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>const Glyph*</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-ellipsis-glyphs"><inline classes="std std-ref">_shaped_text_get_ellipsis_glyphs</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-ellipsis-pos"><inline classes="std std-ref">_shaped_text_get_ellipsis_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-glyph-count"><inline classes="std std-ref">_shaped_text_get_glyph_count</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>const Glyph*</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-glyphs"><inline classes="std std-ref">_shaped_text_get_glyphs</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-grapheme-bounds"><inline classes="std std-ref">_shaped_text_get_grapheme_bounds</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-inferred-direction"><inline classes="std std-ref">_shaped_text_get_inferred_direction</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-line-breaks"><inline classes="std std-ref">_shaped_text_get_line_breaks</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, break_flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-line-breaks-adv"><inline classes="std std-ref">_shaped_text_get_line_breaks_adv</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, once: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, break_flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-object-glyph"><inline classes="std std-ref">_shaped_text_get_object_glyph</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-object-range"><inline classes="std std-ref">_shaped_text_get_object_range</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-object-rect"><inline classes="std std-ref">_shaped_text_get_object_rect</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-objects"><inline classes="std std-ref">_shaped_text_get_objects</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-orientation"><inline classes="std std-ref">_shaped_text_get_orientation</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-parent"><inline classes="std std-ref">_shaped_text_get_parent</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-preserve-control"><inline classes="std std-ref">_shaped_text_get_preserve_control</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-preserve-invalid"><inline classes="std std-ref">_shaped_text_get_preserve_invalid</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-range"><inline classes="std std-ref">_shaped_text_get_range</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-selection"><inline classes="std std-ref">_shaped_text_get_selection</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-size"><inline classes="std std-ref">_shaped_text_get_size</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-spacing"><inline classes="std std-ref">_shaped_text_get_spacing</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-trim-pos"><inline classes="std std-ref">_shaped_text_get_trim_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-underline-position"><inline classes="std std-ref">_shaped_text_get_underline_position</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-underline-thickness"><inline classes="std std-ref">_shaped_text_get_underline_thickness</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-width"><inline classes="std std-ref">_shaped_text_get_width</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-word-breaks"><inline classes="std std-ref">_shaped_text_get_word_breaks</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, grapheme_flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>], skip_grapheme_flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-hit-test-grapheme"><inline classes="std std-ref">_shaped_text_hit_test_grapheme</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, coord: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-hit-test-position"><inline classes="std std-ref">_shaped_text_hit_test_position</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, coord: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-is-ready"><inline classes="std std-ref">_shaped_text_is_ready</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-next-character-pos"><inline classes="std std-ref">_shaped_text_next_character_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-next-grapheme-pos"><inline classes="std std-ref">_shaped_text_next_grapheme_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-overrun-trim-to-width"><inline classes="std std-ref">_shaped_text_overrun_trim_to_width</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, trim_flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-textoverrunflag"><inline classes="std std-ref">TextOverrunFlag</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-prev-character-pos"><inline classes="std std-ref">_shaped_text_prev_character_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-prev-grapheme-pos"><inline classes="std std-ref">_shaped_text_prev_grapheme_pos</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-resize-object"><inline classes="std std-ref">_shaped_text_resize_object</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference>, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-bidi-override"><inline classes="std std-ref">_shaped_text_set_bidi_override</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, override: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-custom-ellipsis"><inline classes="std std-ref">_shaped_text_set_custom_ellipsis</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-custom-punctuation"><inline classes="std std-ref">_shaped_text_set_custom_punctuation</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, punct: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-direction"><inline classes="std std-ref">_shaped_text_set_direction</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, direction: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-orientation"><inline classes="std std-ref">_shaped_text_set_orientation</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, orientation: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-preserve-control"><inline classes="std std-ref">_shaped_text_set_preserve_control</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-preserve-invalid"><inline classes="std std-ref">_shaped_text_set_preserve_invalid</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-spacing"><inline classes="std std-ref">_shaped_text_set_spacing</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-shape"><inline classes="std std-ref">_shaped_text_shape</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>const Glyph*</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-sort-logical"><inline classes="std std-ref">_shaped_text_sort_logical</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-substr"><inline classes="std std-ref">_shaped_text_substr</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-tab-align"><inline classes="std std-ref">_shaped_text_tab_align</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, tab_stops: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-update-breaks"><inline classes="std std-ref">_shaped_text_update_breaks</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-update-justification-ops"><inline classes="std std-ref">_shaped_text_update_justification_ops</inline></reference>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-spoof-check"><inline classes="std std-ref">_spoof_check</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-string-get-character-breaks"><inline classes="std std-ref">_string_get_character_breaks</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-string-get-word-breaks"><inline classes="std std-ref">_string_get_word_breaks</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, chars_per_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-string-to-lower"><inline classes="std std-ref">_string_to_lower</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-string-to-title"><inline classes="std std-ref">_string_to_title</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-string-to-upper"><inline classes="std std-ref">_string_to_upper</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-strip-diacritics"><inline classes="std std-ref">_strip_diacritics</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-tag-to-name"><inline classes="std std-ref">_tag_to_name</inline></reference>(tag: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-textserverextension-private-method-cleanup"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-cleanup" names="class_textserverextension_private_method__cleanup"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_cleanup</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-cleanup"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>注销文本服务器前会调用该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-create-font"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-create-font" names="class_textserverextension_private_method__create_font"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_create_font</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-create-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>新建空的字体缓存条目资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-create-font-linked-variation"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-create-font-linked-variation" names="class_textserverextension_private_method__create_font_linked_variation"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_create_font_linked_variation</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-create-font-linked-variation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Optional, implement if font supports extra spacing or baseline offset.</paragraph>
            <paragraph>Creates a new variation existing font which is reusing the same glyph cache and font data.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-create-shaped-text"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-create-shaped-text" names="class_textserverextension_private_method__create_shaped_text"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_create_shaped_text</strong>(direction: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference>, orientation: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-create-shaped-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>使用给定的方向 <literal>direction</literal> 和朝向 <literal>orientation</literal> 新建用于复杂排版的缓冲。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-draw-hex-code-box"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-draw-hex-code-box" names="class_textserverextension_private_method__draw_hex_code_box"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_draw_hex_code_box</strong>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-draw-hex-code-box"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>绘制显示字符十六进制代码的方框。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-clear-glyphs"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-clear-glyphs" names="class_textserverextension_private_method__font_clear_glyphs"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_clear_glyphs</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-clear-glyphs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>从缓存条目中移除所有渲染字形信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-clear-kerning-map"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-clear-kerning-map" names="class_textserverextension_private_method__font_clear_kerning_map"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_clear_kerning_map</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-clear-kerning-map"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>移除所有字偶距覆盖项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-clear-size-cache"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-clear-size-cache" names="class_textserverextension_private_method__font_clear_size_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_clear_size_cache</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-clear-size-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>从缓存条目中移除所有字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-clear-textures"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-clear-textures" names="class_textserverextension_private_method__font_clear_textures"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_clear_textures</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-clear-textures"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>从缓存条目中移除所有纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-draw-glyph"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-draw-glyph" names="class_textserverextension_private_method__font_draw_glyph"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_draw_glyph</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-draw-glyph"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>使用大小为 <literal>size</literal> 的字体 <literal>font_rid</literal> 在画布项中的指定位置绘制单个字形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-draw-glyph-outline"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-draw-glyph-outline" names="class_textserverextension_private_method__font_draw_glyph_outline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_draw_glyph_outline</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-draw-glyph-outline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>使用大小为 <literal>size</literal> 的字体 <literal>font_rid</literal> 在画布项中的指定位置绘制单个字形轮廓，轮廓大小为 <literal>outline_size</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-antialiasing"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-antialiasing" names="class_textserverextension_private_method__font_get_antialiasing"><reference internal="True" refuri="class_textserver#enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference> <strong>_font_get_antialiasing</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-antialiasing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字体抗锯齿模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-ascent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-ascent" names="class_textserverextension_private_method__font_get_ascent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_ascent</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-ascent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回字体的升部（基线上方的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-baseline-offset"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-baseline-offset" names="class_textserverextension_private_method__font_get_baseline_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_baseline_offset</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-baseline-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回额外的基线偏移（作为字体高度的一部分）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-char-from-glyph-index"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-char-from-glyph-index" names="class_textserverextension_private_method__font_get_char_from_glyph_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_char_from_glyph_index</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-char-from-glyph-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回与 <literal>glyph_index</literal> 关联的字符代码，如果 <literal>glyph_index</literal> 无效则返回 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-descent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-descent" names="class_textserverextension_private_method__font_get_descent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_descent</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-descent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回字体的降部（基线下方的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-disable-embedded-bitmaps"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-disable-embedded-bitmaps" names="class_textserverextension_private_method__font_get_disable_embedded_bitmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_get_disable_embedded_bitmaps</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-disable-embedded-bitmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回是否禁用了字体内嵌位图的加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-embolden"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-embolden" names="class_textserverextension_private_method__font_get_embolden"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_embolden</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-embolden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字体的加粗力度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-face-count"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-face-count" names="class_textserverextension_private_method__font_get_face_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_face_count</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-face-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回 TrueType / OpenType 集合中的字体数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-face-index"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-face-index" names="class_textserverextension_private_method__font_get_face_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_face_index</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-face-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回 TrueType / OpenType 集合中的活动字体索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-fixed-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-fixed-size" names="class_textserverextension_private_method__font_get_fixed_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_fixed_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-fixed-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回位图字体的固定大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-fixed-size-scale-mode"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-fixed-size-scale-mode" names="class_textserverextension_private_method__font_get_fixed_size_scale_mode"><reference internal="True" refuri="class_textserver#enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference> <strong>_font_get_fixed_size_scale_mode</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-fixed-size-scale-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回位图字体的缩放模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-generate-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-generate-mipmaps" names="class_textserverextension_private_method__font_get_generate_mipmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_get_generate_mipmaps</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-generate-mipmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果启用了字体纹理 mipmap 生成，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-global-oversampling"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-global-oversampling" names="class_textserverextension_private_method__font_get_global_oversampling"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_global_oversampling</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-global-oversampling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字体过采样系数，由 TextServer 中的所有字体共享。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-advance"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-advance" names="class_textserverextension_private_method__font_get_glyph_advance"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_font_get_glyph_advance</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-advance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回字形的推进量（下一个字形的偏移量）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-contours"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-contours" names="class_textserverextension_private_method__font_get_glyph_contours"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_font_get_glyph_contours</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-contours"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字形的轮廓。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-index"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-index" names="class_textserverextension_private_method__font_get_glyph_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_glyph_index</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, variation_selector: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回 <literal>char</literal> 的字形索引，可以用 <literal>variation_selector</literal> 修改。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-list"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-list" names="class_textserverextension_private_method__font_get_glyph_list"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_font_get_glyph_list</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回缓存条目中的已渲染字形列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-offset"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-offset" names="class_textserverextension_private_method__font_get_glyph_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_font_get_glyph_offset</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回字形的基线偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-size" names="class_textserverextension_private_method__font_get_glyph_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_font_get_glyph_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回该字形的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-texture-idx"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-texture-idx" names="class_textserverextension_private_method__font_get_glyph_texture_idx"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_glyph_texture_idx</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-texture-idx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回包含该字形的缓存纹理的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-texture-rid"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-texture-rid" names="class_textserverextension_private_method__font_get_glyph_texture_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_font_get_glyph_texture_rid</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-texture-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回包含该字形的缓冲纹理的资源 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-texture-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-texture-size" names="class_textserverextension_private_method__font_get_glyph_texture_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_font_get_glyph_texture_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-texture-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回包含该字形的缓冲纹理的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-uv-rect"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-uv-rect" names="class_textserverextension_private_method__font_get_glyph_uv_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>_font_get_glyph_uv_rect</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-uv-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回包含该字形的缓冲纹理的矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-hinting"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-hinting" names="class_textserverextension_private_method__font_get_hinting"><reference internal="True" refuri="class_textserver#enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference> <strong>_font_get_hinting</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-hinting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字体微调模式。仅用于动态字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-kerning"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-kerning" names="class_textserverextension_private_method__font_get_kerning"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_font_get_kerning</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-kerning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字形对的字偶距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-kerning-list"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-kerning-list" names="class_textserverextension_private_method__font_get_kerning_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>] <strong>_font_get_kerning_list</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-kerning-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字偶距覆盖的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-language-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-language-support-override" names="class_textserverextension_private_method__font_get_language_support_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_get_language_support_override</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-language-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果为 <literal>language</literal> 启用了支持覆盖，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-language-support-overrides"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-language-support-overrides" names="class_textserverextension_private_method__font_get_language_support_overrides"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_font_get_language_support_overrides</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-language-support-overrides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回语言支持覆盖的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-msdf-pixel-range"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-msdf-pixel-range" names="class_textserverextension_private_method__font_get_msdf_pixel_range"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_msdf_pixel_range</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-msdf-pixel-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回最小和最大可表示有符号距离之间形状周围范围的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-msdf-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-msdf-size" names="class_textserverextension_private_method__font_get_msdf_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_msdf_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-msdf-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回用于生成 MSDF 纹理的源字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-name"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-name" names="class_textserverextension_private_method__font_get_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_font_get_name</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字体家族名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-opentype-feature-overrides"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-opentype-feature-overrides" names="class_textserverextension_private_method__font_get_opentype_feature_overrides"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_font_get_opentype_feature_overrides</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-opentype-feature-overrides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字体 OpenType 特性集覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-ot-name-strings"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-ot-name-strings" names="class_textserverextension_private_method__font_get_ot_name_strings"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_font_get_ot_name_strings</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-ot-name-strings"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回 OpenType 字体名称字符串的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>（本地化的字体名称、版本、描述、许可信息、示例文本等）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-oversampling"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-oversampling" names="class_textserverextension_private_method__font_get_oversampling"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_oversampling</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-oversampling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字体过采样系数，如果设置为 <literal>0.0</literal>，则使用全局过采样系数。仅由动态字体使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-scale"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-scale" names="class_textserverextension_private_method__font_get_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_scale</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回颜色位图字体的缩放系数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-script-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-script-support-override" names="class_textserverextension_private_method__font_get_script_support_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_get_script_support_override</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-script-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果为 <literal>script</literal> 启用了支持覆盖，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-script-support-overrides"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-script-support-overrides" names="class_textserverextension_private_method__font_get_script_support_overrides"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_font_get_script_support_overrides</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-script-support-overrides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回文字支持覆盖的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-size-cache-list"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-size-cache-list" names="class_textserverextension_private_method__font_get_size_cache_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>] <strong>_font_get_size_cache_list</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-size-cache-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回缓存中字体大小的列表。每个大小都是由字体大小和轮廓大小组成的 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-spacing"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-spacing" names="class_textserverextension_private_method__font_get_spacing"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_spacing</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回 <literal>spacing</literal>（见 <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>）的间距，单位为像素（与字体大小无关）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-stretch"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-stretch" names="class_textserverextension_private_method__font_get_stretch"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_stretch</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-stretch"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回与正常宽度相比的字体拉伸量。一个介于 <literal>50%</literal> 和 <literal>200%</literal> 之间的百分比值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-style"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-style" names="class_textserverextension_private_method__font_get_style"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>] <strong>_font_get_style</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-style"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字体样式标志，见 <reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-style-name"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-style-name" names="class_textserverextension_private_method__font_get_style_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_font_get_style_name</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-style-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字体样式名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-subpixel-positioning"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-subpixel-positioning" names="class_textserverextension_private_method__font_get_subpixel_positioning"><reference internal="True" refuri="class_textserver#enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> <strong>_font_get_subpixel_positioning</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-subpixel-positioning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字体的次像素字形定位模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-supported-chars"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-supported-chars" names="class_textserverextension_private_method__font_get_supported_chars"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_font_get_supported_chars</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-supported-chars"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回包含字体中所有可用字符的字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-texture-count"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-texture-count" names="class_textserverextension_private_method__font_get_texture_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_texture_count</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-texture-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回字体缓存条目所使用的纹理数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-texture-image"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-texture-image" names="class_textserverextension_private_method__font_get_texture_image"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>_font_get_texture_image</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-texture-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回字体缓存纹理图像数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-texture-offsets"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-texture-offsets" names="class_textserverextension_private_method__font_get_texture_offsets"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_font_get_texture_offsets</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-texture-offsets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回包含字形打包数据的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-transform"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-transform" names="class_textserverextension_private_method__font_get_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>_font_get_transform</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回应用于字体轮廓的 2D 变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-underline-position"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-underline-position" names="class_textserverextension_private_method__font_get_underline_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_underline_position</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-underline-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回基线下方下划线的像素偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-underline-thickness" names="class_textserverextension_private_method__font_get_underline_thickness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_underline_thickness</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-underline-thickness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回下划线的粗细度，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-variation-coordinates"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-variation-coordinates" names="class_textserverextension_private_method__font_get_variation_coordinates"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_font_get_variation_coordinates</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-variation-coordinates"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回指定字体缓存条目的变体坐标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-weight"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-weight" names="class_textserverextension_private_method__font_get_weight"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_weight</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-get-weight"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回该字体的字重（粗度）。一个在 <literal>100...999</literal> 范围内的值，正常字体字重为 <literal>400</literal>，粗体字体字重为 <literal>700</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-has-char"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-has-char" names="class_textserverextension_private_method__font_has_char"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_has_char</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-has-char"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>如果该字体中包含 Unicode 字符 <literal>char</literal>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-is-allow-system-fallback"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-is-allow-system-fallback" names="class_textserverextension_private_method__font_is_allow_system_fallback"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_is_allow_system_fallback</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-is-allow-system-fallback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果可以自动使用系统字体作为回退字体，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-is-force-autohinter"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-is-force-autohinter" names="class_textserverextension_private_method__font_is_force_autohinter"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_is_force_autohinter</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-is-force-autohinter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则支持自动微调，优先于字体内置微调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-is-language-supported"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-is-language-supported" names="class_textserverextension_private_method__font_is_language_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_is_language_supported</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-is-language-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果该字体支持给定的语言（<reference name="ISO 639" refuri="https://zh.wikipedia.org/wiki/ISO_639-1">ISO 639</reference> 代码），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-is-multichannel-signed-distance-field"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-is-multichannel-signed-distance-field" names="class_textserverextension_private_method__font_is_multichannel_signed_distance_field"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_is_multichannel_signed_distance_field</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-is-multichannel-signed-distance-field"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果使用从动态字体矢量数据生成的单个多通道有符号距离场渲染所有大小的字形，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-is-script-supported"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-is-script-supported" names="class_textserverextension_private_method__font_is_script_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_is_script_supported</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-is-script-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果字体支持给定的文字（ISO 15924 代码），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-remove-glyph"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-remove-glyph" names="class_textserverextension_private_method__font_remove_glyph"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_remove_glyph</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-remove-glyph"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>从缓存条目中移除指定的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-remove-kerning"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-remove-kerning" names="class_textserverextension_private_method__font_remove_kerning"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_remove_kerning</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-remove-kerning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>移除字形对的字偶距覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-remove-language-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-remove-language-support-override" names="class_textserverextension_private_method__font_remove_language_support_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_remove_language_support_override</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-remove-language-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>移除语言支持覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-remove-script-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-remove-script-support-override" names="class_textserverextension_private_method__font_remove_script_support_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_remove_script_support_override</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-remove-script-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>移除文字支持覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-remove-size-cache"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-remove-size-cache" names="class_textserverextension_private_method__font_remove_size_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_remove_size_cache</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-remove-size-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>从缓存条目中移除指定的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-remove-texture"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-remove-texture" names="class_textserverextension_private_method__font_remove_texture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_remove_texture</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-remove-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>从缓存条目中移除指定的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-render-glyph"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-render-glyph" names="class_textserverextension_private_method__font_render_glyph"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_render_glyph</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-render-glyph"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>将指定的字符渲染到字体缓存纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-render-range"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-render-range" names="class_textserverextension_private_method__font_render_range"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_render_range</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-render-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>将范围内的字符渲染到字体缓存纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-allow-system-fallback"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-allow-system-fallback" names="class_textserverextension_private_method__font_set_allow_system_fallback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_allow_system_fallback</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, allow_system_fallback: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-allow-system-fallback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则可以自动将系统字体作为回退使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-antialiasing"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-antialiasing" names="class_textserverextension_private_method__font_set_antialiasing"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_antialiasing</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, antialiasing: <reference internal="True" refuri="class_textserver#enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-antialiasing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置字体的抗锯齿模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-ascent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-ascent" names="class_textserverextension_private_method__font_set_ascent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_ascent</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, ascent: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-ascent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置字体的升部（基线上方的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-baseline-offset"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-baseline-offset" names="class_textserverextension_private_method__font_set_baseline_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_baseline_offset</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, baseline_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-baseline-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置额外的基线偏移（作为字体高度的一部分）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-data"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-data" names="class_textserverextension_private_method__font_set_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_data</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置字体源数据，例如动态字体的源文件内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-data-ptr"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-data-ptr" names="class_textserverextension_private_method__font_set_data_ptr"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_data_ptr</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, data_ptr: <literal>const uint8_t*</literal>, data_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-data-ptr"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置字体源数据指针，例如动态字体的源文件内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-descent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-descent" names="class_textserverextension_private_method__font_set_descent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_descent</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, descent: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-descent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置字体的降部（基线下方的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-disable-embedded-bitmaps"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-disable-embedded-bitmaps" names="class_textserverextension_private_method__font_set_disable_embedded_bitmaps"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_disable_embedded_bitmaps</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, disable_embedded_bitmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-disable-embedded-bitmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则禁用内嵌字体位图的加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-embolden"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-embolden" names="class_textserverextension_private_method__font_set_embolden"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_embolden</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-embolden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体的加粗强度。如果 <literal>strength</literal> 不等于零，则会加粗字体轮廓。负值会减小轮廓的粗细度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-face-index"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-face-index" names="class_textserverextension_private_method__font_set_face_index"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_face_index</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, face_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-face-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>在 TrueType / OpenType 集合中设置活动字体索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-fixed-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-fixed-size" names="class_textserverextension_private_method__font_set_fixed_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_fixed_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fixed_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-fixed-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置位图字体的固定大小。如果设置为大于零的值，则会为所有字体大小使用相同的缓存条目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-fixed-size-scale-mode"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-fixed-size-scale-mode" names="class_textserverextension_private_method__font_set_fixed_size_scale_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_fixed_size_scale_mode</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, fixed_size_scale_mode: <reference internal="True" refuri="class_textserver#enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-fixed-size-scale-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置位图字体缩放模式。仅当 <literal>fixed_size</literal> 大于零时才使用该属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-force-autohinter"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-force-autohinter" names="class_textserverextension_private_method__font_set_force_autohinter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_force_autohinter</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, force_autohinter: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-force-autohinter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则优先使用自动微调，而不是字体的内置微调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-generate-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-generate-mipmaps" names="class_textserverextension_private_method__font_set_generate_mipmaps"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_generate_mipmaps</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, generate_mipmaps: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-generate-mipmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则启用字体纹理 mipmap 生成。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-global-oversampling"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-global-oversampling" names="class_textserverextension_private_method__font_set_global_oversampling"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_global_oversampling</strong>(oversampling: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-global-oversampling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置字体过采样系数，由 TextServer 中的所有字体共享。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-glyph-advance"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-glyph-advance" names="class_textserverextension_private_method__font_set_glyph_advance"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_glyph_advance</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, advance: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-advance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置字形推进（下一个字形的偏移量）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-glyph-offset"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-glyph-offset" names="class_textserverextension_private_method__font_set_glyph_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_glyph_offset</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置字形相对于基线的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-glyph-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-glyph-size" names="class_textserverextension_private_method__font_set_glyph_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_glyph_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gl_size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置字形的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-glyph-texture-idx"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-glyph-texture-idx" names="class_textserverextension_private_method__font_set_glyph_texture_idx"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_glyph_texture_idx</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, texture_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-texture-idx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置包含该字形的缓存纹理的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-glyph-uv-rect"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-glyph-uv-rect" names="class_textserverextension_private_method__font_set_glyph_uv_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_glyph_uv_rect</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, uv_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-uv-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置包含该字形的缓存纹理中，该字形的矩形区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-hinting"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-hinting" names="class_textserverextension_private_method__font_set_hinting"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_hinting</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, hinting: <reference internal="True" refuri="class_textserver#enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-hinting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置字体微调模式。仅由动态字体使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-kerning"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-kerning" names="class_textserverextension_private_method__font_set_kerning"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_kerning</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, kerning: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-kerning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置字形对的字偶距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-language-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-language-support-override" names="class_textserverextension_private_method__font_set_language_support_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_language_support_override</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-language-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>为 <reference internal="True" refid="class-textserverextension-private-method-font-is-language-supported"><inline classes="std std-ref">_font_is_language_supported</inline></reference> 添加覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-msdf-pixel-range"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-msdf-pixel-range" names="class_textserverextension_private_method__font_set_msdf_pixel_range"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_msdf_pixel_range</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msdf_pixel_range: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-msdf-pixel-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置最小和最大可表示有符号距离之间形状周围范围的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-msdf-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-msdf-size" names="class_textserverextension_private_method__font_set_msdf_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_msdf_size</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msdf_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-msdf-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置用于生成 MSDF 纹理的源字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-multichannel-signed-distance-field"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-multichannel-signed-distance-field" names="class_textserverextension_private_method__font_set_multichannel_signed_distance_field"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_multichannel_signed_distance_field</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, msdf: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-multichannel-signed-distance-field"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Optional.</strong></paragraph>
            <paragraph>If set to <literal>true</literal>, glyphs of all sizes are rendered using single multichannel signed distance field generated from the dynamic font vector data. MSDF rendering allows displaying the font at any scaling factor without blurriness, and without incurring a CPU cost when the font size changes (since the font no longer needs to be rasterized on the CPU). As a downside, font hinting is not available with MSDF. The lack of font hinting may result in less crisp and less readable fonts at small sizes.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-name"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-name" names="class_textserverextension_private_method__font_set_name"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_name</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置该字体的家族名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-opentype-feature-overrides"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-opentype-feature-overrides" names="class_textserverextension_private_method__font_set_opentype_feature_overrides"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_opentype_feature_overrides</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, overrides: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-opentype-feature-overrides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置字体 OpenType 特性集覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-oversampling"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-oversampling" names="class_textserverextension_private_method__font_set_oversampling"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_oversampling</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, oversampling: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-oversampling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置字体的过采样系数，如果设置为 <literal>0.0</literal>，则会改用全局过采样系数。仅由动态字体使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-scale"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-scale" names="class_textserverextension_private_method__font_set_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_scale</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置彩色位图字体的缩放系数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-script-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-script-support-override" names="class_textserverextension_private_method__font_set_script_support_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_script_support_override</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-script-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>为 <reference internal="True" refid="class-textserverextension-private-method-font-is-script-supported"><inline classes="std std-ref">_font_is_script_supported</inline></reference> 添加覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-spacing"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-spacing" names="class_textserverextension_private_method__font_set_spacing"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_spacing</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>将 <literal>spacing</literal> 的间距（见 <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>）设置为 <literal>value</literal>，单位为像素（与字体大小无关）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-stretch"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-stretch" names="class_textserverextension_private_method__font_set_stretch"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_stretch</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, stretch: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-stretch"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回与正常宽度相比的字体拉伸量。一个介于 <literal>50%</literal> 和 <literal>200%</literal> 之间的百分比值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-style"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-style" names="class_textserverextension_private_method__font_set_style"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_style</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, style: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-style"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字体样式标志，见 <reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-style-name"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-style-name" names="class_textserverextension_private_method__font_set_style_name"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_style_name</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, name_style: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-style-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置字体的样式名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-subpixel-positioning"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-subpixel-positioning" names="class_textserverextension_private_method__font_set_subpixel_positioning"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_subpixel_positioning</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, subpixel_positioning: <reference internal="True" refuri="class_textserver#enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-subpixel-positioning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置字体的次像素字形定位模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-texture-image"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-texture-image" names="class_textserverextension_private_method__font_set_texture_image"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_texture_image</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-texture-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置字体的缓存纹理图像数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-texture-offsets"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-texture-offsets" names="class_textserverextension_private_method__font_set_texture_offsets"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_texture_offsets</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-texture-offsets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置包含字形打包数据的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-transform"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-transform" names="class_textserverextension_private_method__font_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_transform</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置应用于字体轮廓的 2D 变换，可用于倾斜、翻转和旋转字形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-underline-position"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-underline-position" names="class_textserverextension_private_method__font_set_underline_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_underline_position</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, underline_position: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-underline-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置基线下方下划线的像素偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-underline-thickness" names="class_textserverextension_private_method__font_set_underline_thickness"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_underline_thickness</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, underline_thickness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-underline-thickness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>设置下划线的粗细度，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-variation-coordinates"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-variation-coordinates" names="class_textserverextension_private_method__font_set_variation_coordinates"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_variation_coordinates</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, variation_coordinates: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-variation-coordinates"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>为指定的字体缓存条目设置变体坐标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-weight"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-weight" names="class_textserverextension_private_method__font_set_weight"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_font_set_weight</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, weight: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-set-weight"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置该字体的字重（粗度）。一个在 <literal>100...999</literal> 范围内的值，正常字体字重为 <literal>400</literal>，粗体字体字重为 <literal>700</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-supported-feature-list"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-supported-feature-list" names="class_textserverextension_private_method__font_supported_feature_list"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_font_supported_feature_list</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-supported-feature-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回支持的 OpenType 特性的字典。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-supported-variation-list"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-supported-variation-list" names="class_textserverextension_private_method__font_supported_variation_list"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_font_supported_variation_list</strong>(font_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-font-supported-variation-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回支持的 OpenType 变体坐标的字典。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-format-number"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-format-number" names="class_textserverextension_private_method__format_number"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_format_number</strong>(number: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-format-number"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>将数字从阿拉伯数字（0..9）转换为 <literal>language</literal> 语言的记数系统。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-free-rid"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-free-rid" names="class_textserverextension_private_method__free_rid"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_free_rid</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-free-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>释放由该 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 创建的某个对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-get-features"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-get-features" names="class_textserverextension_private_method__get_features"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_features</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-get-features"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回文本服务器的功能，见 <reference internal="True" refuri="class_textserver#enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-get-hex-code-box-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-get-hex-code-box-size" names="class_textserverextension_private_method__get_hex_code_box_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_get_hex_code_box_size</strong>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-get-hex-code-box-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回替换字符的大小（在无效字符处绘制的带十六进制字符代码的框）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-get-name"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-get-name" names="class_textserverextension_private_method__get_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_name</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-get-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回该服务器接口的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-get-support-data-filename"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-get-support-data-filename" names="class_textserverextension_private_method__get_support_data_filename"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_support_data_filename</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-get-support-data-filename"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回默认的 TextServer 数据库（例如 ICU 中断迭代器和字典）文件名。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-get-support-data-info"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-get-support-data-info" names="class_textserverextension_private_method__get_support_data_info"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_support_data_info</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-get-support-data-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回 TextServer 数据库（例如 ICU 中断迭代器和字典）的描述。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-has"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-has" names="class_textserverextension_private_method__has"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-has"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>如果 <literal>rid</literal> 是该文本服务器拥有的有效资源，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-has-feature"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-has-feature" names="class_textserverextension_private_method__has_feature"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_feature</strong>(feature: <reference internal="True" refuri="class_textserver#enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-has-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>如果服务器支持某个功能，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-is-confusable"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-is-confusable" names="class_textserverextension_private_method__is_confusable"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_is_confusable</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, dict: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-is-confusable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回 <literal>dict</literal> 中第一个与 <literal>string</literal> 在视觉上可能产生混淆的字符串的索引，如果没有找到则返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-is-locale-right-to-left"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-is-locale-right-to-left" names="class_textserverextension_private_method__is_locale_right_to_left"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_locale_right_to_left</strong>(locale: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-is-locale-right-to-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>如果区域设置为从右至左，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-is-valid-identifier"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-is-valid-identifier" names="class_textserverextension_private_method__is_valid_identifier"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_valid_identifier</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-is-valid-identifier"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果 <literal>string</literal> 是有效的标识符，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-is-valid-letter"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-is-valid-letter" names="class_textserverextension_private_method__is_valid_letter"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_valid_letter</strong>(unicode: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-is-valid-letter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-load-support-data"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-load-support-data" names="class_textserverextension_private_method__load_support_data"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_load_support_data</strong>(filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-load-support-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>加载可选的 TextServer 数据库（例如 ICU 中断迭代器和字典）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-name-to-tag"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-name-to-tag" names="class_textserverextension_private_method__name_to_tag"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_name_to_tag</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-name-to-tag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>将可读的特性、变体、文字、语言名称转换为 OpenType 标记。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-parse-number"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-parse-number" names="class_textserverextension_private_method__parse_number"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_parse_number</strong>(number: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-parse-number"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Optional.</strong></paragraph>
            <paragraph>Converts <literal>number</literal> from the numeral systems used in <literal>language</literal> to Western Arabic (0..9).</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-parse-structured-text"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-parse-structured-text" names="class_textserverextension_private_method__parse_structured_text"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>] <strong>_parse_structured_text</strong>(parser_type: <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference>, args: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-parse-structured-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Optional.</strong></paragraph>
            <paragraph>Default implementation of the BiDi algorithm override function. See <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> for more info.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-percent-sign"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-percent-sign" names="class_textserverextension_private_method__percent_sign"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_percent_sign</strong>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-percent-sign"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回语言 <literal>language</literal> 中使用的百分比符号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-save-support-data"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-save-support-data" names="class_textserverextension_private_method__save_support_data"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_save_support_data</strong>(filename: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-save-support-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>将可选的 TextServer 数据库（例如 ICU 中断迭代器和字典）保存至文件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-get-span-count"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-get-span-count" names="class_textserverextension_private_method__shaped_get_span_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_get_span_count</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-get-span-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Required.</strong></paragraph>
            <paragraph>Returns number of text spans added using <reference internal="True" refid="class-textserverextension-private-method-shaped-text-add-string"><inline classes="std std-ref">_shaped_text_add_string</inline></reference> or <reference internal="True" refid="class-textserverextension-private-method-shaped-text-add-object"><inline classes="std std-ref">_shaped_text_add_object</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-get-span-meta"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-get-span-meta" names="class_textserverextension_private_method__shaped_get_span_meta"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_shaped_get_span_meta</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-get-span-meta"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回文本区间的元数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-set-span-update-font"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-set-span-update-font" names="class_textserverextension_private_method__shaped_set_span_update_font"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_set_span_update_font</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, fonts: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>], size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, opentype_features: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-set-span-update-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>在不更改文本的情况下，更改文本区间的字体、字体大小和 OpenType 功能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-add-object"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-add-object" names="class_textserverextension_private_method__shaped_text_add_object"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_add_object</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference>, length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-add-object"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Required.</strong></paragraph>
            <paragraph>Adds inline object to the text buffer, <literal>key</literal> must be unique. In the text, object is represented as <literal>length</literal> object replacement characters.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-add-string"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-add-string" names="class_textserverextension_private_method__shaped_text_add_string"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_add_string</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, fonts: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>], size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, opentype_features: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, meta: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-add-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>添加文本区间和字体，将其绘制到文本缓冲中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-clear"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-clear" names="class_textserverextension_private_method__shaped_text_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_clear</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>清空文本缓冲（移除文本和内联对象）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-closest-character-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-closest-character-pos" names="class_textserverextension_private_method__shaped_text_closest_character_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_closest_character_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-closest-character-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回距离 <literal>pos</literal> 最近的组合字符位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-draw"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-draw" names="class_textserverextension_private_method__shaped_text_draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_draw</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, clip_l: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, clip_r: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>在画布项的给定位置绘制塑形后的文本，颜色为 <literal>color</literal>。<literal>pos</literal> 指定的是基线的最左侧（横向排版）或基线的最顶部（纵向排版）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-draw-outline"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-draw-outline" names="class_textserverextension_private_method__shaped_text_draw_outline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_draw_outline</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, clip_l: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, clip_r: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-draw-outline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>在画布项的给定位置绘制塑形后的文本轮廓，颜色为 <literal>color</literal>。<literal>pos</literal> 指定的是基线的最左侧（横向排版）或基线的最顶部（纵向排版）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-fit-to-width"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-fit-to-width" names="class_textserverextension_private_method__shaped_text_fit_to_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_fit_to_width</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, justification_flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-fit-to-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>两端对齐文本以适合指定宽度，返回新的文本宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-ascent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-ascent" names="class_textserverextension_private_method__shaped_text_get_ascent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_get_ascent</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-ascent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回该文本的升部（水平排版时为基线上方的像素数，垂直排版时为基线左侧的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-carets"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-carets" names="class_textserverextension_private_method__shaped_text_get_carets"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_get_carets</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, caret: <literal>CaretInfo*</literal>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-carets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回与文本中字符偏移 <literal>position</literal> 对应的文本光标的形状。返回的光标形状是宽度为 1 像素的矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-character-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-character-breaks" names="class_textserverextension_private_method__shaped_text_get_character_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_shaped_text_get_character_breaks</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-character-breaks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回组合字符边界的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-custom-ellipsis"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-custom-ellipsis" names="class_textserverextension_private_method__shaped_text_get_custom_ellipsis"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_custom_ellipsis</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-custom-ellipsis"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回文字裁剪时使用的省略字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-custom-punctuation"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-custom-punctuation" names="class_textserverextension_private_method__shaped_text_get_custom_punctuation"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_shaped_text_get_custom_punctuation</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-custom-punctuation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回自定义标点字符列表，用于断字。如果被设置为空字符串，则使用服务器的默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-descent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-descent" names="class_textserverextension_private_method__shaped_text_get_descent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_get_descent</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-descent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回该文本的降部（水平排版时为基线下方的像素数，垂直排版时为基线右侧的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-direction"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-direction" names="class_textserverextension_private_method__shaped_text_get_direction"><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>_shaped_text_get_direction</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回文本的方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-dominant-direction-in-range"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-dominant-direction-in-range" names="class_textserverextension_private_method__shaped_text_get_dominant_direction_in_range"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_dominant_direction_in_range</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-dominant-direction-in-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回文本范围内的主要书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-ellipsis-glyph-count"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-ellipsis-glyph-count" names="class_textserverextension_private_method__shaped_text_get_ellipsis_glyph_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_ellipsis_glyph_count</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-ellipsis-glyph-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回省略号中的字形数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-ellipsis-glyphs"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-ellipsis-glyphs" names="class_textserverextension_private_method__shaped_text_get_ellipsis_glyphs"><literal>const Glyph*</literal> <strong>_shaped_text_get_ellipsis_glyphs</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-ellipsis-glyphs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回省略号中的字形数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-ellipsis-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-ellipsis-pos" names="class_textserverextension_private_method__shaped_text_get_ellipsis_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_ellipsis_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-ellipsis-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回省略号的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-glyph-count"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-glyph-count" names="class_textserverextension_private_method__shaped_text_get_glyph_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_glyph_count</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-glyph-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回缓冲区中的字形数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-glyphs"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-glyphs" names="class_textserverextension_private_method__shaped_text_get_glyphs"><literal>const Glyph*</literal> <strong>_shaped_text_get_glyphs</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-glyphs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回字形数组，按视觉顺序排序。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-grapheme-bounds"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-grapheme-bounds" names="class_textserverextension_private_method__shaped_text_get_grapheme_bounds"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_shaped_text_get_grapheme_bounds</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-grapheme-bounds"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>将复合字符的边界返回为距行首的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-inferred-direction"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-inferred-direction" names="class_textserverextension_private_method__shaped_text_get_inferred_direction"><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>_shaped_text_get_inferred_direction</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-inferred-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回由 BiDi 算法推断的文本书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-line-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-line-breaks" names="class_textserverextension_private_method__shaped_text_get_line_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_shaped_text_get_line_breaks</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, break_flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-line-breaks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>对文本进行断行，返回每一行的字符范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-line-breaks-adv"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-line-breaks-adv" names="class_textserverextension_private_method__shaped_text_get_line_breaks_adv"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_shaped_text_get_line_breaks_adv</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, once: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, break_flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-line-breaks-adv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>将文本拆分为行和列。返回每段的字符范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-object-glyph"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-object-glyph" names="class_textserverextension_private_method__shaped_text_get_object_glyph"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_object_glyph</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-object-glyph"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回内联对象的字形索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-object-range"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-object-range" names="class_textserverextension_private_method__shaped_text_get_object_range"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>_shaped_text_get_object_range</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-object-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回内联对象的字符范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-object-rect"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-object-rect" names="class_textserverextension_private_method__shaped_text_get_object_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>_shaped_text_get_object_rect</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-object-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回内联对象的边界矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-objects"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-objects" names="class_textserverextension_private_method__shaped_text_get_objects"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>_shaped_text_get_objects</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-objects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回内联对象的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-orientation"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-orientation" names="class_textserverextension_private_method__shaped_text_get_orientation"><reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> <strong>_shaped_text_get_orientation</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-orientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回文本朝向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-parent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-parent" names="class_textserverextension_private_method__shaped_text_get_parent"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_shaped_text_get_parent</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-parent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回子字符串源自哪个父缓冲区。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-preserve-control"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-preserve-control" names="class_textserverextension_private_method__shaped_text_get_preserve_control"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_get_preserve_control</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-preserve-control"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果文本缓冲区被配置为显示控制字符，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-preserve-invalid"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-preserve-invalid" names="class_textserverextension_private_method__shaped_text_get_preserve_invalid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_get_preserve_invalid</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-preserve-invalid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Optional.</strong></paragraph>
            <paragraph>Returns <literal>true</literal> if text buffer is configured to display hexadecimal codes in place of invalid characters.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-range"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-range" names="class_textserverextension_private_method__shaped_text_get_range"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>_shaped_text_get_range</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Required.</strong></paragraph>
            <paragraph>Returns substring buffer character range in the parent buffer.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-selection"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-selection" names="class_textserverextension_private_method__shaped_text_get_selection"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>_shaped_text_get_selection</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-selection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Optional.</strong></paragraph>
            <paragraph>Returns selection rectangles for the specified character range.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-size" names="class_textserverextension_private_method__shaped_text_get_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_shaped_text_get_size</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回该文本的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-spacing"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-spacing" names="class_textserverextension_private_method__shaped_text_get_spacing"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_spacing</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字形或行之间添加的额外间距，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-trim-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-trim-pos" names="class_textserverextension_private_method__shaped_text_get_trim_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_trim_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-trim-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回超出修剪的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-underline-position"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-underline-position" names="class_textserverextension_private_method__shaped_text_get_underline_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_get_underline_position</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-underline-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回基线下方下划线的像素偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-underline-thickness" names="class_textserverextension_private_method__shaped_text_get_underline_thickness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_get_underline_thickness</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-underline-thickness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回下划线的粗细度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-width"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-width" names="class_textserverextension_private_method__shaped_text_get_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_get_width</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回文本的宽度（对于水平排版）或高度（对于垂直排版）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-word-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-word-breaks" names="class_textserverextension_private_method__shaped_text_get_word_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_shaped_text_get_word_breaks</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, grapheme_flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>], skip_grapheme_flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-word-breaks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>将文本分解成单词并返回字符范围的数组。请使用 <literal>grapheme_flags</literal> 来设置哪些字符会被用于分解（见 <reference internal="True" refuri="class_textserver#enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-hit-test-grapheme"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-hit-test-grapheme" names="class_textserverextension_private_method__shaped_text_hit_test_grapheme"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_hit_test_grapheme</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, coord: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-hit-test-grapheme"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回字素的索引，该字素位于基线上指定像素偏移的位置，如果没有找到，则返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-hit-test-position"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-hit-test-position" names="class_textserverextension_private_method__shaped_text_hit_test_position"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_hit_test_position</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, coord: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-hit-test-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回基线处指定像素偏移处的文本光标的偏移量。该函数始终返回一个有效位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-is-ready"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-is-ready" names="class_textserverextension_private_method__shaped_text_is_ready"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_is_ready</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-is-ready"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>如果缓冲区成功塑形，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-next-character-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-next-character-pos" names="class_textserverextension_private_method__shaped_text_next_character_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_next_character_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-next-character-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回距离 <literal>pos</literal> 最近的组合字符结束位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-next-grapheme-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-next-grapheme-pos" names="class_textserverextension_private_method__shaped_text_next_grapheme_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_next_grapheme_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-next-grapheme-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回距离 <literal>pos</literal> 最近的字素结束位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-overrun-trim-to-width"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-overrun-trim-to-width" names="class_textserverextension_private_method__shaped_text_overrun_trim_to_width"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_overrun_trim_to_width</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, trim_flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-textoverrunflag"><inline classes="std std-ref">TextOverrunFlag</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-overrun-trim-to-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果文本超出给定宽度，则修剪文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-prev-character-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-prev-character-pos" names="class_textserverextension_private_method__shaped_text_prev_character_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_prev_character_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-prev-character-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回距离 <literal>pos</literal> 最近的组合字符开始位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-prev-grapheme-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-prev-grapheme-pos" names="class_textserverextension_private_method__shaped_text_prev_grapheme_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_prev_grapheme_pos</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-prev-grapheme-pos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回距离 <literal>pos</literal> 最近的字素开始位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-resize-object"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-resize-object" names="class_textserverextension_private_method__shaped_text_resize_object"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_resize_object</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference>, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-resize-object"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置嵌入对象的新大小和对齐方式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-bidi-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-bidi-override" names="class_textserverextension_private_method__shaped_text_set_bidi_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_set_bidi_override</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, override: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-bidi-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>为结构化文本设置 BiDi 算法覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-custom-ellipsis"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-custom-ellipsis" names="class_textserverextension_private_method__shaped_text_set_custom_ellipsis"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_set_custom_ellipsis</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-custom-ellipsis"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置文字裁剪时使用的省略字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-custom-punctuation"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-custom-punctuation" names="class_textserverextension_private_method__shaped_text_set_custom_punctuation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_set_custom_punctuation</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, punct: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-custom-punctuation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置自定义标点字符列表，用于断字。如果被设置为空字符串，则使用服务器的默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-direction"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-direction" names="class_textserverextension_private_method__shaped_text_set_direction"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_set_direction</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, direction: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置所需的文本方向。如果设置为 <reference internal="True" refuri="class_textserver#class-textserver-constant-direction-auto"><inline classes="std std-ref">TextServer.DIRECTION_AUTO</inline></reference>，方向将根据缓冲区的内容和当前的区域设置来检测。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-orientation"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-orientation" names="class_textserverextension_private_method__shaped_text_set_orientation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_set_orientation</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, orientation: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-orientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置想要的文本朝向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-preserve-control"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-preserve-control" names="class_textserverextension_private_method__shaped_text_set_preserve_control"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_set_preserve_control</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-preserve-control"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则文本缓冲区将显示控制字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-preserve-invalid"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-preserve-invalid" names="class_textserverextension_private_method__shaped_text_set_preserve_invalid"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_set_preserve_invalid</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-preserve-invalid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，则文本缓冲区会将无效字符显示为十六进制代码，否则不显示任何内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-spacing"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-spacing" names="class_textserverextension_private_method__shaped_text_set_spacing"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_shaped_text_set_spacing</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, spacing: <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>设置字形之间或行与行之间添加的额外像素间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-shape"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-shape" names="class_textserverextension_private_method__shaped_text_shape"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_shape</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>形状缓冲区（如果未塑形）。如果字符串塑形成功，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-sort-logical"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-sort-logical" names="class_textserverextension_private_method__shaped_text_sort_logical"><literal>const Glyph*</literal> <strong>_shaped_text_sort_logical</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-sort-logical"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>按逻辑顺序返回文本字形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-substr"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-substr" names="class_textserverextension_private_method__shaped_text_substr"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_shaped_text_substr</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-substr"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>必选。</strong></paragraph>
            <paragraph>返回 <literal>shaped</literal> 文本缓冲区中字符串的子字符串的文本缓冲区（包括内联对象）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-tab-align"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-tab-align" names="class_textserverextension_private_method__shaped_text_tab_align"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_tab_align</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, tab_stops: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-tab-align"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>将塑形文本与给定的制表位对齐。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-update-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-update-breaks" names="class_textserverextension_private_method__shaped_text_update_breaks"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_update_breaks</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-update-breaks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>更新塑形文本中的断点。该方法由分词函数的默认实现调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-update-justification-ops"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-update-justification-ops" names="class_textserverextension_private_method__shaped_text_update_justification_ops"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_update_justification_ops</strong>(shaped: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-shaped-text-update-justification-ops"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Optional.</strong></paragraph>
            <paragraph>Updates justification points in the shaped text. This method is called by default implementation of text justification functions.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-spoof-check"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-spoof-check" names="class_textserverextension_private_method__spoof_check"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_spoof_check</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-spoof-check"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Optional.</strong></paragraph>
            <paragraph>Returns <literal>true</literal> if <literal>string</literal> is likely to be an attempt at confusing the reader.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-string-get-character-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-string-get-character-breaks" names="class_textserverextension_private_method__string_get_character_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_string_get_character_breaks</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-string-get-character-breaks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回组合字符边界的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-string-get-word-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-string-get-word-breaks" names="class_textserverextension_private_method__string_get_word_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_string_get_word_breaks</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, chars_per_line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-string-get-word-breaks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回分词边界的数组。数组中的元素是单词起始位置和结束位置的偏移量。因此数组的长度始终为偶数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-string-to-lower"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-string-to-lower" names="class_textserverextension_private_method__string_to_lower"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_string_to_lower</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-string-to-lower"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回将该字符串转换为小写的结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-string-to-title"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-string-to-title" names="class_textserverextension_private_method__string_to_title"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_string_to_title</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-string-to-title"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回将该字符串转换为词首字母大写的结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-string-to-upper"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-string-to-upper" names="class_textserverextension_private_method__string_to_upper"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_string_to_upper</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-string-to-upper"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>返回将该字符串转换为大写的结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-strip-diacritics"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-strip-diacritics" names="class_textserverextension_private_method__strip_diacritics"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_strip_diacritics</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-strip-diacritics"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>从字符串中剥离变音符号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-tag-to-name"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-tag-to-name" names="class_textserverextension_private_method__tag_to_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_tag_to_name</strong>(tag: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textserverextension-private-method-tag-to-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>可选。</strong></paragraph>
            <paragraph>将 OpenType 标签转换为可读的特性、变体、文字或语言的名称。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
