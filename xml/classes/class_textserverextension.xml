<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_textserverextension.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/TextServerExtension.xml.</comment>
    <target refid="class-textserverextension"></target>
    <section ids="textserverextension class-textserverextension" names="textserverextension class_textserverextension">
        <title>TextServerExtension</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_textserveradvanced#class-textserveradvanced"><inline classes="std std-ref">TextServerAdvanced</inline></reference>, <reference internal="True" refuri="class_textserverdummy#class-textserverdummy"><inline classes="std std-ref">TextServerDummy</inline></reference>, <reference internal="True" refuri="class_textserverfallback#class-textserverfallback"><inline classes="std std-ref">TextServerFallback</inline></reference></paragraph>
        <paragraph>自定义 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 实现（插件）的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>外部的 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 实现应该继承这个类。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="65"></colspec>
                    <colspec colwidth="372"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-cleanup"><inline classes="std std-ref">_cleanup</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-create-font"><inline classes="std std-ref">_create_font</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-create-font-linked-variation"><inline classes="std std-ref">_create_font_linked_variation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-create-shaped-text"><inline classes="std std-ref">_create_shaped_text</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-draw-hex-code-box"><inline classes="std std-ref">_draw_hex_code_box</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-clear-glyphs"><inline classes="std std-ref">_font_clear_glyphs</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-clear-kerning-map"><inline classes="std std-ref">_font_clear_kerning_map</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-clear-size-cache"><inline classes="std std-ref">_font_clear_size_cache</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-clear-textures"><inline classes="std std-ref">_font_clear_textures</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-draw-glyph"><inline classes="std std-ref">_font_draw_glyph</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-draw-glyph-outline"><inline classes="std std-ref">_font_draw_glyph_outline</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> outline_size, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-antialiasing"><inline classes="std std-ref">_font_get_antialiasing</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-ascent"><inline classes="std std-ref">_font_get_ascent</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-char-from-glyph-index"><inline classes="std std-ref">_font_get_char_from_glyph_index</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-descent"><inline classes="std std-ref">_font_get_descent</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-embolden"><inline classes="std std-ref">_font_get_embolden</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-face-count"><inline classes="std std-ref">_font_get_face_count</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-face-index"><inline classes="std std-ref">_font_get_face_index</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-fixed-size"><inline classes="std std-ref">_font_get_fixed_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-fixed-size-scale-mode"><inline classes="std std-ref">_font_get_fixed_size_scale_mode</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-generate-mipmaps"><inline classes="std std-ref">_font_get_generate_mipmaps</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-global-oversampling"><inline classes="std std-ref">_font_get_global_oversampling</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-advance"><inline classes="std std-ref">_font_get_glyph_advance</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-contours"><inline classes="std std-ref">_font_get_glyph_contours</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-index"><inline classes="std std-ref">_font_get_glyph_index</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> char, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> variation_selector <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-list"><inline classes="std std-ref">_font_get_glyph_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-offset"><inline classes="std std-ref">_font_get_glyph_offset</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-size"><inline classes="std std-ref">_font_get_glyph_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-texture-idx"><inline classes="std std-ref">_font_get_glyph_texture_idx</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-texture-rid"><inline classes="std std-ref">_font_get_glyph_texture_rid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-texture-size"><inline classes="std std-ref">_font_get_glyph_texture_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-glyph-uv-rect"><inline classes="std std-ref">_font_get_glyph_uv_rect</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-hinting"><inline classes="std std-ref">_font_get_hinting</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-kerning"><inline classes="std std-ref">_font_get_kerning</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> glyph_pair <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-kerning-list"><inline classes="std std-ref">_font_get_kerning_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-language-support-override"><inline classes="std std-ref">_font_get_language_support_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-language-support-overrides"><inline classes="std std-ref">_font_get_language_support_overrides</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-msdf-pixel-range"><inline classes="std std-ref">_font_get_msdf_pixel_range</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-msdf-size"><inline classes="std std-ref">_font_get_msdf_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-name"><inline classes="std std-ref">_font_get_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-opentype-feature-overrides"><inline classes="std std-ref">_font_get_opentype_feature_overrides</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-ot-name-strings"><inline classes="std std-ref">_font_get_ot_name_strings</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-oversampling"><inline classes="std std-ref">_font_get_oversampling</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-scale"><inline classes="std std-ref">_font_get_scale</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-script-support-override"><inline classes="std std-ref">_font_get_script_support_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> script <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-script-support-overrides"><inline classes="std std-ref">_font_get_script_support_overrides</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-size-cache-list"><inline classes="std std-ref">_font_get_size_cache_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-spacing"><inline classes="std std-ref">_font_get_spacing</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> spacing <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-stretch"><inline classes="std std-ref">_font_get_stretch</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>&gt;</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-style"><inline classes="std std-ref">_font_get_style</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-style-name"><inline classes="std std-ref">_font_get_style_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-subpixel-positioning"><inline classes="std std-ref">_font_get_subpixel_positioning</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-supported-chars"><inline classes="std std-ref">_font_get_supported_chars</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-texture-count"><inline classes="std std-ref">_font_get_texture_count</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-texture-image"><inline classes="std std-ref">_font_get_texture_image</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> texture_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-texture-offsets"><inline classes="std std-ref">_font_get_texture_offsets</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> texture_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-transform"><inline classes="std std-ref">_font_get_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-underline-position"><inline classes="std std-ref">_font_get_underline_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-underline-thickness"><inline classes="std std-ref">_font_get_underline_thickness</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-variation-coordinates"><inline classes="std std-ref">_font_get_variation_coordinates</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-get-weight"><inline classes="std std-ref">_font_get_weight</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-has-char"><inline classes="std std-ref">_font_has_char</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> char <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-is-allow-system-fallback"><inline classes="std std-ref">_font_is_allow_system_fallback</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-is-force-autohinter"><inline classes="std std-ref">_font_is_force_autohinter</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-is-language-supported"><inline classes="std std-ref">_font_is_language_supported</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-is-multichannel-signed-distance-field"><inline classes="std std-ref">_font_is_multichannel_signed_distance_field</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-is-script-supported"><inline classes="std std-ref">_font_is_script_supported</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> script <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-remove-glyph"><inline classes="std std-ref">_font_remove_glyph</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-remove-kerning"><inline classes="std std-ref">_font_remove_kerning</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> glyph_pair <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-remove-language-support-override"><inline classes="std std-ref">_font_remove_language_support_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-remove-script-support-override"><inline classes="std std-ref">_font_remove_script_support_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> script <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-remove-size-cache"><inline classes="std std-ref">_font_remove_size_cache</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-remove-texture"><inline classes="std std-ref">_font_remove_texture</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> texture_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-render-glyph"><inline classes="std std-ref">_font_render_glyph</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-render-range"><inline classes="std std-ref">_font_render_range</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> start, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> end <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-allow-system-fallback"><inline classes="std std-ref">_font_set_allow_system_fallback</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> allow_system_fallback <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-antialiasing"><inline classes="std std-ref">_font_set_antialiasing</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_textserver#enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference> antialiasing <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-ascent"><inline classes="std std-ref">_font_set_ascent</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> ascent <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-data"><inline classes="std std-ref">_font_set_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-data-ptr"><inline classes="std std-ref">_font_set_data_ptr</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, const uint8_t* data_ptr, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> data_size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-descent"><inline classes="std std-ref">_font_set_descent</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> descent <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-embolden"><inline classes="std std-ref">_font_set_embolden</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> strength <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-face-index"><inline classes="std std-ref">_font_set_face_index</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> face_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-fixed-size"><inline classes="std std-ref">_font_set_fixed_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> fixed_size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-fixed-size-scale-mode"><inline classes="std std-ref">_font_set_fixed_size_scale_mode</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_textserver#enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference> fixed_size_scale_mode <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-force-autohinter"><inline classes="std std-ref">_font_set_force_autohinter</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> force_autohinter <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-generate-mipmaps"><inline classes="std std-ref">_font_set_generate_mipmaps</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> generate_mipmaps <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-global-oversampling"><inline classes="std std-ref">_font_set_global_oversampling</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> oversampling <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-advance"><inline classes="std std-ref">_font_set_glyph_advance</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> advance <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-offset"><inline classes="std std-ref">_font_set_glyph_offset</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> offset <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-size"><inline classes="std std-ref">_font_set_glyph_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> gl_size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-texture-idx"><inline classes="std std-ref">_font_set_glyph_texture_idx</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> texture_idx <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-glyph-uv-rect"><inline classes="std std-ref">_font_set_glyph_uv_rect</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> uv_rect <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-hinting"><inline classes="std std-ref">_font_set_hinting</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_textserver#enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference> hinting <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-kerning"><inline classes="std std-ref">_font_set_kerning</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> glyph_pair, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> kerning <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-language-support-override"><inline classes="std std-ref">_font_set_language_support_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> supported <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-msdf-pixel-range"><inline classes="std std-ref">_font_set_msdf_pixel_range</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> msdf_pixel_range <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-msdf-size"><inline classes="std std-ref">_font_set_msdf_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> msdf_size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-multichannel-signed-distance-field"><inline classes="std std-ref">_font_set_multichannel_signed_distance_field</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> msdf <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-name"><inline classes="std std-ref">_font_set_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-opentype-feature-overrides"><inline classes="std std-ref">_font_set_opentype_feature_overrides</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> overrides <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-oversampling"><inline classes="std std-ref">_font_set_oversampling</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> oversampling <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-scale"><inline classes="std std-ref">_font_set_scale</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> scale <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-script-support-override"><inline classes="std std-ref">_font_set_script_support_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> script, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> supported <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-spacing"><inline classes="std std-ref">_font_set_spacing</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> spacing, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-stretch"><inline classes="std std-ref">_font_set_stretch</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> stretch <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-style"><inline classes="std std-ref">_font_set_style</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>&gt; style <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-style-name"><inline classes="std std-ref">_font_set_style_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name_style <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-subpixel-positioning"><inline classes="std std-ref">_font_set_subpixel_positioning</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_textserver#enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> subpixel_positioning <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-texture-image"><inline classes="std std-ref">_font_set_texture_image</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> texture_index, <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> image <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-texture-offsets"><inline classes="std std-ref">_font_set_texture_offsets</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> texture_index, <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> offset <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-transform"><inline classes="std std-ref">_font_set_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-underline-position"><inline classes="std std-ref">_font_set_underline_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> underline_position <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-underline-thickness"><inline classes="std std-ref">_font_set_underline_thickness</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> underline_thickness <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-variation-coordinates"><inline classes="std std-ref">_font_set_variation_coordinates</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> variation_coordinates <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-set-weight"><inline classes="std std-ref">_font_set_weight</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> weight <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-supported-feature-list"><inline classes="std std-ref">_font_supported_feature_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-font-supported-variation-list"><inline classes="std std-ref">_font_supported_variation_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-format-number"><inline classes="std std-ref">_format_number</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-free-rid"><inline classes="std std-ref">_free_rid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-get-features"><inline classes="std std-ref">_get_features</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-get-hex-code-box-size"><inline classes="std std-ref">_get_hex_code_box_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-get-name"><inline classes="std std-ref">_get_name</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-get-support-data-filename"><inline classes="std std-ref">_get_support_data_filename</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-get-support-data-info"><inline classes="std std-ref">_get_support_data_info</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-has"><inline classes="std std-ref">_has</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-has-feature"><inline classes="std std-ref">_has_feature</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_textserver#enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> feature <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-is-confusable"><inline classes="std std-ref">_is_confusable</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> dict <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-is-locale-right-to-left"><inline classes="std std-ref">_is_locale_right_to_left</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> locale <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-is-valid-identifier"><inline classes="std std-ref">_is_valid_identifier</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-load-support-data"><inline classes="std std-ref">_load_support_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> filename <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-name-to-tag"><inline classes="std std-ref">_name_to_tag</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-parse-number"><inline classes="std std-ref">_parse_number</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-parse-structured-text"><inline classes="std std-ref">_parse_structured_text</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> parser_type, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> args, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-percent-sign"><inline classes="std std-ref">_percent_sign</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-save-support-data"><inline classes="std std-ref">_save_support_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> filename <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-get-span-count"><inline classes="std std-ref">_shaped_get_span_count</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-get-span-meta"><inline classes="std std-ref">_shaped_get_span_meta</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-set-span-update-font"><inline classes="std std-ref">_shaped_set_span_update_font</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> fonts, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> opentype_features <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-add-object"><inline classes="std std-ref">_shaped_text_add_object</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> key, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> size, <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> inline_align, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> length, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> baseline <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-add-string"><inline classes="std std-ref">_shaped_text_add_string</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> fonts, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> opentype_features, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> meta <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-clear"><inline classes="std std-ref">_shaped_text_clear</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-closest-character-pos"><inline classes="std std-ref">_shaped_text_closest_character_pos</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-draw"><inline classes="std std-ref">_shaped_text_draw</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> clip_l, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> clip_r, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-draw-outline"><inline classes="std std-ref">_shaped_text_draw_outline</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> clip_l, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> clip_r, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> outline_size, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-fit-to-width"><inline classes="std std-ref">_shaped_text_fit_to_width</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-ascent"><inline classes="std std-ref">_shaped_text_get_ascent</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-carets"><inline classes="std std-ref">_shaped_text_get_carets</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> position, CaretInfo* caret <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-character-breaks"><inline classes="std std-ref">_shaped_text_get_character_breaks</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-custom-punctuation"><inline classes="std std-ref">_shaped_text_get_custom_punctuation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-descent"><inline classes="std std-ref">_shaped_text_get_descent</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-direction"><inline classes="std std-ref">_shaped_text_get_direction</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-dominant-direction-in-range"><inline classes="std std-ref">_shaped_text_get_dominant_direction_in_range</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> start, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> end <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-ellipsis-glyph-count"><inline classes="std std-ref">_shaped_text_get_ellipsis_glyph_count</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>const Glyph*</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-ellipsis-glyphs"><inline classes="std std-ref">_shaped_text_get_ellipsis_glyphs</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-ellipsis-pos"><inline classes="std std-ref">_shaped_text_get_ellipsis_pos</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-glyph-count"><inline classes="std std-ref">_shaped_text_get_glyph_count</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>const Glyph*</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-glyphs"><inline classes="std std-ref">_shaped_text_get_glyphs</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-grapheme-bounds"><inline classes="std std-ref">_shaped_text_get_grapheme_bounds</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-inferred-direction"><inline classes="std std-ref">_shaped_text_get_inferred_direction</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-line-breaks"><inline classes="std std-ref">_shaped_text_get_line_breaks</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> start, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>&gt; break_flags <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-line-breaks-adv"><inline classes="std std-ref">_shaped_text_get_line_breaks_adv</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> width, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> start, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> once, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>&gt; break_flags <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-object-rect"><inline classes="std std-ref">_shaped_text_get_object_rect</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> key <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-objects"><inline classes="std std-ref">_shaped_text_get_objects</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-orientation"><inline classes="std std-ref">_shaped_text_get_orientation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-parent"><inline classes="std std-ref">_shaped_text_get_parent</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-preserve-control"><inline classes="std std-ref">_shaped_text_get_preserve_control</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-preserve-invalid"><inline classes="std std-ref">_shaped_text_get_preserve_invalid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-range"><inline classes="std std-ref">_shaped_text_get_range</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-selection"><inline classes="std std-ref">_shaped_text_get_selection</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> start, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> end <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-size"><inline classes="std std-ref">_shaped_text_get_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-spacing"><inline classes="std std-ref">_shaped_text_get_spacing</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> spacing <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-trim-pos"><inline classes="std std-ref">_shaped_text_get_trim_pos</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-underline-position"><inline classes="std std-ref">_shaped_text_get_underline_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-underline-thickness"><inline classes="std std-ref">_shaped_text_get_underline_thickness</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-width"><inline classes="std std-ref">_shaped_text_get_width</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-get-word-breaks"><inline classes="std std-ref">_shaped_text_get_word_breaks</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>&gt; grapheme_flags <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-hit-test-grapheme"><inline classes="std std-ref">_shaped_text_hit_test_grapheme</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> coord <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-hit-test-position"><inline classes="std std-ref">_shaped_text_hit_test_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> coord <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-is-ready"><inline classes="std std-ref">_shaped_text_is_ready</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-next-character-pos"><inline classes="std std-ref">_shaped_text_next_character_pos</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-next-grapheme-pos"><inline classes="std std-ref">_shaped_text_next_grapheme_pos</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-overrun-trim-to-width"><inline classes="std std-ref">_shaped_text_overrun_trim_to_width</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-textoverrunflag"><inline classes="std std-ref">TextOverrunFlag</inline></reference>&gt; trim_flags <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-prev-character-pos"><inline classes="std std-ref">_shaped_text_prev_character_pos</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-prev-grapheme-pos"><inline classes="std std-ref">_shaped_text_prev_grapheme_pos</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-resize-object"><inline classes="std std-ref">_shaped_text_resize_object</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> key, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> size, <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> inline_align, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> baseline <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-bidi-override"><inline classes="std std-ref">_shaped_text_set_bidi_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> override <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-custom-punctuation"><inline classes="std std-ref">_shaped_text_set_custom_punctuation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> punct <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-direction"><inline classes="std std-ref">_shaped_text_set_direction</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-orientation"><inline classes="std std-ref">_shaped_text_set_orientation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-preserve-control"><inline classes="std std-ref">_shaped_text_set_preserve_control</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-preserve-invalid"><inline classes="std std-ref">_shaped_text_set_preserve_invalid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-set-spacing"><inline classes="std std-ref">_shaped_text_set_spacing</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> spacing, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-shape"><inline classes="std std-ref">_shaped_text_shape</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>const Glyph*</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-sort-logical"><inline classes="std std-ref">_shaped_text_sort_logical</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-substr"><inline classes="std std-ref">_shaped_text_substr</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> start, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> length <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-tab-align"><inline classes="std std-ref">_shaped_text_tab_align</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> tab_stops <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-update-breaks"><inline classes="std std-ref">_shaped_text_update_breaks</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-shaped-text-update-justification-ops"><inline classes="std std-ref">_shaped_text_update_justification_ops</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-spoof-check"><inline classes="std std-ref">_spoof_check</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-string-get-character-breaks"><inline classes="std std-ref">_string_get_character_breaks</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-string-get-word-breaks"><inline classes="std std-ref">_string_get_word_breaks</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> chars_per_line <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-string-to-lower"><inline classes="std std-ref">_string_to_lower</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-string-to-upper"><inline classes="std std-ref">_string_to_upper</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-strip-diacritics"><inline classes="std std-ref">_strip_diacritics</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textserverextension-private-method-tag-to-name"><inline classes="std std-ref">_tag_to_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> tag <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-textserverextension-private-method-cleanup"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-cleanup" names="class_textserverextension_private_method__cleanup">void <strong>_cleanup</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-create-font"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-create-font" names="class_textserverextension_private_method__create_font"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_create_font</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-create-font-linked-variation"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-create-font-linked-variation" names="class_textserverextension_private_method__create_font_linked_variation"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_create_font_linked_variation</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-create-shaped-text"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-create-shaped-text" names="class_textserverextension_private_method__create_shaped_text"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_create_shaped_text</strong> <strong>(</strong> <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-draw-hex-code-box"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-draw-hex-code-box" names="class_textserverextension_private_method__draw_hex_code_box">void <strong>_draw_hex_code_box</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-clear-glyphs"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-clear-glyphs" names="class_textserverextension_private_method__font_clear_glyphs">void <strong>_font_clear_glyphs</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-clear-kerning-map"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-clear-kerning-map" names="class_textserverextension_private_method__font_clear_kerning_map">void <strong>_font_clear_kerning_map</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-clear-size-cache"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-clear-size-cache" names="class_textserverextension_private_method__font_clear_size_cache">void <strong>_font_clear_size_cache</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-clear-textures"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-clear-textures" names="class_textserverextension_private_method__font_clear_textures">void <strong>_font_clear_textures</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-draw-glyph"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-draw-glyph" names="class_textserverextension_private_method__font_draw_glyph">void <strong>_font_draw_glyph</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-draw-glyph-outline"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-draw-glyph-outline" names="class_textserverextension_private_method__font_draw_glyph_outline">void <strong>_font_draw_glyph_outline</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> outline_size, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-antialiasing"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-antialiasing" names="class_textserverextension_private_method__font_get_antialiasing"><reference internal="True" refuri="class_textserver#enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference> <strong>_font_get_antialiasing</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-ascent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-ascent" names="class_textserverextension_private_method__font_get_ascent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_ascent</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-char-from-glyph-index"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-char-from-glyph-index" names="class_textserverextension_private_method__font_get_char_from_glyph_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_char_from_glyph_index</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-descent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-descent" names="class_textserverextension_private_method__font_get_descent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_descent</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-embolden"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-embolden" names="class_textserverextension_private_method__font_get_embolden"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_embolden</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-face-count"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-face-count" names="class_textserverextension_private_method__font_get_face_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_face_count</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-face-index"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-face-index" names="class_textserverextension_private_method__font_get_face_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_face_index</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-fixed-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-fixed-size" names="class_textserverextension_private_method__font_get_fixed_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_fixed_size</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-fixed-size-scale-mode"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-fixed-size-scale-mode" names="class_textserverextension_private_method__font_get_fixed_size_scale_mode"><reference internal="True" refuri="class_textserver#enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference> <strong>_font_get_fixed_size_scale_mode</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-generate-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-generate-mipmaps" names="class_textserverextension_private_method__font_get_generate_mipmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_get_generate_mipmaps</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-global-oversampling"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-global-oversampling" names="class_textserverextension_private_method__font_get_global_oversampling"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_global_oversampling</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-advance"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-advance" names="class_textserverextension_private_method__font_get_glyph_advance"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_font_get_glyph_advance</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-contours"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-contours" names="class_textserverextension_private_method__font_get_glyph_contours"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_font_get_glyph_contours</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-index"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-index" names="class_textserverextension_private_method__font_get_glyph_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_glyph_index</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> char, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> variation_selector <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-list"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-list" names="class_textserverextension_private_method__font_get_glyph_list"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_font_get_glyph_list</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-offset"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-offset" names="class_textserverextension_private_method__font_get_glyph_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_font_get_glyph_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-size" names="class_textserverextension_private_method__font_get_glyph_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_font_get_glyph_size</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-texture-idx"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-texture-idx" names="class_textserverextension_private_method__font_get_glyph_texture_idx"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_glyph_texture_idx</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-texture-rid"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-texture-rid" names="class_textserverextension_private_method__font_get_glyph_texture_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_font_get_glyph_texture_rid</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-texture-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-texture-size" names="class_textserverextension_private_method__font_get_glyph_texture_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_font_get_glyph_texture_size</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-glyph-uv-rect"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-glyph-uv-rect" names="class_textserverextension_private_method__font_get_glyph_uv_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>_font_get_glyph_uv_rect</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-hinting"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-hinting" names="class_textserverextension_private_method__font_get_hinting"><reference internal="True" refuri="class_textserver#enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference> <strong>_font_get_hinting</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-kerning"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-kerning" names="class_textserverextension_private_method__font_get_kerning"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_font_get_kerning</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> glyph_pair <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-kerning-list"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-kerning-list" names="class_textserverextension_private_method__font_get_kerning_list"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i[]</inline></reference> <strong>_font_get_kerning_list</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-language-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-language-support-override" names="class_textserverextension_private_method__font_get_language_support_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_get_language_support_override</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-language-support-overrides"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-language-support-overrides" names="class_textserverextension_private_method__font_get_language_support_overrides"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_font_get_language_support_overrides</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-msdf-pixel-range"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-msdf-pixel-range" names="class_textserverextension_private_method__font_get_msdf_pixel_range"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_msdf_pixel_range</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-msdf-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-msdf-size" names="class_textserverextension_private_method__font_get_msdf_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_msdf_size</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-name"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-name" names="class_textserverextension_private_method__font_get_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_font_get_name</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-opentype-feature-overrides"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-opentype-feature-overrides" names="class_textserverextension_private_method__font_get_opentype_feature_overrides"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_font_get_opentype_feature_overrides</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-ot-name-strings"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-ot-name-strings" names="class_textserverextension_private_method__font_get_ot_name_strings"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_font_get_ot_name_strings</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-oversampling"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-oversampling" names="class_textserverextension_private_method__font_get_oversampling"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_oversampling</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-scale"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-scale" names="class_textserverextension_private_method__font_get_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_scale</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-script-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-script-support-override" names="class_textserverextension_private_method__font_get_script_support_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_get_script_support_override</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> script <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-script-support-overrides"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-script-support-overrides" names="class_textserverextension_private_method__font_get_script_support_overrides"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_font_get_script_support_overrides</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-size-cache-list"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-size-cache-list" names="class_textserverextension_private_method__font_get_size_cache_list"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i[]</inline></reference> <strong>_font_get_size_cache_list</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-spacing"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-spacing" names="class_textserverextension_private_method__font_get_spacing"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_spacing</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> spacing <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-stretch"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-stretch" names="class_textserverextension_private_method__font_get_stretch"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_stretch</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-style"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-style" names="class_textserverextension_private_method__font_get_style"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>&gt; <strong>_font_get_style</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-style-name"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-style-name" names="class_textserverextension_private_method__font_get_style_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_font_get_style_name</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-subpixel-positioning"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-subpixel-positioning" names="class_textserverextension_private_method__font_get_subpixel_positioning"><reference internal="True" refuri="class_textserver#enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> <strong>_font_get_subpixel_positioning</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-supported-chars"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-supported-chars" names="class_textserverextension_private_method__font_get_supported_chars"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_font_get_supported_chars</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-texture-count"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-texture-count" names="class_textserverextension_private_method__font_get_texture_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_texture_count</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-texture-image"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-texture-image" names="class_textserverextension_private_method__font_get_texture_image"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>_font_get_texture_image</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> texture_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-texture-offsets"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-texture-offsets" names="class_textserverextension_private_method__font_get_texture_offsets"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_font_get_texture_offsets</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> texture_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-transform"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-transform" names="class_textserverextension_private_method__font_get_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>_font_get_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-underline-position"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-underline-position" names="class_textserverextension_private_method__font_get_underline_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_underline_position</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-underline-thickness" names="class_textserverextension_private_method__font_get_underline_thickness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_font_get_underline_thickness</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-variation-coordinates"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-variation-coordinates" names="class_textserverextension_private_method__font_get_variation_coordinates"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_font_get_variation_coordinates</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-get-weight"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-get-weight" names="class_textserverextension_private_method__font_get_weight"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_font_get_weight</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-has-char"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-has-char" names="class_textserverextension_private_method__font_has_char"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_has_char</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> char <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-is-allow-system-fallback"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-is-allow-system-fallback" names="class_textserverextension_private_method__font_is_allow_system_fallback"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_is_allow_system_fallback</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-is-force-autohinter"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-is-force-autohinter" names="class_textserverextension_private_method__font_is_force_autohinter"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_is_force_autohinter</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-is-language-supported"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-is-language-supported" names="class_textserverextension_private_method__font_is_language_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_is_language_supported</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-is-multichannel-signed-distance-field"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-is-multichannel-signed-distance-field" names="class_textserverextension_private_method__font_is_multichannel_signed_distance_field"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_is_multichannel_signed_distance_field</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-is-script-supported"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-is-script-supported" names="class_textserverextension_private_method__font_is_script_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_font_is_script_supported</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> script <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-remove-glyph"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-remove-glyph" names="class_textserverextension_private_method__font_remove_glyph">void <strong>_font_remove_glyph</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-remove-kerning"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-remove-kerning" names="class_textserverextension_private_method__font_remove_kerning">void <strong>_font_remove_kerning</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> glyph_pair <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-remove-language-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-remove-language-support-override" names="class_textserverextension_private_method__font_remove_language_support_override">void <strong>_font_remove_language_support_override</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-remove-script-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-remove-script-support-override" names="class_textserverextension_private_method__font_remove_script_support_override">void <strong>_font_remove_script_support_override</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> script <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-remove-size-cache"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-remove-size-cache" names="class_textserverextension_private_method__font_remove_size_cache">void <strong>_font_remove_size_cache</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-remove-texture"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-remove-texture" names="class_textserverextension_private_method__font_remove_texture">void <strong>_font_remove_texture</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> texture_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-render-glyph"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-render-glyph" names="class_textserverextension_private_method__font_render_glyph">void <strong>_font_render_glyph</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-render-range"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-render-range" names="class_textserverextension_private_method__font_render_range">void <strong>_font_render_range</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> start, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> end <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-allow-system-fallback"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-allow-system-fallback" names="class_textserverextension_private_method__font_set_allow_system_fallback">void <strong>_font_set_allow_system_fallback</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> allow_system_fallback <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-antialiasing"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-antialiasing" names="class_textserverextension_private_method__font_set_antialiasing">void <strong>_font_set_antialiasing</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_textserver#enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference> antialiasing <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-ascent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-ascent" names="class_textserverextension_private_method__font_set_ascent">void <strong>_font_set_ascent</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> ascent <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-data"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-data" names="class_textserverextension_private_method__font_set_data">void <strong>_font_set_data</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-data-ptr"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-data-ptr" names="class_textserverextension_private_method__font_set_data_ptr">void <strong>_font_set_data_ptr</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, const uint8_t* data_ptr, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> data_size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-descent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-descent" names="class_textserverextension_private_method__font_set_descent">void <strong>_font_set_descent</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> descent <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-embolden"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-embolden" names="class_textserverextension_private_method__font_set_embolden">void <strong>_font_set_embolden</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> strength <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-face-index"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-face-index" names="class_textserverextension_private_method__font_set_face_index">void <strong>_font_set_face_index</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> face_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-fixed-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-fixed-size" names="class_textserverextension_private_method__font_set_fixed_size">void <strong>_font_set_fixed_size</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> fixed_size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-fixed-size-scale-mode"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-fixed-size-scale-mode" names="class_textserverextension_private_method__font_set_fixed_size_scale_mode">void <strong>_font_set_fixed_size_scale_mode</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_textserver#enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference> fixed_size_scale_mode <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-force-autohinter"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-force-autohinter" names="class_textserverextension_private_method__font_set_force_autohinter">void <strong>_font_set_force_autohinter</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> force_autohinter <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-generate-mipmaps"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-generate-mipmaps" names="class_textserverextension_private_method__font_set_generate_mipmaps">void <strong>_font_set_generate_mipmaps</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> generate_mipmaps <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-global-oversampling"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-global-oversampling" names="class_textserverextension_private_method__font_set_global_oversampling">void <strong>_font_set_global_oversampling</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> oversampling <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-glyph-advance"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-glyph-advance" names="class_textserverextension_private_method__font_set_glyph_advance">void <strong>_font_set_glyph_advance</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> advance <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-glyph-offset"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-glyph-offset" names="class_textserverextension_private_method__font_set_glyph_offset">void <strong>_font_set_glyph_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> offset <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-glyph-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-glyph-size" names="class_textserverextension_private_method__font_set_glyph_size">void <strong>_font_set_glyph_size</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> gl_size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-glyph-texture-idx"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-glyph-texture-idx" names="class_textserverextension_private_method__font_set_glyph_texture_idx">void <strong>_font_set_glyph_texture_idx</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> texture_idx <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-glyph-uv-rect"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-glyph-uv-rect" names="class_textserverextension_private_method__font_set_glyph_uv_rect">void <strong>_font_set_glyph_uv_rect</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> glyph, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> uv_rect <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-hinting"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-hinting" names="class_textserverextension_private_method__font_set_hinting">void <strong>_font_set_hinting</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_textserver#enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference> hinting <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-kerning"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-kerning" names="class_textserverextension_private_method__font_set_kerning">void <strong>_font_set_kerning</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> glyph_pair, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> kerning <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-language-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-language-support-override" names="class_textserverextension_private_method__font_set_language_support_override">void <strong>_font_set_language_support_override</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> supported <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-msdf-pixel-range"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-msdf-pixel-range" names="class_textserverextension_private_method__font_set_msdf_pixel_range">void <strong>_font_set_msdf_pixel_range</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> msdf_pixel_range <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-msdf-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-msdf-size" names="class_textserverextension_private_method__font_set_msdf_size">void <strong>_font_set_msdf_size</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> msdf_size <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-multichannel-signed-distance-field"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-multichannel-signed-distance-field" names="class_textserverextension_private_method__font_set_multichannel_signed_distance_field">void <strong>_font_set_multichannel_signed_distance_field</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> msdf <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-name"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-name" names="class_textserverextension_private_method__font_set_name">void <strong>_font_set_name</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-opentype-feature-overrides"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-opentype-feature-overrides" names="class_textserverextension_private_method__font_set_opentype_feature_overrides">void <strong>_font_set_opentype_feature_overrides</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> overrides <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-oversampling"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-oversampling" names="class_textserverextension_private_method__font_set_oversampling">void <strong>_font_set_oversampling</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> oversampling <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-scale"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-scale" names="class_textserverextension_private_method__font_set_scale">void <strong>_font_set_scale</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> scale <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-script-support-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-script-support-override" names="class_textserverextension_private_method__font_set_script_support_override">void <strong>_font_set_script_support_override</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> script, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> supported <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-spacing"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-spacing" names="class_textserverextension_private_method__font_set_spacing">void <strong>_font_set_spacing</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> spacing, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-stretch"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-stretch" names="class_textserverextension_private_method__font_set_stretch">void <strong>_font_set_stretch</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> stretch <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-style"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-style" names="class_textserverextension_private_method__font_set_style">void <strong>_font_set_style</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>&gt; style <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-style-name"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-style-name" names="class_textserverextension_private_method__font_set_style_name">void <strong>_font_set_style_name</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name_style <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-subpixel-positioning"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-subpixel-positioning" names="class_textserverextension_private_method__font_set_subpixel_positioning">void <strong>_font_set_subpixel_positioning</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_textserver#enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> subpixel_positioning <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-texture-image"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-texture-image" names="class_textserverextension_private_method__font_set_texture_image">void <strong>_font_set_texture_image</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> texture_index, <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> image <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-texture-offsets"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-texture-offsets" names="class_textserverextension_private_method__font_set_texture_offsets">void <strong>_font_set_texture_offsets</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> texture_index, <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> offset <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-transform"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-transform" names="class_textserverextension_private_method__font_set_transform">void <strong>_font_set_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-underline-position"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-underline-position" names="class_textserverextension_private_method__font_set_underline_position">void <strong>_font_set_underline_position</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> underline_position <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-underline-thickness" names="class_textserverextension_private_method__font_set_underline_thickness">void <strong>_font_set_underline_thickness</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> underline_thickness <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-variation-coordinates"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-variation-coordinates" names="class_textserverextension_private_method__font_set_variation_coordinates">void <strong>_font_set_variation_coordinates</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> variation_coordinates <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-set-weight"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-set-weight" names="class_textserverextension_private_method__font_set_weight">void <strong>_font_set_weight</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> weight <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-supported-feature-list"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-supported-feature-list" names="class_textserverextension_private_method__font_supported_feature_list"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_font_supported_feature_list</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-font-supported-variation-list"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-font-supported-variation-list" names="class_textserverextension_private_method__font_supported_variation_list"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_font_supported_variation_list</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> font_rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-format-number"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-format-number" names="class_textserverextension_private_method__format_number"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_format_number</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-free-rid"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-free-rid" names="class_textserverextension_private_method__free_rid">void <strong>_free_rid</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-get-features"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-get-features" names="class_textserverextension_private_method__get_features"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_features</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-get-hex-code-box-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-get-hex-code-box-size" names="class_textserverextension_private_method__get_hex_code_box_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_get_hex_code_box_size</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-get-name"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-get-name" names="class_textserverextension_private_method__get_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_name</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-get-support-data-filename"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-get-support-data-filename" names="class_textserverextension_private_method__get_support_data_filename"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_support_data_filename</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-get-support-data-info"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-get-support-data-info" names="class_textserverextension_private_method__get_support_data_info"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_support_data_info</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-has"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-has" names="class_textserverextension_private_method__has"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> rid <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-has-feature"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-has-feature" names="class_textserverextension_private_method__has_feature"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_feature</strong> <strong>(</strong> <reference internal="True" refuri="class_textserver#enum-textserver-feature"><inline classes="std std-ref">Feature</inline></reference> feature <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-is-confusable"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-is-confusable" names="class_textserverextension_private_method__is_confusable"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_is_confusable</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> dict <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-is-locale-right-to-left"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-is-locale-right-to-left" names="class_textserverextension_private_method__is_locale_right_to_left"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_locale_right_to_left</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> locale <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-is-valid-identifier"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-is-valid-identifier" names="class_textserverextension_private_method__is_valid_identifier"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_valid_identifier</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-load-support-data"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-load-support-data" names="class_textserverextension_private_method__load_support_data"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_load_support_data</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> filename <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-name-to-tag"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-name-to-tag" names="class_textserverextension_private_method__name_to_tag"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_name_to_tag</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-parse-number"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-parse-number" names="class_textserverextension_private_method__parse_number"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_parse_number</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-parse-structured-text"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-parse-structured-text" names="class_textserverextension_private_method__parse_structured_text"><reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i[]</inline></reference> <strong>_parse_structured_text</strong> <strong>(</strong> <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> parser_type, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> args, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-percent-sign"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-percent-sign" names="class_textserverextension_private_method__percent_sign"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_percent_sign</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-save-support-data"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-save-support-data" names="class_textserverextension_private_method__save_support_data"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_save_support_data</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> filename <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-get-span-count"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-get-span-count" names="class_textserverextension_private_method__shaped_get_span_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_get_span_count</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-get-span-meta"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-get-span-meta" names="class_textserverextension_private_method__shaped_get_span_meta"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_shaped_get_span_meta</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-set-span-update-font"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-set-span-update-font" names="class_textserverextension_private_method__shaped_set_span_update_font">void <strong>_shaped_set_span_update_font</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> fonts, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> opentype_features <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-add-object"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-add-object" names="class_textserverextension_private_method__shaped_text_add_object"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_add_object</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> key, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> size, <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> inline_align, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> length, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> baseline <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-add-string"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-add-string" names="class_textserverextension_private_method__shaped_text_add_string"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_add_string</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> fonts, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> opentype_features, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> meta <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-clear"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-clear" names="class_textserverextension_private_method__shaped_text_clear">void <strong>_shaped_text_clear</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-closest-character-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-closest-character-pos" names="class_textserverextension_private_method__shaped_text_closest_character_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_closest_character_pos</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-draw"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-draw" names="class_textserverextension_private_method__shaped_text_draw">void <strong>_shaped_text_draw</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> clip_l, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> clip_r, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-draw-outline"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-draw-outline" names="class_textserverextension_private_method__shaped_text_draw_outline">void <strong>_shaped_text_draw_outline</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> clip_l, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> clip_r, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> outline_size, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-fit-to-width"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-fit-to-width" names="class_textserverextension_private_method__shaped_text_fit_to_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_fit_to_width</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-ascent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-ascent" names="class_textserverextension_private_method__shaped_text_get_ascent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_get_ascent</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-carets"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-carets" names="class_textserverextension_private_method__shaped_text_get_carets">void <strong>_shaped_text_get_carets</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> position, CaretInfo* caret <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-character-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-character-breaks" names="class_textserverextension_private_method__shaped_text_get_character_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_shaped_text_get_character_breaks</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-custom-punctuation"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-custom-punctuation" names="class_textserverextension_private_method__shaped_text_get_custom_punctuation"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_shaped_text_get_custom_punctuation</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-descent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-descent" names="class_textserverextension_private_method__shaped_text_get_descent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_get_descent</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-direction"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-direction" names="class_textserverextension_private_method__shaped_text_get_direction"><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>_shaped_text_get_direction</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-dominant-direction-in-range"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-dominant-direction-in-range" names="class_textserverextension_private_method__shaped_text_get_dominant_direction_in_range"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_dominant_direction_in_range</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> start, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> end <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-ellipsis-glyph-count"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-ellipsis-glyph-count" names="class_textserverextension_private_method__shaped_text_get_ellipsis_glyph_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_ellipsis_glyph_count</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-ellipsis-glyphs"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-ellipsis-glyphs" names="class_textserverextension_private_method__shaped_text_get_ellipsis_glyphs">const Glyph* <strong>_shaped_text_get_ellipsis_glyphs</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-ellipsis-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-ellipsis-pos" names="class_textserverextension_private_method__shaped_text_get_ellipsis_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_ellipsis_pos</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-glyph-count"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-glyph-count" names="class_textserverextension_private_method__shaped_text_get_glyph_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_glyph_count</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-glyphs"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-glyphs" names="class_textserverextension_private_method__shaped_text_get_glyphs">const Glyph* <strong>_shaped_text_get_glyphs</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-grapheme-bounds"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-grapheme-bounds" names="class_textserverextension_private_method__shaped_text_get_grapheme_bounds"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_shaped_text_get_grapheme_bounds</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-inferred-direction"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-inferred-direction" names="class_textserverextension_private_method__shaped_text_get_inferred_direction"><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>_shaped_text_get_inferred_direction</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-line-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-line-breaks" names="class_textserverextension_private_method__shaped_text_get_line_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_shaped_text_get_line_breaks</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> start, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>&gt; break_flags <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-line-breaks-adv"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-line-breaks-adv" names="class_textserverextension_private_method__shaped_text_get_line_breaks_adv"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_shaped_text_get_line_breaks_adv</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> width, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> start, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> once, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>&gt; break_flags <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-object-rect"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-object-rect" names="class_textserverextension_private_method__shaped_text_get_object_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>_shaped_text_get_object_rect</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> key <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-objects"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-objects" names="class_textserverextension_private_method__shaped_text_get_objects"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>_shaped_text_get_objects</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-orientation"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-orientation" names="class_textserverextension_private_method__shaped_text_get_orientation"><reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> <strong>_shaped_text_get_orientation</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-parent"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-parent" names="class_textserverextension_private_method__shaped_text_get_parent"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_shaped_text_get_parent</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-preserve-control"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-preserve-control" names="class_textserverextension_private_method__shaped_text_get_preserve_control"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_get_preserve_control</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-preserve-invalid"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-preserve-invalid" names="class_textserverextension_private_method__shaped_text_get_preserve_invalid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_get_preserve_invalid</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-range"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-range" names="class_textserverextension_private_method__shaped_text_get_range"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>_shaped_text_get_range</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-selection"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-selection" names="class_textserverextension_private_method__shaped_text_get_selection"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>_shaped_text_get_selection</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> start, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> end <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-size"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-size" names="class_textserverextension_private_method__shaped_text_get_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_shaped_text_get_size</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-spacing"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-spacing" names="class_textserverextension_private_method__shaped_text_get_spacing"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_spacing</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> spacing <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-trim-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-trim-pos" names="class_textserverextension_private_method__shaped_text_get_trim_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_get_trim_pos</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-underline-position"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-underline-position" names="class_textserverextension_private_method__shaped_text_get_underline_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_get_underline_position</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-underline-thickness" names="class_textserverextension_private_method__shaped_text_get_underline_thickness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_get_underline_thickness</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-width"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-width" names="class_textserverextension_private_method__shaped_text_get_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_get_width</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-get-word-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-get-word-breaks" names="class_textserverextension_private_method__shaped_text_get_word_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_shaped_text_get_word_breaks</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-graphemeflag"><inline classes="std std-ref">GraphemeFlag</inline></reference>&gt; grapheme_flags <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-hit-test-grapheme"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-hit-test-grapheme" names="class_textserverextension_private_method__shaped_text_hit_test_grapheme"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_hit_test_grapheme</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> coord <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-hit-test-position"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-hit-test-position" names="class_textserverextension_private_method__shaped_text_hit_test_position"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_hit_test_position</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> coord <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-is-ready"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-is-ready" names="class_textserverextension_private_method__shaped_text_is_ready"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_is_ready</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-next-character-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-next-character-pos" names="class_textserverextension_private_method__shaped_text_next_character_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_next_character_pos</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-next-grapheme-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-next-grapheme-pos" names="class_textserverextension_private_method__shaped_text_next_grapheme_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_next_grapheme_pos</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-overrun-trim-to-width"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-overrun-trim-to-width" names="class_textserverextension_private_method__shaped_text_overrun_trim_to_width">void <strong>_shaped_text_overrun_trim_to_width</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-textoverrunflag"><inline classes="std std-ref">TextOverrunFlag</inline></reference>&gt; trim_flags <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-prev-character-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-prev-character-pos" names="class_textserverextension_private_method__shaped_text_prev_character_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_prev_character_pos</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-prev-grapheme-pos"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-prev-grapheme-pos" names="class_textserverextension_private_method__shaped_text_prev_grapheme_pos"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_shaped_text_prev_grapheme_pos</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> pos <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-resize-object"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-resize-object" names="class_textserverextension_private_method__shaped_text_resize_object"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_resize_object</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> key, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> size, <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> inline_align, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> baseline <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-bidi-override"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-bidi-override" names="class_textserverextension_private_method__shaped_text_set_bidi_override">void <strong>_shaped_text_set_bidi_override</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> override <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-custom-punctuation"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-custom-punctuation" names="class_textserverextension_private_method__shaped_text_set_custom_punctuation">void <strong>_shaped_text_set_custom_punctuation</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> punct <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-direction"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-direction" names="class_textserverextension_private_method__shaped_text_set_direction">void <strong>_shaped_text_set_direction</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-orientation"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-orientation" names="class_textserverextension_private_method__shaped_text_set_orientation">void <strong>_shaped_text_set_orientation</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-preserve-control"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-preserve-control" names="class_textserverextension_private_method__shaped_text_set_preserve_control">void <strong>_shaped_text_set_preserve_control</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-preserve-invalid"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-preserve-invalid" names="class_textserverextension_private_method__shaped_text_set_preserve_invalid">void <strong>_shaped_text_set_preserve_invalid</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-set-spacing"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-set-spacing" names="class_textserverextension_private_method__shaped_text_set_spacing">void <strong>_shaped_text_set_spacing</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> spacing, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-shape"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-shape" names="class_textserverextension_private_method__shaped_text_shape"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_shape</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-sort-logical"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-sort-logical" names="class_textserverextension_private_method__shaped_text_sort_logical">const Glyph* <strong>_shaped_text_sort_logical</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-substr"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-substr" names="class_textserverextension_private_method__shaped_text_substr"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_shaped_text_substr</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> start, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> length <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-tab-align"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-tab-align" names="class_textserverextension_private_method__shaped_text_tab_align"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_shaped_text_tab_align</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped, <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> tab_stops <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-update-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-update-breaks" names="class_textserverextension_private_method__shaped_text_update_breaks"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_update_breaks</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-shaped-text-update-justification-ops"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-shaped-text-update-justification-ops" names="class_textserverextension_private_method__shaped_text_update_justification_ops"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_shaped_text_update_justification_ops</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shaped <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-spoof-check"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-spoof-check" names="class_textserverextension_private_method__spoof_check"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_spoof_check</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-string-get-character-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-string-get-character-breaks" names="class_textserverextension_private_method__string_get_character_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_string_get_character_breaks</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-string-get-word-breaks"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-string-get-word-breaks" names="class_textserverextension_private_method__string_get_word_breaks"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_string_get_word_breaks</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> chars_per_line <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-string-to-lower"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-string-to-lower" names="class_textserverextension_private_method__string_to_lower"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_string_to_lower</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-string-to-upper"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-string-to-upper" names="class_textserverextension_private_method__string_to_upper"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_string_to_upper</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-strip-diacritics"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-strip-diacritics" names="class_textserverextension_private_method__strip_diacritics"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_strip_diacritics</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textserverextension-private-method-tag-to-name"></target>
            <paragraph classes="classref-method" ids="class-textserverextension-private-method-tag-to-name" names="class_textserverextension_private_method__tag_to_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_tag_to_name</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> tag <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
