<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_inputeventmidi.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/InputEventMIDI.xml.</comment>
    <target refid="class-inputeventmidi"></target>
    <section ids="inputeventmidi class-inputeventmidi" names="inputeventmidi class_inputeventmidi">
        <title>InputEventMIDI</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>代表来自 MIDI 设备的 MIDI 消息，例如来自音乐键盘。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>InputEventMIDI 存储有关来自 <reference name="MIDI" refuri="https://en.wikipedia.org/wiki/MIDI">MIDI</reference>（乐器数字接口）设备的消息的信息。这些设备可能包括音乐键盘、合成器和鼓机。</paragraph>
            <paragraph>MIDI 消息可以通过 5 针 MIDI 连接器或 USB 接收。如果你的设备支持这两种方式，请务必检查设备中的设置以查看它正在使用哪种输出。</paragraph>
            <paragraph>默认情况下，Godot 不检测 MIDI 设备。需要首先调用 <reference internal="True" refuri="class_os#class-os-method-open-midi-inputs"><inline classes="std std-ref">OS.open_midi_inputs</inline></reference>。可以使用 <reference internal="True" refuri="class_os#class-os-method-get-connected-midi-inputs"><inline classes="std std-ref">OS.get_connected_midi_inputs</inline></reference> 检查检测到哪些设备，并使用 <reference internal="True" refuri="class_os#class-os-method-close-midi-inputs"><inline classes="std std-ref">OS.close_midi_inputs</inline></reference> 关闭连接。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    OS.open_midi_inputs()
    print(OS.get_connected_midi_inputs())

func _input(input_event):
    if input_event is InputEventMIDI:
        _print_midi_info(input_event)

func _print_midi_info(midi_event):
    print(midi_event)
    print("Channel ", midi_event.channel)
    print("Message ", midi_event.message)
    print("Pitch ", midi_event.pitch)
    print("Velocity ", midi_event.velocity)
    print("Instrument ", midi_event.instrument)
    print("Pressure ", midi_event.pressure)
    print("Controller number: ", midi_event.controller_number)
    print("Controller value: ", midi_event.controller_value)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    OS.OpenMidiInputs();
    GD.Print(OS.GetConnectedMidiInputs());
}

public override void _Input(InputEvent inputEvent)
{
    if (inputEvent is InputEventMidi midiEvent)
    {
        PrintMIDIInfo(midiEvent);
    }
}

private void PrintMIDIInfo(InputEventMidi midiEvent)
{
    GD.Print(midiEvent);
    GD.Print($"Channel {midiEvent.Channel}");
    GD.Print($"Message {midiEvent.Message}");
    GD.Print($"Pitch {midiEvent.Pitch}");
    GD.Print($"Velocity {midiEvent.Velocity}");
    GD.Print($"Instrument {midiEvent.Instrument}");
    GD.Print($"Pressure {midiEvent.Pressure}");
    GD.Print($"Controller number: {midiEvent.ControllerNumber}");
    GD.Print($"Controller value: {midiEvent.ControllerValue}");
}</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>Godot 不支持 MIDI 输出，因此无法从 Godot 发出 MIDI 消息。仅支持 MIDI 输入。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="MIDI 消息状态字节列表" refuri="https://www.midi.org/specifications-old/item/table-2-expanded-messages-list-status-bytes">MIDI 消息状态字节列表</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="维基百科通用 MIDI 乐器列表" refuri="https://en.wikipedia.org/wiki/General_MIDI#Program_change_events">维基百科通用 MIDI 乐器列表</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="维基百科钢琴琴键频率列表" refuri="https://en.wikipedia.org/wiki/Piano_key_frequencies#List">维基百科钢琴琴键频率列表</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="75"></colspec>
                    <colspec colwidth="7"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventmidi-property-channel"><inline classes="std std-ref">channel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventmidi-property-controller-number"><inline classes="std std-ref">controller_number</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventmidi-property-controller-value"><inline classes="std std-ref">controller_value</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventmidi-property-instrument"><inline classes="std std-ref">instrument</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventmidi-property-message"><inline classes="std std-ref">message</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventmidi-property-pitch"><inline classes="std std-ref">pitch</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventmidi-property-pressure"><inline classes="std std-ref">pressure</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventmidi-property-velocity"><inline classes="std std-ref">velocity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-inputeventmidi-property-channel"></target>
            <paragraph classes="classref-property" ids="class-inputeventmidi-property-channel" names="class_inputeventmidi_property_channel"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>channel</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventmidi-property-channel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_channel</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_channel</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该消息的 MIDI 通道，范围从 <literal>0</literal> 到 <literal>15</literal>。MIDI 通道 <literal>9</literal> 是为打击乐器保留的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventmidi-property-controller-number"></target>
            <paragraph classes="classref-property" ids="class-inputeventmidi-property-controller-number" names="class_inputeventmidi_property_controller_number"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>controller_number</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventmidi-property-controller-number"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_controller_number</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_controller_number</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果 <reference internal="True" refid="class-inputeventmidi-property-message"><inline classes="std std-ref">message</inline></reference> 为 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-midi-message-control-change"><inline classes="std std-ref">@GlobalScope.MIDI_MESSAGE_CONTROL_CHANGE</inline></reference>，控制器的唯一编号；否则为 <literal>0</literal>。该值可用于识别用于音量、平衡和平移的滑块，以及 MIDI 设备上的开关和踏板。有关小列表，请参阅<reference name="通用 MIDI 规范" refuri="https://en.wikipedia.org/wiki/General_MIDI#Controller_events">通用 MIDI 规范</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventmidi-property-controller-value"></target>
            <paragraph classes="classref-property" ids="class-inputeventmidi-property-controller-value" names="class_inputeventmidi_property_controller_value"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>controller_value</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventmidi-property-controller-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_controller_value</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_controller_value</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>应用于控制器的值。如果 <reference internal="True" refid="class-inputeventmidi-property-message"><inline classes="std std-ref">message</inline></reference> 为 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-midi-message-control-change"><inline classes="std std-ref">@GlobalScope.MIDI_MESSAGE_CONTROL_CHANGE</inline></reference>，则该值介于 <literal>0</literal> 到 <literal>127</literal> 之间，否则为 <literal>0</literal>。另见 <reference internal="True" refid="class-inputeventmidi-property-controller-value"><inline classes="std std-ref">controller_value</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventmidi-property-instrument"></target>
            <paragraph classes="classref-property" ids="class-inputeventmidi-property-instrument" names="class_inputeventmidi_property_instrument"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>instrument</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventmidi-property-instrument"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_instrument</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_instrument</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 MIDI 消息上使用的乐器（也称为 <emphasis>程序</emphasis> 或 <emphasis>预设</emphasis>）。该值介于 <literal>0</literal> 到 <literal>127</literal> 之间。</paragraph>
            <paragraph>要了解每个值的含义，请参阅<reference name="通用 MIDI 乐器列表" refuri="https://en.wikipedia.org/wiki/General_MIDI#Program_change_events">通用 MIDI 乐器列表</reference>。请记住，该列表相差 1，因为它不是从 0 开始的。值 <literal>0</literal> 对应于原声三角钢琴。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventmidi-property-message"></target>
            <paragraph classes="classref-property" ids="class-inputeventmidi-property-message" names="class_inputeventmidi_property_message"><reference internal="True" refuri="class_@globalscope#enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>message</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventmidi-property-message"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_message</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>get_message</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>表示 MIDI 消息的类型（请参阅 <reference internal="True" refuri="class_@globalscope#enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> 枚举）。</paragraph>
            <paragraph>有关更多信息，请参阅 <reference name="MIDI 消息状态字节列表图表" refuri="https://www.midi.org/specifications-old/item/table-2-expanded-messages-list-status-bytes">MIDI 消息状态字节列表图表</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventmidi-property-pitch"></target>
            <paragraph classes="classref-property" ids="class-inputeventmidi-property-pitch" names="class_inputeventmidi_property_pitch"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>pitch</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventmidi-property-pitch"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pitch</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_pitch</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 MIDI 消息的音高索引号。该值的范围从 <literal>0</literal> 到 <literal>127</literal>。</paragraph>
            <paragraph>在钢琴上，<strong>中音 C</strong>为 <literal>60</literal>，后跟 <strong>C 升音</strong>（<literal>61</literal>），然后是 <strong>D</strong>（<literal>62</literal>），等等。每个八度音阶以 12 为偏移量进行分割。请参阅 <reference name="钢琴键频率图表" refuri="https://en.wikipedia.org/wiki/Piano_key_frequencies">钢琴键频率图表</reference> 完整列表的“MIDI 音符编号”列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventmidi-property-pressure"></target>
            <paragraph classes="classref-property" ids="class-inputeventmidi-property-pressure" names="class_inputeventmidi_property_pressure"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>pressure</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventmidi-property-pressure"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pressure</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_pressure</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>按键的力度。该值的范围从 <literal>0</literal> 到 <literal>127</literal>。</paragraph>
            <paragraph><strong>注意：</strong>对于许多设备，该值始终为 <literal>0</literal>。其他如音乐键盘等设备可以通过改用更改 <reference internal="True" refid="class-inputeventmidi-property-velocity"><inline classes="std std-ref">velocity</inline></reference> 来模拟压力。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventmidi-property-velocity"></target>
            <paragraph classes="classref-property" ids="class-inputeventmidi-property-velocity" names="class_inputeventmidi_property_velocity"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>velocity</strong> = <literal>0</literal> <reference internal="True" refid="class-inputeventmidi-property-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_velocity</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_velocity</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>MIDI 消息的速度。这个值在 <literal>0</literal> 到 <literal>127</literal> 之间。对于音乐键盘，这对应的是按键有多快，实际很少超过 <literal>110</literal>。</paragraph>
            <paragraph><strong>注意：</strong>部分 MIDI 设备可能会发送速度为 <literal>0</literal> 的 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-midi-message-note-on"><inline classes="std std-ref">@GlobalScope.MIDI_MESSAGE_NOTE_ON</inline></reference>，并期望它被视为和 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-midi-message-note-off"><inline classes="std std-ref">@GlobalScope.MIDI_MESSAGE_NOTE_OFF</inline></reference> 消息一样。如果有必要，可以用几行代码来处理：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _input(event):
    if event is InputEventMIDI:
        if event.message == MIDI_MESSAGE_NOTE_ON and event.velocity &gt; 0:
            print("Note pressed!")</literal_block>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
