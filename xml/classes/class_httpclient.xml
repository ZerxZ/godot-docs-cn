<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_httpclient.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/HTTPClient.xml.</comment>
    <target refid="class-httpclient"></target>
    <section ids="httpclient class-httpclient" names="httpclient class_httpclient">
        <title>HTTPClient</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>低级别的超文本传输协议客户端。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>超文本传输协议客户端（有时称为“用户代理”）。用于发出 HTTP 请求以下载网络内容，上传文件和其他数据或与各种服务通信，以及其他用例。</paragraph>
            <paragraph>请参阅 <reference internal="True" refuri="class_httprequest#class-httprequest"><inline classes="std std-ref">HTTPRequest</inline></reference> 节点以获取更高级别的替代方案。</paragraph>
            <paragraph><strong>注意：</strong>这个客户端只需要连接一个主机一次（见<reference internal="True" refid="class-httpclient-method-connect-to-host"><inline classes="std std-ref">connect_to_host</inline></reference>），就可以发送多个请求。因此，使用 URL 的方法通常只使用主机后面的部分而不是完整的 URL，因为客户端已经连接到主机。请参阅 <reference internal="True" refid="class-httpclient-method-request"><inline classes="std std-ref">request</inline></reference> 以获取完整示例并开始使用。</paragraph>
            <paragraph><strong>HTTPClient</strong> 应该在多个请求之间重用或连接到不同的主机，而不是为每个请求创建一个客户端。支持传输层安全 (TLS)，包括服务器证书验证。2xx 范围内的 HTTP 状态代码表示成功，3xx 表示重定向（即“再试一次，但在这里”），4xx 表示请求有问题，5xx 表示服务器端出了问题。</paragraph>
            <paragraph>有关 HTTP 的更多信息，请参阅 <reference name="MDN 上 HTTP 的文档" refuri="https://developer.mozilla.org/en-US/docs/Web/HTTP">MDN 上 HTTP 的文档</reference>（或阅读 <reference name="RFC 2616" refuri="https://tools.ietf.org/html/rfc2616">RFC 2616</reference>，直接从根源了解）。</paragraph>
            <paragraph><strong>注意：</strong>导出到 Android 时，在导出项目或使用一键部署前，请确保在 Android 导出预设中启用 <literal>INTERNET</literal> 权限。否则，任何类型的网络通信都将被 Android 阻止。</paragraph>
            <paragraph><strong>注意：</strong>建议使用传输加密（TLS）并避免在 HTTP GET URL 参数中发送敏感信息（例如登录凭据）。考虑改用 HTTP POST 请求或 HTTP 标头来获取此类信息。</paragraph>
            <paragraph><strong>注意：</strong>当从导出到 Web 的项目执行 HTTP 请求时，请记住，由于 <reference name="CORS" refuri="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS</reference>，远程服务器可能不允许来自站外的请求。如果托管到有问题的服务器，应该修改其后台，以通过添加 <literal>Access-Control-Allow-Origin: *</literal> HTTP 标头来允许来自站外的请求。</paragraph>
            <paragraph><strong>注意：</strong>TLS 支持目前仅限于 TLS 1.0、TLS 1.1 和 TLS 1.2。尝试连接到仅支持 TLS 1.3 的服务器时将返回一个错误。</paragraph>
            <paragraph><strong>警告：</strong>目前不支持 TLS 证书撤销和证书绑定。只要吊销的证书在其他方面有效，就会被接受。如果这是一个问题，你可能希望使用有效期较短的自动管理的证书。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/networking/http_client_class"><inline classes="doc">HTTP 客户端类</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/networking/ssl_certificates"><inline classes="doc">TLS 证书</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="79"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-property-blocking-mode-enabled"><inline classes="std std-ref">blocking_mode_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-property-connection"><inline classes="std std-ref">connection</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-property-read-chunk-size"><inline classes="std std-ref">read_chunk_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>65536</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="261"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-close"><inline classes="std std-ref">close</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-connect-to-host"><inline classes="std std-ref">connect_to_host</inline></reference>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, tls_options: <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-get-response-body-length"><inline classes="std std-ref">get_response_body_length</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-get-response-code"><inline classes="std std-ref">get_response_code</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-get-response-headers"><inline classes="std std-ref">get_response_headers</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-get-response-headers-as-dictionary"><inline classes="std std-ref">get_response_headers_as_dictionary</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-get-status"><inline classes="std std-ref">get_status</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-has-response"><inline classes="std std-ref">has_response</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-is-response-chunked"><inline classes="std std-ref">is_response_chunked</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-poll"><inline classes="std std-ref">poll</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-query-string-from-dict"><inline classes="std std-ref">query_string_from_dict</inline></reference>(fields: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-read-response-body-chunk"><inline classes="std std-ref">read_response_body_chunk</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-request"><inline classes="std std-ref">request</inline></reference>(method: <reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference>, url: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, headers: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, body: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-request-raw"><inline classes="std std-ref">request_raw</inline></reference>(method: <reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference>, url: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, headers: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, body: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-set-http-proxy"><inline classes="std std-ref">set_http_proxy</inline></reference>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httpclient-method-set-https-proxy"><inline classes="std std-ref">set_https_proxy</inline></reference>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-httpclient-method"></target>
            <paragraph classes="classref-enumeration" ids="enum-httpclient-method" names="enum_httpclient_method">enum <strong>Method</strong>: <reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-httpclient-constant-method-get"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-method-get" names="class_httpclient_constant_method_get"><reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> <strong>METHOD_GET</strong> = <literal>0</literal></paragraph>
            <paragraph>HTTP GET 方法。GET 方法用于请求指定资源的某种表示。使用 GET 的请求应该只进行数据的获取。</paragraph>
            <target refid="class-httpclient-constant-method-head"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-method-head" names="class_httpclient_constant_method_head"><reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> <strong>METHOD_HEAD</strong> = <literal>1</literal></paragraph>
            <paragraph>HTTP HEAD 方法。HEAD 方法请求的是和 GET 请求一样的相应，但不包含响应体。用来请求元数据很方便，比如可以通过请求 HTTP 报头来判断资源是否存在。</paragraph>
            <target refid="class-httpclient-constant-method-post"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-method-post" names="class_httpclient_constant_method_post"><reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> <strong>METHOD_POST</strong> = <literal>2</literal></paragraph>
            <paragraph>HTTP POST 方法。POST 方法用于将实体提交给指定的资源，经常会造成服务器端状态的更改或者其他副作用。常用于提交表单和其他数据，或者上传文件。</paragraph>
            <target refid="class-httpclient-constant-method-put"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-method-put" names="class_httpclient_constant_method_put"><reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> <strong>METHOD_PUT</strong> = <literal>3</literal></paragraph>
            <paragraph>HTTP PUT 方法。PUT 方法的目的是使用请求负载替换目标资源的所有当前表示。（可以把 POST 理解为“创建或更新”，把 PUT 理解为“更小”，不过很多服务在这两者的含义之间并不作明显的区别）。</paragraph>
            <target refid="class-httpclient-constant-method-delete"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-method-delete" names="class_httpclient_constant_method_delete"><reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> <strong>METHOD_DELETE</strong> = <literal>4</literal></paragraph>
            <paragraph>HTTP DELETE 方法。DELETE 方法请求删除指定的资源。</paragraph>
            <target refid="class-httpclient-constant-method-options"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-method-options" names="class_httpclient_constant_method_options"><reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> <strong>METHOD_OPTIONS</strong> = <literal>5</literal></paragraph>
            <paragraph>HTTP OPTIONS 方法。OPTIONS 方法的目的是获取目标资源的通讯选项。很少使用。</paragraph>
            <target refid="class-httpclient-constant-method-trace"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-method-trace" names="class_httpclient_constant_method_trace"><reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> <strong>METHOD_TRACE</strong> = <literal>6</literal></paragraph>
            <paragraph>HTTP TRACE 方法。TRACE 方法会沿目标资源的路径做消息回环测试。返回的响应体中会包含完整的 HTTP 请求。很少使用。</paragraph>
            <target refid="class-httpclient-constant-method-connect"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-method-connect" names="class_httpclient_constant_method_connect"><reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> <strong>METHOD_CONNECT</strong> = <literal>7</literal></paragraph>
            <paragraph>HTTP CONNECT 方法。CONNECT 方法会与目标资源所表示的服务器建立隧道。很少使用。</paragraph>
            <target refid="class-httpclient-constant-method-patch"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-method-patch" names="class_httpclient_constant_method_patch"><reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> <strong>METHOD_PATCH</strong> = <literal>8</literal></paragraph>
            <paragraph>HTTP PATCH 方法。PATCH 方法用于对资源进行部分修改。</paragraph>
            <target refid="class-httpclient-constant-method-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-method-max" names="class_httpclient_constant_method_max"><reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> <strong>METHOD_MAX</strong> = <literal>9</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-httpclient-status"></target>
            <paragraph classes="classref-enumeration" ids="enum-httpclient-status" names="enum_httpclient_status">enum <strong>Status</strong>: <reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-httpclient-constant-status-disconnected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-status-disconnected" names="class_httpclient_constant_status_disconnected"><reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_DISCONNECTED</strong> = <literal>0</literal></paragraph>
            <paragraph>状态：与服务器断开连接。</paragraph>
            <target refid="class-httpclient-constant-status-resolving"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-status-resolving" names="class_httpclient_constant_status_resolving"><reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_RESOLVING</strong> = <literal>1</literal></paragraph>
            <paragraph>状态：正在根据 URL 的主机名解析 IP。</paragraph>
            <target refid="class-httpclient-constant-status-cant-resolve"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-status-cant-resolve" names="class_httpclient_constant_status_cant_resolve"><reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_CANT_RESOLVE</strong> = <literal>2</literal></paragraph>
            <paragraph>状态：DNS 失败：无法解析指定 URL 的主机名。</paragraph>
            <target refid="class-httpclient-constant-status-connecting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-status-connecting" names="class_httpclient_constant_status_connecting"><reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_CONNECTING</strong> = <literal>3</literal></paragraph>
            <paragraph>状态：正在连接到服务器。</paragraph>
            <target refid="class-httpclient-constant-status-cant-connect"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-status-cant-connect" names="class_httpclient_constant_status_cant_connect"><reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_CANT_CONNECT</strong> = <literal>4</literal></paragraph>
            <paragraph>状态：无法连接到服务器。</paragraph>
            <target refid="class-httpclient-constant-status-connected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-status-connected" names="class_httpclient_constant_status_connected"><reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_CONNECTED</strong> = <literal>5</literal></paragraph>
            <paragraph>状态：连接已建立。</paragraph>
            <target refid="class-httpclient-constant-status-requesting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-status-requesting" names="class_httpclient_constant_status_requesting"><reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_REQUESTING</strong> = <literal>6</literal></paragraph>
            <paragraph>状态：正在发送请求。</paragraph>
            <target refid="class-httpclient-constant-status-body"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-status-body" names="class_httpclient_constant_status_body"><reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_BODY</strong> = <literal>7</literal></paragraph>
            <paragraph>状态：已获取 HTTP 响应体。</paragraph>
            <target refid="class-httpclient-constant-status-connection-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-status-connection-error" names="class_httpclient_constant_status_connection_error"><reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_CONNECTION_ERROR</strong> = <literal>8</literal></paragraph>
            <paragraph>状态：HTTP 连接出错。</paragraph>
            <target refid="class-httpclient-constant-status-tls-handshake-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-status-tls-handshake-error" names="class_httpclient_constant_status_tls_handshake_error"><reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_TLS_HANDSHAKE_ERROR</strong> = <literal>9</literal></paragraph>
            <paragraph>状态：TLS 握手出错。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-httpclient-responsecode"></target>
            <paragraph classes="classref-enumeration" ids="enum-httpclient-responsecode" names="enum_httpclient_responsecode">enum <strong>ResponseCode</strong>: <reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-httpclient-constant-response-continue"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-continue" names="class_httpclient_constant_response_continue"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_CONTINUE</strong> = <literal>100</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>100 Continue</literal>。是表示目前为止一切正常的中间响应，客户端应该继续请求（如果已经请求完就可以直接忽略这个状态）。</paragraph>
            <target refid="class-httpclient-constant-response-switching-protocols"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-switching-protocols" names="class_httpclient_constant_response_switching_protocols"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_SWITCHING_PROTOCOLS</strong> = <literal>101</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>101 Switching Protocol</literal>。针对客户 <literal>Upgrade</literal> 请求的响应，表示服务器所转换到的协议。</paragraph>
            <target refid="class-httpclient-constant-response-processing"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-processing" names="class_httpclient_constant_response_processing"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_PROCESSING</strong> = <literal>102</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>102 Processing</literal>（WebDAV）。表示服务器已收到请求并且正在处理，尚未生成响应。</paragraph>
            <target refid="class-httpclient-constant-response-ok"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-ok" names="class_httpclient_constant_response_ok"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_OK</strong> = <literal>200</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>200 OK</literal>。请求已成功，是成功请求的默认响应，根据请求的不同表示的含义也不同。GET：已获取资源并通过消息体发送。HEAD：实体报头在消息体中。POST：描述操作结果的资源已通过消息体发送。TRACE：消息体包含服务器所收到的请求消息。</paragraph>
            <target refid="class-httpclient-constant-response-created"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-created" names="class_httpclient_constant_response_created"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_CREATED</strong> = <literal>201</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>201 Created</literal>。请求成功，并且创建了新资源。通常是针对 PUT 请求的响应.</paragraph>
            <target refid="class-httpclient-constant-response-accepted"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-accepted" names="class_httpclient_constant_response_accepted"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_ACCEPTED</strong> = <literal>202</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>202 Accepted</literal>。请求已收到，但尚未处理。HTTP 协议中无法实现在完成对请求的处理后异步地把请求发回来。这个响应的使用场景应该是会有其他进程或者服务器去处理这个请求，或者会进行批量处理。</paragraph>
            <target refid="class-httpclient-constant-response-non-authoritative-information"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-non-authoritative-information" names="class_httpclient_constant_response_non_authoritative_information"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_NON_AUTHORITATIVE_INFORMATION</strong> = <literal>203</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>203 Non-Authoritative Information</literal>。该响应状态码表示返回的元消息与原始服务器所返回的不一致，而是从本地或者第三方副本中收集而来。除了特殊情况，应该优先选用 200 OK 响应所返回的内容。</paragraph>
            <target refid="class-httpclient-constant-response-no-content"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-no-content" names="class_httpclient_constant_response_no_content"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_NO_CONTENT</strong> = <literal>204</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>204 No Content</literal>。本请求无响应内容，但报头可能有用。用户代理可能会根据该资源更新缓存报头。</paragraph>
            <target refid="class-httpclient-constant-response-reset-content"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-reset-content" names="class_httpclient_constant_response_reset_content"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_RESET_CONTENT</strong> = <literal>205</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>205 Reset Content</literal>。服务器已完成对请求的处理，并要求客户端将导致该请求的“文档视图”重置回原始状态。</paragraph>
            <target refid="class-httpclient-constant-response-partial-content"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-partial-content" names="class_httpclient_constant_response_partial_content"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_PARTIAL_CONTENT</strong> = <literal>206</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>206 Partial Content</literal>。客户端如果发送范围（Range）报头就会收到该响应码，用于将下载拆分成多个数据流。</paragraph>
            <target refid="class-httpclient-constant-response-multi-status"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-multi-status" names="class_httpclient_constant_response_multi_status"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_MULTI_STATUS</strong> = <literal>207</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>207 Multi-Status</literal>（WebDAV）。关于多个资源的多状态响应，适用于需要返回多个状态码的情况。</paragraph>
            <target refid="class-httpclient-constant-response-already-reported"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-already-reported" names="class_httpclient_constant_response_already_reported"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_ALREADY_REPORTED</strong> = <literal>208</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>208 Already Reported</literal>（WebDAV）。在 DAV: propstat 相应元素内部使用，可以防止重复遍历同一合集中不同绑定的内部成员。</paragraph>
            <target refid="class-httpclient-constant-response-im-used"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-im-used" names="class_httpclient_constant_response_im_used"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_IM_USED</strong> = <literal>226</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>226 IM Used</literal>（WebDAV）。服务器完成了对该资源的 GET 请求，所响应的资源表示，是针对当前实例进行若干共同修改的结果。</paragraph>
            <target refid="class-httpclient-constant-response-multiple-choices"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-multiple-choices" names="class_httpclient_constant_response_multiple_choices"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_MULTIPLE_CHOICES</strong> = <literal>300</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>300 Multiple Choice</literal>。请求有多个可能的响应，并且没有从中挑选其一的标准方法。用户代理或者用户应该自行挑选。</paragraph>
            <target refid="class-httpclient-constant-response-moved-permanently"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-moved-permanently" names="class_httpclient_constant_response_moved_permanently"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_MOVED_PERMANENTLY</strong> = <literal>301</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>301 Moved Permanently</literal>。重定向。该响应码表示所请求资源的 URI 已改变。新的 URI 通常包含在响应中。</paragraph>
            <target refid="class-httpclient-constant-response-found"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-found" names="class_httpclient_constant_response_found"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_FOUND</strong> = <literal>302</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>302 Found</literal>。临时重定向。该响应码表示所请求资源的 URI 已临时改变。该 URI 将来还可能发生变，因此后续的请求应该仍然使用相同的 URI。</paragraph>
            <target refid="class-httpclient-constant-response-see-other"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-see-other" names="class_httpclient_constant_response_see_other"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_SEE_OTHER</strong> = <literal>303</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>303 See Other</literal>。服务器将用户代理重定向到另一个资源，资源由 Location 报头中的 URI 指定。用于提供针对原始请求的间接响应。</paragraph>
            <target refid="class-httpclient-constant-response-not-modified"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-not-modified" names="class_httpclient_constant_response_not_modified"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_NOT_MODIFIED</strong> = <literal>304</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>304 Not Modified</literal>。收到了条件 GET 或者 HEAD，并且要不是因为该条件为 <literal>false</literal> 就会返回 200 OK 响应。</paragraph>
            <target refid="class-httpclient-constant-response-use-proxy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-use-proxy" names="class_httpclient_constant_response_use_proxy"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_USE_PROXY</strong> = <literal>305</literal></paragraph>
            <paragraph><strong>已弃用：</strong> Many clients ignore this response code for security reasons. It is also deprecated by the HTTP standard.</paragraph>
            <paragraph>HTTP 状态码 <literal>305 Use Proxy</literal>。</paragraph>
            <target refid="class-httpclient-constant-response-switch-proxy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-switch-proxy" names="class_httpclient_constant_response_switch_proxy"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_SWITCH_PROXY</strong> = <literal>306</literal></paragraph>
            <paragraph><strong>已弃用：</strong> Many clients ignore this response code for security reasons. It is also deprecated by the HTTP standard.</paragraph>
            <paragraph>HTTP 状态码 <literal>306 Switch Proxy</literal>。</paragraph>
            <target refid="class-httpclient-constant-response-temporary-redirect"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-temporary-redirect" names="class_httpclient_constant_response_temporary_redirect"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_TEMPORARY_REDIRECT</strong> = <literal>307</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>307 Temporary Redirect</literal>。目标资源暂时位于不同的 URI，用户代理如果要自动重定向到该 URI，就一定不能更改所使用的请求方法。</paragraph>
            <target refid="class-httpclient-constant-response-permanent-redirect"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-permanent-redirect" names="class_httpclient_constant_response_permanent_redirect"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_PERMANENT_REDIRECT</strong> = <literal>308</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>308 Permanent Redirect</literal>。目标资源已被赋予全新的永久 URI，后续针对该资源的请求应当使用所提供的 URI。</paragraph>
            <target refid="class-httpclient-constant-response-bad-request"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-bad-request" names="class_httpclient_constant_response_bad_request"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_BAD_REQUEST</strong> = <literal>400</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>400 Bad Request</literal>。请求无效。服务器认为客户端出错，所以无法或者拒绝处理该请求（例如：请求语法错误、请求消息帧无效、请求内容无效、请求路由可疑）。</paragraph>
            <target refid="class-httpclient-constant-response-unauthorized"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-unauthorized" names="class_httpclient_constant_response_unauthorized"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_UNAUTHORIZED</strong> = <literal>401</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>401 Unauthorized</literal>。需要提供认证信息。未执行请求，原因是缺少针对目标资源的授权认证信息。</paragraph>
            <target refid="class-httpclient-constant-response-payment-required"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-payment-required" names="class_httpclient_constant_response_payment_required"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_PAYMENT_REQUIRED</strong> = <literal>402</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>402 Payment Required</literal>。该响应码是为将来使用保留的，本意是供数字支付系统使用，但目前尚未有所使用。</paragraph>
            <target refid="class-httpclient-constant-response-forbidden"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-forbidden" names="class_httpclient_constant_response_forbidden"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_FORBIDDEN</strong> = <literal>403</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>403 Forbidden</literal>。客户端没有该内容的访问权限，即未授权，服务器拒绝给出正确响应。与 <literal>401</literal> 不同，服务器已收到客户端的身份信息。</paragraph>
            <target refid="class-httpclient-constant-response-not-found"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-not-found" names="class_httpclient_constant_response_not_found"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_NOT_FOUND</strong> = <literal>404</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>404 Not Found</literal>。服务器无法找到所请求的资源。可能是无法识别 URL，也可能是 URL 有效但资源本身不存在。也有可能在客户端未提供认证信息时代替 403 返回，从而达到隐藏资源存在性的目的。</paragraph>
            <target refid="class-httpclient-constant-response-method-not-allowed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-method-not-allowed" names="class_httpclient_constant_response_method_not_allowed"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_METHOD_NOT_ALLOWED</strong> = <literal>405</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>405 Method Not Allowed</literal>。服务器理解请求所使用的 HTTP 方法，但该方法已被禁止使用。例如：API 可能禁止 DELETE 资源。GET 和 HEAD 这两个方法是必须的，所以不能被禁用，也不应该返回该错误码。</paragraph>
            <target refid="class-httpclient-constant-response-not-acceptable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-not-acceptable" names="class_httpclient_constant_response_not_acceptable"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_NOT_ACCEPTABLE</strong> = <literal>406</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>406 Not Acceptable</literal>。根据请求中主动注明的交涉报头字段，目标资源没有用户代理所能接受的表示。用于内容交涉过程。</paragraph>
            <target refid="class-httpclient-constant-response-proxy-authentication-required"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-proxy-authentication-required" names="class_httpclient_constant_response_proxy_authentication_required"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_PROXY_AUTHENTICATION_REQUIRED</strong> = <literal>407</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>407 Proxy Authentication Required</literal>。类似于 401 Unauthorized，表示客户端需要在提供认证信息后使用代理。</paragraph>
            <target refid="class-httpclient-constant-response-request-timeout"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-request-timeout" names="class_httpclient_constant_response_request_timeout"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_REQUEST_TIMEOUT</strong> = <literal>408</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>408 Request Timeout</literal>。服务器在其准备等待的时间段内未获取完整的请求信息。</paragraph>
            <target refid="class-httpclient-constant-response-conflict"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-conflict" names="class_httpclient_constant_response_conflict"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_CONFLICT</strong> = <literal>409</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>409 Conflict</literal>。请求无法完成，原因与是目标资源的当前状态存在冲突。该代码的使用场景应该是用户也许能够解决冲突并重新提交请求。</paragraph>
            <target refid="class-httpclient-constant-response-gone"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-gone" names="class_httpclient_constant_response_gone"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_GONE</strong> = <literal>410</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>410 Gone</literal>。目标资源在原始服务器上已不复存在，并且可能永远如此。</paragraph>
            <target refid="class-httpclient-constant-response-length-required"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-length-required" names="class_httpclient_constant_response_length_required"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_LENGTH_REQUIRED</strong> = <literal>411</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>411 Length Required</literal>。服务器拒绝接受没有定义 Content-Length 报头的请求。</paragraph>
            <target refid="class-httpclient-constant-response-precondition-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-precondition-failed" names="class_httpclient_constant_response_precondition_failed"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_PRECONDITION_FAILED</strong> = <literal>412</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>412 Percondition Failed</literal>。请求报头中给出的若干条件在服务器上检查为 <literal>false</literal>。</paragraph>
            <target refid="class-httpclient-constant-response-request-entity-too-large"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-request-entity-too-large" names="class_httpclient_constant_response_request_entity_too_large"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_REQUEST_ENTITY_TOO_LARGE</strong> = <literal>413</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>413 Entity Too Large</literal>。服务器拒绝处理请求，因为请求的负载超过了服务器所允许或者所能够处理的上限。</paragraph>
            <target refid="class-httpclient-constant-response-request-uri-too-long"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-request-uri-too-long" names="class_httpclient_constant_response_request_uri_too_long"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_REQUEST_URI_TOO_LONG</strong> = <literal>414</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>414 Request-URI Too Long</literal>。服务器拒绝为请求提供服务，因为请求目标的长度超过了服务器所愿意解析的上限。</paragraph>
            <target refid="class-httpclient-constant-response-unsupported-media-type"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-unsupported-media-type" names="class_httpclient_constant_response_unsupported_media_type"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_UNSUPPORTED_MEDIA_TYPE</strong> = <literal>415</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>415 Unsupported Media Type</literal>。原始服务器拒绝为请求提供服务，因为负载所使用的格式目标资源的该方法不支持。</paragraph>
            <target refid="class-httpclient-constant-response-requested-range-not-satisfiable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-requested-range-not-satisfiable" names="class_httpclient_constant_response_requested_range_not_satisfiable"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE</strong> = <literal>416</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>416 Requested Range Not Satisfiable</literal>。请求的 Range 报头中指定的所有范围都与所选资源的有效范围不重合，或者拒绝处理该范围的集合。拒绝的可能原因是存在无效的范围，或者存在过多细小或者重叠的范围。</paragraph>
            <target refid="class-httpclient-constant-response-expectation-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-expectation-failed" names="class_httpclient_constant_response_expectation_failed"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_EXPECTATION_FAILED</strong> = <literal>417</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>417 Expectation Failed</literal>。请求的 Expect 报头中给出的预期无法被任何内部服务器满足。</paragraph>
            <target refid="class-httpclient-constant-response-im-a-teapot"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-im-a-teapot" names="class_httpclient_constant_response_im_a_teapot"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_IM_A_TEAPOT</strong> = <literal>418</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>418 I'm A Teapot</literal>。想要尝试用茶壶煮咖啡就会得到错误码“418 因为我是个茶壶”，得到的实体大概又矮又胖。这个错误是对1998年愚人节玩笑的超文本咖啡壶控制协议的引用。</paragraph>
            <target refid="class-httpclient-constant-response-misdirected-request"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-misdirected-request" names="class_httpclient_constant_response_misdirected_request"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_MISDIRECTED_REQUEST</strong> = <literal>421</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>421 Misdirected Request</literal>。请求被重定向到了一台无法生成响应的服务器。如果一台服务器没有针对请求 URI 的协议类型和主机身份配置响应，就有可能返回这个代码。</paragraph>
            <target refid="class-httpclient-constant-response-unprocessable-entity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-unprocessable-entity" names="class_httpclient_constant_response_unprocessable_entity"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_UNPROCESSABLE_ENTITY</strong> = <literal>422</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>422 Unprocessable Entity</literal>（WebDAV）。服务器能够理解请求实体的内容类型（所以不适用 415 Unsupported Media Type 状态码），请求实体的语法也是正确的（所以不适用 400 Bad Request 状态码），但仍然无法执行请求中所包含的指令。</paragraph>
            <target refid="class-httpclient-constant-response-locked"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-locked" names="class_httpclient_constant_response_locked"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_LOCKED</strong> = <literal>423</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>423 Locked</literal>（WebDAV）。方法的来源资源或目标资源被锁定。</paragraph>
            <target refid="class-httpclient-constant-response-failed-dependency"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-failed-dependency" names="class_httpclient_constant_response_failed_dependency"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_FAILED_DEPENDENCY</strong> = <literal>424</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>424 Failed Dependency</literal>（WebDAV）。无法在该资源上执行该方法，因为请求的操作依赖于另一个操作，而那个操作失败了。</paragraph>
            <target refid="class-httpclient-constant-response-upgrade-required"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-upgrade-required" names="class_httpclient_constant_response_upgrade_required"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_UPGRADE_REQUIRED</strong> = <literal>426</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>426 Upgrade Required</literal>。服务器拒绝以当前协议执行请求，但客户端升级到另一个协议之后可能会愿意执行。</paragraph>
            <target refid="class-httpclient-constant-response-precondition-required"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-precondition-required" names="class_httpclient_constant_response_precondition_required"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_PRECONDITION_REQUIRED</strong> = <literal>428</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>428 Precondition Required</literal>。原始服务器要求进行条件请求。</paragraph>
            <target refid="class-httpclient-constant-response-too-many-requests"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-too-many-requests" names="class_httpclient_constant_response_too_many_requests"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_TOO_MANY_REQUESTS</strong> = <literal>429</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>429 Too Many Requests</literal>。用户在指定时间段中（见“限流”）发送了过多的请求。静默一段时间后增加请求之间的时间间隔，稍后再试。</paragraph>
            <target refid="class-httpclient-constant-response-request-header-fields-too-large"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-request-header-fields-too-large" names="class_httpclient_constant_response_request_header_fields_too_large"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_REQUEST_HEADER_FIELDS_TOO_LARGE</strong> = <literal>431</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>431 Request Header Fields Too Large</literal>。服务器拒绝处理请求，因为报头字段过大。请求可以在减小报头字段后重新提交。</paragraph>
            <target refid="class-httpclient-constant-response-unavailable-for-legal-reasons"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-unavailable-for-legal-reasons" names="class_httpclient_constant_response_unavailable_for_legal_reasons"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_UNAVAILABLE_FOR_LEGAL_REASONS</strong> = <literal>451</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>451 Response Unavailable For Legal Reasons</literal>。服务器因法律要求而拒绝访问该资源。</paragraph>
            <target refid="class-httpclient-constant-response-internal-server-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-internal-server-error" names="class_httpclient_constant_response_internal_server_error"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_INTERNAL_SERVER_ERROR</strong> = <literal>500</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>500 Internal Server Error</literal>。服务器遭遇预料之外的情况，无法完成请求。</paragraph>
            <target refid="class-httpclient-constant-response-not-implemented"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-not-implemented" names="class_httpclient_constant_response_not_implemented"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_NOT_IMPLEMENTED</strong> = <literal>501</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>501 Not Implemented</literal>。服务器不支持完成请求所需的功能。</paragraph>
            <target refid="class-httpclient-constant-response-bad-gateway"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-bad-gateway" names="class_httpclient_constant_response_bad_gateway"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_BAD_GATEWAY</strong> = <literal>502</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>502 Bad Gateway</literal>。网关或代理服务器尝试使用内部服务器处理请求，但从该服务器收到了无效的响应。通常由负载均衡器或者代理服务器返回。</paragraph>
            <target refid="class-httpclient-constant-response-service-unavailable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-service-unavailable" names="class_httpclient_constant_response_service_unavailable"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_SERVICE_UNAVAILABLE</strong> = <literal>503</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>503 Service Unavailable</literal>。服务器目前无法处理请求，原因是暂时过载或者处于定期维护状态，可能在一段延迟后就能恢复，请稍后再试。</paragraph>
            <target refid="class-httpclient-constant-response-gateway-timeout"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-gateway-timeout" names="class_httpclient_constant_response_gateway_timeout"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_GATEWAY_TIMEOUT</strong> = <literal>504</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>504 Gateway Timeout</literal>。网关或代理服务器尝试使用上游服务器处理请求，但无法在指定时间内从该服务器收到响应。通常由负载均衡器或者代理服务器返回。</paragraph>
            <target refid="class-httpclient-constant-response-http-version-not-supported"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-http-version-not-supported" names="class_httpclient_constant_response_http_version_not_supported"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_HTTP_VERSION_NOT_SUPPORTED</strong> = <literal>505</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>505 HTTP Version Not Supported</literal>。服务器不支持或者拒绝支持请求消息所使用的 HTTP 主版本。</paragraph>
            <target refid="class-httpclient-constant-response-variant-also-negotiates"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-variant-also-negotiates" names="class_httpclient_constant_response_variant_also_negotiates"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_VARIANT_ALSO_NEGOTIATES</strong> = <literal>506</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>506 Variant Also Negotiates</literal>。服务器存在内部配置错误：所选的可变资源被配置为参与自身的透明内容交涉，因此不是交涉过程中的正确端点。</paragraph>
            <target refid="class-httpclient-constant-response-insufficient-storage"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-insufficient-storage" names="class_httpclient_constant_response_insufficient_storage"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_INSUFFICIENT_STORAGE</strong> = <literal>507</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>507 Insufficient Storage</literal>。无法在该资源上执行该方法，因为服务器无法保存成功完成请求所需的表示。</paragraph>
            <target refid="class-httpclient-constant-response-loop-detected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-loop-detected" names="class_httpclient_constant_response_loop_detected"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_LOOP_DETECTED</strong> = <literal>508</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>508 Loop Detected</literal>。服务器在处理“Depth: infinity”请求时遇到了死循环并终止了操作。该状态表示该操作整体失败。</paragraph>
            <target refid="class-httpclient-constant-response-not-extended"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-not-extended" names="class_httpclient_constant_response_not_extended"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_NOT_EXTENDED</strong> = <literal>510</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>510 Not Extended</literal>。请求未满足访问该资源的策略。服务器应当将所需信息返回给客户端，以便其提交后续请求。</paragraph>
            <target refid="class-httpclient-constant-response-network-auth-required"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httpclient-constant-response-network-auth-required" names="class_httpclient_constant_response_network_auth_required"><reference internal="True" refid="enum-httpclient-responsecode"><inline classes="std std-ref">ResponseCode</inline></reference> <strong>RESPONSE_NETWORK_AUTH_REQUIRED</strong> = <literal>511</literal></paragraph>
            <paragraph>HTTP 状态码 <literal>511 Network Authentication Required</literal>。客户端需要身份认证才能访问网络。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-httpclient-property-blocking-mode-enabled"></target>
            <paragraph classes="classref-property" ids="class-httpclient-property-blocking-mode-enabled" names="class_httpclient_property_blocking_mode_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>blocking_mode_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-httpclient-property-blocking-mode-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_blocking_mode</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_blocking_mode_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为 <literal>true</literal> 时，执行会阻塞至从响应中读取所有数据为止。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-property-connection"></target>
            <paragraph classes="classref-property" ids="class-httpclient-property-connection" names="class_httpclient_property_connection"><reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference> <strong>connection</strong> <reference internal="True" refid="class-httpclient-property-connection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_connection</strong>(value: <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference> <strong>get_connection</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该客户端所使用的连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-property-read-chunk-size"></target>
            <paragraph classes="classref-property" ids="class-httpclient-property-read-chunk-size" names="class_httpclient_property_read_chunk_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>read_chunk_size</strong> = <literal>65536</literal> <reference internal="True" refid="class-httpclient-property-read-chunk-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_read_chunk_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_read_chunk_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>使用的缓冲区大小，即每次迭代读取的最大字节数。见 <reference internal="True" refid="class-httpclient-method-read-response-body-chunk"><inline classes="std std-ref">read_response_body_chunk</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-httpclient-method-close"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-close" names="class_httpclient_method_close"><abbreviation explanation="无返回值。">void</abbreviation> <strong>close</strong>() <reference internal="True" refid="class-httpclient-method-close"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>关闭当前连接，允许重用此<strong>HTTPClient</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-connect-to-host"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-connect-to-host" names="class_httpclient_method_connect_to_host"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>connect_to_host</strong>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, tls_options: <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference> = null) <reference internal="True" refid="class-httpclient-method-connect-to-host"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>连接到主机。这需要在发送任何请求之前完成。</paragraph>
            <paragraph>如果未指定 <literal>port</literal>（或使用 <literal>-1</literal>），则自动将其设置为 80（用于 HTTP）和 443（用于 HTTPS）。可以传入可选的 <literal>tls_options</literal> 参数来自定义受信任的证书颁发机构，或者使用 HTTPS 时的通用名称验证。请参阅 <reference internal="True" refuri="class_tlsoptions#class-tlsoptions-method-client"><inline classes="std std-ref">TLSOptions.client</inline></reference> 和 <reference internal="True" refuri="class_tlsoptions#class-tlsoptions-method-client-unsafe"><inline classes="std std-ref">TLSOptions.client_unsafe</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-get-response-body-length"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-get-response-body-length" names="class_httpclient_method_get_response_body_length"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_response_body_length</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-httpclient-method-get-response-body-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回响应体长度。</paragraph>
            <paragraph><strong>注意：</strong>部分 Web 服务器可能不发送响应体长度，此时返回值将为 <literal>-1</literal>。如果使用分块传输编码，响应体的长度也将为 <literal>-1</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浏览器的限制，该函数在 Web 平台上始终返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-get-response-code"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-get-response-code" names="class_httpclient_method_get_response_code"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_response_code</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-httpclient-method-get-response-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回响应的 HTTP 状态码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-get-response-headers"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-get-response-headers" names="class_httpclient_method_get_response_headers"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_response_headers</strong>() <reference internal="True" refid="class-httpclient-method-get-response-headers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回响应报头。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-get-response-headers-as-dictionary"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-get-response-headers-as-dictionary" names="class_httpclient_method_get_response_headers_as_dictionary"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_response_headers_as_dictionary</strong>() <reference internal="True" refid="class-httpclient-method-get-response-headers-as-dictionary"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有响应报头，是 <literal>{ "报头字段名称": "字段取值1; 字段取值2" }</literal> 格式的字典，字典的键和值均保持服务器所发送的大小写。字段取值为简单的 String，该字符串可能包含多个值，使用“; ”分隔。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
    "content-length": 12,
    "Content-Type": "application/json; charset=UTF-8",
}</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-get-status"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-get-status" names="class_httpclient_method_get_status"><reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> <strong>get_status</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-httpclient-method-get-status"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> 常量。需要调用 <reference internal="True" refid="class-httpclient-method-poll"><inline classes="std std-ref">poll</inline></reference> 才能更新状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-has-response"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-has-response" names="class_httpclient_method_has_response"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_response</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-httpclient-method-has-response"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <literal>true</literal> 时，则该 <strong>HTTPClient</strong> 有可用的响应。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-is-response-chunked"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-is-response-chunked" names="class_httpclient_method_is_response_chunked"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_response_chunked</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-httpclient-method-is-response-chunked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <literal>true</literal> 时，则该 <strong>HTTPClient</strong> 有分块的响应。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-poll"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-poll" names="class_httpclient_method_poll"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>poll</strong>() <reference internal="True" refid="class-httpclient-method-poll"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>调用此方法才能对请求进行处理。使用 <reference internal="True" refid="class-httpclient-method-get-status"><inline classes="std std-ref">get_status</inline></reference> 获取检查。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-query-string-from-dict"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-query-string-from-dict" names="class_httpclient_method_query_string_from_dict"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>query_string_from_dict</strong>(fields: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <reference internal="True" refid="class-httpclient-method-query-string-from-dict"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从提供的字典生成 GET/POST application/x-www-form-urlencoded 样式的查询字符串，例如：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var fields = {"username": "user", "password": "pass"}
var query_string = http_client.query_string_from_dict(fields)
# 返回 "username=user&amp;password=pass"</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var fields = new Godot.Collections.Dictionary { { "username", "user" }, { "password", "pass" } };
string queryString = httpClient.QueryStringFromDict(fields);
// 返回 "username=user&amp;password=pass"</literal_block>
                </div>
            </container>
            <paragraph>此外，如果键具有 <literal>null</literal> 值，则仅添加键本身，而不添加等号和值。如果该值是一个数组，则添加该相同键，与其中的每个值组成一对。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var fields = {"single": 123, "not_valued": null, "multiple": [22, 33, 44]}
var query_string = http_client.query_string_from_dict(fields)
# 返回 "single=123&amp;not_valued&amp;multiple=22&amp;multiple=33&amp;multiple=44"</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var fields = new Godot.Collections.Dictionary
{
    { "single", 123 },
    { "notValued", default },
    { "multiple", new Godot.Collections.Array { 22, 33, 44 } },
};
string queryString = httpClient.QueryStringFromDict(fields);
// 返回 "single=123&amp;not_valued&amp;multiple=22&amp;multiple=33&amp;multiple=44"</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-read-response-body-chunk"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-read-response-body-chunk" names="class_httpclient_method_read_response_body_chunk"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>read_response_body_chunk</strong>() <reference internal="True" refid="class-httpclient-method-read-response-body-chunk"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从响应中读取一块数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-request"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-request" names="class_httpclient_method_request"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>request</strong>(method: <reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference>, url: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, headers: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, body: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <reference internal="True" refid="class-httpclient-method-request"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向连接的服务器发送请求。</paragraph>
            <paragraph>URL 参数通常只是主机名后面的部分，所以对于 <literal>https://somehost.com/index.php</literal> 来说就是 <literal>/index.php</literal>。当向 HTTP 代理服务器发送请求时，它应该是一个绝对 URL。对于 <reference internal="True" refid="class-httpclient-constant-method-options"><inline classes="std std-ref">METHOD_OPTIONS</inline></reference> 请求，<literal>*</literal> 也是允许的。对于 <reference internal="True" refid="class-httpclient-constant-method-connect"><inline classes="std std-ref">METHOD_CONNECT</inline></reference> 请求，它应该是权限组件 (<literal>host:port</literal>)。</paragraph>
            <paragraph>Headers 参数是 HTTP 请求的报头。有关可用的 HTTP 方法，请参阅 <reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference>。</paragraph>
            <paragraph>要创建带有查询字符串的 POST 请求以推送到服务器，请执行以下操作：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var fields = {"username" : "user", "password" : "pass"}
var query_string = http_client.query_string_from_dict(fields)
var headers = ["Content-Type: application/x-www-form-urlencoded", "Content-Length: " + str(query_string.length())]
var result = http_client.request(http_client.METHOD_POST, "/index.php", headers, query_string)</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var fields = new Godot.Collections.Dictionary { { "username", "user" }, { "password", "pass" } };
string queryString = new HttpClient().QueryStringFromDict(fields);
string[] headers = { "Content-Type: application/x-www-form-urlencoded", $"Content-Length: {queryString.Length}" };
var result = new HttpClient().Request(HttpClient.Method.Post, "index.php", headers, queryString);</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>如果 <literal>method</literal> 是 <reference internal="True" refid="class-httpclient-constant-method-get"><inline classes="std std-ref">METHOD_GET</inline></reference>，则忽略 <literal>body</literal> 参数。这是因为 GET 方法不能包含请求数据。解决方法是，可以将请求数据作为 URL 中的查询字符串传递。有关示例，请参见 <reference internal="True" refuri="class_string#class-string-method-uri-encode"><inline classes="std std-ref">String.uri_encode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-request-raw"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-request-raw" names="class_httpclient_method_request_raw"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>request_raw</strong>(method: <reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference>, url: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, headers: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, body: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-httpclient-method-request-raw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向连接的服务器发送请求。</paragraph>
            <paragraph>URL 参数通常只是主机名后面的部分，所以对于 <literal>https://somehost.com/index.php</literal> 来说就是 <literal>/index.php</literal>。当向 HTTP 代理服务器发送请求时，它应该是一个绝对 URL。对于 <reference internal="True" refid="class-httpclient-constant-method-options"><inline classes="std std-ref">METHOD_OPTIONS</inline></reference> 请求，<literal>*</literal> 也是允许的。对于 <reference internal="True" refid="class-httpclient-constant-method-connect"><inline classes="std std-ref">METHOD_CONNECT</inline></reference> 请求，它应该是权限组件 (<literal>host:port</literal>)。</paragraph>
            <paragraph>Headers 参数是 HTTP 请求的报头。有关可用的 HTTP 方法，请参阅 <reference internal="True" refid="enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference>。</paragraph>
            <paragraph>请求体是以字节数组的形式原样发送的，不会进行任何形式的编码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-set-http-proxy"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-set-http-proxy" names="class_httpclient_method_set_http_proxy"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_http_proxy</strong>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-httpclient-method-set-http-proxy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 HTTP 请求使用的代理服务器。</paragraph>
            <paragraph>如果 <literal>host</literal> 为空或者 <literal>port</literal> 为 -1，则会取消设置代理服务器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httpclient-method-set-https-proxy"></target>
            <paragraph classes="classref-method" ids="class-httpclient-method-set-https-proxy" names="class_httpclient_method_set_https_proxy"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_https_proxy</strong>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-httpclient-method-set-https-proxy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 HTTPS 请求使用的代理服务器。</paragraph>
            <paragraph>如果 <literal>host</literal> 为空或者 <literal>port</literal> 为 -1，则会取消设置代理服务器。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
