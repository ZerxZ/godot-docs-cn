<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_animationnode.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/AnimationNode.xml.</comment>
    <target refid="class-animationnode"></target>
    <section ids="animationnode class-animationnode" names="animationnode class_animationnode">
        <title>AnimationNode</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_animationnodeoutput#class-animationnodeoutput"><inline classes="std std-ref">AnimationNodeOutput</inline></reference>, <reference internal="True" refuri="class_animationnodesync#class-animationnodesync"><inline classes="std std-ref">AnimationNodeSync</inline></reference>, <reference internal="True" refuri="class_animationnodetimescale#class-animationnodetimescale"><inline classes="std std-ref">AnimationNodeTimeScale</inline></reference>, <reference internal="True" refuri="class_animationnodetimeseek#class-animationnodetimeseek"><inline classes="std std-ref">AnimationNodeTimeSeek</inline></reference>, <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference></paragraph>
        <paragraph><reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 节点的基类。与场景节点无关。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 节点的基础资源。通常不会直接使用，但你可以使用自定义混合公式创建自定义节点。</paragraph>
            <paragraph>创建动画节点时继承这个类主要是用在 <reference internal="True" refuri="class_animationnodeblendtree#class-animationnodeblendtree"><inline classes="std std-ref">AnimationNodeBlendTree</inline></reference> 中，否则应改用 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/animation/animation_tree"><inline classes="doc">使用 AnimationTree</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="68"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-property-filter-enabled"><inline classes="std std-ref">filter_enabled</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="43"></colspec>
                    <colspec colwidth="438"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-private-method-get-caption"><inline classes="std std-ref">_get_caption</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-private-method-get-child-by-name"><inline classes="std std-ref">_get_child_by_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-private-method-get-child-nodes"><inline classes="std std-ref">_get_child_nodes</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-private-method-get-parameter-default-value"><inline classes="std std-ref">_get_parameter_default_value</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> parameter <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-private-method-get-parameter-list"><inline classes="std std-ref">_get_parameter_list</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-private-method-has-filter"><inline classes="std std-ref">_has_filter</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-private-method-is-parameter-read-only"><inline classes="std std-ref">_is_parameter_read_only</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> parameter <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-private-method-process"><inline classes="std std-ref">_process</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> seek, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> is_external_seeking, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> test_only <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-add-input"><inline classes="std std-ref">add_input</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-blend-animation"><inline classes="std std-ref">blend_animation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> animation, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> delta, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> seeked, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> is_external_seeking, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> blend, <reference internal="True" refuri="class_animation#enum-animation-loopedflag"><inline classes="std std-ref">LoopedFlag</inline></reference> looped_flag=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-blend-input"><inline classes="std std-ref">blend_input</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> input_index, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> seek, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> is_external_seeking, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> blend, <reference internal="True" refid="enum-animationnode-filteraction"><inline classes="std std-ref">FilterAction</inline></reference> filter=0, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> sync=true, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> test_only=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-blend-node"><inline classes="std std-ref">blend_node</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refid="class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> node, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> seek, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> is_external_seeking, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> blend, <reference internal="True" refid="enum-animationnode-filteraction"><inline classes="std std-ref">FilterAction</inline></reference> filter=0, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> sync=true, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> test_only=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-find-input"><inline classes="std std-ref">find_input</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-get-input-count"><inline classes="std std-ref">get_input_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-get-input-name"><inline classes="std std-ref">get_input_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> input <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-get-parameter"><inline classes="std std-ref">get_parameter</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-is-path-filtered"><inline classes="std std-ref">is_path_filtered</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-remove-input"><inline classes="std std-ref">remove_input</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-set-filter-path"><inline classes="std std-ref">set_filter_path</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> path, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enable <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-set-input-name"><inline classes="std std-ref">set_input_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> input, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnode-method-set-parameter"><inline classes="std std-ref">set_parameter</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-animationnode-signal-animation-node-removed"></target>
            <paragraph classes="classref-signal" ids="class-animationnode-signal-animation-node-removed" names="class_animationnode_signal_animation_node_removed"><strong>animation_node_removed</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> object_id, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>由继承自该类的节点发出，并且当其中一个动画节点移除时具有内部树。发出此信号的动画节点可以是 <reference internal="True" refuri="class_animationnodeblendspace1d#class-animationnodeblendspace1d"><inline classes="std std-ref">AnimationNodeBlendSpace1D</inline></reference>、<reference internal="True" refuri="class_animationnodeblendspace2d#class-animationnodeblendspace2d"><inline classes="std std-ref">AnimationNodeBlendSpace2D</inline></reference>、<reference internal="True" refuri="class_animationnodestatemachine#class-animationnodestatemachine"><inline classes="std std-ref">AnimationNodeStateMachine</inline></reference> 和 <reference internal="True" refuri="class_animationnodeblendtree#class-animationnodeblendtree"><inline classes="std std-ref">AnimationNodeBlendTree</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-signal-animation-node-renamed"></target>
            <paragraph classes="classref-signal" ids="class-animationnode-signal-animation-node-renamed" names="class_animationnode_signal_animation_node_renamed"><strong>animation_node_renamed</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> object_id, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> old_name, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> new_name <strong>)</strong></paragraph>
            <paragraph>由继承自该类的节点发出，并且当其中一个动画节点名称更改时具有内部树。发出此信号的动画节点可以是 <reference internal="True" refuri="class_animationnodeblendspace1d#class-animationnodeblendspace1d"><inline classes="std std-ref">AnimationNodeBlendSpace1D</inline></reference>、<reference internal="True" refuri="class_animationnodeblendspace2d#class-animationnodeblendspace2d"><inline classes="std std-ref">AnimationNodeBlendSpace2D</inline></reference>、<reference internal="True" refuri="class_animationnodestatemachine#class-animationnodestatemachine"><inline classes="std std-ref">AnimationNodeStateMachine</inline></reference> 和 <reference internal="True" refuri="class_animationnodeblendtree#class-animationnodeblendtree"><inline classes="std std-ref">AnimationNodeBlendTree</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-signal-tree-changed"></target>
            <paragraph classes="classref-signal" ids="class-animationnode-signal-tree-changed" names="class_animationnode_signal_tree_changed"><strong>tree_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>由继承自该类的节点发出，并且当其一个动画节点发生变化时具有内部树。发出此信号的动画节点可以是 <reference internal="True" refuri="class_animationnodeblendspace1d#class-animationnodeblendspace1d"><inline classes="std std-ref">AnimationNodeBlendSpace1D</inline></reference>、<reference internal="True" refuri="class_animationnodeblendspace2d#class-animationnodeblendspace2d"><inline classes="std std-ref">AnimationNodeBlendSpace2D</inline></reference>、<reference internal="True" refuri="class_animationnodestatemachine#class-animationnodestatemachine"><inline classes="std std-ref">AnimationNodeStateMachine</inline></reference>、<reference internal="True" refuri="class_animationnodeblendtree#class-animationnodeblendtree"><inline classes="std std-ref">AnimationNodeBlendTree</inline></reference> 和 <reference internal="True" refuri="class_animationnodetransition#class-animationnodetransition"><inline classes="std std-ref">AnimationNodeTransition</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-animationnode-filteraction"></target>
            <paragraph classes="classref-enumeration" ids="enum-animationnode-filteraction" names="enum_animationnode_filteraction">enum <strong>FilterAction</strong>:</paragraph>
            <target refid="class-animationnode-constant-filter-ignore"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnode-constant-filter-ignore" names="class_animationnode_constant_filter_ignore"><reference internal="True" refid="enum-animationnode-filteraction"><inline classes="std std-ref">FilterAction</inline></reference> <strong>FILTER_IGNORE</strong> = <literal>0</literal></paragraph>
            <paragraph>不要使用筛选功能。</paragraph>
            <target refid="class-animationnode-constant-filter-pass"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnode-constant-filter-pass" names="class_animationnode_constant_filter_pass"><reference internal="True" refid="enum-animationnode-filteraction"><inline classes="std std-ref">FilterAction</inline></reference> <strong>FILTER_PASS</strong> = <literal>1</literal></paragraph>
            <paragraph>与筛选器匹配的路径将被允许通过。</paragraph>
            <target refid="class-animationnode-constant-filter-stop"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnode-constant-filter-stop" names="class_animationnode_constant_filter_stop"><reference internal="True" refid="enum-animationnode-filteraction"><inline classes="std std-ref">FilterAction</inline></reference> <strong>FILTER_STOP</strong> = <literal>2</literal></paragraph>
            <paragraph>与筛选器匹配的路径将被丢弃。</paragraph>
            <target refid="class-animationnode-constant-filter-blend"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationnode-constant-filter-blend" names="class_animationnode_constant_filter_blend"><reference internal="True" refid="enum-animationnode-filteraction"><inline classes="std std-ref">FilterAction</inline></reference> <strong>FILTER_BLEND</strong> = <literal>3</literal></paragraph>
            <paragraph>与筛选器匹配的路径将被混合（根据混合值）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-animationnode-property-filter-enabled"></target>
            <paragraph classes="classref-property" ids="class-animationnode-property-filter-enabled" names="class_animationnode_property_filter_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>filter_enabled</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_filter_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_filter_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用筛选功能。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-animationnode-private-method-get-caption"></target>
            <paragraph classes="classref-method" ids="class-animationnode-private-method-get-caption" names="class_animationnode_private_method__get_caption"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_caption</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>继承 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> 时，实现这个虚方法可以覆盖这个动画节点的标题文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-private-method-get-child-by-name"></target>
            <paragraph classes="classref-method" ids="class-animationnode-private-method-get-child-by-name" names="class_animationnode_private_method__get_child_by_name"><reference internal="True" refid="class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> <strong>_get_child_by_name</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>继承 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> 时，实现这个虚方法可以根据名称 <literal>name</literal> 来返回对应的子动画节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-private-method-get-child-nodes"></target>
            <paragraph classes="classref-method" ids="class-animationnode-private-method-get-child-nodes" names="class_animationnode_private_method__get_child_nodes"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_get_child_nodes</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>继承 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> 时，实现这个虚方法可以用 <literal>名称:节点</literal> 字典的形式按顺序返回所有子动画节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-private-method-get-parameter-default-value"></target>
            <paragraph classes="classref-method" ids="class-animationnode-private-method-get-parameter-default-value" names="class_animationnode_private_method__get_parameter_default_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_get_parameter_default_value</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> parameter <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>继承 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> 时，实现这个虚方法可以返回参数“<literal>parameter</literal>”的默认值。参数是动画节点的自定义本地存储，资源可以在多个树中重用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-private-method-get-parameter-list"></target>
            <paragraph classes="classref-method" ids="class-animationnode-private-method-get-parameter-list" names="class_animationnode_private_method__get_parameter_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>_get_parameter_list</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>继承 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> 时，实现这个虚方法可以返回这个节点的属性列表。参数是动画节点的自定义本地存储，资源可以在多个树中重用。格式与 <reference internal="True" refuri="class_object#class-object-method-get-property-list"><inline classes="std std-ref">Object.get_property_list</inline></reference> 类似。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-private-method-has-filter"></target>
            <paragraph classes="classref-method" ids="class-animationnode-private-method-has-filter" names="class_animationnode_private_method__has_filter"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_filter</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>继承 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> 时，实现这个虚方法可以返回混合树编辑器是否应该在这个动画节点上显示过滤器编辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-private-method-is-parameter-read-only"></target>
            <paragraph classes="classref-method" ids="class-animationnode-private-method-is-parameter-read-only" names="class_animationnode_private_method__is_parameter_read_only"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_parameter_read_only</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> parameter <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>继承 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> 时，实现这个虚方法可以返回参数 <literal>parameter</literal> 是否只读。参数是动画节点的自定义本地存储，资源可以在多个树中重用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-private-method-process"></target>
            <paragraph classes="classref-method" ids="class-animationnode-private-method-process" names="class_animationnode_private_method__process"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_process</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> seek, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> is_external_seeking, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> test_only <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>继承 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> 时，实现这个虚方法可以在这个动画节点进行处理时执行代码。参数 <literal>time</literal> 是相对增量，除非 <literal>seek</literal> 为 <literal>true</literal>，此时为绝对增量。</paragraph>
            <paragraph>请在此处调用 <reference internal="True" refid="class-animationnode-method-blend-input"><inline classes="std std-ref">blend_input</inline></reference>、<reference internal="True" refid="class-animationnode-method-blend-node"><inline classes="std std-ref">blend_node</inline></reference> 或 <reference internal="True" refid="class-animationnode-method-blend-animation"><inline classes="std std-ref">blend_animation</inline></reference> 函数。你也可以使用 <reference internal="True" refid="class-animationnode-method-get-parameter"><inline classes="std std-ref">get_parameter</inline></reference> 和 <reference internal="True" refid="class-animationnode-method-set-parameter"><inline classes="std std-ref">set_parameter</inline></reference> 来修改本地存储。</paragraph>
            <paragraph>这个函数应当返回当前动画还需多少时间完成（不确定的话，请传递调用主混合的值）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-add-input"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-add-input" names="class_animationnode_method_add_input"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>add_input</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>为节点添加一个输入。这只对创建用于 <reference internal="True" refuri="class_animationnodeblendtree#class-animationnodeblendtree"><inline classes="std std-ref">AnimationNodeBlendTree</inline></reference> 的动画节点有用。如果添加失败，返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-blend-animation"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-blend-animation" names="class_animationnode_method_blend_animation">void <strong>blend_animation</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> animation, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> delta, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> seeked, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> is_external_seeking, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> blend, <reference internal="True" refuri="class_animation#enum-animation-loopedflag"><inline classes="std std-ref">LoopedFlag</inline></reference> looped_flag=0 <strong>)</strong></paragraph>
            <paragraph>按 <literal>blend</literal> 量混合一个动画（名称必须在链接的 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 中有效）。可以传入时间 <literal>time</literal> 和增量 <literal>delta</literal>，以及表示是否发生寻道的 <literal>seeked</literal>。</paragraph>
            <paragraph><literal>looped_flag</literal> 在循环后立即由内部处理使用。另见 <reference internal="True" refuri="class_animation#enum-animation-loopedflag"><inline classes="std std-ref">LoopedFlag</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-blend-input"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-blend-input" names="class_animationnode_method_blend_input"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>blend_input</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> input_index, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> seek, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> is_external_seeking, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> blend, <reference internal="True" refid="enum-animationnode-filteraction"><inline classes="std std-ref">FilterAction</inline></reference> filter=0, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> sync=true, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> test_only=false <strong>)</strong></paragraph>
            <paragraph>混合一个输入。这只对为 <reference internal="True" refuri="class_animationnodeblendtree#class-animationnodeblendtree"><inline classes="std std-ref">AnimationNodeBlendTree</inline></reference> 创建的动画节点有用。时间参数 <literal>time</literal> 是一个相对的增量，除非 <literal>seek</literal> 是 <literal>true</literal>，此时它是绝对的。可以选择传入过滤模式（选项请参阅 <reference internal="True" refid="enum-animationnode-filteraction"><inline classes="std std-ref">FilterAction</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-blend-node"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-blend-node" names="class_animationnode_method_blend_node"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>blend_node</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refid="class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference> node, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> time, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> seek, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> is_external_seeking, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> blend, <reference internal="True" refid="enum-animationnode-filteraction"><inline classes="std std-ref">FilterAction</inline></reference> filter=0, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> sync=true, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> test_only=false <strong>)</strong></paragraph>
            <paragraph>混合另一个动画节点（在这个动画节点包含子动画节点的情况下）。这个函数只有在你继承 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> 时才有用，否则编辑器在添加节点时不会显示你的动画节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-find-input"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-find-input" names="class_animationnode_method_find_input"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>find_input</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回与名称 <literal>name</literal> 相关的输入索引，如果不存在则返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-get-input-count"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-get-input-count" names="class_animationnode_method_get_input_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_input_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>这个动画节点的输入数量，只对进入 <reference internal="True" refuri="class_animationnodeblendtree#class-animationnodeblendtree"><inline classes="std std-ref">AnimationNodeBlendTree</inline></reference> 的动画节点有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-get-input-name"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-get-input-name" names="class_animationnode_method_get_input_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_input_name</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> input <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>通过索引获取输入的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-get-parameter"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-get-parameter" names="class_animationnode_method_get_parameter"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_parameter</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取一个参数的值。参数是你的动画节点使用的自定义本地内存，给定的资源可以在多个树中重复使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-is-path-filtered"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-is-path-filtered" names="class_animationnode_method_is_path_filtered"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_path_filtered</strong> <strong>(</strong> <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定路径是否被过滤。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-remove-input"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-remove-input" names="class_animationnode_method_remove_input">void <strong>remove_input</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong></paragraph>
            <paragraph>移除输入，仅在处于非活动状态时调用此输入。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-set-filter-path"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-set-filter-path" names="class_animationnode_method_set_filter_path">void <strong>set_filter_path</strong> <strong>(</strong> <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> path, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enable <strong>)</strong></paragraph>
            <paragraph>添加或移除筛选器的路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-set-input-name"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-set-input-name" names="class_animationnode_method_set_input_name"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>set_input_name</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> input, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>在给定的 <literal>input</literal> 索引处设置输入的名称。如果设置失败，返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnode-method-set-parameter"></target>
            <paragraph classes="classref-method" ids="class-animationnode-method-set-parameter" names="class_animationnode_method_set_parameter">void <strong>set_parameter</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>设置一个自定义参数。这些参数被用作本地内存，因为资源可以在树或场景中重复使用。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
