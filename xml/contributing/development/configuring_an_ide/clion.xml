<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/configuring_an_ide/clion.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-configuring-an-ide-clion"></target>
    <section dupnames="clion" ids="clion doc-configuring-an-ide-clion" names="doc_configuring_an_ide_clion">
        <title>CLion</title>
        <paragraph><reference name="CLion" refuri="https://www.jetbrains.com/clion/">CLion</reference><target ids="clion" names="clion" refuri="https://www.jetbrains.com/clion/"></target> 是一个商业化的 <reference name="JetBrains" refuri="https://www.jetbrains.com/">JetBrains</reference><target ids="jetbrains" names="jetbrains" refuri="https://www.jetbrains.com/"></target> C++ IDE。</paragraph>
        <section ids="importing-the-project" names="importing\ the\ project 导入项目">
            <title>导入项目</title>
            <paragraph>CLion can import a project's <reference name="compilation database file" refuri="https://clang.llvm.org/docs/JSONCompilationDatabase.html">compilation database file</reference><target ids="compilation-database-file" names="compilation\ database\ file" refuri="https://clang.llvm.org/docs/JSONCompilationDatabase.html"></target>, commonly named <literal>compile_commands.json</literal>. To generate the compilation database file, open the terminal, change to the Godot root directory, and run:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">scons compiledb=yes</literal_block>
            <paragraph>Then, open the Godot root directory with CLion. CLion will import the compilation database, index the codebase, and provide autocompletion and other advanced code navigation and refactoring functionality.</paragraph>
        </section>
        <section ids="compiling-and-debugging-the-project" names="compiling\ and\ debugging\ the\ project 项目的编译与调试">
            <title>项目的编译与调试</title>
            <paragraph>CLion does not support compiling and debugging Godot via SCons out of the box. This can be achieved by creating a custom build target and run configuration in CLion. Before creating a custom build target, you must <reference internal="True" refuri="../compiling/index#toc-devel-compiling"><inline classes="std std-ref">compile Godot</inline></reference> once on the command line, to generate the Godot executable. Open the terminal, change into the Godot root directory, and execute:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">scons dev_build=yes</literal_block>
            <paragraph>To add a custom build target that invokes SCons for compilation:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Open CLion and navigate to <strong>Preferences &gt; Build, Execution, Deployment &gt; Custom Build Targets</strong></paragraph>
                </list_item>
            </bullet_list>
            <figure align="center">
                <image candidates="{'*': 'contributing/development/configuring_an_ide/img/clion-preferences.png'}" uri="contributing/development/configuring_an_ide/img/clion-preferences.png"></image>
            </figure>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Click <strong>Add target</strong> and give the target a name, e.g. <literal>Godot debug</literal>.</paragraph>
                </list_item>
            </bullet_list>
            <figure align="center">
                <image candidates="{'*': 'contributing/development/configuring_an_ide/img/clion-target.png'}" uri="contributing/development/configuring_an_ide/img/clion-target.png"></image>
            </figure>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Click <strong>...</strong> next to the <strong>Build:</strong> selectbox, then click the <strong>+</strong> button in the <strong>External Tools</strong> dialog to add a new external tool.</paragraph>
                </list_item>
            </bullet_list>
            <figure align="center">
                <image candidates="{'*': 'contributing/development/configuring_an_ide/img/clion-external-tools.png'}" uri="contributing/development/configuring_an_ide/img/clion-external-tools.png"></image>
            </figure>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Give the tool a name, e.g. <literal>Build Godot debug</literal>, set <strong>Program</strong> to <literal>scons</literal>, set <strong>Arguments</strong> to the compilation settings you want (see <reference internal="True" refuri="../compiling/index#toc-devel-compiling"><inline classes="std std-ref">compiling Godot</inline></reference>), and set the <strong>Working directory</strong> to <literal>$ProjectFileDir$</literal>, which equals the Godot root directory. Click <strong>OK</strong> to create the tool.</paragraph>
                    <block_quote>
                        <note>
                            <paragraph>CLion 不会扩展类似 <literal>scons -j$(nproc)</literal> 这样的 shell 命令。请使用具体的值，例如 <literal>scons -j8</literal> 。</paragraph>
                        </note>
                    </block_quote>
                </list_item>
            </bullet_list>
            <figure align="center">
                <image candidates="{'*': 'contributing/development/configuring_an_ide/img/clion-create-build-tool.webp'}" uri="contributing/development/configuring_an_ide/img/clion-create-build-tool.webp"></image>
            </figure>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Back in the <strong>External Tools</strong> dialog, click the <strong>+</strong> again to add a second external tool for cleaning the Godot build via SCons. Give the tool a name, e.g. <literal>Clean Godot debug</literal>, set <strong>Program</strong> to <literal>scons</literal>, set <strong>Arguments</strong> to <literal>-c</literal> (which will clean the build), and set the <strong>Working directory</strong> to <literal>$ProjectFileDir$</literal>. Click <strong>OK</strong> to create the tool.</paragraph>
                </list_item>
            </bullet_list>
            <figure align="center">
                <image candidates="{'*': 'contributing/development/configuring_an_ide/img/clion-create-clean-tool.png'}" uri="contributing/development/configuring_an_ide/img/clion-create-clean-tool.png"></image>
            </figure>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Close the <strong>External Tools</strong> dialog. In the <strong>Custom Build Target</strong> dialog for the custom <literal>Godot debug</literal> build target, select the <strong>Build Godot debug</strong> tool from the <strong>Build</strong> select box, and select the <strong>Clean Godot debug</strong> tool from the <strong>Clean</strong> select box. Click <strong>OK</strong> to create the custom build target.</paragraph>
                </list_item>
            </bullet_list>
            <figure align="center">
                <image candidates="{'*': 'contributing/development/configuring_an_ide/img/clion-select-tools.png'}" uri="contributing/development/configuring_an_ide/img/clion-select-tools.png"></image>
            </figure>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>In the main IDE window, click <strong>Add Configuration</strong>.</paragraph>
                </list_item>
            </bullet_list>
            <figure align="center">
                <image candidates="{'*': 'contributing/development/configuring_an_ide/img/clion-add-configuration.png'}" uri="contributing/development/configuring_an_ide/img/clion-add-configuration.png"></image>
            </figure>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>In the <strong>Run/Debug Configuration</strong> dialog, click <strong>Add new...</strong>, then select <strong>Custom Build Application</strong> to create a new custom run/debug configuration.</paragraph>
                </list_item>
            </bullet_list>
            <figure align="center">
                <image candidates="{'*': 'contributing/development/configuring_an_ide/img/clion-add-custom-build-application.png'}" uri="contributing/development/configuring_an_ide/img/clion-add-custom-build-application.png"></image>
            </figure>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Give the run/debug configuration a name, e.g. <literal>Godot debug</literal>, select the <literal>Godot debug</literal> custom build target as the <strong>Target</strong>. Select the Godot executable in the <literal>bin/</literal> folder as the <strong>Executable</strong>, and set the <strong>Program arguments</strong> to <literal>--editor --path path-to-your-project/</literal>, where <literal>path-to-your-project/</literal> should be a path pointing to an existing Godot project. If you omit the <literal>--path</literal> argument, you will only be able to debug the Godot Project Manager window. Click <strong>OK</strong> to create the run/debug configuration.</paragraph>
                </list_item>
            </bullet_list>
            <figure align="center">
                <image candidates="{'*': 'contributing/development/configuring_an_ide/img/clion-run-configuration.png'}" uri="contributing/development/configuring_an_ide/img/clion-run-configuration.png"></image>
            </figure>
            <paragraph>You can now build, run, debug, profile, and Valgrind check the Godot editor via the run configuration.</paragraph>
            <figure align="center">
                <image candidates="{'*': 'contributing/development/configuring_an_ide/img/clion-build-run.png'}" uri="contributing/development/configuring_an_ide/img/clion-build-run.png"></image>
            </figure>
            <paragraph>When playing a scene, the Godot editor will spawn a separate process. You can debug this process in CLion by going to <strong>Run &gt; Attach to process...</strong>, typing <literal>godot</literal>, and selecting the Godot process with the highest <strong>pid</strong> (process ID), which will usually be the running project.</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
