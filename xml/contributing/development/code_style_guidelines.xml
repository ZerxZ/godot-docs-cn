<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/code_style_guidelines.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-code-style-guidelines"></target>
    <section ids="code-style-guidelines doc-code-style-guidelines" names="code\ style\ guidelines 代码风格规范 doc_code_style_guidelines">
        <title>代码风格规范</title>
        <paragraph>在给 Godot 的源代码做贡献时，你需要遵循下面概述的样式规范。其中一些是通过持续集成过程进行检查的，评审人员将要求你修复潜在的问题，因此最好按照下面概述的方式设置系统，以确保所有提交都遵循规范。</paragraph>
        <section ids="c-and-objective-c" names="c++\ and\ objective-c c++\ 和\ objective-c">
            <title>C++ 和 Objective-C</title>
            <paragraph>There are no written guidelines, but the code style agreed upon by the
                developers is enforced via the <reference name="clang-format" refuri="https://clang.llvm.org/docs/ClangFormat.html">clang-format</reference>
                code beautifier, which takes care for you of all our conventions.
                To name a few:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>缩进和对齐都是基于制表符的（分别是一个和两个制表符）</paragraph>
                </list_item>
                <list_item>
                    <paragraph>数学和赋值运算符以及逗号后面有一个空格</paragraph>
                </list_item>
                <list_item>
                    <paragraph>指针和引用运算符附加到变量标识符，而不是类型名称</paragraph>
                </list_item>
                <list_item>
                    <paragraph>有关头文件的引入，请参见下文</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Clang 格式使用的规则在 Godot 仓库的 <reference name=".clang-format" refuri="https://github.com/godotengine/godot/blob/master/.clang-format">.clang-format</reference> 文件中进行了概述。</paragraph>
            <paragraph>As long as you ensure that your style matches the surrounding code and that you
                not introducing trailing whitespace or space-based indentation, you should be
                fine. If you plan to contribute regularly, however, we strongly advise that you
                set up clang-format locally to check and automatically fix all your commits.</paragraph>
            <warning>
                <paragraph>Godot's code style should <emphasis>not</emphasis> be applied to third-party code,
                    i.e. that is included in Godot's source tree but was not written
                    specifically for our project. Such code usually comes from
                    different upstream projects with their own style guides (or lack
                    thereof), and don't want to introduce differences that would make
                    syncing with upstream repositories harder.</paragraph>
                <paragraph>第三方代码通常包含在 <literal>thirdparty/</literal> 文件夹中, 因此可以很容易地从格式化脚本中排除. 在极少数情况下, 第三方代码片段需要直接包含在Godot文件中, 你可以使用 <literal>/* clang-format off */</literal> 和 <literal>/* clang-format on */</literal> 来告诉clang-format忽略某块儿的代码.</paragraph>
            </warning>
            <seealso>
                <paragraph>这些规范只涉及代码的格式化。拉取请求中所允许的语言特性列表请参阅 <reference internal="True" refuri="cpp_usage_guidelines#doc-cpp-usage-guidelines"><inline classes="std std-ref">C++ 使用规范</inline></reference>。</paragraph>
            </seealso>
            <section ids="using-clang-format-locally" names="using\ clang-format\ locally 在本地使用\ clang-format">
                <title>在本地使用 clang-format</title>
                <paragraph>首先，你需要安装 clang-format。截至目前，你需要使用 <strong>clang-format 13</strong> 才能与 Godot 的格式兼容。后续版本可能也能用，但更早的版本就可能无法支持所有用到的选项，或者使用不同的格式，导致拉取请求存在样式问题。</paragraph>
                <section dupnames="installation" ids="installation" names="安装">
                    <title>安装</title>
                    <paragraph>以下是如何安装 clang-format：</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>Linux: It will usually be available out-of-the-box with the clang toolchain
                                packaged by your distribution. If your distro version is not the required one,
                                you can download a pre-compiled version from the
                                <reference name="LLVM website" refuri="https://releases.llvm.org/download.html">LLVM website</reference>, or if you are on
                                a Debian derivative, use the <reference name="upstream repos" refuri="https://apt.llvm.org/">upstream repos</reference>.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>macOS and Windows: You can download precompiled binaries from the
                                <reference name="LLVM website" refuri="https://releases.llvm.org/download.html">LLVM website</reference>. You may need to add
                                the path to the binary's folder to your system's <literal>PATH</literal> environment
                                variable to be able to call <literal>clang-format</literal> out of the box.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>然后, 你就有不同的可能性将clang-format应用于你的更改:</paragraph>
                </section>
                <section dupnames="manual\ usage" ids="manual-usage" names="手动使用">
                    <title>手动使用</title>
                    <paragraph>You can apply clang-format manually for one or more files with the following
                        command:</paragraph>
                    <literal_block force="False" language="shell" linenos="False" xml:space="preserve">clang-format -i &lt;path/to/file(s)&gt;</literal_block>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph><literal>-i</literal> 表示更改应直接写入文件(默认情况下,clang-format只会将固定版本输出到终端).</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>该路径可以指向几个文件, 一个接一个, 也可以使用如在典型的Unix shell中的通配符. 在通配时要小心, 以免对Godot树中的已编译对象(.o和.a文件)运行clang格式. 因此, 最好使用 <literal>core/*. {cpp,h}</literal> 而不是 <literal>core/*</literal>.</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
                <section dupnames="pre-commit\ hook" ids="pre-commit-hook" names="预提交钩子">
                    <title>预提交钩子</title>
                    <paragraph>为了易于使用, 我们为Git提供了一个预提交钩子, 它将在你的所有提交上自动运行clang-format来检查它们, 并允许你在最终提交中应用其更改.</paragraph>
                    <paragraph>This "hook" is a script that can be found in <literal>misc/hooks</literal>, refer to that
                        folder's README.md for installation instructions.</paragraph>
                    <paragraph>如果你的clang-format不在 <literal>PATH</literal> 中, 你可能需要编辑 <literal>pre-commit-clang-format</literal> 来指向正确的二进制格式才能工作. 钩子在Linux和macOS上测试过, 但也应该在Windows上的Git Shell中运行.</paragraph>
                </section>
                <section ids="ide-plugin" names="ide\ plugin ide插件">
                    <title>IDE插件</title>
                    <paragraph>Most IDEs or code editors have beautifier plugins that can be configured to run
                        clang-format automatically, for example, each time you save a file.</paragraph>
                    <paragraph>以下是一些IDE的美化插件的非详尽列表:</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>Qt Creator: <reference name="Beautifier plugin" refuri="https://doc.qt.io/qtcreator/creator-beautifier.html">Beautifier plugin</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Visual Studio Code：<reference name="Clang-Format" refuri="https://marketplace.visualstudio.com/items?itemName=xaver.clang-format">Clang-Format</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Visual Studio: <reference name="Clang Power Tools 2022" refuri="https://marketplace.visualstudio.com/items?itemName=caphyon.ClangPowerTools2022">Clang Power Tools 2022</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>vim：<reference name="vim-clang-format" refuri="https://github.com/rhysd/vim-clang-format">vim-clang-format</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>CLion：从 <literal>2019.1</literal> 版本起不再需要插件。启用 <reference name="ClangFormat" refuri="https://www.jetbrains.com/help/clion/clangformat-as-alternative-formatter.html#clion-support">ClangFormat</reference> 即可</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>(Pull requests are welcome to extend this list with tested plugins.)</paragraph>
                    <target refid="doc-code-style-guidelines-header-includes"></target>
                </section>
            </section>
            <section ids="header-includes doc-code-style-guidelines-header-includes" names="header\ includes 头文件的引入 doc_code_style_guidelines_header_includes">
                <title>头文件的引入</title>
                <paragraph>当添加新的C++或Objective-C文件或在现有文件中引入新的标头时, 应遵循以下规则:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>文件中的第一行应该是Godot的版权标头和MIT许可证, 从另一个文件复制粘贴. 确保调整文件名.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在 <literal>.h</literal> 头文件中, 引入防护应该与 <literal>FILENAME_H</literal> 形式一起使用.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在 <literal>.cpp</literal> 文件(如 <literal>filename.cpp</literal> )中, 第一个引入应该是声明类的那个(例如 <literal>#include "filename.h"</literal>), 然后使用空行分隔.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>然后来自Godot自己的代码库的标头, 按字母顺序(由 <literal>clang-format</literal> 强制)引入, 并具有相对于根文件夹的路径. 这些引入应该用引号来完成, 例如 <literal>#include "core/object.h"</literal>. 然后,Godot标头引入的块应用一个空行以进行分隔.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>最后, 第三方头文件(无论是来自 <literal>thirdparty</literal> 还是来自系统的包含路径)接下来, 应该用 &lt; and &gt; 符号包含, 例如 <literal>#include &lt;png.h&gt;</literal> . 第三方头文件块的后面也应该有一个空行来分隔.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Godot和第三方标头应包含在需要它们的文件中, 即, 如果在声明性代码中使用, 则在 <title_reference>.h</title_reference> 标头中；如果仅在命令性代码中使用, 则在 <title_reference>.cpp</title_reference> 中.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>示例：</paragraph>
                <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/**************************************************************************/
/*  my_new_file.h                                                         */
/**************************************************************************/
/*                         This file is part of:                          */
/*                             GODOT ENGINE                               */
/*                        https://godotengine.org                         */
/**************************************************************************/
/* Copyright (c) 2014-present Godot Engine contributors (see AUTHORS.md). */
/* Copyright (c) 2007-2014 Juan Linietsky, Ariel Manzur.                  */
/*                                                                        */
/* Permission is hereby granted, free of charge, to any person obtaining  */
/* a copy of this software and associated documentation files (the        */
/* "Software"), to deal in the Software without restriction, including    */
/* without limitation the rights to use, copy, modify, merge, publish,    */
/* distribute, sublicense, and/or sell copies of the Software, and to     */
/* permit persons to whom the Software is furnished to do so, subject to  */
/* the following conditions:                                              */
/*                                                                        */
/* The above copyright notice and this permission notice shall be         */
/* included in all copies or substantial portions of the Software.        */
/*                                                                        */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE      */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 */
/**************************************************************************/

#ifndef MY_NEW_FILE_H
#define MY_NEW_FILE_H

#include "core/hash_map.h"
#include "core/list.h"
#include "scene/gui/control.h"

#include &lt;png.h&gt;

...

#endif // MY_NEW_FILE_H</literal_block>
                <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/**************************************************************************/
/*  my_new_file.cpp                                                       */
/**************************************************************************/
/*                         This file is part of:                          */
/*                             GODOT ENGINE                               */
/*                        https://godotengine.org                         */
/**************************************************************************/
/* Copyright (c) 2014-present Godot Engine contributors (see AUTHORS.md). */
/* Copyright (c) 2007-2014 Juan Linietsky, Ariel Manzur.                  */
/*                                                                        */
/* Permission is hereby granted, free of charge, to any person obtaining  */
/* a copy of this software and associated documentation files (the        */
/* "Software"), to deal in the Software without restriction, including    */
/* without limitation the rights to use, copy, modify, merge, publish,    */
/* distribute, sublicense, and/or sell copies of the Software, and to     */
/* permit persons to whom the Software is furnished to do so, subject to  */
/* the following conditions:                                              */
/*                                                                        */
/* The above copyright notice and this permission notice shall be         */
/* included in all copies or substantial portions of the Software.        */
/*                                                                        */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE      */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 */
/**************************************************************************/

#include "my_new_file.h"

#include "core/math/math_funcs.h"
#include "scene/gui/line_edit.h"

#include &lt;zlib.h&gt;
#include &lt;zstd.h&gt;</literal_block>
            </section>
        </section>
        <section ids="java" names="java">
            <title>Java</title>
            <paragraph>Godot的Java代码(主要在 <literal>platform/android</literal> 中)也是通过 <literal>clang-format</literal> 来执行的, 所以请看上面的说明来设置它. 请记住, 本风格规则只适用于Godot编写和维护的代码, 而不是第三方代码, 如 <literal>java/src/com/google</literal> 子文件夹.</paragraph>
        </section>
        <section ids="python" names="python">
            <title>Python</title>
            <paragraph>Godot的SCons构建系统是用Python编写的, 源代码树中包含的各种脚本也使用Python.</paragraph>
            <paragraph>对于这些, 我们遵循 <reference name="黑色风格指南" refuri="https://github.com/psf/black#the-黑色代码样式">黑色风格指南</reference> . 使用 <reference name="Black使Python 更改变黑" refuri="https://pypi.org/project/black/">Black使Python 更改变黑</reference> .</paragraph>
            <section ids="using-black-locally" names="using\ black\ locally 本地使用\ black">
                <title>本地使用 black</title>
                <paragraph>首先你需要安装 Black。Black 需要 Python 3.7+ 才能运行。</paragraph>
                <section dupnames="installation" ids="id1" names="安装">
                    <title>安装</title>
                    <paragraph>下面介绍如何安装black:</paragraph>
                    <literal_block force="False" language="shell" linenos="False" xml:space="preserve">pip3 install black --user</literal_block>
                    <paragraph>然后, 你有不同的可能性将黑色应用于你的更改:</paragraph>
                </section>
                <section dupnames="manual\ usage" ids="id2" names="手动使用">
                    <title>手动使用</title>
                    <paragraph>你可以使用以下命令将 <literal>black</literal> 手动应用于一个或多个文件:</paragraph>
                    <literal_block force="False" language="shell" linenos="False" xml:space="preserve">black -l 120 &lt;path/to/file(s)&gt;</literal_block>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph><literal>-l 120</literal> 表示每行允许的字符数为 120。这个数字是经过开发者们商定的。</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>该路径可以指向多个文件, 可以一个接一个, 也可以像典型的unixshell一样使用通配符.</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
                <section dupnames="pre-commit\ hook" ids="id3" names="预提交钩子">
                    <title>预提交钩子</title>
                    <paragraph>为了便于使用, 我们为Git提供了一个预提交钩子, 它将在你的所有提交上自动运行以检查你的提交, 并让你在最终提交中应用其更改.</paragraph>
                    <paragraph>这个 "hook" 是一个脚本, 可以在 <literal>misc/hooks</literal> 中找到. 请参考该文件夹的 <literal>README.md</literal> , 了解安装说明.</paragraph>
                </section>
                <section ids="editor-integration" names="editor\ integration 编辑器集成">
                    <title>编辑器集成</title>
                    <paragraph>Many IDEs or code editors have beautifier plugins that can be configured to run
                        black automatically, for example, each time you save a file. For details, you can
                        check <reference name="Black editor integration" refuri="https://github.com/psf/black#editor-integration">Black editor integration</reference>.</paragraph>
                </section>
            </section>
        </section>
        <section ids="comment-style-guide" names="comment\ style\ guide 注释风格指南">
            <title>注释风格指南</title>
            <paragraph>本注释风格指南适用于Godot代码库中使用的所有编程语言.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>以空间字符开始注释, 以将其与禁用代码区分开来.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>注释使用句子大小写. 注释以大写字母开头, 并始终以句号结束.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用反引号引用变量和函数名和值.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>将注释控制在~100个字符。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>You can use <literal>TODO:</literal>, <literal>FIXME:</literal>, <literal>NOTE:</literal>, or <literal>HACK:</literal> as admonitions
                        when needed.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>示例:</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">// Compute the first 10,000 decimals of Pi.
// FIXME: Don't crash when computing the 1,337th decimal due to `increment`
//        being negative.</literal_block>
            <paragraph>不要在注释中重复代码的内容. 解释 <emphasis>为什么</emphasis> 而不是 <emphasis>如何</emphasis> .</paragraph>
            <paragraph><strong>错误做法：</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">// Draw loading screen.
draw_load_screen();</literal_block>
            <paragraph>你可以在函数或宏定义上面使用Javadoc风格的注释. 建议只对不公开给脚本的方法使用Javadoc风格的注释. 这是因为公开的方法应该在 <reference internal="True" refuri="../documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">class reference XML</inline></reference> 中进行记录.</paragraph>
            <paragraph><strong>示例:</strong></paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/**
 * Returns the number of nodes in the universe.
 * This can potentially be a very large number, hence the 64-bit return type.
 */
uint64_t Universe::get_node_count() {
    // ...
}</literal_block>
            <paragraph>对于成员变量, 不要使用Javadoc式的注释, 而是使用单行注释:</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">class Universe {
    // The cached number of nodes in the universe.
    // This value may not always be up-to-date with the current number of nodes
    // in the universe.
    uint64_t node_count_cached = 0;
};</literal_block>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
