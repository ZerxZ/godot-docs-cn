<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/debugging/using_cpp_profilers.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-using-cpp-profilers"></target>
    <section ids="using-c-profilers doc-using-cpp-profilers" names="using\ c++\ profilers 使用\ c++\ 性能分析器 doc_using_cpp_profilers">
        <title>使用 C++ 性能分析器</title>
        <paragraph>要优化 Godot 的性能，你首先得知道要优化什么，性能分析器在这方面非常有用。</paragraph>
        <note>
            <paragraph>There is a <reference internal="True" refuri="../../../tutorials/scripting/debug/the_profiler#doc-the-profiler"><inline classes="std std-ref">built-in GDScript profiler</inline></reference> in the editor,
                but using C++ profiler may be useful in cases where the GDScript profiler
                is not accurate enough or is missing information due to bugs in the profiler.</paragraph>
        </note>
        <section ids="recommended-profilers" names="recommended\ profilers 性能分析器推荐">
            <title>性能分析器推荐</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="VerySleepy" refuri="http://www.codersnotes.com/sleepy/">VerySleepy</reference> （仅适用于 Windows）</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="HotSpot" refuri="https://github.com/KDAB/hotspot">HotSpot</reference> （仅适用于 Linux）</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Xcode Instruments" refuri="https://developer.apple.com/xcode/">Xcode Instruments</reference> （仅适用于 macOS）</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>这些性能分析器可能不是最强大或者最灵活的，但它们独立的操作和有限的功能非常易用。</paragraph>
        </section>
        <section ids="setting-up-godot" names="setting\ up\ godot 设置\ godot">
            <title>设置 Godot</title>
            <paragraph>如果要获取有用的性能分析信息，就<strong>必须</strong>使用包含调试符号的 Godot 构建。官方二进制文件并不包含调试符号，因为会显著增加文件下载大小。</paragraph>
            <paragraph>如果想要获取与生产环境最接近的性能分析数据，你应该使用如下 SCons 选项来编译程序。</paragraph>
            <paragraph>It is possible to run a profiler on less optimized builds (e.g. <literal>target=template_debug</literal> without LTO),
                but results will naturally be less representative of real world conditions.</paragraph>
            <warning>
                <paragraph><emphasis>请勿</emphasis>在编译完成后使用 <literal>strip</literal> 命令剥离调试符号，否则运行性能分析器时无法得到有用的信息。</paragraph>
            </warning>
        </section>
        <section ids="benchmarking-startup-shutdown-times" names="benchmarking\ startup/shutdown\ times 测量启动/关闭耗时">
            <title>测量启动/关闭耗时</title>
            <paragraph>如果想要尝试优化 Godot 的启动/关闭性能，你可以让分析器使用 Godot 二进制文件的 <literal>--quit</literal> 命令行参数，它会让 Godot 在启动完成后立即退出。<literal>--quit</literal> 参数可以和 <literal>--editor</literal>、<literal>--project-manager</literal>、<literal>--path &lt;项目目录路径&gt;</literal>（该参数可以直接运行项目）搭配使用。</paragraph>
            <seealso>
                <paragraph>更多 Godot 支持的命令行参数见 <reference internal="True" refuri="../../../tutorials/editor/command_line_tutorial#doc-command-line-tutorial"><inline classes="std std-ref">命令行教程</inline></reference>。</paragraph>
            </seealso>
        </section>
        <section ids="profiler-specific-instructions" names="profiler-specific\ instructions 性能分析器指令">
            <title>性能分析器指令</title>
            <section ids="verysleepy" names="verysleepy">
                <title>VerySleepy</title>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Start the Godot editor or your project first.
                            If you start the Project Manager, make sure to edit or run a project first.
                            Otherwise, the profiler will not track the child process since the Project Manager
                            will spawn a child process for every project edited or run.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>打开 VerySleepy 然后在左侧的进程列表中选中 Godot 程序：</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'contributing/development/debugging/img/cpp_profiler_verysleepy_select_process.png'}" uri="contributing/development/debugging/img/cpp_profiler_verysleepy_select_process.png"></image>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>点击右侧的 <strong>Profile All</strong> 按钮开始性能分析。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在编辑器或者项目中执行你想分析性能的操作，完成后点击 <strong>Stop</strong>（注意<emphasis>不是</emphasis> Abort）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>等待出现结果窗口。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>结果窗口出现后，在视图中筛选掉外部模块（例如图形驱动）。筛选模块的方法是，首先找到 <strong>Module</strong> 和 Godot 可执行文件名称一致的行，在那一行上单击右键，然后在下拉菜单中选择 <strong>Filter Module to &lt;Godot 可执行文件名&gt;</strong> 。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>结果窗口现在应该类似这样：</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'contributing/development/debugging/img/cpp_profiler_verysleepy_results_filtered.png'}" uri="contributing/development/debugging/img/cpp_profiler_verysleepy_results_filtered.png"></image>
            </section>
            <section ids="hotspot" names="hotspot">
                <title>HotSpot</title>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>打开 HotSpot。点击 <strong>Record Data</strong>：</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'contributing/development/debugging/img/cpp_profiler_hotspot_welcome.png'}" uri="contributing/development/debugging/img/cpp_profiler_hotspot_welcome.png"></image>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>在下一个窗口中，指定包含调试符号的 Godot 可执行文件的路径。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>指定运行项目所使用的命令行参数，用不用编辑器运行都行。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>如果 <literal>--path</literal> 参数使用的是绝对路径，那么工作目录的路径可以任选。否则应该可以在工作目录使用相对路径访问项目。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>如果你有管理员权限，请勾选 <strong>Elevate Privileges（提升权限）</strong>。虽然不是对 Godot 进行性能分析所必需的，这样做可以保证捕捉到所有事件，否则有些事件可能会被漏掉。你的设置现在应该类似这样：</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'contributing/development/debugging/img/cpp_profiler_hotspot_record.png'}" uri="contributing/development/debugging/img/cpp_profiler_hotspot_record.png"></image>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>点击 <strong>Start Recording</strong> 然后在编辑器或者项目中执行需要分析性能的操作。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>你可以正常退出编辑器或者项目，也可以点击 HotSpot 里的 <strong>Stop Profiling</strong> 按钮来提前停止性能分析。如果你不在乎引擎本身的关闭过程，提前结束性能分析可以让分析结果更干净。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>点击 <strong>View Results</strong> 然后等待生成可视化性能分析结果：</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'contributing/development/debugging/img/cpp_profiler_hotspot_view_results.png'}" uri="contributing/development/debugging/img/cpp_profiler_hotspot_view_results.png"></image>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>使用顶部的选项卡可以切换不同的视图，这些视图是用不同的方式显示相同的数据。 <strong>Flame Graph（火焰图）</strong> 选项卡里可以很直观地找到哪些函数占用的时间最长。这些函数就是终点优化对象了，因为优化后可以显著提升性能。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>除了 <strong>Summary</strong> 的其它选项卡底部都有一个引擎所开启的 CPU 线程列表，每个线程都列出了对应的 CPU 使用情况。你可以据此查看在特定时间点的瓶颈线程。</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'contributing/development/debugging/img/cpp_profiler_hotspot_flame_graph.png'}" uri="contributing/development/debugging/img/cpp_profiler_hotspot_flame_graph.png"></image>
                <note>
                    <paragraph>如果你不希望启动过程被包含在性能分析之中，也可以把 HotSpot 附加到正在运行的进程上，点击 <strong>Record Data</strong> 然后把 <strong>Launch Application</strong> 下拉选项设置成 <strong>Attach To Process(es)</strong> 即可。</paragraph>
                    <paragraph>这样基于附加到进程的工作流和 VerySleepy 比较类似。</paragraph>
                </note>
            </section>
            <section ids="xcode-instruments" names="xcode\ instruments">
                <title>Xcode Instruments</title>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>打开 Xcode，在 <strong>Xcode</strong> 应用菜单中选择 <strong>Open Developer Tool</strong> - <strong>Instruments</strong> ：</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>双击 <strong>Instruments</strong> 窗口中的 <strong>Time Profiler</strong> ：</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'contributing/development/debugging/img/cpp_profiler_xcode_menu.png'}" uri="contributing/development/debugging/img/cpp_profiler_xcode_menu.png"></image>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>在 Timer Profiler 窗口中，点击 <strong>Target</strong> 菜单，选择 <strong>Choose target...</strong> 然后将路径设置为 Godot 可执行文件的路径，在下一个窗口中设置命令行参数和环境变量。</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'contributing/development/debugging/img/cpp_profiler_time_profiler.png'}" uri="contributing/development/debugging/img/cpp_profiler_time_profiler.png"></image>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>你也可以把 Time Profiler 附加到正在运行的进程上，在 <strong>Target</strong> 菜单中选择即可。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>点击 <strong>Start an immediate mode recording</strong> 按钮开始性能分析。</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'contributing/development/debugging/img/cpp_profiler_time_profiler_record.png'}" uri="contributing/development/debugging/img/cpp_profiler_time_profiler_record.png"></image>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>在编辑器或者项目中执行要分析性能的操作，完成后点击 <strong>Stop</strong> 按钮。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>等待结果出现。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>窗口底部会显示所有被启动的 CPU 线程的调用树，以及一个 <strong>Heaviest Stack Trace</strong> 总览。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在（窗口底部的） <strong>Call Tree</strong> 菜单中选择 <strong>Hide system libraries</strong> 可以移除外部模块。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>你可以使用窗口顶部的时间线来控制只显示特定时间段内的详细信息。</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'contributing/development/debugging/img/cpp_profiler_time_profiler_result.png'}" uri="contributing/development/debugging/img/cpp_profiler_time_profiler_result.png"></image>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
