<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/core_and_modules/unit_testing.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-unit-testing"></target>
    <section ids="unit-testing doc-unit-testing" names="unit\ testing 单元测试 doc_unit_testing">
        <title>单元测试</title>
        <paragraph>Godot Engine allows to write unit tests directly in C++. The engine integrates
            the <reference name="doctest" refuri="https://github.com/onqtam/doctest">doctest</reference><target ids="doctest" names="doctest" refuri="https://github.com/onqtam/doctest"></target> unit testing framework which
            gives ability to write test suites and test cases next to production code, but
            since the tests in Godot go through a different <literal>main</literal> entry point, the tests
            reside in a dedicated <literal>tests/</literal> directory instead, which is located at the root
            of the engine source code.</paragraph>
        <section ids="platform-and-target-support" names="platform\ and\ target\ support 平台及目标支持">
            <title>平台及目标支持</title>
            <paragraph>C++ unit tests can be run on Linux, macOS, and Windows operating systems.</paragraph>
            <paragraph>Tests can only be run with editor <literal>tools</literal> enabled, which means that export
                templates cannot be tested currently.</paragraph>
        </section>
        <section ids="running-tests" names="running\ tests 运行测试">
            <title>运行测试</title>
            <paragraph>Before tests can be actually run, the engine must be compiled with the <literal>tests</literal>
                build option enabled (and any other build option you typically use), as the
                tests are not compiled as part of the engine by default:</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">scons tests=yes</literal_block>
            <paragraph>Once the build is done, run the tests with a <literal>--test</literal> command-line option:</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">./bin/&lt;godot_binary&gt; --test</literal_block>
            <paragraph>The test run can be configured with the various doctest-specific command-line
                options. To retrieve the full list of supported options, run the <literal>--test</literal>
                command with the <literal>--help</literal> option:</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">./bin/&lt;godot_binary&gt; --test --help</literal_block>
            <paragraph>Any other options and arguments after the <literal>--test</literal> command are treated as
                arguments for doctest.</paragraph>
            <note>
                <paragraph>Tests are compiled automatically if you use the <literal>dev_mode=yes</literal> SCons option.
                    <literal>dev_mode=yes</literal> is recommended if you plan on contributing to the engine
                    development as it will automatically treat compilation warnings as errors.
                    The continuous integration system will fail if any compilation warnings are
                    detected, so you should strive to fix all warnings before opening a pull
                    request.</paragraph>
            </note>
            <section ids="filtering-tests" names="filtering\ tests 筛选测试">
                <title>筛选测试</title>
                <paragraph>By default, all tests are run if you don't supply any extra arguments after the
                    <literal>--test</literal> command. But if you're writing new tests or would like to see the
                    successful assertions output coming from those tests for debugging purposes, you
                    can run the tests of interest with the various filtering options provided by
                    doctest.</paragraph>
                <paragraph>The wildcard syntax <literal>*</literal> is supported for matching any number of characters in
                    test suites, test cases, and source file names:</paragraph>
                <table>
                    <tgroup cols="3">
                        <colspec colwidth="20"></colspec>
                        <colspec colwidth="15"></colspec>
                        <colspec colwidth="24"></colspec>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph><strong>Filter options</strong></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><strong>Shorthand</strong></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><strong>Examples</strong></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>--test-suite</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>-ts</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>-ts="*[GDScript]*"</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>--test-case</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>-tc</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>-tc="*[String]*"</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>--source-file</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>-sf</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>-sf="*test_color*"</literal></paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <paragraph>For instance, to run only the <literal>String</literal> unit tests, run:</paragraph>
                <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">./bin/&lt;godot_binary&gt; --test --test-case="*[String]*"</literal_block>
                <paragraph>Successful assertions output can be enabled with the <literal>--success</literal> (<literal>-s</literal>)
                    option, and can be combined with any combination of filtering options above,
                    for instance:</paragraph>
                <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">./bin/&lt;godot_binary&gt; --test --source-file="*test_color*" --success</literal_block>
                <paragraph>Specific tests can be skipped with corresponding <literal>-exclude</literal> options. As of
                    now, some tests include random stress tests which take a while to execute. In
                    order to skip those kind of tests, run the following command:</paragraph>
                <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">./bin/&lt;godot_binary&gt; --test --test-case-exclude="*[Stress]*"</literal_block>
            </section>
        </section>
        <section ids="writing-tests" names="writing\ tests">
            <title>Writing tests</title>
            <paragraph>Test suites represent C++ header files which must be included as part of the
                main test entry point in <literal>tests/test_main.cpp</literal>. Most test suites are located
                directly under <literal>tests/</literal> directory.</paragraph>
            <paragraph>All header files are prefixed with <literal>test_</literal>, and this is a naming convention
                which the Godot build system relies on to detect tests throughout the engine.</paragraph>
            <paragraph>Here's a minimal working test suite with a single test case written:</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">#ifndef TEST_STRING_H
#define TEST_STRING_H

#include "tests/test_macros.h"

namespace TestString {

TEST_CASE("[String] Hello World!") {
    String hello = "Hello World!";
    CHECK(hello == "Hello World!");
}

} // namespace TestString

#endif // TEST_STRING_H</literal_block>
            <paragraph>The <literal>tests/test_macros.h</literal> header encapsulates everything which is needed for
                writing C++ unit tests in Godot. It includes doctest assertion and logging
                macros such as <literal>CHECK</literal> as seen above, and of course the definitions for
                writing test cases themselves.</paragraph>
            <seealso>
                <paragraph><reference name="tests/test_macros.h" refuri="https://github.com/godotengine/godot/blob/master/tests/test_macros.h">tests/test_macros.h</reference><target ids="tests-test-macros-h" names="tests/test_macros.h" refuri="https://github.com/godotengine/godot/blob/master/tests/test_macros.h"></target>
                    source code for currently implemented macros and aliases for them.</paragraph>
            </seealso>
            <paragraph>Test cases are created using <literal>TEST_CASE</literal> function-like macro. Each test case
                must have a brief description written in parentheses, optionally including
                custom tags which allow to filter the tests at run-time, such as <literal>[String]</literal>,
                <literal>[Stress]</literal> etc.</paragraph>
            <paragraph>Test cases are written in a dedicated namespace. This is not required, but
                allows to prevent naming collisions for when other static helper functions are
                written to accommodate the repeating testing procedures such as populating
                common test data for each test, or writing parameterized tests.</paragraph>
            <paragraph>Godot supports writing tests per C++ module. For instructions on how to write
                module tests, refer to <reference internal="True" refuri="custom_modules_in_cpp#doc-custom-module-unit-tests"><inline classes="std std-ref">编写自定义单元测试</inline></reference>.</paragraph>
            <section ids="assertions" names="assertions 断言">
                <title>断言</title>
                <paragraph>Godot 测试中常用的断言列表，按严格程度排序。</paragraph>
                <table>
                    <tgroup cols="2">
                        <colspec colwidth="19"></colspec>
                        <colspec colwidth="130"></colspec>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph><strong>断言</strong></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><strong>描述</strong></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>REQUIRE</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>检查条件是否成立。如果条件不成立则会立即让整个测试失败。</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>REQUIRE_FALSE</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>检查条件是否不成立。如果条件成立则会立即让整个测试失败。</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>CHECK</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>检查条件是否成立。会将测试表示为失败，但允许运行其他断言。</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>CHECK_FALSE</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>检查条件是否不成立。会将测试表示为失败，但允许运行其他断言。</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>WARN</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>检查条件是否成立。任何情况下都不会让测试失败，但是不成立时会记录一条警告。</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>WARN_FALSE</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>检查条件是否不成立。任何情况下都不会让测试失败，但是成立时会记录一条警告。</paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <paragraph>以上断言都有对应的 <literal>*_MESSAGE</literal> 宏，能够在原有行为的基础上输出可选的消息。</paragraph>
                <paragraph>对于能够自我说明的断言请尽量使用 <literal>CHECK</literal>，如果你认为相对复杂的断言需要更好的解释再使用 <literal>CHECK_MESSAGE</literal>。</paragraph>
                <seealso>
                    <paragraph><reference name="doctest: 断言宏" refuri="https://github.com/onqtam/doctest/blob/master/doc/markdown/assertions.md">doctest: 断言宏</reference><target ids="doctest" names="doctest:\ 断言宏" refuri="https://github.com/onqtam/doctest/blob/master/doc/markdown/assertions.md"></target>。</paragraph>
                </seealso>
            </section>
            <section ids="logging" names="logging 日志">
                <title>日志</title>
                <paragraph>The test output is handled by doctest itself, and does not rely on Godot
                    printing or logging functionality at all, so it's recommended to use dedicated
                    macros which allow to log test output in a format written by doctest.</paragraph>
                <table>
                    <tgroup cols="2">
                        <colspec colwidth="16"></colspec>
                        <colspec colwidth="107"></colspec>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph><strong>Macro</strong></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><strong>描述</strong></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>MESSAGE</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Prints a message.</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>FAIL_CHECK</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Marks the test as failing, but continue the execution. Can be wrapped in conditionals for complex checks.</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>FAIL</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Fails the test immediately. Can be wrapped in conditionals for complex checks.</paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <paragraph>Different reporters can be chosen at run-time. For instance, here's how the
                    output can be redirected to a XML file:</paragraph>
                <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">./bin/&lt;godot_binary&gt; --test --source-file="*test_validate*" --success --reporters=xml --out=doctest.txt</literal_block>
                <seealso>
                    <paragraph><reference name="doctest: Logging macros" refuri="https://github.com/onqtam/doctest/blob/master/doc/markdown/logging.md">doctest: Logging macros</reference><target ids="doctest-logging-macros" names="doctest:\ logging\ macros" refuri="https://github.com/onqtam/doctest/blob/master/doc/markdown/logging.md"></target>.</paragraph>
                </seealso>
            </section>
            <section ids="testing-failure-paths" names="testing\ failure\ paths">
                <title>Testing failure paths</title>
                <paragraph>Sometimes, it's not always feasible to test for an <emphasis>expected</emphasis> result. With the
                    Godot development philosophy of that the engine should not crash and should
                    gracefully recover whenever a non-fatal error occurs, it's important to check
                    that those failure paths are indeed safe to execute without crashing the engine.</paragraph>
                <paragraph><emphasis>Unexpected</emphasis> behavior can be tested in the same way as anything else. The only
                    problem this creates is that the error printing shall unnecessarily pollute the
                    test output with errors coming from the engine itself (even if the end result is
                    successful).</paragraph>
                <paragraph>To alleviate this problem, use <literal>ERR_PRINT_OFF</literal> and <literal>ERR_PRINT_ON</literal> macros
                    directly within test cases to temporarily disable the error output coming from
                    the engine, for instance:</paragraph>
                <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">TEST_CASE("[Color] Constructor methods") {
    ERR_PRINT_OFF;
    Color html_invalid = Color::html("invalid");
    ERR_PRINT_ON; // Don't forget to re-enable!

    CHECK_MESSAGE(html_invalid.is_equal_approx(Color()),
        "Invalid HTML notation should result in a Color with the default values.");
}</literal_block>
            </section>
        </section>
        <section ids="test-tools" names="test\ tools">
            <title>Test tools</title>
            <paragraph>Test tools are advanced methods which allow you to run arbitrary procedures to
                facilitate the process of manual testing and debugging the engine internals.</paragraph>
            <paragraph>These tools can be run by supplying the name of a tool after the <literal>--test</literal>
                command-line option. For instance, the GDScript module implements and registers
                several tools to help the debugging of the tokenizer, parser, and compiler:</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">./bin/&lt;godot_binary&gt; --test gdscript-tokenizer test.gd
./bin/&lt;godot_binary&gt; --test gdscript-parser test.gd
./bin/&lt;godot_binary&gt; --test gdscript-compiler test.gd</literal_block>
            <paragraph>If any such tool is detected, then the rest of the unit tests are skipped.</paragraph>
            <paragraph>Test tools can be registered anywhere throughout the engine as the registering
                mechanism closely resembles of what doctest provides while registering test
                cases using dynamic initialization technique, but usually these can be
                registered at corresponding <literal>register_types.cpp</literal> sources (per module or core).</paragraph>
            <paragraph>Here's an example of how GDScript registers test tools in
                <literal>modules/gdscript/register_types.cpp</literal>:</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">#ifdef TESTS_ENABLED
void test_tokenizer() {
    TestGDScript::test(TestGDScript::TestType::TEST_TOKENIZER);
}

void test_parser() {
    TestGDScript::test(TestGDScript::TestType::TEST_PARSER);
}

void test_compiler() {
    TestGDScript::test(TestGDScript::TestType::TEST_COMPILER);
}

REGISTER_TEST_COMMAND("gdscript-tokenizer", &amp;test_tokenizer);
REGISTER_TEST_COMMAND("gdscript-parser", &amp;test_parser);
REGISTER_TEST_COMMAND("gdscript-compiler", &amp;test_compiler);
#endif</literal_block>
            <paragraph>The custom command-line parsing can be performed by a test tool itself with the
                help of OS <reference internal="True" refuri="../../../classes/class_os#class-os-method-get-cmdline-args"><inline classes="std std-ref">get_cmdline_args</inline></reference> method.</paragraph>
        </section>
        <section ids="integration-tests-for-gdscript" names="integration\ tests\ for\ gdscript">
            <title>Integration tests for GDScript</title>
            <paragraph>Godot uses doctest to prevent regressions in GDScript during development. There
                are several types of test scripts which can be written:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>tests for expected errors;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>tests for warnings;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>特性列表。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Therefore, the process of writing integration tests for GDScript is the following:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Pick a type of a test script you'd like to write, and create a new GDScript
                        file under the <literal>modules/gdscript/tests/scripts</literal> directory within
                        corresponding sub-directory.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Write GDScript code. The test script must have a function called <literal>test()</literal>
                        which takes no arguments. Such function will be called by the test runner.
                        The test should not have any dependency unless it's part of the test too.
                        Global classes (using <literal>class_name</literal>) are registered before the runner
                        starts, so those should work if needed.</paragraph>
                    <paragraph>Here's an example test script:</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func test():
    if true # Missing colon here.
        print("true")</literal_block>
                </list_item>
                <list_item>
                    <paragraph>将目录切换到 Godot 源码仓库的根目录。</paragraph>
                    <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">cd godot</literal_block>
                </list_item>
                <list_item>
                    <paragraph>Generate <literal>*.out</literal> files to update the expected results from the output:</paragraph>
                    <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">bin/&lt;godot_binary&gt; --gdscript-generate-tests modules/gdscript/tests/scripts</literal_block>
                </list_item>
            </enumerated_list>
            <paragraph>You may add the <literal>--print-filenames</literal> option to see filenames as their test
                outputs are generated. If you are working on a new feature that is causing
                hard crashes, you can use this option to quickly find which test file causes
                the crash and debug from there.</paragraph>
            <enumerated_list enumtype="arabic" prefix="" start="5" suffix=".">
                <list_item>
                    <paragraph>GDScript 导出：</paragraph>
                    <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">./bin/&lt;godot_binary&gt; --test --test-suite="*GDScript*"</literal_block>
                </list_item>
            </enumerated_list>
            <paragraph>This also accepts the <literal>--print-filenames</literal> option (see above).</paragraph>
            <paragraph>If no errors are printed and everything goes well, you're done!</paragraph>
            <warning>
                <paragraph>Make sure the output does have the expected values before submitting a pull
                    request. If <literal>--gdscript-generate-tests</literal> produces <literal>*.out</literal> files which are
                    unrelated to newly added tests, you should revert those files back and
                    only commit <literal>*.out</literal> files for new tests.</paragraph>
            </warning>
            <note>
                <paragraph>The GDScript test runner is meant for testing the GDScript implementation,
                    not for testing user scripts nor testing the engine using scripts. We
                    recommend writing new tests for already resolved
                    <reference name="issues related to GDScript at GitHub" refuri="https://github.com/godotengine/godot/issues?q=is%3Aissue+label%3Atopic%3Agdscript+is%3Aclosed">issues related to GDScript at GitHub</reference><target ids="issues-related-to-gdscript-at-github" names="issues\ related\ to\ gdscript\ at\ github" refuri="https://github.com/godotengine/godot/issues?q=is%3Aissue+label%3Atopic%3Agdscript+is%3Aclosed"></target>,
                    or writing tests for currently working features.</paragraph>
            </note>
            <note>
                <paragraph>If your test case requires that there is no <literal>test()</literal>
                    function present inside the script file,
                    you can disable the runtime section of the test by naming the script file so that it matches the pattern <literal>*.notest.gd</literal>.
                    For example, "test_empty_file.notest.gd".</paragraph>
            </note>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
