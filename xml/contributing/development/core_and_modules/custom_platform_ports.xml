<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/core_and_modules/custom_platform_ports.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-custom-platform-ports"></target>
    <section ids="custom-platform-ports doc-custom-platform-ports" names="custom\ platform\ ports 自定义平台的移植 doc_custom_platform_ports">
        <title>自定义平台的移植</title>
        <paragraph>Similar to <reference internal="True" refuri="custom_modules_in_cpp#doc-custom-modules-in-cpp"><inline classes="std std-ref">自定义 C++ 模块</inline></reference>, Godot's multi-platform architecture
            is designed in a way that allows creating platform ports without modifying any
            existing source code.</paragraph>
        <paragraph>An example of a custom platform port distributed independently from the engine
            is <reference name="FRT" refuri="https://github.com/efornara/frt">FRT</reference>, which targets single-board
            computers. Note that this platform port currently targets Godot 3.x; therefore,
            it does not use the <reference internal="True" refuri="../../../classes/class_displayserver#class-displayserver"><inline classes="std std-ref">DisplayServer</inline></reference> abstraction that is new in Godot 4.</paragraph>
        <paragraph>创建自定义平台移植可能有以下原因：</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>You want to <reference internal="True" refuri="../../../tutorials/platform/consoles#doc-consoles"><inline classes="std std-ref">port your game to consoles</inline></reference>, but wish to
                    write the platform layer yourself. This is a long and arduous process, as it
                    requires signing NDAs with console manufacturers, but it allows you to have
                    full control over the console porting process.</paragraph>
            </list_item>
            <list_item>
                <paragraph>You want to port Godot to an exotic platform that isn't currently supported.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>If you have questions about creating a custom platform port, feel free to ask in
            the <literal>#platforms</literal> channel of the
            <reference name="Godot Contributors Chat" refuri="https://chat.godotengine.org/channel/platforms">Godot Contributors Chat</reference>.</paragraph>
        <note>
            <paragraph>Godot is a modern engine with modern requirements. Even if you only
                intend to run simple 2D projects on the target platform, it still requires
                an amount of memory that makes it unviable to run on most retro consoles.
                For reference, in Godot 4, an empty project with nothing visible requires
                about 100 MB of RAM to run on Linux (50 MB in headless mode).</paragraph>
            <paragraph>If you want to run Godot on heavily memory-constrained platforms, older
                Godot versions have lower memory requirements. The porting process is
                similar, with the exception of <reference internal="True" refuri="../../../classes/class_displayserver#class-displayserver"><inline classes="std std-ref">DisplayServer</inline></reference> not being split
                from the <reference internal="True" refuri="../../../classes/class_os#class-os"><inline classes="std std-ref">OS</inline></reference> singleton.</paragraph>
        </note>
        <section ids="official-platform-ports" names="official\ platform\ ports">
            <title>Official platform ports</title>
            <paragraph>The official platform ports can be used as a reference when creating a custom platform port:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="Windows" refuri="https://github.com/godotengine/godot/tree/master/platform/windows">Windows</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="macOS" refuri="https://github.com/godotengine/godot/tree/master/platform/macos">macOS</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Linux/*BSD" refuri="https://github.com/godotengine/godot/tree/master/platform/linuxbsd">Linux/*BSD</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Android" refuri="https://github.com/godotengine/godot/tree/master/platform/android">Android</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="iOS" refuri="https://github.com/godotengine/godot/tree/master/platform/ios">iOS</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Web" refuri="https://github.com/godotengine/godot/tree/master/platform/web">Web</reference></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>While platform code is usually self-contained, there are exceptions to this
                rule. For instance, audio drivers that are shared across several platforms and
                rendering backends are located in the
                <reference name="drivers/ folder" refuri="https://github.com/godotengine/godot/tree/master/drivers">drivers/ folder</reference>
                of the Godot source code.</paragraph>
        </section>
        <section ids="creating-a-custom-platform-port" names="creating\ a\ custom\ platform\ port 创建自定义平台移植">
            <title>创建自定义平台移植</title>
            <paragraph>Creating a custom platform port is a large undertaking which requires prior
                knowledge of the platform's SDKs. Depending on what features you need, the
                amount of work needed varies:</paragraph>
            <section ids="required-features-of-a-platform-port" names="required\ features\ of\ a\ platform\ port 平台移植需要的功能">
                <title>平台移植需要的功能</title>
                <paragraph>At the very least, a platform port must have methods from the <reference internal="True" refuri="../../../classes/class_os#class-os"><inline classes="std std-ref">OS</inline></reference>
                    singleton implemented to be buildable and usable for headless operation.
                    A <literal>logo.svg</literal> (32×32) vector image must also be present within the platform
                    folder. This logo is displayed in the Export dialog for each export preset
                    targeting the platform in question.</paragraph>
                <paragraph>See <reference name="this implementation" refuri="https://github.com/godotengine/godot/blob/master/platform/linuxbsd/os_linuxbsd.cpp">this implementation</reference>
                    for the Linux/*BSD platform as an example. See also the
                    <reference name="OS singleton header" refuri="https://github.com/godotengine/godot/blob/master/core/os/os.h">OS singleton header</reference>
                    for reference.</paragraph>
                <note>
                    <paragraph>If your target platform is UNIX-like, consider inheriting from the <literal>OS_Unix</literal>
                        class to get much of the work done automatically.</paragraph>
                    <paragraph>If the platform is not UNIX-like, you might use the
                        <title_reference>Windows port &lt;https://github.com/godotengine/godot/blob/master/platform/windows/os_windows.cpp&gt;</title_reference>
                        as a reference.</paragraph>
                </note>
                <paragraph><strong>detect.py 文件</strong></paragraph>
                <paragraph>A <literal>detect.py</literal> file must be created within the platform's folder with all
                    methods implemented. This file is required for SCons to detect the platform as a
                    valid option for compiling. See the
                    <reference name="detect.py file" refuri="https://github.com/godotengine/godot/blob/master/platform/linuxbsd/detect.py">detect.py file</reference>
                    for the Linux/*BSD platform as an example.</paragraph>
                <paragraph><literal>detect.py</literal> 应实现如下所有方法：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal>is_active()</literal>: Can be used to temporarily disable building for a platform.
                            This should generally always return <literal>True</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>get_name()</literal>: Returns the platform's user-visible name as a string.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>can_build()</literal>: Return <literal>True</literal> if the host system is able to build for the
                            target platform, <literal>False</literal> otherwise. Do not put slow checks here, as this is
                            queried when the list of platforms is requested by the user. Use
                            <literal>configure()</literal> for extensive dependency checks instead.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>get_opts()</literal>: Returns the list of SCons build options that can be defined by
                            the user for this platform.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>get_flags()</literal>: Returns the list of overridden SCons flags for this platform.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>configure()</literal>: Perform build configuration, such as selecting compiler
                            options depending on SCons options chosen.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="optional-features-of-a-platform-port" names="optional\ features\ of\ a\ platform\ port 平台移植的可选功能">
                <title>平台移植的可选功能</title>
                <paragraph>In practice, headless operation doesn't suffice if you want to see anything on
                    screen and handle input devices. You may also want audio output for most
                    games.</paragraph>
                <paragraph><emphasis>Some links on this list point to the Linux/*BSD platform implementation as a reference.</emphasis></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>One or more <reference name="DisplayServers" refuri="https://github.com/godotengine/godot/blob/master/platform/linuxbsd/x11/display_server_x11.cpp">DisplayServers</reference>,
                            with the windowing methods implemented. DisplayServer also covers features such
                            as mouse support, touchscreen support and tablet driver (for pen input).
                            See the
                            <reference name="DisplayServer singleton header" refuri="https://github.com/godotengine/godot/blob/master/servers/display_server.h">DisplayServer singleton header</reference>
                            for reference.</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>For platforms not featuring full windowing support (or if it's not relevant
                                    for the port you are making), most windowing functions can be left mostly
                                    unimplemented. These functions can be made to only check if the window ID is
                                    <literal>MAIN_WINDOW_ID</literal> and specific operations like resizing may be tied to the
                                    platform's screen resolution feature (if relevant). Any attempt to create
                                    or manipulate other window IDs can be rejected.</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph><emphasis>If the target platform supports the graphics APIs in question:</emphasis> Rendering
                            context for <reference name="Vulkan" refuri="https://github.com/godotengine/godot/blob/master/platform/linuxbsd/x11/vulkan_context_x11.cpp">Vulkan</reference>,
                            <reference name="OpenGL 3.3 or OpenGL ES 3.0" refuri="https://github.com/godotengine/godot/blob/master/platform/linuxbsd/x11/gl_manager_x11.cpp">OpenGL 3.3 or OpenGL ES 3.0</reference>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Input handlers for <reference name="keyboard" refuri="https://github.com/godotengine/godot/blob/master/platform/linuxbsd/x11/key_mapping_x11.cpp">keyboard</reference>
                            and <reference name="controller" refuri="https://github.com/godotengine/godot/blob/master/platform/linuxbsd/joypad_linux.cpp">controller</reference>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>One or more <reference name="audio drivers" refuri="https://github.com/godotengine/godot/blob/master/drivers/pulseaudio/audio_driver_pulseaudio.cpp">audio drivers</reference>.
                            The audio driver can be located in the <literal>platform/</literal> folder (this is done for
                            the Android and Web platforms), or in the <literal>drivers/</literal> folder if multiple
                            platforms may be using this audio driver. See the
                            <reference name="AudioServer singleton header" refuri="https://github.com/godotengine/godot/blob/master/servers/audio_server.h">AudioServer singleton header</reference>
                            for reference.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Crash handler" refuri="https://github.com/godotengine/godot/blob/master/platform/linuxbsd/crash_handler_linuxbsd.cpp">Crash handler</reference>,
                            for printing crash backtraces when the game crashes. This allows for easier
                            troubleshooting on platforms where logs aren't readily accessible.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="core/io/fileaccess.h" refuri="https://github.com/godotengine/godot/blob/master/core/os/file_access.h">core/io/fileaccess.h</reference><target ids="core-io-fileaccess-h" names="core/io/fileaccess.h" refuri="https://github.com/godotengine/godot/blob/master/core/os/file_access.h"></target> 。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Export handler" refuri="https://github.com/godotengine/godot/tree/master/platform/linuxbsd/export">Export handler</reference>
                            (for exporting from the editor, including <reference internal="True" refuri="../../../tutorials/export/one-click_deploy#doc-one-click-deploy"><inline classes="std std-ref">一键部署</inline></reference>).
                            Not required if you intend to export only a PCK from the editor, then run the
                            export template binary directly by renaming it to match the PCK file. See the
                            <reference name="EditorExportPlatform header" refuri="https://github.com/godotengine/godot/blob/master/editor/export/editor_export_platform.h">EditorExportPlatform header</reference>
                            for reference.
                            <literal>run_icon.svg</literal> (16×16) should be present within the platform folder if
                            <reference internal="True" refuri="../../../tutorials/export/one-click_deploy#doc-one-click-deploy"><inline classes="std std-ref">一键部署</inline></reference> is implemented for the target platform. This icon
                            is displayed at the top of the editor when one-click deploy is set up for the
                            target platform.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>If the target platform doesn't support running Vulkan, OpenGL 3.3 or OpenGL ES 3.0,
                    you have two options:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Use a library at run-time to translate Vulkan or OpenGL calls to another graphics API.
                            For example, <reference name="MoltenVK" refuri="https://moltengl.com/moltenvk/">MoltenVK</reference> is used on macOS
                            to translate Vulkan to Metal at run-time.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Create a new renderer from scratch. This is a large undertaking, especially if
                            you want to support both 2D and 3D rendering with advanced features.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="distributing-a-custom-platform-port" names="distributing\ a\ custom\ platform\ port">
            <title>Distributing a custom platform port</title>
            <warning>
                <paragraph>Before distributing a custom platform port, make sure you're allowed to
                    distribute all the code that is being linked against. Console SDKs are
                    typically under NDAs which prevent redistribution to the public.</paragraph>
            </warning>
            <paragraph>Platform ports are designed to be as self-contained as possible. Most of the
                code can be kept within a single folder located in <literal>platform/</literal>. Like
                <reference internal="True" refuri="custom_modules_in_cpp#doc-custom-modules-in-cpp"><inline classes="std std-ref">自定义 C++ 模块</inline></reference>, this allows for streamlining the build process
                by making it possible to <literal>git clone</literal> a platform folder within a Godot repository
                clone's <literal>platform/</literal> folder, then run <literal>scons platform=&lt;name&gt;</literal>. No other steps are
                necessary for building, unless third-party platform-specific dependencies need
                to be installed first.</paragraph>
            <paragraph>However, when a custom rendering backend is needed, another folder must be added
                in <literal>drivers/</literal>. In this case, the platform port can be distributed as a fork of
                the Godot repository, or as a collection of several folders that can be added
                over a Godot Git repository clone.</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
