<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/core_and_modules/binding_to_external_libraries.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-binding-to-external-libraries"></target>
    <section ids="binding-to-external-libraries doc-binding-to-external-libraries" names="binding\ to\ external\ libraries 绑定到外部库 doc_binding_to_external_libraries">
        <title>绑定到外部库</title>
        <section ids="modules" names="modules 模块">
            <title>模块</title>
            <paragraph>The Summator example in <reference internal="True" refuri="custom_modules_in_cpp#doc-custom-modules-in-cpp"><inline classes="std std-ref">自定义 C++ 模块</inline></reference> is great for small,
                custom modules, but what if you want to use a larger, external library?
                Let's look at an example using <reference name="Festival" refuri="https://www.cstr.ed.ac.uk/projects/festival/">Festival</reference><target ids="festival" names="festival" refuri="https://www.cstr.ed.ac.uk/projects/festival/"></target>,
                a speech synthesis (text-to-speech) library written in C++.</paragraph>
            <paragraph>要绑定到外部库, 请设置类似于Summator示例的模块目录:</paragraph>
            <literal_block force="False" highlight_args="{}" language="none" linenos="False" xml:space="preserve">godot/modules/tts/</literal_block>
            <paragraph>Next, you will create a header file with a TTS class:</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* tts.h */

#ifndef GODOT_TTS_H
#define GODOT_TTS_H

#include "core/object/ref_counted.h"

class TTS : public RefCounted {
    GDCLASS(TTS, RefCounted);

protected:
    static void _bind_methods();

public:
    bool say_text(String p_txt);

    TTS();
};

#endif // GODOT_TTS_H</literal_block>
            <paragraph>然后你将添加cpp文件.</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* tts.cpp */

#include "tts.h"

#include &lt;festival.h&gt;

bool TTS::say_text(String p_txt) {

    //convert Godot String to Godot CharString to C string
    return festival_say_text(p_txt.ascii().get_data());
}

void TTS::_bind_methods() {

    ClassDB::bind_method(D_METHOD("say_text", "txt"), &amp;TTS::say_text);
}

TTS::TTS() {
    festival_initialize(true, 210000); //not the best way to do it as this should only ever be called once.
}</literal_block>
            <paragraph>和以前一样, 需要以某种方式注册新类, 因此还需要创建两个文件:</paragraph>
            <literal_block force="False" highlight_args="{}" language="none" linenos="False" xml:space="preserve">register_types.h
register_types.cpp</literal_block>
            <important>
                <paragraph>这些文件必须在你的模块的顶层文件夹中( <literal>SCsub</literal> 和 <literal>config.py</literal> 文件旁边), 这样模块才能被正确注册.</paragraph>
            </important>
            <paragraph>这些文件应包含以下内容:</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* register_types.h */

void initialize_tts_module(ModuleInitializationLevel p_level);
void uninitialize_tts_module(ModuleInitializationLevel p_level);
/* yes, the word in the middle must be the same as the module folder name */</literal_block>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* register_types.cpp */

#include "register_types.h"

#include "core/object/class_db.h"
#include "tts.h"

void initialize_tts_module(ModuleInitializationLevel p_level) {
    if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
        return;
    }
    ClassDB::register_class&lt;TTS&gt;();
}

void uninitialize_tts_module(ModuleInitializationLevel p_level) {
    // Nothing to do here in this example.
}</literal_block>
            <paragraph>接下来, 需要创建一个 <literal>SCsub</literal> 文件, 以便构建系统编译此模块:</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve"># SCsub

Import('env')

env_tts = env.Clone()
env_tts.add_source_files(env.modules_sources, "*.cpp") # Add all cpp files to the build</literal_block>
            <paragraph>你需要在自己的机器上安装该外部库才能获取 .a 库文件。至于如何在你的操作系统中一步步安装，请参考该库的官方文档。作为参考，我们这里包含了用来在 Linux 下安装命令。</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">sudo apt-get install festival festival-dev &lt;-- Installs festival and speech_tools libraries
apt-cache search festvox-* &lt;-- Displays list of voice packages
sudo apt-get install festvox-don festvox-rablpc16k festvox-kallpc16k festvox-kdlpc16k &lt;-- Installs voices</literal_block>
            <important>
                <paragraph>Festival使用的声音(以及任何其他潜在的外部/第三方资源)都有不同的许可证和使用条款；其中一些(如果不是大多数)可能会对Godot产生问题, 即使Festival库本身是与MIT许可证兼容. 请务必检查许可证和使用条款.</paragraph>
            </important>
            <paragraph>外部库也需要被安装到你的模块之中，这样编译器就可以访问到源代码，保持模块独立于外界环境。可以使用如下的 git 命令从 modules/tts/ 目录安装 festival 和 speech_tools：</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">git clone https://github.com/festvox/festival
git clone https://github.com/festvox/speech_tools</literal_block>
            <paragraph>如果不希望将外部仓库的源文件提交到你的仓库中，你可以通过将它们添加为子模块（从 <literal>modules/tts/</literal> 目录中）来链接它们，如下所示：</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">git submodule add https://github.com/festvox/festival
git submodule add https://github.com/festvox/speech_tools</literal_block>
            <important>
                <paragraph>Please note that Git submodules are not used in the Godot repository. If
                    you are developing a module to be merged into the main Godot repository, you should not
                    use submodules. If your module doesn't get merged in, you can always try to implement
                    the external library as a GDExtension.</paragraph>
            </important>
            <paragraph>要添加供编译器查看的包含目录, 可以将其追加到环境的路径中:</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve"># These paths are relative to /modules/tts/
env_tts.Append(CPPPATH=["speech_tools/include", "festival/src/include"])

# LIBPATH and LIBS need to be set on the real "env" (not the clone)
# to link the specified libraries to the Godot executable.

# This is a path relative to /modules/tts/ where your .a libraries reside.
# If you are compiling the module externally (not in the godot source tree),
# these will need to be full paths.
env.Append(LIBPATH=['libpath'])

# Check with the documentation of the external library to see which library
# files should be included/linked.
env.Append(LIBS=['Festival', 'estools', 'estbase', 'eststring'])</literal_block>
            <paragraph>如果要在构建模块时添加自定义编译器标志, 则需要首先克隆 <title_reference>env</title_reference>, 这样它就不会将这些标志添加到整个Godot构建中(这可能会导致错误). 带有自定义标志的示例 <title_reference>SCsub</title_reference>:</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve"># SCsub

Import('env')

env_tts = env.Clone()
env_tts.add_source_files(env.modules_sources, "*.cpp")
    # Append CCFLAGS flags for both C and C++ code.
env_tts.Append(CCFLAGS=['-O2'])
# If you need to, you can:
# - Append CFLAGS for C code only.
# - Append CXXFLAGS for C++ code only.</literal_block>
            <paragraph>最终模块应如下所示:</paragraph>
            <literal_block force="False" highlight_args="{}" language="none" linenos="False" xml:space="preserve">godot/modules/tts/festival/
godot/modules/tts/libpath/libestbase.a
godot/modules/tts/libpath/libestools.a
godot/modules/tts/libpath/libeststring.a
godot/modules/tts/libpath/libFestival.a
godot/modules/tts/speech_tools/
godot/modules/tts/config.py
godot/modules/tts/tts.h
godot/modules/tts/tts.cpp
godot/modules/tts/register_types.h
godot/modules/tts/register_types.cpp
godot/modules/tts/SCsub</literal_block>
        </section>
        <section ids="using-the-module" names="using\ the\ module 使用模块">
            <title>使用模块</title>
            <paragraph>现在, 你可以通过任何脚本使用新创建的模块:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var t = TTS.new()
var script = "Hello world. This is a test!"
var is_spoken = t.say_text(script)
print('is_spoken: ', is_spoken)</literal_block>
            <paragraph>如果说出文本, 输出将是 <literal>is_spoken:True</literal> .</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
