<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/core_and_modules/custom_resource_format_loaders.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-custom-resource-format-loaders"></target>
    <section ids="custom-resource-format-loaders doc-custom-resource-format-loaders" names="custom\ resource\ format\ loaders 自定义资源格式加载器 doc_custom_resource_format_loaders">
        <title>自定义资源格式加载器</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>ResourceFormatLoader 是一个用来加载文件资源的工厂接口。资源是基本容器。当再次对同一文件路径调用 load 时，将引用先前加载的 Resource。自然，加载的资源必须是无状态的。</paragraph>
            <paragraph>本指南假设读者已经知道如何创建 C++ 模块和 Godot 数据类型。如果你还不知道，请参考这份指南：<reference internal="True" refuri="custom_modules_in_cpp#doc-custom-modules-in-cpp"><inline classes="std std-ref">自定义 C++ 模块</inline></reference></paragraph>
            <section dupnames="references" ids="references" names="参考">
                <title>参考</title>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="True" refuri="../../../classes/class_resourceloader#class-resourceloader"><inline classes="std std-ref">ResourceLoader</inline></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="core/io/resource_loader.cpp" refuri="https://github.com/godotengine/godot/blob/master/core/io/resource_loader.cpp">core/io/resource_loader.cpp</reference><target ids="core-io-resource-loader-cpp" names="core/io/resource_loader.cpp" refuri="https://github.com/godotengine/godot/blob/master/core/io/resource_loader.cpp"></target></paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="what-for" names="what\ for? 可以做什么？">
            <title>可以做什么？</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>添加对多种文件格式的新支持</paragraph>
                </list_item>
                <list_item>
                    <paragraph>音频格式</paragraph>
                </list_item>
                <list_item>
                    <paragraph>视频格式</paragraph>
                </list_item>
                <list_item>
                    <paragraph>机器学习模型</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="what-not" names="what\ not? 不可以做什么？">
            <title>不可以做什么？</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>光栅图像</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>应使用ImageFormatLoader加载图像.</paragraph>
            <section dupnames="references" ids="id1" names="参考">
                <title>参考</title>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference name="core/io/image_loader.h" refuri="https://github.com/godotengine/godot/blob/master/core/io/image_loader.h">core/io/image_loader.h</reference><target ids="core-io-image-loader-h" names="core/io/image_loader.h" refuri="https://github.com/godotengine/godot/blob/master/core/io/image_loader.h"></target></paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="creating-a-resourceformatloader" names="creating\ a\ resourceformatloader 创建\ resourceformatloader">
            <title>创建 ResourceFormatLoader</title>
            <paragraph>每种文件格式都包含一个数据容器和一个 <literal>ResourceFormatLoader</literal>.</paragraph>
            <paragraph>ResourceFormatLoaders are classes which return all the
                necessary metadata for supporting new extensions in Godot. The
                class must return the format name and the extension string.</paragraph>
            <paragraph>此外,ResourceFormatLoaders 必须使用 <literal>load</literal> 函数将文件路径转换为资源(Resource). 要加载资源, <literal>load</literal> 必须能够读取和处理序列化的资源数据.</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* resource_loader_json.h */

#ifndef RESOURCE_LOADER_JSON_H
#define RESOURCE_LOADER_JSON_H

#include "core/io/resource_loader.h"

class ResourceFormatLoaderJson : public ResourceFormatLoader {
    GDCLASS(ResourceFormatLoaderJson, ResourceFormatLoader);
public:
    virtual RES load(const String &amp;p_path, const String &amp;p_original_path, Error *r_error = NULL);
    virtual void get_recognized_extensions(List&lt;String&gt; *r_extensions) const;
    virtual bool handles_type(const String &amp;p_type) const;
    virtual String get_resource_type(const String &amp;p_path) const;
};
#endif // RESOURCE_LOADER_JSON_H</literal_block>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* resource_loader_json.cpp */

#include "resource_loader_json.h"

#include "resource_json.h"

RES ResourceFormatLoaderJson::load(const String &amp;p_path, const String &amp;p_original_path, Error *r_error) {
Ref&lt;JsonResource&gt; json = memnew(JsonResource);
    if (r_error) {
            *r_error = OK;
    }
    Error err = json-&gt;load_file(p_path);
    return json;
}

void ResourceFormatLoaderJson::get_recognized_extensions(List&lt;String&gt; *r_extensions) const {
    if (!r_extensions-&gt;find("json")) {
            r_extensions-&gt;push_back("json");
    }
}

String ResourceFormatLoaderJson::get_resource_type(const String &amp;p_path) const {
    return "Resource";
}

bool ResourceFormatLoaderJson::handles_type(const String &amp;p_type) const {
    return ClassDB::is_parent_class(p_type, "Resource");
}</literal_block>
        </section>
        <section ids="creating-a-resourceformatsaver" names="creating\ a\ resourceformatsaver 创建\ resourceformatsaver">
            <title>创建 ResourceFormatSaver</title>
            <paragraph>如果你希望能够编辑和保存资源, 则可以实现 <literal>ResourceFormatSaver</literal>:</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* resource_saver_json.h */

#ifndef RESOURCE_SAVER_JSON_H
#define RESOURCE_SAVER_JSON_H

#include "core/io/resource_saver.h"

class ResourceFormatSaverJson : public ResourceFormatSaver {
    GDCLASS(ResourceFormatSaverJson, ResourceFormatSaver);
public:
    virtual Error save(const String &amp;p_path, const RES &amp;p_resource, uint32_t p_flags = 0);
    virtual bool recognize(const RES &amp;p_resource) const;
    virtual void get_recognized_extensions(const RES &amp;p_resource, List&lt;String&gt; *r_extensions) const;
};
#endif // RESOURCE_SAVER_JSON_H</literal_block>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* resource_saver_json.cpp */

#include "resource_saver_json.h"

#include "resource_json.h"
#include "scene/resources/resource_format_text.h"

Error ResourceFormatSaverJson::save(const String &amp;p_path, const RES &amp;p_resource, uint32_t p_flags) {
    Ref&lt;JsonResource&gt; json = memnew(JsonResource);
    Error error = json-&gt;save_file(p_path, p_resource);
    return error;
}

bool ResourceFormatSaverJson::recognize(const RES &amp;p_resource) const {
    return Object::cast_to&lt;JsonResource&gt;(*p_resource) != NULL;
}

void ResourceFormatSaverJson::get_recognized_extensions(const RES &amp;p_resource, List&lt;String&gt; *r_extensions) const {
    if (Object::cast_to&lt;JsonResource&gt;(*p_resource)) {
            r_extensions-&gt;push_back("json");
    }
}</literal_block>
        </section>
        <section ids="creating-custom-data-types" names="creating\ custom\ data\ types 创建自定义数据类型">
            <title>创建自定义数据类型</title>
            <paragraph>Godot在其 <reference internal="True" refuri="core_types#doc-core-types"><inline classes="std std-ref">核心类型</inline></reference> 或托管的资源中可能没有适当的替代品. 这时Godot需要新的注册数据类型来理解其他二进制格式, 例如机器学习模型.</paragraph>
            <paragraph>下面是创建自定义数据类型的示例:</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* resource_json.h */

#ifndef RESOURCE_JSON_H
#define RESOURCE_JSON_H

#include "core/io/json.h"
#include "core/variant_parser.h"

class JsonResource : public Resource {
    GDCLASS(JsonResource, Resource);

protected:
    static void _bind_methods() {
            ClassDB::bind_method(D_METHOD("set_dict", "dict"), &amp;JsonResource::set_dict);
            ClassDB::bind_method(D_METHOD("get_dict"), &amp;JsonResource::get_dict);

            ADD_PROPERTY(PropertyInfo(Variant::DICTIONARY, "content"), "set_dict", "get_dict");
    }

private:
    Dictionary content;

public:
    Error load_file(const String &amp;p_path);
    Error save_file(const String &amp;p_path, const RES &amp;p_resource);

    void set_dict(const Dictionary &amp;p_dict);
    Dictionary get_dict();
};
#endif // RESOURCE_JSON_H</literal_block>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* resource_json.cpp */

#include "resource_json.h"

Error JsonResource::load_file(const String &amp;p_path) {
    Error error;
    FileAccess *file = FileAccess::open(p_path, FileAccess::READ, &amp;error);
    if (error != OK) {
            if (file) {
                    file-&gt;close();
            }
            return error;
    }

    String json_string = String("");
    while (!file-&gt;eof_reached()) {
            json_string += file-&gt;get_line();
    }
    file-&gt;close();

    String error_string;
    int error_line;
    JSON json;
    Variant result;
    error = json.parse(json_string, result, error_string, error_line);
    if (error != OK) {
            file-&gt;close();
            return error;
    }

    content = Dictionary(result);
    return OK;
}

Error JsonResource::save_file(const String &amp;p_path, const RES &amp;p_resource) {
    Error error;
    FileAccess *file = FileAccess::open(p_path, FileAccess::WRITE, &amp;error);
    if (error != OK) {
            if (file) {
                    file-&gt;close();
            }
            return error;
    }

    Ref&lt;JsonResource&gt; json_ref = p_resource.get_ref_ptr();
    JSON json;

    file-&gt;store_string(json.print(json_ref-&gt;get_dict(), "    "));
    file-&gt;close();
    return OK;
}

void JsonResource::set_dict(const Dictionary &amp;p_dict) {
    content = p_dict;
}

Dictionary JsonResource::get_dict() {
    return content;
}</literal_block>
            <section ids="considerations" names="considerations 注意事项">
                <title>注意事项</title>
                <paragraph>一些库可能未定义 IO 处理等通用例程。因此，需要 Godot 调用转换。</paragraph>
                <paragraph>例如，下面是将 <literal>FileAccess</literal> 调用转换为 <literal>std::istream</literal> 的代码。</paragraph>
                <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">#include "core/os/file_access.h"

#include &lt;istream&gt;
#include &lt;streambuf&gt;

class GodotFileInStreamBuf : public std::streambuf {

public:
    GodotFileInStreamBuf(FileAccess *fa) {
            _file = fa;
    }
    int underflow() {
            if (_file-&gt;eof_reached()) {
                    return EOF;
            } else {
                    size_t pos = _file-&gt;get_position();
                    uint8_t ret = _file-&gt;get_8();
                    _file-&gt;seek(pos); // Required since get_8() advances the read head.
                    return ret;
            }
    }
    int uflow() {
            return _file-&gt;eof_reached() ? EOF : _file-&gt;get_8();
    }

private:
    FileAccess *_file;
};</literal_block>
            </section>
            <section dupnames="references" ids="id2" names="参考">
                <title>参考</title>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference name="istream" refuri="https://cplusplus.com/reference/istream/istream/">istream</reference><target ids="istream" names="istream" refuri="https://cplusplus.com/reference/istream/istream/"></target></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="streambuf" refuri="https://cplusplus.com/reference/streambuf/streambuf/?kw=streambuf">streambuf</reference><target ids="streambuf" names="streambuf" refuri="https://cplusplus.com/reference/streambuf/streambuf/?kw=streambuf"></target></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="core/io/file_access.h" refuri="https://github.com/godotengine/godot/blob/master/core/os/file_access.h">core/io/file_access.h</reference><target ids="core-io-file-access-h" names="core/io/file_access.h" refuri="https://github.com/godotengine/godot/blob/master/core/os/file_access.h"></target></paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="registering-the-new-file-format" names="registering\ the\ new\ file\ format 注册新的文件格式">
            <title>注册新的文件格式</title>
            <paragraph>Godot 用 <literal>ResourceLoader</literal> 处理程序注册 <literal>ResourcesFormatLoader</literal>. 当调用 <literal>load</literal> 时, 处理程序会自动选择合适的加载器.</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* register_types.h */

void register_json_types();
void unregister_json_types();</literal_block>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* register_types.cpp */

#include "register_types.h"

#include "core/class_db.h"
#include "resource_loader_json.h"
#include "resource_saver_json.h"
#include "resource_json.h"

static Ref&lt;ResourceFormatLoaderJson&gt; json_loader;
static Ref&lt;ResourceFormatSaverJson&gt; json_saver;

void register_json_types() {
    ClassDB::register_class&lt;JsonResource&gt;();

    json_loader.instantiate();
    ResourceLoader::add_resource_format_loader(json_loader);

    json_saver.instantiate();
    ResourceSaver::add_resource_format_saver(json_saver);
}

void unregister_json_types() {
    ResourceLoader::remove_resource_format_loader(json_loader);
    json_loader.unref();

    ResourceSaver::remove_resource_format_saver(json_saver);
    json_saver.unref();
}</literal_block>
            <section dupnames="references" ids="id3" names="参考">
                <title>参考</title>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference name="core/io/resource_loader.cpp" refuri="https://github.com/godotengine/godot/blob/master/core/io/resource_loader.cpp">core/io/resource_loader.cpp</reference><target dupnames="core/io/resource_loader.cpp" ids="id4" refuri="https://github.com/godotengine/godot/blob/master/core/io/resource_loader.cpp"></target></paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="loading-it-on-gdscript" names="loading\ it\ on\ gdscript 在\ gdscript\ 中加载">
            <title>在 GDScript 中加载</title>
            <paragraph>保存具有以下内容的名为 <literal>demo.json</literal> 的文件，并将其放置在项目的根文件夹中：</paragraph>
            <literal_block force="False" highlight_args="{}" language="json" linenos="False" xml:space="preserve">{
  "savefilename": "demo.json",
  "demo": [
    "welcome",
    "to",
    "godot",
    "resource",
    "loaders"
  ]
}</literal_block>
            <paragraph>创建一个节点并附加下面的脚本：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">extends Node

@onready var json_resource = load("res://demo.json")

func _ready():
    print(json_resource.get_dict())</literal_block>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
