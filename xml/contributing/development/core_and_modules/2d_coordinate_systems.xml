<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/core_and_modules/2d_coordinate_systems.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-2d-coordinate-systems"></target>
    <section ids="d-coordinate-systems-and-2d-transforms doc-2d-coordinate-systems" names="2d\ coordinate\ systems\ and\ 2d\ transforms 2d\ 坐标系与\ 2d\ 变换 doc_2d_coordinate_systems">
        <title>2D 坐标系与 2D 变换</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>This is a detailed overview of the available 2D coordinate systems and 2D transforms that are
                built in. The basic concepts are covered in <reference internal="True" refuri="../../../tutorials/2d/2d_transforms#doc-viewport-and-canvas-transforms"><inline classes="std std-ref">视口变换与画布变换</inline></reference>.</paragraph>
            <paragraph><reference internal="True" refuri="../../../classes/class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> are matrices that convert coordinates from one coordinate
                system to an other. In order to use them, it is beneficial to know which coordinate systems are
                available in Godot. For a deeper understanding, the <reference internal="True" refuri="../../../tutorials/math/matrices_and_transforms#doc-matrices-and-transforms"><inline classes="std std-ref">矩阵与变换</inline></reference> tutorial
                offers insights to the underlying functionality.</paragraph>
        </section>
        <section ids="godot-2d-coordinate-systems" names="godot\ 2d\ coordinate\ systems godot\ 2d\ 坐标系">
            <title>Godot 2D 坐标系</title>
            <paragraph>The following graphic gives an overview of Godot 2D coordinate systems and the available
                node-transforms, transform-functions and coordinate-system related functions. At the left
                is the OS Window Manager screen, at the right are the <reference internal="True" refuri="../../../classes/class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItems</inline></reference>. For
                simplicity reasons this graphic doesn't include <reference internal="True" refuri="../../../classes/class_subviewport#class-subviewport"><inline classes="std std-ref">SubViewport</inline></reference>,
                <reference internal="True" refuri="../../../classes/class_subviewportcontainer#class-subviewportcontainer"><inline classes="std std-ref">SubViewportContainer</inline></reference>, <reference internal="True" refuri="../../../classes/class_parallaxlayer#class-parallaxlayer"><inline classes="std std-ref">ParallaxLayer</inline></reference>
                and <reference internal="True" refuri="../../../classes/class_parallaxbackground#class-parallaxbackground"><inline classes="std std-ref">ParallaxBackground</inline></reference> all of which also influence transforms.</paragraph>
            <paragraph>The graphic is based on a node tree of the following form: <literal>Root Window (embed Windows)</literal> ⇒
                <literal>Window (don't embed Windows)</literal> ⇒ <literal>CanvasLayer</literal> ⇒ <literal>CanvasItem</literal> ⇒ <literal>CanvasItem</literal> ⇒
                <literal>CanvasItem</literal>. There are more complex combinations possible, like deeply nested Window and
                SubViewports, however this example intends to provide an overview of the methodology in general.</paragraph>
            <reference refuri="../../../_images/transforms_overview.webp"><image candidates="{'*': 'contributing/development/core_and_modules/img/transforms_overview.webp'}" uri="contributing/development/core_and_modules/img/transforms_overview.webp"></image></reference>
            <paragraph>单击图片放大。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>Item 坐标</strong></term>
                            <definition>
                                <paragraph>这是 <reference internal="True" refuri="../../../classes/class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 的局部坐标系。</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>父 Item 坐标</strong></term>
                            <definition>
                                <paragraph>This is the local coordinate system of the parent's <emphasis>CanvasItem</emphasis>. When positioning
                                    <emphasis>CanvasItems</emphasis> in the <emphasis>Canvas</emphasis>, they usually inherit the transformations of their parent
                                    <emphasis>CanvasItems</emphasis>. An exceptions is
                                    <reference internal="True" refuri="../../../classes/class_canvasitem#class-canvasitem-property-top-level"><inline classes="std std-ref">CanvasItems.top_level</inline></reference>.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>画布坐标</strong></term>
                            <definition>
                                <paragraph>As mentioned in the previous tutorial <reference internal="True" refuri="../../../tutorials/2d/canvas_layers#doc-canvas-layers"><inline classes="std std-ref">画布层</inline></reference>, there are two types of canvases
                                    (<emphasis>Viewport</emphasis> canvas and <emphasis>CanvasLayer</emphasis> canvas) and both have a canvas coordinate system. These
                                    are also called world coordinates. A <emphasis>Viewport</emphasis> can contain multiple <emphasis>Canvases</emphasis> with different
                                    coordinate systems.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>视口坐标</strong></term>
                            <definition>
                                <paragraph>This is the coordinate system of the <reference internal="True" refuri="../../../classes/class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference>.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>相机坐标</strong></term>
                            <definition>
                                <paragraph>This is only used internally for functionality like 3D-camera ray projections.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>嵌入器坐标 / 屏幕坐标</strong></term>
                            <definition>
                                <paragraph>Every <emphasis>Viewport</emphasis> (<emphasis>Window</emphasis> or <emphasis>SubViewport</emphasis>) in the scene tree is embedded either in a
                                    different node or in the OS Window Manager. This coordinate system's origin is identical to the
                                    top-left corner of the <emphasis>Window</emphasis> or <emphasis>SubViewport</emphasis> and its scale is the one of the embedder or
                                    the OS Window Manager.</paragraph>
                                <paragraph>If the embedder is the OS Window Manager, then they are also called Screen Coordinates.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>绝对嵌入器坐标 / 绝对屏幕坐标</strong></term>
                            <definition>
                                <paragraph>The origin of this coordinate system is the top-left corner of the embedding node or the OS
                                    Window Manager screen. Its scale is the one of the embedder or the OS Window Manager.</paragraph>
                                <paragraph>If the embedder is the OS Window Manager, then they are also called Absolute Screen
                                    Coordinates.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
            </bullet_list>
        </section>
        <section ids="node-transforms" names="node\ transforms 节点变换">
            <title>节点变换</title>
            <paragraph>Each of the mentioned nodes have one or more transforms associated with them and the combination of
                these nodes infer the transforms between the different coordinate systems. With a few exceptions,
                the transforms are <reference internal="True" refuri="../../../classes/class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> and the following list shows details and
                effects of each of them.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>CanvasItem 变换</strong></term>
                            <definition>
                                <paragraph><emphasis>CanvasItems</emphasis> are either <emphasis>Control</emphasis>-nodes or <emphasis>Node2D</emphasis>-nodes.</paragraph>
                                <paragraph>For <emphasis>Control</emphasis> nodes this transform consists of a <reference internal="True" refuri="../../../classes/class_control#class-control-property-position"><inline classes="std std-ref">position</inline></reference>
                                    relative to the parent's origin and a <reference internal="True" refuri="../../../classes/class_control#class-control-property-scale"><inline classes="std std-ref">scale</inline></reference> and
                                    <reference internal="True" refuri="../../../classes/class_control#class-control-property-rotation"><inline classes="std std-ref">rotation</inline></reference> around a
                                    <reference internal="True" refuri="../../../classes/class_control#class-control-property-pivot-offset"><inline classes="std std-ref">pivot point</inline></reference>.</paragraph>
                                <paragraph>For <emphasis>Node2D</emphasis> nodes <reference internal="True" refuri="../../../classes/class_node2d#class-node2d-property-transform"><inline classes="std std-ref">transform</inline></reference> consists of
                                    <reference internal="True" refuri="../../../classes/class_node2d#class-node2d-property-position"><inline classes="std std-ref">position</inline></reference>, <reference internal="True" refuri="../../../classes/class_node2d#class-node2d-property-rotation"><inline classes="std std-ref">rotation</inline></reference>,
                                    <reference internal="True" refuri="../../../classes/class_node2d#class-node2d-property-scale"><inline classes="std std-ref">scale</inline></reference> and <reference internal="True" refuri="../../../classes/class_node2d#class-node2d-property-skew"><inline classes="std std-ref">skew</inline></reference>.</paragraph>
                                <paragraph>The transform affects the item itself and usually also child-<emphasis>CanvasItems</emphasis> and in the case of a
                                    <emphasis>SubViewportContainer</emphasis> it affects the contained <emphasis>SubViewport</emphasis>.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>CanvasLayer 变换</strong></term>
                            <definition>
                                <paragraph>The <emphasis>CanvasLayer's</emphasis> <reference internal="True" refuri="../../../classes/class_canvaslayer#class-canvaslayer-property-transform"><inline classes="std std-ref">transform</inline></reference> affects all
                                    <emphasis>CanvasItems</emphasis> within the <emphasis>CanvasLayer</emphasis>. It doesn't affect other <emphasis>CanvasLayers</emphasis> or <emphasis>Windows</emphasis> in
                                    its <emphasis>Viewport</emphasis>.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>CanvasLayer 视口跟随变换</strong></term>
                            <definition>
                                <paragraph>The <emphasis>follow viewport transform</emphasis> is an automatically calculated transform, that is based on the
                                    <emphasis>Viewport's</emphasis> <reference internal="True" refuri="../../../classes/class_viewport#class-viewport-property-canvas-transform"><inline classes="std std-ref">canvas transform</inline></reference> and the
                                    <emphasis>CanvasLayer's</emphasis> <reference internal="True" refuri="../../../classes/class_canvaslayer#class-canvaslayer-property-follow-viewport-scale"><inline classes="std std-ref">follow viewport scale</inline></reference>
                                    and can be used, if <reference internal="True" refuri="../../../classes/class_canvaslayer#class-canvaslayer-property-follow-viewport-enabled"><inline classes="std std-ref">enabled</inline></reference>, to
                                    achieve a pseudo 3D effect. It affects the same child nodes as the <emphasis>CanvasLayer transform</emphasis>.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>视口画布变换</strong></term>
                            <definition>
                                <paragraph>The <reference internal="True" refuri="../../../classes/class_viewport#class-viewport-property-canvas-transform"><inline classes="std std-ref">canvas transform</inline></reference> affects all
                                    <emphasis>CanvasItems</emphasis> in the <emphasis>Viewport's</emphasis> default canvas. It also affects <emphasis>CanvasLayers</emphasis>, that have
                                    follow viewport transform enabled. The <emphasis>Viewport's</emphasis> active <reference internal="True" refuri="../../../classes/class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference>
                                    works by changing this transform. It doesn't affect this <emphasis>Viewport's</emphasis> embedded <emphasis>Windows</emphasis>.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>视口全局画布变换</strong></term>
                            <definition>
                                <paragraph><emphasis>Viewports</emphasis> also have a <reference internal="True" refuri="../../../classes/class_viewport#class-viewport-property-global-canvas-transform"><inline classes="std std-ref">global canvas transform</inline></reference>.
                                    This is the master transform and affects all individual <emphasis>Canvas Layer</emphasis> and embedded <emphasis>Window</emphasis>
                                    transforms. This is primarily used in Godot's CanvasItem Editor.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>视口拉伸变换</strong></term>
                            <definition>
                                <paragraph>Finally, <emphasis>Viewports</emphasis> have a <emphasis>stretch transform</emphasis>, which is used when resizing or stretching the
                                    viewport. This transform is used for <reference internal="True" refuri="../../../classes/class_window#class-window"><inline classes="std std-ref">Windows</inline></reference> as described in
                                    <reference internal="True" refuri="../../../tutorials/rendering/multiple_resolutions#doc-multiple-resolutions"><inline classes="std std-ref">多分辨率</inline></reference>, but can also be manually set on <emphasis>SubViewports</emphasis> by means of
                                    <reference internal="True" refuri="../../../classes/class_subviewport#class-subviewport-property-size"><inline classes="std std-ref">size</inline></reference> and
                                    <reference internal="True" refuri="../../../classes/class_subviewport#class-subviewport-property-size-2d-override"><inline classes="std std-ref">size_2d_override</inline></reference>. It's
                                    <reference internal="True" refuri="../../../classes/class_transform2d#class-transform2d-method-get-origin"><inline classes="std std-ref">translation</inline></reference>,
                                    <reference internal="True" refuri="../../../classes/class_transform2d#class-transform2d-method-get-rotation"><inline classes="std std-ref">rotation</inline></reference> and
                                    <reference internal="True" refuri="../../../classes/class_transform2d#class-transform2d-method-get-skew"><inline classes="std std-ref">skew</inline></reference> are the default values and it can only have
                                    non-default <reference internal="True" refuri="../../../classes/class_transform2d#class-transform2d-method-get-scale"><inline classes="std std-ref">scale</inline></reference>.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>窗口变换</strong></term>
                            <definition>
                                <paragraph>In order to scale and position the <emphasis>Window's</emphasis> content as described in
                                    <reference internal="True" refuri="../../../tutorials/rendering/multiple_resolutions#doc-multiple-resolutions"><inline classes="std std-ref">多分辨率</inline></reference>, each <reference internal="True" refuri="../../../classes/class_window#class-window"><inline classes="std std-ref">Window</inline></reference> contains a
                                    <emphasis>window transform</emphasis>. It is for example responsible for the black bars at the <emphasis>Window's</emphasis> sides so
                                    that the <emphasis>Viewport</emphasis> is displayed with a fixed aspect ratio.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>窗口位置</strong></term>
                            <definition>
                                <paragraph>每个 <emphasis>Window</emphasis> 都还有一个 <reference internal="True" refuri="../../../classes/class_window#class-window-property-position"><inline classes="std std-ref">position</inline></reference>，描述的是它在嵌入器中的位置。嵌入器可以是另一个 <emphasis>Viewport</emphasis>，也可以是操作系统窗口管理器。</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>SubViewportContainer 收缩变换</strong></term>
                            <definition>
                                <paragraph><reference internal="True" refuri="../../../classes/class_subviewportcontainer#class-subviewportcontainer-property-stretch"><inline classes="std std-ref">stretch</inline></reference> together with
                                    <reference internal="True" refuri="../../../classes/class_subviewportcontainer#class-subviewportcontainer-property-stretch-shrink"><inline classes="std std-ref">stretch_shrink</inline></reference> declare for a
                                    <emphasis>SubViewportContainer</emphasis> if and by what integer factor the contained <emphasis>SubViewport</emphasis> should be
                                    scaled in comparison to the container's size.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
            </bullet_list>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
