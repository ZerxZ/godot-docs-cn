<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/core_and_modules/custom_audiostreams.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-custom-audiostreams"></target>
    <section ids="custom-audiostreams doc-custom-audiostreams" names="custom\ audiostreams 自定义\ audiostream doc_custom_audiostreams">
        <title>自定义 AudioStream</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>AudioStream是所有音频发射对象的基类.AudioStreamPlayer绑定到AudioStream以将PCM数据发送到管理音频驱动程序的AudioServer.</paragraph>
            <paragraph>所有音频资源都需要两个基于音频的类:AudioStream和AudioStreamPlayback. 作为数据容器,AudioStream包含资源并将其自身暴露给GDScript.AudioStream引用其自己的内部自定义AudioStreamPlayback, 该AudioStreamPlayback将AudioStream转换为PCM数据.</paragraph>
            <paragraph>This guide assumes the reader knows how to create C++ modules. If not, refer to this guide
                <reference internal="True" refuri="custom_modules_in_cpp#doc-custom-modules-in-cpp"><inline classes="std std-ref">自定义 C++ 模块</inline></reference>.</paragraph>
            <section dupnames="references:" ids="references" names="参考：">
                <title>参考：</title>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference name="servers/audio/audio_stream.h" refuri="https://github.com/godotengine/godot/blob/master/servers/audio/audio_stream.h">servers/audio/audio_stream.h</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="scene/audio/audio_stream_player.cpp" refuri="https://github.com/godotengine/godot/blob/master/scene/audio/audio_stream_player.cpp">scene/audio/audio_stream_player.cpp</reference></paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="what-for" names="what\ for? 可以做什么？">
            <title>可以做什么？</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>绑定外部库(如Wwise, FMOD等).</paragraph>
                </list_item>
                <list_item>
                    <paragraph>添加自定义音频队列</paragraph>
                </list_item>
                <list_item>
                    <paragraph>添加对更多音频格式的支持</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="create-an-audiostream" names="create\ an\ audiostream 创建\ audiostream">
            <title>创建 AudioStream</title>
            <paragraph>AudioStream由三个组件组成: 数据容器, 流名称和AudioStreamPlayback朋友类生成器. 音频数据可以通过多种方式加载, 例如使用用于音调发生器的内部计数器, 内部/外部缓冲区, 或文件引用.</paragraph>
            <paragraph>某些AudioStream需要是无状态的, 例如从ResourceLoader加载的对象.ResourceLoader加载一次并引用同一对象, 而不管在该特定资源上调用了多少次 <literal>load</literal>. 因此, 播放状态必须被包含在AudioStreamPlayback中.</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* audiostream_mytone.h */

#include "core/reference.h"
#include "core/resource.h"
#include "servers/audio/audio_stream.h"

class AudioStreamMyTone : public AudioStream {
        GDCLASS(AudioStreamMyTone, AudioStream)

private:
        friend class AudioStreamPlaybackMyTone;
        uint64_t pos;
        int mix_rate;
        bool stereo;
        int hz;

public:
        void reset();
        void set_position(uint64_t pos);
        virtual Ref&lt;AudioStreamPlayback&gt; instance_playback();
        virtual String get_stream_name() const;
        void gen_tone(int16_t *pcm_buf, int size);
        virtual float get_length() const { return 0; } // if supported, otherwise return 0
        AudioStreamMyTone();

protected:
        static void _bind_methods();
};</literal_block>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* audiostream_mytone.cpp */

#include "audiostream_mytone.h"

AudioStreamMyTone::AudioStreamMyTone()
                : mix_rate(44100), stereo(false), hz(639) {
}

Ref&lt;AudioStreamPlayback&gt; AudioStreamMyTone::instance_playback() {
        Ref&lt;AudioStreamPlaybackMyTone&gt; talking_tree;
        talking_tree.instantiate();
        talking_tree-&gt;base = Ref&lt;AudioStreamMyTone&gt;(this);
        return talking_tree;
}

String AudioStreamMyTone::get_stream_name() const {
        return "MyTone";
}
void AudioStreamMyTone::reset() {
        set_position(0);
}
void AudioStreamMyTone::set_position(uint64_t p) {
        pos = p;
}
void AudioStreamMyTone::gen_tone(int16_t *pcm_buf, int size) {
        for (int i = 0; i &lt; size; i++) {
                pcm_buf[i] = 32767.0 * sin(2.0 * Math_PI * double(pos + i) / (double(mix_rate) / double(hz)));
        }
        pos += size;
}
void AudioStreamMyTone::_bind_methods() {
        ClassDB::bind_method(D_METHOD("reset"), &amp;AudioStreamMyTone::reset);
        ClassDB::bind_method(D_METHOD("get_stream_name"), &amp;AudioStreamMyTone::get_stream_name);
}</literal_block>
            <section dupnames="references:" ids="id1" names="参考：">
                <title>参考：</title>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference name="servers/audio/audio_stream.h" refuri="https://github.com/godotengine/godot/blob/master/servers/audio/audio_stream.h">servers/audio/audio_stream.h</reference></paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="create-an-audiostreamplayback" names="create\ an\ audiostreamplayback 创建\ audiostreamplayback">
            <title>创建 AudioStreamPlayback</title>
            <paragraph>AudioStreamPlayer使用 <literal>mix</literal> 回调来获取PCM数据. 回调必须与采样率匹配并填充缓冲区.</paragraph>
            <paragraph>由于AudioStreamPlayback由音频线程控制, 因此禁止进行i/o和动态内存分配.</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/*  audiostreamplayer_mytone.h */

#include "core/reference.h"
#include "core/resource.h"
#include "servers/audio/audio_stream.h"

class AudioStreamPlaybackMyTone : public AudioStreamPlayback {
        GDCLASS(AudioStreamPlaybackMyTone, AudioStreamPlayback)
        friend class AudioStreamMyTone;

private:
        enum {
                PCM_BUFFER_SIZE = 4096
        };
        enum {
                MIX_FRAC_BITS = 13,
                MIX_FRAC_LEN = (1 &lt;&lt; MIX_FRAC_BITS),
                MIX_FRAC_MASK = MIX_FRAC_LEN - 1,
        };
        void *pcm_buffer;
        Ref&lt;AudioStreamMyTone&gt; base;
        bool active;

public:
        virtual void start(float p_from_pos = 0.0);
        virtual void stop();
        virtual bool is_playing() const;
        virtual int get_loop_count() const; // times it looped
        virtual float get_playback_position() const;
        virtual void seek(float p_time);
        virtual void mix(AudioFrame *p_buffer, float p_rate_scale, int p_frames);
        virtual float get_length() const; // if supported, otherwise return 0
        AudioStreamPlaybackMyTone();
        ~AudioStreamPlaybackMyTone();
};</literal_block>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">/* audiostreamplayer_mytone.cpp */

#include "audiostreamplayer_mytone.h"

#include "core/math/math_funcs.h"
#include "core/print_string.h"

AudioStreamPlaybackMyTone::AudioStreamPlaybackMyTone()
                : active(false) {
        AudioServer::get_singleton()-&gt;lock();
        pcm_buffer = AudioServer::get_singleton()-&gt;audio_data_alloc(PCM_BUFFER_SIZE);
        zeromem(pcm_buffer, PCM_BUFFER_SIZE);
        AudioServer::get_singleton()-&gt;unlock();
}
AudioStreamPlaybackMyTone::~AudioStreamPlaybackMyTone() {
        if(pcm_buffer) {
                AudioServer::get_singleton()-&gt;audio_data_free(pcm_buffer);
                pcm_buffer = NULL;
        }
}
void AudioStreamPlaybackMyTone::stop() {
        active = false;
        base-&gt;reset();
}
void AudioStreamPlaybackMyTone::start(float p_from_pos) {
        seek(p_from_pos);
        active = true;
}
void AudioStreamPlaybackMyTone::seek(float p_time) {
        float max = get_length();
        if (p_time &lt; 0) {
                        p_time = 0;
        }
        base-&gt;set_position(uint64_t(p_time * base-&gt;mix_rate) &lt;&lt; MIX_FRAC_BITS);
}
void AudioStreamPlaybackMyTone::mix(AudioFrame *p_buffer, float p_rate, int p_frames) {
        ERR_FAIL_COND(!active);
        if (!active) {
                        return;
        }
        zeromem(pcm_buffer, PCM_BUFFER_SIZE);
        int16_t *buf = (int16_t *)pcm_buffer;
        base-&gt;gen_tone(buf, p_frames);

        for(int i = 0; i &lt; p_frames; i++) {
                float sample = float(buf[i]) / 32767.0;
                p_buffer[i] = AudioFrame(sample, sample);
        }
}
int AudioStreamPlaybackMyTone::get_loop_count() const {
        return 0;
}
float AudioStreamPlaybackMyTone::get_playback_position() const {
        return 0.0;
}
float AudioStreamPlaybackMyTone::get_length() const {
        return 0.0;
}
bool AudioStreamPlaybackMyTone::is_playing() const {
        return active;
}</literal_block>
            <section ids="resampling" names="resampling 重采样">
                <title>重采样</title>
                <paragraph>Godot的AudioServer目前使用44100Hz采样率. 当需要其他采样率如48000时, 要么提供一个, 要么使用AudioStreamPlaybackResampled.Godot为音频重采样提供立方插值.</paragraph>
                <paragraph>AudioStreamPlaybackResampled不是重载 <literal>mix</literal> , 而是使用 <literal>_mix_internal</literal> 来查询AudioFrames, 并使用 <literal>get_stream_sampling_rate</literal> 来查询当前的混合率.</paragraph>
                <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">#include "core/reference.h"
#include "core/resource.h"
#include "servers/audio/audio_stream.h"

class AudioStreamMyToneResampled;

class AudioStreamPlaybackResampledMyTone : public AudioStreamPlaybackResampled {
        GDCLASS(AudioStreamPlaybackResampledMyTone, AudioStreamPlaybackResampled)
        friend class AudioStreamMyToneResampled;

private:
        enum {
                PCM_BUFFER_SIZE = 4096
        };
        enum {
                MIX_FRAC_BITS = 13,
                MIX_FRAC_LEN = (1 &lt;&lt; MIX_FRAC_BITS),
                MIX_FRAC_MASK = MIX_FRAC_LEN - 1,
        };
        void *pcm_buffer;
        Ref&lt;AudioStreamMyToneResampled&gt; base;
        bool active;

protected:
        virtual void _mix_internal(AudioFrame *p_buffer, int p_frames);

public:
        virtual void start(float p_from_pos = 0.0);
        virtual void stop();
        virtual bool is_playing() const;
        virtual int get_loop_count() const; // times it looped
        virtual float get_playback_position() const;
        virtual void seek(float p_time);
        virtual float get_length() const; // if supported, otherwise return 0
        virtual float get_stream_sampling_rate();
        AudioStreamPlaybackResampledMyTone();
        ~AudioStreamPlaybackResampledMyTone();
};</literal_block>
                <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">#include "mytone_audiostream_resampled.h"

#include "core/math/math_funcs.h"
#include "core/print_string.h"

AudioStreamPlaybackResampledMyTone::AudioStreamPlaybackResampledMyTone()
                : active(false) {
        AudioServer::get_singleton()-&gt;lock();
        pcm_buffer = AudioServer::get_singleton()-&gt;audio_data_alloc(PCM_BUFFER_SIZE);
        zeromem(pcm_buffer, PCM_BUFFER_SIZE);
        AudioServer::get_singleton()-&gt;unlock();
}
AudioStreamPlaybackResampledMyTone::~AudioStreamPlaybackResampledMyTone() {
        if (pcm_buffer) {
                AudioServer::get_singleton()-&gt;audio_data_free(pcm_buffer);
                pcm_buffer = NULL;
        }
}
void AudioStreamPlaybackResampledMyTone::stop() {
        active = false;
        base-&gt;reset();
}
void AudioStreamPlaybackResampledMyTone::start(float p_from_pos) {
        seek(p_from_pos);
        active = true;
}
void AudioStreamPlaybackResampledMyTone::seek(float p_time) {
        float max = get_length();
        if (p_time &lt; 0) {
                        p_time = 0;
        }
        base-&gt;set_position(uint64_t(p_time * base-&gt;mix_rate) &lt;&lt; MIX_FRAC_BITS);
}
void AudioStreamPlaybackResampledMyTone::_mix_internal(AudioFrame *p_buffer, int p_frames) {
        ERR_FAIL_COND(!active);
        if (!active) {
                return;
        }
        zeromem(pcm_buffer, PCM_BUFFER_SIZE);
        int16_t *buf = (int16_t *)pcm_buffer;
        base-&gt;gen_tone(buf, p_frames);

        for(int i = 0;  i &lt; p_frames; i++) {
                float sample = float(buf[i]) / 32767.0;
                        p_buffer[i] = AudioFrame(sample, sample);
        }
}
float AudioStreamPlaybackResampledMyTone::get_stream_sampling_rate() {
        return float(base-&gt;mix_rate);
}
int AudioStreamPlaybackResampledMyTone::get_loop_count() const {
        return 0;
}
float AudioStreamPlaybackResampledMyTone::get_playback_position() const {
        return 0.0;
}
float AudioStreamPlaybackResampledMyTone::get_length() const {
        return 0.0;
}
bool AudioStreamPlaybackResampledMyTone::is_playing() const {
        return active;
}</literal_block>
            </section>
            <section dupnames="references:" ids="id2" names="参考：">
                <title>参考：</title>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference name="core/math/audio_frame.h" refuri="https://github.com/godotengine/godot/blob/master/core/math/audio_frame.h">core/math/audio_frame.h</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="servers/audio/audio_stream.h" refuri="https://github.com/godotengine/godot/blob/master/servers/audio/audio_stream.h">servers/audio/audio_stream.h</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="scene/audio/audio_stream_player.cpp" refuri="https://github.com/godotengine/godot/blob/master/scene/audio/audio_stream_player.cpp">scene/audio/audio_stream_player.cpp</reference></paragraph>
                    </list_item>
                </bullet_list>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
