<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/compiling/compiling_for_ios.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-compiling-for-ios"></target>
    <section ids="compiling-for-ios doc-compiling-for-ios" names="compiling\ for\ ios 为\ ios\ 平台编译 doc_compiling_for_ios">
        <title>为 iOS 平台编译</title>
        <seealso>
            <paragraph>这个页面描述的是如何从源码编译 iOS 导出模板二进制。如果你想要找的是导出项目到 iOS，请阅读 <reference internal="True" refuri="../../../tutorials/export/exporting_for_ios#doc-exporting-for-ios"><inline classes="std std-ref">为 iOS 导出</inline></reference>。</paragraph>
        </seealso>
        <section ids="requirements" names="requirements 需求">
            <title>需求</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="Python 3.6+" refuri="https://www.python.org/downloads/macos/">Python 3.6+</reference><target ids="python-3-6" names="python\ 3.6+" refuri="https://www.python.org/downloads/macos/"></target>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="SCons 3.0+" refuri="https://scons.org/pages/download.html">SCons 3.0+</reference><target ids="scons-3-0" names="scons\ 3.0+" refuri="https://scons.org/pages/download.html"></target> 构建系统.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Xcode" refuri="https://apps.apple.com/us/app/xcode/id497799835">Xcode</reference><target ids="xcode" names="xcode" refuri="https://apps.apple.com/us/app/xcode/id497799835"></target>.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If you are building the <literal>master</literal> branch:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>下载并遵循其 README 的说明，以从 <title_reference>MoltenVK SDK &lt;https://github.com/KhronosGroup/MoltenVK#fetching-moltenvk-source-code&gt;</title_reference> 构建静态的 <literal>.xcframework</literal> 。</paragraph>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>If you have <reference name="Homebrew" refuri="https://brew.sh/">Homebrew</reference><target ids="homebrew" names="homebrew" refuri="https://brew.sh/"></target> installed, you can easily
                    install SCons using the following command:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">brew install scons</literal_block>
                <paragraph>如果你还没有 Xcode 命令行工具，安装 Homebrew 也会自动进行获取。</paragraph>
                <paragraph>Similarly, if you have <reference name="MacPorts" refuri="https://www.macports.org/">MacPorts</reference><target ids="macports" names="macports" refuri="https://www.macports.org/"></target>
                    installed, you can easily install SCons using the
                    following command:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">sudo port install scons</literal_block>
            </note>
            <seealso>
                <paragraph>要获取编译所需的 Godot 源码，请参阅 <reference internal="True" refuri="getting_source#doc-getting-source"><inline classes="std std-ref">获取源代码</inline></reference>。</paragraph>
                <paragraph>有关 Godot 的 SCons 用法的一般概述，请参阅 <reference internal="True" refuri="introduction_to_the_buildsystem#doc-introduction-to-the-buildsystem"><inline classes="std std-ref">构建系统介绍</inline></reference>。</paragraph>
            </seealso>
        </section>
        <section ids="compiling" names="compiling 编译">
            <title>编译</title>
            <paragraph>打开终端, 转到引擎源代码的根目录并键入:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ scons p=ios target=template_debug</literal_block>
            <paragraph>针对调试版本, 或:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ scons p=ios target=template_release</literal_block>
            <paragraph>for a release build (check <literal>platform/ios/detect.py</literal> for the compiler
                flags used for each configuration).</paragraph>
            <paragraph>或者, 你可以运行</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ scons p=ios target=template_debug ios_simulator=yes arch=x86_64
$ scons p=ios target=template_debug ios_simulator=yes arch=arm64</literal_block>
            <paragraph>for a Simulator libraries.</paragraph>
            <paragraph>要创建一个像官方构建的 <literal>.app</literal> 捆绑包，你需要使用位于 <literal>misc/dist/osx_tools.app</literal> 的模板。通常，对于用 <literal>target=release_debug'</literal> 构建的优化编辑器可执行文件。</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ cp -r misc/dist/ios_xcode .

$ cp libgodot.ios.template_debug.arm64.a ios_xcode/libgodot.ios.debug.xcframework/ios-arm64/libgodot.a
$ lipo -create libgodot.ios.template_debug.arm64.simulator.a libgodot.ios.template_debug.x86_64.simulator.a -output ios_xcode/libgodot.ios.debug.xcframework/ios-arm64_x86_64-simulator/libgodot.a

$ cp libgodot.ios.template_release.arm64.a ios_xcode/libgodot.ios.release.xcframework/ios-arm64/libgodot.a
$ lipo -create libgodot.ios.template_release.arm64.simulator.a libgodot.ios.template_release.x86_64.simulator.a -output ios_xcode/libgodot.ios.release.xcframework/ios-arm64_x86_64-simulator/libgodot.a</literal_block>
            <paragraph>MoltenVK 的静态 <literal>.xcframework</literal> 文件夹如果被创建，必须也被放在 <literal>ios_xcode</literal> 目录里。</paragraph>
        </section>
        <section ids="run" names="run 运行">
            <title>运行</title>
            <paragraph>要在设备或模拟器上运行, 请按照以下说明操作: <reference internal="True" refuri="../../../tutorials/export/exporting_for_ios#doc-exporting-for-ios"><inline classes="std std-ref">为 iOS 导出</inline></reference>.</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
