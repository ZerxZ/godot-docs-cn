<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/compiling/compiling_for_linuxbsd.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-compiling-for-linuxbsd"></target>
    <section ids="compiling-for-linux-bsd doc-compiling-for-linuxbsd" names="compiling\ for\ linux,\ *bsd 为\ linux、*bsd\ 平台编译 doc_compiling_for_linuxbsd">
        <title>为 Linux、*BSD 平台编译</title>
        <seealso>
            <paragraph>这个页面描述的是如何从源码编译 Linux 编辑器和导出模板二进制文件。如果你要找的是导出项目到 Linux，请阅读 <reference internal="True" refuri="../../../tutorials/export/exporting_for_linux#doc-exporting-for-linux"><inline classes="std std-ref">为 Linux 导出</inline></reference>。</paragraph>
        </seealso>
        <section ids="requirements" names="requirements 需求">
            <title>需求</title>
            <paragraph>要在Linux或其他类Unix系统下进行编译, 需要满足以下条件:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>GCC 7+ 或 Clang 6+.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Python 3.6+" refuri="https://www.python.org/downloads/">Python 3.6+</reference><target ids="python-3-6" names="python\ 3.6+" refuri="https://www.python.org/downloads/"></target>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="SCons 3.0+" refuri="https://scons.org/pages/download.html">SCons 3.0+</reference><target ids="scons-3-0" names="scons\ 3.0+" refuri="https://scons.org/pages/download.html"></target> 构建系统.</paragraph>
                    <note>
                        <paragraph>If your distribution uses Python 2 by default, or you are using a version of SCons prior to 3.1.2,
                            you will need to change the version of Python that SCons uses by changing the shebang
                            (the first line) of the SCons script file to <literal>#! /usr/bin/python3</literal>.
                            Use the command <literal>which scons</literal> to find the location of the SCons script file.</paragraph>
                    </note>
                </list_item>
                <list_item>
                    <paragraph>pkg-config（用于检测下面这些开发库）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>开发库：</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>X11、Xcursor、Xinerama、Xi、XRandR。</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>MesaGL.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>ALSA.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>PulseAudio。</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><emphasis>可选</emphasis>——libudev（使用 <literal>udev = yes</literal> 构建）。</paragraph>
                </list_item>
            </bullet_list>
            <seealso>
                <paragraph>要获取编译所需的 Godot 源码，请参阅 <reference internal="True" refuri="getting_source#doc-getting-source"><inline classes="std std-ref">获取源代码</inline></reference>。</paragraph>
                <paragraph>有关 Godot 的 SCons 用法的一般概述，请参阅 <reference internal="True" refuri="introduction_to_the_buildsystem#doc-introduction-to-the-buildsystem"><inline classes="std std-ref">构建系统介绍</inline></reference>。</paragraph>
            </seealso>
            <target refid="doc-compiling-for-linuxbsd-oneliners"></target>
            <section ids="distro-specific-one-liners doc-compiling-for-linuxbsd-oneliners" names="distro-specific\ one-liners 针对各个发行版的单行命令 doc_compiling_for_linuxbsd_oneliners">
                <title>针对各个发行版的单行命令</title>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-0-0-0" aria-selected="true" classes="sphinx-tabs-tab" ids="tab-0-0-0" name="0-0" role="tab" tabindex="0">Alpine Linux</button>
                        <button aria-controls="panel-0-0-1" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-0-0-1" name="0-1" role="tab" tabindex="-1">Arch Linux</button>
                        <button aria-controls="panel-0-0-2" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-0-0-2" name="0-2" role="tab" tabindex="-1">Debian/Ubuntu</button>
                        <button aria-controls="panel-0-0-3" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-0-0-3" name="0-3" role="tab" tabindex="-1">Fedora</button>
                        <button aria-controls="panel-0-0-4" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-0-0-4" name="0-4" role="tab" tabindex="-1">FreeBSD</button>
                        <button aria-controls="panel-0-0-5" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-0-0-5" name="0-5" role="tab" tabindex="-1">Gentoo</button>
                        <button aria-controls="panel-0-0-6" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-0-0-6" name="0-6" role="tab" tabindex="-1">Mageia</button>
                        <button aria-controls="panel-0-0-7" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-0-0-7" name="0-7" role="tab" tabindex="-1">OpenBSD</button>
                        <button aria-controls="panel-0-0-8" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-0-0-8" name="0-8" role="tab" tabindex="-1">openSUSE</button>
                        <button aria-controls="panel-0-0-9" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-0-0-9" name="0-9" role="tab" tabindex="-1">NetBSD</button>
                        <button aria-controls="panel-0-0-10" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-0-0-10" name="0-10" role="tab" tabindex="-1">Solus</button>
                    </div>
                    <div aria-labelledby="tab-0-0-0" classes="sphinx-tabs-panel" ids="panel-0-0-0" name="0-0" role="tabpanel" tabindex="0">
                        <literal_block force="False" language="shell" linenos="False" xml:space="preserve">apk add \
  scons \
  pkgconf \
  gcc \
  g++ \
  libx11-dev \
  libxcursor-dev \
  libxinerama-dev \
  libxi-dev \
  libxrandr-dev \
  mesa-dev \
  libexecinfo-dev \
  eudev-dev \
  alsa-lib-dev \
  pulseaudio-dev</literal_block>
                    </div>
                    <div aria-labelledby="tab-0-0-1" classes="sphinx-tabs-panel" hidden="true" ids="panel-0-0-1" name="0-1" role="tabpanel" tabindex="0">
                        <literal_block force="False" language="shell" linenos="False" xml:space="preserve">pacman -S --needed \
  scons \
  pkgconf \
  gcc \
  libxcursor \
  libxinerama \
  libxi \
  libxrandr \
  mesa \
  glu \
  libglvnd \
  alsa-lib \
  pulseaudio</literal_block>
                    </div>
                    <div aria-labelledby="tab-0-0-2" classes="sphinx-tabs-panel" hidden="true" ids="panel-0-0-2" name="0-2" role="tabpanel" tabindex="0">
                        <literal_block force="False" language="shell" linenos="False" xml:space="preserve">apt-get install \
  build-essential \
  scons \
  pkg-config \
  libx11-dev \
  libxcursor-dev \
  libxinerama-dev \
  libgl1-mesa-dev \
  libglu-dev \
  libasound2-dev \
  libpulse-dev \
  libudev-dev \
  libxi-dev \
  libxrandr-dev</literal_block>
                    </div>
                    <div aria-labelledby="tab-0-0-3" classes="sphinx-tabs-panel" hidden="true" ids="panel-0-0-3" name="0-3" role="tabpanel" tabindex="0">
                        <literal_block force="False" language="shell" linenos="False" xml:space="preserve">dnf install \
  scons \
  pkgconfig \
  libX11-devel \
  libXcursor-devel \
  libXrandr-devel \
  libXinerama-devel \
  libXi-devel \
  mesa-libGL-devel \
  mesa-libGLU-devel \
  alsa-lib-devel \
  pulseaudio-libs-devel \
  libudev-devel \
  gcc-c++ \
  libstdc++-static \
  libatomic-static</literal_block>
                    </div>
                    <div aria-labelledby="tab-0-0-4" classes="sphinx-tabs-panel" hidden="true" ids="panel-0-0-4" name="0-4" role="tabpanel" tabindex="0">
                        <literal_block force="False" language="shell" linenos="False" xml:space="preserve">pkg install \
  py37-scons \
  pkgconf \
  xorg-libraries \
  libXcursor \
  libXrandr \
  libXi \
  xorgproto libGLU \
  alsa-lib \
  pulseaudio</literal_block>
                    </div>
                    <div aria-labelledby="tab-0-0-5" classes="sphinx-tabs-panel" hidden="true" ids="panel-0-0-5" name="0-5" role="tabpanel" tabindex="0">
                        <literal_block force="False" language="shell" linenos="False" xml:space="preserve">emerge -an \
  dev-util/scons \
  x11-libs/libX11 \
  x11-libs/libXcursor \
  x11-libs/libXinerama \
  x11-libs/libXi \
  media-libs/mesa \
  media-libs/glu \
  media-libs/alsa-lib \
  media-sound/pulseaudio</literal_block>
                    </div>
                    <div aria-labelledby="tab-0-0-6" classes="sphinx-tabs-panel" hidden="true" ids="panel-0-0-6" name="0-6" role="tabpanel" tabindex="0">
                        <literal_block force="False" language="shell" linenos="False" xml:space="preserve">urpmi \
  scons \
  task-c++-devel \
  pkgconfig \
  "pkgconfig(alsa)" \
  "pkgconfig(glu)" \
  "pkgconfig(libpulse)" \
  "pkgconfig(udev)" \
  "pkgconfig(x11)" \
  "pkgconfig(xcursor)" \
  "pkgconfig(xinerama)" \
  "pkgconfig(xi)" \
  "pkgconfig(xrandr)"</literal_block>
                    </div>
                    <div aria-labelledby="tab-0-0-7" classes="sphinx-tabs-panel" hidden="true" ids="panel-0-0-7" name="0-7" role="tabpanel" tabindex="0">
                        <literal_block force="False" language="shell" linenos="False" xml:space="preserve">pkg_add \
  python \
  scons \
  llvm</literal_block>
                    </div>
                    <div aria-labelledby="tab-0-0-8" classes="sphinx-tabs-panel" hidden="true" ids="panel-0-0-8" name="0-8" role="tabpanel" tabindex="0">
                        <literal_block force="False" language="shell" linenos="False" xml:space="preserve">zypper install \
  scons \
  pkgconfig \
  libX11-devel \
  libXcursor-devel \
  libXrandr-devel \
  libXinerama-devel \
  libXi-devel \
  Mesa-libGL-devel \
  alsa-devel \
  libpulse-devel \
  libudev-devel \
  gcc-c++ \
  libGLU1</literal_block>
                    </div>
                    <div aria-labelledby="tab-0-0-9" classes="sphinx-tabs-panel" hidden="true" ids="panel-0-0-9" name="0-9" role="tabpanel" tabindex="0">
                        <literal_block force="False" language="shell" linenos="False" xml:space="preserve">pkg_add \
  pkg-config \
  py37-scons</literal_block>
                        <hint>
                            <paragraph>对于音频支持，你可以选择安装 <literal>pulseaudio</literal>。</paragraph>
                        </hint>
                    </div>
                    <div aria-labelledby="tab-0-0-10" classes="sphinx-tabs-panel" hidden="true" ids="panel-0-0-10" name="0-10" role="tabpanel" tabindex="0">
                        <literal_block force="False" language="shell" linenos="False" xml:space="preserve">eopkg install -c \
  system.devel \
  scons \
  libxcursor-devel \
  libxinerama-devel \
  libxi-devel \
  libxrandr-devel \
  mesalib-devel \
  libglu \
  alsa-lib-devel \
  pulseaudio-devel</literal_block>
                    </div>
                </container>
            </section>
        </section>
        <section ids="compiling" names="compiling 编译">
            <title>编译</title>
            <paragraph>启动终端，然后进入引擎源代码的根目录，输入：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=linuxbsd</literal_block>
            <note>
                <paragraph>在 Godot 4.0 之前，Linux/*BSD 目标被称为 <literal>x11</literal> 而非 <literal>linuxbsd</literal> 。如果你希望编译 Godot 3.x，请确保使用本文档的 <reference name="3.x 分支" refuri="https://docs.godotengine.org/en/3.6/development/compiling/compiling_for_x11.html">3.x 分支</reference> 。</paragraph>
            </note>
            <paragraph>If all goes well, the resulting binary executable will be placed in the
                "bin" subdirectory. This executable file contains the whole engine and
                runs without any dependencies. Executing it will bring up the Project
                Manager.</paragraph>
            <note>
                <paragraph>如果你希望使用 Clang 而不是 GCC 编译器, 可以使用这个命令:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=linuxbsd use_llvm=yes</literal_block>
                <paragraph>使用Clang似乎是OpenBSD的要求, 否则字体将无法生成.</paragraph>
            </note>
            <note>
                <paragraph>If you are compiling Godot for production use, then you can
                    make the final executable smaller and faster by adding the
                    SCons options <literal>target=template_release production=yes</literal>.</paragraph>
                <paragraph>If you are compiling Godot with GCC, you can make the binary
                    even smaller and faster by adding the SCons option <literal>lto=full</literal>.
                    As link-time optimization is a memory-intensive process,
                    this will require about 7 GB of available RAM while compiling.</paragraph>
            </note>
            <note>
                <paragraph>如果你想为自己的 Godot 构建和官方发布使用单独的编辑器设置，你可以通过在 <literal>bin/</literal> 文件夹中创建一个名为 <literal>._sc_</literal> 或 <literal>_sc_</literal> 的文件来启用 <reference internal="True" refuri="../../../tutorials/io/data_paths#doc-data-paths-self-contained-mode"><inline classes="std std-ref">自包含模式</inline></reference>。</paragraph>
            </note>
        </section>
        <section ids="running-a-headless-server-build" names="running\ a\ headless/server\ build 运行无头/服务器构建">
            <title>运行无头/服务器构建</title>
            <paragraph>To run in <emphasis>headless</emphasis> mode which provides editor functionality to export
                projects in an automated manner, use the normal build:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=linuxbsd target=editor</literal_block>
            <paragraph>然后使用 <literal>--headless</literal> 命令行参数：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">./bin/godot.linuxbsd.editor.x86_64 --headless</literal_block>
            <paragraph>如果要编译调试版本的<emphasis>服务器</emphasis>，支持<reference internal="True" refuri="../../../tutorials/editor/command_line_tutorial#doc-command-line-tutorial"><inline classes="std std-ref">远程调试工具</inline></reference>，那么请使用：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=linuxbsd target=template_debug</literal_block>
            <paragraph>要编译一个经过优化以运行专用游戏的<emphasis>服务器</emphasis>版本，请使用以下构建选项：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=linuxbsd target=template_release production=yes</literal_block>
        </section>
        <section ids="building-export-templates" names="building\ export\ templates 构建导出模板">
            <title>构建导出模板</title>
            <warning>
                <paragraph>Linux二进制文件通常不会在早于其构建版本的发行版上运行. 如果你希望分发适用于大多数发行版的二进制文件, 则应在较旧的发行版(例如Ubuntu 16.04)上构建它们. 你可以使用虚拟机或容器来设置合适的构建环境.</paragraph>
            </warning>
            <paragraph>To build Linux or *BSD export templates, run the build system with the
                following parameters:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>（32 位）</paragraph>
                </list_item>
            </bullet_list>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=linuxbsd target=template_release arch=x86_32
scons platform=linuxbsd target=template_debug arch=x86_32</literal_block>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>（64 位）</paragraph>
                </list_item>
            </bullet_list>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=linuxbsd target=template_release arch=x86_64
scons platform=linuxbsd target=template_debug arch=x86_64</literal_block>
            <paragraph>请注意, 与你的主机平台相反的位(64/32)交叉编译并不总是直接的, 并且可能需要chroot环境.</paragraph>
            <paragraph>To create standard export templates, the resulting files in the <literal>bin/</literal> folder
                must be copied to:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$HOME/.local/share/godot/export_templates/&lt;version&gt;/</literal_block>
            <paragraph>and named like this (even for *BSD which is seen as "Linux/X11" by Godot):</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">linux_x11_32_debug
linux_x11_32_release
linux_x11_64_debug
linux_x11_64_release</literal_block>
            <paragraph>此外, 如果要编写自定义模块或自定义C ++代码, 则可能需要在此处将二进制文件配置为自定义导出模板:</paragraph>
            <image candidates="{'*': 'contributing/development/compiling/img/lintemplates.png'}" uri="contributing/development/compiling/img/lintemplates.png"></image>
            <paragraph>你甚至不需要复制它们, 只需引用在Godot源文件夹的 <literal>bin/</literal> 目录中生成的文件, 因此下次构建时, 将自动引用自定义模板.</paragraph>
        </section>
        <section ids="using-clang-and-lld-for-faster-development" names="using\ clang\ and\ lld\ for\ faster\ development 使用\ clang\ 和\ lld\ 可以加快开发速度">
            <title>使用 Clang 和 LLD 可以加快开发速度</title>
            <paragraph>你也可以使用Clang和LD来构建Godot. 与默认的GCC + GNU ld设置相比, 这有两个好处:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>与GNU ld或gold相比,LD链接Godot的速度明显更快. 这导致更快的迭代时间.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>与GCC相比,Clang倾向于给出更多有用的错误信息.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为此，请从分发的包管理器中安装 Clang 和 <literal>lld</literal> 包，然后使用以下 SCons 命令：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=linuxbsd use_llvm=yes linker=lld</literal_block>
            <paragraph>构建完成后，将在 <literal>bin/</literal> 文件夹中创建一个以 <literal>.llvm</literal> 为后缀的新的二进制文件。</paragraph>
            <paragraph>仍然建议使用GCC进行生产构建, 因为它们可以使用链接时间优化进行编译, 使产生的二进制文件更小, 更快.</paragraph>
            <paragraph>如果发生了这个错误：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">/usr/bin/ld: cannot find -l:libatomic.a: No such file or directory</literal_block>
            <paragraph>有两种解决方法:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>在 Scon 命令中，添加 <literal>use_static_cpp=no</literal> 参数。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Follow <reference name="these instructions" refuri="https://github.com/ivmai/libatomic_ops#installation-and-usage">these instructions</reference> to configure, build, and
                        install <literal>libatomic_ops</literal>. Then, copy <literal>/usr/lib/libatomic_ops.a</literal> to <literal>/usr/lib/libatomic.a</literal>, or create a soft link
                        to <literal>libatomic_ops</literal> by command <literal>ln -s /usr/lib/libatomic_ops.a /usr/lib/libatomic.a</literal>. The soft link can ensure the
                        latest <literal>libatomic_ops</literal> will be used without the need to copy it everytime when it is updated.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="using-mold-for-faster-development" names="using\ mold\ for\ faster\ development 使用\ mold\ 加快开发速度">
            <title>使用 mold 加快开发速度</title>
            <paragraph>For even faster linking compared to LLD, you can use <reference name="mold" refuri="https://github.com/rui314/mold">mold</reference>.
                mold can be used with either GCC or Clang.</paragraph>
            <paragraph>As of January 2023, mold is not readily available in Linux distribution
                repositories, so you will have to install its binaries manually.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>从<reference name="发布页面" refuri="https://github.com/rui314/mold/releases/latest">发布页面</reference>下载 mold 二进制文件。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>解压 <literal>.tar.gz</literal> 文件，然后将得到的文件夹移动到类似于 <literal>.local/share/mold</literal> 的位置。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>将 <literal>$HOME/.local/share/mold/bin</literal> 添加到用户的 <literal>PATH</literal> 环境变量中。例如可以在 <literal>$HOME/.bash_profile</literal> 文件的末尾加上以下内容：</paragraph>
                </list_item>
            </bullet_list>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">PATH="$HOME/.local/share/mold/bin:$PATH"</literal_block>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>打开新的终端（或者运行 <literal>source "$HOME/.bash_profile"</literal>），然后使用以下 SCons 命令编译 Godot：</paragraph>
                    <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=linuxbsd linker=mold</literal_block>
                </list_item>
            </bullet_list>
        </section>
        <section ids="using-system-libraries-for-faster-development" names="using\ system\ libraries\ for\ faster\ development 使用系统库加快开发速度">
            <title>使用系统库加快开发速度</title>
            <paragraph><reference name="Godot bundles the source code of various third-party libraries." refuri="https://github.com/godotengine/godot/tree/master/thirdparty">Godot bundles the source code of various third-party libraries.</reference>
                You can choose to use system versions of third-party libraries instead.
                This makes the Godot binary faster to link, as third-party libraries are
                dynamically linked. Therefore, they don't need to be statically linked
                every time you build the engine (even on small incremental changes).</paragraph>
            <paragraph>然而，并非所有 Linux 发行版都有可用的第三方库（或这些库不是最新版本）。</paragraph>
            <paragraph>Moving to system libraries can reduce linking times by several seconds on slow
                CPUs, but it requires manual testing depending on your Linux distribution. Also,
                you may not be able to use system libraries for everything due to bugs in the
                system library packages (or in the build system, as this feature is less
                tested).</paragraph>
            <paragraph>要使用系统库编译 Godot，安装 <reference internal="True" refid="doc-compiling-for-linuxbsd-oneliners"><inline classes="std std-ref">针对各个发行版的单行命令</inline></reference> <emphasis>顶部</emphasis> 列出的依赖：</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="18"></colspec>
                    <colspec colwidth="107"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><strong>Fedora</strong></paragraph>
                            </entry>
                            <entry>
                                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">sudo dnf install embree3-devel enet-devel glslang-devel graphite2-devel harfbuzz-devel libicu-devel \
    libsquish-devel libtheora-devel libvorbis-devel libwebp-devel libzstd-devel mbedtls-devel \
    miniupnpc-devel</literal_block>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>在安装了所有必要依赖后，使用下面的命令来构建 Godot：</paragraph>
            <comment xml:space="preserve">NOTE: Some `builtin_` options aren't used here because they break the build as of January 2023
(tested on Fedora 37).</comment>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=linuxbsd builtin_embree=no builtin_enet=no builtin_freetype=no builtin_graphite=no builtin_harfbuzz=no builtin_libogg=no builtin_libpng=no builtin_libtheora=no builtin_libvorbis=no builtin_libwebp=no builtin_mbedtls=no builtin_miniupnpc=no builtin_pcre2=no builtin_zlib=no builtin_zstd=no</literal_block>
            <paragraph>You can view a list of all built-in libraries that have system alternatives by
                running <literal>scons -h</literal>, then looking for options starting with <literal>builtin_</literal>.</paragraph>
            <warning>
                <paragraph>When using system libraries, the resulting library is <strong>not</strong> portable
                    across Linux distributions anymore. Do not use this approach for creating
                    binaries you intend to distribute to others, unless you're creating a
                    package for a Linux distribution.</paragraph>
            </warning>
        </section>
        <section ids="using-pyston-for-faster-development" names="using\ pyston\ for\ faster\ development 使用\ pyston\ 加快开发速度">
            <title>使用 Pyston 加快开发速度</title>
            <paragraph>你可以使用 <reference name="Pyston" refuri="https://www.pyston.org/">Pyston</reference> 来运行 SCons。Pyston 是一种利用了 JIT 的 Python 语言实现（SCons 就是使用 Python 编写的）。目前它只兼容 Linux。Pyston 可以显著加速增量构建，经常可以达到 1.5× 和 2× 倍。可以将 Pyston 与 Clang 和 LLD 组合，进行更快的构建。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>下载 <reference name="Pyston 的最新绿色版本" refuri="https://github.com/pyston/pyston/releases/latest">Pyston 的最新绿色版本</reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>将绿色的 <literal>.tar.gz</literal> 解压到特定的位置，比如 <title_reference>$HOME/.local/opt/pyston/</title_reference>（必要时请创建文件夹）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在命令行中，使用 <literal>cd</literal> 达到 Pyston 解压出的文件夹，然后运行 <literal>./pyston -m pip install scons</literal>，在 Pyston 中安装 SCons。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>为了便于通过 Pyston 运行 SCons，请创建一个指向其封装脚本的符号链接，符号链接的位置必须在你的 <literal>PATH</literal> 环境变量中：</paragraph>
                    <literal_block force="False" language="shell" linenos="False" xml:space="preserve">ln -s ~/.local/opt/pyston/bin/scons ~/.local/bin/pyston-scons</literal_block>
                </list_item>
                <list_item>
                    <paragraph>现在就不是执行 <literal>scons &lt;构建参数&gt;</literal> 了，要编译 Godot 请执行 <literal>pyston-scons &lt;构建参数&gt;</literal>。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果创建符号链接后无法执行 <literal>pyston-scons</literal>，请确定 <literal>$HOME/.local/bin/</literal> 是当前用户的 <literal>PATH</literal> 环境变量的一部分。</paragraph>
            <note>
                <paragraph>Alternatively, you can run <literal>python -m pip install pyston_lite_autoload</literal>
                    then run SCons as usual. This will automatically load a subset of Pyston's
                    optimizations in any Python program you run. However, this won't bring as
                    much of a performance improvement compared to installing "full" Pyston.</paragraph>
            </note>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
