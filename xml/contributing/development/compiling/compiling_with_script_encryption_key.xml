<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/compiling/compiling_with_script_encryption_key.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-compiling-with-script-encryption-key"></target>
    <section ids="compiling-with-pck-encryption-key doc-compiling-with-script-encryption-key" names="compiling\ with\ pck\ encryption\ key 使用\ pck\ 加密密钥编译 doc_compiling_with_script_encryption_key">
        <title>使用 PCK 加密密钥编译</title>
        <paragraph>The export dialog gives you the option to encrypt your PCK file with a 256-bit
            AES key when releasing your project. This will make sure your scenes, scripts
            and other resources are not stored in plain text and can not easily be ripped
            by some script kiddie.</paragraph>
        <paragraph>当然，密钥需要存储在二进制文件中，但是经过编译、优化、去除符号后，是需要花费一些精力才能找到的。</paragraph>
        <paragraph>为此，你需要使用相同的密钥，从源代码构建导出模板。</paragraph>
        <warning>
            <paragraph>如果你使用官方预编译的导出模板，是<strong>不会</strong>起作用的。要使用 PCK 加密，绝对<strong>必须</strong>自己编译导出模板。</paragraph>
        </warning>
        <warning>
            <paragraph>By default, Android exports store assets directly in the APK file and
                aren't affected by PCK encryption. To use PCK encryption on Android, enable
                <strong>APK expansion</strong> in the export options.</paragraph>
        </warning>
        <section ids="step-by-step" names="step\ by\ step 渐进式教程">
            <title>渐进式教程</title>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>生成十六进制的 256 位 AES 密钥。你可以使用<reference name="此服务" refuri="https://asecuritysite.com/encryption/keygen">此服务</reference><target ids="id1" names="此服务" refuri="https://asecuritysite.com/encryption/keygen"></target>的 aes-256-cbc 版本。</paragraph>
                    <paragraph>或者，你可以通过使用 <reference name="OpenSSL" refuri="https://www.openssl.org/">OpenSSL</reference> 命令行工具自己生成：</paragraph>
                    <literal_block force="False" language="shell" linenos="False" xml:space="preserve">openssl rand -hex 32 &gt; godot.gdkey</literal_block>
                    <paragraph><literal>godot.gdkey</literal> 中的输出应该类似：</paragraph>
                    <literal_block force="False" language="shell" linenos="False" xml:space="preserve"># NOTE: Do not use the key below! Generate your own key instead.
aeb1bc56aaf580cc31784e9c41551e9ed976ecba10d315db591e749f3f64890f</literal_block>
                    <paragraph>不将输出重定向到文件也可以生成密钥，但这样能将暴露密钥的风险降到最低。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在控制台中将此处的密钥（key）设置为环境变量，编译 Godot 时会用到，如下所示：</paragraph>
                    <container classes="sphinx-tabs" type="tab-element">
                        <div aria-label="Tabbed content" role="tablist">
                            <button aria-controls="panel-0-TGludXgvbWFjT1M=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-TGludXgvbWFjT1M=" name="TGludXgvbWFjT1M=" role="tab" tabindex="0">Linux/macOS</button>
                            <button aria-controls="panel-0-V2luZG93cyAoY21kKQ==" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-V2luZG93cyAoY21kKQ==" name="V2luZG93cyAoY21kKQ==" role="tab" tabindex="-1">Windows (cmd)</button>
                            <button aria-controls="panel-0-V2luZG93cyAoUG93ZXJTaGVsbCk=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-V2luZG93cyAoUG93ZXJTaGVsbCk=" name="V2luZG93cyAoUG93ZXJTaGVsbCk=" role="tab" tabindex="-1">Windows (PowerShell)</button>
                        </div>
                        <div aria-labelledby="tab-0-TGludXgvbWFjT1M=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-TGludXgvbWFjT1M=" name="TGludXgvbWFjT1M=" role="tabpanel" tabindex="0">
                            <literal_block force="False" highlight_args="{}" language="bash" linenos="False" xml:space="preserve">export SCRIPT_AES256_ENCRYPTION_KEY="your_generated_key"</literal_block>
                        </div>
                        <div aria-labelledby="tab-0-V2luZG93cyAoY21kKQ==" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-V2luZG93cyAoY21kKQ==" name="V2luZG93cyAoY21kKQ==" role="tabpanel" tabindex="0">
                            <literal_block force="False" highlight_args="{}" language="bat" linenos="False" xml:space="preserve">set SCRIPT_AES256_ENCRYPTION_KEY=your_generated_key</literal_block>
                        </div>
                        <div aria-labelledby="tab-0-V2luZG93cyAoUG93ZXJTaGVsbCk=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-V2luZG93cyAoUG93ZXJTaGVsbCk=" name="V2luZG93cyAoUG93ZXJTaGVsbCk=" role="tabpanel" tabindex="0">
                            <literal_block force="False" highlight_args="{}" language="bat" linenos="False" xml:space="preserve">$env:SCRIPT_AES256_ENCRYPTION_KEY="your_generated_key"</literal_block>
                        </div>
                    </container>
                </list_item>
                <list_item>
                    <paragraph>编译 Godot 导出模板，并在导出预设的选项中将它们设置为自定义导出模板。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Set the encryption key in the <strong>Encryption</strong> tab of the export preset:</paragraph>
                    <image candidates="{'*': 'contributing/development/compiling/img/encryption_key.png'}" uri="contributing/development/compiling/img/encryption_key.png"></image>
                </list_item>
                <list_item>
                    <paragraph>Add filters for the files/folders to encrypt. <strong>By default</strong>, include filters
                        are empty and <strong>nothing will be encrypted</strong>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Export the project. The project should run with the files encrypted now.</paragraph>
                </list_item>
            </enumerated_list>
        </section>
        <section ids="troubleshooting" names="troubleshooting 故障排除">
            <title>故障排除</title>
            <paragraph>If you get an error like below, it means the key wasn't properly included in
                your Godot build. Godot is encrypting PCK file during export, but can't read
                it at runtime.</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">ERROR: open_and_parse: Condition "String::md5(md5.digest) != String::md5(md5d)" is true. Returning: ERR_FILE_CORRUPT
   At: core/io/file_access_encrypted.cpp:103</literal_block>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
