<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/compiling/compiling_for_windows.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-compiling-for-windows"></target>
    <section ids="compiling-for-windows doc-compiling-for-windows" names="compiling\ for\ windows 为\ windows\ 平台编译 doc_compiling_for_windows">
        <title>为 Windows 平台编译</title>
        <seealso>
            <paragraph>这个页面描述的是如何从源码编译 Windows 编辑器和导出模板二进制文件。如果你要找的是导出项目到 Windows，请阅读 <reference internal="True" refuri="../../../tutorials/export/exporting_for_windows#doc-exporting-for-windows"><inline classes="std std-ref">为 Windows 导出</inline></reference>。</paragraph>
        </seealso>
        <section ids="requirements" names="requirements 需求">
            <title>需求</title>
            <paragraph>要在Windows下进行编译, 需要以下内容:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="Visual Studio Community" refuri="https://www.visualstudio.com/vs/community/">Visual Studio Community</reference><target ids="visual-studio-community" names="visual\ studio\ community" refuri="https://www.visualstudio.com/vs/community/"></target> ,2017或更高版本. 建议使用VS 2019. <strong>请务必阅读下面的 "安装Visual Studio注意事项", 否则你将不得不再次运行/下载安装程序.</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="MinGW-w64" refuri="https://mingw-w64.org/">MinGW-w64</reference><target ids="mingw-w64" names="mingw-w64" refuri="https://mingw-w64.org/"></target> with GCC can be used as an alternative to
                        Visual Studio. Be sure to install/configure it to use the <literal>posix</literal> thread model.
                        <strong>Important:</strong> When using MinGW to compile the <literal>master</literal> branch, you need GCC 9 or later.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Python 3.6+" refuri="https://www.python.org/downloads/windows/">Python 3.6+</reference><target ids="python-3-6" names="python\ 3.6+" refuri="https://www.python.org/downloads/windows/"></target>.
                        <strong>Make sure to enable the option to add Python to the ``PATH`` in the installer.</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="SCons 3.0+" refuri="https://scons.org/pages/download.html">SCons 3.0+</reference><target ids="scons-3-0" names="scons\ 3.0+" refuri="https://scons.org/pages/download.html"></target> build system. Using the
                        latest release is recommended, especially for proper support of recent Visual
                        Studio releases.</paragraph>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>如果你已安装 <reference name="Scoop" refuri="https://scoop.sh/">Scoop</reference><target ids="scoop" names="scoop" refuri="https://scoop.sh/"></target>，则可以使用以下命令轻松安装 MinGW 和其他依赖项：</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scoop install gcc python scons make mingw</literal_block>
            </note>
            <note>
                <paragraph>如果你已经安装了 <reference name="MSYS2" refuri="https://www.msys2.org/">MSYS2</reference><target ids="msys2" names="msys2" refuri="https://www.msys2.org/"></target>，你可以使用以下命令轻松安装 MinGW 和其他依赖项：</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">pacman -S mingw-w64-x86_64-python3-pip mingw-w64-x86_64-gcc  \
    mingw-w64-i686-python3-pip mingw-w64-i686-gcc make</literal_block>
                <paragraph>对于每个 MSYS2 MinGW 子系统，你应该在其 shell 中运行 <title_reference>pip3 install scons</title_reference>。</paragraph>
            </note>
            <seealso>
                <paragraph>要获取编译所需的 Godot 源码，请参阅 <reference internal="True" refuri="getting_source#doc-getting-source"><inline classes="std std-ref">获取源代码</inline></reference>。</paragraph>
                <paragraph>有关 Godot 的 SCons 用法的一般概述，请参阅 <reference internal="True" refuri="introduction_to_the_buildsystem#doc-introduction-to-the-buildsystem"><inline classes="std std-ref">构建系统介绍</inline></reference>。</paragraph>
            </seealso>
        </section>
        <section ids="setting-up-scons" names="setting\ up\ scons 设置\ scons">
            <title>设置 SCons</title>
            <paragraph>要安装 SCons，请打开命令提示符并运行以下命令：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">python -m pip install scons</literal_block>
            <paragraph>如果你看到提示信息 <literal>Defaulting to user installation because normal site-packages is not writeable</literal>，那么你就需要提升权限后再重新执行该命令。使用管理员身份打开一个新的命令提示符，然后再执行该命令，确保 SCons 可以通过 <literal>PATH</literal> 访问。</paragraph>
            <paragraph>要检查是否已正确安装Python和SCons, 可以在命令提示符 (<literal>cmd.exe</literal>) 中键入 <literal>python --version</literal> 和 <literal>scons --version</literal>.</paragraph>
            <paragraph>如果上面的命令不起作用, 请确保在安装后将Python添加到 <literal>PATH</literal> 环境变量中, 然后再次检查. 为此, 你可以再次运行Python安装程序并启用将Python添加到 <literal>PATH</literal> 的选项.</paragraph>
            <paragraph>如果 SCons 无法检测到你的 Visual Studio 安装，可能是因为你的 SCons 版本太老了。请使用 <literal>python -m pip install --upgrade scons</literal> 将其更新为最新版本。</paragraph>
            <target refid="doc-compiling-for-windows-install-vs"></target>
        </section>
        <section ids="installing-visual-studio-caveats doc-compiling-for-windows-install-vs" names="installing\ visual\ studio\ caveats 安装\ visual\ studio\ 注意事项 doc_compiling_for_windows_install_vs">
            <title>安装 Visual Studio 注意事项</title>
            <paragraph>如果安装Visual Studio 2017或2019, 请确保启用要安装的工作流程列表中的 <strong>C++</strong> .</paragraph>
            <paragraph>如果安装Visual Studio 2015, 请确保运行 <strong>自定义</strong> 安装而不是 <strong>典型</strong> 安装, 然后选择 <strong>C++</strong> 作为语言.</paragraph>
            <paragraph>如果你已经犯了在没有C++支持的情况下安装Visual Studio的错误, 请再次运行安装程序；它将为你提供一个 <strong>修改</strong> 按钮. 从 <emphasis>添加/删除程序</emphasis> 中运行安装程序只会给你提供 <strong>修复</strong> 选项, 而该选项将不允许你安装C++工具.</paragraph>
        </section>
        <section ids="downloading-godot-s-source" names="downloading\ godot's\ source 下载\ godot\ 的源代码">
            <title>下载 Godot 的源代码</title>
            <paragraph>详细步骤请参考 <reference internal="True" refuri="getting_source#doc-getting-source"><inline classes="std std-ref">获取源代码</inline></reference>。</paragraph>
            <paragraph>从现在开始，本教程将假设你将源代码放在了 <literal>C:\godot</literal>。</paragraph>
            <warning>
                <paragraph>为了防止编译过程中由于连续病毒扫描而导致的速度减慢，请将 Godot 源文件夹添加到杀毒软件中的例外列表中。</paragraph>
                <paragraph>For Windows Defender, hit the <literal classes="kbd">Windows</literal> key, type "Windows Security"
                    then hit <literal classes="kbd">Enter</literal>. Click on <strong>Virus &amp; threat protection</strong> on the left
                    panel. Under <strong>Virus &amp; threat protection settings</strong> click on <strong>Mange Settings</strong>
                    and scroll down to <strong>Exclusions</strong>. Click <strong>Add or remove exclusions</strong> then
                    add the Godot source folder.</paragraph>
            </warning>
        </section>
        <section ids="compiling" names="compiling 编译">
            <title>编译</title>
            <section ids="selecting-a-compiler" names="selecting\ a\ compiler 选择编译器">
                <title>选择编译器</title>
                <paragraph>SCons 将自动查找并使用现有的 Visual Studio 安装。如果你没有安装 Visual Studio，它将尝试使用 MinGW 代替。如果你已经安装了 Visual Studio 并想使用 MinGW，请在 SCons 命令行中传入 <literal>use_mingw=yes</literal>。注意，MSVC 的构建不能从 MSYS2 或 MinGW 的 shell 中进行。使用 <literal>cmd.exe</literal> 或 PowerShell 代替。</paragraph>
                <paragraph>在开发过程中，通常最好使用 Visual Studio 编译器，因为链接 Godot 二进制文件的速度比 MinGW 更快。但是，MinGW 可以利用链接时优化（见下文）来生成更多优化的二进制文件，从而使其成为生产使用的更好选择。</paragraph>
            </section>
            <section ids="running-scons" names="running\ scons 运行\ scons">
                <title>运行 SCons</title>
                <paragraph>After opening a command prompt, change to the root directory of
                    the engine source code (using <literal>cd</literal>) and type:</paragraph>
                <literal_block force="False" highlight_args="{}" language="doscon" linenos="False" xml:space="preserve">C:\godot&gt; scons platform=windows</literal_block>
                <note>
                    <paragraph>使用多个 CPU 线程进行编译时，SCons 可能会警告 pywin32 丢失。你可以放心地忽略此警告。</paragraph>
                </note>
                <paragraph>If all goes well, the resulting binary executable will be placed in
                    <literal>C:\godot\bin\</literal> with the name <literal>godot.windows.editor.x86_32.exe</literal> or
                    <literal>godot.windows.editor.x86_64.exe</literal>. By default, SCons will build a binary matching
                    your CPU architecture, but this can be overridden using <literal>arch=x86_64</literal> or
                    <literal>arch=x86_32</literal>.</paragraph>
                <paragraph>该可执行文件包含整个引擎，并且运行时没有任何依赖项。运行它会启动项目管理器。</paragraph>
                <note>
                    <paragraph>If you are compiling Godot for production use, then you can
                        make the final executable smaller and faster by adding the
                        SCons option <literal>target=template_release</literal>.</paragraph>
                    <paragraph>If you are compiling Godot with MinGW, you can make the binary
                        even smaller and faster by adding the SCons option <literal>lto=full</literal>.
                        As link-time optimization is a memory-intensive process,
                        this will require about 7 GB of available RAM while compiling.</paragraph>
                </note>
                <note>
                    <paragraph>如果你想为自己的 Godot 构建和官方发布使用单独的编辑器设置，你可以通过在 <literal>bin/</literal> 文件夹中创建一个名为 <literal>._sc_</literal> 或 <literal>_sc_</literal> 的文件来启用 <reference internal="True" refuri="../../../tutorials/io/data_paths#doc-data-paths-self-contained-mode"><inline classes="std std-ref">自包含模式</inline></reference>。</paragraph>
                </note>
            </section>
        </section>
        <section ids="development-in-visual-studio" names="development\ in\ visual\ studio 在\ visual\ studio\ 中进行开发">
            <title>在 Visual Studio 中进行开发</title>
            <paragraph>编译 Godot 不需要使用 IDE，SCons 会处理所有事情。但是如果你想要做引擎开发，或者调试引擎的 C++ 代码，你可能会对配置代码编辑器或者 IDE 感兴趣。</paragraph>
            <paragraph>基于文件夹的编辑器不需要任何特殊的设置就可以开始使用 Godot 的代码库。要使用 Visual Studio 来编辑项目，需要先设置解决方案。</paragraph>
            <paragraph>你可以通过使用 <literal>vsproj=yes</literal> 参数运行 SCons 来创建 Visual Studio 解决方案，如下所示：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons p=windows vsproj=yes</literal_block>
            <paragraph>你现在可以在 Visual Studio 解决方案中打开 Godot 的源代码，并能够通过 Visual Studio 的<strong>构建</strong>按钮构建 Godot。</paragraph>
            <seealso>
                <paragraph>详情请参阅 <reference internal="True" refuri="../configuring_an_ide/visual_studio#doc-configuring-an-ide-vs"><inline classes="std std-ref">Visual Studio</inline></reference>。</paragraph>
            </seealso>
        </section>
        <section ids="cross-compiling-for-windows-from-other-operating-systems" names="cross-compiling\ for\ windows\ from\ other\ operating\ systems 从其他操作系统为\ windows\ 交叉编译">
            <title>从其他操作系统为 Windows 交叉编译</title>
            <paragraph>如果你是Linux或macOS用户, 你需要安装 <reference name="MinGW-w64" refuri="https://mingw-w64.org/doku.php">MinGW-w64</reference> , 它通常有32位和64位两种版本. 包的名称可能根据你的发行版而不同, 这里有一些已知的包:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="16"></colspec>
                    <colspec colwidth="62"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><strong>Arch Linux</strong></paragraph>
                            </entry>
                            <entry>
                                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">pacman -Sy mingw-w64</literal_block>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>Debian</strong> /
                                    <strong>Ubuntu</strong></paragraph>
                            </entry>
                            <entry>
                                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">apt install mingw-w64</literal_block>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>Fedora</strong></paragraph>
                            </entry>
                            <entry>
                                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">dnf install mingw64-gcc-c++ mingw64-winpthreads-static \
            mingw32-gcc-c++ mingw32-winpthreads-static</literal_block>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>macOS</strong></paragraph>
                            </entry>
                            <entry>
                                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">brew install mingw-w64</literal_block>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>Mageia</strong></paragraph>
                            </entry>
                            <entry>
                                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">urpmi mingw64-gcc-c++ mingw64-winpthreads-static \
      mingw32-gcc-c++ mingw32-winpthreads-static</literal_block>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>在尝试编译之前，SCons 将在 <literal>PATH</literal> 环境变量中检查以下二进制文件：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">i686-w64-mingw32-gcc
x86_64-w64-mingw32-gcc</literal_block>
            <paragraph>If the binaries are not located in the <literal>PATH</literal> (e.g. <literal>/usr/bin</literal>),
                you can define the following environment variable to give a hint to
                the build system:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">export MINGW_PREFIX="/path/to/mingw"</literal_block>
            <paragraph>Where <literal>/path/to/mingw</literal> is the path containing the <literal>bin</literal> directory where
                <literal>i686-w64-mingw32-gcc</literal> and <literal>x86_64-w64-mingw32-gcc</literal> are located (e.g.
                <literal>/opt/mingw-w64</literal> if the binaries are located in <literal>/opt/mingw-w64/bin</literal>).</paragraph>
            <paragraph>为了确保你做的事正确，在 shell 中执行以下操作将导致编译器正常工作（版本输出可能因你的系统而异）：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">${MINGW_PREFIX}/bin/x86_64-w64-mingw32-gcc --version
# x86_64-w64-mingw32-gcc (GCC) 13.2.0</literal_block>
            <note>
                <paragraph>When cross-compiling for Windows using MinGW-w64, keep in mind only
                    <literal>x86_64</literal> and <literal>x86_32</literal> architectures are supported. Be sure to
                    specify the right <literal>arch=</literal> option when invoking SCons if building
                    from a different architecture.</paragraph>
            </note>
            <section ids="troubleshooting" names="troubleshooting 故障排除">
                <title>故障排除</title>
                <paragraph>由于默认配置不支持POSIX线程, 因此从某些Ubuntu版本进行交叉编译可能会导致 <reference name="此bug" refuri="https://github.com/godotengine/godot/issues/9258">此bug</reference><target ids="bug" names="此bug" refuri="https://github.com/godotengine/godot/issues/9258"></target> .</paragraph>
                <paragraph>你可以按照以下说明针对 64 位更改该配置：</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">sudo update-alternatives --config x86_64-w64-mingw32-gcc
&lt;choose x86_64-w64-mingw32-gcc-posix from the list&gt;
sudo update-alternatives --config x86_64-w64-mingw32-g++
&lt;choose x86_64-w64-mingw32-g++-posix from the list&gt;</literal_block>
                <paragraph>对于 32 位：</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">sudo update-alternatives --config i686-w64-mingw32-gcc
&lt;choose i686-w64-mingw32-gcc-posix from the list&gt;
sudo update-alternatives --config i686-w64-mingw32-g++
&lt;choose i686-w64-mingw32-g++-posix from the list&gt;</literal_block>
            </section>
        </section>
        <section ids="creating-windows-export-templates" names="creating\ windows\ export\ templates 创建\ windows\ 导出模板">
            <title>创建 Windows 导出模板</title>
            <paragraph>Windows export templates are created by compiling Godot without the editor,
                with the following flags:</paragraph>
            <literal_block force="False" highlight_args="{}" language="doscon" linenos="False" xml:space="preserve">C:\godot&gt; scons platform=windows target=template_debug arch=x86_32
C:\godot&gt; scons platform=windows target=template_release arch=x86_32
C:\godot&gt; scons platform=windows target=template_debug arch=x86_64
C:\godot&gt; scons platform=windows target=template_release arch=x86_64</literal_block>
            <paragraph>If you plan on replacing the standard export templates, copy these to the
                following location, replacing <literal>&lt;version&gt;</literal> with the version identifier
                (such as <literal>3.1.1.stable</literal> or <literal>3.2.dev</literal>):</paragraph>
            <literal_block force="False" highlight_args="{}" language="none" linenos="False" xml:space="preserve">%USERPROFILE%\AppData\Roaming\Godot\templates\&lt;version&gt;\</literal_block>
            <paragraph>使用以下名称：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">windows_32_debug.exe
windows_32_release.exe
windows_64_debug.exe
windows_64_release.exe</literal_block>
            <paragraph>此外, 如果你使用的是自定义模块或自定义引擎代码, 则可能需要在此处将二进制文件配置为自定义导出模板:</paragraph>
            <image candidates="{'*': 'contributing/development/compiling/img/wintemplates.png'}" uri="contributing/development/compiling/img/wintemplates.png"></image>
            <paragraph>在这种情况下, 你不需要复制它们, 只需引用在Godot源文件夹的 <literal>bin\</literal> 目录中生成的文件, 因此下次构建时, 将自动引用自定义模板.</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
