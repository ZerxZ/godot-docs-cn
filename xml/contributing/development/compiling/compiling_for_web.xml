<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/compiling/compiling_for_web.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-compiling-for-web"></target>
    <section ids="compiling-for-the-web doc-compiling-for-web" names="compiling\ for\ the\ web 为\ web\ 平台编译 doc_compiling_for_web">
        <title>为 Web 平台编译</title>
        <seealso>
            <paragraph>这个页面描述的是如何从源码编译 HTML5 编辑器和导出模板二进制文件。如果你要找的是导出项目到 HTML5，请阅读 <reference internal="True" refuri="../../../tutorials/export/exporting_for_web#doc-exporting-for-web"><inline classes="std std-ref">为 Web 导出</inline></reference>。</paragraph>
        </seealso>
        <section ids="requirements" names="requirements 需求">
            <title>需求</title>
            <paragraph>编译 Web 的导出模板需要以下内容：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="Emscripten 3.1.39+" refuri="https://emscripten.org">Emscripten 3.1.39+</reference>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Python 3.6+" refuri="https://www.python.org/">Python 3.6+</reference>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="SCons 3.0+" refuri="https://scons.org/pages/download.html">SCons 3.0+</reference> build system.</paragraph>
                </list_item>
            </bullet_list>
            <seealso>
                <paragraph>要获取编译所需的 Godot 源码，请参阅 <reference internal="True" refuri="getting_source#doc-getting-source"><inline classes="std std-ref">获取源代码</inline></reference>。</paragraph>
                <paragraph>有关 Godot 的 SCons 用法的一般概述，请参阅 <reference internal="True" refuri="introduction_to_the_buildsystem#doc-introduction-to-the-buildsystem"><inline classes="std std-ref">构建系统介绍</inline></reference>。</paragraph>
            </seealso>
            <note>
                <paragraph>Emscripten 3.1.39+ is recommended, but older 3.x versions are known to work.</paragraph>
                <paragraph>Please note that the minimum requirement for GDExtension support is 3.1.14.</paragraph>
            </note>
        </section>
        <section ids="building-export-templates" names="building\ export\ templates 构建导出模板">
            <title>构建导出模板</title>
            <paragraph>在开始之前，确认 <literal>emcc</literal> 在你的 PATH 中是可用的。这通常是由 Emscripten SDK 配置的，例如在调用 <literal>emsdk activate</literal> 和 <literal>source ./emsdk_env.sh</literal>/<literal>emsdk_env.bat</literal> 时。</paragraph>
            <paragraph>Open a terminal and navigate to the root directory of the engine source code.
                Then instruct SCons to build the Web platform. Specify <literal>target</literal> as
                either <literal>template_release</literal> for a release build or <literal>template_debug</literal> for a debug build:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=web target=template_release
scons platform=web target=template_debug</literal_block>
            <paragraph>默认情况下，<reference internal="True" refuri="../../../tutorials/export/exporting_for_web#doc-javascript-eval"><inline classes="std std-ref">JavaScript singleton</inline></reference> 将被内置到引擎中，官方导出模板也启用了 JavaScript 单例。由于 <literal>eval()</literal> 调用可能是一个安全问题，<literal>javascript_eval</literal> 选项可以用来构建，而无需单例：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=web target=template_release javascript_eval=no
scons platform=web target=template_debug javascript_eval=no</literal_block>
            <paragraph>The engine will now be compiled to WebAssembly by Emscripten. Once finished,
                the resulting file will be placed in the <literal>bin</literal> subdirectory. Its name is
                <literal>godot.web.template_release.wasm32.zip</literal> for release or <literal>godot.web.template_debug.wasm32.zip</literal>
                for debug.</paragraph>
            <paragraph>Finally, rename the zip archive to <literal>web_release.zip</literal> for the
                release template:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">mv bin/godot.web.template_release.wasm32.zip bin/web_release.zip</literal_block>
            <paragraph>And <literal>web_debug.zip</literal> for the debug template:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">mv bin/godot.web.template_debug.wasm32.zip bin/web_debug.zip</literal_block>
        </section>
        <section ids="gdextension" names="gdextension">
            <title>GDExtension</title>
            <paragraph>The default export templates do not include GDExtension support for
                performance and compatibility reasons. See the
                <reference internal="True" refuri="../../../tutorials/export/exporting_for_web#doc-javascript-export-options"><inline classes="std std-ref">export page</inline></reference> for more info.</paragraph>
            <paragraph>You can build the export templates using the option <literal>dlink_enabled=yes</literal>
                to enable GDExtension support:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=web dlink_enabled=yes target=template_release
scons platform=web dlink_enabled=yes target=template_debug</literal_block>
            <paragraph>Once finished, the resulting file will be placed in the <literal>bin</literal> subdirectory.
                Its name will have <literal>_dlink</literal> added.</paragraph>
            <paragraph>Finally, rename the zip archives to <literal>web_dlink_release.zip</literal> and
                <literal>web_dlink_release.zip</literal> for the release template:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">mv bin/godot.web.template_release.wasm32.dlink.zip bin/web_dlink_release.zip
mv bin/godot.web.template_debug.wasm32.dlink.zip bin/web_dlink_debug.zip</literal_block>
        </section>
        <section ids="building-the-editor" names="building\ the\ editor 构建编辑器">
            <title>构建编辑器</title>
            <paragraph>It is also possible to build a version of the Godot editor that can run in the
                browser. The editor version is not recommended
                over the native build. You can build the editor with:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=web target=editor</literal_block>
            <paragraph>Once finished, the resulting file will be placed in the <literal>bin</literal> subdirectory.
                Its name will be <literal>godot.web.editor.wasm32.zip</literal>. You can upload the
                zip content to your web server and visit it with your browser to use the editor.</paragraph>
            <paragraph>关于网络服务器的要求，请参考<reference internal="True" refuri="../../../tutorials/export/exporting_for_web#doc-javascript-export-options"><inline classes="std std-ref">导出页面</inline></reference>。</paragraph>
            <tip>
                <paragraph>Godot 仓库包含一个 <problematic ids="id2" refid="id1">`Python 脚本，用于托管本地 web 服务器 &lt; https://raw.githubusercontent.com/godotengine/Godot/master/platform/web/serve.py &gt;`__</problematic> 。这可以用来在本地测试 Web 编辑器。</paragraph>
                <paragraph>编译完编辑器后，解压在 <literal>bin/</literal> 文件夹中创建的 ZIP 文件，然后在 Godot 仓库根目录中运行以下命令:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve"># You may need to replace `python` with `python3` on some platforms.
python platform/web/serve.py</literal_block>
                <paragraph>这将为 <literal>bin/</literal> 文件夹中的内容运行网页服务，并自动打开默认的浏览器。在打开的页面中访问 <literal>godot.tools.html</literal> ，你可以使用这种方式测试 Web 编辑器。</paragraph>
                <paragraph>Note that for production use cases, this Python-based web server should not
                    be used. Instead, you should use an established web server such as Apache or
                    nginx.</paragraph>
            </tip>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
