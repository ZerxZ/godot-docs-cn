<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-cross-compiling-for-ios-on-linux"></target>
    <section ids="cross-compiling-for-ios-on-linux doc-cross-compiling-for-ios-on-linux" names="cross-compiling\ for\ ios\ on\ linux 在\ linux\ 平台上为\ ios\ 做交叉编译 doc_cross-compiling_for_ios_on_linux">
        <title>在 Linux 平台上为 iOS 做交叉编译</title>
        <paragraph>The procedure for this is somewhat complex and requires a lot of steps,
            but once you have the environment properly configured you can
            compile Godot for iOS anytime you want.</paragraph>
        <section ids="disclaimer" names="disclaimer 免责声明">
            <title>免责声明</title>
            <paragraph>While it is possible to compile for iOS on a Linux environment, Apple is
                very restrictive about the tools to be used (especially hardware-wise),
                allowing pretty much only their products to be used for development. So
                this is <strong>not official</strong>. However, in 2010 Apple said they relaxed some of the
                <reference name="App Store review guidelines" refuri="https://developer.apple.com/app-store/review/guidelines/">App Store review guidelines</reference>
                to allow any tool to be used, as long as the resulting binary does not
                download any code, which means it should be OK to use the procedure
                described here and cross-compiling the binary.</paragraph>
        </section>
        <section ids="requirements" names="requirements 需求">
            <title>需求</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="XCode with the iOS SDK" refuri="https://developer.apple.com/xcode/download">XCode with the iOS SDK</reference>
                        (a dmg image, for newer versions a <strong>xip</strong> file is going to be downloaded.)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Clang &gt;= 3.5" refuri="https://clang.llvm.org">Clang &gt;= 3.5</reference> for your development
                        machine installed and in the <literal>PATH</literal>. It has to be version &gt;= 3.5
                        to target <literal>arm64</literal> architecture.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Fuse" refuri="https://github.com/libfuse/libfuse">Fuse</reference> for mounting and unmounting
                        the dmg image.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="darling-dmg" refuri="https://github.com/darlinghq/darling-dmg">darling-dmg</reference>, 需要从源码构建. 下面说明其过程.</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>For newer versions you should download <reference name="xar" refuri="https://mackyle.github.io/xar/">xar</reference>
                                    and <reference name="pbzx" refuri="https://github.com/NiklasRosenstein/pbzx">pbzx</reference>.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>要构建darling-dmg, 你需要以下库的开发包:fuse,icu,openssl,zlib,bzip2.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>For building xar and pbzx you may want to follow
                                    <reference name="this guide" refuri="https://gist.github.com/phracker/1944ce190e01963c550566b749bd2b54">this guide</reference>.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph><reference name="cctools-port" refuri="https://github.com/tpoechtrager/cctools-port">cctools-port</reference> 用于所需的构建工具. 构建过程非常特殊, 下面将进行描述.</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>这也有一些额外的依赖:automake,autogen,libtool.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
            </bullet_list>
        </section>
        <section ids="configuring-the-environment" names="configuring\ the\ environment 配置环境">
            <title>配置环境</title>
            <section ids="darling-dmg" names="darling-dmg">
                <title>darling-dmg</title>
                <paragraph>在你的机器上克隆该仓库：</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ git clone https://github.com/darlinghq/darling-dmg.git</literal_block>
                <paragraph>构建它：</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ cd darling-dmg
$ mkdir build
$ cd build
$ cmake .. -DCMAKE_BUILD_TYPE=Release
$ make -j 4  # The number is the amount of cores your processor has, for faster build
$ cd ../..</literal_block>
            </section>
            <section ids="preparing-the-sdk" names="preparing\ the\ sdk 准备\ sdk">
                <title>准备 SDK</title>
                <paragraph>挂载 XCode 镜像：</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ mkdir xcode
$ ./darling-dmg/build/darling-dmg /path/to/Xcode_7.1.1.dmg xcode
[...]
Everything looks OK, disk mounted</literal_block>
                <paragraph>For newer versions you should extract the <strong>xip</strong> file:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ mkdir xcode
$ xar -xf /path/to/Xcode_X.x.xip -C xcode
$ pbzx -n Content | cpio -i
[...]
######### Blocks</literal_block>
                <paragraph>Note that for the commands below, you may need to replace the version (<title_reference>X.x</title_reference>) with whatever iOS SDK version you're using.</paragraph>
                <paragraph>解压缩 iOS SDK：</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ # If you don't know your iPhone SDK version you can see the json file inside of Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs
$ mkdir -p iPhoneSDK/iPhoneOSX.x.sdk
$ cp -r xcode/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/* iPhoneSDK/iPhoneOSX.x.sdk
$ cp -r xcode/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/* iPhoneSDK/iPhoneOSX.x.sdk/usr/include/c++
$ fusermount -u xcode  # unmount the image</literal_block>
                <paragraph>打包 SDK：</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ cd iPhoneSDK
$ tar -cf - * | xz -9 -c - &gt; iPhoneOSX.x.sdk.tar.xz</literal_block>
            </section>
            <section ids="toolchain" names="toolchain 工具链">
                <title>工具链</title>
                <paragraph>构建 cctools：</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ git clone https://github.com/tpoechtrager/cctools-port.git
$ cd cctools-port/usage_examples/ios_toolchain
$ ./build.sh /path/iPhoneOSX.x.sdk.tar.xz arm64</literal_block>
                <paragraph>将工具复制到更好的位置. 请注意, 用于构建的SCons脚本将在你为工具链二进制文件提供的目录中的 <literal>usr/bin</literal> 下查找, 因此, 你必须复制到这样的子目录, 类似于以下命令:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ mkdir -p /home/user/iostoolchain/usr
$ cp -r target/bin /home/user/iostoolchain/usr/</literal_block>
                <paragraph>现在你应该在 <literal>/home/user/iostoolchain/usr/bin</literal> 中拥有iOS工具链二进制文件.</paragraph>
            </section>
        </section>
        <section ids="compiling-godot-for-iphone" names="compiling\ godot\ for\ iphone 为\ iphone\ 编译\ godot">
            <title>为 iPhone 编译 Godot</title>
            <paragraph>完成上述步骤后, 应在环境中保留两件事: 构建的工具链和iPhoneOS SDK目录. 那些可以留在你想要的任何地方, 因此你必须提供它们的路径给SCons构建命令.</paragraph>
            <paragraph>为了检测iPhone平台, 你需要将 <literal>OSXCROSS_IOS</literal> 环境变量定义为 <literal>anything</literal>.</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ export OSXCROSS_IOS=anything</literal_block>
            <paragraph>现在你可以使用SCons像标准Godot方式一样编译iPhone, 带有一些其他参数以提供正确的路径:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">$ scons -j 4 platform=ios arch=arm64 target=template_release IOS_SDK_PATH="/path/to/iPhoneSDK" IOS_TOOLCHAIN_PATH="/path/to/iostoolchain" ios_triple="arm-apple-darwin11-"</literal_block>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
