<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/compiling/compiling_for_macos.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-compiling-for-macos"></target>
    <section ids="compiling-for-macos doc-compiling-for-macos" names="compiling\ for\ macos 为\ macos\ 平台编译 doc_compiling_for_macos">
        <title>为 macOS 平台编译</title>
        <note>
            <paragraph>这个页面描述的是如何从源码编译 macOS 编辑器和导出模板二进制文件。如果你要找的是导出项目到 macOS，请阅读 <reference internal="True" refuri="../../../tutorials/export/exporting_for_macos#doc-exporting-for-macos"><inline classes="std std-ref">为 macOS 导出</inline></reference>。</paragraph>
        </note>
        <section ids="requirements" names="requirements 需求">
            <title>需求</title>
            <paragraph>在 macOS 下编译时，需要以下条件：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="Python 3.6+" refuri="https://www.python.org/downloads/macos/">Python 3.6+</reference><target ids="python-3-6" names="python\ 3.6+" refuri="https://www.python.org/downloads/macos/"></target>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="SCons 3.0+" refuri="https://scons.org/pages/download.html">SCons 3.0+</reference><target ids="scons-3-0" names="scons\ 3.0+" refuri="https://scons.org/pages/download.html"></target> 构建系统.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Xcode" refuri="https://apps.apple.com/us/app/xcode/id497799835">Xcode</reference><target ids="xcode" names="xcode" refuri="https://apps.apple.com/us/app/xcode/id497799835"></target>（或更轻量的 Xcode 命令行工具）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Vulkan SDK" refuri="https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg">Vulkan SDK</reference><target ids="vulkan-sdk" names="vulkan\ sdk" refuri="https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg"></target>
                        for MoltenVK (macOS doesn't support Vulkan out of the box).</paragraph>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>If you have <reference name="Homebrew" refuri="https://brew.sh/">Homebrew</reference><target ids="homebrew" names="homebrew" refuri="https://brew.sh/"></target> installed, you can easily
                    install SCons using the following command:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">brew install scons</literal_block>
                <paragraph>如果你还没有 Xcode 命令行工具，安装 Homebrew 也会自动进行获取。</paragraph>
                <paragraph>Similarly, if you have <reference name="MacPorts" refuri="https://www.macports.org/">MacPorts</reference><target ids="macports" names="macports" refuri="https://www.macports.org/"></target>
                    installed, you can easily install SCons using the
                    following command:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">sudo port install scons</literal_block>
            </note>
            <seealso>
                <paragraph>要获取编译所需的 Godot 源码，请参阅 <reference internal="True" refuri="getting_source#doc-getting-source"><inline classes="std std-ref">获取源代码</inline></reference>。</paragraph>
                <paragraph>有关 Godot 的 SCons 用法的一般概述，请参阅 <reference internal="True" refuri="introduction_to_the_buildsystem#doc-introduction-to-the-buildsystem"><inline classes="std std-ref">构建系统介绍</inline></reference>。</paragraph>
            </seealso>
        </section>
        <section ids="compiling" names="compiling 编译">
            <title>编译</title>
            <paragraph>启动终端, 进入引擎源代码的根目录.</paragraph>
            <paragraph>若要为英特尔（x86-64）架构的 Mac 编译，请使用：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=macos arch=x86_64</literal_block>
            <paragraph>要为 Apple Silicon（ARM64）驱动的 Mac 编译，请使用：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=macos arch=arm64</literal_block>
            <paragraph>如果要通过“Universal 2”二进制来同时支持这两种架构，请运行上述两个命令，然后使用 <literal>lipo</literal> 将它们打包在一起：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">lipo -create bin/godot.macos.editor.x86_64 bin/godot.macos.editor.arm64 -output bin/godot.macos.editor.universal</literal_block>
            <paragraph>If all goes well, the resulting binary executable will be placed in the
                <literal>bin/</literal> subdirectory. This executable file contains the whole engine and
                runs without any dependencies. Executing it will bring up the Project
                Manager.</paragraph>
            <note>
                <paragraph>如果你想为自己的 Godot 构建和官方发布使用单独的编辑器设置，你可以通过在 <literal>bin/</literal> 文件夹中创建一个名为 <literal>._sc_</literal> 或 <literal>_sc_</literal> 的文件来启用 <reference internal="True" refuri="../../../tutorials/io/data_paths#doc-data-paths-self-contained-mode"><inline classes="std std-ref">自包含模式</inline></reference>。</paragraph>
            </note>
            <paragraph>To create an <literal>.app</literal> bundle like in the official builds, you need to use the
                template located in <literal>misc/dist/macos_tools.app</literal>. Typically, for an optimized
                editor binary built with <literal>dev_build=yes</literal>:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">cp -r misc/dist/macos_tools.app ./Godot.app
mkdir -p Godot.app/Contents/MacOS
cp bin/godot.macos.editor.universal Godot.app/Contents/MacOS/Godot
chmod +x Godot.app/Contents/MacOS/Godot
codesign --force --timestamp --options=runtime --entitlements misc/dist/macos/editor.entitlements -s - Godot.app</literal_block>
            <note>
                <paragraph>If you are building the <literal>master</literal> branch, you also need to include support
                    for the MoltenVK Vulkan portability library. By default, it will be linked
                    statically from your installation of the Vulkan SDK for macOS.
                    You can also choose to link it dynamically by passing <literal>use_volk=yes</literal> and
                    including the dynamic library in your <literal>.app</literal> bundle:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">mkdir -p Godot.app/Contents/Frameworks
cp &lt;Vulkan SDK path&gt;/macOS/lib/libMoltenVK.dylib Godot.app/Contents/Frameworks/libMoltenVK.dylib</literal_block>
            </note>
        </section>
        <section ids="running-a-headless-server-build" names="running\ a\ headless/server\ build 运行无头/服务器构建">
            <title>运行无头/服务器构建</title>
            <paragraph>To run in <emphasis>headless</emphasis> mode which provides editor functionality to export
                projects in an automated manner, use the normal build:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=macos target=editor</literal_block>
            <paragraph>然后使用 <literal>--headless</literal> 命令行参数：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">./bin/godot.macos.editor.x86_64 --headless</literal_block>
            <paragraph>如果要编译调试版本的<emphasis>服务器</emphasis>，支持<reference internal="True" refuri="../../../tutorials/editor/command_line_tutorial#doc-command-line-tutorial"><inline classes="std std-ref">远程调试工具</inline></reference>，那么请使用：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=macos target=template_debug</literal_block>
            <paragraph>如果要编译发布版本的<emphasis>服务器</emphasis>，针对运行专门的游戏服务器进行优化，那么请使用：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=macos target=template_release production=yes</literal_block>
        </section>
        <section ids="building-export-templates" names="building\ export\ templates 构建导出模板">
            <title>构建导出模板</title>
            <paragraph>To build macOS export templates, you have to compile using the targets without
                the editor: <literal>target=template_release</literal> (release template) and
                <literal>target=template_debug</literal>.</paragraph>
            <paragraph>官方模板是通用的二进制文件，同时支持英特尔x86_64和ARM64架构。你也可以通过省略下面的 <literal>lipo</literal> 步骤，创建只支持架构中的一种的导出模板。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>对于英特尔 x86_64：</paragraph>
                    <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=macos target=template_release arch=x86_64
scons platform=macos target=template_debug arch=x86_64</literal_block>
                </list_item>
                <list_item>
                    <paragraph>For Arm64 (Apple M1):</paragraph>
                    <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=macos target=template_release arch=arm64
scons platform=macos target=template_debug arch=arm64</literal_block>
                </list_item>
            </bullet_list>
            <paragraph>要使用“Universal 2”二进制来同时支持这两种架构，请运行上述两个命令块，然后使用 <literal>lipo</literal> 将它们捆绑在一起：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">lipo -create bin/godot.macos.template_release.x86_64 bin/godot.macos.template_release.arm64 -output bin/godot.macos.template_release.universal
lipo -create bin/godot.macos.template_debug.x86_64 bin/godot.macos.template_debug.arm64 -output bin/godot.macos.template_debug.universal</literal_block>
            <paragraph>To create an <literal>.app</literal> bundle like in the official builds, you need to use the
                template located in <literal>misc/dist/macos_template.app</literal>. The release and debug
                builds should be placed in <literal>macos_template.app/Contents/MacOS</literal> with the names
                <literal>godot_macos_release.universal</literal> and <literal>godot_macos_debug.universal</literal> respectively. You can do so
                with the following commands (assuming a universal build, otherwise replace the
                <literal>.universal</literal> extension with the one of your arch-specific binaries):</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">cp -r misc/dist/macos_template.app .
mkdir -p macos_template.app/Contents/MacOS
cp bin/godot.macos.template_release.universal macos_template.app/Contents/MacOS/godot_macos_release.universal
cp bin/godot.macos.template_debug.universal macos_template.app/Contents/MacOS/godot_macos_debug.universal
chmod +x macos_template.app/Contents/MacOS/godot_macos*</literal_block>
            <note>
                <paragraph>If you are building the <literal>master</literal> branch, you also need to include support
                    for the MoltenVK Vulkan portability library. By default, it will be linked
                    statically from your installation of the Vulkan SDK for macOS.
                    You can also choose to link it dynamically by passing <literal>use_volk=yes</literal> and
                    including the dynamic library in your <literal>.app</literal> bundle:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">mkdir -p macos_template.app/Contents/Frameworks
cp &lt;Vulkan SDK path&gt;/macOS/libs/libMoltenVK.dylib macos_template.app/Contents/Frameworks/libMoltenVK.dylib</literal_block>
            </note>
            <paragraph>You can then zip the <literal>macos_template.app</literal> folder to reproduce the <literal>macos.zip</literal>
                template from the official Godot distribution:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">zip -q -9 -r macos.zip macos_template.app</literal_block>
        </section>
        <section ids="using-pyston-for-faster-development" names="using\ pyston\ for\ faster\ development 使用\ pyston\ 加快开发速度">
            <title>使用 Pyston 加快开发速度</title>
            <paragraph>You can use <reference name="Pyston" refuri="https://www.pyston.org/">Pyston</reference> to run SCons. Pyston is a
                JIT-enabled implementation of the Python language (which SCons is written in).
                Its "full" version is currently only compatible with Linux, but Pyston-lite is
                also compatible with macOS (both x86 and ARM). Pyston can speed up incremental
                builds significantly, often by a factor between 1.5× and 2×. Pyston can be
                combined with alternative linkers such as LLD or Mold to get even faster builds.</paragraph>
            <paragraph>To install Pyston-lite, run <literal>python -m pip install pyston_lite_autoload</literal> then
                run SCons as usual. This will automatically load a subset of Pyston's
                optimizations in any Python program you run. However, this won't bring as much
                of a performance improvement compared to installing "full" Pyston (which
                currently can't be done on macOS).</paragraph>
        </section>
        <section ids="cross-compiling-for-macos-from-linux" names="cross-compiling\ for\ macos\ from\ linux 从\ linux\ 交叉编译\ macos">
            <title>从 Linux 交叉编译 macOS</title>
            <paragraph>在Linux环境下为macOS进行编译是可行的(也许也可以在Windows中使用Windows Subsystem for Linux). 为此, 你需要安装 <reference name="OSXCross" refuri="https://github.com/tpoechtrager/osxcross">OSXCross</reference> , 以便能够使用macOS作为目标. 首先, 按照说明来安装它:</paragraph>
            <paragraph>在你的机器上某处克隆 <reference name="OSXCross 资源库" refuri="https://github.com/tpoechtrager/osxcross">OSXCross 资源库</reference>（或者下载一个 ZIP 文件并解压缩），例如：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">git clone --depth=1 https://github.com/tpoechtrager/osxcross.git "$HOME/osxcross"</literal_block>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>按照说明打包SDK:<reference refuri="https://github.com/tpoechtrager/osxcross#packaging-the-sdk">https://github.com/tpoechtrager/osxcross#packaging-the-sdk</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph>按照说明安装OSXCross:<reference refuri="https://github.com/tpoechtrager/osxcross#installation">https://github.com/tpoechtrager/osxcross#installation</reference></paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>然后，你需要将 <literal>OSXCROSS_ROOT</literal> 定义为 OSXCross 的安装路径（与你克隆软件库/提取压缩包的地方相同），例如：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">export OSXCROSS_ROOT="$HOME/osxcross"</literal_block>
            <paragraph>现在你可以像平时一样用 SCons 进行编译：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=macos</literal_block>
            <paragraph>如果你的 OSXCross SDK 版本与 SCons 构建系统所期望的不同，你可以用 <literal>osxcross_sdk</literal> 参数指定一个自定义的版本：</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">scons platform=macos osxcross_sdk=darwin15</literal_block>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
