<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/compiling/compiling_with_dotnet.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-compiling-with-dotnet"></target>
    <section ids="compiling-with-net doc-compiling-with-dotnet" names="compiling\ with\ .net 使用\ .net\ 编译 doc_compiling_with_dotnet">
        <title>使用 .NET 编译</title>
        <section ids="requirements" names="requirements 需求">
            <title>需求</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name=".NET SDK 6.0+" refuri="https://dotnet.microsoft.com/download">.NET SDK 6.0+</reference><target ids="net-sdk-6-0" names=".net\ sdk\ 6.0+" refuri="https://dotnet.microsoft.com/download"></target></paragraph>
                    <paragraph>You can use <literal>dotnet --info</literal> to check which .NET SDK versions are installed.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="enable-the-net-module" names="enable\ the\ .net\ module 启用\ .net\ 模块">
            <title>启用 .NET 模块</title>
            <note>
                <paragraph>C# support for Godot has historically used the
                    <reference name="Mono" refuri="https://www.mono-project.com/">Mono</reference><target ids="mono" names="mono" refuri="https://www.mono-project.com/"></target> runtime instead of the
                    <reference name=".NET Runtime" refuri="https://github.com/dotnet/runtime">.NET Runtime</reference><target ids="net-runtime" names=".net\ runtime" refuri="https://github.com/dotnet/runtime"></target> and internally
                    many things are still named <literal>mono</literal> instead of <literal>dotnet</literal> or
                    otherwise referred to as <literal>mono</literal>.</paragraph>
            </note>
            <paragraph>By default, the .NET module is disabled when building. To enable it, add the
                option <literal>module_mono_enabled=yes</literal> to the SCons command line, while otherwise
                following the instructions for building the desired Godot binaries.</paragraph>
        </section>
        <section ids="generate-the-glue" names="generate\ the\ glue 生成胶水代码">
            <title>生成胶水代码</title>
            <paragraph>Parts of the sources of the managed libraries are generated from the ClassDB.
                These source files must be generated before building the managed libraries.
                They can be generated by any .NET-enabled Godot editor binary by running it with
                the parameters <literal>--headless --generate-mono-glue</literal> followed by the path to an
                output directory.
                This path must be <literal>modules/mono/glue</literal> in the Godot directory:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">&lt;godot_binary&gt; --headless --generate-mono-glue modules/mono/glue</literal_block>
            <paragraph>This command will tell Godot to generate the C# bindings for the Godot API at
                <literal>modules/mono/glue/GodotSharp/GodotSharp/Generated</literal>, and the C# bindings for
                the editor tools at <literal>modules/mono/glue/GodotSharp/GodotSharpEditor/Generated</literal>.
                Once these files are generated, you can build Godot's managed libraries for all
                the desired targets without having to repeat this process.</paragraph>
            <paragraph><literal>&lt;godot_binary&gt;</literal> refers to the editor binary you compiled with the .NET module
                enabled. Its exact name will differ based on your system and configuration, but
                should be of the form <literal>bin/godot.&lt;platform&gt;.editor.&lt;arch&gt;.mono</literal>, e.g.
                <literal>bin/godot.linuxbsd.editor.x86_64.mono</literal> or
                <literal>bin/godot.windows.editor.x86_32.mono.exe</literal>. Be especially aware of the
                <strong>.mono</strong> suffix! If you've previously compiled Godot without .NET support, you
                might have similarly named binaries without this suffix. These binaries can't be
                used to generate the .NET glue.</paragraph>
            <note>
                <paragraph>每次ClassDB注册的API更改时, 都必须重新生成胶水源码. 即, 例如, 当将新方法注册到脚本API时, 或该方法的参数之一发生更改时. 如果ClassDB和胶水源码之间的API不匹配,Godot将在启动时打印一条错误.</paragraph>
            </note>
        </section>
        <section ids="building-the-managed-libraries" names="building\ the\ managed\ libraries 构建托管库">
            <title>构建托管库</title>
            <paragraph>Once you have generated the .NET glue, you can build the managed libraries with
                the <literal>build_assemblies.py</literal> script:</paragraph>
            <literal_block force="False" language="shell" linenos="False" xml:space="preserve">./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin</literal_block>
            <paragraph>如果一切正常, 除了正常的输出,SCons应该在 <literal>bin</literal> 目录中创建了以下文件。</paragraph>
            <note>
                <paragraph>By default, all development builds share a version number, which can
                    cause some issues with caching of the NuGet packages. To solve this
                    issue either use <literal>GODOT_VERSION_STATUS</literal> to give every build a unique
                    version or delete <literal>GodotNuGetFallbackFolder</literal> after every build to
                    clear the package cache.</paragraph>
            </note>
            <paragraph>Unlike "classical" Godot builds, when building with the .NET module enabled
                (and depending on the target platform), a data directory may be created both
                for the editor and for exported projects. This directory is important for
                proper functioning and must be distributed together with Godot.
                More details about this directory in
                <reference internal="True" refid="compiling-with-dotnet-data-directory"><inline classes="std std-ref">Data directory</inline></reference>.</paragraph>
            <section ids="build-platform" names="build\ platform">
                <title>Build Platform</title>
                <paragraph>Provide the <literal>--godot-platform=&lt;platform&gt;</literal> argument to control for which
                    platform specific the libraries are built. Omit this argument to build for the
                    current system.</paragraph>
                <paragraph>This currently only controls the inclusion of the support for Visual Studio as
                    an external editor, the libraries are otherwise identical.</paragraph>
            </section>
            <section ids="nuget-packages" names="nuget\ packages">
                <title>NuGet packages</title>
                <paragraph>The API assemblies, source generators, and custom MSBuild project SDK are
                    distributed as NuGet packages. This is all transparent to the user, but it can
                    make things complicated during development.</paragraph>
                <paragraph>In order to use Godot with a development version of those packages, a local
                    NuGet source must be created where MSBuild can find them.</paragraph>
                <paragraph>First, pick a location for the local NuGet source. If you don't have a
                    preference, create an empty directory at one of these recommended locations:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>On Windows, <literal>C:\Users\&lt;username&gt;\MyLocalNugetSource</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>On Linux, *BSD, etc., <literal>~/MyLocalNugetSource</literal></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>This path is referred to later as <literal>&lt;my_local_source&gt;</literal>.</paragraph>
                <paragraph>After picking a directory, run this .NET CLI command to configure NuGet to use
                    your local source:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">dotnet nuget add source &lt;my_local_source&gt; --name MyLocalNugetSource</literal_block>
                <paragraph>When you run the <literal>build_assemblies.py</literal> script, pass <literal>&lt;my_local_source&gt;</literal> to
                    the <literal>--push-nupkgs-local</literal> option:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">./modules/mono/build_scripts/build_assemblies.py --godot-output-dir ./bin --push-nupkgs-local &lt;my_local_source&gt;</literal_block>
                <paragraph>This option ensures the packages will be added to the specified local NuGet
                    source and that conflicting versions of the package are removed from the NuGet
                    cache. It's recommended to always use this option when building the C# solutions
                    during development to avoid mistakes.</paragraph>
            </section>
            <section ids="double-precision-support-real-t-is-double" names="double\ precision\ support\ (real_t_is_double)">
                <title>Double Precision Support (REAL_T_IS_DOUBLE)</title>
                <paragraph>When building Godot with double precision support, i.e. the <literal>precision=double</literal>
                    argument for scons, the managed libraries must be adjusted to match by passing
                    the <literal>--precision=double</literal> argument:</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">./modules/mono/build_scripts/build_assemblies.py --godot-output-dir ./bin --push-nupkgs-local &lt;my_local_source&gt; --precision=double</literal_block>
            </section>
        </section>
        <section ids="examples" names="examples 示例">
            <title>示例</title>
            <section ids="example-windows" names="example\ (windows) 示例（windows）">
                <title>示例（Windows）</title>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve"># Build editor binary
scons p=windows target=editor module_mono_enabled=yes
# Build export templates
scons p=windows target=template_debug module_mono_enabled=yes
scons p=windows target=template_release module_mono_enabled=yes

# Generate glue sources
bin/godot.windows.editor.x86_64.mono --headless --generate-mono-glue modules/mono/glue
# Build .NET assemblies
./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=windows</literal_block>
            </section>
            <section ids="example-linux-bsd" names="example\ (linux,\ *bsd) 示例\ (linux,\ *bsd)">
                <title>示例 (Linux, *BSD)</title>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve"># Build editor binary
scons p=linuxbsd target=editor module_mono_enabled=yes
# Build export templates
scons p=linuxbsd target=template_debug module_mono_enabled=yes
scons p=linuxbsd target=template_release module_mono_enabled=yes

# Generate glue sources
bin/godot.linuxbsd.editor.x86_64.mono --headless --generate-mono-glue modules/mono/glue
# Generate binaries
./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd</literal_block>
                <target refid="compiling-with-dotnet-data-directory"></target>
            </section>
        </section>
        <section ids="data-directory compiling-with-dotnet-data-directory" names="data\ directory 数据目录 compiling_with_dotnet_data_directory">
            <title>数据目录</title>
            <paragraph>The data directory is a dependency for Godot binaries built with the .NET module
                enabled. It contains important files for the correct functioning of Godot. It
                must be distributed together with the Godot executable.</paragraph>
            <section ids="editor" names="editor 编辑器">
                <title>编辑器</title>
                <paragraph>The name of the data directory for the Godot editor will always be
                    <literal>GodotSharp</literal>. This directory contains an <literal>Api</literal> subdirectory with the Godot
                    API assemblies and a <literal>Tools</literal> subdirectory with the tools required by the
                    editor, like the <literal>GodotTools</literal> assemblies and its dependencies.</paragraph>
                <paragraph>On macOS, if the Godot editor is distributed as a bundle, the <literal>GodotSharp</literal>
                    directory may be placed in the <literal>&lt;bundle_name&gt;.app/Contents/Resources/</literal>
                    directory inside the bundle.</paragraph>
            </section>
            <section ids="export-templates" names="export\ templates 导出模板">
                <title>导出模板</title>
                <paragraph>The data directory for exported projects is generated by the editor during the
                    export. It is named <literal>data_&lt;APPNAME&gt;_&lt;ARCH&gt;</literal>, where <literal>&lt;APPNAME&gt;</literal> is the
                    application name as specified in the project setting <literal>application/config/name</literal>
                    and <literal>&lt;ARCH&gt;</literal> is the current architecture of the export.</paragraph>
                <paragraph>In the case of multi-architecture exports multiple such data directories will be
                    generated.</paragraph>
            </section>
        </section>
        <section ids="command-line-options" names="command-line\ options 命令行选项">
            <title>命令行选项</title>
            <paragraph>The following is the list of command-line options available when building with
                the .NET module:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>module_mono_enabled</strong> =yes | <strong>no</strong></paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>Build Godot with the .NET module enabled.</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
            </bullet_list>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
