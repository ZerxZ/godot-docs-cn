<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/development/file_formats/tscn.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-tscn-file-format"></target>
    <section ids="tscn-file-format doc-tscn-file-format" names="tscn\ file\ format tscn\ 文件格式 doc_tscn_file_format">
        <title>TSCN 文件格式</title>
        <paragraph>TSCN（文本场景）文件格式表示 Godot 内部的单个场景树。与二进制的 SCN 文件不同，TSCN 具有易于人类阅读、便于使用版本控制系统进行管理的优点。</paragraph>
        <paragraph>The ESCN (exported scene) file format is identical to the TSCN file format, but
            is used to indicate to Godot that the file has been exported from another
            program and should not be edited by the user from within Godot.
            Unlike SCN and TSCN files, during import, ESCN files are compiled to binary
            SCN files stored inside the <literal>.godot/imported/</literal> folder.
            This reduces the data size and speeds up loading, as binary formats are faster
            to load compared to text-based formats.</paragraph>
        <paragraph>To make files more compact, properties equal to the default value are not stored
            in scene/resource files. It is possible to write them manually, but they will be
            discarded when saving the file.</paragraph>
        <paragraph>如果想要完整的描述，对这些文件格式的解析是在 <reference name="resource_format_text.cpp" refuri="https://github.com/godotengine/godot/blob/master/scene/resources/resource_format_text.cpp">resource_format_text.cpp</reference><target ids="resource-format-text-cpp" names="resource_format_text.cpp" refuri="https://github.com/godotengine/godot/blob/master/scene/resources/resource_format_text.cpp"></target> 的 <literal>ResourceFormatLoaderText</literal> 类中进行处理的。</paragraph>
        <note>
            <paragraph>The scene and resource file formats have changed significantly in Godot 4,
                with the introduction of string-based UIDs to replace incremental integer
                IDs.</paragraph>
            <paragraph>Mesh, skeleton and animation data is also stored differently compared to Godot 3.
                You can read about some of the changes in this article:
                <reference name="Animation data rework for 4.0" refuri="https://godotengine.org/article/animation-data-redesign-40/">Animation data rework for 4.0</reference></paragraph>
            <paragraph>Scenes and resources saved with Godot 4.x contain <literal>format=3</literal> in their
                header, whereas Godot 3.x uses <literal>format=2</literal> instead.</paragraph>
        </note>
        <section ids="file-structure" names="file\ structure 文件结构">
            <title>文件结构</title>
            <paragraph>TSCN 文件分为五个主要部分：</paragraph>
            <enumerated_list enumtype="arabic" prefix="" start="0" suffix=".">
                <list_item>
                    <paragraph>文件描述符</paragraph>
                </list_item>
                <list_item>
                    <paragraph>外部资源</paragraph>
                </list_item>
                <list_item>
                    <paragraph>内部资源</paragraph>
                </list_item>
                <list_item>
                    <paragraph>节点</paragraph>
                </list_item>
                <list_item>
                    <paragraph>连接</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>The file descriptor looks like <literal>[gd_scene load_steps=4 format=3 uid="uid://cecaux1sm7mo0"]</literal>
                and should be the first entry in the file. The <literal>load_steps</literal> parameter is equal to the
                total amount of resources (internal and external) plus one (for the file itself).
                If the file has no resources, <literal>load_steps</literal> is omitted. The engine will
                still load the file correctly if <literal>load_steps</literal> is incorrect, but this will affect
                loading bars and any other piece of code relying on that value.</paragraph>
            <paragraph><literal>uid</literal> is an unique string-based identifier representing the scene. This is
                used by the engine to track files that are moved around, even while the editor
                is closed. Scripts can also load UID-based resources using the <literal>uid://</literal> path
                prefix to avoid relying on filesystem paths. This makes it possible to move
                around a file in the project, but still be able to load it in scripts without
                having to modify the script. Godot does not use external files to keep track of
                IDs, which means no central metadata storage location is required within the
                project. See <reference name="this pull request" refuri="https://github.com/godotengine/godot/pull/50786">this pull request</reference>
                for detailed information.</paragraph>
            <paragraph>These sections should appear in order, but it can be hard to distinguish them.
                The only difference between them is the first element in the heading for all of
                the items in the section. For example, the heading of all external resources
                should start with <literal>[ext_resource ...]</literal>.</paragraph>
            <paragraph>A TSCN file may contain single-line comments starting with a semicolon (<literal>;</literal>).
                However, comments will be discarded when saving the file using the Godot editor.
                Whitespace within a TSCN file is not significant (except within strings), but
                extraneous whitespace will be discarded when saving the file.</paragraph>
            <section ids="entries-inside-the-file" names="entries\ inside\ the\ file 文件中的条目">
                <title>文件中的条目</title>
                <paragraph>A heading looks like
                    <literal>[&lt;resource_type&gt; key1=value1 key2=value2 key3=value3 ...]</literal>
                    where resource_type is one of:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal>ext_resource</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>sub_resource</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>node</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>connection</literal></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Below every heading comes zero or more <literal>key = value</literal> pairs. The
                    values can be complex datatypes such as Arrays, Transforms, Colors, and
                    so on. For example, a Node3D looks like:</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[node name="Cube" type="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 3)</literal_block>
            </section>
        </section>
        <section ids="the-scene-tree" names="the\ scene\ tree 场景树">
            <title>场景树</title>
            <paragraph>The scene tree is made up of… nodes! The heading of each node consists of
                its name, parent and (most of the time) a type. For example:
                <literal>[node name="PlayerCamera" type="Camera" parent="Player/Head"]</literal></paragraph>
            <paragraph>其他有效的关键字包括:</paragraph>
            <block_quote>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal>instance</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>instance_placeholder</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>owner</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>index</literal> (sets the order of appearance in the tree; if absent, inherited nodes will take precedence over plain ones)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>groups</literal></paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
            <paragraph>The first node in the file, which is also the scene root, must <strong>not</strong> have a
                <literal>parent="Path/To/Node"</literal> entry in its heading. All scene files should have
                exactly <emphasis>one</emphasis> scene root. If it doesn't, Godot will fail to import the file.
                The parent path of other nodes should be absolute, but shouldn't contain
                the scene root's name. If the node is a direct child of the scene root,
                the path should be <literal>"."</literal>. Here is an example scene tree
                (but without any node content):</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[node name="Player" type="Node3D"]                    ; The scene root
[node name="Arm" type="Node3D" parent="."]            ; Parented to the scene root
[node name="Hand" type="Node3D" parent="Arm"]         ; Child of "Arm"
[node name="Finger" type="Node3D" parent="Arm/Hand"]  ; Child of "Hand"</literal_block>
            <tip>
                <paragraph>To make the file structure easier to grasp, you can saving a file with any
                    given node or resource then inspect it yourself in an external editor. You
                    can also make incremental changes in the Godot editor, and keep an external
                    text editor open on the <literal>.tscn</literal> or <literal>.tres</literal> file with auto-reload enabled
                    to see what changes.</paragraph>
            </tip>
            <paragraph>Here is an example of a scene containing a RigidBody3D-based ball with
                collision, visuals (mesh + light) and a camera parented to the RigidBody3D:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[gd_scene load_steps=4 format=3 uid="uid://cecaux1sm7mo0"]

[sub_resource type="SphereShape3D" id="SphereShape3D_tj6p1"]

[sub_resource type="SphereMesh" id="SphereMesh_4w3ye"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_k54se"]
albedo_color = Color(1, 0.639216, 0.309804, 1)

[node name="Ball" type="RigidBody3D"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("SphereShape3D_tj6p1")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
mesh = SubResource("SphereMesh_4w3ye")
surface_material_override/0 = SubResource("StandardMaterial3D_k54se")

[node name="OmniLight3D" type="OmniLight3D" parent="."]
light_color = Color(1, 0.698039, 0.321569, 1)
omni_range = 10.0

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.939693, 0.34202, 0, -0.34202, 0.939693, 0, 1, 3)</literal_block>
            <section ids="nodepath" names="nodepath 节点路径">
                <title>节点路径</title>
                <paragraph>A tree structure is not enough to represent the whole scene. Godot uses a
                    <literal>NodePath(Path/To/Node)</literal> structure to refer to another node or attribute of
                    the node anywhere in the scene tree. Paths are relative to the current node,
                    with <literal>NodePath(".")</literal> pointing to the current node and <literal>NodePath("")</literal>
                    pointing to no node at all.</paragraph>
                <paragraph>For instance, MeshInstance3D uses <literal>NodePath()</literal> to point to its skeleton.
                    Likewise, Animation tracks use <literal>NodePath()</literal> to point to node properties to
                    animate.</paragraph>
                <paragraph>NodePath can also point to a property using a <literal>:property_name</literal> suffix, and
                    even point to a specific component for vector, transform and color types. This
                    is used by Animation resources to point to specific properties to animate. For
                    example, <literal>NodePath("MeshInstance3D:scale.x")</literal> points to the <literal>x</literal> component of
                    the <literal>scale</literal> Vector3 property in MeshInstance3D.</paragraph>
                <paragraph>For example, the <literal>skeleton</literal> property in the MeshInstance3D node called
                    <literal>mesh</literal> points to its parent, <literal>Armature01</literal>:</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[node name="mesh" type="MeshInstance3D" parent="Armature01"]
skeleton = NodePath("..")</literal_block>
            </section>
            <section ids="skeleton3d" names="skeleton3d">
                <title>Skeleton3D</title>
                <paragraph><reference internal="True" refuri="../../../classes/class_skeleton3d#class-skeleton3d"><inline classes="std std-ref">Skeleton3D</inline></reference> 节点继承 Node3D 节点，但也可能具有以 <literal>bones/&lt;id&gt;/&lt;attribute&gt; = value</literal> 格式的键值来描述的骨骼列表。骨骼属性包括：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal>position</literal>：Vector3</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>rotation</literal>：Quaternion</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>scale</literal>：Vector3</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>这些属性都是可选的。例如，骨骼可能只定义了 <literal>position</literal> 或 <literal>rotation</literal> ，而不定义其他属性。</paragraph>
                <paragraph>具有两个骨骼的骨架节点的示例：</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[node name="Skeleton3D" type="Skeleton3D" parent="PlayerModel/Robot_Skeleton" index="0"]
bones/1/position = Vector3(0.114471, 2.19771, -0.197845)
bones/1/rotation = Quaternion(0.191422, -0.0471201, -0.00831942, 0.980341)
bones/2/position = Vector3(-2.59096e-05, 0.236002, 0.000347473)
bones/2/rotation = Quaternion(-0.0580488, 0.0310587, -0.0085914, 0.997794)
bones/2/scale = Vector3(0.9276, 0.9276, 0.9276)</literal_block>
            </section>
            <section ids="boneattachment3d" names="boneattachment3d">
                <title>BoneAttachment3D</title>
                <paragraph><reference internal="True" refuri="../../../classes/class_boneattachment3d#class-boneattachment3d"><inline classes="std std-ref">BoneAttachment3D</inline></reference> 节点是一个中间节点，用于描述在 Skeleton 节点中以单根骨骼为父节点的某些节点。BoneAttachment 具有 <literal>bone_name = "骨骼名称"</literal> 属性，以及匹配骨骼索引的属性。</paragraph>
                <paragraph>以 Skeleton 中的骨骼为父级的 <reference internal="True" refuri="../../../classes/class_marker3d#class-marker3d"><inline classes="std std-ref">Marker3D</inline></reference> 节点示例：</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[node name="GunBone" type="BoneAttachment3D" parent="PlayerModel/Robot_Skeleton/Skeleton3D" index="5"]
transform = Transform3D(0.333531, 0.128981, -0.933896, 0.567174, 0.763886, 0.308015, 0.753209, -0.632331, 0.181604, -0.323915, 1.07098, 0.0497144)
bone_name = "hand.R"
bone_idx = 55

[node name="ShootFrom" type="Marker3D" parent="PlayerModel/Robot_Skeleton/Skeleton3D/GunBone"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.4, 0)</literal_block>
            </section>
            <section ids="animationplayer" names="animationplayer">
                <title>AnimationPlayer</title>
                <paragraph>The <reference internal="True" refuri="../../../classes/class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> node works with one or more animation libraries
                    stored in <reference internal="True" refuri="../../../classes/class_animationlibrary#class-animationlibrary"><inline classes="std std-ref">AnimationLibrary</inline></reference> resources. An animation library is a
                    collection of individual <reference internal="True" refuri="../../../classes/class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference> resources, whose structure is
                    documented <reference internal="True" refid="doc-tscn-animation"><inline classes="std std-ref">here</inline></reference>.</paragraph>
                <paragraph>This split between animations themselves and animation libraries was done in
                    Godot 4, so that animations can be imported separately from 3D meshes, which is
                    a common workflow in 3D animation software. See the <reference name="original pull request" refuri="https://github.com/godotengine/godot/pull/59980">original pull request</reference> for details.</paragraph>
                <paragraph>If the library name is empty, then it acts acts the unique source of animations
                    for this AnimationPlayer. This allows using <literal>&lt;animation_name&gt;</literal> directly to
                    play animations from script. If you name the library, then you must play it as
                    <literal>&lt;library_name&gt;/&lt;animation_name&gt;</literal>. This ensures backwards compatibility and
                    keeps the existing workflow if you don't want to use multiple animation
                    libraries.</paragraph>
            </section>
        </section>
        <section ids="resources" names="resources 资源">
            <title>资源</title>
            <paragraph>Resources are components that make up the nodes. For example, a MeshInstance3D
                node will have an accompanying ArrayMesh resource. The ArrayMesh resource
                may be either internal or external to the TSCN file.</paragraph>
            <paragraph>References to the resources are handled by unique string-based IDs in the
                resource's heading. This is different from the <literal>uid</literal> property, which each
                external resource also has (but subresources don't).</paragraph>
            <paragraph>External resources and internal resources are referred to with
                <literal>ExtResource("id")</literal> and <literal>SubResource("id")</literal>, respectively. Because there
                have different methods to refer to internal and external resources, you can have
                the same ID for both an internal and external resource.</paragraph>
            <paragraph>For example, to refer to the resource
                <literal>[ext_resource type="Material" uid="uid://c4cp0al3ljsjv" path="res://material.tres" id="1_7bt6s"]</literal>,
                you would use <literal>ExtResource("1_7bt6s")</literal>.</paragraph>
            <section ids="external-resources" names="external\ resources 外部资源">
                <title>外部资源</title>
                <paragraph>External resources are links to resources not contained within the TSCN file
                    itself. An external resource consists of a path, a type, an UID (used to map its
                    filesystem location to an unique identifier) and an ID (used to refer to the
                    resource in the scene file).</paragraph>
                <paragraph>Godot总是生成相对于资源目录的绝对路径, 因此以 <literal>res://</literal> 为前缀, 但是相对于TSCN文件位置的路径也有效.</paragraph>
                <paragraph>一些示例外部资源是:</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[ext_resource type="Texture2D" uid="uid://ccbm14ebjmpy1" path="res://gradient.tres" id="2_eorut"]
[ext_resource type="Material" uid="uid://c4cp0al3ljsjv" path="material.tres" id="1_7bt6s"]</literal_block>
                <paragraph>Like TSCN files, a TRES file may contain single-line comments starting with a
                    semicolon (<literal>;</literal>). However, comments will be discarded when saving the resource
                    using the Godot editor.
                    Whitespace within a TRES file is not significant (except within strings), but
                    extraneous whitespace will be discarded when saving the file.</paragraph>
            </section>
            <section ids="internal-resources" names="internal\ resources 内部资源">
                <title>内部资源</title>
                <paragraph>TSCN文件可以包含网格, 材质和其他数据. 这些包含在文件的 <emphasis>内部资源</emphasis> 部分中. 内部资源的标题与外部资源的标题相似, 不同之处在于它没有路径. 内部资源在每个标题下还具有 <literal>键=值</literal> 对. 例如, 胶囊碰撞形状如下所示:</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_fdxgg"]
radius = 1.0
height = 3.0</literal_block>
                <paragraph>一些内部资源包含到其他内部资源的链接(例如具有材质的网格). 在这种情况下, 引用的资源必须在对其的引用 <emphasis>之前</emphasis> 出现. 这意味着顺序在文件的内部资源部分中很重要.</paragraph>
            </section>
            <section ids="arraymesh" names="arraymesh">
                <title>ArrayMesh</title>
                <paragraph>An ArrayMesh consists of several surfaces contained in the <literal>_surfaces</literal> array
                    (notice the leading underscore). Each surface's data is stored in a dictionary
                    with the following keys:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal>aabb</literal>: The computed axis-aligned bounding box for visibility.
                            <literal>Mesh.PrimitiveType</literal> Godot enum. <literal>0</literal> = points, <literal>1</literal> = lines, <literal>2</literal> = line
                            strip, <literal>3</literal> = triangles (most common), <literal>4</literal> = triangle strip.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>attribute_data</literal>: Vertex attribute data, such as normals, tangents, vertex
                            colors, UV1, UV2 and custom vertex data.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>bone_aabbs</literal>: The axis-aligned bounding box of each bone for visibility.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>format</literal>: The surface's buffer format.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>index_count</literal>: The number of indices in the surface. This must match
                            <literal>index_data</literal>'s size.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>index_data</literal>: The index data, which determines which vertices from
                            <literal>vertex_data</literal> are drawn.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>lods</literal>: Level of detail variations, stored as an array. Each LOD level
                            represents two values in the array. The first value is the percentage of
                            screen space the LOD level is most suited for (edge length); the second value
                            is the list of indices that should be drawn for the given LOD level.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>material</literal>: The material used when drawing the surface.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>name</literal>: The surface's name. This can be used in scripts and is imported from
                            3D DCCs.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>primitive</literal>: The surface's primitive type, matching the</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>skin_data</literal>: Bone weight data.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>vertex_count</literal>: Number of vertices in the surface. This must match <literal>vertex_data</literal>'s size.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>vertex_data</literal>: The vertex position data.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Here's an example of an ArrayMesh saved to its own <literal>.tres</literal> file. Some fields were shortened with <literal>...</literal> for brevity:</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[gd_resource type="ArrayMesh" load_steps=2 format=3 uid="uid://dww8o7hsqrhx5"]

[ext_resource type="Material" path="res://player/model/playerobot.tres" id="1_r3bjq"]

[resource]
resource_name = "player_Sphere_016"
_surfaces = [{
"aabb": AABB(-0.207928, 1.21409, -0.14545, 0.415856, 0.226569, 0.223374),
"attribute_data": PackedByteArray(63, 121, ..., 117, 63),
"bone_aabbs": [AABB(0, 0, 0, -1, -1, -1), ..., AABB(-0.207928, 1.21409, -0.14545, 0.134291, 0.226569, 0.223374)],
"format": 7191,
"index_count": 1224,
"index_data": PackedByteArray(30, 0, ..., 150, 4),
"lods": [0.0382013, PackedByteArray(33, 1, ..., 150, 4)],
"material": ExtResource("1_r3bjq"),
"name": "playerobot",
"primitive": 3,
"skin_data": PackedByteArray(15, 0, ..., 0, 0),
"vertex_count": 1250,
"vertex_data": PackedByteArray(196, 169, ..., 11, 38)
}]
blend_shape_mode = 0</literal_block>
                <target refid="doc-tscn-animation"></target>
            </section>
            <section ids="animation doc-tscn-animation" names="animation 动画 doc_tscn_animation">
                <title>动画</title>
                <paragraph>Each animation has the following properties:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal>length</literal> ：动画的长度（以秒为单位）。请注意，关键帧可以放置在 <literal>[0; length]</literal> 的区间之外，但根据所选的插值模式这样可能没有效果。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>loop_mode</literal>: <literal>0</literal> = no looping, <literal>1</literal> = wrap-around looping, <literal>2</literal> =
                            clamped looping.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>step</literal> ：在编辑器中编辑此动画时所使用的步长。该属性只在编辑器中可用；它不会以任何方式影响动画播放。</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>每个轨道均由格式为 <literal>tracks/&lt;id&gt;/&lt;attribute&gt;</literal> 的键值对列表描述。每个轨道包括：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal>type</literal> ：轨道的类型。这个属性定义了该轨道可以动画化哪种属性，以及如何在编辑器中向用户公开它。有效类型为 <literal>value</literal> （通用属性轨道）、 <literal>position_3d</literal> 、 <literal>rotation_3d</literal> 、 <literal>scale_3d</literal> 、 <literal>blend_shape</literal> （优化的 3D 动画轨道）、 <literal>method</literal> （方法调用轨道）、 <literal>bezier</literal> （贝塞尔曲线轨道）、 <literal>audio</literal> （音频播放轨道）、 <literal>animation</literal> （播放其他动画的轨道）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>imported</literal> ：如果轨道是从导入的 3D 场景创建的，则为 <literal>true</literal> ；如果轨道是由用户在 Godot 编辑器中或使用脚本手动创建的，则为 <literal>false</literal> 。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>enabled</literal> ：如果轨道有效的（即被启用），则为 <literal>true</literal> ；如果轨道在编辑器中被禁用，则为 <literal>false</literal> 。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>path</literal> ：将受轨道影响的节点属性的路径。该属性写在节点路径后面，并使用 <literal>:</literal> 分隔符。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>interp</literal> ：要使用的插值模式。 <literal>0</literal> = 最近（nearest）， <literal>1</literal> = 线性（linear）， <literal>2</literal> = 立方（cubic）， <literal>3</literal> = 线性角度（linear angle）， <literal>4</literal> = 立方角度（cubic angle）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>loop_wrap</literal>: <literal>true</literal> if the track is designed to wrap around when the
                            animation is looping, <literal>false</literal> if the track clamps to the first/last
                            keyframes.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>keys</literal> ：动画轨道的值。该属性的结构取决于 <literal>type</literal> 。</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>这是一个包含 AnimationPlayer 的场景，它使用通用属性轨道，随时间推进缩小立方体。由于未使用 AnimationLibrary 工作流程，此动画库的名称为空（但动画仍指定为 <literal>scale_down</literal> 名称）。请注意，为了简洁起见，没有在此 AnimationPlayer 中创建 <literal>RESET</literal> 轨道：</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[gd_scene load_steps=4 format=3 uid="uid://cdyt3nktp6y6"]

[sub_resource type="Animation" id="Animation_r2qdp"]
resource_name = "scale_down"
length = 1.5
loop_mode = 2
step = 0.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Box:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(1, 1, 1), Vector3(0, 0, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_4qx36"]
_data = {
"scale_down": SubResource("Animation_r2qdp")
}

[sub_resource type="BoxMesh" id="BoxMesh_u688r"]

[node name="Node3D" type="Node3D"]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "scale_down"
libraries = {
"": SubResource("AnimationLibrary_4qx36")
}

[node name="Box" type="MeshInstance3D" parent="."]
mesh = SubResource("BoxMesh_u688r")</literal_block>
                <paragraph>对于通用属性 <literal>value</literal> 轨道， <literal>keys</literal> 是一个字典，其中包含 3 个数组。三个数组分别是：位置（position）位于 <literal>times</literal> （PackedFloat32Array）中；缓动值（easing value）位于 <literal>transitions</literal> （PackedFloat32Array）中；值（value）位于 <literal>values</literal> （Array）中。还有一个附加的 <literal>update</literal> 属性，它是一个整数，其值代表的含义分别是： <literal>0</literal> = 连续（continuous）， <literal>1</literal> = 离散（discrete）， <literal>2</literal> = 捕获（capture）。</paragraph>
                <paragraph>这是第二个动画资源，它利用了 3D 位置和 3D 旋转轨道。这些轨道（除了 3D 缩放轨道）取代了 Godot 3 中的 Transform 轨道。它们经过优化，可以快速播放，并且可以选择进行压缩。</paragraph>
                <paragraph>这些优化轨道类型的缺点是，它们无法使用自定义缓动值。相反地，所有关键帧都使用线性插值。也就是说，你仍然可以通过更改轨道的插值模式，来选择对给定轨道中的所有关键帧使用最近插值或三次插值。</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[sub_resource type="Animation" id="Animation_r2qdp"]
resource_name = "move_and_rotate"
length = 1.5
loop_mode = 2
step = 0.05
tracks/0/type = "position_3d"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Box")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = PackedFloat32Array(0, 1, 0, 0, 0, 1.5, 1, 1.5, 1, 0)
tracks/1/type = "rotation_3d"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Box")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = PackedFloat32Array(0, 1, 0.211, -0.047, 0.211, 0.953, 1.5, 1, 0.005, 0.976, -0.216, 0.022)</literal_block>
                <paragraph>对于 3D 位置、旋转和缩放轨道， <literal>key</literal> 是一个将所有值都存储在序列中的 PackedFloat32Array。</paragraph>
                <paragraph>在下面的视觉指南中， <literal>T</literal> 是自动画开始以来关键帧的时间（以秒为单位）， <literal>E</literal> 是关键帧的过渡（当前始终为 <literal>1</literal> ）。对于 3D 位置和比例轨道， <literal>X</literal> 、 <literal>Y</literal> 、 <literal>Z</literal> 是 Vector3 的坐标。对于 3D 旋转轨道， <literal>X</literal> 、 <literal>Y</literal> 、 <literal>Z</literal> 和 <literal>W</literal> 是四元数的坐标。</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># For 3D position and scale, which use Vector3:
tracks/&lt;id&gt;/keys = PackedFloat32Array(T, E,   X, Y, Z,      T, E,   X, Y, Z, ...)

# For 3D rotation, which use Quaternion:
tracks/&lt;id&gt;/keys = PackedFloat32Array(T, E,   X, Y, Z, W,      T, E,   X, Y, Z, W, ...)</literal_block>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
