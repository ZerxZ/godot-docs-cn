<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/documentation/docs_writing_guidelines.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-docs-writing-guidelines"></target>
    <section ids="writing-guidelines doc-docs-writing-guidelines" names="writing\ guidelines 写作指南 doc_docs_writing_guidelines">
        <title>写作指南</title>
        <paragraph>Godot 社区丰富且具国际化。用户来自世界各地。他们中的一些人很年轻，很多人不是母语为英语的人。这就是为什么我们都必须使用清晰和通用的语言写作。对于类参考手册，目标是让每个人都能轻松和精确阅读。</paragraph>
        <paragraph>总之，请始终尝试：</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph>使用陈述句型</paragraph>
            </list_item>
            <list_item>
                <paragraph>使用精确的动作动词</paragraph>
            </list_item>
            <list_item>
                <paragraph>避免以 -ing 结尾的动词</paragraph>
            </list_item>
            <list_item>
                <paragraph>删除不必要的副词和形容词。</paragraph>
            </list_item>
            <list_item>
                <paragraph>禁止这 8 个词：obvious（显然）、simple（简单）、basic（基本）、easy（容易）、actual（实际）、just（仅仅）、clear（明显）、however（然而）</paragraph>
            </list_item>
            <list_item>
                <paragraph>使用显式引用</paragraph>
            </list_item>
            <list_item>
                <paragraph>使用“'s”表示所有权</paragraph>
            </list_item>
            <list_item>
                <paragraph>使用牛津逗号</paragraph>
            </list_item>
        </enumerated_list>
        <paragraph>描述类有 3 个规则：</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph>在简述中概述该节点</paragraph>
            </list_item>
            <list_item>
                <paragraph>如果它有用，请提及方法返回什么</paragraph>
            </list_item>
            <list_item>
                <paragraph>使用“if true”来描述布尔值</paragraph>
            </list_item>
        </enumerated_list>
        <note>
            <paragraph>技术作家的工作是将尽可能多的信息打包成尽可能最小和最清晰的句子。这些规范将帮助你实现这一目标。</paragraph>
        </note>
        <seealso>
            <paragraph>请查看<reference internal="True" refuri="content_guidelines#doc-content-guidelines"><inline classes="std std-ref">内容规范</inline></reference>，了解你可以在官方文档中编写哪些类型的文档。</paragraph>
        </seealso>
        <section ids="rules-for-clear-english" names="7\ rules\ for\ clear\ english 英语清晰的\ 7\ 条规则">
            <title>英语清晰的 7 条规则</title>
            <section ids="use-the-active-voice" names="use\ the\ active\ voice 使用陈述句型">
                <title>使用陈述句型</title>
                <paragraph>尽可能使用陈述句型。将你描述的类、方法和常量作为主语。使用被动语态编写是很自然的，但它更难阅读并会产生更长的句子。</paragraph>
                <paragraph>被动句：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">The man **was bitten** by the dog.</literal_block>
                <paragraph>主动句：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">The dog bit the man.</literal_block>
                <paragraph><strong>不要</strong>使用被动句型：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">void edit_set_pivot ( Vector2 pivot )
[...] This method **is implemented** only in some nodes that inherit Node2D.</literal_block>
                <paragraph><strong>请</strong>将节点的名称用作名词：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">void edit_set_pivot ( Vector2 pivot )
[...] Only some Node2Ds **implement** this method.</literal_block>
            </section>
            <section ids="use-precise-action-verbs" names="use\ precise\ action\ verbs 使用精确的动作动词">
                <title>使用精确的动作动词</title>
                <paragraph>优先使用精确而通用的动词，不要使用诸如 <literal>make</literal>、<literal>set</literal> 以及可以用一个单词替换的任何表达之类的通用动词。</paragraph>
                <paragraph><strong>不要</strong>重复该方法的名称。名称中已经表达了它会将 pivot 值设置为一个新的值：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">void edit_set_pivot ( Vector2 pivot )
Set the pivot position of the 2D node to [code]pivot[/code] value. [...]</literal_block>
                <paragraph><strong>请</strong>解释“set”的结果是什么：使用准确的动词，如 <literal>place</literal>、<literal>position</literal>、<literal>rotate</literal>、<literal>fade</literal> 等。</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">void edit_set_pivot ( Vector2 pivot )
Position the node's pivot to the [code]pivot[/code] value. [...]</literal_block>
            </section>
            <section ids="avoid-verbs-that-end-in-ing" names="avoid\ verbs\ that\ end\ in\ -ing 避免以\ -ing\ 结尾的动词">
                <title>避免以 -ing 结尾的动词</title>
                <paragraph>使用进行时描述连续行动。例如：“is calling”、“is moving”。</paragraph>
                <paragraph><strong>不要</strong>使用进行时描述即时更改。</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">Vector2 move ( Vector2 rel_vec )
Move the body in the given direction, **stopping** if there is an obstacle. [...]</literal_block>
                <paragraph><strong>请</strong>使用简单的现在、过去或将来时。</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">Vector2 move ( Vector2 rel_vec )
Moves the body in the vector's direction. The body **stops** if it collides with an obstacle. [...]</literal_block>
                <paragraph>例外：如果主语不清楚，替换“ing”动词算不上改进。例如，在前一句中，“it replaces”在“replacing”当前所在的位置没有多大意义。</paragraph>
                <paragraph>你可以使用渐进式时态来描述在时间上连续的动作. 任何像动画或协同程序的东西.</paragraph>
                <tip>
                    <paragraph>动词可以变成带有 -ing 的形容词名词。这不是动词时态变换，所以你可以使用它们：<literal>the remaining movement</literal>、<literal>the missing file</literal> 等等。</paragraph>
                </tip>
            </section>
            <section ids="remove-unnecessary-adverbs-and-adjectives" names="remove\ unnecessary\ adverbs\ and\ adjectives 删除不必要的副词和形容词">
                <title>删除不必要的副词和形容词</title>
                <paragraph>写尽可能少的形容词和副词. 仅当它们在说明中添加关键信息时, 才使用它们.</paragraph>
                <paragraph><strong>不要</strong>使用冗余或无意义的副词。延长文档长度但不添加任何信息的词：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">**Basically** a big texture [...]</literal_block>
                <paragraph><emphasis>用</emphasis>一种简单的描述性语言写短句：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">A big texture [...]</literal_block>
            </section>
            <section ids="ban-these-8-words" names="ban\ these\ 8\ words 禁止这\ 8\ 个词">
                <title>禁止这 8 个词</title>
                <paragraph><strong>不要</strong>使用这 8 个被禁止的词：</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>obvious（显然）</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>simple（简单）</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>basic（基本）</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>easy（容易）</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>actual（实际）</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>just（仅仅）</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>clear</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>however（然而）（的某些用法）</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>游戏的创建和编程并不简单，对于初次学习使用 API 的人来说也不容易。列表中的其他单词，如 <literal>just</literal> 或 <literal>actual</literal> 不会在句子中添加任何信息。也不要使用相应的副词：obviously、simply、basically、easily、actually、clearly。</paragraph>
                <paragraph><strong>不要</strong> 举例. 禁止使用的单词加长了说明, 并让注意力从最重要信息上移开:</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">**TextureRect**
Control frame that **simply** draws an assigned texture. It can stretch or not. It's a **simple** way to **just** show an image in a UI.</literal_block>
                <paragraph><strong>请</strong> 删除它们:</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">**TextureRect**
[Control] node that displays a texture. The texture can stretch to the node's bounding box or stay in the center. Useful to display sprites in your UIs.</literal_block>
                <paragraph>“简单”永远不会有帮助。请记住，对于其他用户来说，任何事情都可能很复杂或令人沮丧。没有什么像老套的<emphasis>它很简单</emphasis>让你畏缩的了。这是旧的简述，是 Timer 节点页面上的第一句话：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">**Timer**
A **simple** Timer node.</literal_block>
                <paragraph><strong>请</strong> 代替为解释节点的作用:</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">**Timer**
Calls a function of your choice after a certain duration.</literal_block>
                <paragraph><strong>不要</strong> 用 "basic" , 太含糊:</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">**Vector3**
Vector class, which performs **basic** 3D vector math operations.</literal_block>
                <paragraph><strong>请</strong> 使用简述来概述节点:</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">**Vector3**
Provides essential math functions to manipulate 3D vectors: cross product, normalize, rotate, etc.</literal_block>
            </section>
            <section ids="use-explicit-references" names="use\ explicit\ references 使用显式引用">
                <title>使用显式引用</title>
                <paragraph>支持显式引用而不是隐式引用.</paragraph>
                <paragraph><strong>不要</strong> 使用 "前者" , "后者" 等词语. 这些词在英语中并不是最常见的, 需要你去查阅参考资料.</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">[code]w[/code] and [code]h[/code] define right and bottom margins. The **latter** two resize the texture so it fits in the defined margin.</literal_block>
                <paragraph><strong>请</strong> 重复单词. 他们消除了所有歧义:</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">[code]w[/code] and [code]h[/code] define right and bottom margins. **[code]w[/code] and [code]h[/code]** resize the texture so it fits the margin.</literal_block>
                <paragraph>如果需要重复相同的变量名3到4次, 则你可能需要修改你的描述.</paragraph>
            </section>
            <section ids="use-s-to-show-possession" names="use\ 's\ to\ show\ possession 使用“'s”表示所有权">
                <title>使用“'s”表示所有权</title>
                <paragraph>避免"The milk <strong>of</strong> the cow". 英语里感觉不自然. 使用"The cow's milk"代替.</paragraph>
                <paragraph><strong>不要</strong> 写 "of the X":</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">The region **of the AtlasTexture that is** used.</literal_block>
                <paragraph><strong>请</strong> 使用 <literal>'s</literal> . 它使你可以将主要主题放在句子的开头, 并使其简短:</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">The **AtlasTexture's** used region.</literal_block>
            </section>
            <section ids="use-the-oxford-comma-to-enumerate-anything" names="use\ the\ oxford\ comma\ to\ enumerate\ anything 使用牛津逗号枚举任何内容">
                <title>使用牛津逗号枚举任何内容</title>
                <paragraph>来自牛津词典:</paragraph>
                <block_quote>
                    <paragraph>“牛津逗号”是列表末尾“and”之前的可选逗号：<emphasis>We sell books, videos, and magazines.</emphasis></paragraph>
                    <paragraph>[...] 并非所有作家和出版商都使用它，但是当列表中的项目不是单个单词时，它可以阐明句子的含义：<emphasis>These items are available in black and white, red and yellow, and blue and green.</emphasis></paragraph>
                </block_quote>
                <paragraph><strong>不要</strong>让列表的最后一个元素不带逗号：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">Create a CharacterBody2D node, a CollisionShape2D node and a sprite node.</literal_block>
                <paragraph><strong>请</strong>在有两个以上元素清单的最后一个元素 <title_reference>and</title_reference> 或 <title_reference>or</title_reference> 前加上逗号。</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">Create a CharacterBody2D node, a CollisionShape2D node, and a sprite node.</literal_block>
            </section>
        </section>
        <section ids="how-to-write-methods-and-classes" names="how\ to\ write\ methods\ and\ classes 如何编写方法和类">
            <title>如何编写方法和类</title>
            <section ids="dynamic-vs-static-typing" names="dynamic\ vs\ static\ typing 动态类型与静态类型">
                <title>动态类型与静态类型</title>
                <paragraph>文档中的代码示例应遵循一致的样式, 以免混淆用户. 由于静态类型提示是GDScript的可选功能, 因此我们选择坚持编写动态代码. 这导致编写简洁明了的GDScript.</paragraph>
                <paragraph>例外情况是向用户解释静态类型概念的主题.</paragraph>
                <paragraph><strong>不要</strong> 用冒号或强制转换添加类型提示:</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">const MainAttack := preload("res://fire_attack.gd")
var hit_points := 5
var name: String = "Bob"
var body_sprite := $Sprite2D as Sprite2D</literal_block>
                <paragraph><strong>Do</strong> 用动态类型编写常量和变量:</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">const MainAttack = preload("res://fire_attack.gd")
var hit_points = 5
var name = "Bob"
var body_sprite = $Sprite2D</literal_block>
                <paragraph><strong>不要</strong> 用推断的参数或返回类型编写函数:</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">func choose(arguments: PackedStringArray) -&gt; String:
    # Chooses one of the arguments from array with equal chances
    randomize()
    var size := arguments.size()
    var choice: int = randi() % size
    return arguments[choice]</literal_block>
                <paragraph><strong>Do</strong> 使用动态类型来写函数:</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">func choose(arguments):
    # Chooses one of the arguments from array with equal chances
    randomize()
    var size = arguments.size()
    var choice = randi() % size
    return arguments[choice]</literal_block>
            </section>
            <section ids="use-real-world-code-examples-where-appropriate" names="use\ real-world\ code\ examples\ where\ appropriate 在适当的情况下使用实际代码示例">
                <title>在适当的情况下使用实际代码示例</title>
                <paragraph>对于初学者来说，比起抽象的 <literal>foo</literal> 和 <literal>bar</literal>，现实世界中的示例更容易被使用。你还可以直接从游戏项目中复制它们，以确保所有代码段都能正确编译。</paragraph>
                <paragraph>编写 <literal>var speed = 10</literal> 而不是 <literal>var my_var = 10</literal> 可使初学者更好地理解代码. 它为他们提供了有关在实际项目中可以在何处使用代码段的参考框架.</paragraph>
                <paragraph><strong>不要</strong>写虚构的例子：</paragraph>
                <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@onready var a = preload("res://MyPath")
@onready var my_node = $MyNode


func foo():
    # Do stuff</literal_block>
                <paragraph><strong>要</strong>写出具体事例：</paragraph>
                <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@onready var sfx_player_gun = preload("res://Assets/Sound/SFXPlayerGun.ogg")
@onready var audio_player = $Audio/AudioStreamPlayer


func play_shooting_sound():
    audio_player.stream = sfx_player_gun
    audio_player.play()</literal_block>
                <paragraph>当然，有时候使用实际示例是不切实际的。在这种情况下，你仍应避免使用诸如 <literal>my_var</literal>、<literal>foo()</literal>、 <literal>my_func()</literal> 之类的名称，并考虑示例中更有意义的名称。</paragraph>
            </section>
            <section ids="give-an-overview-of-the-node-in-the-brief-description" names="give\ an\ overview\ of\ the\ node\ in\ the\ brief\ description 在简述中概述该节点">
                <title>在简述中概述该节点</title>
                <paragraph>简述是参考手册中最重要的一句话。这是用户与节点的第一次接触：</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>这是“创建新节点”对话框中的唯一描述。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>它位于参考手册中每个页面的顶部</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>简述应解释节点的角色及其功能，最多 200 个字符。</paragraph>
                <paragraph><strong>不要</strong>写简短而含糊的摘要：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">**Node2D**
Base node for 2D system.</literal_block>
                <paragraph><strong>要</strong>概述该节点的功能：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">**Node2D**
A 2D game object, inherited by all 2D-related nodes. Has a position, rotation, scale, and Z index.</literal_block>
                <paragraph>如果可能的话，请使用该节点的完整描述来提供更多信息和代码示例。</paragraph>
            </section>
            <section ids="mention-what-methods-return-if-it-s-useful" names="mention\ what\ methods\ return\ if\ it's\ useful 如果它有用，请提及方法返回什么">
                <title>如果它有用，请提及方法返回什么</title>
                <paragraph>有些方法会返回重要的值。在描述的结尾，最好在另起一行对它们进行描述。对于名称以 <literal>set</literal> 或 <literal>get</literal> 开头的任何方法，无需提及其返回值。</paragraph>
                <paragraph><strong>不要</strong>使用被动句型：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">Vector2 move ( Vector2 rel_vec )
[...] The returned vector is how much movement was remaining before being stopped.</literal_block>
                <paragraph><strong>要</strong>始终使用“Returns”。</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">Vector2 move ( Vector2 rel_vec )
[...] Returns the remaining movement before the body was stopped.</literal_block>
                <paragraph>注意“陈述句”规则的例外：通过移动（move）方法，外部对撞可以影响方法和调用 <literal>move</literal> 的主体。在这种情况下，你可以使用被动语态。</paragraph>
            </section>
            <section ids="use-if-true-to-describe-booleans" names='use\ "if\ true"\ to\ describe\ booleans 使用“if\ true”来描述布尔值'>
                <title>使用“if true”来描述布尔值</title>
                <paragraph>对于布尔成员变量，总是使用 <literal>if true</literal> 和/或 <literal>if false</literal> 来保持显式。<literal>Controls whether or not</literal> 可能存在歧义，不适用于每个成员变量。</paragraph>
                <paragraph>另外，在布尔值、变量名和方法周围用 <literal>[code][/code]</literal>。</paragraph>
                <paragraph><strong>请</strong>以“if true”开头：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">Timer.autostart
If [code]true[/code], the timer will automatically start when entering the scene tree.</literal_block>
            </section>
            <section ids="use-code-around-arguments" names="use\ [code]\ around\ arguments 在参数周围使用\ [code]">
                <title>在参数周围使用 <literal>[code]</literal></title>
                <paragraph>在类参考手册中，始终使用 <literal>[code][/code]</literal> 包围参数。在文档和 Godot 中，它将显示为 <literal>这样</literal>。编辑 Godot 仓库中的 XML 文件时，请用 <literal>[code]this[/code]</literal> 替换现在的参数，如 'this' 或 `this`。</paragraph>
            </section>
        </section>
        <section ids="common-vocabulary-to-use-in-godot-s-documentation" names="common\ vocabulary\ to\ use\ in\ godot's\ documentation godot\ 文档中的常用词汇">
            <title>Godot 文档中的常用词汇</title>
            <paragraph>开发人员选择了一些特定的单词来指代界面的区域。它们在文档以及源代码中使用，你应该始终使用它们而不是同义词，这样所有用户都能知道你说的是什么。</paragraph>
            <figure ids="id1">
                <image alt="界面和常用词汇概述" candidates="{'*': 'contributing/documentation/img/editor-vocabulary-overview.png'}" uri="contributing/documentation/img/editor-vocabulary-overview.png"></image>
                <caption>界面和常用词汇概述</caption>
            </figure>
            <paragraph>在编辑器的左上角是 <literal>main menu</literal>（主菜单）。中间按钮改变的是 <literal>workspace</literal>（工作区）。右上角的按钮是 <literal>playtest button</literal>（试玩按钮）。中间显示 2D 或 3D 空间的区域是 <literal>viewport</literal>（视口）。你可以在它顶部的 <literal>toolbar</literal>（工具栏）中找到 <literal>tool</literal>（工具）的列表。</paragraph>
            <paragraph>视口两侧的选项卡或可停靠面板叫 <literal>dock</literal>（停靠面板），包括 <literal>FileSystem dock</literal>（文件系统面板）、包含场景树的 <literal>Scene dock</literal>（场景面板）、<literal>Import dock</literal>（导入面板）、<literal>Node dock</literal>（节点面板）、<literal>Inspector</literal>（检查器）也叫 <literal>Inspector dock</literal>（检查器面板）。如果使用的是默认布局，也可以把选项卡式的停靠面板称作 <literal>tab</literal>（选项卡）：<literal>Scene tab</literal>（场景选项卡）、<literal>Node tab</literal>（节点选项卡）……</paragraph>
            <paragraph>视口底部的动画、调试器等是 <literal>panel</literal>（面板），它们一起构成了 <literal>bottom panel</literal>（底部面板）。</paragraph>
            <paragraph>Foldable areas of the Inspector are <literal>sections</literal>. The node's parent
                class names, which you can't fold, are <literal>Classes</literal> e.g. the
                <literal>CharacterBody2D class</literal>. And individual lines with key-value pairs are
                <literal>properties</literal>. E.g. <literal>position</literal> or <literal>modulate color</literal> are both
                <literal>properties</literal>.</paragraph>
        </section>
        <section ids="keyboard-shortcut-guidelines" names="keyboard\ shortcut\ guidelines 键盘快捷键规范">
            <title>键盘快捷键规范</title>
            <paragraph>键盘和鼠标快捷方式应使用 <literal>:kbd:</literal> 标记，该标记可使快捷方式在其余文本和内联代码中脱颖而出。使用紧凑形式的修饰键（<literal classes="kbd">Ctrl</literal>/ <literal classes="kbd">Cmd</literal>）而不是其拼写形式（<literal classes="kbd">Control</literal>/ <literal classes="kbd">Command</literal>）。对于组合按键，请在符号的两侧使用 <literal>+</literal> 符号。</paragraph>
            <paragraph>确保提及与其他平台相比在 macOS 上不同的快捷方式。macOS 上的键盘快捷键一般会用 <literal>Cmd</literal> 代替 <literal>Ctrl</literal>。</paragraph>
            <paragraph>尽量将快捷方式集成到句子中。例子如下，为了更好地展示而保留了 <literal>:kbd:</literal> 标记：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>按 <literal>:kbd:`Ctrl + Alt + T`</literal> 来切换面板（在 macOS 上则是 <literal>:kbd:`Cmd + Alt + T`</literal>）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>按 <literal>:kbd:`Space`</literal> 并按住鼠标左键在2D编辑器中平移.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>按 <literal>:kbd:`Shift+Up Arrow`</literal> 可将节点向上移动8像素.</paragraph>
                </list_item>
            </bullet_list>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
