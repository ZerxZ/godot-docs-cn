<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/workflow/bisecting_regressions.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-bisecting-regressions"></target>
    <section ids="bisecting-regressions doc-bisecting-regressions" names="bisecting\ regressions regression\ 的二分查找 doc_bisecting_regressions">
        <title>Regression 的二分查找</title>
        <paragraph>二分查找是在软件中查找回归的一种方法。在 GitHub 上的 <reference name="Godot 仓库" refuri="https://github.com/godotengine/godot">Godot 仓库</reference>中报告了一个错误之后，贡献者可能会要求你去做<emphasis>二分查找</emphasis>。二分查找可以让贡献者更快地修复错误，因为他们可以提前知道是哪个提交导致了回归。你的努力将受到广泛赞赏 :)</paragraph>
        <paragraph>以下指南说明了如何通过二等分查找回归.</paragraph>
        <section ids="what-is-bisecting" names="what\ is\ bisecting? 什么是两分法？">
            <title>什么是两分法？</title>
            <paragraph>Godot开发人员使用 <reference name="Git" refuri="https://git-scm.com/">Git</reference> 版本控制系统. 在Git的上下文中, 二等分是执行手动 <reference name="二进制搜索" refuri="https://en.wikipedia.org/wiki/Binary_search_algorithm">二进制搜索</reference> 的过程, 以确定什么时候出现了回归. 尽管它通常用于错误, 但也可以用于查找其他种类的意外更改, 例如性能下降.</paragraph>
        </section>
        <section ids="using-official-builds-to-speed-up-bisecting" names="using\ official\ builds\ to\ speed\ up\ bisecting 使用官方版本加快平分">
            <title>使用官方版本加快平分</title>
            <paragraph>在使用Git的 <literal>bisect</literal> 命令之前, 我们强烈建议尝试使用较旧的(或较新的)正式版本重现该错误. 这大大减少了可能需要从源构建和测试的提交范围. 你可以在 <reference name="此处" refuri="https://downloads.tuxfamily.org/godotengine/">此处</reference> 找到官方发行版的二进制文件以及alpha,beta和发行候选文件.</paragraph>
            <paragraph>If you have experience with Godot 3.x and can reproduce an issue with Godot 4.0,
                we recommend trying to reproduce the issue in the latest Godot 3.x version (if
                the feature exhibiting the bug is present in 3.x). This can be used to check
                whether the issue is a regression in 4.0 or not.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>If the issue <strong>is present</strong> in 3.x, then you'll need to check whether the issue
                        occurs in older 3.x versions as well.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If the issue is <strong>not present</strong> in 3.x, then you can try older 4.0 alphas and
                        betas to determine when the regression started.</paragraph>
                </list_item>
            </bullet_list>
            <warning>
                <paragraph>Project files may be incompatible between Godot versions.
                    <strong>Make a backup of your project</strong> before starting the bisection process.</paragraph>
                <paragraph>Going from the oldest to the newest build generally reduces the risk of the
                    project not being able to successfully open in the editor, thanks to
                    backwards compatibility. Try to reduce your project to the smallest
                    repeatable example too. The more minimal the project is, the more likely
                    you'll be able to open it without compatibility issues in newer engine
                    versions.</paragraph>
            </warning>
        </section>
        <section ids="the-git-bisect-command" names="the\ git\ bisect\ command git\ bisect\ 命令">
            <title>Git bisect 命令</title>
            <paragraph>如果你发现在上述测试过程中未显示该错误的构建，则可以立即将回归二等分。Git 版本控制系统为此提供了一个内置命令：<literal>git bisect</literal>。这使过程成为半自动化的过程，因为你只需要构建引擎，运行它并尝试重现该错误即可。</paragraph>
            <note>
                <paragraph>在平分回归之前, 你需要设置一个构建环境以从源代码编译Godot. 为此, 请阅读目标平台的 <reference internal="True" refuri="../development/compiling/index#toc-devel-compiling"><inline classes="std std-ref">Compiling</inline></reference> 页面. (从源代码编译Godot不需要C ++编程知识.)</paragraph>
                <paragraph>请注意, 编译 Godot 可能需要在缓慢的硬件上一段时间(在缓慢的双核 CPU 上, 每次完全重建需要一个小时). 这意味着整个过程最多可能需要几个小时. 如果你的硬件太慢, 你可能希望停止并报告 GitHub 问题的 "预分节" 结果, 以便其他参与者可以继续从该部分开始参与.</paragraph>
            </note>
            <section ids="determine-the-commit-hashes" names="determine\ the\ commit\ hashes 确定提交哈希">
                <title>确定提交哈希</title>
                <paragraph>要开始划分, 你必须首先确定 "坏" 和 "好" 的版本提交散列值(标识符)."坏" 指的是表现出错误的版本, 而 "好" 指的是没有表现出错误的版本. 如果你使用一个预发布版本作为 "好" 或 "坏" <reference name="下载镜像" refuri="https://downloads.tuxfamily.org/godotengine/">下载镜像</reference>, 进入包含你下载的预发布版本的文件夹, 寻找 <literal>README.txt</literal> 文件. 提交的哈希值就写在该文件中.</paragraph>
                <paragraph>如果你使用稳定版本作为“好”或“坏”版本，请根据版本使用以下提交哈希之一：</paragraph>
                <literal_block force="False" highlight_args="{}" language="none" linenos="False" xml:space="preserve">4.1.1-stable
4.1-stable
4.0.3-stable
4.0.2-stable
4.0.1-stable
4.0-stable
3.5.2-stable
3.5.1-stable
3.5-stable
3.4.5-stable
3.4.4-stable
3.4.3-stable
3.4.2-stable
3.4.1-stable
3.4-stable
3.3.4-stable
3.3.3-stable
3.3.2-stable
3.3.1-stable
3.3-stable
3.2-stable
3.1-stable
3.0-stable</literal_block>
                <paragraph>You can also use this Bash function to retrieve the Git commit hash of a
                    pre-release build (add it to your <literal>$HOME/.bashrc</literal> or similar):</paragraph>
                <literal_block force="False" language="shell" linenos="False" xml:space="preserve">gd_snapshot_commit() {
    curl -s https://downloads.tuxfamily.org/godotengine/$1/$2/README.txt \
        | grep 'from commit' \
        | sed 's/^Built from commit \(.*\)\.$/\1/'
}</literal_block>
                <paragraph>示例用法：</paragraph>
                <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">$ gd_snapshot_commit 4.0 beta4</literal_block>
                <paragraph>To refer to the latest state of the master branch, you can use <literal>master</literal>
                    instead of a commit hash. Note that unlike tagged releases or snapshot commit
                    hashes, <literal>master</literal> is a perpetually moving target.</paragraph>
            </section>
            <section ids="build-the-engine" names="build\ the\ engine 构建引擎">
                <title>构建引擎</title>
                <paragraph><reference internal="True" refuri="../development/compiling/getting_source#doc-getting-source"><inline classes="std std-ref">使用 Git 获取 Godot 的源代码</inline></reference>。完成后，在终端窗口中，使用 <literal>cd</literal> 进入 Godot 仓库文件夹并输入以下命令：</paragraph>
                <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve"># &lt;good commit hash&gt; is hash of the build that works as expected.
# &lt;bad commit hash&gt; is hash of the build exhibiting the bug.
$ git bisect start
$ git bisect good &lt;good commit hash&gt;
$ git bisect bad &lt;bad commit hash&gt;</literal_block>
                <paragraph>编译 Godot。这假定你已经设置好了构建环境：</paragraph>
                <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">$ scons</literal_block>
            </section>
            <section ids="run-the-engine" names="run\ the\ engine 运行引擎">
                <title>运行引擎</title>
                <paragraph>运行位于 <literal>bin/</literal> 文件夹中的二进制文件并尝试重现该错误。</paragraph>
                <note>
                    <paragraph><reference internal="True" refuri="../development/compiling/introduction_to_the_buildsystem#doc-introduction-to-the-buildsystem-resulting-binary"><inline classes="std std-ref">Double-check the output file name</inline></reference>
                        in <literal>bin/</literal> to make sure you're actually running the binary you've just compiled.
                        Different Godot versions will output binaries with different names.</paragraph>
                </note>
                <paragraph>如果构建<strong>仍然</strong>显示错误，请运行以下命令：</paragraph>
                <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">$ git bisect bad</literal_block>
                <paragraph>如果构建<strong>没有</strong>显示错误，请运行以下命令：</paragraph>
                <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">$ git bisect good</literal_block>
                <paragraph>输入上述命令之一后,Git 将切换到其他提交. 现在, 你应该再次构建 Godot, 尝试重现 Bug, 然后根据结果输入"git 一部分好 "或"git 一次坏". 你必须重复几次. 提交范围越长, 所需的步骤就越多.5 到 10 个步骤通常足以查找大多数回归;Git 将提醒你剩余步骤数(在最坏的情况下).</paragraph>
                <paragraph>完成足够的步骤后,Git将在出现回归的位置显示提交哈希. 将此提交哈希值写成对一分为二的GitHub问题的评论. 这将有助于解决问题. 再次感谢你对Godot的贡献:)</paragraph>
                <note>
                    <paragraph>你可以在 <literal>git bisect</literal> 上阅读完整文档, <reference name="这里" refuri="https://git-scm.com/docs/git-bisect">这里</reference> .</paragraph>
                </note>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
